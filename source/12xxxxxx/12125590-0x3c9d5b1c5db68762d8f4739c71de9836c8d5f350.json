{"status":"1","message":"OK","result":[{"SourceCode":"{\"FlashbotsCheckAndSend.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\npragma experimental ABIEncoderV2;\\n\\n/*\\n  Copyright 2021 Flashbots: Scott Bigelow (scott@flashbots.net).\\n*/\\n\\n// This contract performs one or many staticcall\\u0027s, compares their output, and pays\\n// the miner directly if all calls exactly match the specified result\\n// For how to use this script, read the Flashbots searcher docs: https://hackmd.io/@flashbots/ryxxWuD6D\\ncontract FlashbotsCheckAndSend {\\n    function check32BytesAndSend(\\n        address _target,\\n        bytes memory _payload,\\n        bytes32 _resultMatch\\n    ) external payable {\\n        _check32Bytes(_target, _payload, _resultMatch);\\n        block.coinbase.transfer(msg.value);\\n    }\\n\\n    function check32BytesAndSendMulti(\\n        address[] memory _targets,\\n        bytes[] memory _payloads,\\n        bytes32[] memory _resultMatches\\n    ) external payable {\\n        require(_targets.length == _payloads.length);\\n        require(_targets.length == _resultMatches.length);\\n        for (uint256 i = 0; i \\u003c _targets.length; i++) {\\n            _check32Bytes(_targets[i], _payloads[i], _resultMatches[i]);\\n        }\\n        block.coinbase.transfer(msg.value);\\n    }\\n\\n    function checkBytesAndSend(\\n        address _target,\\n        bytes memory _payload,\\n        bytes memory _resultMatch\\n    ) external payable {\\n        _checkBytes(_target, _payload, _resultMatch);\\n        block.coinbase.transfer(msg.value);\\n    }\\n\\n    function checkBytesAndSendMulti(\\n        address[] memory _targets,\\n        bytes[] memory _payloads,\\n        bytes[] memory _resultMatches\\n    ) external payable {\\n        require(_targets.length == _payloads.length);\\n        require(_targets.length == _resultMatches.length);\\n        for (uint256 i = 0; i \\u003c _targets.length; i++) {\\n            _checkBytes(_targets[i], _payloads[i], _resultMatches[i]);\\n        }\\n        block.coinbase.transfer(msg.value);\\n    }\\n\\n    // ======== INTERNAL ========\\n\\n    function _check32Bytes(\\n        address _target,\\n        bytes memory _payload,\\n        bytes32 _resultMatch\\n    ) internal view {\\n        (bool _success, bytes memory _response) = _target.staticcall(_payload);\\n        require(_success, \\\"!success\\\");\\n        require(_response.length \\u003e= 32, \\\"response less than 32 bytes\\\");\\n        bytes32 _responseScalar;\\n        assembly {\\n            _responseScalar := mload(add(_response, 0x20))\\n        }\\n        require(_responseScalar == _resultMatch, \\\"response mismatch\\\");\\n    }\\n\\n    function _checkBytes(\\n        address _target,\\n        bytes memory _payload,\\n        bytes memory _resultMatch\\n    ) internal view {\\n        (bool _success, bytes memory _response) = _target.staticcall(_payload);\\n        require(_success, \\\"!success\\\");\\n        require(\\n            keccak256(_resultMatch) == keccak256(_response),\\n            \\\"response bytes mismatch\\\"\\n        );\\n    }\\n}\\n\"},\"IWETH.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.3;\\n\\ninterface IWETH {\\n    function name() external view returns (string memory);\\n\\n    function approve(address guy, uint256 wad) external returns (bool);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external returns (bool);\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function decimals() external view returns (uint8);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n\\n    function deposit() external payable;\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\\n\"},\"MEVBriber.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.3;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./FlashbotsCheckAndSend.sol\\\";\\nimport \\\"./IWETH.sol\\\";\\n\\n/*\\n  Copyright 2021 Kendrick Tan (kendricktrh@gmail.com).\\n\\n  This contract is an extension of flashbot\\u0027s FlashbotsCheckAndSend.sol\\n  This contract takes in WETH instead of ETH so that transactions can be signed via a browser.\\n  But needs to be approved beforehand.\\n*/\\n\\ncontract MEVBriber is FlashbotsCheckAndSend {\\n    IWETH public constant weth =\\n        IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    receive() external payable {}\\n\\n    function check32BytesAndSendWETH(\\n        uint256 _bribeAmount,\\n        address _target,\\n        bytes memory _payload,\\n        bytes32 _resultMatch\\n    ) external {\\n        _check32Bytes(_target, _payload, _resultMatch);\\n        weth.transferFrom(msg.sender, address(this), _bribeAmount);\\n        weth.withdraw(_bribeAmount);\\n        block.coinbase.transfer(_bribeAmount);\\n    }\\n\\n    function check32BytesAndSendMultiWETH(\\n        uint256 _bribeAmount,\\n        address[] memory _targets,\\n        bytes[] memory _payloads,\\n        bytes32[] memory _resultMatches\\n    ) external {\\n        require(_targets.length == _payloads.length);\\n        require(_targets.length == _resultMatches.length);\\n        for (uint256 i = 0; i \\u003c _targets.length; i++) {\\n            _check32Bytes(_targets[i], _payloads[i], _resultMatches[i]);\\n        }\\n        weth.transferFrom(msg.sender, address(this), _bribeAmount);\\n        weth.withdraw(_bribeAmount);\\n        block.coinbase.transfer(_bribeAmount);\\n    }\\n\\n    function checkBytesAndSendWETH(\\n        uint256 _bribeAmount,\\n        address _target,\\n        bytes memory _payload,\\n        bytes memory _resultMatch\\n    ) external {\\n        _checkBytes(_target, _payload, _resultMatch);\\n        weth.transferFrom(msg.sender, address(this), _bribeAmount);\\n        weth.withdraw(_bribeAmount);\\n        block.coinbase.transfer(_bribeAmount);\\n    }\\n\\n    function checkBytesAndSendMultiWETH(\\n        uint256 _bribeAmount,\\n        address[] memory _targets,\\n        bytes[] memory _payloads,\\n        bytes[] memory _resultMatches\\n    ) external {\\n        require(_targets.length == _payloads.length);\\n        require(_targets.length == _resultMatches.length);\\n        for (uint256 i = 0; i \\u003c _targets.length; i++) {\\n            _checkBytes(_targets[i], _payloads[i], _resultMatches[i]);\\n        }\\n        weth.transferFrom(msg.sender, address(this), _bribeAmount);\\n        weth.withdraw(_bribeAmount);\\n        block.coinbase.transfer(_bribeAmount);\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_resultMatch\",\"type\":\"bytes32\"}],\"name\":\"check32BytesAndSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_payloads\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_resultMatches\",\"type\":\"bytes32[]\"}],\"name\":\"check32BytesAndSendMulti\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bribeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_payloads\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_resultMatches\",\"type\":\"bytes32[]\"}],\"name\":\"check32BytesAndSendMultiWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bribeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_resultMatch\",\"type\":\"bytes32\"}],\"name\":\"check32BytesAndSendWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_resultMatch\",\"type\":\"bytes\"}],\"name\":\"checkBytesAndSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_payloads\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_resultMatches\",\"type\":\"bytes[]\"}],\"name\":\"checkBytesAndSendMulti\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bribeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_payloads\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_resultMatches\",\"type\":\"bytes[]\"}],\"name\":\"checkBytesAndSendMultiWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bribeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_resultMatch\",\"type\":\"bytes\"}],\"name\":\"checkBytesAndSendWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MEVBriber","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7c3df94e32c47f5b95025912f513ed9e4f85ecad2261ee5801fd06ba1cd10c9e"}]}