{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPLv3\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        \r\n        \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        \r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ncontract Constants {\r\n    uint8 public constant N_COINS = 3;\r\n    uint8 public constant DEFAULT_DECIMALS = 18; \r\n    uint256 public constant DEFAULT_DECIMALS_FACTOR = uint256(10)**DEFAULT_DECIMALS;\r\n    uint8 public constant CHAINLINK_PRICE_DECIMALS = 8;\r\n    uint256 public constant CHAINLINK_PRICE_DECIMAL_FACTOR = uint256(10)**CHAINLINK_PRICE_DECIMALS;\r\n    uint8 public constant PERCENTAGE_DECIMALS = 4;\r\n    uint256 public constant PERCENTAGE_DECIMAL_FACTOR = uint256(10)**PERCENTAGE_DECIMALS;\r\n    uint256 public constant CURVE_RATIO_DECIMALS = 6;\r\n    uint256 public constant CURVE_RATIO_DECIMALS_FACTOR = uint256(10)**CURVE_RATIO_DECIMALS;\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IController {\r\n    function stablecoins() external view returns (address[3] memory);\r\n\r\n    function vaults() external view returns (address[3] memory);\r\n\r\n    function underlyingVaults(uint256 i) external view returns (address vault);\r\n\r\n    function curveVault() external view returns (address);\r\n\r\n    function pnl() external view returns (address);\r\n\r\n    function insurance() external view returns (address);\r\n\r\n    function lifeGuard() external view returns (address);\r\n\r\n    function buoy() external view returns (address);\r\n\r\n    function reward() external view returns (address);\r\n\r\n    function isValidBigFish(\r\n        bool pwrd,\r\n        bool deposit,\r\n        uint256 amount\r\n    ) external view returns (bool);\r\n\r\n    function withdrawHandler() external view returns (address);\r\n\r\n    function emergencyHandler() external view returns (address);\r\n\r\n    function depositHandler() external view returns (address);\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function gTokenTotalAssets() external view returns (uint256);\r\n\r\n    function eoaOnly(address sender) external;\r\n\r\n    function getSkimPercent() external view returns (uint256);\r\n\r\n    function gToken(bool _pwrd) external view returns (address);\r\n\r\n    function emergencyState() external view returns (bool);\r\n\r\n    function deadCoin() external view returns (uint256);\r\n\r\n    function distributeStrategyGainLoss(uint256 gain, uint256 loss) external;\r\n\r\n    function burnGToken(\r\n        bool pwrd,\r\n        bool all,\r\n        address account,\r\n        uint256 amount,\r\n        uint256 bonus\r\n    ) external;\r\n\r\n    function mintGToken(\r\n        bool pwrd,\r\n        address account,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function getUserAssets(bool pwrd, address account) external view returns (uint256 deductUsd);\r\n\r\n    function referrals(address account) external view returns (address);\r\n\r\n    function addReferral(address account, address referral) external;\r\n\r\n    function getStrategiesTargetRatio() external view returns (uint256[] memory);\r\n\r\n    function withdrawalFee(bool pwrd) external view returns (uint256);\r\n\r\n    function validGTokenDecrease(uint256 amount) external view returns (bool);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IPausable {\r\n    function paused() external view returns (bool);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ncontract Controllable is Ownable {\r\n    address public controller;\r\n\r\n    event ChangeController(address indexed oldController, address indexed newController);\r\n\r\n    modifier whenNotPaused() {\r\n        require(!_pausable().paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(_pausable().paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    function ctrlPaused() public view returns (bool) {\r\n        return _pausable().paused();\r\n    }\r\n\r\n    function setController(address newController) external onlyOwner {\r\n        require(newController != address(0), \"setController: !0x\");\r\n        address oldController = controller;\r\n        controller = newController;\r\n        emit ChangeController(oldController, newController);\r\n    }\r\n\r\n    function _controller() internal view returns (IController) {\r\n        require(controller != address(0), \"Controller not set\");\r\n        return IController(controller);\r\n    }\r\n\r\n    function _pausable() internal view returns (IPausable) {\r\n        require(controller != address(0), \"Controller not set\");\r\n        return IPausable(controller);\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IERC20Detailed {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface ILifeGuard {\r\n    function assets(uint256 i) external view returns (uint256);\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function getAssets() external view returns (uint256[3] memory);\r\n\r\n    function totalAssetsUsd() external view returns (uint256);\r\n\r\n    function availableUsd() external view returns (uint256 dollar);\r\n\r\n    function availableLP() external view returns (uint256);\r\n\r\n    function depositStable(bool rebalance) external returns (uint256);\r\n\r\n    function investToCurveVault() external;\r\n\r\n    function distributeCurveVault(uint256 amount, uint256[3] memory delta) external returns (uint256[3] memory);\r\n\r\n    function deposit() external returns (uint256 usdAmount);\r\n\r\n    function withdrawSingleByLiquidity(\r\n        uint256 i,\r\n        uint256 minAmount,\r\n        address recipient\r\n    ) external returns (uint256 usdAmount, uint256 amount);\r\n\r\n    function withdrawSingleByExchange(\r\n        uint256 i,\r\n        uint256 minAmount,\r\n        address recipient\r\n    ) external returns (uint256 usdAmount, uint256 amount);\r\n\r\n    function invest(uint256 whaleDepositAmount, uint256[3] calldata delta) external returns (uint256 dollarAmount);\r\n\r\n    function getBuoy() external view returns (address);\r\n\r\n    function investSingle(\r\n        uint256[3] calldata inAmounts,\r\n        uint256 i,\r\n        uint256 j\r\n    ) external returns (uint256 dollarAmount);\r\n\r\n    function investToCurveVaultTrigger() external view returns (bool _invest);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nstruct SystemState {\r\n    uint256 totalCurrentAssetsUsd;\r\n    uint256 curveCurrentAssetsUsd;\r\n    uint256 lifeguardCurrentAssetsUsd;\r\n    uint256[3] vaultCurrentAssets;\r\n    uint256[3] vaultCurrentAssetsUsd;\r\n    uint256 rebalanceThreshold;\r\n    uint256 utilisationRatio;\r\n    uint256 targetBuffer;\r\n    uint256[3] stablePercents;\r\n    uint256 curvePercent;\r\n}\r\n\r\nstruct ExposureState {\r\n    uint256[3] stablecoinExposure;\r\n    uint256[] protocolExposure;\r\n    uint256 curveExposure;\r\n    bool stablecoinExposed;\r\n    bool protocolExposed;\r\n}\r\n\r\nstruct AllocationState {\r\n    uint256[] strategyTargetRatio;\r\n    bool needProtocolWithdrawal;\r\n    uint256 protocolExposedIndex;\r\n    uint256[3] protocolWithdrawalUsd;\r\n    StablecoinAllocationState stableState;\r\n}\r\n\r\nstruct StablecoinAllocationState {\r\n    uint256 swapInTotalAmountUsd;\r\n    uint256[3] swapInAmounts;\r\n    uint256[3] swapInAmountsUsd;\r\n    uint256[3] swapOutPercents;\r\n    uint256[3] vaultsTargetUsd;\r\n    uint256 curveTargetUsd;\r\n    uint256 curveTargetDeltaUsd;\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IExposure {\r\n    function calcRiskExposure(SystemState calldata sysState) external view returns (ExposureState memory expState);\r\n\r\n    function getExactRiskExposure(SystemState calldata sysState) external view returns (ExposureState memory expState);\r\n\r\n    function getUnifiedAssets(address[3] calldata vaults)\r\n        external\r\n        view\r\n        returns (uint256 unifiedTotalAssets, uint256[3] memory unifiedAssets);\r\n\r\n    function sortVaultsByDelta(\r\n        bool bigFirst,\r\n        uint256 unifiedTotalAssets,\r\n        uint256[3] calldata unifiedAssets,\r\n        uint256[3] calldata targetPercents\r\n    ) external pure returns (uint256[3] memory vaultIndexes);\r\n\r\n    function calcRoughDelta(\r\n        uint256[3] calldata targets,\r\n        address[3] calldata vaults,\r\n        uint256 withdrawUsd\r\n    ) external view returns (uint256[3] memory);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IVault {\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function withdraw(uint256 amount, address recipient) external;\r\n\r\n    function withdrawByStrategyOrder(\r\n        uint256 amount,\r\n        address recipient,\r\n        bool reversed\r\n    ) external;\r\n\r\n    function withdrawByStrategyIndex(\r\n        uint256 amount,\r\n        address recipient,\r\n        uint256 strategyIndex\r\n    ) external;\r\n\r\n    function deposit(uint256 amount) external;\r\n\r\n    function updateStrategyRatio(uint256[] calldata strategyRetios) external;\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function getStrategiesLength() external view returns (uint256);\r\n\r\n    function strategyHarvestTrigger(uint256 index, uint256 callCost) external view returns (bool);\r\n\r\n    function strategyHarvest(uint256 index) external returns (bool);\r\n\r\n    function getStrategyAssets(uint256 index) external view returns (uint256);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function vault() external view returns (address);\r\n\r\n    function investTrigger() external view returns (bool);\r\n\r\n    function invest() external;\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IBuoy {\r\n    function safetyCheck() external view returns (bool);\r\n\r\n    function updateRatios() external returns (bool);\r\n\r\n    function updateRatiosWithTolerance(uint256 tolerance) external returns (bool);\r\n\r\n    function lpToUsd(uint256 inAmount) external view returns (uint256);\r\n\r\n    function usdToLp(uint256 inAmount) external view returns (uint256);\r\n\r\n    function stableToUsd(uint256[3] calldata inAmount, bool deposit) external view returns (uint256);\r\n\r\n    function stableToLp(uint256[3] calldata inAmount, bool deposit) external view returns (uint256);\r\n\r\n    function singleStableFromLp(uint256 inAmount, int128 i) external view returns (uint256);\r\n\r\n    function getVirtualPrice() external view returns (uint256);\r\n\r\n    function singleStableFromUsd(uint256 inAmount, int128 i) external view returns (uint256);\r\n\r\n    function singleStableToUsd(uint256 inAmount, uint256 i) external view returns (uint256);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ncontract Exposure is Constants, Controllable, IExposure {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public protocolCount;\r\n    uint256 public makerUSDCExposure;\r\n\r\n    event LogNewProtocolCount(uint256 count);\r\n    event LogNewMakerExposure(uint256 exposure);\r\n\r\n    function setProtocolCount(uint256 _protocolCount) external onlyOwner {\r\n        protocolCount = _protocolCount;\r\n        emit LogNewProtocolCount(_protocolCount);\r\n    }\r\n\r\n    function setMakerUSDCExposure(uint256 _makerUSDCExposure) external onlyOwner {\r\n        makerUSDCExposure = _makerUSDCExposure;\r\n        emit LogNewMakerExposure(_makerUSDCExposure);\r\n    }\r\n\r\n    function getExactRiskExposure(SystemState calldata sysState)\r\n        external\r\n        view\r\n        override\r\n        returns (ExposureState memory expState)\r\n    {\r\n        expState = _calcRiskExposure(sysState, false);\r\n        ILifeGuard lifeguard = ILifeGuard(_controller().lifeGuard());\r\n        IBuoy buoy = IBuoy(_controller().buoy());\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            uint256 assets = lifeguard.assets(i);\r\n            uint256 assetsUsd = buoy.singleStableToUsd(assets, i);\r\n            expState.stablecoinExposure[i] = expState.stablecoinExposure[i].add(\r\n                assetsUsd.mul(PERCENTAGE_DECIMAL_FACTOR).div(sysState.totalCurrentAssetsUsd)\r\n            );\r\n        }\r\n    }\r\n\r\n    function calcRiskExposure(SystemState calldata sysState)\r\n        external\r\n        view\r\n        override\r\n        returns (ExposureState memory expState)\r\n    {\r\n        expState = _calcRiskExposure(sysState, true);\r\n\r\n        \r\n        (expState.stablecoinExposed, expState.protocolExposed) = isExposed(\r\n            sysState.rebalanceThreshold,\r\n            expState.stablecoinExposure,\r\n            expState.protocolExposure,\r\n            expState.curveExposure\r\n        );\r\n    }\r\n\r\n    function getUnifiedAssets(address[N_COINS] calldata vaults)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 unifiedTotalAssets, uint256[N_COINS] memory unifiedAssets)\r\n    {\r\n        \r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            uint256 assets = IVault(vaults[i]).totalAssets();\r\n            unifiedAssets[i] = assets.mul(DEFAULT_DECIMALS_FACTOR).div(\r\n                uint256(10)**IERC20Detailed(IVault(vaults[i]).token()).decimals()\r\n            );\r\n            unifiedTotalAssets = unifiedTotalAssets.add(unifiedAssets[i]);\r\n        }\r\n    }\r\n\r\n    function calcRoughDelta(\r\n        uint256[N_COINS] calldata targets,\r\n        address[N_COINS] calldata vaults,\r\n        uint256 withdrawUsd\r\n    ) external view override returns (uint256[N_COINS] memory delta) {\r\n        (uint256 totalAssets, uint256[N_COINS] memory vaultTotalAssets) = getUnifiedAssets(vaults);\r\n\r\n        require(totalAssets > withdrawUsd, \"totalAssets < withdrawalUsd\");\r\n        totalAssets = totalAssets.sub(withdrawUsd);\r\n        uint256 totalDelta;\r\n        for (uint256 i; i < N_COINS; i++) {\r\n            uint256 target = totalAssets.mul(targets[i]).div(PERCENTAGE_DECIMAL_FACTOR);\r\n            if (vaultTotalAssets[i] > target) {\r\n                delta[i] = vaultTotalAssets[i].sub(target);\r\n                totalDelta = totalDelta.add(delta[i]);\r\n            }\r\n        }\r\n        uint256 percent = PERCENTAGE_DECIMAL_FACTOR;\r\n        for (uint256 i; i < N_COINS - 1; i++) {\r\n            if (delta[i] > 0) {\r\n                delta[i] = delta[i].mul(PERCENTAGE_DECIMAL_FACTOR).div(totalDelta);\r\n                percent = percent.sub(delta[i]);\r\n            }\r\n        }\r\n        delta[N_COINS - 1] = percent;\r\n        return delta;\r\n    }\r\n\r\n    function sortVaultsByDelta(\r\n        bool bigFirst,\r\n        uint256 unifiedTotalAssets,\r\n        uint256[N_COINS] calldata unifiedAssets,\r\n        uint256[N_COINS] calldata targetPercents\r\n    ) external pure override returns (uint256[N_COINS] memory vaultIndexes) {\r\n        uint256 maxIndex;\r\n        uint256 minIndex;\r\n        int256 maxDelta = type(int256).min;\r\n        int256 minDelta = type(int256).max;\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            \r\n            int256 delta = int256(unifiedAssets[i]) -\r\n                int256(unifiedTotalAssets.mul(targetPercents[i]).div(PERCENTAGE_DECIMAL_FACTOR));\r\n            \r\n            if (delta > maxDelta) {\r\n                maxDelta = delta;\r\n                maxIndex = i;\r\n            }\r\n            if (delta < minDelta) {\r\n                minDelta = delta;\r\n                minIndex = i;\r\n            }\r\n        }\r\n        if (bigFirst) {\r\n            vaultIndexes[0] = maxIndex;\r\n            vaultIndexes[2] = minIndex;\r\n        } else {\r\n            vaultIndexes[0] = minIndex;\r\n            vaultIndexes[2] = maxIndex;\r\n        }\r\n        vaultIndexes[1] = N_COINS - maxIndex - minIndex;\r\n    }\r\n\r\n    function calculatePercentOfSystem(\r\n        address vault,\r\n        uint256 index,\r\n        uint256 vaultAssetsPercent,\r\n        uint256 vaultAssets\r\n    ) private view returns (uint256 percentOfSystem) {\r\n        if (vaultAssets == 0) return 0;\r\n        uint256 strategyAssetsPercent = IVault(vault).getStrategyAssets(index).mul(PERCENTAGE_DECIMAL_FACTOR).div(\r\n            vaultAssets\r\n        );\r\n\r\n        percentOfSystem = vaultAssetsPercent.mul(strategyAssetsPercent).div(PERCENTAGE_DECIMAL_FACTOR);\r\n    }\r\n\r\n    function calculateStableCoinExposure(uint256[N_COINS] memory directlyExposure, uint256 curveExposure)\r\n        private\r\n        view\r\n        returns (uint256[N_COINS] memory stableCoinExposure)\r\n    {\r\n        uint256 maker = directlyExposure[0].mul(makerUSDCExposure).div(PERCENTAGE_DECIMAL_FACTOR);\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            uint256 indirectExposure = curveExposure;\r\n            if (i == 1) {\r\n                indirectExposure = indirectExposure.add(maker);\r\n            }\r\n            stableCoinExposure[i] = directlyExposure[i].add(indirectExposure);\r\n        }\r\n    }\r\n\r\n    function isExposed(\r\n        uint256 rebalanceThreshold,\r\n        uint256[N_COINS] memory stableCoinExposure,\r\n        uint256[] memory protocolExposure,\r\n        uint256 curveExposure\r\n    ) private pure returns (bool stablecoinExposed, bool protocolExposed) {\r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            if (stableCoinExposure[i] > rebalanceThreshold) {\r\n                stablecoinExposed = true;\r\n                break;\r\n            }\r\n        }\r\n        for (uint256 i = 0; i < protocolExposure.length; i++) {\r\n            if (protocolExposure[i] > rebalanceThreshold) {\r\n                protocolExposed = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!protocolExposed && curveExposure > rebalanceThreshold) protocolExposed = true;\r\n        return (stablecoinExposed, protocolExposed);\r\n    }\r\n\r\n    function _calcRiskExposure(SystemState memory sysState, bool treatLifeguardAsCurve)\r\n        private\r\n        view\r\n        returns (ExposureState memory expState)\r\n    {\r\n        address[N_COINS] memory vaults = _controller().vaults();\r\n        uint256 pCount = protocolCount;\r\n        expState.protocolExposure = new uint256[](pCount);\r\n        if (sysState.totalCurrentAssetsUsd == 0) {\r\n            return expState;\r\n        }\r\n        \r\n        for (uint256 i = 0; i < N_COINS; i++) {\r\n            uint256 vaultAssetsPercent = sysState.vaultCurrentAssetsUsd[i].mul(PERCENTAGE_DECIMAL_FACTOR).div(\r\n                sysState.totalCurrentAssetsUsd\r\n            );\r\n            expState.stablecoinExposure[i] = vaultAssetsPercent;\r\n            \r\n            for (uint256 j = 0; j < pCount; j++) {\r\n                uint256 percentOfSystem = calculatePercentOfSystem(\r\n                    vaults[i],\r\n                    j,\r\n                    vaultAssetsPercent,\r\n                    sysState.vaultCurrentAssets[i]\r\n                );\r\n                expState.protocolExposure[j] = expState.protocolExposure[j].add(percentOfSystem);\r\n            }\r\n        }\r\n        if (treatLifeguardAsCurve) {\r\n            \r\n            \r\n            expState.curveExposure = sysState.curveCurrentAssetsUsd.add(sysState.lifeguardCurrentAssetsUsd);\r\n        } else {\r\n            expState.curveExposure = sysState.curveCurrentAssetsUsd;\r\n        }\r\n        expState.curveExposure = expState.curveExposure.mul(PERCENTAGE_DECIMAL_FACTOR).div(\r\n            sysState.totalCurrentAssetsUsd\r\n        );\r\n\r\n        \r\n        expState.stablecoinExposure = calculateStableCoinExposure(expState.stablecoinExposure, expState.curveExposure);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"ChangeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exposure\",\"type\":\"uint256\"}],\"name\":\"LogNewMakerExposure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"LogNewProtocolCount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHAINLINK_PRICE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAINLINK_PRICE_DECIMAL_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURVE_RATIO_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURVE_RATIO_DECIMALS_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_DECIMALS_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"N_COINS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_DECIMAL_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalCurrentAssetsUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"curveCurrentAssetsUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lifeguardCurrentAssetsUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"vaultCurrentAssets\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"vaultCurrentAssetsUsd\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"rebalanceThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilisationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"stablePercents\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"curvePercent\",\"type\":\"uint256\"}],\"internalType\":\"struct SystemState\",\"name\":\"sysState\",\"type\":\"tuple\"}],\"name\":\"calcRiskExposure\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[3]\",\"name\":\"stablecoinExposure\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[]\",\"name\":\"protocolExposure\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"curveExposure\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stablecoinExposed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"protocolExposed\",\"type\":\"bool\"}],\"internalType\":\"struct ExposureState\",\"name\":\"expState\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"targets\",\"type\":\"uint256[3]\"},{\"internalType\":\"address[3]\",\"name\":\"vaults\",\"type\":\"address[3]\"},{\"internalType\":\"uint256\",\"name\":\"withdrawUsd\",\"type\":\"uint256\"}],\"name\":\"calcRoughDelta\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"delta\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ctrlPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalCurrentAssetsUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"curveCurrentAssetsUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lifeguardCurrentAssetsUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"vaultCurrentAssets\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"vaultCurrentAssetsUsd\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"rebalanceThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilisationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"stablePercents\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"curvePercent\",\"type\":\"uint256\"}],\"internalType\":\"struct SystemState\",\"name\":\"sysState\",\"type\":\"tuple\"}],\"name\":\"getExactRiskExposure\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[3]\",\"name\":\"stablecoinExposure\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[]\",\"name\":\"protocolExposure\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"curveExposure\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"stablecoinExposed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"protocolExposed\",\"type\":\"bool\"}],\"internalType\":\"struct ExposureState\",\"name\":\"expState\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[3]\",\"name\":\"vaults\",\"type\":\"address[3]\"}],\"name\":\"getUnifiedAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unifiedTotalAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"unifiedAssets\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makerUSDCExposure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_makerUSDCExposure\",\"type\":\"uint256\"}],\"name\":\"setMakerUSDCExposure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolCount\",\"type\":\"uint256\"}],\"name\":\"setProtocolCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"bigFirst\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"unifiedTotalAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"unifiedAssets\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"targetPercents\",\"type\":\"uint256[3]\"}],\"name\":\"sortVaultsByDelta\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"vaultIndexes\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Exposure","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://32ab98c0ec0d78c4380df5f45628e2713b0b9189f6e2ac304793d0158c7c2ab0"}]}