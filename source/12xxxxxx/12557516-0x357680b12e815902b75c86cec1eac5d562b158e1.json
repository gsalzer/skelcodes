{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [// importANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * // importANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * // importANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/GSN/Context.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/math/Math.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/SafeCast.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and `int256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128) {\r\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return int128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64) {\r\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return int64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32) {\r\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return int32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16) {\r\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return int16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8) {\r\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return int8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/lib/AddressArrayUtils.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n/**\r\n * @title AddressArrayUtils\r\n * @author Set Protocol\r\n *\r\n * Utility functions to handle Address Arrays\r\n *\r\n * CHANGELOG:\r\n * - 4/27/21: Added validatePairsWithArray methods\r\n */\r\nlibrary AddressArrayUtils {\r\n\r\n    /**\r\n     * Finds the index of the first occurrence of the given element.\r\n     * @param A The input array to search\r\n     * @param a The value to find\r\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\r\n     */\r\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\r\n        uint256 length = A.length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (A[i] == a) {\r\n                return (i, true);\r\n            }\r\n        }\r\n        return (uint256(-1), false);\r\n    }\r\n\r\n    /**\r\n    * Returns true if the value is present in the list. Uses indexOf internally.\r\n    * @param A The input array to search\r\n    * @param a The value to find\r\n    * @return Returns isIn for the first occurrence starting from index 0\r\n    */\r\n    function contains(address[] memory A, address a) internal pure returns (bool) {\r\n        (, bool isIn) = indexOf(A, a);\r\n        return isIn;\r\n    }\r\n\r\n    /**\r\n    * Returns true if there are 2 elements that are the same in an array\r\n    * @param A The input array to search\r\n    * @return Returns boolean for the first occurrence of a duplicate\r\n    */\r\n    function hasDuplicate(address[] memory A) internal pure returns(bool) {\r\n        require(A.length > 0, \"A is empty\");\r\n\r\n        for (uint256 i = 0; i < A.length - 1; i++) {\r\n            address current = A[i];\r\n            for (uint256 j = i + 1; j < A.length; j++) {\r\n                if (current == A[j]) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param A The input array to search\r\n     * @param a The address to remove\r\n     * @return Returns the array with the object removed.\r\n     */\r\n    function remove(address[] memory A, address a)\r\n        internal\r\n        pure\r\n        returns (address[] memory)\r\n    {\r\n        (uint256 index, bool isIn) = indexOf(A, a);\r\n        if (!isIn) {\r\n            revert(\"Address not in array.\");\r\n        } else {\r\n            (address[] memory _A,) = pop(A, index);\r\n            return _A;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param A The input array to search\r\n     * @param a The address to remove\r\n     */\r\n    function removeStorage(address[] storage A, address a)\r\n        internal\r\n    {\r\n        (uint256 index, bool isIn) = indexOf(A, a);\r\n        if (!isIn) {\r\n            revert(\"Address not in array.\");\r\n        } else {\r\n            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\r\n            if (index != lastIndex) { A[index] = A[lastIndex]; }\r\n            A.pop();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Removes specified index from array\r\n    * @param A The input array to search\r\n    * @param index The index to remove\r\n    * @return Returns the new array and the removed entry\r\n    */\r\n    function pop(address[] memory A, uint256 index)\r\n        internal\r\n        pure\r\n        returns (address[] memory, address)\r\n    {\r\n        uint256 length = A.length;\r\n        require(index < A.length, \"Index must be < A length\");\r\n        address[] memory newAddresses = new address[](length - 1);\r\n        for (uint256 i = 0; i < index; i++) {\r\n            newAddresses[i] = A[i];\r\n        }\r\n        for (uint256 j = index + 1; j < length; j++) {\r\n            newAddresses[j - 1] = A[j];\r\n        }\r\n        return (newAddresses, A[index]);\r\n    }\r\n\r\n    /**\r\n     * Returns the combination of the two arrays\r\n     * @param A The first array\r\n     * @param B The second array\r\n     * @return Returns A extended by B\r\n     */\r\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\r\n        uint256 aLength = A.length;\r\n        uint256 bLength = B.length;\r\n        address[] memory newAddresses = new address[](aLength + bLength);\r\n        for (uint256 i = 0; i < aLength; i++) {\r\n            newAddresses[i] = A[i];\r\n        }\r\n        for (uint256 j = 0; j < bLength; j++) {\r\n            newAddresses[aLength + j] = B[j];\r\n        }\r\n        return newAddresses;\r\n    }\r\n\r\n    /**\r\n     * Validate that address and uint array lengths match. Validate address array is not empty\r\n     * and contains no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of uint\r\n     */\r\n    function validatePairsWithArray(address[] memory A, uint[] memory B) internal pure {\r\n        require(A.length == B.length, \"Array length mismatch\");\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate that address and bool array lengths match. Validate address array is not empty\r\n     * and contains no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of bool\r\n     */\r\n    function validatePairsWithArray(address[] memory A, bool[] memory B) internal pure {\r\n        require(A.length == B.length, \"Array length mismatch\");\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate that address and string array lengths match. Validate address array is not empty\r\n     * and contains no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of strings\r\n     */\r\n    function validatePairsWithArray(address[] memory A, string[] memory B) internal pure {\r\n        require(A.length == B.length, \"Array length mismatch\");\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate that address array lengths match, and calling address array are not empty\r\n     * and contain no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of addresses\r\n     */\r\n    function validatePairsWithArray(address[] memory A, address[] memory B) internal pure {\r\n        require(A.length == B.length, \"Array length mismatch\");\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate that address and bytes array lengths match. Validate address array is not empty\r\n     * and contains no duplicate elements.\r\n     *\r\n     * @param A         Array of addresses\r\n     * @param B         Array of bytes\r\n     */\r\n    function validatePairsWithArray(address[] memory A, bytes[] memory B) internal pure {\r\n        require(A.length == B.length, \"Array length mismatch\");\r\n        _validateLengthAndUniqueness(A);\r\n    }\r\n\r\n    /**\r\n     * Validate address array is not empty and contains no duplicate elements.\r\n     *\r\n     * @param A          Array of addresses\r\n     */\r\n    function _validateLengthAndUniqueness(address[] memory A) internal pure {\r\n        require(A.length > 0, \"Array length must be > 0\");\r\n        require(!hasDuplicate(A), \"Cannot duplicate addresses\");\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/ISetToken.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n\r\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @title ISetToken\r\n * @author Set Protocol\r\n *\r\n * Interface for operating with SetTokens.\r\n */\r\ninterface ISetToken is IERC20 {\r\n\r\n    /* ============ Enums ============ */\r\n\r\n    enum ModuleState {\r\n        NONE,\r\n        PENDING,\r\n        INITIALIZED\r\n    }\r\n\r\n    /* ============ Structs ============ */\r\n    /**\r\n     * The base definition of a SetToken Position\r\n     *\r\n     * @param component           Address of token in the Position\r\n     * @param module              If not in default state, the address of associated module\r\n     * @param unit                Each unit is the # of components per 10^18 of a SetToken\r\n     * @param positionState       Position ENUM. Default is 0; External is 1\r\n     * @param data                Arbitrary data\r\n     */\r\n    struct Position {\r\n        address component;\r\n        address module;\r\n        int256 unit;\r\n        uint8 positionState;\r\n        bytes data;\r\n    }\r\n\r\n    /**\r\n     * A struct that stores a component's cash position details and external positions\r\n     * This data structure allows O(1) access to a component's cash position units and \r\n     * virtual units.\r\n     *\r\n     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\r\n     *                                  updating all units at once via the position multiplier. Virtual units are achieved\r\n     *                                  by dividing a \"real\" value by the \"positionMultiplier\"\r\n     * @param componentIndex            \r\n     * @param externalPositionModules   List of external modules attached to each external position. Each module\r\n     *                                  maps to an external position\r\n     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\r\n     */\r\n    struct ComponentPosition {\r\n      int256 virtualUnit;\r\n      address[] externalPositionModules;\r\n      mapping(address => ExternalPosition) externalPositions;\r\n    }\r\n\r\n    /**\r\n     * A struct that stores a component's external position details including virtual unit and any\r\n     * auxiliary data.\r\n     *\r\n     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\r\n     * @param data              Arbitrary data\r\n     */\r\n    struct ExternalPosition {\r\n      int256 virtualUnit;\r\n      bytes data;\r\n    }\r\n\r\n\r\n    /* ============ Functions ============ */\r\n    \r\n    function addComponent(address _component) external;\r\n    function removeComponent(address _component) external;\r\n    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\r\n    function addExternalPositionModule(address _component, address _positionModule) external;\r\n    function removeExternalPositionModule(address _component, address _positionModule) external;\r\n    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;\r\n    function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;\r\n\r\n    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\r\n\r\n    function editPositionMultiplier(int256 _newMultiplier) external;\r\n\r\n    function mint(address _account, uint256 _quantity) external;\r\n    function burn(address _account, uint256 _quantity) external;\r\n\r\n    function lock() external;\r\n    function unlock() external;\r\n\r\n    function addModule(address _module) external;\r\n    function removeModule(address _module) external;\r\n    function initializeModule() external;\r\n\r\n    function setManager(address _manager) external;\r\n\r\n    function manager() external view returns (address);\r\n    function moduleStates(address _module) external view returns (ModuleState);\r\n    function getModules() external view returns (address[] memory);\r\n    \r\n    function getDefaultPositionRealUnit(address _component) external view returns(int256);\r\n    function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);\r\n    function getComponents() external view returns(address[] memory);\r\n    function getExternalPositionModules(address _component) external view returns(address[] memory);\r\n    function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);\r\n    function isExternalPositionModule(address _component, address _module) external view returns(bool);\r\n    function isComponent(address _component) external view returns(bool);\r\n    \r\n    function positionMultiplier() external view returns (int256);\r\n    function getPositions() external view returns (Position[] memory);\r\n    function getTotalComponentRealUnits(address _component) external view returns(int256);\r\n\r\n    function isInitializedModule(address _module) external view returns(bool);\r\n    function isPendingModule(address _module) external view returns(bool);\r\n    function isLocked() external view returns (bool);\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IBaseManager.sol\r\n\r\n/*\r\n    Copyright 2021 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n\r\n// import { ISetToken } from \"contracts/interfaces/ISetToken.sol\";\r\n\r\ninterface IBaseManager {\r\n    function setToken() external returns(ISetToken);\r\n    \r\n    function methodologist() external returns(address);\r\n\r\n    function operator() external returns(address);\r\n\r\n    function interactManager(address _module, bytes calldata _encoded) external;\r\n}\r\n\r\n// Dependency file: contracts/lib/BaseAdapter.sol\r\n\r\n/*\r\n    Copyright 2021 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import { AddressArrayUtils } from \"contracts/lib/AddressArrayUtils.sol\";\r\n// import { IBaseManager } from \"contracts/interfaces/IBaseManager.sol\";\r\n\r\n/**\r\n * @title BaseAdapter\r\n * @author Set Protocol\r\n *\r\n * Abstract class that houses common adapter-related state and functions.\r\n */\r\nabstract contract BaseAdapter {\r\n    using AddressArrayUtils for address[];\r\n\r\n    /* ============ Events ============ */\r\n\r\n    event CallerStatusUpdated(address indexed _caller, bool _status);\r\n    event AnyoneCallableUpdated(bool indexed _status);\r\n\r\n    /* ============ Modifiers ============ */\r\n\r\n    /**\r\n     * Throws if the sender is not the SetToken operator\r\n     */\r\n    modifier onlyOperator() {\r\n        require(msg.sender == manager.operator(), \"Must be operator\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Throws if the sender is not the SetToken methodologist\r\n     */\r\n    modifier onlyMethodologist() {\r\n        require(msg.sender == manager.methodologist(), \"Must be methodologist\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Throws if caller is a contract, can be used to stop flash loan and sandwich attacks\r\n     */\r\n    modifier onlyEOA() {\r\n        require(msg.sender == tx.origin, \"Caller must be EOA Address\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Throws if not allowed caller\r\n     */\r\n    modifier onlyAllowedCaller(address _caller) {\r\n        require(isAllowedCaller(_caller), \"Address not permitted to call\");\r\n        _;\r\n    }\r\n\r\n    /* ============ State Variables ============ */\r\n\r\n    // Instance of manager contract\r\n    IBaseManager public manager;\r\n\r\n    // Boolean indicating if anyone can call function\r\n    bool public anyoneCallable;\r\n\r\n    // Mapping of addresses allowed to call function\r\n    mapping(address => bool) public callAllowList;\r\n\r\n    /* ============ Constructor ============ */\r\n\r\n    constructor(IBaseManager _manager) public { manager = _manager; }\r\n\r\n    /* ============ External Functions ============ */\r\n\r\n    /**\r\n     * OPERATOR ONLY: Toggle ability for passed addresses to call only allowed caller functions\r\n     *\r\n     * @param _callers           Array of caller addresses to toggle status\r\n     * @param _statuses          Array of statuses for each caller\r\n     */\r\n    function updateCallerStatus(address[] calldata _callers, bool[] calldata _statuses) external onlyOperator {\r\n        require(_callers.length == _statuses.length, \"Array length mismatch\");\r\n        require(_callers.length > 0, \"Array length must be > 0\");\r\n        require(!_callers.hasDuplicate(), \"Cannot duplicate callers\");\r\n\r\n        for (uint256 i = 0; i < _callers.length; i++) {\r\n            address caller = _callers[i];\r\n            bool status = _statuses[i];\r\n            callAllowList[caller] = status;\r\n            emit CallerStatusUpdated(caller, status);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * OPERATOR ONLY: Toggle whether anyone can call function, bypassing the callAllowlist \r\n     *\r\n     * @param _status           Boolean indicating whether to allow anyone call\r\n     */\r\n    function updateAnyoneCallable(bool _status) external onlyOperator {\r\n        anyoneCallable = _status;\r\n        emit AnyoneCallableUpdated(_status);\r\n    }\r\n\r\n    /* ============ Internal Functions ============ */\r\n    \r\n    /**\r\n     * Invoke manager to transfer tokens from manager to other contract.\r\n     *\r\n     * @param _token           Token being transferred from manager contract\r\n     * @param _amount          Amount of token being transferred\r\n     */\r\n    function invokeManagerTransfer(address _token, address _destination, uint256 _amount) internal {\r\n        bytes memory callData = abi.encodeWithSignature(\"transfer(address,uint256)\", _destination, _amount);\r\n        invokeManager(_token, callData);\r\n    }\r\n\r\n    /**\r\n     * Invoke call from manager\r\n     *\r\n     * @param _module           Module to interact with\r\n     * @param _encoded          Encoded byte data\r\n     */\r\n    function invokeManager(address _module, bytes memory _encoded) internal {\r\n        manager.interactManager(_module, _encoded);\r\n    }\r\n\r\n    /**\r\n     * Determine if passed address is allowed to call function. If anyoneCallable set to true anyone can call otherwise needs to be approved.\r\n     *\r\n     * return bool              Boolean indicating if allowed caller\r\n     */\r\n    function isAllowedCaller(address _caller) internal view virtual returns (bool) {\r\n        return anyoneCallable || callAllowList[_caller];\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/interfaces/ICErc20.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n\r\n/**\r\n * @title ICErc20\r\n *\r\n * Interface for interacting with Compound cErc20 tokens (e.g. Dai, USDC)\r\n */\r\ninterface ICErc20 is IERC20 {\r\n\r\n    function borrowBalanceCurrent(address _account) external returns (uint256);\r\n\r\n    function borrowBalanceStored(address _account) external view returns (uint256);\r\n\r\n    function balanceOfUnderlying(address _account) external returns (uint256);\r\n\r\n    /**\r\n     * Calculates the exchange rate from the underlying to the CToken\r\n     *\r\n     * @notice Accrue interest then return the up-to-date exchange rate\r\n     * @return Calculated exchange rate scaled by 1e18\r\n     */\r\n    function exchangeRateCurrent() external returns (uint256);\r\n\r\n    function exchangeRateStored() external view returns (uint256);\r\n\r\n    function underlying() external view returns (address);\r\n\r\n    /**\r\n     * Sender supplies assets into the market and receives cTokens in exchange\r\n     *\r\n     * @notice Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param _mintAmount The amount of the underlying asset to supply\r\n     * @return uint256 0=success, otherwise a failure\r\n     */\r\n    function mint(uint256 _mintAmount) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Sender redeems cTokens in exchange for the underlying asset\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param _redeemTokens The number of cTokens to redeem into underlying\r\n     * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function redeem(uint256 _redeemTokens) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\r\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\r\n     * @param _redeemAmount The amount of underlying to redeem\r\n     * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function redeemUnderlying(uint256 _redeemAmount) external returns (uint256);\r\n\r\n    /**\r\n      * @notice Sender borrows assets from the protocol to their own address\r\n      * @param _borrowAmount The amount of the underlying asset to borrow\r\n      * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n      */\r\n    function borrow(uint256 _borrowAmount) external returns (uint256);\r\n\r\n    /**\r\n     * @notice Sender repays their own borrow\r\n     * @param _repayAmount The amount to repay\r\n     * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\r\n     */\r\n    function repayBorrow(uint256 _repayAmount) external returns (uint256);\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IComptroller.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n\r\n/**\r\n * @title IComptroller\r\n *\r\n * Interface for interacting with Compound Comptroller\r\n */\r\ninterface IComptroller {\r\n\r\n    /**\r\n     * @notice Add assets to be included in account liquidity calculation\r\n     * @param cTokens The list of addresses of the cToken markets to be enabled\r\n     * @return Success indicator for whether each corresponding market was entered\r\n     */\r\n    function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\r\n\r\n    /**\r\n     * @notice Removes asset from sender's account liquidity calculation\r\n     * @dev Sender must not have an outstanding borrow balance in the asset,\r\n     *  or be providing neccessary collateral for an outstanding borrow.\r\n     * @param cTokenAddress The address of the asset to be removed\r\n     * @return Whether or not the account successfully exited the market\r\n     */\r\n    function exitMarket(address cTokenAddress) external returns (uint256);\r\n\r\n    function claimComp(address holder) external;\r\n\r\n    function markets(address cTokenAddress) external view returns (bool, uint256, bool);\r\n}\r\n\r\n// Dependency file: contracts/interfaces/ICompoundLeverageModule.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n\r\n// import { ISetToken } from \"contracts/interfaces/ISetToken.sol\";\r\n\r\ninterface ICompoundLeverageModule {\r\n    function sync(\r\n        ISetToken _setToken\r\n    ) external;\r\n\r\n    function lever(\r\n        ISetToken _setToken,\r\n        address _borrowAsset,\r\n        address _collateralAsset,\r\n        uint256 _borrowQuantity,\r\n        uint256 _minReceiveQuantity,\r\n        string memory _tradeAdapterName,\r\n        bytes memory _tradeData\r\n    ) external;\r\n\r\n    function delever(\r\n        ISetToken _setToken,\r\n        address _collateralAsset,\r\n        address _repayAsset,\r\n        uint256 _redeemQuantity,\r\n        uint256 _minRepayQuantity,\r\n        string memory _tradeAdapterName,\r\n        bytes memory _tradeData\r\n    ) external;\r\n\r\n    function gulp(\r\n        ISetToken _setToken,\r\n        address _collateralAsset,\r\n        uint256 _minNotionalReceiveQuantity,\r\n        string memory _tradeAdapterName,\r\n        bytes memory _tradeData\r\n    ) external;\r\n}\r\n\r\n// Dependency file: contracts/interfaces/ICompoundPriceOracle.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n\r\n/**\r\n * @title ICompoundPriceOracle\r\n *\r\n * Interface for interacting with Compound price oracle\r\n */\r\ninterface ICompoundPriceOracle {\r\n\r\n    function getUnderlyingPrice(address _asset) external view returns(uint256);\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts/math/SignedSafeMath.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @title SignedSafeMath\r\n * @dev Signed math operations with safety checks that revert on error.\r\n */\r\nlibrary SignedSafeMath {\r\n    int256 constant private _INT256_MIN = -2**255;\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        require(!(a == -1 && b == _INT256_MIN), \"SignedSafeMath: multiplication overflow\");\r\n\r\n        int256 c = a * b;\r\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two signed integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0, \"SignedSafeMath: division by zero\");\r\n        require(!(b == -1 && a == _INT256_MIN), \"SignedSafeMath: division overflow\");\r\n\r\n        int256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \"SignedSafeMath: subtraction overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two signed integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \"SignedSafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/lib/PreciseUnitMath.sol\r\n\r\n/*\r\n    Copyright 2020 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n\r\n*/\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n\r\n// import { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import { SignedSafeMath } from \"@openzeppelin/contracts/math/SignedSafeMath.sol\";\r\n\r\n\r\n/**\r\n * @title PreciseUnitMath\r\n * @author Set Protocol\r\n *\r\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\r\n * dYdX's BaseMath library.\r\n *\r\n * CHANGELOG:\r\n * - 9/21/20: Added safePower function\r\n */\r\nlibrary PreciseUnitMath {\r\n    using SafeMath for uint256;\r\n    using SignedSafeMath for int256;\r\n\r\n    // The number One in precise units.\r\n    uint256 constant internal PRECISE_UNIT = 10 ** 18;\r\n    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\r\n\r\n    // Max unsigned integer value\r\n    uint256 constant internal MAX_UINT_256 = type(uint256).max;\r\n    // Max and min signed integer value\r\n    int256 constant internal MAX_INT_256 = type(int256).max;\r\n    int256 constant internal MIN_INT_256 = type(int256).min;\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function preciseUnit() internal pure returns (uint256) {\r\n        return PRECISE_UNIT;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function preciseUnitInt() internal pure returns (int256) {\r\n        return PRECISE_UNIT_INT;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function maxUint256() internal pure returns (uint256) {\r\n        return MAX_UINT_256;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function maxInt256() internal pure returns (int256) {\r\n        return MAX_INT_256;\r\n    }\r\n\r\n    /**\r\n     * @dev Getter function since constants can't be read directly from libraries.\r\n     */\r\n    function minInt256() internal pure returns (int256) {\r\n        return MIN_INT_256;\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\r\n     * of a number with 18 decimals precision.\r\n     */\r\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a.mul(b).div(PRECISE_UNIT);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\r\n     * significand of a number with 18 decimals precision.\r\n     */\r\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\r\n        return a.mul(b).div(PRECISE_UNIT_INT);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\r\n     * of a number with 18 decimals precision.\r\n     */\r\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0 || b == 0) {\r\n            return 0;\r\n        }\r\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\r\n    }\r\n\r\n    /**\r\n     * @dev Divides value a by value b (result is rounded down).\r\n     */\r\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a.mul(PRECISE_UNIT).div(b);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Divides value a by value b (result is rounded towards 0).\r\n     */\r\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\r\n        return a.mul(PRECISE_UNIT_INT).div(b);\r\n    }\r\n\r\n    /**\r\n     * @dev Divides value a by value b (result is rounded up or away from 0).\r\n     */\r\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"Cant divide by 0\");\r\n\r\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\r\n     */\r\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\r\n        require(b != 0, \"Cant divide by 0\");\r\n        require(a != MIN_INT_256 || b != -1, \"Invalid input\");\r\n\r\n        int256 result = a.div(b);\r\n        if (a ^ b < 0 && a % b != 0) {\r\n            result -= 1;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies value a by value b where rounding is towards the lesser number. \r\n     * (positive values are rounded towards zero and negative values are rounded away from 0). \r\n     */\r\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\r\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\r\n    }\r\n\r\n    /**\r\n     * @dev Divides value a by value b where rounding is towards the lesser number. \r\n     * (positive values are rounded towards zero and negative values are rounded away from 0). \r\n     */\r\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\r\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\r\n    }\r\n\r\n    /**\r\n    * @dev Performs the power on a specified value, reverts on overflow.\r\n    */\r\n    function safePower(\r\n        uint256 a,\r\n        uint256 pow\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(a > 0, \"Value must be positive\");\r\n\r\n        uint256 result = 1;\r\n        for (uint256 i = 0; i < pow; i++){\r\n            uint256 previousResult = result;\r\n\r\n            // Using safemath multiplication prevents overflows\r\n            result = previousResult.mul(a);\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IChainlinkAggregatorV3.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\ninterface IChainlinkAggregatorV3 {\r\n    function latestAnswer() external view returns (int256);\r\n}\r\n\r\n// Root file: contracts/adapters/FlexibleLeverageStrategyAdapter.sol\r\n\r\n/*\r\n    Copyright 2021 Set Labs Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n*/\r\n\r\npragma solidity 0.6.10;\r\npragma experimental ABIEncoderV2;\r\n\r\n// import { Address } from \"@openzeppelin/contracts/utils/Address.sol\";\r\n// import { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n// import { Math } from \"@openzeppelin/contracts/math/Math.sol\";\r\n// import { SafeMath } from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import { SafeCast } from \"@openzeppelin/contracts/utils/SafeCast.sol\";\r\n\r\n// import { BaseAdapter } from \"contracts/lib/BaseAdapter.sol\";\r\n// import { ICErc20 } from \"contracts/interfaces/ICErc20.sol\";\r\n// import { IBaseManager } from \"contracts/interfaces/IBaseManager.sol\";\r\n// import { IComptroller } from \"contracts/interfaces/IComptroller.sol\";\r\n// import { ICompoundLeverageModule } from \"contracts/interfaces/ICompoundLeverageModule.sol\";\r\n// import { ICompoundPriceOracle } from \"contracts/interfaces/ICompoundPriceOracle.sol\";\r\n// import { ISetToken } from \"contracts/interfaces/ISetToken.sol\";\r\n// import { PreciseUnitMath } from \"contracts/lib/PreciseUnitMath.sol\";\r\n// import { IChainlinkAggregatorV3 } from \"contracts/interfaces/IChainlinkAggregatorV3.sol\";\r\n\r\n\r\n/**\r\n * @title FlexibleLeverageStrategyAdapter\r\n * @author Set Protocol\r\n *\r\n * Smart contract that enables trustless leverage tokens using the flexible leverage methodology. This adapter is paired with the CompoundLeverageModule from Set\r\n * protocol where module interactions are invoked via the IBaseManager contract. Any leveraged token can be constructed as long as the collateral and borrow\r\n * asset is available on Compound. This adapter contract also allows the operator to set an ETH reward to incentivize keepers calling the rebalance function at\r\n * different leverage thresholds.\r\n *\r\n * CHANGELOG 4/14/2021:\r\n * - Update ExecutionSettings struct to split exchangeData into leverExchangeData and deleverExchangeData\r\n * - Update _lever and _delever internal functions with struct changes\r\n * - Update setExecutionSettings to account for leverExchangeData and deleverExchangeData\r\n *\r\n * CHANGELOG 5/24/2021:\r\n * - Update _calculateActionInfo to add chainlink prices\r\n * - Update _calculateBorrowUnits and _calculateMinRepayUnits to use chainlink as an oracle in \r\n */\r\ncontract FlexibleLeverageStrategyAdapter is BaseAdapter {\r\n    using Address for address;\r\n    using PreciseUnitMath for uint256;\r\n    using SafeMath for uint256;\r\n    using SafeCast for int256;\r\n\r\n    /* ============ Enums ============ */\r\n\r\n    enum ShouldRebalance {\r\n        NONE,                   // Indicates no rebalance action can be taken\r\n        REBALANCE,              // Indicates rebalance() function can be successfully called\r\n        ITERATE_REBALANCE,      // Indicates iterateRebalance() function can be successfully called\r\n        RIPCORD                 // Indicates ripcord() function can be successfully called\r\n    }\r\n\r\n    /* ============ Structs ============ */\r\n\r\n    struct ActionInfo {\r\n        uint256 collateralBalance;                      // Balance of underlying held in Compound in base units (e.g. USDC 10e6)\r\n        uint256 borrowBalance;                          // Balance of underlying borrowed from Compound in base units\r\n        uint256 collateralValue;                        // Valuation in USD adjusted for decimals in precise units (10e18)\r\n        uint256 borrowValue;                            // Valuation in USD adjusted for decimals in precise units (10e18)\r\n        uint256 collateralPrice;                        // Price of collateral in precise units (10e18) from Chainlink\r\n        uint256 borrowPrice;                            // Price of borrow asset in precise units (10e18) from Chainlink\r\n        uint256 setTotalSupply;                         // Total supply of SetToken\r\n    }\r\n\r\n     struct LeverageInfo {\r\n        ActionInfo action;\r\n        uint256 currentLeverageRatio;                   // Current leverage ratio of Set\r\n        uint256 slippageTolerance;                      // Allowable percent trade slippage in preciseUnits (1% = 10^16)\r\n        uint256 twapMaxTradeSize;                       // Max trade size in collateral units allowed for rebalance action\r\n    }\r\n\r\n    struct ContractSettings {\r\n        ISetToken setToken;                             // Instance of leverage token\r\n        ICompoundLeverageModule leverageModule;         // Instance of Compound leverage module\r\n        IComptroller comptroller;                       // Instance of Compound Comptroller\r\n        IChainlinkAggregatorV3 collateralPriceOracle;   // Chainlink oracle feed that returns prices in 8 decimals for collateral asset\r\n        IChainlinkAggregatorV3 borrowPriceOracle;       // Chainlink oracle feed that returns prices in 8 decimals for borrow asset\r\n        ICErc20 targetCollateralCToken;                 // Instance of target collateral cToken asset\r\n        ICErc20 targetBorrowCToken;                     // Instance of target borrow cToken asset\r\n        address collateralAsset;                        // Address of underlying collateral\r\n        address borrowAsset;                            // Address of underlying borrow asset\r\n        uint256 collateralDecimalAdjustment;            // Decimal adjustment for chainlink oracle of the collateral asset. Equal to 28-collateralDecimals (10^18 * 10^18 / 10^decimals / 10^8)\r\n        uint256 borrowDecimalAdjustment;                // Decimal adjustment for chainlink oracle of the borrowing asset. Equal to 28-borrowDecimals (10^18 * 10^18 / 10^decimals / 10^8)\r\n    }\r\n\r\n    struct MethodologySettings { \r\n        uint256 targetLeverageRatio;                     // Long term target ratio in precise units (10e18)\r\n        uint256 minLeverageRatio;                        // In precise units (10e18). If current leverage is below, rebalance target is this ratio\r\n        uint256 maxLeverageRatio;                        // In precise units (10e18). If current leverage is above, rebalance target is this ratio\r\n        uint256 recenteringSpeed;                        // % at which to rebalance back to target leverage in precise units (10e18)\r\n        uint256 rebalanceInterval;                       // Period of time required since last rebalance timestamp in seconds\r\n    }\r\n\r\n    struct ExecutionSettings { \r\n        uint256 unutilizedLeveragePercentage;            // Percent of max borrow left unutilized in precise units (1% = 10e16)\r\n        uint256 twapMaxTradeSize;                        // Max trade size in collateral base units\r\n        uint256 twapCooldownPeriod;                      // Cooldown period required since last trade timestamp in seconds\r\n        uint256 slippageTolerance;                       // % in precise units to price min token receive amount from trade quantities\r\n        string exchangeName;                             // Name of exchange that is being used for leverage\r\n        bytes leverExchangeData;                         // Arbitrary exchange data passed into rebalance function for levering up\r\n        bytes deleverExchangeData;                       // Arbitrary exchange data passed into rebalance function for delevering\r\n    }\r\n\r\n    struct IncentiveSettings {\r\n        uint256 etherReward;                             // ETH reward for incentivized rebalances\r\n        uint256 incentivizedLeverageRatio;               // Leverage ratio for incentivized rebalances\r\n        uint256 incentivizedSlippageTolerance;           // Slippage tolerance percentage for incentivized rebalances\r\n        uint256 incentivizedTwapCooldownPeriod;          // TWAP cooldown in seconds for incentivized rebalances\r\n        uint256 incentivizedTwapMaxTradeSize;            // Max trade size for incentivized rebalances in collateral base units\r\n    }\r\n\r\n    /* ============ Events ============ */\r\n\r\n    event Engaged(uint256 _currentLeverageRatio, uint256 _newLeverageRatio, uint256 _chunkRebalanceNotional, uint256 _totalRebalanceNotional);\r\n    event Rebalanced(\r\n        uint256 _currentLeverageRatio,\r\n        uint256 _newLeverageRatio,\r\n        uint256 _chunkRebalanceNotional,\r\n        uint256 _totalRebalanceNotional\r\n    );\r\n    event RebalanceIterated(\r\n        uint256 _currentLeverageRatio,\r\n        uint256 _newLeverageRatio,\r\n        uint256 _chunkRebalanceNotional,\r\n        uint256 _totalRebalanceNotional\r\n    );\r\n    event RipcordCalled(\r\n        uint256 _currentLeverageRatio,\r\n        uint256 _newLeverageRatio,\r\n        uint256 _rebalanceNotional,\r\n        uint256 _etherIncentive\r\n    );\r\n    event Disengaged(uint256 _currentLeverageRatio, uint256 _newLeverageRatio, uint256 _chunkRebalanceNotional, uint256 _totalRebalanceNotional);\r\n    event MethodologySettingsUpdated(\r\n        uint256 _targetLeverageRatio,\r\n        uint256 _minLeverageRatio,\r\n        uint256 _maxLeverageRatio,\r\n        uint256 _recenteringSpeed,\r\n        uint256 _rebalanceInterval\r\n    );\r\n    event ExecutionSettingsUpdated(\r\n        uint256 _unutilizedLeveragePercentage,\r\n        uint256 _twapMaxTradeSize,\r\n        uint256 _twapCooldownPeriod,\r\n        uint256 _slippageTolerance,\r\n        string _exchangeName,\r\n        bytes _leverExchangeData,\r\n        bytes _deleverExchangeData\r\n    );\r\n    event IncentiveSettingsUpdated(\r\n        uint256 _etherReward,\r\n        uint256 _incentivizedLeverageRatio,\r\n        uint256 _incentivizedSlippageTolerance,\r\n        uint256 _incentivizedTwapCooldownPeriod,\r\n        uint256 _incentivizedTwapMaxTradeSize\r\n    );\r\n\r\n    /* ============ Modifiers ============ */\r\n\r\n    /**\r\n     * Throws if rebalance is currently in TWAP`\r\n     */\r\n    modifier noRebalanceInProgress() {\r\n        require(twapLeverageRatio == 0, \"Rebalance is currently in progress\");\r\n        _;\r\n    }\r\n\r\n    /* ============ State Variables ============ */\r\n\r\n    ContractSettings internal strategy;             // Struct of contracts used in the strategy (SetToken, price oracles, leverage module etc)\r\n    MethodologySettings internal methodology;       // Struct containing methodology parameters\r\n    ExecutionSettings internal execution;           // Struct containing execution parameters\r\n    IncentiveSettings internal incentive;           // Struct containing incentive parameters for ripcord\r\n    uint256 public twapLeverageRatio;               // Stored leverage ratio to keep track of target between TWAP rebalances\r\n    uint256 public lastTradeTimestamp;              // Last rebalance timestamp. Must be past rebalance interval to rebalance\r\n\r\n    /* ============ Constructor ============ */\r\n\r\n    /**\r\n     * Instantiate addresses, methodology parameters, execution parameters, and incentive parameters.\r\n     * \r\n     * @param _manager              Address of IBaseManager contract\r\n     * @param _strategy             Struct of contract addresses\r\n     * @param _methodology          Struct containing methodology parameters\r\n     * @param _execution            Struct containing execution parameters\r\n     * @param _incentive            Struct containing incentive parameters for ripcord\r\n     */\r\n    constructor(\r\n        IBaseManager _manager,\r\n        ContractSettings memory _strategy,\r\n        MethodologySettings memory _methodology,\r\n        ExecutionSettings memory _execution,\r\n        IncentiveSettings memory _incentive\r\n    )\r\n        public\r\n        BaseAdapter(_manager)\r\n    {\r\n        strategy = _strategy;\r\n        methodology = _methodology;\r\n        execution = _execution;\r\n        incentive = _incentive;\r\n\r\n        _validateSettings(methodology, execution, incentive);\r\n    }\r\n\r\n    /* ============ External Functions ============ */\r\n\r\n    /**\r\n     * OPERATOR ONLY: Engage to target leverage ratio for the first time. SetToken will borrow debt position from Compound and trade for collateral asset. If target\r\n     * leverage ratio is above max borrow or max trade size, then TWAP is kicked off. To complete engage if TWAP, any valid caller must call iterateRebalance until target\r\n     * is met.\r\n     */\r\n    function engage() external onlyOperator {\r\n        ActionInfo memory engageInfo = _createActionInfo();\r\n\r\n        require(engageInfo.setTotalSupply > 0, \"SetToken must have > 0 supply\");\r\n        require(engageInfo.collateralBalance > 0, \"Collateral balance must be > 0\");\r\n        require(engageInfo.borrowBalance == 0, \"Debt must be 0\");\r\n\r\n        LeverageInfo memory leverageInfo = LeverageInfo({\r\n            action: engageInfo,\r\n            currentLeverageRatio: PreciseUnitMath.preciseUnit(), // 1x leverage in precise units\r\n            slippageTolerance: execution.slippageTolerance,\r\n            twapMaxTradeSize: execution.twapMaxTradeSize\r\n        });\r\n\r\n        // Calculate total rebalance units and kick off TWAP if above max borrow or max trade size\r\n        (\r\n            uint256 chunkRebalanceNotional,\r\n            uint256 totalRebalanceNotional\r\n        ) = _calculateChunkRebalanceNotional(leverageInfo, methodology.targetLeverageRatio, true);\r\n\r\n        _lever(leverageInfo, chunkRebalanceNotional);\r\n\r\n        _updateRebalanceState(\r\n            chunkRebalanceNotional,\r\n            totalRebalanceNotional,\r\n            methodology.targetLeverageRatio\r\n        );\r\n\r\n        emit Engaged(\r\n            leverageInfo.currentLeverageRatio,\r\n            methodology.targetLeverageRatio,\r\n            chunkRebalanceNotional,\r\n            totalRebalanceNotional\r\n        );\r\n    }\r\n\r\n    /**\r\n     * ONLY EOA AND ALLOWED CALLER: Rebalance according to flexible leverage methodology. If current leverage ratio is between the max and min bounds, then rebalance \r\n     * can only be called once the rebalance interval has elapsed since last timestamp. If outside the max and min, rebalance can be called anytime to bring leverage\r\n     * ratio back to the max or min bounds. The methodology will determine whether to delever or lever.\r\n     *\r\n     * Note: If the calculated current leverage ratio is above the incentivized leverage ratio or in TWAP then rebalance cannot be called. Instead, you must call\r\n     * ripcord() which is incentivized with a reward in Ether or iterateRebalance().\r\n     */\r\n     function rebalance() external onlyEOA onlyAllowedCaller(msg.sender) {\r\n        LeverageInfo memory leverageInfo = _getAndValidateLeveragedInfo(execution.slippageTolerance, execution.twapMaxTradeSize);\r\n\r\n        _validateNormalRebalance(leverageInfo, methodology.rebalanceInterval);\r\n        _validateNonTWAP();\r\n\r\n        uint256 newLeverageRatio = _calculateNewLeverageRatio(leverageInfo.currentLeverageRatio);\r\n\r\n        (\r\n            uint256 chunkRebalanceNotional,\r\n            uint256 totalRebalanceNotional\r\n        ) = _handleRebalance(leverageInfo, newLeverageRatio);\r\n\r\n        _updateRebalanceState(chunkRebalanceNotional, totalRebalanceNotional, newLeverageRatio);\r\n\r\n        emit Rebalanced(\r\n            leverageInfo.currentLeverageRatio,\r\n            newLeverageRatio,\r\n            chunkRebalanceNotional,\r\n            totalRebalanceNotional\r\n        );\r\n    }\r\n\r\n    /**\r\n     * ONLY EOA AND ALLOWED CALLER: Iterate a rebalance when in TWAP. TWAP cooldown period must have elapsed. If price moves advantageously, then exit without rebalancing\r\n     * and clear TWAP state. This function can only be called when below incentivized leverage ratio and in TWAP state.\r\n     */\r\n    function iterateRebalance() external onlyEOA onlyAllowedCaller(msg.sender) {\r\n        LeverageInfo memory leverageInfo = _getAndValidateLeveragedInfo(execution.slippageTolerance, execution.twapMaxTradeSize);\r\n\r\n        _validateNormalRebalance(leverageInfo, execution.twapCooldownPeriod);\r\n        _validateTWAP();\r\n\r\n        uint256 chunkRebalanceNotional;\r\n        uint256 totalRebalanceNotional;\r\n        if (!_isAdvantageousTWAP(leverageInfo.currentLeverageRatio)) {\r\n            (chunkRebalanceNotional, totalRebalanceNotional) = _handleRebalance(leverageInfo, twapLeverageRatio);\r\n        }\r\n\r\n        // If not advantageous, then rebalance is skipped and chunk and total rebalance notional are both 0, which means TWAP state is\r\n        // cleared\r\n        _updateIterateState(chunkRebalanceNotional, totalRebalanceNotional);\r\n\r\n        emit RebalanceIterated(\r\n            leverageInfo.currentLeverageRatio,\r\n            twapLeverageRatio,\r\n            chunkRebalanceNotional,\r\n            totalRebalanceNotional\r\n        );\r\n    }\r\n\r\n    /**\r\n     * ONLY EOA: In case the current leverage ratio exceeds the incentivized leverage threshold, the ripcord function can be called by anyone to return leverage ratio\r\n     * back to the max leverage ratio. This function typically would only be called during times of high downside volatility and / or normal keeper malfunctions. The caller\r\n     * of ripcord() will receive a reward in Ether. The ripcord function uses it's own TWAP cooldown period, slippage tolerance and TWAP max trade size which are typically\r\n     * looser than in regular rebalances.\r\n     */\r\n    function ripcord() external onlyEOA {\r\n        LeverageInfo memory leverageInfo = _getAndValidateLeveragedInfo(\r\n            incentive.incentivizedSlippageTolerance, \r\n            incentive.incentivizedTwapMaxTradeSize\r\n        );\r\n\r\n        _validateRipcord(leverageInfo);\r\n\r\n        ( uint256 chunkRebalanceNotional, ) = _calculateChunkRebalanceNotional(leverageInfo, methodology.maxLeverageRatio, false);\r\n\r\n        _delever(leverageInfo, chunkRebalanceNotional);\r\n\r\n        _updateRipcordState();\r\n\r\n        uint256 etherTransferred = _transferEtherRewardToCaller(incentive.etherReward);\r\n\r\n        emit RipcordCalled(\r\n            leverageInfo.currentLeverageRatio,\r\n            methodology.maxLeverageRatio,\r\n            chunkRebalanceNotional,\r\n            etherTransferred\r\n        );\r\n    }\r\n\r\n    /**\r\n     * OPERATOR ONLY: Return leverage ratio to 1x and delever to repay loan. This can be used for upgrading or shutting down the strategy. SetToken will redeem\r\n     * collateral position and trade for debt position to repay Compound. If the chunk rebalance size is less than the total notional size, then this function will\r\n     * delever and repay entire borrow balance on Compound. If chunk rebalance size is above max borrow or max trade size, then operator must\r\n     * continue to call this function to complete repayment of loan. The function iterateRebalance will not work. \r\n     *\r\n     * Note: Delever to 0 will likely result in additional units of the borrow asset added as equity on the SetToken due to oracle price / market price mismatch\r\n     */\r\n    function disengage() external onlyOperator {\r\n        LeverageInfo memory leverageInfo = _getAndValidateLeveragedInfo(execution.slippageTolerance, execution.twapMaxTradeSize);\r\n\r\n        uint256 newLeverageRatio = PreciseUnitMath.preciseUnit();\r\n\r\n        (\r\n            uint256 chunkRebalanceNotional,\r\n            uint256 totalRebalanceNotional\r\n        ) = _calculateChunkRebalanceNotional(leverageInfo, newLeverageRatio, false);\r\n\r\n        if (totalRebalanceNotional > chunkRebalanceNotional) {\r\n            _delever(leverageInfo, chunkRebalanceNotional);\r\n        } else {\r\n            _deleverToZeroBorrowBalance(leverageInfo, totalRebalanceNotional);\r\n        }\r\n\r\n        emit Disengaged(\r\n            leverageInfo.currentLeverageRatio,\r\n            newLeverageRatio,\r\n            chunkRebalanceNotional,\r\n            totalRebalanceNotional\r\n        );\r\n    }\r\n\r\n    /**\r\n     * OPERATOR ONLY: Set methodology settings and check new settings are valid. Note: Need to pass in existing parameters if only changing a few settings. Must not be\r\n     * in a rebalance.\r\n     *\r\n     * @param _newMethodologySettings          Struct containing methodology parameters\r\n     */\r\n    function setMethodologySettings(MethodologySettings memory _newMethodologySettings) external onlyOperator noRebalanceInProgress {\r\n        methodology = _newMethodologySettings;\r\n\r\n        _validateSettings(methodology, execution, incentive);\r\n\r\n        emit MethodologySettingsUpdated(\r\n            methodology.targetLeverageRatio,\r\n            methodology.minLeverageRatio,\r\n            methodology.maxLeverageRatio,\r\n            methodology.recenteringSpeed,\r\n            methodology.rebalanceInterval\r\n        );\r\n    }\r\n\r\n    /**\r\n     * OPERATOR ONLY: Set execution settings and check new settings are valid. Note: Need to pass in existing parameters if only changing a few settings. Must not be\r\n     * in a rebalance.\r\n     *\r\n     * @param _newExecutionSettings          Struct containing execution parameters\r\n     */\r\n    function setExecutionSettings(ExecutionSettings memory _newExecutionSettings) external onlyOperator noRebalanceInProgress {\r\n        execution = _newExecutionSettings;\r\n\r\n        _validateSettings(methodology, execution, incentive);\r\n\r\n        emit ExecutionSettingsUpdated(\r\n            execution.unutilizedLeveragePercentage,\r\n            execution.twapMaxTradeSize,\r\n            execution.twapCooldownPeriod,\r\n            execution.slippageTolerance,\r\n            execution.exchangeName,\r\n            execution.leverExchangeData,\r\n            execution.deleverExchangeData\r\n        );\r\n    }\r\n\r\n    /**\r\n     * OPERATOR ONLY: Set incentive settings and check new settings are valid. Note: Need to pass in existing parameters if only changing a few settings. Must not be\r\n     * in a rebalance.\r\n     *\r\n     * @param _newIncentiveSettings          Struct containing incentive parameters\r\n     */\r\n    function setIncentiveSettings(IncentiveSettings memory _newIncentiveSettings) external onlyOperator noRebalanceInProgress {\r\n        incentive = _newIncentiveSettings;\r\n\r\n        _validateSettings(methodology, execution, incentive);\r\n\r\n        emit IncentiveSettingsUpdated(\r\n            incentive.etherReward,\r\n            incentive.incentivizedLeverageRatio,\r\n            incentive.incentivizedSlippageTolerance,\r\n            incentive.incentivizedTwapCooldownPeriod,\r\n            incentive.incentivizedTwapMaxTradeSize\r\n        );\r\n    }\r\n    \r\n    /**\r\n     * OPERATOR ONLY: Withdraw entire balance of ETH in this contract to operator. Rebalance must not be in progress\r\n     */\r\n    function withdrawEtherBalance() external onlyOperator noRebalanceInProgress {\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    /* ============ External Getter Functions ============ */\r\n\r\n    /**\r\n     * Get current leverage ratio. Current leverage ratio is defined as the USD value of the collateral divided by the USD value of the SetToken. Prices for collateral\r\n     * and borrow asset are retrieved from the Compound Price Oracle.\r\n     *\r\n     * return currentLeverageRatio         Current leverage ratio in precise units (10e18)\r\n     */\r\n    function getCurrentLeverageRatio() public view returns(uint256) {\r\n        ActionInfo memory currentLeverageInfo = _createActionInfo();\r\n\r\n        return _calculateCurrentLeverageRatio(currentLeverageInfo.collateralValue, currentLeverageInfo.borrowValue);\r\n    }\r\n\r\n    /**\r\n     * Get current Ether incentive for when current leverage ratio exceeds incentivized leverage ratio and ripcord can be called. If ETH balance on the contract is \r\n     * below the etherReward, then return the balance of ETH instead.\r\n     *\r\n     * return etherReward               Quantity of ETH reward in base units (10e18)\r\n     */\r\n    function getCurrentEtherIncentive() external view returns(uint256) {\r\n        uint256 currentLeverageRatio = getCurrentLeverageRatio();\r\n\r\n        if (currentLeverageRatio >= incentive.incentivizedLeverageRatio) {\r\n            // If ETH reward is below the balance on this contract, then return ETH balance on contract instead\r\n            return incentive.etherReward < address(this).balance ? incentive.etherReward : address(this).balance;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper that checks if conditions are met for rebalance or ripcord. Returns an enum with 0 = no rebalance, 1 = call rebalance(), 2 = call iterateRebalance()\r\n     * 3 = call ripcord()\r\n     *\r\n     * return ShouldRebalance         Enum detailing whether to rebalance, iterateRebalance, ripcord or no action\r\n     */\r\n    function shouldRebalance() external view returns(ShouldRebalance) {\r\n        uint256 currentLeverageRatio = getCurrentLeverageRatio();\r\n\r\n        return _shouldRebalance(currentLeverageRatio, methodology.minLeverageRatio, methodology.maxLeverageRatio);\r\n    }\r\n\r\n    /**\r\n     * Helper that checks if conditions are met for rebalance or ripcord with custom max and min bounds specified by caller. This function simplifies the\r\n     * logic for off-chain keeper bots to determine what threshold to call rebalance when leverage exceeds max or drops below min. Returns an enum with\r\n     * 0 = no rebalance, 1 = call rebalance(), 2 = call iterateRebalance()3 = call ripcord()\r\n     *\r\n     * @param _customMinLeverageRatio          Min leverage ratio passed in by caller\r\n     * @param _customMaxLeverageRatio          Max leverage ratio passed in by caller\r\n     *\r\n     * return ShouldRebalance                  Enum detailing whether to rebalance, iterateRebalance, ripcord or no action\r\n     */\r\n    function shouldRebalanceWithBounds(\r\n        uint256 _customMinLeverageRatio,\r\n        uint256 _customMaxLeverageRatio\r\n    )\r\n        external\r\n        view\r\n        returns(ShouldRebalance)\r\n    {\r\n        require (\r\n            _customMinLeverageRatio <= methodology.minLeverageRatio && _customMaxLeverageRatio >= methodology.maxLeverageRatio,\r\n            \"Custom bounds must be valid\"\r\n        );\r\n\r\n        uint256 currentLeverageRatio = getCurrentLeverageRatio();\r\n\r\n        return _shouldRebalance(currentLeverageRatio, _customMinLeverageRatio, _customMaxLeverageRatio);\r\n    }\r\n\r\n    /**\r\n     * Explicit getter functions for parameter structs are defined as workaround to issues fetching structs that have dynamic types.\r\n     */\r\n    function getStrategy() external view returns (ContractSettings memory) { return strategy; }\r\n    function getMethodology() external view returns (MethodologySettings memory) { return methodology; }\r\n    function getExecution() external view returns (ExecutionSettings memory) { return execution; }\r\n    function getIncentive() external view returns (IncentiveSettings memory) { return incentive; }\r\n\r\n    /* ============ Internal Functions ============ */\r\n\r\n    /**\r\n     * Calculate notional rebalance quantity, whether to chunk rebalance based on max trade size and max borrow and invoke lever on CompoundLeverageModule\r\n     *\r\n     */\r\n     function _lever(\r\n        LeverageInfo memory _leverageInfo,\r\n        uint256 _chunkRebalanceNotional\r\n    )\r\n        internal\r\n    {\r\n        uint256 collateralRebalanceUnits = _chunkRebalanceNotional.preciseDiv(_leverageInfo.action.setTotalSupply);\r\n\r\n        uint256 borrowUnits = _calculateBorrowUnits(collateralRebalanceUnits, _leverageInfo.action);\r\n\r\n        uint256 minReceiveCollateralUnits = _calculateMinCollateralReceiveUnits(collateralRebalanceUnits, _leverageInfo.slippageTolerance);\r\n\r\n        bytes memory leverCallData = abi.encodeWithSignature(\r\n            \"lever(address,address,address,uint256,uint256,string,bytes)\",\r\n            address(strategy.setToken),\r\n            strategy.borrowAsset,\r\n            strategy.collateralAsset,\r\n            borrowUnits,\r\n            minReceiveCollateralUnits,\r\n            execution.exchangeName,\r\n            execution.leverExchangeData\r\n        );\r\n\r\n        invokeManager(address(strategy.leverageModule), leverCallData);\r\n    }\r\n\r\n    /**\r\n     * Calculate delever units Invoke delever on CompoundLeverageModule.\r\n     */\r\n    function _delever(\r\n        LeverageInfo memory _leverageInfo,\r\n        uint256 _chunkRebalanceNotional\r\n    )\r\n        internal\r\n    {\r\n        uint256 collateralRebalanceUnits = _chunkRebalanceNotional.preciseDiv(_leverageInfo.action.setTotalSupply);\r\n\r\n        uint256 minRepayUnits = _calculateMinRepayUnits(collateralRebalanceUnits, _leverageInfo.slippageTolerance, _leverageInfo.action);\r\n\r\n        bytes memory deleverCallData = abi.encodeWithSignature(\r\n            \"delever(address,address,address,uint256,uint256,string,bytes)\",\r\n            address(strategy.setToken),\r\n            strategy.collateralAsset,\r\n            strategy.borrowAsset,\r\n            collateralRebalanceUnits,\r\n            minRepayUnits,\r\n            execution.exchangeName,\r\n            execution.deleverExchangeData\r\n        );\r\n\r\n        invokeManager(address(strategy.leverageModule), deleverCallData);\r\n    }\r\n\r\n    /**\r\n     * Invoke deleverToZeroBorrowBalance on CompoundLeverageModule.\r\n     */\r\n    function _deleverToZeroBorrowBalance(\r\n        LeverageInfo memory _leverageInfo,\r\n        uint256 _chunkRebalanceNotional\r\n    )\r\n        internal\r\n    {\r\n        // Account for slippage tolerance in redeem quantity for the deleverToZeroBorrowBalance function\r\n        uint256 maxCollateralRebalanceUnits = _chunkRebalanceNotional\r\n            .preciseMul(PreciseUnitMath.preciseUnit().add(execution.slippageTolerance))\r\n            .preciseDiv(_leverageInfo.action.setTotalSupply);\r\n\r\n        bytes memory deleverToZeroBorrowBalanceCallData = abi.encodeWithSignature(\r\n            \"deleverToZeroBorrowBalance(address,address,address,uint256,string,bytes)\",\r\n            address(strategy.setToken),\r\n            strategy.collateralAsset,\r\n            strategy.borrowAsset,\r\n            maxCollateralRebalanceUnits,\r\n            execution.exchangeName,\r\n            execution.deleverExchangeData\r\n        );\r\n\r\n        invokeManager(address(strategy.leverageModule), deleverToZeroBorrowBalanceCallData);\r\n    }\r\n\r\n    /**\r\n     * Check whether to delever or lever based on the current vs new leverage ratios. Used in the rebalance() and iterateRebalance() functions\r\n     *\r\n     * return uint256           Calculated notional to trade\r\n     * return uint256           Total notional to rebalance over TWAP\r\n     */\r\n    function _handleRebalance(LeverageInfo memory _leverageInfo, uint256 _newLeverageRatio) internal returns(uint256, uint256) {\r\n        uint256 chunkRebalanceNotional;\r\n        uint256 totalRebalanceNotional;\r\n        if (_newLeverageRatio < _leverageInfo.currentLeverageRatio) {\r\n            (\r\n                chunkRebalanceNotional,\r\n                totalRebalanceNotional\r\n            ) = _calculateChunkRebalanceNotional(_leverageInfo, _newLeverageRatio, false);\r\n\r\n            _delever(_leverageInfo, chunkRebalanceNotional); \r\n        } else {\r\n            (\r\n                chunkRebalanceNotional,\r\n                totalRebalanceNotional\r\n            ) = _calculateChunkRebalanceNotional(_leverageInfo, _newLeverageRatio, true);\r\n\r\n            _lever(_leverageInfo, chunkRebalanceNotional);\r\n        }\r\n\r\n        return (chunkRebalanceNotional, totalRebalanceNotional);\r\n    }\r\n\r\n    /**\r\n     * Create the leverage info struct to be used in internal functions\r\n     *\r\n     * return LeverageInfo                Struct containing ActionInfo and other data\r\n     */\r\n    function _getAndValidateLeveragedInfo(uint256 _slippageTolerance, uint256 _maxTradeSize) internal view returns(LeverageInfo memory) {\r\n        ActionInfo memory actionInfo = _createActionInfo();\r\n\r\n        require(actionInfo.setTotalSupply > 0, \"SetToken must have > 0 supply\");\r\n        require(actionInfo.collateralBalance > 0, \"Collateral balance must be > 0\");\r\n        require(actionInfo.borrowBalance > 0, \"Borrow balance must exist\");\r\n\r\n        // Get current leverage ratio\r\n        uint256 currentLeverageRatio = _calculateCurrentLeverageRatio(\r\n            actionInfo.collateralValue,\r\n            actionInfo.borrowValue\r\n        );\r\n\r\n        return LeverageInfo({\r\n            action: actionInfo,\r\n            currentLeverageRatio: currentLeverageRatio,\r\n            slippageTolerance: _slippageTolerance,\r\n            twapMaxTradeSize: _maxTradeSize\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create the action info struct to be used in internal functions\r\n     *\r\n     * return ActionInfo                Struct containing data used by internal lever and delever functions\r\n     */\r\n    function _createActionInfo() internal view returns(ActionInfo memory) {\r\n        ActionInfo memory rebalanceInfo;\r\n\r\n        // Calculate prices from chainlink. Adjusts decimals to be in line with Compound's oracles. Chainlink returns prices with 8 decimal places, but \r\n        // compound expects 36 - underlyingDecimals decimal places from their oracles. This is so that when the underlying amount is multiplied by the\r\n        // received price, the collateral valuation is normalized to 36 decimals. To perform this adjustment, we multiply by 10^(36 - 8 - underlyingDeciamls)\r\n        int256 rawCollateralPrice = strategy.collateralPriceOracle.latestAnswer();\r\n        rebalanceInfo.collateralPrice = rawCollateralPrice.toUint256().mul(10 ** strategy.collateralDecimalAdjustment);\r\n        int256 rawBorrowPrice = strategy.borrowPriceOracle.latestAnswer();\r\n        rebalanceInfo.borrowPrice = rawBorrowPrice.toUint256().mul(10 ** strategy.borrowDecimalAdjustment);\r\n\r\n        // Calculate stored exchange rate which does not trigger a state update\r\n        uint256 cTokenBalance = strategy.targetCollateralCToken.balanceOf(address(strategy.setToken));\r\n        rebalanceInfo.collateralBalance = cTokenBalance.preciseMul(strategy.targetCollateralCToken.exchangeRateStored());\r\n        rebalanceInfo.borrowBalance = strategy.targetBorrowCToken.borrowBalanceStored(address(strategy.setToken));\r\n        rebalanceInfo.collateralValue = rebalanceInfo.collateralPrice.preciseMul(rebalanceInfo.collateralBalance);\r\n        rebalanceInfo.borrowValue = rebalanceInfo.borrowPrice.preciseMul(rebalanceInfo.borrowBalance);\r\n        rebalanceInfo.setTotalSupply = strategy.setToken.totalSupply();\r\n\r\n        return rebalanceInfo;\r\n    }\r\n\r\n    /**\r\n     * Validate settings in constructor and setters when updating.\r\n     */\r\n    function _validateSettings(\r\n        MethodologySettings memory _methodology,\r\n        ExecutionSettings memory _execution,\r\n        IncentiveSettings memory _incentive\r\n    )\r\n        internal\r\n        pure\r\n    {\r\n        require (\r\n            _methodology.minLeverageRatio <= _methodology.targetLeverageRatio && _methodology.minLeverageRatio > 0,\r\n            \"Must be valid min leverage\"\r\n        );\r\n        require (\r\n            _methodology.maxLeverageRatio >= _methodology.targetLeverageRatio,\r\n            \"Must be valid max leverage\"\r\n        );\r\n        require (\r\n            _methodology.recenteringSpeed <= PreciseUnitMath.preciseUnit() && _methodology.recenteringSpeed > 0,\r\n            \"Must be valid recentering speed\"\r\n        );\r\n        require (\r\n            _execution.unutilizedLeveragePercentage <= PreciseUnitMath.preciseUnit(),\r\n            \"Unutilized leverage must be <100%\"\r\n        );\r\n        require (\r\n            _execution.slippageTolerance <= PreciseUnitMath.preciseUnit(),\r\n            \"Slippage tolerance must be <100%\"\r\n        );\r\n        require (\r\n            _incentive.incentivizedSlippageTolerance <= PreciseUnitMath.preciseUnit(),\r\n            \"Incentivized slippage tolerance must be <100%\"\r\n        );\r\n        require (\r\n            _incentive.incentivizedLeverageRatio >= _methodology.maxLeverageRatio,\r\n            \"Incentivized leverage ratio must be > max leverage ratio\"\r\n        );\r\n        require (\r\n            _methodology.rebalanceInterval >= _execution.twapCooldownPeriod,\r\n            \"Rebalance interval must be greater than TWAP cooldown period\"\r\n        );\r\n        require (\r\n            _execution.twapCooldownPeriod >= _incentive.incentivizedTwapCooldownPeriod,\r\n            \"TWAP cooldown must be greater than incentivized TWAP cooldown\"\r\n        );\r\n        require (\r\n            _execution.twapMaxTradeSize <= _incentive.incentivizedTwapMaxTradeSize,\r\n            \"TWAP max trade size must be less than incentivized TWAP max trade size\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Validate that current leverage is below incentivized leverage ratio and cooldown / rebalance period has elapsed or outsize max/min bounds. Used\r\n     * in rebalance() and iterateRebalance() functions\r\n     */\r\n    function _validateNormalRebalance(LeverageInfo memory _leverageInfo, uint256 _coolDown) internal view {\r\n        require(_leverageInfo.currentLeverageRatio < incentive.incentivizedLeverageRatio, \"Must be below incentivized leverage ratio\");\r\n        require(\r\n            block.timestamp.sub(lastTradeTimestamp) > _coolDown\r\n            || _leverageInfo.currentLeverageRatio > methodology.maxLeverageRatio\r\n            || _leverageInfo.currentLeverageRatio < methodology.minLeverageRatio,\r\n            \"Cooldown not elapsed or not valid leverage ratio\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Validate that current leverage is above incentivized leverage ratio and incentivized cooldown period has elapsed in ripcord()\r\n     */\r\n    function _validateRipcord(LeverageInfo memory _leverageInfo) internal view {\r\n        require(_leverageInfo.currentLeverageRatio >= incentive.incentivizedLeverageRatio, \"Must be above incentivized leverage ratio\");\r\n        // If currently in the midst of a TWAP rebalance, ensure that the cooldown period has elapsed\r\n        require(lastTradeTimestamp.add(incentive.incentivizedTwapCooldownPeriod) < block.timestamp, \"TWAP cooldown must have elapsed\");\r\n    }\r\n\r\n    /**\r\n     * Validate TWAP in the iterateRebalance() function\r\n     */\r\n    function _validateTWAP() internal view {\r\n        require(twapLeverageRatio > 0, \"Not in TWAP state\");\r\n    }\r\n\r\n    /**\r\n     * Validate not TWAP in the rebalance() function\r\n     */\r\n    function _validateNonTWAP() internal view {\r\n        require(twapLeverageRatio == 0, \"Must call iterate\");\r\n    }\r\n\r\n    /**\r\n     * Check if price has moved advantageously while in the midst of the TWAP rebalance. This means the current leverage ratio has moved over/under\r\n     * the stored TWAP leverage ratio on lever/delever so there is no need to execute a rebalance. Used in iterateRebalance()\r\n     */\r\n    function _isAdvantageousTWAP(uint256 _currentLeverageRatio) internal view returns (bool) {\r\n        return (\r\n            (twapLeverageRatio < methodology.targetLeverageRatio && _currentLeverageRatio >= twapLeverageRatio) \r\n            || (twapLeverageRatio > methodology.targetLeverageRatio && _currentLeverageRatio <= twapLeverageRatio)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Calculate the current leverage ratio given a valuation of the collateral and borrow asset, which is calculated as collateral USD valuation / SetToken USD valuation\r\n     *\r\n     * return uint256            Current leverage ratio\r\n     */\r\n    function _calculateCurrentLeverageRatio(\r\n        uint256 _collateralValue,\r\n        uint256 _borrowValue\r\n    )\r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return _collateralValue.preciseDiv(_collateralValue.sub(_borrowValue));\r\n    }\r\n\r\n    /**\r\n     * Calculate the new leverage ratio using the flexible leverage methodology. The methodology reduces the size of each rebalance by weighting\r\n     * the current leverage ratio against the target leverage ratio by the recentering speed percentage. The lower the recentering speed, the slower\r\n     * the leverage token will move towards the target leverage each rebalance.\r\n     *\r\n     * return uint256          New leverage ratio based on the flexible leverage methodology\r\n     */\r\n    function _calculateNewLeverageRatio(uint256 _currentLeverageRatio) internal view returns(uint256) {\r\n        // CLRt+1 = max(MINLR, min(MAXLR, CLRt * (1 - RS) + TLR * RS))\r\n        // a: TLR * RS\r\n        // b: (1- RS) * CLRt\r\n        // c: (1- RS) * CLRt + TLR * RS\r\n        // d: min(MAXLR, CLRt * (1 - RS) + TLR * RS)\r\n        uint256 a = methodology.targetLeverageRatio.preciseMul(methodology.recenteringSpeed);\r\n        uint256 b = PreciseUnitMath.preciseUnit().sub(methodology.recenteringSpeed).preciseMul(_currentLeverageRatio);\r\n        uint256 c = a.add(b);\r\n        uint256 d = Math.min(c, methodology.maxLeverageRatio);\r\n        return Math.max(methodology.minLeverageRatio, d);\r\n    }\r\n\r\n    /**\r\n     * Calculate total notional rebalance quantity and chunked rebalance quantity in collateral units. \r\n     *\r\n     * return uint256          Chunked rebalance notional in collateral units\r\n     * return uint256          Total rebalance notional in collateral units\r\n     */\r\n    function _calculateChunkRebalanceNotional(\r\n        LeverageInfo memory _leverageInfo,\r\n        uint256 _newLeverageRatio,\r\n        bool _isLever\r\n    )\r\n        internal\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        // Calculate absolute value of difference between new and current leverage ratio\r\n        uint256 leverageRatioDifference = _isLever ? _newLeverageRatio.sub(_leverageInfo.currentLeverageRatio) : _leverageInfo.currentLeverageRatio.sub(_newLeverageRatio);\r\n\r\n        uint256 totalRebalanceNotional = leverageRatioDifference.preciseDiv(_leverageInfo.currentLeverageRatio).preciseMul(_leverageInfo.action.collateralBalance);\r\n\r\n        uint256 maxBorrow = _calculateMaxBorrowCollateral(_leverageInfo.action, _isLever);\r\n\r\n        uint256 chunkRebalanceNotional = Math.min(Math.min(maxBorrow, totalRebalanceNotional), _leverageInfo.twapMaxTradeSize);\r\n\r\n        return (chunkRebalanceNotional, totalRebalanceNotional);\r\n    }\r\n\r\n    /**\r\n     * Calculate the max borrow / repay amount allowed in collateral units for lever / delever. This is due to overcollateralization requirements on\r\n     * assets deposited in lending protocols for borrowing.\r\n     * \r\n     * For lever, max borrow is calculated as:\r\n     * (Net borrow limit in USD - existing borrow value in USD) / collateral asset price adjusted for decimals\r\n     *\r\n     * For delever, max borrow is calculated as:\r\n     * Collateral balance in base units * (net borrow limit in USD - existing borrow value in USD) / net borrow limit in USD\r\n     *\r\n     * Net borrow limit is calculated as:\r\n     * The collateral value in USD * Compound collateral factor * (1 - unutilized leverage %)\r\n     *\r\n     * return uint256          Max borrow notional denominated in collateral asset\r\n     */\r\n    function _calculateMaxBorrowCollateral(ActionInfo memory _actionInfo, bool _isLever) internal view returns(uint256) {\r\n        // Retrieve collateral factor which is the % increase in borrow limit in precise units (75% = 75 * 1e16)\r\n        ( , uint256 collateralFactorMantissa, ) = strategy.comptroller.markets(address(strategy.targetCollateralCToken));\r\n\r\n        uint256 netBorrowLimit = _actionInfo.collateralValue\r\n            .preciseMul(collateralFactorMantissa)\r\n            .preciseMul(PreciseUnitMath.preciseUnit().sub(execution.unutilizedLeveragePercentage));\r\n\r\n        if (_isLever) {\r\n            return netBorrowLimit\r\n                .sub(_actionInfo.borrowValue)\r\n                .preciseDiv(_actionInfo.collateralPrice);\r\n        } else {\r\n            return _actionInfo.collateralBalance\r\n                .preciseMul(netBorrowLimit.sub(_actionInfo.borrowValue))\r\n                .preciseDiv(netBorrowLimit);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Derive the borrow units for lever. The units are calculated by the collateral units multiplied by collateral / borrow asset price. Oracle prices\r\n     * have already been adjusted for the decimals in the token.\r\n     *\r\n     * return uint256           Position units to borrow\r\n     */\r\n    function _calculateBorrowUnits(uint256 _collateralRebalanceUnits, ActionInfo memory _actionInfo) internal pure returns (uint256) {\r\n        return _collateralRebalanceUnits.preciseMul(_actionInfo.collateralPrice).preciseDiv(_actionInfo.borrowPrice);\r\n    }\r\n\r\n    /**\r\n     * Calculate the min receive units in collateral units for lever. Units are calculated as target collateral rebalance units multiplied by slippage tolerance\r\n     *\r\n     * return uint256           Min position units to receive after lever trade\r\n     */\r\n    function _calculateMinCollateralReceiveUnits(uint256 _collateralRebalanceUnits, uint256 _slippageTolerance) internal pure returns (uint256) {\r\n        return _collateralRebalanceUnits.preciseMul(PreciseUnitMath.preciseUnit().sub(_slippageTolerance));\r\n    }\r\n\r\n    /**\r\n     * Derive the min repay units from collateral units for delever. Units are calculated as target collateral rebalance units multiplied by slippage tolerance\r\n     * and pair price (collateral oracle price / borrow oracle price). Oracle prices have already been adjusted for the decimals in the token.\r\n     *\r\n     * return uint256           Min position units to repay in borrow asset\r\n     */\r\n    function _calculateMinRepayUnits(uint256 _collateralRebalanceUnits, uint256 _slippageTolerance, ActionInfo memory _actionInfo) internal pure returns (uint256) {\r\n        return _collateralRebalanceUnits\r\n            .preciseMul(_actionInfo.collateralPrice)\r\n            .preciseDiv(_actionInfo.borrowPrice)\r\n            .preciseMul(PreciseUnitMath.preciseUnit().sub(_slippageTolerance));\r\n    }\r\n\r\n    /**\r\n     * Update last trade timestamp and if chunk rebalance size is less than total rebalance notional, store new leverage ratio to kick off TWAP. Used in\r\n     * the engage() and rebalance() functions\r\n     */\r\n    function _updateRebalanceState(\r\n        uint256 _chunkRebalanceNotional,\r\n        uint256 _totalRebalanceNotional,\r\n        uint256 _newLeverageRatio\r\n    )\r\n        internal\r\n    {\r\n        lastTradeTimestamp = block.timestamp;\r\n\r\n        if (_chunkRebalanceNotional < _totalRebalanceNotional) {\r\n            twapLeverageRatio = _newLeverageRatio;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update last trade timestamp and if chunk rebalance size is equal to the total rebalance notional, end TWAP by clearing state. This function is used\r\n     * in iterateRebalance()\r\n     */\r\n    function _updateIterateState(uint256 _chunkRebalanceNotional, uint256 _totalRebalanceNotional) internal {\r\n        lastTradeTimestamp = block.timestamp;\r\n\r\n        // If the chunk size is equal to the total notional meaning that rebalances are not chunked, then clear TWAP state.\r\n        if (_chunkRebalanceNotional == _totalRebalanceNotional) {\r\n            delete twapLeverageRatio;\r\n        }        \r\n    }\r\n\r\n    /**\r\n     * Update last trade timestamp and if currently in a TWAP, delete the TWAP state. Used in the ripcord() function.\r\n     */\r\n    function _updateRipcordState() internal {\r\n        lastTradeTimestamp = block.timestamp;\r\n\r\n        // If TWAP leverage ratio is stored, then clear state. This may happen if we are currently in a TWAP rebalance, and the leverage ratio moves above the\r\n        // incentivized threshold for ripcord.\r\n        if (twapLeverageRatio > 0) {\r\n            delete twapLeverageRatio;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transfer ETH reward to caller of the ripcord function. If the ETH balance on this contract is less than required \r\n     * incentive quantity, then transfer contract balance instead to prevent reverts.\r\n     *\r\n     * return uint256           Amount of ETH transferred to caller\r\n     */\r\n    function _transferEtherRewardToCaller(uint256 _etherReward) internal returns(uint256) {\r\n        uint256 etherToTransfer = _etherReward < address(this).balance ? _etherReward : address(this).balance;\r\n        \r\n        msg.sender.transfer(etherToTransfer);\r\n\r\n        return etherToTransfer;\r\n    }\r\n\r\n    /**\r\n     * Internal function returning the ShouldRebalance enum used in shouldRebalance and shouldRebalanceWithBounds external getter functions\r\n     *\r\n     * return ShouldRebalance         Enum detailing whether to rebalance, iterateRebalance, ripcord or no action\r\n     */\r\n    function _shouldRebalance(\r\n        uint256 _currentLeverageRatio,\r\n        uint256 _minLeverageRatio,\r\n        uint256 _maxLeverageRatio\r\n    )\r\n        internal\r\n        view\r\n        returns(ShouldRebalance)\r\n    {\r\n        // If above ripcord threshold, then check if incentivized cooldown period has elapsed\r\n        if (_currentLeverageRatio >= incentive.incentivizedLeverageRatio) {\r\n            if (lastTradeTimestamp.add(incentive.incentivizedTwapCooldownPeriod) < block.timestamp) {\r\n                return ShouldRebalance.RIPCORD;\r\n            }\r\n        } else {\r\n            // If TWAP, then check if the cooldown period has elapsed\r\n            if (twapLeverageRatio > 0) {\r\n                if (lastTradeTimestamp.add(execution.twapCooldownPeriod) < block.timestamp) {\r\n                    return ShouldRebalance.ITERATE_REBALANCE;\r\n                }\r\n            } else {\r\n                // If not TWAP, then check if the rebalance interval has elapsed OR current leverage is above max leverage OR current leverage is below\r\n                // min leverage\r\n                if (\r\n                    block.timestamp.sub(lastTradeTimestamp) > methodology.rebalanceInterval\r\n                    || _currentLeverageRatio > _maxLeverageRatio\r\n                    || _currentLeverageRatio < _minLeverageRatio\r\n                ) {\r\n                    return ShouldRebalance.REBALANCE;\r\n                }\r\n            }\r\n        }\r\n\r\n        // If none of the above conditions are satisfied, then should not rebalance\r\n        return ShouldRebalance.NONE;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IBaseManager\",\"name\":\"_manager\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract ISetToken\",\"name\":\"setToken\",\"type\":\"address\"},{\"internalType\":\"contract ICompoundLeverageModule\",\"name\":\"leverageModule\",\"type\":\"address\"},{\"internalType\":\"contract IComptroller\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"contract IChainlinkAggregatorV3\",\"name\":\"collateralPriceOracle\",\"type\":\"address\"},{\"internalType\":\"contract IChainlinkAggregatorV3\",\"name\":\"borrowPriceOracle\",\"type\":\"address\"},{\"internalType\":\"contract ICErc20\",\"name\":\"targetCollateralCToken\",\"type\":\"address\"},{\"internalType\":\"contract ICErc20\",\"name\":\"targetBorrowCToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralDecimalAdjustment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowDecimalAdjustment\",\"type\":\"uint256\"}],\"internalType\":\"struct FlexibleLeverageStrategyAdapter.ContractSettings\",\"name\":\"_strategy\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"targetLeverageRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLeverageRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverageRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recenteringSpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalanceInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct FlexibleLeverageStrategyAdapter.MethodologySettings\",\"name\":\"_methodology\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unutilizedLeveragePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"twapMaxTradeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"twapCooldownPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageTolerance\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"exchangeName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"leverExchangeData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"deleverExchangeData\",\"type\":\"bytes\"}],\"internalType\":\"struct FlexibleLeverageStrategyAdapter.ExecutionSettings\",\"name\":\"_execution\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"etherReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentivizedLeverageRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentivizedSlippageTolerance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentivizedTwapCooldownPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentivizedTwapMaxTradeSize\",\"type\":\"uint256\"}],\"internalType\":\"struct FlexibleLeverageStrategyAdapter.IncentiveSettings\",\"name\":\"_incentive\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"AnyoneCallableUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"CallerStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_currentLeverageRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLeverageRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_chunkRebalanceNotional\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalRebalanceNotional\",\"type\":\"uint256\"}],\"name\":\"Disengaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_currentLeverageRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLeverageRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_chunkRebalanceNotional\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalRebalanceNotional\",\"type\":\"uint256\"}],\"name\":\"Engaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_unutilizedLeveragePercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_twapMaxTradeSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_twapCooldownPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_slippageTolerance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_exchangeName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_leverExchangeData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_deleverExchangeData\",\"type\":\"bytes\"}],\"name\":\"ExecutionSettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_etherReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_incentivizedLeverageRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_incentivizedSlippageTolerance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_incentivizedTwapCooldownPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_incentivizedTwapMaxTradeSize\",\"type\":\"uint256\"}],\"name\":\"IncentiveSettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_targetLeverageRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minLeverageRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxLeverageRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_recenteringSpeed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rebalanceInterval\",\"type\":\"uint256\"}],\"name\":\"MethodologySettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_currentLeverageRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLeverageRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_chunkRebalanceNotional\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalRebalanceNotional\",\"type\":\"uint256\"}],\"name\":\"RebalanceIterated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_currentLeverageRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLeverageRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_chunkRebalanceNotional\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalRebalanceNotional\",\"type\":\"uint256\"}],\"name\":\"Rebalanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_currentLeverageRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newLeverageRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rebalanceNotional\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_etherIncentive\",\"type\":\"uint256\"}],\"name\":\"RipcordCalled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"anyoneCallable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"callAllowList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disengage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"engage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEtherIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentLeverageRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExecution\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unutilizedLeveragePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"twapMaxTradeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"twapCooldownPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageTolerance\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"exchangeName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"leverExchangeData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"deleverExchangeData\",\"type\":\"bytes\"}],\"internalType\":\"struct FlexibleLeverageStrategyAdapter.ExecutionSettings\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIncentive\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"etherReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentivizedLeverageRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentivizedSlippageTolerance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentivizedTwapCooldownPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentivizedTwapMaxTradeSize\",\"type\":\"uint256\"}],\"internalType\":\"struct FlexibleLeverageStrategyAdapter.IncentiveSettings\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMethodology\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"targetLeverageRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLeverageRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverageRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recenteringSpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalanceInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct FlexibleLeverageStrategyAdapter.MethodologySettings\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategy\",\"outputs\":[{\"components\":[{\"internalType\":\"contract ISetToken\",\"name\":\"setToken\",\"type\":\"address\"},{\"internalType\":\"contract ICompoundLeverageModule\",\"name\":\"leverageModule\",\"type\":\"address\"},{\"internalType\":\"contract IComptroller\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"contract IChainlinkAggregatorV3\",\"name\":\"collateralPriceOracle\",\"type\":\"address\"},{\"internalType\":\"contract IChainlinkAggregatorV3\",\"name\":\"borrowPriceOracle\",\"type\":\"address\"},{\"internalType\":\"contract ICErc20\",\"name\":\"targetCollateralCToken\",\"type\":\"address\"},{\"internalType\":\"contract ICErc20\",\"name\":\"targetBorrowCToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralDecimalAdjustment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowDecimalAdjustment\",\"type\":\"uint256\"}],\"internalType\":\"struct FlexibleLeverageStrategyAdapter.ContractSettings\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iterateRebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTradeTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract IBaseManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ripcord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unutilizedLeveragePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"twapMaxTradeSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"twapCooldownPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageTolerance\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"exchangeName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"leverExchangeData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"deleverExchangeData\",\"type\":\"bytes\"}],\"internalType\":\"struct FlexibleLeverageStrategyAdapter.ExecutionSettings\",\"name\":\"_newExecutionSettings\",\"type\":\"tuple\"}],\"name\":\"setExecutionSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"etherReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentivizedLeverageRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentivizedSlippageTolerance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentivizedTwapCooldownPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentivizedTwapMaxTradeSize\",\"type\":\"uint256\"}],\"internalType\":\"struct FlexibleLeverageStrategyAdapter.IncentiveSettings\",\"name\":\"_newIncentiveSettings\",\"type\":\"tuple\"}],\"name\":\"setIncentiveSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"targetLeverageRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLeverageRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverageRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recenteringSpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalanceInterval\",\"type\":\"uint256\"}],\"internalType\":\"struct FlexibleLeverageStrategyAdapter.MethodologySettings\",\"name\":\"_newMethodologySettings\",\"type\":\"tuple\"}],\"name\":\"setMethodologySettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldRebalance\",\"outputs\":[{\"internalType\":\"enum FlexibleLeverageStrategyAdapter.ShouldRebalance\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_customMinLeverageRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_customMaxLeverageRatio\",\"type\":\"uint256\"}],\"name\":\"shouldRebalanceWithBounds\",\"outputs\":[{\"internalType\":\"enum FlexibleLeverageStrategyAdapter.ShouldRebalance\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"twapLeverageRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateAnyoneCallable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_callers\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_statuses\",\"type\":\"bool[]\"}],\"name\":\"updateCallerStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEtherBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FlexibleLeverageStrategyAdapter","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000064fe9141c8e407887535471815af3d31b5e355d5000000000000000000000000dc11c313a28a68c6fc4df718dd93f057849e8208000000000000000000000000dd668fa631c0b3f863e3a830ca23fe75100009e60000000000000000000000003d9819210a31b4961b30ef54be2aed79b9c9cd3b0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b84190000000000000000000000008fffffd4afb6115b954bd326cbe7b4ba576818f60000000000000000000000004ddc2d193948926d02f9b1fe9e1daa0718270ed500000000000000000000000039aa39c021dfbae8fac545936693ac917d5e7563000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000001bc16d674ec8000000000000000000000000000000000000000000000000000017979cfe362a00000000000000000000000000000000000000000000000000001feb3dd06766000000000000000000000000000000000000000000000000000000b1a2bc2ec50000000000000000000000000000000000000000000000000000000000000001518000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000014d1120d7b160000000000000000000000000000000000000000000000000000257853b1dd8e000000000000000000000000000000000000000000000000000000b1a2bc2ec5000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000410d586a20a4c00000000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000002086ac351052600000000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000470de4df82000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000001853757368697377617045786368616e676541646170746572000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"istanbul","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://348c392e10ac2912781c969f2f19ebd7a27e10c442de6ce80cfa70bb07a5e0b9"}]}