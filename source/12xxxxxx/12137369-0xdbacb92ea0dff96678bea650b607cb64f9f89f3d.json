{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0\r\n\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface IVoterProxy {\r\n    function withdraw(\r\n        address _gauge,\r\n        address _token,\r\n        uint256 _amount\r\n    ) external returns (uint256);\r\n    function balanceOf(address _gauge) external view returns (uint256);\r\n    function withdrawAll(address _gauge, address _token) external returns (uint256);\r\n    function deposit(address _gauge, address _token) external;\r\n    function harvest(address _gauge) external;\r\n    function lock() external;\r\n    function approveStrategy(address) external;\r\n    function revokeStrategy(address) external;\r\n    function proxy() external returns (address);\r\n}\r\n\r\ninterface IVoter {\r\n    function setGovernance(address _governance) external;\r\n    function execute(address to, uint value, bytes calldata data) external returns (bool, bytes memory);\r\n}\r\n\r\ninterface IController {\r\n    function withdraw(address, uint256) external;\r\n    function balanceOf(address) external view returns (uint256);\r\n    function earn(address, uint256) external;\r\n    function want(address) external view returns (address);\r\n    function rewards() external view returns (address);\r\n    function vaults(address) external view returns (address);\r\n    function strategies(address) external view returns (address);\r\n    function approveStrategy(address, address) external;\r\n    function setStrategy(address, address) external;\r\n    function setVault(address, address) external;\r\n}\r\n\r\ninterface IStrategy {\r\n    function gauge() external returns (address);\r\n}\r\n\r\n\r\ncontract GaugeCleaner {\r\n    address public constant owner = address(0xFEB4acf3df3cDEA7399794D0869ef76A6EfAff52);\r\n    address public constant proxy = address(0x9a165622a744C20E3B2CB443AeD98110a33a231b);\r\n    address public constant mock_proxy = address(0x96Dd07B6c99b22F3f0cB1836aFF8530a98BDe9E3);\r\n    IVoter public constant voter = IVoter(0xF147b8125d2ef93FB6965Db97D6746952a133934);\r\n    IController public constant ctrl = IController(0x9E65Ad11b299CA0Abefc2799dDB6314Ef2d91080);\r\n\r\n    constructor() public {}\r\n\r\n    function clear(address token) external {\r\n        require(msg.sender == owner, \"migrate::!owner\");\r\n        address strategy = ctrl.strategies(token);\r\n        address vault = ctrl.vaults(token);\r\n        address gauge = IStrategy(strategy).gauge();\r\n\r\n        uint _balance;\r\n        \r\n        _balance = IERC20(gauge).balanceOf(address(voter));\r\n        voter.execute(gauge, 0, abi.encodeWithSignature(\"withdraw(uint256)\", _balance));\r\n        \r\n        _balance = IERC20(token).balanceOf(address(voter));\r\n        voter.execute(token, 0, abi.encodeWithSignature(\"transfer(address,uint256)\", vault, _balance));\r\n        \r\n        require(IERC20(gauge).balanceOf(address(voter)) == 0, \"gauge not 0\");\r\n        require(IERC20(token).balanceOf(address(voter)) == 0, \"voter not 0\");\r\n    }\r\n\r\n    function setVoterGovernance() external {\r\n        require(msg.sender == owner, \"set::!owner\");\r\n        voter.setGovernance(owner);\r\n    }\r\n\r\n    function voterExecute(address to, uint value, bytes calldata data) external returns (bool success, bytes memory result) {\r\n        require(msg.sender == owner, \"vExec::!owner\");\r\n        (success, result) = voter.execute(to, value, data);\r\n    }\r\n\r\n    function execute(address to, uint value, bytes calldata data) external returns (bool success, bytes memory result) {\r\n        require(msg.sender == owner, \"exec::!owner\");\r\n        (success, result) = to.call{value: value}(data);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"clear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ctrl\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mock_proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setVoterGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"contract IVoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"voterExecute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GaugeCleaner","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3334ca2cf475296739d52c66c76bece067fc1e79e4a176ae1ea4e421a431915b"}]}