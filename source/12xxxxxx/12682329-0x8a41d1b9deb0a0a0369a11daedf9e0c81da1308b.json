{"status":"1","message":"OK","result":[{"SourceCode":"/** \r\n *  SourceUnit: /Users/prateekyammanuru/work/marlin/contracts_github/Contracts/contracts/Stake/StakeManager.sol\r\n*/\r\n            \r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /Users/prateekyammanuru/work/marlin/contracts_github/Contracts/contracts/Stake/StakeManager.sol\r\n*/\r\n            \r\npragma solidity ^0.5.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /Users/prateekyammanuru/work/marlin/contracts_github/Contracts/contracts/Stake/StakeManager.sol\r\n*/\r\n            \r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /Users/prateekyammanuru/work/marlin/contracts_github/Contracts/contracts/Stake/StakeManager.sol\r\n*/\r\n            \r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * ////IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /Users/prateekyammanuru/work/marlin/contracts_github/Contracts/contracts/Stake/StakeManager.sol\r\n*/\r\n            \r\npragma solidity 0.5.17;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ncontract MPondLogic is Initializable {\r\n    /// @notice EIP-20 token name for this token\r\n    string public name;\r\n\r\n    /// @notice EIP-20 token symbol for this token\r\n    string public symbol;\r\n\r\n    /// @notice EIP-20 token decimals for this token\r\n    uint8 public decimals;\r\n\r\n    /// @notice Total number of tokens in circulation\r\n    uint256 public totalSupply; // 10k MPond\r\n    uint256 public bridgeSupply; // 3k MPond\r\n\r\n    address public dropBridge;\r\n    /// @notice Allowance amounts on behalf of others\r\n    mapping(address => mapping(address => uint96)) internal allowances;\r\n\r\n    /// @notice Official record of token balances for each account\r\n    mapping(address => uint96) internal balances;\r\n\r\n    /// @notice A record of each accounts delegate\r\n    mapping(address => mapping(address => uint96)) public delegates;\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint96 votes;\r\n    }\r\n\r\n    /// @notice A record of votes checkpoints for each account, by index\r\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\r\n\r\n    /// @notice The number of checkpoints for each account\r\n    mapping(address => uint32) public numCheckpoints;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public DOMAIN_TYPEHASH;\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public DELEGATION_TYPEHASH;\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public UNDELEGATION_TYPEHASH;\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping(address => uint256) public nonces;\r\n\r\n    /// customized params\r\n    address public admin;\r\n    mapping(address => bool) public isWhiteListed;\r\n    bool public enableAllTranfers;\r\n\r\n    /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(\r\n        address indexed delegator,\r\n        address indexed fromDelegate,\r\n        address indexed toDelegate\r\n    );\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(\r\n        address indexed delegate,\r\n        uint256 previousBalance,\r\n        uint256 newBalance\r\n    );\r\n\r\n    /// @notice The standard EIP-20 transfer event\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    /// @notice The standard EIP-20 approval event\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 amount\r\n    );\r\n\r\n    /**\r\n     * @notice Initializer a new MPond token\r\n     * @param account The initial account to grant all the tokens\r\n     */\r\n    function initialize(\r\n        address account,\r\n        address bridge,\r\n        address dropBridgeAddress\r\n    ) public initializer {\r\n        createConstants();\r\n        require(\r\n            account != bridge,\r\n            \"Bridge and account should not be the same address\"\r\n        );\r\n        balances[bridge] = uint96(bridgeSupply);\r\n        delegates[bridge][address(0)] = uint96(bridgeSupply);\r\n        isWhiteListed[bridge] = true;\r\n        emit Transfer(address(0), bridge, bridgeSupply);\r\n\r\n        uint96 remainingSupply = sub96(\r\n            uint96(totalSupply),\r\n            uint96(bridgeSupply),\r\n            \"MPond: Subtraction overflow in the constructor\"\r\n        );\r\n        balances[account] = remainingSupply;\r\n        delegates[account][address(0)] = remainingSupply;\r\n        isWhiteListed[account] = true;\r\n        dropBridge = dropBridgeAddress;\r\n        emit Transfer(address(0), account, uint256(remainingSupply));\r\n    }\r\n\r\n    function createConstants() internal {\r\n        name = \"Marlin\";\r\n        symbol = \"MPond\";\r\n        decimals = 18;\r\n        totalSupply = 10000e18;\r\n        bridgeSupply = 7000e18;\r\n        DOMAIN_TYPEHASH = keccak256(\r\n            \"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"\r\n        );\r\n        DELEGATION_TYPEHASH = keccak256(\r\n            \"Delegation(address delegatee,uint256 nonce,uint256 expiry,uint96 amount)\"\r\n        );\r\n        UNDELEGATION_TYPEHASH = keccak256(\r\n            \"Unelegation(address delegatee,uint256 nonce,uint256 expiry,uint96 amount)\"\r\n        );\r\n        admin = msg.sender;\r\n        // enableAllTranfers = true; //This is only for testing, will be false\r\n    }\r\n\r\n    function addWhiteListAddress(address _address)\r\n        external\r\n        onlyAdmin(\"Only admin can whitelist\")\r\n        returns (bool)\r\n    {\r\n        isWhiteListed[_address] = true;\r\n        return true;\r\n    }\r\n\r\n    function removeWhiteListAddress(address _address)\r\n        external\r\n        onlyAdmin(\"Only admin can remove from whitelist\")\r\n        returns (bool)\r\n    {\r\n        isWhiteListed[_address] = false;\r\n        return true;\r\n    }\r\n\r\n    function enableAllTransfers()\r\n        external\r\n        onlyAdmin(\"Only admin can enable all transfers\")\r\n        returns (bool)\r\n    {\r\n        enableAllTranfers = true;\r\n        return true;\r\n    }\r\n\r\n    function disableAllTransfers()\r\n        external\r\n        onlyAdmin(\"Only admin can disable all transfers\")\r\n        returns (bool)\r\n    {\r\n        enableAllTranfers = false;\r\n        return true;\r\n    }\r\n\r\n    function changeDropBridge(address _updatedBridge)\r\n        public\r\n        onlyAdmin(\"Only admin can change drop bridge\")\r\n    {\r\n        dropBridge = _updatedBridge;\r\n    }\r\n\r\n    function isWhiteListedTransfer(address _address1, address _address2)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        if (\r\n            enableAllTranfers ||\r\n            isWhiteListed[_address1] ||\r\n            isWhiteListed[_address2]\r\n        ) {\r\n            return true;\r\n        } else if (_address1 == dropBridge) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\r\n     * @param account The address of the account holding the funds\r\n     * @param spender The address of the account spending the funds\r\n     * @return The number of tokens approved\r\n     */\r\n    function allowance(address account, address spender)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return allowances[account][spender];\r\n    }\r\n\r\n    /**\r\n     * @notice Approve `spender` to transfer up to `amount` from `src`\r\n     * @dev This will overwrite the approval amount for `spender`\r\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\r\n     * @return Whether or not the approval succeeded\r\n     */\r\n    function approve(address spender, uint256 rawAmount)\r\n        external\r\n        returns (bool)\r\n    {\r\n        uint96 amount;\r\n        if (rawAmount == uint256(-1)) {\r\n            amount = uint96(-1);\r\n        } else {\r\n            amount = safe96(\r\n                rawAmount,\r\n                \"MPond::approve: amount exceeds 96 bits\"\r\n            );\r\n        }\r\n\r\n        allowances[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedAmount)\r\n        external\r\n        returns (bool)\r\n    {\r\n        uint96 amount;\r\n        if (addedAmount == uint256(-1)) {\r\n            amount = uint96(-1);\r\n        } else {\r\n            amount = safe96(\r\n                addedAmount,\r\n                \"MPond::approve: addedAmount exceeds 96 bits\"\r\n            );\r\n        }\r\n\r\n        allowances[msg.sender][spender] = add96(\r\n            allowances[msg.sender][spender],\r\n            amount,\r\n            \"MPond: increaseAllowance allowance value overflows\"\r\n        );\r\n        emit Approval(msg.sender, spender, allowances[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 removedAmount)\r\n        external\r\n        returns (bool)\r\n    {\r\n        uint96 amount;\r\n        if (removedAmount == uint256(-1)) {\r\n            amount = uint96(-1);\r\n        } else {\r\n            amount = safe96(\r\n                removedAmount,\r\n                \"MPond::approve: removedAmount exceeds 96 bits\"\r\n            );\r\n        }\r\n\r\n        allowances[msg.sender][spender] = sub96(\r\n            allowances[msg.sender][spender],\r\n            amount,\r\n            \"MPond: decreaseAllowance allowance value underflows\"\r\n        );\r\n        emit Approval(msg.sender, spender, allowances[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the number of tokens held by the `account`\r\n     * @param account The address of the account to get the balance of\r\n     * @return The number of tokens held\r\n     */\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return balances[account];\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n     * @param dst The address of the destination account\r\n     * @param rawAmount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transfer(address dst, uint256 rawAmount) external returns (bool) {\r\n        require(\r\n            isWhiteListedTransfer(msg.sender, dst),\r\n            \"Atleast one of the address (src or dst) should be whitelisted or all transfers must be enabled via enableAllTransfers()\"\r\n        );\r\n        uint96 amount = safe96(\r\n            rawAmount,\r\n            \"MPond::transfer: amount exceeds 96 bits\"\r\n        );\r\n        _transferTokens(msg.sender, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `src` to `dst`\r\n     * @param src The address of the source account\r\n     * @param dst The address of the destination account\r\n     * @param rawAmount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint256 rawAmount\r\n    ) external returns (bool) {\r\n        require(\r\n            isWhiteListedTransfer(src, dst),\r\n            \"Atleast one of the address (src or dst) should be whitelisted or all transfers must be enabled via enableAllTransfers()\"\r\n        );\r\n        address spender = msg.sender;\r\n        uint96 spenderAllowance = allowances[src][spender];\r\n        uint96 amount = safe96(\r\n            rawAmount,\r\n            \"MPond::approve: amount exceeds 96 bits\"\r\n        );\r\n\r\n        if (spender != src && spenderAllowance != uint96(-1)) {\r\n            uint96 newAllowance = sub96(\r\n                spenderAllowance,\r\n                amount,\r\n                \"MPond::transferFrom: transfer amount exceeds spender allowance\"\r\n            );\r\n            allowances[src][spender] = newAllowance;\r\n\r\n            emit Approval(src, spender, newAllowance);\r\n        }\r\n\r\n        _transferTokens(src, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     */\r\n    function delegate(address delegatee, uint96 amount) public {\r\n        return _delegate(msg.sender, delegatee, amount);\r\n    }\r\n\r\n    function undelegate(address delegatee, uint96 amount) public {\r\n        return _undelegate(msg.sender, delegatee, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates votes from signatory to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     * @param nonce The contract state required to match the signature\r\n     * @param expiry The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function delegateBySig(\r\n        address delegatee,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint96 amount\r\n    ) public {\r\n        bytes32 domainSeparator = keccak256(\r\n            abi.encode(\r\n                DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name)),\r\n                getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry, amount)\r\n        );\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)\r\n        );\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(\r\n            signatory != address(0),\r\n            \"MPond::delegateBySig: invalid signature\"\r\n        );\r\n        require(\r\n            nonce == nonces[signatory]++,\r\n            \"MPond::delegateBySig: invalid nonce\"\r\n        );\r\n        require(now <= expiry, \"MPond::delegateBySig: signature expired\");\r\n        return _delegate(signatory, delegatee, amount);\r\n    }\r\n\r\n    function undelegateBySig(\r\n        address delegatee,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint96 amount\r\n    ) public {\r\n        bytes32 domainSeparator = keccak256(\r\n            abi.encode(\r\n                DOMAIN_TYPEHASH,\r\n                keccak256(bytes(name)),\r\n                getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n        bytes32 structHash = keccak256(\r\n            abi.encode(UNDELEGATION_TYPEHASH, delegatee, nonce, expiry, amount)\r\n        );\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)\r\n        );\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(\r\n            signatory != address(0),\r\n            \"MPond::undelegateBySig: invalid signature\"\r\n        );\r\n        require(\r\n            nonce == nonces[signatory]++,\r\n            \"MPond::undelegateBySig: invalid nonce\"\r\n        );\r\n        require(now <= expiry, \"MPond::undelegateBySig: signature expired\");\r\n        return _undelegate(signatory, delegatee, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current votes balance for `account`\r\n     * @param account The address to get votes balance\r\n     * @return The number of current votes for `account`\r\n     */\r\n    function getCurrentVotes(address account) external view returns (uint96) {\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        return\r\n            nCheckpoints != 0\r\n                ? checkpoints[account][nCheckpoints - 1].votes\r\n                : 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the prior number of votes for an account as of a block number\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check\r\n     * @param blockNumber The block number to get the vote balance at\r\n     * @return The number of votes the account had as of the given block\r\n     */\r\n    function getPriorVotes(address account, uint256 blockNumber)\r\n        public\r\n        view\r\n        returns (uint96)\r\n    {\r\n        require(\r\n            blockNumber < block.number,\r\n            \"MPond::getPriorVotes: not yet determined\"\r\n        );\r\n\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0].fromBlock > blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint32 lower = 0;\r\n        uint32 upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock < blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower].votes;\r\n    }\r\n\r\n    function _delegate(\r\n        address delegator,\r\n        address delegatee,\r\n        uint96 amount\r\n    ) internal {\r\n        delegates[delegator][address(0)] = sub96(\r\n            delegates[delegator][address(0)],\r\n            amount,\r\n            \"MPond: delegates underflow\"\r\n        );\r\n        delegates[delegator][delegatee] = add96(\r\n            delegates[delegator][delegatee],\r\n            amount,\r\n            \"MPond: delegates overflow\"\r\n        );\r\n\r\n        emit DelegateChanged(delegator, address(0), delegatee);\r\n\r\n        _moveDelegates(address(0), delegatee, amount);\r\n    }\r\n\r\n    function _undelegate(\r\n        address delegator,\r\n        address delegatee,\r\n        uint96 amount\r\n    ) internal {\r\n        delegates[delegator][delegatee] = sub96(\r\n            delegates[delegator][delegatee],\r\n            amount,\r\n            \"MPond: undelegates underflow\"\r\n        );\r\n        delegates[delegator][address(0)] = add96(\r\n            delegates[delegator][address(0)],\r\n            amount,\r\n            \"MPond: delegates underflow\"\r\n        );\r\n        emit DelegateChanged(delegator, delegatee, address(0));\r\n        _moveDelegates(delegatee, address(0), amount);\r\n    }\r\n\r\n    function _transferTokens(\r\n        address src,\r\n        address dst,\r\n        uint96 amount\r\n    ) internal {\r\n        require(\r\n            src != address(0),\r\n            \"MPond::_transferTokens: cannot transfer from the zero address\"\r\n        );\r\n        require(\r\n            delegates[src][address(0)] >= amount,\r\n            \"MPond: _transferTokens: undelegated amount should be greater than transfer amount\"\r\n        );\r\n        require(\r\n            dst != address(0),\r\n            \"MPond::_transferTokens: cannot transfer to the zero address\"\r\n        );\r\n\r\n        balances[src] = sub96(\r\n            balances[src],\r\n            amount,\r\n            \"MPond::_transferTokens: transfer amount exceeds balance\"\r\n        );\r\n        delegates[src][address(0)] = sub96(\r\n            delegates[src][address(0)],\r\n            amount,\r\n            \"MPond: _tranferTokens: undelegate subtraction error\"\r\n        );\r\n\r\n        balances[dst] = add96(\r\n            balances[dst],\r\n            amount,\r\n            \"MPond::_transferTokens: transfer amount overflows\"\r\n        );\r\n        delegates[dst][address(0)] = add96(\r\n            delegates[dst][address(0)],\r\n            amount,\r\n            \"MPond: _transferTokens: undelegate addition error\"\r\n        );\r\n        emit Transfer(src, dst, amount);\r\n\r\n        // _moveDelegates(delegates[src], delegates[dst], amount);\r\n    }\r\n\r\n    function _moveDelegates(\r\n        address srcRep,\r\n        address dstRep,\r\n        uint96 amount\r\n    ) internal {\r\n        if (srcRep != dstRep && amount != 0) {\r\n            if (srcRep != address(0)) {\r\n                uint32 srcRepNum = numCheckpoints[srcRep];\r\n                uint96 srcRepOld = srcRepNum != 0\r\n                    ? checkpoints[srcRep][srcRepNum - 1].votes\r\n                    : 0;\r\n                uint96 srcRepNew = sub96(\r\n                    srcRepOld,\r\n                    amount,\r\n                    \"MPond::_moveVotes: vote amount underflows\"\r\n                );\r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                uint32 dstRepNum = numCheckpoints[dstRep];\r\n                uint96 dstRepOld = dstRepNum != 0\r\n                    ? checkpoints[dstRep][dstRepNum - 1].votes\r\n                    : 0;\r\n                uint96 dstRepNew = add96(\r\n                    dstRepOld,\r\n                    amount,\r\n                    \"MPond::_moveVotes: vote amount overflows\"\r\n                );\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(\r\n        address delegatee,\r\n        uint32 nCheckpoints,\r\n        uint96 oldVotes,\r\n        uint96 newVotes\r\n    ) internal {\r\n        uint32 blockNumber = safe32(\r\n            block.number,\r\n            \"MPond::_writeCheckpoint: block number exceeds 32 bits\"\r\n        );\r\n\r\n        if (\r\n            nCheckpoints != 0 &&\r\n            checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\r\n        ) {\r\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n        } else {\r\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(\r\n                blockNumber,\r\n                newVotes\r\n            );\r\n            numCheckpoints[delegatee] = nCheckpoints + 1;\r\n        }\r\n\r\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n\r\n    function safe32(uint256 n, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint32)\r\n    {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    function safe96(uint256 n, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint96)\r\n    {\r\n        require(n < 2**96, errorMessage);\r\n        return uint96(n);\r\n    }\r\n\r\n    function add96(\r\n        uint96 a,\r\n        uint96 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint96) {\r\n        uint96 c = a + b;\r\n        require(c >= a, errorMessage);\r\n        return c;\r\n    }\r\n\r\n    function sub96(\r\n        uint96 a,\r\n        uint96 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint96) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function getChainId() internal pure returns (uint256) {\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        return chainId;\r\n    }\r\n\r\n    modifier onlyAdmin(string memory _error) {\r\n        require(msg.sender == admin, _error);\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /Users/prateekyammanuru/work/marlin/contracts_github/Contracts/contracts/Stake/StakeManager.sol\r\n*/\r\n            \r\npragma solidity ^0.5.17;\r\n\r\ninterface IRewardDelegators {\r\n    // there's no undelegationWaitTime in rewardDelegators contract\r\n    function undelegationWaitTime() external returns(uint256);\r\n    function minMPONDStake() external returns(uint256);\r\n    function MPONDTokenId() external returns(bytes32);\r\n    function updateMPONDTokenId(bytes32 _updatedMPONDTokenId) external;\r\n    function addRewardFactor(bytes32 _tokenId, uint256 _rewardFactor) external;\r\n    function removeRewardFactor(bytes32 _tokenId) external;\r\n    function updateRewardFactor(bytes32 _tokenId, uint256 _updatedRewardFactor) external;\r\n    function _updateRewards(address _cluster) external;\r\n    function delegate(\r\n        address _delegator,\r\n        address _cluster,\r\n        bytes32[] calldata _tokens,\r\n        uint256[] calldata _amounts\r\n    ) external;\r\n    function undelegate(\r\n        address _delegator,\r\n        address _cluster,\r\n        bytes32[] calldata _tokens,\r\n        uint256[] calldata _amounts\r\n    ) external;\r\n    function withdrawRewards(address _delegator, address _cluster) external returns(uint256);\r\n    function isClusterActive(address _cluster) external returns(bool);\r\n    function getClusterDelegation(address _cluster, bytes32 _tokenId) external view returns(uint256);\r\n    function getDelegation(address _cluster, address _delegator, bytes32 _tokenId) external view returns(uint256);\r\n    function updateUndelegationWaitTime(uint256 _undelegationWaitTime) external;\r\n    function updateMinMPONDStake(uint256 _minMPONDStake) external;\r\n    function updateStakeAddress(address _updatedStakeAddress) external;\r\n    function updateClusterRewards(address _updatedClusterRewards) external;\r\n    function updateClusterRegistry(address _updatedClusterRegistry) external;\r\n    function updatePONDAddress(address _updatedPOND) external;\r\n    function getFullTokenList() external view returns (bytes32[] memory);\r\n    function getAccRewardPerShare(address _cluster, bytes32 _tokenId) external view returns(uint256);\r\n}\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /Users/prateekyammanuru/work/marlin/contracts_github/Contracts/contracts/Stake/StakeManager.sol\r\n*/\r\n            \r\npragma solidity ^0.5.0;\r\n\r\n\r\n////import \"../GSN/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n\r\n\r\n/** \r\n *  SourceUnit: /Users/prateekyammanuru/work/marlin/contracts_github/Contracts/contracts/Stake/StakeManager.sol\r\n*/\r\n            \r\npragma solidity ^0.5.0;\r\n\r\n\r\n////import \"../../GSN/Context.sol\";\r\n////import \"./IERC20.sol\";\r\n////import \"../../math/SafeMath.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Initializable, Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/** \r\n *  SourceUnit: /Users/prateekyammanuru/work/marlin/contracts_github/Contracts/contracts/Stake/StakeManager.sol\r\n*/\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n\r\n\r\ncontract StakeManager is Initializable, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct Stash {\r\n        address staker;\r\n        address delegatedCluster;\r\n        mapping(bytes32 => uint256) amount;   // name is not intuitive\r\n        uint256 undelegatesAt;\r\n    }\r\n\r\n    struct Token {\r\n        address addr;\r\n        bool isActive;\r\n    }\r\n    // stashId to stash\r\n    // stashId = keccak256(index)\r\n    mapping(bytes32 => Stash) public stashes;\r\n    // Stash index for unique id generation\r\n    uint256 public stashIndex;\r\n    // tokenId to token address - tokenId = keccak256(tokenTicker)\r\n    mapping(bytes32 => Token) tokenAddresses;\r\n    MPondLogic MPOND;\r\n    MPondLogic prevMPOND;\r\n    address _unused_1;\r\n    IRewardDelegators public rewardDelegators;\r\n    // new variables\r\n    struct Lock {\r\n        uint256 unlockBlock;\r\n        uint256 iValue;\r\n    }\r\n\r\n    mapping(bytes32 => Lock) public locks;\r\n    mapping(bytes32 => uint256) public lockWaitTime;\r\n    bytes32 constant REDELEGATION_LOCK_SELECTOR = keccak256(\"REDELEGATION_LOCK\");\r\n    uint256 public undelegationWaitTime;\r\n\r\n    event StashCreated(\r\n        address indexed creator,\r\n        bytes32 stashId,\r\n        uint256 stashIndex,\r\n        bytes32[] tokens,\r\n        uint256[] amounts\r\n    );\r\n    event StashDelegated(bytes32 stashId, address delegatedCluster);\r\n    event StashUndelegated(bytes32 stashId, address undelegatedCluster, uint256 undelegatesAt);\r\n    event StashWithdrawn(bytes32 stashId, bytes32[] tokens, uint256[] amounts);\r\n    event StashClosed(bytes32 stashId, address indexed staker);\r\n    event AddedToStash(bytes32 stashId, address delegatedCluster, bytes32[] tokens, uint256[] amounts);\r\n    event TokenAdded(bytes32 tokenId, address tokenAddress);\r\n    event TokenRemoved(bytes32 tokenId);\r\n    event TokenUpdated(bytes32 tokenId, address tokenAddress);\r\n    event RedelegationRequested(bytes32 stashId, address currentCluster, address updatedCluster, uint256 redelegatesAt);\r\n    event Redelegated(bytes32 stashId, address updatedCluster);\r\n    event LockTimeUpdated(bytes32 selector, uint256 prevLockTime, uint256 updatedLockTime);\r\n    event StashSplit(\r\n        bytes32 _newStashId,\r\n        bytes32 _stashId,\r\n        uint256 _stashIndex,\r\n        bytes32[] _splitTokens,\r\n        uint256[] _splitAmounts\r\n    );\r\n    event StashesMerged(bytes32 _stashId1, bytes32 _stashId2);\r\n    event StashUndelegationCancelled(bytes32 _stashId);\r\n    event UndelegationWaitTimeUpdated(uint256 undelegationWaitTime);\r\n    event RedelegationCancelled(bytes32 indexed _stashId);\r\n\r\n    function initialize(\r\n        bytes32[] memory _tokenIds,\r\n        address[] memory _tokenAddresses,\r\n        address _MPONDTokenAddress,\r\n        address _rewardDelegatorsAddress,\r\n        address _owner,\r\n        uint256 _undelegationWaitTime)\r\n        initializer\r\n        public\r\n    {\r\n        require(\r\n            _tokenIds.length == _tokenAddresses.length\r\n        );\r\n        for(uint256 i=0; i < _tokenIds.length; i++) {\r\n            tokenAddresses[_tokenIds[i]] = Token(_tokenAddresses[i], true);\r\n            emit TokenAdded(_tokenIds[i], _tokenAddresses[i]);\r\n        }\r\n        MPOND = MPondLogic(_MPONDTokenAddress);\r\n        rewardDelegators = IRewardDelegators(_rewardDelegatorsAddress);\r\n        undelegationWaitTime = _undelegationWaitTime;\r\n        super.initialize(_owner);\r\n    }\r\n\r\n    function updateLockWaitTime(bytes32 _selector, uint256 _updatedWaitTime) external onlyOwner {\r\n        emit LockTimeUpdated(_selector, lockWaitTime[_selector], _updatedWaitTime);\r\n        lockWaitTime[_selector] = _updatedWaitTime;\r\n    }\r\n\r\n    function changeMPONDTokenAddress(\r\n        address _MPONDTokenAddress\r\n    ) external onlyOwner {\r\n        prevMPOND = MPOND;\r\n        MPOND = MPondLogic(_MPONDTokenAddress);\r\n        emit TokenUpdated(keccak256(\"MPOND\"), _MPONDTokenAddress);\r\n    }\r\n\r\n    function updateRewardDelegators(\r\n        address _updatedRewardDelegator\r\n    ) external onlyOwner {\r\n        require(\r\n            _updatedRewardDelegator != address(0)\r\n        );\r\n        rewardDelegators = IRewardDelegators(_updatedRewardDelegator);\r\n    }\r\n\r\n    function updateUndelegationWaitTime(\r\n        uint256 _undelegationWaitTime\r\n    ) external onlyOwner {\r\n        undelegationWaitTime = _undelegationWaitTime;\r\n        emit UndelegationWaitTimeUpdated(_undelegationWaitTime);\r\n    }\r\n\r\n    function enableToken(\r\n        bytes32 _tokenId,\r\n        address _address\r\n    ) external onlyOwner {\r\n        require(\r\n            !tokenAddresses[_tokenId].isActive\r\n        );\r\n        require(_address != address(0));\r\n        tokenAddresses[_tokenId] = Token(_address, true);\r\n        emit TokenAdded(_tokenId, _address);\r\n    }\r\n\r\n    function disableToken(\r\n        bytes32 _tokenId\r\n    ) external onlyOwner {\r\n        require(\r\n            tokenAddresses[_tokenId].isActive\r\n        );\r\n        tokenAddresses[_tokenId].isActive = false;\r\n        emit TokenRemoved(_tokenId);\r\n    }\r\n\r\n    function createStashAndDelegate(\r\n        bytes32[] memory _tokens,\r\n        uint256[] memory _amounts,\r\n        address _delegatedCluster\r\n    ) public {\r\n        bytes32 stashId = createStash(_tokens, _amounts);\r\n        delegateStash(stashId, _delegatedCluster);\r\n    }\r\n\r\n    function createStash(\r\n        bytes32[] memory _tokens,\r\n        uint256[] memory _amounts\r\n    ) public returns(bytes32) {\r\n        require(\r\n            _tokens.length == _amounts.length,\r\n            \"CS1\"\r\n        );\r\n        require(\r\n            _tokens.length != 0,\r\n            \"CS2\"\r\n        );\r\n        uint256 _stashIndex = stashIndex;\r\n        bytes32 _stashId = keccak256(abi.encodePacked(_stashIndex));\r\n        for(uint256 _index=0; _index < _tokens.length; _index++) {\r\n            bytes32 _tokenId = _tokens[_index];\r\n            uint256 _amount = _amounts[_index];\r\n            require(\r\n                tokenAddresses[_tokenId].isActive,\r\n                \"CS3\"\r\n            );\r\n            require(\r\n                stashes[_stashId].amount[_tokenId] == 0,\r\n                \"CS4\"\r\n            );\r\n            require(\r\n                _amount != 0,\r\n                \"CS5\"\r\n            );\r\n            stashes[_stashId].amount[_tokenId] = _amount;\r\n            _lockTokens(_tokenId, _amount, msg.sender);\r\n        }\r\n        stashes[_stashId].staker = msg.sender;\r\n        emit StashCreated(msg.sender, _stashId, _stashIndex, _tokens, _amounts);\r\n        stashIndex = _stashIndex + 1;  // Can't overflow\r\n        return _stashId;\r\n    }\r\n\r\n    function addToStash(\r\n        bytes32 _stashId,\r\n        bytes32[] calldata _tokens,\r\n        uint256[] calldata _amounts\r\n    ) external {\r\n        Stash memory _stash = stashes[_stashId];\r\n        require(\r\n            _stash.staker == msg.sender,\r\n            \"AS1\"\r\n        );\r\n        require(\r\n            _stash.undelegatesAt <= block.number,\r\n            \"AS2\"\r\n        );\r\n        require(\r\n            _tokens.length == _amounts.length,\r\n            \"AS3\"\r\n        );\r\n        if(\r\n            _stash.delegatedCluster != address(0)\r\n        ) {\r\n            rewardDelegators.delegate(msg.sender, _stash.delegatedCluster, _tokens, _amounts);\r\n        }\r\n        for(uint256 i = 0; i < _tokens.length; i++) {\r\n            bytes32 _tokenId = _tokens[i];\r\n            require(\r\n                tokenAddresses[_tokenId].isActive,\r\n                \"AS4\"\r\n            );\r\n            if(_amounts[i] != 0) {\r\n                stashes[_stashId].amount[_tokenId] = stashes[_stashId].amount[_tokenId].add(_amounts[i]);\r\n                _lockTokens(_tokenId, _amounts[i], msg.sender);\r\n            }\r\n        }\r\n        \r\n        emit AddedToStash(_stashId, _stash.delegatedCluster, _tokens, _amounts);\r\n    }\r\n\r\n    function delegateStash(bytes32 _stashId, address _delegatedCluster) public {\r\n        Stash memory _stash = stashes[_stashId];\r\n        require(\r\n            _stash.staker == msg.sender,\r\n            \"DS1\"\r\n        );\r\n        require(\r\n            _delegatedCluster != address(0),\r\n            \"DS2\"\r\n        );\r\n        require(\r\n            _stash.delegatedCluster == address(0),\r\n            \"DS3\"\r\n        );\r\n        require(\r\n            _stash.undelegatesAt <= block.number,\r\n            \"DS4\"\r\n        );\r\n        stashes[_stashId].delegatedCluster = _delegatedCluster;\r\n        delete stashes[_stashId].undelegatesAt;\r\n        bytes32[] memory _tokens = rewardDelegators.getFullTokenList();\r\n        uint256[] memory _amounts = new uint256[](_tokens.length);\r\n        for(uint256 i = 0; i < _tokens.length; i++) {\r\n            _amounts[i] = stashes[_stashId].amount[_tokens[i]];\r\n        }\r\n        rewardDelegators.delegate(msg.sender, _delegatedCluster, _tokens, _amounts);\r\n        emit StashDelegated(_stashId, _delegatedCluster);\r\n    }\r\n\r\n    function requestStashRedelegation(bytes32 _stashId, address _newCluster) public {\r\n        Stash memory _stash = stashes[_stashId];\r\n        require(\r\n            _stash.staker == msg.sender,\r\n            \"RSR1\"\r\n        );\r\n        require(\r\n            _stash.delegatedCluster != address(0),\r\n            \"RSR2\"\r\n        );\r\n        require(\r\n            _newCluster != address(0),\r\n            \"RSR3\"\r\n        );\r\n        uint256 _redelegationBlock = _requestStashRedelegation(_stashId, _newCluster);\r\n        emit RedelegationRequested(_stashId, _stash.delegatedCluster, _newCluster, _redelegationBlock);\r\n    }\r\n\r\n    function _requestStashRedelegation(bytes32 _stashId, address _newCluster) internal returns(uint256) {\r\n        bytes32 _lockId = keccak256(abi.encodePacked(REDELEGATION_LOCK_SELECTOR, _stashId));\r\n        uint256 _unlockBlock = locks[_lockId].unlockBlock;\r\n        require(\r\n            _unlockBlock == 0,\r\n            \"IRSR1\"\r\n        );\r\n        uint256 _redelegationBlock = block.number.add(lockWaitTime[REDELEGATION_LOCK_SELECTOR]);\r\n        locks[_lockId] = Lock(_redelegationBlock, uint256(_newCluster));\r\n        return _redelegationBlock;\r\n    }\r\n\r\n    function requestStashRedelegations(bytes32[] memory _stashIds, address[] memory _newClusters) public {\r\n        require(_stashIds.length == _newClusters.length, \"SM:RSRs - Invalid input data\");\r\n        for(uint256 i=0; i < _stashIds.length; i++) {\r\n            requestStashRedelegation(_stashIds[i], _newClusters[i]);\r\n        }\r\n    }\r\n\r\n    function redelegateStash(bytes32 _stashId) public {\r\n        Stash memory _stash = stashes[_stashId];\r\n        require(\r\n            _stash.delegatedCluster != address(0),\r\n            \"RS1\"\r\n        );\r\n        bytes32 _lockId = keccak256(abi.encodePacked(REDELEGATION_LOCK_SELECTOR, _stashId));\r\n        uint256 _unlockBlock = locks[_lockId].unlockBlock;\r\n        require(\r\n            _unlockBlock != 0 && _unlockBlock <= block.number,\r\n            \"RS2\"\r\n        );\r\n        address _updatedCluster = address(locks[_lockId].iValue);\r\n        _redelegateStash(_stashId, _stash.staker, _stash.delegatedCluster, _updatedCluster);\r\n        delete locks[_lockId];\r\n    }\r\n\r\n    function _redelegateStash(\r\n        bytes32 _stashId,\r\n        address _staker,\r\n        address _delegatedCluster,\r\n        address _updatedCluster\r\n    ) internal {\r\n        bytes32[] memory _tokens = rewardDelegators.getFullTokenList();\r\n        uint256[] memory _amounts = new uint256[](_tokens.length);\r\n        for(uint256 i=0; i < _tokens.length; i++) {\r\n            _amounts[i] = stashes[_stashId].amount[_tokens[i]];\r\n        }\r\n        if(_delegatedCluster != address(0)) {\r\n            rewardDelegators.undelegate(_staker, _delegatedCluster, _tokens, _amounts);\r\n        }\r\n        rewardDelegators.delegate(_staker, _updatedCluster, _tokens, _amounts);\r\n        stashes[_stashId].delegatedCluster = _updatedCluster;\r\n        emit Redelegated(_stashId, _updatedCluster);\r\n    }\r\n\r\n    function splitStash(bytes32 _stashId, bytes32[] calldata _tokens, uint256[] calldata _amounts) external {\r\n        Stash memory _stash = stashes[_stashId];\r\n        require(\r\n            _stash.staker == msg.sender,\r\n            \"SS1\"\r\n        );\r\n        require(\r\n            _tokens.length != 0,\r\n            \"SS2\"\r\n        );\r\n        require(\r\n            _tokens.length == _amounts.length,\r\n            \"SS3\"\r\n        );\r\n        uint256 _stashIndex = stashIndex;\r\n        bytes32 _newStashId = keccak256(abi.encodePacked(_stashIndex));\r\n        for(uint256 _index=0; _index < _tokens.length; _index++) {\r\n            bytes32 _tokenId = _tokens[_index];\r\n            uint256 _amount = _amounts[_index];\r\n            require(\r\n                stashes[_newStashId].amount[_tokenId] == 0,\r\n                \"SS4\"\r\n            );\r\n            require(\r\n                _amount != 0,\r\n                \"SS5\"\r\n            );\r\n            stashes[_stashId].amount[_tokenId] = stashes[_stashId].amount[_tokenId].sub(\r\n                _amount,\r\n                \"SS6\"\r\n            );\r\n            stashes[_newStashId].amount[_tokenId] = _amount;\r\n        }\r\n        stashes[_newStashId].staker = msg.sender;\r\n        stashes[_newStashId].delegatedCluster = _stash.delegatedCluster;\r\n        stashes[_newStashId].undelegatesAt = _stash.undelegatesAt;\r\n        emit StashSplit(_newStashId, _stashId, _stashIndex, _tokens, _amounts);\r\n        stashIndex = _stashIndex + 1;\r\n    }\r\n\r\n    function mergeStash(bytes32 _stashId1, bytes32 _stashId2) external {\r\n        require(_stashId1 != _stashId2, \"MS1\");\r\n        Stash memory _stash1 = stashes[_stashId1];\r\n        Stash memory _stash2 = stashes[_stashId2];\r\n        require(\r\n            _stash1.staker == msg.sender && _stash2.staker == msg.sender,\r\n            \"MS2\"\r\n        );\r\n        require(\r\n            _stash1.delegatedCluster == _stash2.delegatedCluster,\r\n            \"MS3\"\r\n        );\r\n        require(\r\n            (_stash1.undelegatesAt == 0 || _stash1.undelegatesAt >= block.number) &&\r\n            (_stash2.undelegatesAt == 0 || _stash2.undelegatesAt >= block.number),\r\n            \"MS4\"\r\n        );\r\n        bytes32 _lockId1 = keccak256(abi.encodePacked(REDELEGATION_LOCK_SELECTOR, _stashId1));\r\n        uint256 _unlockBlock1 = locks[_lockId1].unlockBlock;\r\n        bytes32 _lockId2 = keccak256(abi.encodePacked(REDELEGATION_LOCK_SELECTOR, _stashId2));\r\n        uint256 _unlockBlock2 = locks[_lockId2].unlockBlock;\r\n        require(\r\n            _unlockBlock1 == 0 && _unlockBlock2 == 0,\r\n            \"MS5\"\r\n        );\r\n        bytes32[] memory _tokens = rewardDelegators.getFullTokenList();\r\n        for(uint256 i=0; i < _tokens.length; i++) {\r\n            uint256 _amount = stashes[_stashId2].amount[_tokens[i]];\r\n            if(_amount == 0) {\r\n                continue;\r\n            }\r\n            delete stashes[_stashId2].amount[_tokens[i]];\r\n            stashes[_stashId1].amount[_tokens[i]] = stashes[_stashId1].amount[_tokens[i]].add(_amount);\r\n        }\r\n        delete stashes[_stashId2];\r\n        emit StashesMerged(_stashId1, _stashId2);\r\n    }\r\n\r\n    function redelegateStashes(bytes32[] memory _stashIds) public {\r\n        for(uint256 i=0; i < _stashIds.length; i++) {\r\n            redelegateStash(_stashIds[i]);\r\n        }\r\n    }\r\n    \r\n    function cancelRedelegation(bytes32 _stashId) public {\r\n        require(\r\n            msg.sender == stashes[_stashId].staker,\r\n            \"CR1\"\r\n        );\r\n        require(_cancelRedelegation(_stashId), \"CR2\");\r\n    }\r\n\r\n    function _cancelRedelegation(bytes32 _stashId) internal returns(bool) {\r\n        bytes32 _lockId = keccak256(abi.encodePacked(REDELEGATION_LOCK_SELECTOR, _stashId));\r\n        if(locks[_lockId].unlockBlock != 0) {\r\n            delete locks[_lockId];\r\n            emit RedelegationCancelled(_stashId);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function undelegateStash(bytes32 _stashId) public {\r\n        Stash memory _stash = stashes[_stashId];\r\n        require(\r\n            _stash.staker == msg.sender,\r\n            \"US1\"\r\n        );\r\n        require(\r\n            _stash.delegatedCluster != address(0),\r\n            \"US2\"\r\n        );\r\n        uint256 _waitTime = undelegationWaitTime;\r\n        uint256 _undelegationBlock = block.number.add(_waitTime);\r\n        stashes[_stashId].undelegatesAt = _undelegationBlock;\r\n        delete stashes[_stashId].delegatedCluster;\r\n        _cancelRedelegation(_stashId);\r\n        bytes32[] memory _tokens = rewardDelegators.getFullTokenList();\r\n        uint256[] memory _amounts = new uint256[](_tokens.length);\r\n        for(uint256 i=0; i < _tokens.length; i++) {\r\n            _amounts[i] = stashes[_stashId].amount[_tokens[i]];\r\n        }\r\n        rewardDelegators.undelegate(msg.sender, _stash.delegatedCluster, _tokens, _amounts);\r\n        emit StashUndelegated(_stashId, _stash.delegatedCluster, _undelegationBlock);\r\n    }\r\n\r\n    function undelegateStashes(bytes32[] memory _stashIds) public {\r\n        for(uint256 i=0; i < _stashIds.length; i++) {\r\n            undelegateStash(_stashIds[i]);\r\n        }\r\n    }\r\n    \r\n    function cancelUndelegation(bytes32 _stashId, address _delegatedCluster) public {\r\n        address _staker = stashes[_stashId].staker;\r\n        uint256 _undelegatesAt = stashes[_stashId].undelegatesAt;\r\n        require(\r\n            _staker == msg.sender,\r\n            \"CU1\"\r\n        );\r\n        require(\r\n            _undelegatesAt > block.number,\r\n            \"CU2\"\r\n        );\r\n        require(\r\n            _undelegatesAt < block.number\r\n                            .add(undelegationWaitTime)\r\n                            .sub(lockWaitTime[REDELEGATION_LOCK_SELECTOR]),\r\n            \"CU3\"\r\n        );\r\n        delete stashes[_stashId].undelegatesAt;\r\n        emit StashUndelegationCancelled(_stashId);\r\n        _redelegateStash(_stashId, _staker, address(0), _delegatedCluster);\r\n    }\r\n\r\n    function withdrawStash(bytes32 _stashId) external {\r\n        Stash memory _stash = stashes[_stashId];\r\n        require(\r\n            _stash.staker == msg.sender,\r\n            \"WS1\"\r\n        );\r\n        require(\r\n            _stash.delegatedCluster == address(0),\r\n            \"WS2\"\r\n        );\r\n        require(\r\n            _stash.undelegatesAt <= block.number,\r\n            \"WS3\"\r\n        );\r\n        bytes32[] memory _tokens = rewardDelegators.getFullTokenList();\r\n        uint256[] memory _amounts = new uint256[](_tokens.length);\r\n        for(uint256 i=0; i < _tokens.length; i++) {\r\n            _amounts[i] = stashes[_stashId].amount[_tokens[i]];\r\n            if(_amounts[i] == 0) continue;\r\n            delete stashes[_stashId].amount[_tokens[i]];\r\n            _unlockTokens(_tokens[i], _amounts[i], msg.sender);\r\n        }\r\n        // Other items already zeroed\r\n        delete stashes[_stashId].staker;\r\n        delete stashes[_stashId].undelegatesAt;\r\n        emit StashWithdrawn(_stashId, _tokens, _amounts);\r\n        emit StashClosed(_stashId, msg.sender);\r\n    }\r\n\r\n    function withdrawStash(\r\n        bytes32 _stashId,\r\n        bytes32[] calldata _tokens,\r\n        uint256[] calldata _amounts\r\n    ) external {\r\n        Stash memory _stash = stashes[_stashId];\r\n        require(\r\n            _stash.staker == msg.sender,\r\n            \"WSC1\"\r\n        );\r\n        require(\r\n            _stash.delegatedCluster == address(0),\r\n            \"WSC2\"\r\n        );\r\n        require(\r\n            _stash.undelegatesAt <= block.number,\r\n            \"WSC3\"\r\n        );\r\n        require(\r\n            _tokens.length == _amounts.length,\r\n            \"WSC4\"\r\n        );\r\n        for(uint256 i=0; i < _tokens.length; i++) {\r\n            uint256 _balance = stashes[_stashId].amount[_tokens[i]];\r\n            require(\r\n                _balance >= _amounts[i],\r\n                \"WSC5\"\r\n            );\r\n            if(_balance == _amounts[i]) {\r\n                delete stashes[_stashId].amount[_tokens[i]];\r\n            } else {\r\n                stashes[_stashId].amount[_tokens[i]] = _balance.sub(_amounts[i]);\r\n            }\r\n            _unlockTokens(_tokens[i], _amounts[i], msg.sender);\r\n        }\r\n        emit StashWithdrawn(_stashId, _tokens, _amounts);\r\n    }\r\n\r\n    function _lockTokens(bytes32 _tokenId, uint256 _amount, address _delegator) internal {\r\n        if(_amount == 0) {\r\n            return;\r\n        }\r\n        address tokenAddress = tokenAddresses[_tokenId].addr;\r\n        // pull tokens from mpond/pond contract\r\n        // if mpond transfer the governance rights back\r\n        require(\r\n            ERC20(tokenAddress).transferFrom(\r\n                _delegator,\r\n                address(this),\r\n                _amount\r\n            ), \"LT1\"\r\n        );\r\n        if (tokenAddress == address(MPOND)) {\r\n            // send a request to delegate governance rights for the amount to delegator\r\n            MPOND.delegate(\r\n                _delegator,\r\n                uint96(_amount)\r\n            );\r\n        }\r\n    }\r\n\r\n    function _unlockTokens(bytes32 _tokenId, uint256 _amount, address _delegator) internal {\r\n        if(_amount == 0) {\r\n            return;\r\n        }\r\n        address tokenAddress = tokenAddresses[_tokenId].addr;\r\n        if(tokenAddress == address(MPOND)) {\r\n            // send a request to undelegate governacne rights for the amount to previous delegator\r\n            MPOND.undelegate(\r\n                _delegator,\r\n                uint96(_amount)\r\n            );\r\n        } else if(tokenAddress == address(prevMPOND)) {\r\n            prevMPOND.undelegate(\r\n                _delegator,\r\n                uint96(_amount)\r\n            );\r\n        }\r\n        require(\r\n            ERC20(tokenAddress).transfer(\r\n                _delegator,\r\n                _amount\r\n            ), \"UT1\"\r\n        );\r\n    }\r\n\r\n    function getTokenAmountInStash(bytes32 _stashId, bytes32 _tokenId) external view returns(uint256) {\r\n        return stashes[_stashId].amount[_tokenId];\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"stashId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatedCluster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"tokens\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"AddedToStash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"selector\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevLockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedLockTime\",\"type\":\"uint256\"}],\"name\":\"LockTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"stashId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updatedCluster\",\"type\":\"address\"}],\"name\":\"Redelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_stashId\",\"type\":\"bytes32\"}],\"name\":\"RedelegationCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"stashId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currentCluster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"updatedCluster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redelegatesAt\",\"type\":\"uint256\"}],\"name\":\"RedelegationRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"stashId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"StashClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"stashId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stashIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"tokens\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"StashCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"stashId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatedCluster\",\"type\":\"address\"}],\"name\":\"StashDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_newStashId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_stashId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stashIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"_splitTokens\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_splitAmounts\",\"type\":\"uint256[]\"}],\"name\":\"StashSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"stashId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"undelegatedCluster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"undelegatesAt\",\"type\":\"uint256\"}],\"name\":\"StashUndelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_stashId\",\"type\":\"bytes32\"}],\"name\":\"StashUndelegationCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"stashId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"tokens\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"StashWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_stashId1\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_stashId2\",\"type\":\"bytes32\"}],\"name\":\"StashesMerged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"undelegationWaitTime\",\"type\":\"uint256\"}],\"name\":\"UndelegationWaitTimeUpdated\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_stashId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_tokens\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"addToStash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_stashId\",\"type\":\"bytes32\"}],\"name\":\"cancelRedelegation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_stashId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_delegatedCluster\",\"type\":\"address\"}],\"name\":\"cancelUndelegation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_MPONDTokenAddress\",\"type\":\"address\"}],\"name\":\"changeMPONDTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_tokens\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"createStash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_tokens\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_delegatedCluster\",\"type\":\"address\"}],\"name\":\"createStashAndDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_stashId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_delegatedCluster\",\"type\":\"address\"}],\"name\":\"delegateStash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tokenId\",\"type\":\"bytes32\"}],\"name\":\"disableToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"enableToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_stashId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_tokenId\",\"type\":\"bytes32\"}],\"name\":\"getTokenAmountInStash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_tokenIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_MPONDTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardDelegatorsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_undelegationWaitTime\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"lockWaitTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"locks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_stashId1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_stashId2\",\"type\":\"bytes32\"}],\"name\":\"mergeStash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_stashId\",\"type\":\"bytes32\"}],\"name\":\"redelegateStash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_stashIds\",\"type\":\"bytes32[]\"}],\"name\":\"redelegateStashes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_stashId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_newCluster\",\"type\":\"address\"}],\"name\":\"requestStashRedelegation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_stashIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_newClusters\",\"type\":\"address[]\"}],\"name\":\"requestStashRedelegations\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardDelegators\",\"outputs\":[{\"internalType\":\"contract IRewardDelegators\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_stashId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_tokens\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"splitStash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stashIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"stashes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatedCluster\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"undelegatesAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_stashId\",\"type\":\"bytes32\"}],\"name\":\"undelegateStash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_stashIds\",\"type\":\"bytes32[]\"}],\"name\":\"undelegateStashes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"undelegationWaitTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_selector\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_updatedWaitTime\",\"type\":\"uint256\"}],\"name\":\"updateLockWaitTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_updatedRewardDelegator\",\"type\":\"address\"}],\"name\":\"updateRewardDelegators\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_undelegationWaitTime\",\"type\":\"uint256\"}],\"name\":\"updateUndelegationWaitTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_stashId\",\"type\":\"bytes32\"}],\"name\":\"withdrawStash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_stashId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_tokens\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawStash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakeManager","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://65c729a38cdddcce9c6055dda91a7b8c677efa8ff928b593da83fc9eb4f5185d"}]}