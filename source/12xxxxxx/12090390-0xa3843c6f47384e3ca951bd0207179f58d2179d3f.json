{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract PonderwareTransferOfAuthority {\r\n\r\n    // ponderware is destroying the private key controlling the MooncatRescue contract\r\n    // due to the outcome of the vote contract: 0x1916F482BB9F3523a489791Ae3d6e052b362C777\r\n\r\n    // This contract, if confirmed, represents a public transfer of the official ponderware address.\r\n\r\n    // To ensure confirmation and get ponderware's new address, call the `whereIsPonderware` function\r\n\r\n    address immutable oldPonderwareAddress;\r\n    address payable immutable newPonderwareAddress;\r\n\r\n    bool confirmedByOld = false;\r\n    bool confirmedByNew = false;\r\n    bool transferVoid = false;\r\n\r\n    modifier addressIsAuthorized {\r\n        require((msg.sender == oldPonderwareAddress) || (msg.sender == newPonderwareAddress), \"Unauthorized\");\r\n        _;\r\n    }\r\n\r\n    modifier transferIsNotVoid {\r\n        require(!transferVoid, \"Transfer Of Authority Void\");\r\n        _;\r\n    }\r\n\r\n    modifier transferIsConfirmed {\r\n        require((confirmedByOld && confirmedByNew), \"Not Confirmed\");\r\n        _;\r\n    }\r\n\r\n    constructor(address payable newPonderwareAddress_) {\r\n        oldPonderwareAddress = msg.sender;\r\n        newPonderwareAddress = newPonderwareAddress_;\r\n    }\r\n\r\n    receive() external payable {\r\n        newPonderwareAddress.transfer(msg.value);\r\n    }\r\n\r\n    function voidTransfer () public transferIsNotVoid addressIsAuthorized {\r\n        require(!confirmedByOld, \"Already Confirmed\");\r\n        transferVoid = true;\r\n    }\r\n\r\n    function confirm () public transferIsNotVoid addressIsAuthorized {\r\n        if (msg.sender == newPonderwareAddress){\r\n            confirmedByNew = true;\r\n        } else {\r\n            require(confirmedByNew, \"New Not Confirmed\");\r\n            confirmedByOld = true;\r\n        }\r\n    }\r\n\r\n    function whereIsPonderware() public view transferIsNotVoid transferIsConfirmed returns (address) {\r\n        return newPonderwareAddress;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPonderwareAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"confirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voidTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whereIsPonderware\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PonderwareTransferOfAuthority","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d342a4f0397b4268e6adce89b9b88c746afa85ee","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://28302187625b173fb1a7fdf5cde84b8febf139563a672dacbc4e0326c8d72174"}]}