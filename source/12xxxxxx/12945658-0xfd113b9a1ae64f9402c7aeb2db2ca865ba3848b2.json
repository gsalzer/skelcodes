{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: NONE\n\npragma solidity 0.7.6;\n\n\n\n// Part: Context\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor() {}\n\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// Part: IAgentManager\n\ninterface IAgentManager {\n    event userAgentRegistered(address indexed user, string indexed agentId);\n\n    event agentUpdated(\n        string indexed agentId,\n        address indexed _coldAddress,\n        address indexed _hotAddress\n    );\n\n    function registerAgentForUser(\n        string calldata agentId,\n        address _coldAddress,\n        address _hotAddress\n    ) external returns (bool);\n\n    function updateAgentColdAddress(\n        string calldata agentId,\n        address _coldAddress\n    ) external returns (bool);\n\n    function updateAgentHotAddress(string calldata agentId, address _hotAddress)\n        external\n        returns (bool);\n\n    function verifyAgentAddress(\n        string calldata agentId,\n        address senderAddress,\n        address userAddress\n    ) external view returns (bool);\n\n    function userAgents(address userAddress, string calldata agentId)\n        external\n        view\n        returns (bool);\n\n    function HOT_ADDRESS_BLOCK_LIFE() external view returns (uint256);\n\n    function PREVIOUS_HOT_ADDRESS_BLOCK_LIFE() external view returns (uint256);\n\n    function getAgent(string calldata agentId)\n        external\n        view\n        returns (\n            address,\n            address,\n            address,\n            uint256\n        );\n}\n\n// Part: Ownable\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: AgentManager.sol\n\n/**\n * @title Agent manager\n * @notice This contract is responsible for managing one to many user agents\n * and also verifies if an agent is authorized to transact on behalf of a user\n * @dev Can be used as a standalone in multiple agent management systems\n */\ncontract AgentManager is IAgentManager, Ownable {\n    mapping(address => mapping(string => bool)) public override userAgents;\n\n    struct AgentKeys {\n        address coldAddress;\n        address hotAddress;\n        address previousHotAddress;\n        uint256 lastUpdatedBlock;\n    }\n\n    mapping(string => AgentKeys) private agents;\n\n    uint256 public override PREVIOUS_HOT_ADDRESS_BLOCK_LIFE;\n    uint256 public override HOT_ADDRESS_BLOCK_LIFE;\n\n    /**\n     * @param _previousHotAddressBlocks: the value to set for PREVIOUS_HOT_ADDRESS_BLOCK_LIFE\n     * which signifies the number of blocks after which the previous hot address for the agent\n     * becomes invalid after updating the hot address\n     * @param _hotAddressBlocks: the value to set for HOT_ADDRESS_BLOCK_LIFE which signifies\n     * the number of blocks after which a current hot address of an agent becomes invalid\n     */\n    constructor(uint256 _previousHotAddressBlocks, uint256 _hotAddressBlocks) {\n        PREVIOUS_HOT_ADDRESS_BLOCK_LIFE = _previousHotAddressBlocks;\n        HOT_ADDRESS_BLOCK_LIFE = _hotAddressBlocks;\n    }\n\n    /**\n     * @notice Registers an agent corresponding to the message sender (user)\n     * @param agentId: unique id of the agent to register\n     * @param _coldAddress: cold address of the agent\n     * @param _hotAddress: Initial hot address of the agent\n     */\n    function registerAgentForUser(\n        string calldata agentId,\n        address _coldAddress,\n        address _hotAddress\n    ) external override returns (bool) {\n        require(\n            !userAgents[msg.sender][agentId],\n            \"Agent id already registered for this user\"\n        );\n\n        // Checks the mapping to ensure the agentId is not already registered\n        require(\n            agents[agentId].coldAddress == address(0),\n            \"AgentId already registered for another user\"\n        );\n\n        require(\n            _coldAddress != address(0) && _hotAddress != address(0),\n            \"Addresses can't be zero address\"\n        );\n\n        agents[agentId] = AgentKeys({\n            coldAddress: _coldAddress,\n            hotAddress: _hotAddress,\n            previousHotAddress: address(0),\n            lastUpdatedBlock: block.number\n        });\n\n        emit agentUpdated(agentId, _coldAddress, _hotAddress);\n\n        userAgents[msg.sender][agentId] = true;\n\n        emit userAgentRegistered(msg.sender, agentId);\n\n        return true;\n    }\n\n    /**\n     * @notice Verifies if an agentId is authorised to transact on behalf of a userAddress\n     * @dev Internal function. Can only be called by inheriting contracts\n     * @param agentId: unique id of the agent\n     * @param senderAddress: address of the sender (agent in this case)\n     * @param userAddress: address of the user to authorise for\n     */\n    function verifyAgentAddress(\n        string calldata agentId,\n        address senderAddress,\n        address userAddress\n    ) external view override returns (bool) {\n        AgentKeys memory keys = agents[agentId];\n        if (keys.hotAddress == senderAddress) {\n            if (HOT_ADDRESS_BLOCK_LIFE == 0) {\n                return userAgents[userAddress][agentId];\n            }\n\n            return\n                (block.number <=\n                    keys.lastUpdatedBlock + HOT_ADDRESS_BLOCK_LIFE) &&\n                userAgents[userAddress][agentId];\n        }\n\n        if (keys.previousHotAddress == senderAddress) {\n            return\n                (block.number <=\n                    keys.lastUpdatedBlock + PREVIOUS_HOT_ADDRESS_BLOCK_LIFE) &&\n                userAgents[userAddress][agentId];\n        }\n\n        return keys.coldAddress == senderAddress;\n    }\n\n    /**\n     * @notice Updates agent cold address, sender needs to be the previous cold address itself\n     * @param agentId: unique id of the agent\n     * @param _coldAddress: new cold address to set\n     */\n    function updateAgentColdAddress(\n        string calldata agentId,\n        address _coldAddress\n    ) external override returns (bool) {\n        require(\n            msg.sender == agents[agentId].coldAddress &&\n                _coldAddress != address(0),\n            \"Cold address can't be updated\"\n        );\n        agents[agentId].coldAddress = _coldAddress;\n\n        emit agentUpdated(agentId, _coldAddress, agents[agentId].hotAddress);\n\n        return true;\n    }\n\n    /**\n     * @notice Updates agent hot address, sender needs to be the cold address or previous hot address\n     * @param agentId: unique id of the agent\n     * @param _hotAddress: new hot address to set\n     */\n    function updateAgentHotAddress(string calldata agentId, address _hotAddress)\n        external\n        override\n        returns (bool)\n    {\n        require(\n            _hotAddress != address(0) &&\n                (msg.sender == agents[agentId].coldAddress ||\n                    msg.sender == agents[agentId].hotAddress),\n            \"Hot address can't be updated\"\n        );\n        agents[agentId].previousHotAddress = agents[agentId].hotAddress;\n        agents[agentId].hotAddress = _hotAddress;\n        agents[agentId].lastUpdatedBlock = block.number;\n\n        emit agentUpdated(agentId, agents[agentId].coldAddress, _hotAddress);\n\n        return true;\n    }\n\n    /**\n     * @notice Updates PREVIOUS_HOT_ADDRESS_BLOCK_LIFE, can only be called by owner of the contract\n     * @param newBlockDifference: new value for PREVIOUS_HOT_ADDRESS_BLOCK_LIFE\n     */\n    function updatePreviousHotAddressBlockDifference(uint256 newBlockDifference)\n        external\n        onlyOwner\n    {\n        PREVIOUS_HOT_ADDRESS_BLOCK_LIFE = newBlockDifference;\n    }\n\n    /**\n     * @notice Updates HOT_ADDRESS_BLOCK_LIFE, can only be called by owner of the contract\n     * @param newBlockDifference: new value for HOT_ADDRESS_BLOCK_LIFE\n     */\n    function updateHotAddressBlockDifference(uint256 newBlockDifference)\n        external\n        onlyOwner\n    {\n        HOT_ADDRESS_BLOCK_LIFE = newBlockDifference;\n    }\n\n    /**\n     * @notice Get agent addresses and details\n     * @param agentId: agentId of the agent\n     */\n    function getAgent(string calldata agentId)\n        external\n        view\n        override\n        returns (\n            address coldAddress,\n            address hotAddress,\n            address previousHotAddress,\n            uint256 lastUpdatedBlock\n        )\n    {\n        coldAddress = agents[agentId].coldAddress;\n        hotAddress = agents[agentId].hotAddress;\n        previousHotAddress = agents[agentId].previousHotAddress;\n        lastUpdatedBlock = agents[agentId].lastUpdatedBlock;\n    }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_previousHotAddressBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hotAddressBlocks\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"agentId\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_coldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_hotAddress\",\"type\":\"address\"}],\"name\":\"agentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"agentId\",\"type\":\"string\"}],\"name\":\"userAgentRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HOT_ADDRESS_BLOCK_LIFE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PREVIOUS_HOT_ADDRESS_BLOCK_LIFE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"agentId\",\"type\":\"string\"}],\"name\":\"getAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coldAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hotAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"previousHotAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"agentId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_coldAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hotAddress\",\"type\":\"address\"}],\"name\":\"registerAgentForUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"agentId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_coldAddress\",\"type\":\"address\"}],\"name\":\"updateAgentColdAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"agentId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_hotAddress\",\"type\":\"address\"}],\"name\":\"updateAgentHotAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBlockDifference\",\"type\":\"uint256\"}],\"name\":\"updateHotAddressBlockDifference\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBlockDifference\",\"type\":\"uint256\"}],\"name\":\"updatePreviousHotAddressBlockDifference\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"userAgents\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"agentId\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"verifyAgentAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AgentManager","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}