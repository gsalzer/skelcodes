{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.6;\r\n// author: SamPorter1984\r\ninterface I{\r\n\tfunction getPair(address t, address t1) external view returns(address pair);\r\n\tfunction createPair(address t, address t1) external returns(address pair);\r\n\tfunction genesis(uint Eth,address pair,uint gen) external;\r\n\tfunction deposit() external payable;\r\n\tfunction transfer(address to, uint value) external returns(bool);\r\n\tfunction mint(address to) external returns(uint liquidity);\r\n//\tfunction triggerBSCLaunch() external;\r\n}\r\n\r\ncontract FoundingEvent {\r\n\tmapping(address => uint) public deposits;\r\n\taddress payable private _deployer;\r\n\tbool private _lgeOngoing;\r\n\taddress private _staking;\r\n\tbool private _notInit;\r\n\tuint private _hardcap;\r\n\tuint public genesisBlock;\r\n\taddress private _oracle;\r\n//\tbool private _emergency;\r\n\r\n\tconstructor() {_deployer = msg.sender;}\r\n\tfunction startLGE(uint hc) external {require(msg.sender == _deployer && hc < 5e21 && hc > 1e20);if(_hardcap != 0){require(hc<_hardcap);}_lgeOngoing = true; _hardcap = hc;}\r\n\tfunction defineBridge(address o) public {require(msg.sender == _deployer); _oracle = o;}\r\n\tfunction triggerLaunch() public {require(_lgeOngoing == true && msg.sender == _oracle);_createLiquidity();}\r\n//\tfunction _triggerBSCLaunch() internal { address b = _bridge; if(b != address(0)){I(_bridge).triggerBSCLaunch();} }\r\n//\tfunction emergency() public {require(msg.sender == _deployer);_emergency = true;}\r\n//\tfunction withdraw() public {uint d = deposits[msg.sender];require(_emergency == true && d > 0); address payable s = msg.sender;(s).transfer(d);}\r\n\r\n\tfunction depositEth() external payable {\r\n\t\trequire(_lgeOngoing == true);\r\n\t\tuint amount = msg.value;\r\n\t\tuint deployerShare = amount/100; amount -= deployerShare; _deployer.transfer(deployerShare);\r\n\t\tdeposits[msg.sender] += amount;\r\n\t\tif (address(this).balance > _hardcap) {/*_triggerBSCLaunch();*/_createLiquidity();}\r\n\t}\r\n\r\n\tfunction _createLiquidity() internal {\r\n\t\tgenesisBlock = block.number;\r\n\t\taddress WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\t\taddress token = 0xEd7C1848FA90E6CDA4faAC7F61752857461af284;\r\n\t\taddress staking = 0x93bF14C7Cf7250b09D78D4EadFD79FCA01BAd9F8;\r\n\t\taddress factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n\t\taddress tknETHLP = I(factory).getPair(token,WETH);\r\n\t\tif (tknETHLP == address(0)) {tknETHLP=I(factory).createPair(token, WETH);}\r\n\t\tuint ETHDeposited = address(this).balance;\r\n\t\tI(WETH).deposit{value: ETHDeposited}();\r\n\t\tI(token).transfer(tknETHLP, 1e24);\r\n\t\tI(WETH).transfer(tknETHLP, ETHDeposited);\r\n\t\tI(tknETHLP).mint(staking);\r\n\t\tI(staking).genesis(ETHDeposited, tknETHLP,block.number);\r\n\t\tdelete _staking; delete _lgeOngoing; delete _deployer; delete _hardcap; delete _oracle;\r\n\t}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"o\",\"type\":\"address\"}],\"name\":\"defineBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"hc\",\"type\":\"uint256\"}],\"name\":\"startLGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FoundingEvent","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ab4401553d5392558863623635e741643a1a7764567d1d10a7fa45cd98d52d60"}]}