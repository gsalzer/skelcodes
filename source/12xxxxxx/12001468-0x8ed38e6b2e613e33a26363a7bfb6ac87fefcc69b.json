{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\ninterface IContractRegistry {\r\n\tfunction getContract(string calldata contractName) external view returns (address);\r\n}\r\n\r\ninterface IElections {\r\n\tfunction getCommittee() external view returns (address[] memory committee, uint256[] memory weights, address[] memory orbsAddrs, bool[] memory certification, bytes4[] memory ips);\r\n}\r\n\r\ncontract CommitteeEnsResolver {\r\n\r\n    IContractRegistry constant orbsRegistry = IContractRegistry(0xD859701C81119aB12A1e62AF6270aD2AE05c7AB3); // mainnet orbs V2 contracts registry;\r\n    bytes32 constant parentDomainNameHash = 0xb30b0b22edc109e1bccfd9bf561963d8b0993b8de6025741af1fdd5bb75e1705; // committee.orbs.eth;\r\n\r\n    function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\r\n        // only Ethereum address and text\r\n        return interfaceID == 0x3b3b57de || interfaceID == 0x59d1d43c || interfaceID == 0x01ffc9a7; \r\n    }\r\n\r\n    function addr(bytes32 nodeID) public view returns (address) {\r\n        IElections elections = IElections(orbsRegistry.getContract('elections'));\r\n        (address[] memory committee, uint256[] memory weights, , ,bytes4[] memory ips) = elections.getCommittee();\r\n        sortByWeightAndAddress(weights, committee, ips);\r\n        \r\n        for (uint i = 0; i < committee.length; i++) {\r\n            if (nodeID == namehash(uintToString(i))) {\r\n                return committee[i];\r\n            }\r\n        }\r\n        return address(0);\r\n    }\r\n    \r\n    function text(bytes32 nodeID, string memory key) public view returns (string memory) {\r\n        if (keccak256(bytes(key)) != keccak256(bytes('url'))) {\r\n            return '';\r\n        }\r\n        \r\n        IElections elections = IElections(orbsRegistry.getContract('elections'));\r\n        (address[] memory committee, uint256[] memory weights, , , bytes4[] memory ips) = elections.getCommittee();\r\n        sortByWeightAndAddress(weights, committee, ips);\r\n        \r\n        for (uint i = 0; i < ips.length; i++) {\r\n            if (nodeID == namehash(uintToString(i))) {\r\n                return string(abi.encodePacked(\r\n                    'http://', \r\n                    string(abi.encodePacked(byteToString(ips[i][0]), '.')), \r\n                    string(abi.encodePacked(byteToString(ips[i][1]), '.')), \r\n                    string(abi.encodePacked(byteToString(ips[i][2]), '.')), \r\n                    string(abi.encodePacked(byteToString(ips[i][3]), '/'))));\r\n            }\r\n        }\r\n        return '';\r\n        \r\n    }\r\n\r\n    function namehash(string memory label) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(parentDomainNameHash, keccak256(bytes(label))));\r\n    }\r\n    \r\n    function byteToString(byte v) internal pure returns (string memory str) {\r\n        return uintToString(uint8(v));\r\n    }\r\n    \r\n    function uintToString(uint v) internal pure returns (string memory str) {\r\n        if (v == 0) {\r\n            return '0';\r\n        }\r\n        \r\n        bytes memory reversed = new bytes(100);\r\n        uint len = 0;\r\n        while (v != 0) {\r\n            uint ls = v % 10;\r\n            v = v / 10;\r\n            reversed[len++] = byte(48 + uint8(ls));\r\n        }\r\n        bytes memory s = new bytes(len);\r\n        for (uint j = 0; j < len; j++) {\r\n            s[j] = reversed[len - 1 - j];\r\n        }\r\n        str = string(s);\r\n    }\r\n    \r\n    function sortByWeightAndAddress(uint256[] memory weights, address[] memory addresses, bytes4[] memory ips) internal pure {\r\n       quickSortDesc(weights, addresses, ips, int(0), int(weights.length - 1));\r\n    }\r\n    \r\n    function quickSortDesc(uint256[] memory weights, address[] memory addresses, bytes4[] memory ips, int left, int right) pure internal{\r\n        int i = left;\r\n        int j = right;\r\n        if(i==j) return;\r\n        uint pivotIndex = uint(left + (right - left) / 2);\r\n        uint pivotWeight = weights[pivotIndex];\r\n        address pivotAddress = addresses[pivotIndex];\r\n        while (i <= j) {\r\n            while (weights[uint(i)] > pivotWeight || weights[uint(i)] == pivotWeight && addresses[uint(i)] > pivotAddress) i++;\r\n            while (pivotWeight > weights[uint(j)] || weights[uint(j)] == pivotWeight && pivotAddress > addresses[uint(j)]) j--;\r\n            if (i <= j) {\r\n                // switch in all three arrays together\r\n                (weights[uint(i)], weights[uint(j)]) = (weights[uint(j)], weights[uint(i)]);\r\n                (addresses[uint(i)], addresses[uint(j)]) = (addresses[uint(j)], addresses[uint(i)]);\r\n                (ips[uint(i)], ips[uint(j)]) = (ips[uint(j)], ips[uint(i)]);\r\n                i++;\r\n                j--;\r\n            }\r\n        }\r\n        if (left < j)\r\n            quickSortDesc(weights, addresses, ips, left, j);\r\n        if (i < right)\r\n            quickSortDesc(weights, addresses, ips, i, right);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodeID\",\"type\":\"bytes32\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodeID\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CommitteeEnsResolver","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://05fa849a3dc6a4ff6c85e9eb5f1d3162d8bc9bb1f9d9f3bee619486dbd9a661c"}]}