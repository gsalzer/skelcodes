{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/openzeppelin-solidity/contracts/introspection/IERC165.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: contracts/openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n// File: contracts/openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n// File: contracts/multi-token-standard/contracts/interfaces/IERC1155.sol\r\npragma solidity 0.7.4;\r\n\r\n\r\ninterface IERC1155 {\r\n\r\n  /****************************************|\r\n  |                 Events                 |\r\n  |_______________________________________*/\r\n\r\n  /**\r\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\r\n   *   Operator MUST be msg.sender\r\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\r\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\r\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID\r\n   *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\r\n   */\r\n  event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);\r\n\r\n  /**\r\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\r\n   *   Operator MUST be msg.sender\r\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\r\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\r\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID\r\n   *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\r\n   */\r\n  event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);\r\n\r\n  /**\r\n   * @dev MUST emit when an approval is updated\r\n   */\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n\r\n  /****************************************|\r\n  |                Functions               |\r\n  |_______________________________________*/\r\n\r\n  /**\r\n    * @notice Transfers amount of an _id from the _from address to the _to address specified\r\n    * @dev MUST emit TransferSingle event on success\r\n    * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\r\n    * MUST throw if `_to` is the zero address\r\n    * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\r\n    * MUST throw on any other error\r\n    * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n    * @param _from    Source address\r\n    * @param _to      Target address\r\n    * @param _id      ID of the token type\r\n    * @param _amount  Transfered amount\r\n    * @param _data    Additional data with no specified format, sent in call to `_to`\r\n    */\r\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\r\n\r\n  /**\r\n    * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\r\n    * @dev MUST emit TransferBatch event on success\r\n    * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\r\n    * MUST throw if `_to` is the zero address\r\n    * MUST throw if length of `_ids` is not the same as length of `_amounts`\r\n    * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\r\n    * MUST throw on any other error\r\n    * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n    * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\r\n    * @param _from     Source addresses\r\n    * @param _to       Target addresses\r\n    * @param _ids      IDs of each token type\r\n    * @param _amounts  Transfer amounts per token type\r\n    * @param _data     Additional data with no specified format, sent in call to `_to`\r\n  */\r\n  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\r\n\r\n  /**\r\n   * @notice Get the balance of an account's Tokens\r\n   * @param _owner  The address of the token holder\r\n   * @param _id     ID of the Token\r\n   * @return        The _owner's balance of the Token type requested\r\n   */\r\n  function balanceOf(address _owner, uint256 _id) external view returns (uint256);\r\n\r\n  /**\r\n   * @notice Get the balance of multiple account/token pairs\r\n   * @param _owners The addresses of the token holders\r\n   * @param _ids    ID of the Tokens\r\n   * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\r\n   */\r\n  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\r\n\r\n  /**\r\n   * @notice Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens\r\n   * @dev MUST emit the ApprovalForAll event on success\r\n   * @param _operator  Address to add to the set of authorized operators\r\n   * @param _approved  True if the operator is approved, false to revoke approval\r\n   */\r\n  function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n  /**\r\n   * @notice Queries the approval status of an operator for a given owner\r\n   * @param _owner     The owner of the Tokens\r\n   * @param _operator  Address of authorized operator\r\n   * @return isOperator True if the operator is approved, false if not\r\n   */\r\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\r\n}\r\n\r\n// File: contracts/multi-token-standard/contracts/interfaces/IERC1155TokenReceiver.sol\r\n\r\npragma solidity 0.7.4;\r\n\r\n/**\r\n * @dev ERC-1155 interface for accepting safe transfers.\r\n */\r\ninterface IERC1155TokenReceiver {\r\n\r\n  /**\r\n   * @notice Handle the receipt of a single ERC1155 token type\r\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\r\n   * This function MAY throw to revert and reject the transfer\r\n   * Return of other amount than the magic value MUST result in the transaction being reverted\r\n   * Note: The token contract address is always the message sender\r\n   * @param _operator  The address which called the `safeTransferFrom` function\r\n   * @param _from      The address which previously owned the token\r\n   * @param _id        The id of the token being transferred\r\n   * @param _amount    The amount of tokens being transferred\r\n   * @param _data      Additional data with no specified format\r\n   * @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n   */\r\n  function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4);\r\n\r\n  /**\r\n   * @notice Handle the receipt of multiple ERC1155 token types\r\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\r\n   * This function MAY throw to revert and reject the transfer\r\n   * Return of other amount than the magic value WILL result in the transaction being reverted\r\n   * Note: The token contract address is always the message sender\r\n   * @param _operator  The address which called the `safeBatchTransferFrom` function\r\n   * @param _from      The address which previously owned the token\r\n   * @param _ids       An array containing ids of each token being transferred\r\n   * @param _amounts   An array containing amounts of each token being transferred\r\n   * @param _data      Additional data with no specified format\r\n   * @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n   */\r\n  function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4);\r\n}\r\n\r\n// File: contracts/PortionAuction.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\ncontract PortionAuction is IERC721Receiver, IERC1155TokenReceiver {\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  address public owner;\r\n  address public controller;\r\n  address public beneficiary;\r\n  address public highestBidder;\r\n\r\n  uint public tokenId;\r\n  uint public quantity;\r\n  uint public highestBid;\r\n\r\n  bool public cancelled;\r\n  bool public itemClaimed;\r\n  bool public controllerClaimedFunds;\r\n  bool public beneficiaryClaimedFunds;\r\n  bool public acceptPRT;\r\n  bool public isErc1155;\r\n\r\n  IERC20 portionTokenContract;\r\n  IERC721 artTokenContract;\r\n  IERC1155 artToken1155Contract;\r\n\r\n  mapping(address => uint256) public fundsByBidder;\r\n\r\n  constructor(\r\n    address _controller,\r\n    address _beneficiary,\r\n    bool _acceptPRT,\r\n    bool _isErc1155,\r\n    uint _tokenId,\r\n    uint _quantity,\r\n    address portionTokenAddress,\r\n    address artTokenAddress,\r\n    address artToken1155Address\r\n  ) {\r\n    owner = msg.sender;\r\n    controller = _controller;\r\n    beneficiary = _beneficiary;\r\n    acceptPRT = _acceptPRT;\r\n    isErc1155 = _isErc1155;\r\n    tokenId = _tokenId;\r\n    quantity = _quantity;\r\n\r\n    if (acceptPRT) {\r\n      portionTokenContract = IERC20(portionTokenAddress);\r\n    }\r\n\r\n    if (isErc1155) {\r\n      artToken1155Contract = IERC1155(artToken1155Address);\r\n    } else {\r\n      artTokenContract = IERC721(artTokenAddress);\r\n    }\r\n  }\r\n\r\n  function placeBid(address bidder, uint totalAmount)\r\n  onlyOwner\r\n  external\r\n  {\r\n    fundsByBidder[bidder] = totalAmount;\r\n\r\n    if (bidder != highestBidder) {\r\n      highestBidder = bidder;\r\n    }\r\n\r\n    highestBid = totalAmount;\r\n  }\r\n\r\n  function handlePayment()\r\n  payable\r\n  onlyOwner\r\n  external\r\n  {}\r\n\r\n  function withdrawFunds(\r\n    address claimer,\r\n    address withdrawalAccount,\r\n    uint withdrawalAmount,\r\n    bool _beneficiaryClaimedFunds,\r\n    bool _controllerClaimedFunds\r\n  )\r\n  onlyOwner\r\n  external\r\n  {\r\n    // send the funds\r\n    if (acceptPRT) {\r\n      require(portionTokenContract.transfer(claimer, withdrawalAmount));\r\n    } else {\r\n      (bool sent, ) = claimer.call{value: withdrawalAmount}(\"\");\r\n      require(sent);\r\n    }\r\n\r\n    fundsByBidder[withdrawalAccount] -= withdrawalAmount;\r\n    if (_beneficiaryClaimedFunds) {\r\n      beneficiaryClaimedFunds = true;\r\n    }\r\n    if (_controllerClaimedFunds) {\r\n      controllerClaimedFunds = true;\r\n    }\r\n  }\r\n\r\n  function transferItem(\r\n    address claimer\r\n  )\r\n  onlyOwner\r\n  external\r\n  {\r\n    if (isErc1155) {\r\n      artToken1155Contract.safeTransferFrom(address(this), claimer, tokenId, quantity, \"\");\r\n    } else {\r\n      artTokenContract.safeTransferFrom(address(this), claimer, tokenId);\r\n    }\r\n\r\n    itemClaimed = true;\r\n  }\r\n\r\n  function cancelAuction()\r\n  onlyOwner\r\n  external\r\n  {\r\n    cancelled = true;\r\n  }\r\n\r\n  function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata data)\r\n  external\r\n  pure\r\n  override\r\n  returns (bytes4)\r\n  {\r\n    return this.onERC721Received.selector;\r\n  }\r\n\r\n  function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data)\r\n  external\r\n  pure\r\n  override\r\n  returns(bytes4)\r\n  {\r\n    return this.onERC1155Received.selector;\r\n  }\r\n\r\n  function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data)\r\n  external\r\n  pure\r\n  override\r\n  returns(bytes4)\r\n  {\r\n    return this.onERC1155BatchReceived.selector;\r\n  }\r\n}\r\n\r\n// File: contracts/openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/PortionAuctionFactory.sol\r\n\r\npragma solidity ^0.7.4;\r\n\r\ncontract PortionAuctionFactory {\r\n  using SafeMath for uint;\r\n\r\n  struct AuctionParameters {\r\n    uint startingBid;\r\n    uint bidStep;\r\n    uint startBlock;\r\n    uint endBlock;\r\n    uint overtimeBlocksSize;\r\n    uint feeRate;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  bytes32 public name = \"PortionAuctionFactory\";\r\n  address owner;\r\n  IERC20 public portionTokenContract;\r\n  IERC721 public artTokenContract;\r\n  IERC1155 public artToken1155Contract;\r\n  mapping(address => AuctionParameters) public auctionParameters;\r\n\r\n  event AuctionCreated(address indexed auctionContract, address indexed beneficiary, uint indexed tokenId);\r\n  event BidPlaced (address indexed bidder, uint bid);\r\n  event FundsClaimed (address indexed claimer, address withdrawalAccount, uint withdrawalAmount);\r\n  event ItemClaimed (address indexed claimer);\r\n  event AuctionCancelled ();\r\n\r\n  constructor(address portionTokenAddress, address artTokenAddress, address artToken1155Address) {\r\n    owner = msg.sender;\r\n    portionTokenContract = IERC20(portionTokenAddress);\r\n    artTokenContract = IERC721(artTokenAddress);\r\n    artToken1155Contract = IERC1155(artToken1155Address);\r\n  }\r\n\r\n  function createAuction(\r\n    address beneficiary,\r\n    uint tokenId,\r\n    uint bidStep,\r\n    uint startingBid,\r\n    uint startBlock,\r\n    uint endBlock,\r\n    bool acceptPRT,\r\n    bool isErc1155,\r\n    uint quantity,\r\n    uint feeRate,\r\n    uint overtimeBlocksSize\r\n  )\r\n  onlyOwner\r\n  external\r\n  {\r\n    require(beneficiary != address(0));\r\n    require(bidStep > 0);\r\n    require(startingBid >= 0);\r\n    require(startBlock < endBlock);\r\n    require(startBlock >= block.number);\r\n    require(feeRate <= 100);\r\n    if (isErc1155) {\r\n      require(quantity > 0);\r\n    }\r\n\r\n    PortionAuction newAuction = new PortionAuction(\r\n      msg.sender,\r\n      beneficiary,\r\n      acceptPRT,\r\n      isErc1155,\r\n      tokenId,\r\n      quantity,\r\n      address(portionTokenContract),\r\n      address(artTokenContract),\r\n      address(artToken1155Contract)\r\n    );\r\n\r\n    auctionParameters[address(newAuction)] = AuctionParameters(\r\n      startingBid,\r\n      bidStep,\r\n      startBlock,\r\n      endBlock,\r\n      overtimeBlocksSize,\r\n      feeRate\r\n    );\r\n\r\n    if (isErc1155) {\r\n      artToken1155Contract.safeTransferFrom(msg.sender, address(newAuction), tokenId, quantity, \"\");\r\n    } else {\r\n      artTokenContract.safeTransferFrom(msg.sender, address(newAuction), tokenId);\r\n    }\r\n\r\n    emit AuctionCreated(address(newAuction), beneficiary, tokenId);\r\n  }\r\n\r\n  function placeBid(\r\n    address auctionAddress\r\n  )\r\n  payable\r\n  external\r\n  {\r\n    PortionAuction auction = PortionAuction(auctionAddress);\r\n    AuctionParameters memory parameters = auctionParameters[auctionAddress];\r\n\r\n    require(block.number >= parameters.startBlock);\r\n    require(block.number < parameters.endBlock);\r\n    require(!auction.cancelled());\r\n    require(!auction.acceptPRT());\r\n    require(msg.sender != auction.controller());\r\n    require(msg.sender != auction.beneficiary());\r\n    require(msg.value > 0);\r\n\r\n    // calculate the user's total bid\r\n    uint totalBid = auction.fundsByBidder(msg.sender) + msg.value;\r\n\r\n    if (auction.highestBid() == 0) {\r\n      // reject if user did not overbid\r\n      require(totalBid >= parameters.startingBid);\r\n    } else {\r\n      // reject if user did not overbid\r\n      require(totalBid >= auction.highestBid() + parameters.bidStep);\r\n    }\r\n\r\n    auction.handlePayment{value:msg.value}();\r\n    auction.placeBid(msg.sender, totalBid);\r\n\r\n    // if bid was placed within specified number of blocks before the auction's end\r\n    // extend auction time\r\n    if (parameters.overtimeBlocksSize > parameters.endBlock - block.number) {\r\n      auctionParameters[auctionAddress].endBlock += parameters.overtimeBlocksSize;\r\n    }\r\n\r\n    emit BidPlaced(msg.sender, totalBid);\r\n  }\r\n\r\n  function placeBidPRT(address auctionAddress, uint amount)\r\n  external\r\n  {\r\n    PortionAuction auction = PortionAuction(auctionAddress);\r\n    AuctionParameters memory parameters = auctionParameters[auctionAddress];\r\n\r\n    require(block.number >= parameters.startBlock);\r\n    require(block.number < parameters.endBlock);\r\n    require(!auction.cancelled());\r\n    require(auction.acceptPRT());\r\n    require(msg.sender != auction.controller());\r\n    require(msg.sender != auction.beneficiary());\r\n    require(amount > 0);\r\n\r\n    // calculate the user's total bid\r\n    uint totalBid = auction.fundsByBidder(msg.sender) + amount;\r\n\r\n    if (auction.highestBid() == 0) {\r\n      // reject if user did not overbid\r\n      require(totalBid >= parameters.startingBid);\r\n    } else {\r\n      // reject if user did not overbid\r\n      require(totalBid >= auction.highestBid() + parameters.bidStep);\r\n    }\r\n\r\n    require(portionTokenContract.transferFrom(msg.sender, auctionAddress, amount));\r\n    auction.placeBid(msg.sender, totalBid);\r\n\r\n    // if bid was placed within specified number of blocks before the auction's end\r\n    // extend auction time\r\n    if (parameters.overtimeBlocksSize > parameters.endBlock - block.number) {\r\n      auctionParameters[auctionAddress].endBlock += parameters.overtimeBlocksSize;\r\n    }\r\n\r\n    emit BidPlaced(msg.sender, totalBid);\r\n  }\r\n\r\n  function claimFunds(address auctionAddress)\r\n  external\r\n  {\r\n    PortionAuction auction = PortionAuction(auctionAddress);\r\n    AuctionParameters memory parameters = auctionParameters[auctionAddress];\r\n\r\n    require(auction.cancelled() || block.number >= parameters.endBlock);\r\n\r\n    address withdrawalAccount;\r\n    uint withdrawalAmount;\r\n    bool beneficiaryClaimedFunds;\r\n    bool controllerClaimedFunds;\r\n\r\n    if (auction.cancelled()) {\r\n      // if the auction was cancelled, everyone should be allowed to withdraw their funds\r\n      withdrawalAccount = msg.sender;\r\n      withdrawalAmount = auction.fundsByBidder(withdrawalAccount);\r\n    } else {\r\n      // the auction finished without being cancelled\r\n\r\n      // reject when auction winner claims funds\r\n      require(msg.sender != auction.highestBidder());\r\n\r\n      // everyone except auction winner should be allowed to withdraw their funds\r\n      if (msg.sender == auction.beneficiary()) {\r\n        require(parameters.feeRate < 100 && !auction.beneficiaryClaimedFunds());\r\n        withdrawalAccount = auction.highestBidder();\r\n        withdrawalAmount = auction.fundsByBidder(withdrawalAccount).mul(100 - parameters.feeRate).div(100);\r\n        beneficiaryClaimedFunds = true;\r\n      } else if (msg.sender == auction.controller()) {\r\n        require(parameters.feeRate > 0 && !auction.controllerClaimedFunds());\r\n        withdrawalAccount = auction.highestBidder();\r\n        withdrawalAmount = auction.fundsByBidder(withdrawalAccount).mul(parameters.feeRate).div(100);\r\n        controllerClaimedFunds = true;\r\n      } else {\r\n        withdrawalAccount = msg.sender;\r\n        withdrawalAmount = auction.fundsByBidder(withdrawalAccount);\r\n      }\r\n    }\r\n\r\n    // reject when there are no funds to claim\r\n    require(withdrawalAmount != 0);\r\n\r\n    auction.withdrawFunds(msg.sender, withdrawalAccount, withdrawalAmount, beneficiaryClaimedFunds, controllerClaimedFunds);\r\n\r\n    emit FundsClaimed(msg.sender, withdrawalAccount, withdrawalAmount);\r\n  }\r\n\r\n  function claimItem(address auctionAddress)\r\n  external\r\n  {\r\n    PortionAuction auction = PortionAuction(auctionAddress);\r\n    AuctionParameters memory parameters = auctionParameters[auctionAddress];\r\n\r\n    require(!auction.itemClaimed());\r\n    require(auction.cancelled() || block.number >= parameters.endBlock);\r\n\r\n    if (auction.cancelled()\r\n      || (auction.highestBidder() == address(0) && block.number >= parameters.endBlock)) {\r\n      require(msg.sender == auction.beneficiary());\r\n    } else {\r\n      require(msg.sender == auction.highestBidder());\r\n    }\r\n\r\n    auction.transferItem(msg.sender);\r\n\r\n    emit ItemClaimed(msg.sender);\r\n  }\r\n\r\n  function cancelAuction(address auctionAddress)\r\n  onlyOwner\r\n  external\r\n  {\r\n    PortionAuction auction = PortionAuction(auctionAddress);\r\n    AuctionParameters memory parameters = auctionParameters[auctionAddress];\r\n\r\n    require(!auction.cancelled());\r\n    require(block.number < parameters.endBlock);\r\n\r\n    auction.cancelAuction();\r\n    emit AuctionCancelled();\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"portionTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"artTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"artToken1155Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auctionContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawalAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"}],\"name\":\"FundsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"ItemClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"artToken1155Contract\",\"outputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artTokenContract\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"auctionParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startingBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overtimeBlocksSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"auctionAddress\",\"type\":\"address\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"auctionAddress\",\"type\":\"address\"}],\"name\":\"claimFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"auctionAddress\",\"type\":\"address\"}],\"name\":\"claimItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"acceptPRT\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isErc1155\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"overtimeBlocksSize\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"auctionAddress\",\"type\":\"address\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"auctionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"placeBidPRT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portionTokenContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PortionAuctionFactory","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006d0f5149c502faf215c89ab306ec3e50b15e2892000000000000000000000000da98f59e1edecb2545d7b07b794e704ed6cf1f7a0000000000000000000000000adf0bc748296bcba9f394d783a5f5e9406d6874","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://be56546ef1c8d4139a901a24ce59965c236c633024ec53b707ab0eac29d7f2d9"}]}