{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\ninterface cy {\r\n    function borrow(uint borrowAmount) external returns (uint);\r\n    function repayBorrow(uint repayAmount) external returns (uint);\r\n}\r\n\r\ninterface curve {\r\n    function add_liquidity(uint[2] memory, uint) external returns (uint);\r\n    function remove_liquidity_imbalance(uint[2] memory, uint) external returns (uint);\r\n    function calc_token_amount(uint[2] memory, bool) external view returns (uint);\r\n    function calc_withdraw_one_coin(uint, int128) external view returns (uint);\r\n}\r\n\r\ninterface erc20 { \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n}\r\n\r\ncontract stabilizer {\r\n    \r\n    address constant public pool = 0x19b080FE1ffA0553469D20Ca36219F17Fcf03859;\r\n    address constant public ib = 0x96E61422b6A9bA0e068B6c5ADd4fFaBC6a4aae27;\r\n    address constant public coin = 0xD71eCFF9342A5Ced620049e616c5035F1dB98620;\r\n    address constant public cyib = 0x00e5c0774A5F065c285068170b20393925C84BF3;\r\n    \r\n    address immutable public owner;\r\n    \r\n    constructor(/*address _pool, address _ib, address _coin*/) {\r\n        /*pool = _pool;\r\n        ib = _ib;\r\n        coin = _coin;*/\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function add_liquidity() external {\r\n        uint _ib = erc20(ib).balanceOf(pool);\r\n        uint _coin = erc20(coin).balanceOf(pool);\r\n        uint _deposit = _coin - _ib;\r\n        require(cy(cyib).borrow(_deposit) == 0, 'borrow failed');\r\n        uint _min = curve(pool).calc_token_amount([_deposit, 0],true);\r\n        _safeApprove(ib, pool, _deposit);\r\n        curve(pool).add_liquidity([_deposit, 0], _min*9996/10000);\r\n    }\r\n    \r\n    function remove_liquidity_forced(uint _withdraw) external {\r\n        require(msg.sender == owner);\r\n        uint _max = curve(pool).calc_token_amount([_withdraw,0], false);\r\n        uint _balance = erc20(pool).balanceOf(address(this));\r\n        if (_max > _balance) {\r\n            uint _maxWithdraw = curve(pool).calc_withdraw_one_coin(_balance, 0);\r\n            curve(pool).remove_liquidity_imbalance([_maxWithdraw, 0], _balance);\r\n        } else {\r\n            curve(pool).remove_liquidity_imbalance([_withdraw, 0], _max*10004/10000);\r\n        }\r\n    }\r\n    \r\n    function remove_liquidity() external {\r\n        uint _ib = erc20(ib).balanceOf(pool);\r\n        uint _coin = erc20(coin).balanceOf(pool);\r\n        uint _withdraw = _ib - _coin;\r\n        uint _max = curve(pool).calc_token_amount([_withdraw,0], false);\r\n        uint _balance = erc20(pool).balanceOf(address(this));\r\n        if (_max > _balance) {\r\n            uint _maxWithdraw = curve(pool).calc_withdraw_one_coin(_balance, 0);\r\n            curve(pool).remove_liquidity_imbalance([_maxWithdraw, 0], _balance);\r\n        } else {\r\n            curve(pool).remove_liquidity_imbalance([_withdraw, 0], _max*10004/10000);\r\n        }\r\n        repay();\r\n    }\r\n    \r\n    function repay() public {\r\n        uint _balance = erc20(ib).balanceOf(address(this));\r\n        _safeApprove(ib, cyib, _balance);\r\n        cy(cyib).repayBorrow(_balance);\r\n    }\r\n    \r\n    function withdraw(address token) external {\r\n        require(msg.sender == owner);\r\n        _safeTransfer(token, owner, erc20(token).balanceOf(address(this)));\r\n    }\r\n\r\n    function _safeTransfer(address token, address to, uint256 value) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(erc20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n    \r\n    function _safeApprove(address token, address spender, uint256 value) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(erc20.approve.selector, spender, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"add_liquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cyib\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ib\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remove_liquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdraw\",\"type\":\"uint256\"}],\"name\":\"remove_liquidity_forced\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"stabilizer","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d786716436ce359bbae43ce3329ba720ff3e4e1218ef65424d688bf443a833f6"}]}