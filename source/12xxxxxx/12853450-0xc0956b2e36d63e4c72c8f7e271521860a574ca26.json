{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/D/ProjectWork/SolidityProject/DmitX-nft-marketplace-contracts-dev/exchange-v2/contracts/AssetMatcher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"./IAssetMatcher.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\nabstract contract AssetMatcher is Initializable, OwnableUpgradeable {\\r\\n\\r\\n    bytes constant EMPTY = \\\"\\\";\\r\\n    mapping(bytes4 => address) matchers;\\r\\n\\r\\n    event MatcherChange(bytes4 indexed assetType, address matcher);\\r\\n\\r\\n    function setAssetMatcher(bytes4 assetType, address matcher) external onlyOwner {\\r\\n        matchers[assetType] = matcher;\\r\\n        emit MatcherChange(assetType, matcher);\\r\\n    }\\r\\n\\r\\n    function matchAssets(LibAsset.AssetType memory leftAssetType, LibAsset.AssetType memory rightAssetType) internal view returns (LibAsset.AssetType memory) {\\r\\n        LibAsset.AssetType memory result = matchAssetOneSide(leftAssetType, rightAssetType);\\r\\n        if (result.assetClass == 0) {\\r\\n            return matchAssetOneSide(rightAssetType, leftAssetType);\\r\\n        } else {\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function matchAssetOneSide(LibAsset.AssetType memory leftAssetType, LibAsset.AssetType memory rightAssetType) private view returns (LibAsset.AssetType memory) {\\r\\n        bytes4 classLeft = leftAssetType.assetClass;\\r\\n        bytes4 classRight = rightAssetType.assetClass;\\r\\n        if (classLeft == LibAsset.ETH_ASSET_CLASS) {\\r\\n            if (classRight == LibAsset.ETH_ASSET_CLASS) {\\r\\n                return leftAssetType;\\r\\n            }\\r\\n            return LibAsset.AssetType(0, EMPTY);\\r\\n        }\\r\\n        if (classLeft == LibAsset.ERC20_ASSET_CLASS) {\\r\\n            if (classRight == LibAsset.ERC20_ASSET_CLASS) {\\r\\n                return simpleMatch(leftAssetType, rightAssetType);\\r\\n            }\\r\\n            return LibAsset.AssetType(0, EMPTY);\\r\\n        }\\r\\n        if (classLeft == LibAsset.ERC721_ASSET_CLASS) {\\r\\n            if (classRight == LibAsset.ERC721_ASSET_CLASS) {\\r\\n                return simpleMatch(leftAssetType, rightAssetType);\\r\\n            }\\r\\n            return LibAsset.AssetType(0, EMPTY);\\r\\n        }\\r\\n        if (classLeft == LibAsset.ERC1155_ASSET_CLASS) {\\r\\n            if (classRight == LibAsset.ERC1155_ASSET_CLASS) {\\r\\n                return simpleMatch(leftAssetType, rightAssetType);\\r\\n            }\\r\\n            return LibAsset.AssetType(0, EMPTY);\\r\\n        }\\r\\n        address matcher = matchers[classLeft];\\r\\n        if (matcher != address(0)) {\\r\\n            return IAssetMatcher(matcher).matchAssets(leftAssetType, rightAssetType);\\r\\n        }\\r\\n        if (classLeft == classRight) {\\r\\n            return simpleMatch(leftAssetType, rightAssetType);\\r\\n        }\\r\\n        revert(\\\"not found IAssetMatcher\\\");\\r\\n    }\\r\\n\\r\\n    function simpleMatch(LibAsset.AssetType memory leftAssetType, LibAsset.AssetType memory rightAssetType) private view returns (LibAsset.AssetType memory) {\\r\\n        bytes32 leftHash = keccak256(leftAssetType.data);\\r\\n        bytes32 rightHash = keccak256(rightAssetType.data);\\r\\n        if (leftHash == rightHash) {\\r\\n            return leftAssetType;\\r\\n        }\\r\\n        return LibAsset.AssetType(0, EMPTY);\\r\\n    }\\r\\n\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/ProjectWork/SolidityProject/DmitX-nft-marketplace-contracts-dev/exchange-v2/contracts/CurioTransferManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\r\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\r\\nimport \\\"@rarible/royalties/contracts/IRoyaltiesProvider.sol\\\";\\r\\nimport \\\"./LibFill.sol\\\";\\r\\nimport \\\"./LibFeeSide.sol\\\";\\r\\nimport \\\"./LibOrderDataV1.sol\\\";\\r\\nimport \\\"./ITransferManager.sol\\\";\\r\\nimport \\\"./TransferExecutor.sol\\\";\\r\\nimport \\\"./LibOrderData.sol\\\";\\r\\nimport \\\"./lib/BpLibrary.sol\\\";\\r\\n\\r\\nabstract contract CurioTransferManager is OwnableUpgradeable, ITransferManager {\\r\\n    using BpLibrary for uint;\\r\\n    using SafeMathUpgradeable for uint;\\r\\n\\r\\n    uint public protocolFee;\\r\\n    IRoyaltiesProvider public royaltiesRegistry;\\r\\n\\r\\n    address public defaultFeeReceiver;\\r\\n    mapping(address => address) public feeReceivers;\\r\\n\\r\\n    function __CurioTransferManager_init_unchained(\\r\\n        uint newProtocolFee,\\r\\n        address newDefaultFeeReceiver,\\r\\n        IRoyaltiesProvider newRoyaltiesProvider\\r\\n    ) internal initializer {\\r\\n        protocolFee = newProtocolFee;\\r\\n        defaultFeeReceiver = newDefaultFeeReceiver;\\r\\n        royaltiesRegistry = newRoyaltiesProvider;\\r\\n    }\\r\\n\\r\\n    function setRoyaltiesRegistry(IRoyaltiesProvider newRoyaltiesRegistry) external onlyOwner {\\r\\n        royaltiesRegistry = newRoyaltiesRegistry;\\r\\n    }\\r\\n\\r\\n    function setProtocolFee(uint newProtocolFee) external onlyOwner {\\r\\n        protocolFee = newProtocolFee;\\r\\n    }\\r\\n\\r\\n    function setDefaultFeeReceiver(address payable newDefaultFeeReceiver) external onlyOwner {\\r\\n        defaultFeeReceiver = newDefaultFeeReceiver;\\r\\n    }\\r\\n\\r\\n    function setFeeReceiver(address token, address wallet) external onlyOwner {\\r\\n        feeReceivers[token] = wallet;\\r\\n    }\\r\\n\\r\\n    function getFeeReceiver(address token) internal view returns (address) {\\r\\n        address wallet = feeReceivers[token];\\r\\n        if (wallet != address(0)) {\\r\\n            return wallet;\\r\\n        }\\r\\n        return defaultFeeReceiver;\\r\\n    }\\r\\n\\r\\n    function doTransfers(\\r\\n        LibAsset.AssetType memory makeMatch,\\r\\n        LibAsset.AssetType memory takeMatch,\\r\\n        LibFill.FillResult memory fill,\\r\\n        LibOrder.Order memory leftOrder,\\r\\n        LibOrder.Order memory rightOrder\\r\\n    ) override internal returns (uint totalMakeValue, uint totalTakeValue) {\\r\\n        LibFeeSide.FeeSide feeSide = LibFeeSide.getFeeSide(makeMatch.assetClass, takeMatch.assetClass);\\r\\n        totalMakeValue = fill.makeValue;\\r\\n        totalTakeValue = fill.takeValue;\\r\\n        LibOrderDataV1.DataV1 memory leftOrderData = LibOrderData.parse(leftOrder);\\r\\n        LibOrderDataV1.DataV1 memory rightOrderData = LibOrderData.parse(rightOrder);\\r\\n        if (feeSide == LibFeeSide.FeeSide.MAKE) {\\r\\n            totalMakeValue = doTransfersWithFees(fill.makeValue, leftOrder.maker, leftOrderData, rightOrderData, makeMatch, takeMatch,  TO_TAKER);\\r\\n            transferPayouts(takeMatch, fill.takeValue, rightOrder.maker, leftOrderData.payouts, TO_MAKER);\\r\\n        } else if (feeSide == LibFeeSide.FeeSide.TAKE) {\\r\\n            totalTakeValue = doTransfersWithFees(fill.takeValue, rightOrder.maker, rightOrderData, leftOrderData, takeMatch, makeMatch, TO_MAKER);\\r\\n            transferPayouts(makeMatch, fill.makeValue, leftOrder.maker, rightOrderData.payouts, TO_TAKER);\\r\\n        } else {\\r\\n            transferPayouts(makeMatch, fill.makeValue, leftOrder.maker, rightOrderData.payouts, TO_TAKER);\\r\\n            transferPayouts(takeMatch, fill.takeValue, rightOrder.maker, leftOrderData.payouts, TO_MAKER);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function doTransfersWithFees(\\r\\n        uint amount,\\r\\n        address from,\\r\\n        LibOrderDataV1.DataV1 memory dataCalculate,\\r\\n        LibOrderDataV1.DataV1 memory dataNft,\\r\\n        LibAsset.AssetType memory matchCalculate,\\r\\n        LibAsset.AssetType memory matchNft,\\r\\n        bytes4 transferDirection\\r\\n    ) internal returns (uint totalAmount) {\\r\\n        totalAmount = calculateTotalAmount(amount, protocolFee, dataCalculate.originFees);\\r\\n        uint rest = transferProtocolFee(totalAmount, amount, from, matchCalculate, transferDirection);\\r\\n        rest = transferRoyalties(matchCalculate, matchNft, rest, amount, from, transferDirection);\\r\\n        (rest,) = transferFees(matchCalculate, rest, amount, dataCalculate.originFees, from, transferDirection, ORIGIN);\\r\\n        (rest,) = transferFees(matchCalculate, rest, amount, dataNft.originFees, from, transferDirection, ORIGIN);\\r\\n        transferPayouts(matchCalculate, rest, from, dataNft.payouts, transferDirection);\\r\\n    }\\r\\n\\r\\n    function transferProtocolFee(\\r\\n        uint totalAmount,\\r\\n        uint amount,\\r\\n        address from,\\r\\n        LibAsset.AssetType memory matchCalculate,\\r\\n        bytes4 transferDirection\\r\\n    ) internal returns (uint) {\\r\\n        (uint rest, uint fee) = subFeeInBp(totalAmount, amount, protocolFee.mul(2));\\r\\n        if (fee > 0) {\\r\\n            address tokenAddress = address(0);\\r\\n            if (matchCalculate.assetClass == LibAsset.ERC20_ASSET_CLASS) {\\r\\n                tokenAddress = abi.decode(matchCalculate.data, (address));\\r\\n            } else  if (matchCalculate.assetClass == LibAsset.ERC1155_ASSET_CLASS) {\\r\\n                uint tokenId;\\r\\n                (tokenAddress, tokenId) = abi.decode(matchCalculate.data, (address, uint));\\r\\n            }\\r\\n            transfer(LibAsset.Asset(matchCalculate, fee), from, getFeeReceiver(tokenAddress), transferDirection, PROTOCOL);\\r\\n        }\\r\\n        return rest;\\r\\n    }\\r\\n\\r\\n    function transferRoyalties(\\r\\n        LibAsset.AssetType memory matchCalculate,\\r\\n        LibAsset.AssetType memory matchNft,\\r\\n        uint rest,\\r\\n        uint amount,\\r\\n        address from,\\r\\n        bytes4 transferDirection\\r\\n    ) internal returns (uint) {\\r\\n        if (matchNft.assetClass != LibAsset.ERC1155_ASSET_CLASS && matchNft.assetClass != LibAsset.ERC721_ASSET_CLASS) {\\r\\n            return rest;\\r\\n        }\\r\\n        (address token, uint tokenId) = abi.decode(matchNft.data, (address, uint));\\r\\n        LibPart.Part[] memory fees = royaltiesRegistry.getRoyalties(token, tokenId);\\r\\n        (uint result, uint totalRoyalties) = transferFees(matchCalculate, rest, amount, fees, from, transferDirection, ROYALTY);\\r\\n        require(totalRoyalties <= 5000, \\\"Royalties are too high (>50%)\\\");\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function transferFees(\\r\\n        LibAsset.AssetType memory matchCalculate,\\r\\n        uint rest,\\r\\n        uint amount,\\r\\n        LibPart.Part[] memory fees,\\r\\n        address from,\\r\\n        bytes4 transferDirection,\\r\\n        bytes4 transferType\\r\\n    ) internal returns (uint restValue, uint totalFees) {\\r\\n        totalFees = 0;\\r\\n        restValue = rest;\\r\\n        for (uint256 i = 0; i < fees.length; i++) {\\r\\n            totalFees = totalFees.add(fees[i].value);\\r\\n            (uint newRestValue, uint feeValue) = subFeeInBp(restValue, amount,  fees[i].value);\\r\\n            restValue = newRestValue;\\r\\n            if (feeValue > 0) {\\r\\n                transfer(LibAsset.Asset(matchCalculate, feeValue), from,  fees[i].account, transferDirection, transferType);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function transferPayouts(\\r\\n        LibAsset.AssetType memory matchCalculate,\\r\\n        uint amount,\\r\\n        address from,\\r\\n        LibPart.Part[] memory payouts,\\r\\n        bytes4 transferDirection\\r\\n    ) internal {\\r\\n        uint sumBps = 0;\\r\\n        uint restValue = amount;\\r\\n        for (uint256 i = 0; i < payouts.length - 1; i++) {\\r\\n            uint currentAmount = amount.bp(payouts[i].value);\\r\\n            sumBps = sumBps.add(payouts[i].value);\\r\\n            if (currentAmount > 0) {\\r\\n                restValue = restValue.sub(currentAmount);\\r\\n                transfer(LibAsset.Asset(matchCalculate, currentAmount), from, payouts[i].account, transferDirection, PAYOUT);\\r\\n            }\\r\\n        }\\r\\n        LibPart.Part memory lastPayout = payouts[payouts.length - 1];\\r\\n        sumBps = sumBps.add(lastPayout.value);\\r\\n        require(sumBps == 10000, \\\"Sum payouts Bps not equal 100%\\\");\\r\\n        if (restValue > 0) {\\r\\n            transfer(LibAsset.Asset(matchCalculate, restValue), from, lastPayout.account, transferDirection, PAYOUT);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calculateTotalAmount(\\r\\n        uint amount,\\r\\n        uint feeOnTopBp,\\r\\n        LibPart.Part[] memory orderOriginFees\\r\\n    ) internal pure returns (uint total){\\r\\n        total = amount.add(amount.bp(feeOnTopBp));\\r\\n        for (uint256 i = 0; i < orderOriginFees.length; i++) {\\r\\n            total = total.add(amount.bp(orderOriginFees[i].value));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function subFeeInBp(uint value, uint total, uint feeInBp) internal pure returns (uint newValue, uint realFee) {\\r\\n        return subFee(value, total.bp(feeInBp));\\r\\n    }\\r\\n\\r\\n    function subFee(uint value, uint fee) internal pure returns (uint newValue, uint realFee) {\\r\\n        if (value > fee) {\\r\\n            newValue = value.sub(fee);\\r\\n            realFee = fee;\\r\\n        } else {\\r\\n            newValue = 0;\\r\\n            realFee = value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    uint256[46] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/ProjectWork/SolidityProject/DmitX-nft-marketplace-contracts-dev/exchange-v2/contracts/ExchangeV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"./ExchangeV2Core.sol\\\";\\r\\nimport \\\"./CurioTransferManager.sol\\\";\\r\\nimport \\\"@rarible/royalties/contracts/IRoyaltiesProvider.sol\\\";\\r\\n\\r\\ncontract ExchangeV2 is ExchangeV2Core, CurioTransferManager {\\r\\n    function __ExchangeV2_init(\\r\\n        INftTransferProxy _transferProxy,\\r\\n        IERC20TransferProxy _erc20TransferProxy,\\r\\n        uint newProtocolFee,\\r\\n        address newDefaultFeeReceiver,\\r\\n        IRoyaltiesProvider newRoyaltiesProvider\\r\\n    ) external initializer {\\r\\n        __Context_init_unchained();\\r\\n        __Ownable_init_unchained();\\r\\n        __TransferExecutor_init_unchained(_transferProxy, _erc20TransferProxy);\\r\\n        __CurioTransferManager_init_unchained(newProtocolFee, newDefaultFeeReceiver, newRoyaltiesProvider);\\r\\n        __OrderValidator_init_unchained();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/ProjectWork/SolidityProject/DmitX-nft-marketplace-contracts-dev/exchange-v2/contracts/ExchangeV2Core.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"./LibFill.sol\\\";\\r\\nimport \\\"./LibOrder.sol\\\";\\r\\nimport \\\"./OrderValidator.sol\\\";\\r\\nimport \\\"./AssetMatcher.sol\\\";\\r\\nimport \\\"./TransferExecutor.sol\\\";\\r\\nimport \\\"./ITransferManager.sol\\\";\\r\\nimport \\\"./lib/LibTransfer.sol\\\";\\r\\n\\r\\nabstract contract ExchangeV2Core is Initializable, OwnableUpgradeable, AssetMatcher, TransferExecutor, OrderValidator, ITransferManager {\\r\\n    using SafeMathUpgradeable for uint;\\r\\n    using LibTransfer for address;\\r\\n\\r\\n    uint256 private constant UINT256_MAX = 2 ** 256 - 1;\\r\\n\\r\\n    //state of the orders\\r\\n    mapping(bytes32 => uint) public fills;\\r\\n\\r\\n    //events\\r\\n    event Cancel(bytes32 hash, address maker, LibAsset.AssetType makeAssetType, LibAsset.AssetType takeAssetType);\\r\\n    event Match(bytes32 leftHash, bytes32 rightHash, address leftMaker, address rightMaker, uint newLeftFill, uint newRightFill, LibAsset.AssetType leftAsset, LibAsset.AssetType rightAsset);\\r\\n\\r\\n    function cancel(LibOrder.Order memory order) external {\\r\\n        require(_msgSender() == order.maker, \\\"not a maker\\\");\\r\\n        require(order.salt != 0, \\\"0 salt can't be used\\\");\\r\\n        bytes32 orderKeyHash = LibOrder.hashKey(order);\\r\\n        fills[orderKeyHash] = UINT256_MAX;\\r\\n        emit Cancel(orderKeyHash, order.maker, order.makeAsset.assetType, order.takeAsset.assetType);\\r\\n    }\\r\\n\\r\\n    function matchOrders(\\r\\n        LibOrder.Order memory orderLeft,\\r\\n        bytes memory signatureLeft,\\r\\n        LibOrder.Order memory orderRight,\\r\\n        bytes memory signatureRight\\r\\n    ) external payable {\\r\\n        validateFull(orderLeft, signatureLeft);\\r\\n        validateFull(orderRight, signatureRight);\\r\\n        if (orderLeft.taker != address(0)) {\\r\\n            require(orderRight.maker == orderLeft.taker, \\\"leftOrder.taker verification failed\\\");\\r\\n        }\\r\\n        if (orderRight.taker != address(0)) {\\r\\n            require(orderRight.taker == orderLeft.maker, \\\"rightOrder.taker verification failed\\\");\\r\\n        }\\r\\n        matchAndTransfer(orderLeft, orderRight);\\r\\n    }\\r\\n\\r\\n    function matchAndTransfer(LibOrder.Order memory orderLeft, LibOrder.Order memory orderRight) internal {\\r\\n        (LibAsset.AssetType memory makeMatch, LibAsset.AssetType memory takeMatch) = matchAssets(orderLeft, orderRight);\\r\\n        bytes32 leftOrderKeyHash = LibOrder.hashKey(orderLeft);\\r\\n        bytes32 rightOrderKeyHash = LibOrder.hashKey(orderRight);\\r\\n        uint leftOrderFill = getOrderFill(orderLeft, leftOrderKeyHash);\\r\\n        uint rightOrderFill = getOrderFill(orderRight, rightOrderKeyHash);\\r\\n        LibFill.FillResult memory newFill = LibFill.fillOrder(orderLeft, orderRight, leftOrderFill, rightOrderFill);\\r\\n        require(newFill.takeValue > 0, \\\"nothing to fill\\\");\\r\\n\\r\\n        if (orderLeft.salt != 0) {\\r\\n            fills[leftOrderKeyHash] = leftOrderFill.add(newFill.takeValue);\\r\\n        }\\r\\n        if (orderRight.salt != 0) {\\r\\n            fills[rightOrderKeyHash] = rightOrderFill.add(newFill.makeValue);\\r\\n        }\\r\\n\\r\\n        (uint totalMakeValue, uint totalTakeValue) = doTransfers(makeMatch, takeMatch, newFill, orderLeft, orderRight);\\r\\n        if (makeMatch.assetClass == LibAsset.ETH_ASSET_CLASS) {\\r\\n            require(takeMatch.assetClass != LibAsset.ETH_ASSET_CLASS);\\r\\n            require(msg.value >= totalMakeValue, \\\"not enough eth\\\");\\r\\n            if (msg.value > totalMakeValue) {\\r\\n                address(msg.sender).transferEth(msg.value.sub(totalMakeValue));\\r\\n            }\\r\\n        } else if (takeMatch.assetClass == LibAsset.ETH_ASSET_CLASS) {\\r\\n            require(msg.value >= totalTakeValue, \\\"not enough eth\\\");\\r\\n            if (msg.value > totalTakeValue) {\\r\\n                address(msg.sender).transferEth(msg.value.sub(totalTakeValue));\\r\\n            }\\r\\n        }\\r\\n        emit Match(leftOrderKeyHash, rightOrderKeyHash, orderLeft.maker, orderRight.maker, newFill.takeValue, newFill.makeValue, makeMatch, takeMatch);\\r\\n    }\\r\\n\\r\\n    function getOrderFill(LibOrder.Order memory order, bytes32 hash) internal view returns (uint fill) {\\r\\n        if (order.salt == 0) {\\r\\n            fill = 0;\\r\\n        } else {\\r\\n            fill = fills[hash];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function matchAssets(LibOrder.Order memory orderLeft, LibOrder.Order memory orderRight) internal view returns (LibAsset.AssetType memory makeMatch, LibAsset.AssetType memory takeMatch) {\\r\\n        makeMatch = matchAssets(orderLeft.makeAsset.assetType, orderRight.takeAsset.assetType);\\r\\n        require(makeMatch.assetClass != 0, \\\"assets don't match\\\");\\r\\n        takeMatch = matchAssets(orderLeft.takeAsset.assetType, orderRight.makeAsset.assetType);\\r\\n        require(takeMatch.assetClass != 0, \\\"assets don't match\\\");\\r\\n    }\\r\\n\\r\\n    function validateFull(LibOrder.Order memory order, bytes memory signature) internal view {\\r\\n        LibOrder.validate(order);\\r\\n        validate(order, signature);\\r\\n    }\\r\\n\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/ProjectWork/SolidityProject/DmitX-nft-marketplace-contracts-dev/exchange-v2/contracts/IAssetMatcher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\r\\n\\r\\ninterface IAssetMatcher {\\r\\n    function matchAssets(\\r\\n        LibAsset.AssetType memory leftAssetType,\\r\\n        LibAsset.AssetType memory rightAssetType\\r\\n    ) external view returns (LibAsset.AssetType memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/ProjectWork/SolidityProject/DmitX-nft-marketplace-contracts-dev/exchange-v2/contracts/ITransferExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\r\\n\\r\\nabstract contract ITransferExecutor {\\r\\n\\r\\n    //events\\r\\n    event Transfer(LibAsset.Asset asset, address from, address to, bytes4 transferDirection, bytes4 transferType);\\r\\n\\r\\n    function transfer(\\r\\n        LibAsset.Asset memory asset,\\r\\n        address from,\\r\\n        address to,\\r\\n        bytes4 transferDirection,\\r\\n        bytes4 transferType\\r\\n    ) internal virtual;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/ProjectWork/SolidityProject/DmitX-nft-marketplace-contracts-dev/exchange-v2/contracts/ITransferManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\r\\nimport \\\"./LibFill.sol\\\";\\r\\nimport \\\"./TransferExecutor.sol\\\";\\r\\n\\r\\nabstract contract ITransferManager is ITransferExecutor {\\r\\n    bytes4 constant TO_MAKER = bytes4(keccak256(\\\"TO_MAKER\\\"));\\r\\n    bytes4 constant TO_TAKER = bytes4(keccak256(\\\"TO_TAKER\\\"));\\r\\n    bytes4 constant PROTOCOL = bytes4(keccak256(\\\"PROTOCOL\\\"));\\r\\n    bytes4 constant ROYALTY = bytes4(keccak256(\\\"ROYALTY\\\"));\\r\\n    bytes4 constant ORIGIN = bytes4(keccak256(\\\"ORIGIN\\\"));\\r\\n    bytes4 constant PAYOUT = bytes4(keccak256(\\\"PAYOUT\\\"));\\r\\n\\r\\n    function doTransfers(\\r\\n        LibAsset.AssetType memory makeMatch,\\r\\n        LibAsset.AssetType memory takeMatch,\\r\\n        LibFill.FillResult memory fill,\\r\\n        LibOrder.Order memory leftOrder,\\r\\n        LibOrder.Order memory rightOrder\\r\\n    ) internal virtual returns (uint totalMakeValue, uint totalTakeValue);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/ProjectWork/SolidityProject/DmitX-nft-marketplace-contracts-dev/exchange-v2/contracts/LibFeeSide.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\r\\n\\r\\nlibrary LibFeeSide {\\r\\n\\r\\n    enum FeeSide {NONE, MAKE, TAKE}\\r\\n\\r\\n    function getFeeSide(bytes4 make, bytes4 take) internal pure returns (FeeSide) {\\r\\n        if (make == LibAsset.ETH_ASSET_CLASS) {\\r\\n            return FeeSide.MAKE;\\r\\n        }\\r\\n        if (take == LibAsset.ETH_ASSET_CLASS) {\\r\\n            return FeeSide.TAKE;\\r\\n        }\\r\\n        if (make == LibAsset.ERC20_ASSET_CLASS) {\\r\\n            return FeeSide.MAKE;\\r\\n        }\\r\\n        if (take == LibAsset.ERC20_ASSET_CLASS) {\\r\\n            return FeeSide.TAKE;\\r\\n        }\\r\\n        if (make == LibAsset.ERC1155_ASSET_CLASS) {\\r\\n            return FeeSide.MAKE;\\r\\n        }\\r\\n        if (take == LibAsset.ERC1155_ASSET_CLASS) {\\r\\n            return FeeSide.TAKE;\\r\\n        }\\r\\n        return FeeSide.NONE;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/ProjectWork/SolidityProject/DmitX-nft-marketplace-contracts-dev/exchange-v2/contracts/LibFill.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport \\\"./LibOrder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\\\";\\r\\n\\r\\nlibrary LibFill {\\r\\n    using SafeMathUpgradeable for uint;\\r\\n\\r\\n    struct FillResult {\\r\\n        uint makeValue;\\r\\n        uint takeValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Should return filled values\\r\\n     * @param leftOrder left order\\r\\n     * @param rightOrder right order\\r\\n     * @param leftOrderFill current fill of the left order (0 if order is unfilled)\\r\\n     * @param rightOrderFill current fill of the right order (0 if order is unfilled)\\r\\n     */\\r\\n    function fillOrder(LibOrder.Order memory leftOrder, LibOrder.Order memory rightOrder, uint leftOrderFill, uint rightOrderFill) internal pure returns (FillResult memory) {\\r\\n        (uint leftMakeValue, uint leftTakeValue) = LibOrder.calculateRemaining(leftOrder, leftOrderFill);\\r\\n        (uint rightMakeValue, uint rightTakeValue) = LibOrder.calculateRemaining(rightOrder, rightOrderFill);\\r\\n\\r\\n        //We have 3 cases here:\\r\\n        if (rightTakeValue > leftMakeValue) { //1nd: left order should be fully filled\\r\\n            return fillLeft(leftMakeValue, leftTakeValue, rightOrder.makeAsset.value, rightOrder.takeAsset.value);\\r\\n        }//2st: right order should be fully filled or 3d: both should be fully filled if required values are the same\\r\\n        return fillRight(leftOrder.makeAsset.value, leftOrder.takeAsset.value, rightMakeValue, rightTakeValue);\\r\\n    }\\r\\n\\r\\n    function fillRight(uint leftMakeValue, uint leftTakeValue, uint rightMakeValue, uint rightTakeValue) internal pure returns (FillResult memory result) {\\r\\n        uint makerValue = LibMath.safeGetPartialAmountFloor(rightTakeValue, leftMakeValue, leftTakeValue);\\r\\n        require(makerValue <= rightMakeValue, \\\"fillRight: unable to fill\\\");\\r\\n        return FillResult(rightTakeValue, makerValue);\\r\\n    }\\r\\n\\r\\n    function fillLeft(uint leftMakeValue, uint leftTakeValue, uint rightMakeValue, uint rightTakeValue) internal pure returns (FillResult memory result) {\\r\\n        uint rightTake = LibMath.safeGetPartialAmountFloor(leftTakeValue, rightMakeValue, rightTakeValue);\\r\\n        require(rightTake <= leftMakeValue, \\\"fillLeft: unable to fill\\\");\\r\\n        return FillResult(leftMakeValue, leftTakeValue);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/ProjectWork/SolidityProject/DmitX-nft-marketplace-contracts-dev/exchange-v2/contracts/LibOrder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport \\\"./lib/LibMath.sol\\\";\\r\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\r\\n\\r\\nlibrary LibOrder {\\r\\n    using SafeMathUpgradeable for uint;\\r\\n\\r\\n    bytes32 constant ORDER_TYPEHASH = keccak256(\\r\\n        \\\"Order(address maker,Asset makeAsset,address taker,Asset takeAsset,uint256 salt,uint256 start,uint256 end,bytes4 dataType,bytes data)Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\\\"\\r\\n    );\\r\\n\\r\\n    struct Order {\\r\\n        address maker;\\r\\n        LibAsset.Asset makeAsset;\\r\\n        address taker;\\r\\n        LibAsset.Asset takeAsset;\\r\\n        uint salt;\\r\\n        uint start;\\r\\n        uint end;\\r\\n        bytes4 dataType;\\r\\n        bytes data;\\r\\n    }\\r\\n\\r\\n    function calculateRemaining(Order memory order, uint fill) internal pure returns (uint makeValue, uint takeValue) {\\r\\n        takeValue = order.takeAsset.value.sub(fill);\\r\\n        makeValue = LibMath.safeGetPartialAmountFloor(order.makeAsset.value, order.takeAsset.value, takeValue);\\r\\n    }\\r\\n\\r\\n    function hashKey(Order memory order) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n                order.maker,\\r\\n                LibAsset.hash(order.makeAsset.assetType),\\r\\n                LibAsset.hash(order.takeAsset.assetType),\\r\\n                order.salt\\r\\n            ));\\r\\n    }\\r\\n\\r\\n    function hash(Order memory order) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n                ORDER_TYPEHASH,\\r\\n                order.maker,\\r\\n                LibAsset.hash(order.makeAsset),\\r\\n                order.taker,\\r\\n                LibAsset.hash(order.takeAsset),\\r\\n                order.salt,\\r\\n                order.start,\\r\\n                order.end,\\r\\n                order.dataType,\\r\\n                keccak256(order.data)\\r\\n            ));\\r\\n    }\\r\\n\\r\\n    function validate(LibOrder.Order memory order) internal view {\\r\\n        require(order.start == 0 || order.start < block.timestamp, \\\"Order start validation failed\\\");\\r\\n        require(order.end == 0 || order.end > block.timestamp, \\\"Order end validation failed\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/ProjectWork/SolidityProject/DmitX-nft-marketplace-contracts-dev/exchange-v2/contracts/LibOrderData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport \\\"./LibOrder.sol\\\";\\r\\nimport \\\"./LibOrderDataV1.sol\\\";\\r\\nimport \\\"@rarible/royalties/contracts/LibPart.sol\\\";\\r\\n\\r\\nlibrary LibOrderData {\\r\\n\\r\\n    function parse(LibOrder.Order memory order) pure internal returns (LibOrderDataV1.DataV1 memory dataOrder) {\\r\\n        if (order.dataType == LibOrderDataV1.V1) {\\r\\n            dataOrder = LibOrderDataV1.decodeOrderDataV1(order.data);\\r\\n            if (dataOrder.payouts.length == 0) {\\r\\n                dataOrder = payoutSet(order.maker, dataOrder);\\r\\n            }\\r\\n        } else if (order.dataType == 0xffffffff) {\\r\\n            dataOrder = payoutSet(order.maker, dataOrder);\\r\\n        } else {\\r\\n            revert(\\\"Unknown Order data type\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function payoutSet(\\r\\n        address orderAddress,\\r\\n        LibOrderDataV1.DataV1 memory dataOrderOnePayoutIn\\r\\n    ) pure internal returns (LibOrderDataV1.DataV1 memory ) {\\r\\n        LibPart.Part[] memory payout = new LibPart.Part[](1);\\r\\n        payout[0].account = payable(orderAddress);\\r\\n        payout[0].value = 10000;\\r\\n        dataOrderOnePayoutIn.payouts = payout;\\r\\n        return dataOrderOnePayoutIn;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/ProjectWork/SolidityProject/DmitX-nft-marketplace-contracts-dev/exchange-v2/contracts/LibOrderDataV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@rarible/royalties/contracts/LibPart.sol\\\";\\r\\n\\r\\nlibrary LibOrderDataV1 {\\r\\n    bytes4 constant public V1 = bytes4(keccak256(\\\"V1\\\"));\\r\\n\\r\\n    struct DataV1 {\\r\\n        LibPart.Part[] payouts;\\r\\n        LibPart.Part[] originFees;\\r\\n    }\\r\\n\\r\\n    function decodeOrderDataV1(bytes memory data) internal pure returns (DataV1 memory orderData) {\\r\\n        orderData = abi.decode(data, (DataV1));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/ProjectWork/SolidityProject/DmitX-nft-marketplace-contracts-dev/exchange-v2/contracts/OrderValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport \\\"./interfaces/ERC1271.sol\\\";\\r\\nimport \\\"./LibOrder.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/cryptography/ECDSAUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol\\\";\\r\\n\\r\\nabstract contract OrderValidator is Initializable, ContextUpgradeable, EIP712Upgradeable {\\r\\n    using ECDSAUpgradeable for bytes32;\\r\\n    using AddressUpgradeable for address;\\r\\n\\r\\n    bytes4 constant internal MAGICVALUE = 0x1626ba7e;\\r\\n\\r\\n    function __OrderValidator_init_unchained() internal initializer {\\r\\n        __EIP712_init_unchained(\\\"Exchange\\\", \\\"2\\\");\\r\\n    }\\r\\n\\r\\n    function validate(LibOrder.Order memory order, bytes memory signature) internal view {\\r\\n        if (order.salt == 0) {\\r\\n            require(_msgSender() == order.maker, \\\"maker is not tx sender\\\");\\r\\n        } else {\\r\\n            if (_msgSender() != order.maker) {\\r\\n                bytes32 hash = LibOrder.hash(order);\\r\\n                if (_hashTypedDataV4(hash).recover(signature) != order.maker) {\\r\\n                    if (order.maker.isContract()) {\\r\\n                        require(\\r\\n                            ERC1271(order.maker).isValidSignature(_hashTypedDataV4(hash), signature) == MAGICVALUE,\\r\\n                            \\\"contract order signature verification error\\\"\\r\\n                        );\\r\\n                    } else {\\r\\n                        revert(\\\"order signature verification error\\\");\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    uint256[50] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/ProjectWork/SolidityProject/DmitX-nft-marketplace-contracts-dev/exchange-v2/contracts/TransferExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\r\\nimport \\\"@rarible/exchange-interfaces/contracts/ITransferProxy.sol\\\";\\r\\nimport \\\"@rarible/exchange-interfaces/contracts/INftTransferProxy.sol\\\";\\r\\nimport \\\"@rarible/exchange-interfaces/contracts/IERC20TransferProxy.sol\\\";\\r\\nimport \\\"./ITransferExecutor.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"./lib/LibTransfer.sol\\\";\\r\\n\\r\\nabstract contract TransferExecutor is Initializable, OwnableUpgradeable, ITransferExecutor {\\r\\n    using LibTransfer for address;\\r\\n\\r\\n    mapping (bytes4 => address) proxies;\\r\\n\\r\\n    event ProxyChange(bytes4 indexed assetType, address proxy);\\r\\n\\r\\n    function __TransferExecutor_init_unchained(INftTransferProxy transferProxy, IERC20TransferProxy erc20TransferProxy) internal {\\r\\n        proxies[LibAsset.ERC20_ASSET_CLASS] = address(erc20TransferProxy);\\r\\n        proxies[LibAsset.ERC721_ASSET_CLASS] = address(transferProxy);\\r\\n        proxies[LibAsset.ERC1155_ASSET_CLASS] = address(transferProxy);\\r\\n    }\\r\\n\\r\\n    function setTransferProxy(bytes4 assetType, address proxy) external onlyOwner {\\r\\n        proxies[assetType] = proxy;\\r\\n        emit ProxyChange(assetType, proxy);\\r\\n    }\\r\\n\\r\\n    function transfer(\\r\\n        LibAsset.Asset memory asset,\\r\\n        address from,\\r\\n        address to,\\r\\n        bytes4 transferDirection,\\r\\n        bytes4 transferType\\r\\n    ) internal override {\\r\\n        if (asset.assetType.assetClass == LibAsset.ETH_ASSET_CLASS) {\\r\\n            to.transferEth(asset.value);\\r\\n        } else if (asset.assetType.assetClass == LibAsset.ERC20_ASSET_CLASS) {\\r\\n            (address token) = abi.decode(asset.assetType.data, (address));\\r\\n            IERC20TransferProxy(proxies[LibAsset.ERC20_ASSET_CLASS]).erc20safeTransferFrom(IERC20Upgradeable(token), from, to, asset.value);\\r\\n        } else if (asset.assetType.assetClass == LibAsset.ERC721_ASSET_CLASS) {\\r\\n            (address token, uint tokenId) = abi.decode(asset.assetType.data, (address, uint256));\\r\\n            require(asset.value == 1, \\\"erc721 value error\\\");\\r\\n            INftTransferProxy(proxies[LibAsset.ERC721_ASSET_CLASS]).erc721safeTransferFrom(IERC721Upgradeable(token), from, to, tokenId);\\r\\n        } else if (asset.assetType.assetClass == LibAsset.ERC1155_ASSET_CLASS) {\\r\\n            (address token, uint tokenId) = abi.decode(asset.assetType.data, (address, uint256));\\r\\n            INftTransferProxy(proxies[LibAsset.ERC1155_ASSET_CLASS]).erc1155safeTransferFrom(IERC1155Upgradeable(token), from, to, tokenId, asset.value, \\\"\\\");\\r\\n        } else {\\r\\n            ITransferProxy(proxies[asset.assetType.assetClass]).transfer(asset, from, to);\\r\\n        }\\r\\n        emit Transfer(asset, from, to, transferDirection, transferType);\\r\\n    }\\r\\n\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/ProjectWork/SolidityProject/DmitX-nft-marketplace-contracts-dev/exchange-v2/contracts/interfaces/ERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\ninterface ERC1271 {\\r\\n\\r\\n    /**\\r\\n     * @dev Should return whether the signature provided is valid for the provided data\\r\\n     * @param _hash Hash of the data signed on the behalf of address(this)\\r\\n     * @param _signature Signature byte array associated with _data\\r\\n     *\\r\\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\\r\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\r\\n     * MUST allow external calls\\r\\n     */\\r\\n    function isValidSignature(bytes32 _hash, bytes calldata _signature) virtual external view returns (bytes4 magicValue);\\r\\n}\"\r\n    },\r\n    \"/D/ProjectWork/SolidityProject/DmitX-nft-marketplace-contracts-dev/exchange-v2/contracts/lib/BpLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\r\\n\\r\\nlibrary BpLibrary {\\r\\n    using SafeMathUpgradeable for uint;\\r\\n\\r\\n    function bp(uint value, uint bpValue) internal pure returns (uint) {\\r\\n        return value.mul(bpValue).div(10000);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/ProjectWork/SolidityProject/DmitX-nft-marketplace-contracts-dev/exchange-v2/contracts/lib/LibMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\r\\n\\r\\nlibrary LibMath {\\r\\n    using SafeMathUpgradeable for uint;\\r\\n\\r\\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\\r\\n    ///      Reverts if rounding error is >= 0.1%\\r\\n    /// @param numerator Numerator.\\r\\n    /// @param denominator Denominator.\\r\\n    /// @param target Value to calculate partial of.\\r\\n    /// @return partialAmount value of target rounded down.\\r\\n    function safeGetPartialAmountFloor(\\r\\n        uint256 numerator,\\r\\n        uint256 denominator,\\r\\n        uint256 target\\r\\n    ) internal pure returns (uint256 partialAmount) {\\r\\n        if (isRoundingErrorFloor(numerator, denominator, target)) {\\r\\n            revert(\\\"rounding error\\\");\\r\\n        }\\r\\n        partialAmount = numerator.mul(target).div(denominator);\\r\\n    }\\r\\n\\r\\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\\r\\n    /// @param numerator Numerator.\\r\\n    /// @param denominator Denominator.\\r\\n    /// @param target Value to multiply with numerator/denominator.\\r\\n    /// @return isError Rounding error is present.\\r\\n    function isRoundingErrorFloor(\\r\\n        uint256 numerator,\\r\\n        uint256 denominator,\\r\\n        uint256 target\\r\\n    ) internal pure returns (bool isError) {\\r\\n        if (denominator == 0) {\\r\\n            revert(\\\"division by zero\\\");\\r\\n        }\\r\\n\\r\\n        // The absolute rounding error is the difference between the rounded\\r\\n        // value and the ideal value. The relative rounding error is the\\r\\n        // absolute rounding error divided by the absolute value of the\\r\\n        // ideal value. This is undefined when the ideal value is zero.\\r\\n        //\\r\\n        // The ideal value is `numerator * target / denominator`.\\r\\n        // Let's call `numerator * target % denominator` the remainder.\\r\\n        // The absolute error is `remainder / denominator`.\\r\\n        //\\r\\n        // When the ideal value is zero, we require the absolute error to\\r\\n        // be zero. Fortunately, this is always the case. The ideal value is\\r\\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\\r\\n        // remainder and absolute error are also zero.\\r\\n        if (target == 0 || numerator == 0) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        // Otherwise, we want the relative rounding error to be strictly\\r\\n        // less than 0.1%.\\r\\n        // The relative error is `remainder / (numerator * target)`.\\r\\n        // We want the relative error less than 1 / 1000:\\r\\n        //        remainder / (numerator * target)  <  1 / 1000\\r\\n        // or equivalently:\\r\\n        //        1000 * remainder  <  numerator * target\\r\\n        // so we have a rounding error iff:\\r\\n        //        1000 * remainder  >=  numerator * target\\r\\n        uint256 remainder = mulmod(\\r\\n            target,\\r\\n            numerator,\\r\\n            denominator\\r\\n        );\\r\\n        isError = remainder.mul(1000) >= numerator.mul(target);\\r\\n    }\\r\\n\\r\\n    function safeGetPartialAmountCeil(\\r\\n        uint256 numerator,\\r\\n        uint256 denominator,\\r\\n        uint256 target\\r\\n    ) internal pure returns (uint256 partialAmount) {\\r\\n        if (isRoundingErrorCeil(numerator, denominator, target)) {\\r\\n            revert(\\\"rounding error\\\");\\r\\n        }\\r\\n        partialAmount = numerator.mul(target).add(denominator.sub(1)).div(denominator);\\r\\n    }\\r\\n\\r\\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\\r\\n    /// @param numerator Numerator.\\r\\n    /// @param denominator Denominator.\\r\\n    /// @param target Value to multiply with numerator/denominator.\\r\\n    /// @return isError Rounding error is present.\\r\\n    function isRoundingErrorCeil(\\r\\n        uint256 numerator,\\r\\n        uint256 denominator,\\r\\n        uint256 target\\r\\n    ) internal pure returns (bool isError) {\\r\\n        if (denominator == 0) {\\r\\n            revert(\\\"division by zero\\\");\\r\\n        }\\r\\n\\r\\n        // See the comments in `isRoundingError`.\\r\\n        if (target == 0 || numerator == 0) {\\r\\n            // When either is zero, the ideal value and rounded value are zero\\r\\n            // and there is no rounding error. (Although the relative error\\r\\n            // is undefined.)\\r\\n            return false;\\r\\n        }\\r\\n        // Compute remainder as before\\r\\n        uint256 remainder = mulmod(\\r\\n            target,\\r\\n            numerator,\\r\\n            denominator\\r\\n        );\\r\\n        remainder = denominator.sub(remainder) % denominator;\\r\\n        isError = remainder.mul(1000) >= numerator.mul(target);\\r\\n        return isError;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/D/ProjectWork/SolidityProject/DmitX-nft-marketplace-contracts-dev/exchange-v2/contracts/lib/LibTransfer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nlibrary LibTransfer {\\r\\n    function transferEth(address to, uint value) internal {\\r\\n        (bool success,) = to.call{ value: value }(\\\"\\\");\\r\\n        require(success, \\\"transfer failed\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                typeHash,\\n                name,\\n                version,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@rarible/exchange-interfaces/contracts/IERC20TransferProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IERC20TransferProxy {\\n    function erc20safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) external;\\n}\\n\"\r\n    },\r\n    \"@rarible/exchange-interfaces/contracts/INftTransferProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface INftTransferProxy {\\n    function erc721safeTransferFrom(IERC721Upgradeable token, address from, address to, uint256 tokenId) external;\\n\\n    function erc1155safeTransferFrom(IERC1155Upgradeable token, address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@rarible/exchange-interfaces/contracts/ITransferProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@rarible/lib-asset/contracts/LibAsset.sol\\\";\\n\\ninterface ITransferProxy {\\n    function transfer(LibAsset.Asset calldata asset, address from, address to) external;\\n}\\n\"\r\n    },\r\n    \"@rarible/lib-asset/contracts/LibAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.9 <0.8.0;\\n\\nlibrary LibAsset {\\n    bytes4 constant public ETH_ASSET_CLASS = bytes4(keccak256(\\\"ETH\\\"));\\n    bytes4 constant public ERC20_ASSET_CLASS = bytes4(keccak256(\\\"ERC20\\\"));\\n    bytes4 constant public ERC721_ASSET_CLASS = bytes4(keccak256(\\\"ERC721\\\"));\\n    bytes4 constant public ERC1155_ASSET_CLASS = bytes4(keccak256(\\\"ERC1155\\\"));\\n\\n    bytes32 constant ASSET_TYPE_TYPEHASH = keccak256(\\n        \\\"AssetType(bytes4 assetClass,bytes data)\\\"\\n    );\\n\\n    bytes32 constant ASSET_TYPEHASH = keccak256(\\n        \\\"Asset(AssetType assetType,uint256 value)AssetType(bytes4 assetClass,bytes data)\\\"\\n    );\\n\\n    struct AssetType {\\n        bytes4 assetClass;\\n        bytes data;\\n    }\\n\\n    struct Asset {\\n        AssetType assetType;\\n        uint value;\\n    }\\n\\n    function hash(AssetType memory assetType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                ASSET_TYPE_TYPEHASH,\\n                assetType.assetClass,\\n                keccak256(assetType.data)\\n            ));\\n    }\\n\\n    function hash(Asset memory asset) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                ASSET_TYPEHASH,\\n                hash(asset.assetType),\\n                asset.value\\n            ));\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@rarible/royalties/contracts/IRoyaltiesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./LibPart.sol\\\";\\n\\ninterface IRoyaltiesProvider {\\n    function getRoyalties(address token, uint tokenId) external returns (LibPart.Part[] memory);\\n}\\n\"\r\n    },\r\n    \"@rarible/royalties/contracts/LibPart.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nlibrary LibPart {\\n    bytes32 public constant TYPE_HASH = keccak256(\\\"Part(address account,uint96 value)\\\");\\n\\n    struct Part {\\n        address payable account;\\n        uint96 value;\\n    }\\n\\n    function hash(Part memory part) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, part.account, part.value));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"makeAssetType\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"takeAssetType\",\"type\":\"tuple\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"leftHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rightHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"leftMaker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rightMaker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLeftFill\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRightFill\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"leftAsset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"rightAsset\",\"type\":\"tuple\"}],\"name\":\"Match\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"assetType\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"matcher\",\"type\":\"address\"}],\"name\":\"MatcherChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"assetType\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"ProxyChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct LibAsset.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"transferDirection\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"transferType\",\"type\":\"bytes4\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract INftTransferProxy\",\"name\":\"_transferProxy\",\"type\":\"address\"},{\"internalType\":\"contract IERC20TransferProxy\",\"name\":\"_erc20TransferProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newProtocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newDefaultFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"newRoyaltiesProvider\",\"type\":\"address\"}],\"name\":\"__ExchangeV2_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"dataType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeReceivers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"fills\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"dataType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderLeft\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signatureLeft\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"makeAsset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"assetClass\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibAsset.AssetType\",\"name\":\"assetType\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct LibAsset.Asset\",\"name\":\"takeAsset\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"dataType\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct LibOrder.Order\",\"name\":\"orderRight\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signatureRight\",\"type\":\"bytes\"}],\"name\":\"matchOrders\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesRegistry\",\"outputs\":[{\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"assetType\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"matcher\",\"type\":\"address\"}],\"name\":\"setAssetMatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newDefaultFeeReceiver\",\"type\":\"address\"}],\"name\":\"setDefaultFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newProtocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoyaltiesProvider\",\"name\":\"newRoyaltiesRegistry\",\"type\":\"address\"}],\"name\":\"setRoyaltiesRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"assetType\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"setTransferProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ExchangeV2","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}