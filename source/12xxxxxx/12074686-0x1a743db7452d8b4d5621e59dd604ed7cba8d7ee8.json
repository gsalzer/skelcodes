{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.5.5;\r\n/*Math operations with safety checks */\r\ncontract SafeMath { \r\n  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;  \r\n    }\r\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {  \r\n    return a/b;  \r\n    }\r\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;  \r\n    }\r\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c>=a && c>=b);\r\n    return c;  \r\n    }  \r\n  function safePower(uint a, uint b) internal pure returns (uint256) {\r\n      uint256 c = a**b;\r\n      return c;  \r\n    }\r\n}\r\n\r\ninterface IToken {\r\n  function transfer(address _to, uint256 _value) external;\r\n}\r\n\r\ncontract ZebiToken is SafeMath{\r\n    string public name;    \r\n    string public symbol;    \r\n    uint8   public decimals;    \r\n    uint256 public totalSupply;  \r\n    address payable public owner;\r\n    uint256 public totalSupplyLimit;\r\n    bool    public pauseMint;\r\n    address public minter;\r\n    address payable public ownerTemp;\r\n    uint256 blocknumberLastAcceptOwner;\r\n    uint256 blocknumberLastAcceptMinter;\r\n    address public minterTemp;\r\n    \r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => bool) public blacklist;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);  \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);  \r\n    event SetPauseMint(bool pause);\r\n    event SetOwner(address user);\r\n    event SetTotalSupplyLimit(uint amount);\r\n    event SetMinter(address minter);\r\n    event SetBlacklist(address user,bool isBlacklist);\r\n    event AcceptOwner(address user);\r\n    event AcceptMinter(address user);\r\n    \r\n    constructor (/* Initializes contract with initial supply tokens to the creator of the contract */\r\n        uint256 initialSupply,string memory tokenName,string memory tokenSymbol) public{\r\n        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\r\n        totalSupply = initialSupply;                        // Update total supply\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n        decimals = 18;                                      // Amount of decimals for display purposes\r\n        owner = msg.sender;\r\n        totalSupplyLimit = 21000000 * (10 ** uint256(decimals));           \r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public  returns (bool success){/* Send coins */\r\n        require (_to != address(0x0) && !blacklist[msg.sender]);    // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (_value >= 0) ;                                                                 \r\n        require (balanceOf[msg.sender] >= _value) ;           // Check if the sender has enough\r\n        require (safeAdd(balanceOf[_to] , _value) >= balanceOf[_to]) ; // Check for overflows\r\n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value); // Subtract from the sender\r\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);               // Add the same to the recipient\r\n        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {/* Allow another contract to spend some tokens in your behalf */\r\n        allowance[msg.sender][_spender] = _value;   \r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;    \r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {/* A contract attempts to get the coins */\r\n        require (_to != address(0x0) && !blacklist[_from]) ;                                // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (_value >= 0) ;                                                 \r\n        require (balanceOf[_from] >= _value) ;                 // Check if the sender has enough\r\n        require (safeAdd(balanceOf[_to] , _value) >= balanceOf[_to]) ;  // Check for overflows\r\n        require (_value <= allowance[_from][msg.sender]) ;     // Check allowance\r\n        balanceOf[_from] = safeSub(balanceOf[_from], _value);                           // Subtract from the sender\r\n        balanceOf[_to] = safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient\r\n        allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender], _value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true; \r\n      }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require (balanceOf[msg.sender] >= _value) ;            // Check if the sender has enough\r\n        require (_value > 0) ; \r\n        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);            // Subtract from the sender\r\n        totalSupply = safeSub(totalSupply,_value);                                // Updates totalSupply\r\n        emit Burn(msg.sender, _value);          \r\n        emit Transfer(msg.sender, address(0), _value);\r\n        return true;\r\n    } \r\n    \r\n    function mintToken(uint256 _mintedAmount) public returns (bool success) {\r\n        require(msg.sender == minter && !pauseMint && safeAdd(totalSupply,_mintedAmount) <= totalSupplyLimit);\r\n        balanceOf[msg.sender] = safeAdd(balanceOf[msg.sender],_mintedAmount);\r\n        totalSupply = safeAdd(totalSupply,_mintedAmount);\r\n        emit Transfer(address(0x0), msg.sender, _mintedAmount);\r\n        return true;\r\n    }  \r\n\r\n    function setPauseMint(bool _pause) public{   \r\n        require (msg.sender == owner) ; \r\n        pauseMint = _pause;\r\n        emit SetPauseMint(_pause);\r\n    } \r\n    \r\n    function setMinter(address _minter) public{   \r\n        require (msg.sender == owner) ; \r\n        minterTemp = _minter;\r\n        blocknumberLastAcceptMinter = block.number + 42000;\r\n        emit SetMinter(_minter);\r\n    } \r\n    \r\n    function acceptMinter() public{   \r\n        require (msg.sender == owner  && block.number < blocknumberLastAcceptMinter && block.number > blocknumberLastAcceptMinter - 36000) ; \r\n        minter = minterTemp;\r\n        emit AcceptMinter(minterTemp);\r\n    } \r\n    \r\n    function setBlacklist(address _user,bool _isBlacklist) public{   \r\n        require (msg.sender == owner) ; \r\n        blacklist[_user] = _isBlacklist;\r\n        emit SetBlacklist(_user,_isBlacklist);\r\n    } \r\n\r\n    function setOwner(address payable _add) public{\r\n        require (msg.sender == owner && _add != address(0x0)) ;\r\n        ownerTemp = _add ;   \r\n        blocknumberLastAcceptOwner = block.number + 42000;\r\n        emit SetOwner(_add);\r\n    }\r\n    \r\n    function acceptOwner()public{\r\n        require (msg.sender == ownerTemp && block.number < blocknumberLastAcceptOwner && block.number > blocknumberLastAcceptOwner - 36000) ;\r\n        owner = ownerTemp ;\r\n        emit AcceptOwner(owner);\r\n    }\r\n\r\n    function setTotalSupplyLimit(uint _amount) public{\r\n        require (msg.sender == owner && _amount > 0) ;\r\n        totalSupplyLimit = _amount ;  \r\n        emit SetTotalSupplyLimit(_amount);  \r\n    }\r\n    \r\n    function() external payable  {}/* can accept ether */\r\n    \r\n    // transfer balance to owner\r\n    function withdrawToken(address token, uint amount) public{\r\n      require(msg.sender == owner);\r\n      if (token == address(0x0)) \r\n        owner.transfer(amount); \r\n      else \r\n        IToken(token).transfer(owner, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AcceptMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AcceptOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBlacklist\",\"type\":\"bool\"}],\"name\":\"SetBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"SetMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"SetOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"SetPauseMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetTotalSupplyLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minterTemp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerTemp\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pauseMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isBlacklist\",\"type\":\"bool\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"setPauseMint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTotalSupplyLimit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupplyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ZebiToken","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000045a4542490000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045a45424900000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://365d2da12a571ce76f14514d6e603c8844236f8efe04e3479fa58e6a4bb12652"}]}