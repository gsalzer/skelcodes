{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.12\r\n\r\n\"\"\"\r\n@title Unagii Token\r\n@author stakewith.us\r\n@license AGPL-3.0-or-later\r\n\"\"\"\r\n\r\nVERSION: constant(String[28]) = \"0.1.0\"\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\nimplements: ERC20\r\n\r\n\r\ninterface DetailedERC20:\r\n    def name() -> String[42]: view\r\n    def symbol() -> String[20]: view\r\n    # Vyper does not support uint8\r\n    def decimals() -> uint256: view\r\n\r\n\r\nevent Transfer:\r\n    sender: indexed(address)\r\n    receiver: indexed(address)\r\n    value: uint256\r\n\r\n\r\nevent Approval:\r\n    owner: indexed(address)\r\n    spender: indexed(address)\r\n    value: uint256\r\n\r\n\r\nevent SetNextTimeLock:\r\n    timeLock: address\r\n\r\n\r\nevent AcceptTimeLock:\r\n    timeLock: address\r\n\r\n\r\nevent SetMinter:\r\n    minter: address\r\n\r\n\r\nname: public(String[64])\r\nsymbol: public(String[32])\r\n# Vyper does not support uint8\r\ndecimals: public(uint256)\r\nbalanceOf: public(HashMap[address, uint256])\r\nallowance: public(HashMap[address, HashMap[address, uint256]])\r\ntotalSupply: public(uint256)\r\n\r\n# EIP 2612 #\r\n# https://eips.ethereum.org/EIPS/eip-2612\r\n# `nonces` track `permit` approvals with signature.\r\nnonces: public(HashMap[address, uint256])\r\nDOMAIN_SEPARATOR: public(bytes32)\r\nDOMAIN_TYPE_HASH: constant(bytes32) = keccak256(\r\n    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n)\r\nPERMIT_TYPE_HASH: constant(bytes32) = keccak256(\r\n    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\r\n)\r\n\r\ntimeLock: public(address)\r\nnextTimeLock: public(address)\r\nminter: public(address)\r\ntoken: public(ERC20)\r\n# placeholder address used when token ETH\r\nETH: constant(address) = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\r\n# last block number balance of msg.sender was changed (mint, burn, transfer, transferFrom)\r\nlastBlock: public(HashMap[address, uint256])\r\n\r\n\r\n@external\r\ndef __init__(token: address):\r\n    self.timeLock = msg.sender\r\n    self.token = ERC20(token)\r\n\r\n    if token == ETH:\r\n        self.name = \"unagii_ETH_v2\"\r\n        self.symbol = \"uETHv2\"\r\n        self.decimals = 18\r\n    else:\r\n        self.name = concat(\"unagii_\", DetailedERC20(token).name(), \"_v2\")\r\n        self.symbol = concat(\"u\", DetailedERC20(token).symbol(), \"v2\")\r\n        self.decimals = DetailedERC20(token).decimals()\r\n\r\n    self.DOMAIN_SEPARATOR = keccak256(\r\n        concat(\r\n            DOMAIN_TYPE_HASH,\r\n            keccak256(convert(\"unagii\", Bytes[6])),\r\n            keccak256(convert(VERSION, Bytes[28])),\r\n            convert(chain.id, bytes32),\r\n            convert(self, bytes32),\r\n        )\r\n    )\r\n\r\n\r\n@external\r\ndef setName(name: String[42]):\r\n    assert msg.sender == self.timeLock, \"!time lock\"\r\n    self.name = name\r\n\r\n\r\n@external\r\ndef setSymbol(symbol: String[20]):\r\n    assert msg.sender == self.timeLock, \"!time lock\"\r\n    self.symbol = symbol\r\n\r\n\r\n@external\r\ndef setNextTimeLock(nextTimeLock: address):\r\n    \"\"\"\r\n    @notice Set next time lock\r\n    @param nextTimeLock Address of next time lock\r\n    \"\"\"\r\n    assert msg.sender == self.timeLock, \"!time lock\"\r\n    # allow next time lock = zero address (cancel next time lock)\r\n    self.nextTimeLock = nextTimeLock\r\n    log SetNextTimeLock(nextTimeLock)\r\n\r\n\r\n@external\r\ndef acceptTimeLock():\r\n    \"\"\"\r\n    @notice Accept time lock\r\n    @dev Only `nextTimeLock` can claim time lock\r\n    \"\"\"\r\n    assert msg.sender == self.nextTimeLock, \"!next time lock\"\r\n    self.timeLock = msg.sender\r\n    log AcceptTimeLock(msg.sender)\r\n\r\n\r\n@external\r\ndef setMinter(minter: address):\r\n    \"\"\"\r\n    @notice Set minter\r\n    @param minter Address of minter\r\n    \"\"\"\r\n    assert msg.sender == self.timeLock, \"!time lock\"\r\n    # allow minter = zero address\r\n    self.minter = minter\r\n    log SetMinter(minter)\r\n\r\n\r\n@internal\r\ndef _transfer(_from: address, _to: address, amount: uint256):\r\n    assert _to not in [self, ZERO_ADDRESS], \"invalid receiver\"\r\n\r\n    # track lastest tx\r\n    self.lastBlock[_from] = block.number\r\n    self.lastBlock[_to] = block.number\r\n\r\n    self.balanceOf[_from] -= amount\r\n    self.balanceOf[_to] += amount\r\n    log Transfer(_from, _to, amount)\r\n\r\n\r\n@external\r\ndef transfer(_to: address, amount: uint256) -> bool:\r\n    self._transfer(msg.sender, _to, amount)\r\n    return True\r\n\r\n\r\n@external\r\ndef transferFrom(_from: address, _to: address, amount: uint256) -> bool:\r\n    # skip if unlimited approval\r\n    if self.allowance[_from][msg.sender] < MAX_UINT256:\r\n        self.allowance[_from][msg.sender] -= amount\r\n        log Approval(_from, msg.sender, self.allowance[_from][msg.sender])\r\n    self._transfer(_from, _to, amount)\r\n    return True\r\n\r\n\r\n@external\r\ndef approve(spender: address, amount: uint256) -> bool:\r\n    self.allowance[msg.sender][spender] = amount\r\n    log Approval(msg.sender, spender, amount)\r\n    return True\r\n\r\n\r\n@external\r\ndef increaseAllowance(spender: address, amount: uint256) -> bool:\r\n    self.allowance[msg.sender][spender] += amount\r\n    log Approval(msg.sender, spender, self.allowance[msg.sender][spender])\r\n    return True\r\n\r\n\r\n@external\r\ndef decreaseAllowance(spender: address, amount: uint256) -> bool:\r\n    self.allowance[msg.sender][spender] -= amount\r\n    log Approval(msg.sender, spender, self.allowance[msg.sender][spender])\r\n    return True\r\n\r\n\r\n@external\r\ndef permit(\r\n    owner: address,\r\n    spender: address,\r\n    amount: uint256,\r\n    deadline: uint256,\r\n    v: uint256,\r\n    r: bytes32,\r\n    s: bytes32,\r\n):\r\n    \"\"\"\r\n    @notice Approves spender by owner's signature to expend owner's tokens.\r\n            https://eips.ethereum.org/EIPS/eip-2612\r\n    @dev Vyper does not have `uint8`, so replace `v: uint8` with `v: uint256`\r\n    \"\"\"\r\n    assert owner != ZERO_ADDRESS, \"owner = 0 address\"\r\n    assert deadline >= block.timestamp, \"expired\"\r\n\r\n    digest: bytes32 = keccak256(\r\n        concat(\r\n            b\"\\x19\\x01\",\r\n            self.DOMAIN_SEPARATOR,\r\n            keccak256(\r\n                concat(\r\n                    PERMIT_TYPE_HASH,\r\n                    convert(owner, bytes32),\r\n                    convert(spender, bytes32),\r\n                    convert(amount, bytes32),\r\n                    convert(self.nonces[owner], bytes32),\r\n                    convert(deadline, bytes32),\r\n                )\r\n            ),\r\n        )\r\n    )\r\n\r\n    _r: uint256 = convert(r, uint256)\r\n    _s: uint256 = convert(s, uint256)\r\n    assert ecrecover(digest, v, _r, _s) == owner, \"invalid signature\"\r\n\r\n    self.nonces[owner] += 1\r\n    self.allowance[owner][spender] = amount\r\n    log Approval(owner, spender, amount)\r\n\r\n\r\n@external\r\ndef mint(_to: address, amount: uint256):\r\n    assert msg.sender == self.minter, \"!minter\"\r\n    assert _to not in [self, ZERO_ADDRESS], \"invalid receiver\"\r\n\r\n    # track lastest tx\r\n    self.lastBlock[_to] = block.number\r\n\r\n    self.totalSupply += amount\r\n    self.balanceOf[_to] += amount\r\n    log Transfer(ZERO_ADDRESS, _to, amount)\r\n\r\n\r\n@external\r\ndef burn(_from: address, amount: uint256):\r\n    assert msg.sender == self.minter, \"!minter\"\r\n    assert _from != ZERO_ADDRESS, \"from = 0\"\r\n\r\n    # track lastest tx\r\n    self.lastBlock[_from] = block.number\r\n\r\n    self.totalSupply -= amount\r\n    self.balanceOf[_from] -= amount\r\n    log Transfer(_from, ZERO_ADDRESS, amount)","ABI":"[{\"name\":\"Transfer\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetNextTimeLock\",\"inputs\":[{\"name\":\"timeLock\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AcceptTimeLock\",\"inputs\":[{\"name\":\"timeLock\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetMinter\",\"inputs\":[{\"name\":\"minter\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setName\",\"inputs\":[{\"name\":\"name\",\"type\":\"string\"}],\"outputs\":[],\"gas\":108313},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setSymbol\",\"inputs\":[{\"name\":\"symbol\",\"type\":\"string\"}],\"outputs\":[],\"gas\":73163},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setNextTimeLock\",\"inputs\":[{\"name\":\"nextTimeLock\",\"type\":\"address\"}],\"outputs\":[],\"gas\":38981},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"acceptTimeLock\",\"inputs\":[],\"outputs\":[],\"gas\":38903},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setMinter\",\"inputs\":[{\"name\":\"minter\",\"type\":\"address\"}],\"outputs\":[],\"gas\":39041},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":149013},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":193476},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":37941},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"increaseAllowance\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":42582},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"decreaseAllowance\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":42606},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"permit\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"deadline\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint256\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"outputs\":[],\"gas\":85478},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"mint\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":115368},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"burn\",\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[],\"gas\":114962},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"gas\":13080},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"gas\":10833},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2838},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3083},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3328},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2928},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"nonces\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3173},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"DOMAIN_SEPARATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"gas\":2988},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"timeLock\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3018},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"nextTimeLock\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3048},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"minter\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3078},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"token\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":3108},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lastBlock\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3353}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.12","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":""}]}