{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: LGPL-3.0-or-later\r\npragma abicoder v2;\r\npragma solidity ^0.8.6;\r\n\r\ncontract MultiCallV1 {\r\n  function executeCall(address target, string calldata signature, bytes calldata data) external returns (bytes memory) {\r\n    bytes memory callData;\r\n\r\n    if (bytes(signature).length == 0) {\r\n        callData = data;\r\n    } else {\r\n        callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\r\n    }\r\n\r\n    // solium-disable-next-line security/no-call-value\r\n    (bool success, bytes memory returnData) = target.call(data);\r\n    \r\n    if (success) {   \r\n        return returnData;\r\n    }\r\n    \r\n    return \"\";\r\n  }\r\n\r\n  function executeCallsOfMultiTargets(address[] calldata targets, string calldata signature, bytes calldata data) external returns (bytes[] memory returnDatas) {\r\n    returnDatas = new bytes[](targets.length);\r\n    \r\n    for(uint i = 0; i < targets.length; i++) {\r\n      try this.executeCall(targets[i], signature, data) returns (bytes memory returnData) {\r\n        returnDatas[i] = returnData;\r\n      } catch {}\r\n    }\r\n    return returnDatas;\r\n  }\r\n\r\n  function executeMultiCallsOfTarget(address target, string[] calldata signatures, bytes[] calldata datas) external returns (bytes[] memory returnDatas) {\r\n    returnDatas = new bytes[](signatures.length);\r\n    \r\n    for(uint i = 0; i < signatures.length; i++) {\r\n      try this.executeCall(target, signatures[i], datas[i]) returns (bytes memory returnData) {\r\n        returnDatas[i] = returnData;\r\n      } catch {}\r\n    }\r\n    return returnDatas;\r\n  }\r\n\r\n  function executeMultiCallsOfMultiTarget(address[] calldata targets, string[] calldata signatures, bytes[] calldata datas) external returns (bytes[] memory returnDatas) {\r\n    returnDatas = new bytes[](targets.length);\r\n    \r\n    for(uint i = 0; i < targets.length; i++) {\r\n      try this.executeCall(targets[i], signatures[i], datas[i]) returns (bytes memory returnData) {\r\n        returnDatas[i] = returnData;\r\n      } catch {}\r\n    }\r\n    return returnDatas;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeCallsOfMultiTargets\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnDatas\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"executeMultiCallsOfMultiTarget\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnDatas\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"executeMultiCallsOfTarget\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returnDatas\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MultiCallV1","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8fba004cf6e5a09d97d4f7fb80b82609932aacae711916a6a78471adf674ae9d"}]}