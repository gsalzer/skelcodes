{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/Globals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nuint256 constant SECONDS_IN_THE_YEAR = 365 * 24 * 60 * 60; // 365 days * 24 hours * 60 minutes * 60 seconds\\nuint256 constant MAX_INT = type(uint256).max;\\n\\nuint256 constant DECIMALS = 10**18;\\n\\nuint256 constant PRECISION = 10**25;\\nuint256 constant PERCENTAGE_100 = 100 * PRECISION;\\n\\nuint256 constant BLOCKS_PER_DAY = 6450;\\nuint256 constant BLOCKS_PER_YEAR = BLOCKS_PER_DAY * 365;\\n\\nuint256 constant APY_TOKENS = DECIMALS;\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/ReputationSystem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\n\\nimport \\\"./interfaces/IReputationSystem.sol\\\";\\nimport \\\"./interfaces/IContractsRegistry.sol\\\";\\n\\nimport \\\"./abstract/AbstractDependant.sol\\\";\\n\\nimport \\\"./Globals.sol\\\";\\n\\ncontract ReputationSystem is IReputationSystem, Initializable, AbstractDependant {\\n    using SafeMath for uint256;\\n    using Math for uint256;\\n\\n    uint8 internal constant REPUTATION_PRECISION = 31; // should not be changed\\n\\n    uint256 public constant MAXIMUM_REPUTATION = 3 * PRECISION; // 3\\n    uint256 public constant MINIMUM_REPUTATION = PRECISION / 10; // 0.1\\n\\n    uint256 public constant PERCENTAGE_OF_TRUSTED_VOTERS = 15 * PRECISION;\\n    uint256 public constant LEAST_TRUSTED_VOTER_REPUTATION = 20; // 2.0\\n    uint256 public constant MINIMUM_TRUSTED_VOTERS = 5;\\n\\n    address public claimVoting;\\n\\n    uint256 internal _trustedVoterReputationThreshold; // 2.0\\n\\n    uint256[] internal _roundedReputations; // 0.1 is 1, 3 is 30, 0 is empty\\n\\n    uint256 internal _votedOnceCount;\\n\\n    mapping(address => uint256) internal _reputation; // user -> reputation (0.1 * PRECISION to 3.0 * PRECISION)\\n\\n    event ReputationSet(address user, uint256 newReputation);\\n\\n    modifier onlyClaimVoting() {\\n        require(\\n            claimVoting == msg.sender,\\n            \\\"ReputationSystem: Caller is not a ClaimVoting contract\\\"\\n        );\\n        _;\\n    }\\n\\n    function __ReputationSystem_init(address[] calldata team) external initializer {\\n        _trustedVoterReputationThreshold = 20;\\n        _roundedReputations = new uint256[](REPUTATION_PRECISION);\\n\\n        _initTeamReputation(team);\\n    }\\n\\n    function _initTeamReputation(address[] memory team) internal {\\n        for (uint8 i = 0; i < team.length; i++) {\\n            _setNewReputation(team[i], MAXIMUM_REPUTATION);\\n        }\\n\\n        _recalculateTrustedVoterReputationThreshold();\\n    }\\n\\n    function setDependencies(IContractsRegistry _contractsRegistry)\\n        external\\n        override\\n        onlyInjectorOrZero\\n    {\\n        claimVoting = _contractsRegistry.getClaimVotingContract();\\n    }\\n\\n    function setNewReputation(address voter, uint256 newReputation)\\n        external\\n        override\\n        onlyClaimVoting\\n    {\\n        _setNewReputation(voter, newReputation);\\n        _recalculateTrustedVoterReputationThreshold();\\n    }\\n\\n    function _setNewReputation(address voter, uint256 newReputation) internal {\\n        require(newReputation >= PRECISION.div(10), \\\"ReputationSystem: reputation too low\\\");\\n        require(newReputation <= PRECISION.mul(3), \\\"ReputationSystem: reputation too high\\\");\\n\\n        uint256 voterReputation = _reputation[voter];\\n\\n        if (voterReputation == 0) {\\n            _votedOnceCount++;\\n            voterReputation = PRECISION;\\n        }\\n\\n        uint256 flooredOldReputation = voterReputation.mul(10).div(PRECISION);\\n\\n        _reputation[voter] = newReputation;\\n\\n        uint256 flooredNewReputation = newReputation.mul(10).div(PRECISION);\\n\\n        emit ReputationSet(voter, newReputation);\\n\\n        if (flooredOldReputation == flooredNewReputation) {\\n            return;\\n        }\\n\\n        if (_roundedReputations[flooredOldReputation] > 0) {\\n            _roundedReputations[flooredOldReputation]--;\\n        }\\n\\n        _roundedReputations[flooredNewReputation]++;\\n    }\\n\\n    function _recalculateTrustedVoterReputationThreshold() internal {\\n        uint256 trustedVotersAmount =\\n            Math.max(\\n                MINIMUM_TRUSTED_VOTERS,\\n                _votedOnceCount.mul(PERCENTAGE_OF_TRUSTED_VOTERS).div(PERCENTAGE_100)\\n            );\\n        uint256 votersAmount;\\n\\n        for (uint8 i = REPUTATION_PRECISION - 1; i >= LEAST_TRUSTED_VOTER_REPUTATION; i--) {\\n            uint256 roundedReputationVoters = _roundedReputations[i];\\n            votersAmount = votersAmount.add(roundedReputationVoters);\\n\\n            if (votersAmount >= trustedVotersAmount) {\\n                if (\\n                    votersAmount >= trustedVotersAmount.mul(3).div(2) &&\\n                    votersAmount > roundedReputationVoters\\n                ) {\\n                    i++;\\n                }\\n\\n                _trustedVoterReputationThreshold = i;\\n                break;\\n            }\\n\\n            if (i == LEAST_TRUSTED_VOTER_REPUTATION) {\\n                _trustedVoterReputationThreshold = LEAST_TRUSTED_VOTER_REPUTATION;\\n            }\\n        }\\n    }\\n\\n    function getNewReputation(address voter, uint256 percentageWithPrecision)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 reputationVoter = _reputation[voter];\\n\\n        return\\n            getNewReputation(\\n                reputationVoter == 0 ? PRECISION : reputationVoter,\\n                percentageWithPrecision\\n            );\\n    }\\n\\n    function getNewReputation(uint256 voterReputation, uint256 percentageWithPrecision)\\n        public\\n        pure\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            percentageWithPrecision <= PERCENTAGE_100,\\n            \\\"ReputationSystem: Percentage can't be more than 100%\\\"\\n        );\\n        require(voterReputation >= PRECISION.div(10), \\\"ReputationSystem: reputation too low\\\");\\n        require(voterReputation <= PRECISION.mul(3), \\\"ReputationSystem: reputation too high\\\");\\n\\n        if (percentageWithPrecision >= PRECISION.mul(50)) {\\n            return\\n                Math.min(\\n                    MAXIMUM_REPUTATION,\\n                    voterReputation.add(percentageWithPrecision.div(100).div(20))\\n                );\\n        } else {\\n            uint256 squared = PERCENTAGE_100.sub(percentageWithPrecision.mul(2));\\n            uint256 fraction = squared.mul(squared).div(2).div(PERCENTAGE_100).div(100);\\n\\n            return\\n                fraction < voterReputation\\n                    ? Math.max(MINIMUM_REPUTATION, voterReputation.sub(fraction))\\n                    : MINIMUM_REPUTATION;\\n        }\\n    }\\n\\n    function hasVotedOnce(address user) external view override returns (bool) {\\n        return _reputation[user] > 0;\\n    }\\n\\n    /// @dev this function will count voters as trusted that have initial reputation >= 2.0\\n    /// regardless of how many times have they voted\\n    function isTrustedVoter(address user) external view override returns (bool) {\\n        return _reputation[user] >= _trustedVoterReputationThreshold.mul(PRECISION).div(10);\\n    }\\n\\n    /// @notice this function returns reputation threshold multiplied by 10**25\\n    function getTrustedVoterReputationThreshold() external view override returns (uint256) {\\n        return _trustedVoterReputationThreshold.mul(PRECISION).div(10);\\n    }\\n\\n    /// @notice this function returns reputation multiplied by 10**25\\n    function reputation(address user) external view override returns (uint256) {\\n        return _reputation[user] == 0 ? PRECISION : _reputation[user];\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/abstract/AbstractDependant.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\nimport \\\"../interfaces/IContractsRegistry.sol\\\";\\n\\nabstract contract AbstractDependant {\\n    /// @dev keccak256(AbstractDependant.setInjector(address)) - 1\\n    bytes32 private constant _INJECTOR_SLOT =\\n        0xd6b8f2e074594ceb05d47c27386969754b6ad0c15e5eb8f691399cd0be980e76;\\n\\n    modifier onlyInjectorOrZero() {\\n        address _injector = injector();\\n\\n        require(_injector == address(0) || _injector == msg.sender, \\\"Dependant: Not an injector\\\");\\n        _;\\n    }\\n\\n    function setInjector(address _injector) external onlyInjectorOrZero {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            sstore(slot, _injector)\\n        }\\n    }\\n\\n    /// @dev has to apply onlyInjectorOrZero() modifier\\n    function setDependencies(IContractsRegistry) external virtual;\\n\\n    function injector() public view returns (address _injector) {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            _injector := sload(slot)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/interfaces/IContractsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IContractsRegistry {\\n    function getUniswapRouterContract() external view returns (address);\\n\\n    function getUniswapBMIToETHPairContract() external view returns (address);\\n\\n    function getWETHContract() external view returns (address);\\n\\n    function getDAIContract() external view returns (address);\\n\\n    function getBMIContract() external view returns (address);\\n\\n    function getPriceFeedContract() external view returns (address);\\n\\n    function getPolicyBookRegistryContract() external view returns (address);\\n\\n    function getPolicyBookFabricContract() external view returns (address);\\n\\n    function getBMIDAIStakingContract() external view returns (address);\\n\\n    function getRewardsGeneratorContract() external view returns (address);\\n\\n    function getBMIUtilityNFTContract() external view returns (address);\\n\\n    function getLiquidityMiningContract() external view returns (address);\\n\\n    function getClaimingRegistryContract() external view returns (address);\\n\\n    function getPolicyRegistryContract() external view returns (address);\\n\\n    function getLiquidityRegistryContract() external view returns (address);\\n\\n    function getClaimVotingContract() external view returns (address);\\n\\n    function getReinsurancePoolContract() external view returns (address);\\n\\n    function getPolicyBookAdminContract() external view returns (address);\\n\\n    function getPolicyQuoteContract() external view returns (address);\\n\\n    function getLegacyBMIStakingContract() external view returns (address);\\n\\n    function getBMIStakingContract() external view returns (address);\\n\\n    function getSTKBMIContract() external view returns (address);\\n\\n    function getVBMIContract() external view returns (address);\\n\\n    function getLegacyLiquidityMiningStakingContract() external view returns (address);\\n\\n    function getLiquidityMiningStakingContract() external view returns (address);\\n\\n    function getReputationSystemContract() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/interfaces/IReputationSystem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IReputationSystem {\\n    /// @notice sets new reputation for the voter\\n    function setNewReputation(address voter, uint256 newReputation) external;\\n\\n    /// @notice returns voter's new reputation\\n    function getNewReputation(address voter, uint256 percentageWithPrecision)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice alternative way of knowing new reputation\\n    function getNewReputation(uint256 voterReputation, uint256 percentageWithPrecision)\\n        external\\n        pure\\n        returns (uint256);\\n\\n    /// @notice returns true if the user voted at least once\\n    function hasVotedOnce(address user) external view returns (bool);\\n\\n    /// @notice returns true if user's reputation is grater than or equal to trusted voter threshold\\n    function isTrustedVoter(address user) external view returns (bool);\\n\\n    /// @notice this function returns reputation threshold multiplied by 10**25\\n    function getTrustedVoterReputationThreshold() external view returns (uint256);\\n\\n    /// @notice this function returns reputation multiplied by 10**25\\n    function reputation(address user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReputation\",\"type\":\"uint256\"}],\"name\":\"ReputationSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LEAST_TRUSTED_VOTER_REPUTATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_REPUTATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_REPUTATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_TRUSTED_VOTERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_OF_TRUSTED_VOTERS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"team\",\"type\":\"address[]\"}],\"name\":\"__ReputationSystem_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimVoting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"voterReputation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentageWithPrecision\",\"type\":\"uint256\"}],\"name\":\"getNewReputation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentageWithPrecision\",\"type\":\"uint256\"}],\"name\":\"getNewReputation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedVoterReputationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasVotedOnce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"injector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isTrustedVoter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"reputation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IContractsRegistry\",\"name\":\"_contractsRegistry\",\"type\":\"address\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"name\":\"setInjector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newReputation\",\"type\":\"uint256\"}],\"name\":\"setNewReputation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ReputationSystem","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}