{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-04-27\r\n*/\r\n\r\n// Sources flattened with hardhat v2.2.0 https://hardhat.org\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.0.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/IQLF.sol\r\n\r\n\r\npragma solidity >= 0.8.0;\r\n\r\nabstract contract IQLF is IERC165 {\r\n    /**\r\n     * @dev Returns if the given address is qualified, implemented on demand.\r\n     */\r\n    function ifQualified (address account) virtual external view returns (bool);\r\n\r\n    /**\r\n     * @dev Logs if the given address is qualified, implemented on demand.\r\n     */\r\n    function logQualified (address account, uint256 ito_start_time) virtual external returns (bool);\r\n\r\n    /**\r\n     * @dev Ensure that custom contract implements `ifQualified` amd `logQualified` correctly.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) virtual external override pure returns (bool) {\r\n        return interfaceId == this.supportsInterface.selector ||\r\n        interfaceId == (this.ifQualified.selector ^ this.logQualified.selector);\r\n    }\r\n\r\n    /**\r\n     * @dev Emit when `ifQualified` is called to decide if the given `address`\r\n     * is `qualified` according to the preset rule by the contract creator and\r\n     * the current block `number` and the current block `timestamp`.\r\n     */\r\n    event Qualification(address account, bool qualified, uint256 blockNumber, uint256 timestamp);\r\n}\r\n\r\n\r\n// File contracts/qualification.sol\r\n//import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract EVA_QLF is IQLF, Ownable {\r\n    string private name;\r\n    uint256 private creation_time;\r\n    uint256 start_time;\r\n    mapping(address => bool) white_list;\r\n\r\n    constructor (string memory _name, uint256 _start_time) {\r\n        name = _name;\r\n        creation_time = block.timestamp;\r\n        start_time = _start_time;\r\n    }\r\n\r\n    function get_name() public view returns (string memory) {\r\n        return name;\r\n    }\r\n\r\n    function get_creation_time() public view returns (uint256) {\r\n        return creation_time;\r\n    }\r\n\r\n    function get_start_time() public view returns (uint256) {\r\n        return start_time;\r\n    }\r\n\r\n    function set_start_time(uint256 _start_time) public onlyOwner {\r\n        start_time = _start_time;\r\n    }\r\n\r\n    function add_address(address account) public onlyOwner returns(bool){\r\n        white_list[account] = true;\r\n        return true;\r\n    }\r\n\r\n    function del_address(address account) public onlyOwner returns(bool){\r\n        delete(white_list[account]);\r\n        return true;\r\n    }\r\n\r\n    function add_whitelist(address[] calldata addrs) external onlyOwner {\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            white_list[addrs[i]] = true;\r\n        }\r\n    }\r\n\r\n    function remove_whitelist(address[] calldata addrs) external onlyOwner {\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            delete white_list[addrs[i]];\r\n        }\r\n    }\r\n\r\n    function ifQualified(address addr) public view override returns (bool qualified) {\r\n        if(white_list[addr]){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function logQualified(address account, uint256 ito_start_time) public override returns (bool qualified) {\r\n        if (start_time > block.timestamp || ito_start_time > block.timestamp) {\r\n            emit Qualification(account, false, block.number, block.timestamp);\r\n            return false;\r\n        }\r\n\r\n        if (white_list[account]) {\r\n            emit Qualification(account, true, block.number, block.timestamp);\r\n            return true;\r\n        }\r\n        emit Qualification(account, false, block.number, block.timestamp);\r\n        return false;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) external override pure returns (bool) {\r\n        return interfaceId == this.supportsInterface.selector ||\r\n        interfaceId == (this.ifQualified.selector ^ this.logQualified.selector) ||\r\n        interfaceId == this.get_start_time.selector;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_start_time\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"qualified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Qualification\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"add_address\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"add_whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"del_address\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_creation_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_start_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ifQualified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"qualified\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ito_start_time\",\"type\":\"uint256\"}],\"name\":\"logQualified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"qualified\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"remove_whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start_time\",\"type\":\"uint256\"}],\"name\":\"set_start_time\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EVA_QLF","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000074556415f49544f00000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b09f5d16b027984e449f35a129552e964a9cabbbc4a994c4a84590f070cf55f1"}]}