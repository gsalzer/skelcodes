{"status":"1","message":"OK","result":[{"SourceCode":"// File: openzeppelin-solidity/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: opium-contracts/contracts/Interface/IOracleId.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n/// @title Opium.Interface.IOracleId contract is an interface that every oracleId should implement\r\ninterface IOracleId {\r\n    /// @notice Requests data from `oracleId` one time\r\n    /// @param timestamp uint256 Timestamp at which data are needed\r\n    function fetchData(uint256 timestamp) external payable;\r\n\r\n    /// @notice Requests data from `oracleId` multiple times\r\n    /// @param timestamp uint256 Timestamp at which data are needed for the first time\r\n    /// @param period uint256 Period in seconds between multiple timestamps\r\n    /// @param times uint256 How many timestamps are requested\r\n    function recursivelyFetchData(uint256 timestamp, uint256 period, uint256 times) external payable;\r\n\r\n    /// @notice Requests and returns price in ETH for one request. This function could be called as `view` function. Oraclize API for price calculations restricts making this function as view.\r\n    /// @return fetchPrice uint256 Price of one data request in ETH\r\n    function calculateFetchPrice() external returns (uint256 fetchPrice);\r\n\r\n    // Event with oracleId metadata JSON string (for DIB.ONE derivative explorer)\r\n    event MetadataSet(string metadata);\r\n}\r\n\r\n// File: contracts/oracles/dao/DaoOracleId.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\ninterface IOracleAggregator {\r\n  function __callback(uint256 timestamp, uint256 data) external;\r\n  function hasData(address oracleId, uint256 timestamp) external view returns(bool result);\r\n}\r\n\r\ncontract DaoOracleId is IOracleId, Ownable {\r\n  event Provided(uint256 indexed timestamp, uint256 result);\r\n\r\n  // Opium\r\n  IOracleAggregator public oracleAggregator;\r\n\r\n  // Cache\r\n  uint256 latestResult;\r\n  bool latestResultExist = false;\r\n\r\n  constructor(IOracleAggregator _oracleAggregator) public {\r\n    oracleAggregator = _oracleAggregator;\r\n\r\n    /*\r\n    {\r\n      \"author\": \"Opium.Team\",\r\n      \"description\": \"Opium DAO Oracle\",\r\n      \"asset\": \"any\",\r\n      \"type\": \"dao\",\r\n      \"source\": \"opiumteam\",\r\n      \"logic\": \"none\",\r\n      \"path\": \"none\"\r\n    }\r\n    */\r\n    emit MetadataSet(\"{\\\"author\\\":\\\"Opium.Team\\\",\\\"description\\\":\\\"Opium DAO Oracle\\\",\\\"asset\\\":\\\"any\\\",\\\"type\\\":\\\"dao\\\",\\\"source\\\":\\\"opiumteam\\\",\\\"logic\\\":\\\"none\\\",\\\"path\\\":\\\"none\\\"}\");\r\n  }\r\n\r\n  /** OPIUM */\r\n  function fetchData(uint256 _timestamp) external payable {\r\n    _timestamp;\r\n    revert(\"N.S\"); // N.S = not supported\r\n  }\r\n\r\n  function recursivelyFetchData(uint256 _timestamp, uint256 _period, uint256 _times) external payable {\r\n    _timestamp;\r\n    _period;\r\n    _times;\r\n    revert(\"N.S\"); // N.S = not supported\r\n  }\r\n\r\n  function calculateFetchPrice() external returns (uint256) {\r\n    return 0;\r\n  }\r\n  \r\n  function _callback(uint256 _timestamp, uint256 _result) public onlyOwner {\r\n    require(\r\n      !oracleAggregator.hasData(address(this), _timestamp) &&\r\n      _timestamp < now,\r\n      \"N.A\" // N.A = Only when no data and after timestamp allowed\r\n    );\r\n\r\n    oracleAggregator.__callback(_timestamp, _result);\r\n\r\n    // Cache latest result\r\n    latestResult = _result;\r\n    if (!latestResultExist) {\r\n      latestResultExist = true;\r\n    }\r\n\r\n    emit Provided(_timestamp, _result);\r\n  }\r\n\r\n  function getResult() public view returns (uint256) {\r\n    require(latestResultExist, \"N.R\"); // N.R = No result\r\n    return latestResult;\r\n  } \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IOracleAggregator\",\"name\":\"_oracleAggregator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"MetadataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"Provided\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_result\",\"type\":\"uint256\"}],\"name\":\"_callback\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"calculateFetchPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"fetchData\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracleAggregator\",\"outputs\":[{\"internalType\":\"contract IOracleAggregator\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_times\",\"type\":\"uint256\"}],\"name\":\"recursivelyFetchData\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DaoOracleId","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b69890912e40a7849fca058bb118cfe7d70932c4","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://53603ef023015fba3ab0c5d3f29d41a15f590ad508b75d6b699dbb404f712a63"}]}