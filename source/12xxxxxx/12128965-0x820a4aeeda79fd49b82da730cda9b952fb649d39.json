{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FreakerFortress.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"./EtherFreakers.sol\\\";\\nimport \\\"./FreakerAttack.sol\\\";\\n\\n\\ncontract FreakerFortress is ERC721, ERC721Holder {\\n\\n\\taddress public manager;\\n\\tuint128 public joinFeeWei = 1e17;\\n\\tuint128 public attackFeeWei = 5e17;\\n\\taddress public etherFreakersAddress;\\n\\taddress public attackContract;\\n\\tuint8 public maxRemoteAttackers = 4;\\n\\n\\tconstructor(address author, address _etherFreakersAddress) ERC721(\\\"FreakerFortress\\\", \\\"FEFKR\\\") {\\n        manager = author;\\n        etherFreakersAddress = _etherFreakersAddress;\\n    }\\n\\n    modifier ownerOrApproved(uint128 freakerID) { \\n    \\trequire(_isApprovedOrOwner(msg.sender, freakerID), \\\"FreakerFortress: caller is not owner nor approved\\\");\\n    \\t_; \\n    }\\n\\n    modifier managerOnly() { \\n    \\trequire(msg.sender == manager, \\\"FreakerFortress: caller is not owner nor approved\\\");\\n    \\t_; \\n    }\\n    \\n    function depositFreaker(address payable mintTo, uint128 freakerID) payable external {\\n        require(msg.value >= joinFeeWei, \\\"FreakerFortress: Join fee too low\\\");\\n        EtherFreakers(etherFreakersAddress).transferFrom(msg.sender, address(this), freakerID);\\n        _safeMint(mintTo, freakerID, \\\"\\\");\\n    }\\n\\n    // attack contract only \\n    function depositFreakerFree(address payable mintTo, uint128 freakerID) payable external {\\n        require(msg.sender == attackContract, \\\"FreakerFortress: Attack contract only\\\");\\n        EtherFreakers(etherFreakersAddress).transferFrom(msg.sender, address(this), freakerID);\\n        _safeMint(mintTo, freakerID, \\\"\\\");\\n    }\\n\\n    function withdrawFreaker(address to, uint128 freakerID) payable external ownerOrApproved(freakerID) {\\n        EtherFreakers(etherFreakersAddress).safeTransferFrom(address(this), to, freakerID);\\n        _burn(freakerID);\\n    }\\n\\n    function discharge(uint128 freakerID, uint128 amount) public {\\n        require(ownerOf(freakerID) == msg.sender, \\\"FreakerFortress: only owner\\\");\\n        // calculate what the contract will be paid before we call\\n        uint128 energy = EtherFreakers(etherFreakersAddress).energyOf(freakerID);\\n        uint128 capped = amount > energy ? energy : amount;\\n        EtherFreakers(etherFreakersAddress).discharge(freakerID, amount);\\n        // pay owner \\n        address owner = ownerOf(freakerID);\\n        payable(owner).transfer(capped);\\n    }\\n\\n    function charge(uint128 freakerID) payable ownerOrApproved(freakerID) public {\\n       EtherFreakers(etherFreakersAddress).charge{value: msg.value}(freakerID);\\n    }\\n\\n    function tokenURI(uint256 tokenID) public view virtual override returns (string memory) {\\n        return EtherFreakers(etherFreakersAddress).tokenURI(tokenID);\\n    }\\n\\n    // this is to handle tokens sent to the contract \\n    function claimToken(address to, uint256 freakerID) payable external {\\n        require(!_exists(freakerID), \\\"FreakerFortress: token has owner\\\");\\n        require(EtherFreakers(etherFreakersAddress).ownerOf(freakerID) == address(this), \\\"FreakerFortress: fortress does not own token\\\");\\n    \\t_safeMint(to, freakerID, \\\"\\\");\\n    }\\n\\n    // these methods allow someone to pay to have members of the fortress \\n    // attack a target\\n\\n    function createAttackContract() external {\\n    \\trequire(attackContract == address(0), \\\"FreakerFortress: attack contract already exists\\\");\\n    \\tattackContract = address(new FreakerAttack(payable(address(this)), etherFreakersAddress)); \\n    }\\n\\n    function remoteAttack(uint128[] calldata freakers, uint128 sourceId, uint128 targetId) external payable returns(bool response) {\\n    \\trequire(msg.value >= attackFeeWei, \\\"FreakerFortress: Attack fee too low\\\");\\n        require(attackContract != address(0), \\\"FreakerFortress: attack contract does not exist\\\");\\n    \\trequire(EtherFreakers(etherFreakersAddress).ownerOf(targetId) != address(this), \\\"FreakerFortress: cannot attack freak in fortress\\\");\\n    \\trequire(!EtherFreakers(etherFreakersAddress).isEnlightened(targetId), \\\"FreakerFortress: target is enlightened\\\");\\n    \\trequire(freakers.length <= maxRemoteAttackers, \\\"FreakerFortress: too many attackers\\\");\\n    \\tfor(uint i=0; i < freakers.length; i++){\\n\\t\\t\\tEtherFreakers(etherFreakersAddress).transferFrom(address(this), attackContract, freakers[i]);\\n\\t\\t}\\n\\t\\tresponse = FreakerAttack(attackContract).attack(payable(msg.sender), sourceId, targetId);\\n\\t\\tFreakerAttack(attackContract).sendBack(freakers);\\n    }\\n\\n    // owner methods\\n\\n    function updateFightFee(uint128 _fee) external managerOnly {\\n        attackFeeWei = _fee;\\n    }\\n\\n    function updateJoinFee(uint128 _fee) external managerOnly {\\n        joinFeeWei = _fee;\\n    }\\n\\n    function updateManager(address _manager) external managerOnly {\\n        manager = _manager;\\n    }\\n\\n    function updateMaxRemoteAttackers(uint8 count) external managerOnly {\\n        maxRemoteAttackers = count;\\n    }\\n\\n    function payManager(uint256 amount) external managerOnly {\\n        require(amount <= address(this).balance, \\\"FreakerFortress:  amount  too high\\\");\\n        payable(manager).transfer(amount);\\n    }\\n\\n    // payable\\n\\n    receive() payable external {\\n        // nothing to do\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"./extensions/IERC721Enumerable.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping (uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping (address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721).interfaceId\\n            || interfaceId == type(IERC721Metadata).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0\\n            ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n            : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n  /**\\n   * @dev Implementation of the {IERC721Receiver} interface.\\n   *\\n   * Accepts all token transfers.\\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n   */\\ncontract ERC721Holder is IERC721Receiver {\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/EtherFreakers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\nstruct Freaker {\\n    uint8 species;\\n    uint8 stamina;\\n    uint8 fortune;\\n    uint8 agility;\\n    uint8 offense;\\n    uint8 defense;\\n}\\n\\nstruct EnergyBalance {\\n    uint128 basic;\\n    uint128 index;\\n}\\n\\nstruct CombatMultipliers {\\n    uint128 attack;\\n    uint128 defend;\\n}\\n\\nstruct SpeciesCounter {\\n    int32 pluto;\\n    int32 mercury;\\n    int32 saturn;\\n    int32 uranus;\\n    int32 venus;\\n    int32 mars;\\n    int32 neptune;\\n    int32 jupiter;\\n}\\n\\ncontract EtherFreakers is ERC721 {\\n    /// Number of tokens in existence.\\n    uint128 public numTokens;\\n\\n    /// Record of energy costs paid for birthing.\\n    uint256[] public birthCertificates;\\n\\n    /// Index for the creator energy pool.\\n    uint128 public creatorIndex;\\n\\n    /// Index for the freaker energy pool.\\n    uint128 public freakerIndex;\\n\\n    /// Total freaker shares.\\n    uint128 public totalFortune;\\n\\n    /// Mapping from freaker id to freaker.\\n    mapping(uint128 => Freaker) public freakers;\\n\\n    /// Mapping from token id to energy balance.\\n    mapping(uint128 => EnergyBalance) public energyBalances;\\n\\n    /// Mapping from account to aggregate multipliers.\\n    mapping(address => CombatMultipliers) public combatMultipliers;\\n\\n    /// Mapping from account to count of each species.\\n    mapping(address => SpeciesCounter) public speciesCounters;\\n\\n    event Born(address mother, uint128 energy, uint128 indexed freakerId, Freaker freaker);\\n    event Missed(address attacker, address defender, uint128 indexed sourceId, uint128 indexed targetId);\\n    event Thwarted(address attacker, address defender, uint128 indexed sourceId, uint128 indexed targetId);\\n    event Captured(address attacker, address defender, uint128 indexed sourceId, uint128 indexed targetId);\\n\\n    /**\\n     * @notice Construct the EtherFreakers contract.\\n     * @param author Jared's address.\\n     */\\n    constructor(address author) ERC721(\\\"EtherFreakers\\\", \\\"EFKR\\\") {\\n        for (uint i = 0; i < 8; i++) {\\n            _mint(author, numTokens++);\\n        }\\n    }\\n\\n    /**\\n     * @notice Base URI for computing {tokenURI}.\\n     * @dev EtherFreakers original art algorithm commit hash:\\n     *  fe61dab48fa91cc298438862652116469fe663ea\\n     */\\n    function _baseURI() internal pure override returns (string memory) {\\n        return \\\"https://ether.freakers.art/m/\\\";\\n    }\\n\\n    /**\\n     * @notice Birth a new freaker, given enough energy.\\n     */\\n    function birth() payable public {\\n        birthTo(payable(msg.sender));\\n    }\\n\\n    /**\\n     * @notice Birth a new freaker, given enough energy.\\n     * @param to Recipient's address\\n     */\\n    function birthTo(address payable to) payable public {\\n        // Roughly\\n        //  pick species\\n        //   0 (1x) ->\\n        //    fortune / offense\\n        //   1 (2x) ->\\n        //    fortune / defense\\n        //   2 (2x) ->\\n        //    fortune / agility\\n        //   3 (3x) ->\\n        //    offense / defense\\n        //   4 (3x) ->\\n        //    defense / offense\\n        //   5 (4x) ->\\n        //    agility / offense\\n        //   6 (4x) ->\\n        //    agility / defense\\n        //   7 (1x) ->\\n        //    defense / agility\\n        //  pick stamina: [0, 9]\\n        //  pick fortune, agility, offense, defense based on species: [1, 10]\\n        //   primary = 300% max\\n        //   secondary = 200% max\\n\\n        uint256 middle = middlePrice();\\n        require(msg.value > middle * 1005 / 1000, \\\"Not enough energy\\\");\\n\\n        uint128 freakerId = numTokens++;\\n        uint8 speciesDie = uint8(_randomishIntLessThan(\\\"species\\\", 20));\\n        uint8 species = (\\n         (speciesDie < 1 ? 0 :\\n          (speciesDie < 3 ? 1 :\\n           (speciesDie < 5 ? 2 :\\n            (speciesDie < 8 ? 3 :\\n             (speciesDie < 11 ? 4 :\\n              (speciesDie < 15 ? 5 :\\n               (speciesDie < 19 ? 6 : 7))))))));\\n\\n        uint8 stamina = uint8(_randomishIntLessThan(\\\"stamina\\\", 10));\\n        uint8 fortune = uint8(_randomishIntLessThan(\\\"fortune\\\", species < 3 ? 30 : 10) + 1);\\n        uint8 agility = uint8(_randomishIntLessThan(\\\"agility\\\",\\n         (species == 5 || species == 6 ? 30 :\\n          (species == 2 || species == 7 ? 20 : 10))) + 1);\\n        uint8 offense = uint8(_randomishIntLessThan(\\\"offense\\\",\\n         (species == 3 ? 30 :\\n          (species == 0 || species == 4 || species == 5 ? 20 : 10))) + 1);\\n        uint8 defense = uint8(_randomishIntLessThan(\\\"defense\\\",\\n         (species == 4 || species == 7 ? 30 :\\n          (species == 1 || species == 4 || species == 6 ? 20 : 10))) + 1);\\n\\n        Freaker memory freaker = Freaker({\\n            species: species,\\n            stamina: stamina,\\n            fortune: fortune,\\n            agility: agility,\\n            offense: offense,\\n            defense: defense\\n          });\\n        freakers[freakerId] = freaker;\\n\\n        uint128 value = uint128(msg.value);\\n        uint128 half = value / 2;\\n        _dissipateEnergyIntoPool(half);\\n        energyBalances[freakerId] = EnergyBalance({\\n            basic: half,\\n            index: freakerIndex\\n          });\\n        totalFortune += fortune;\\n\\n        birthCertificates.push(msg.value);\\n\\n        emit Born(to, value, freakerId, freaker);\\n        _safeMint(to, freakerId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Attempt to capture another owner's freaker.\\n     * @param sourceId The freaker launching the attack.\\n     * @param targetId The freaker being attacked.\\n     * @return Whether or not the attack was successful.\\n     */\\n    function attack(uint128 sourceId, uint128 targetId) public returns (bool) {\\n        address attacker = ownerOf(sourceId);\\n        address defender = ownerOf(targetId);\\n        require(attacker != defender, \\\"Cannot attack self\\\");\\n        require(attacker == msg.sender, \\\"Sender does not own source\\\");\\n\\n        if (isEnlightened(sourceId) || isEnlightened(targetId)) {\\n            revert(\\\"Enlightened beings can neither attack nor be attacked\\\");\\n        }\\n\\n        Freaker memory source = freakers[sourceId];\\n        Freaker memory target = freakers[targetId];\\n\\n        if (_randomishIntLessThan(\\\"hit?\\\", source.agility + target.agility) > source.agility) {\\n            // source loses energy:\\n            //  0.1% - 1% (0.1% * (10 - stamina))\\n            uint128 sourceCharge = energyOf(sourceId);\\n            uint128 sourceSpent = sourceCharge * (1 * (10 - source.stamina)) / 1000;\\n            energyBalances[sourceId] = EnergyBalance({\\n                basic: sourceCharge - sourceSpent,\\n                index: freakerIndex\\n              });\\n            _dissipateEnergyIntoPool(sourceSpent);\\n            emit Missed(attacker, defender, sourceId, targetId);\\n            return false;\\n        }\\n\\n        if (_randomishIntLessThan(\\\"win?\\\", attackPower(sourceId)) < defendPower(targetId)) {\\n            // both source and target lose energy:\\n            //  1% - 10% (1% * (10 - stamina))\\n            uint128 sourceCharge = energyOf(sourceId);\\n            uint128 targetCharge = energyOf(targetId);\\n            uint128 sourceSpent = sourceCharge * (1 * (10 - source.stamina)) / 100;\\n            uint128 targetSpent = targetCharge * (1 * (10 - target.stamina)) / 100;\\n            energyBalances[sourceId] = EnergyBalance({\\n                basic: sourceCharge - sourceSpent,\\n                index: freakerIndex\\n              });\\n            energyBalances[targetId] = EnergyBalance({\\n                basic: targetCharge - targetSpent,\\n                index: freakerIndex\\n              });\\n            _dissipateEnergyIntoPool(sourceSpent);\\n            _dissipateEnergyIntoPool(targetSpent);\\n            emit Thwarted(attacker, defender, sourceId, targetId);\\n            return false;\\n        } else {\\n            // source loses energy\\n            //  2% - 20% (2% * (10 - stamina))\\n            // return target charge to target owner, if we can\\n            // transfer target to source owner\\n            // remaining source energy is split in half and given to target\\n            uint128 sourceCharge = energyOf(sourceId);\\n            uint128 targetCharge = energyOf(targetId);\\n            uint128 sourceSpent = sourceCharge * (2 * (10 - source.stamina)) / 100;\\n            uint128 sourceRemaining = sourceCharge - sourceSpent;\\n            if (!payable(defender).send(targetCharge)) {\\n                creatorIndex += targetCharge / 8;\\n            }\\n            _transfer(defender, attacker, targetId);\\n            _dissipateEnergyIntoPool(sourceSpent);\\n\\n            uint128 half = sourceRemaining / 2;\\n            energyBalances[sourceId] = EnergyBalance({\\n                basic: half,\\n                index: freakerIndex\\n              });\\n            energyBalances[targetId] = EnergyBalance({\\n                basic: half,\\n                index: freakerIndex\\n              });\\n\\n            emit Captured(attacker, defender, sourceId, targetId);\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @notice Draw upon a creator's share of energy.\\n     * @param creatorId The token id of the creator to tap.\\n     */\\n    function tap(uint128 creatorId) public {\\n        require(isCreator(creatorId), \\\"Not a creator\\\");\\n        address owner = ownerOf(creatorId);\\n        uint128 unclaimed = creatorIndex - energyBalances[creatorId].index;\\n        energyBalances[creatorId].index = creatorIndex;\\n        payable(owner).transfer(unclaimed);\\n    }\\n\\n    /**\\n     * @notice Store energy on a freaker.\\n     * @param freakerId The token id of the freaker to charge.\\n     */\\n    function charge(uint128 freakerId) payable public {\\n        address owner = ownerOf(freakerId);\\n        require(msg.sender == owner, \\\"Sender does not own freaker\\\");\\n        require(isFreaker(freakerId), \\\"Not a freaker\\\");\\n        EnergyBalance memory balance = energyBalances[freakerId];\\n        energyBalances[freakerId] = EnergyBalance({\\n            basic: balance.basic + uint128(msg.value),\\n            index: balance.index\\n          });\\n    }\\n\\n    /**\\n     * @notice Withdraw energy from a freaker.\\n     * @param freakerId The token id of the freaker to discharge.\\n     * @param amount The amount of energy (Ether) to discharge, capped to max.\\n     */\\n    function discharge(uint128 freakerId, uint128 amount) public {\\n        address owner = ownerOf(freakerId);\\n        require(msg.sender == owner, \\\"Sender does not own freaker\\\");\\n        require(isFreaker(freakerId), \\\"Not a freaker\\\");\\n        uint128 energy = energyOf(freakerId);\\n        uint128 capped = amount > energy ? energy : amount;\\n        energyBalances[freakerId] = EnergyBalance({\\n            basic: energy - capped,\\n            index: freakerIndex\\n          });\\n        payable(owner).transfer(capped);\\n    }\\n\\n    function isCreator(uint256 tokenId) public pure returns (bool) { return tokenId < 8; }\\n    function isFreaker(uint256 tokenId) public pure returns (bool) { return tokenId >= 8; }\\n\\n    function isEnlightened(uint128 tokenId) public view returns (bool) {\\n        if (isCreator(tokenId)) {\\n            return true;\\n        }\\n        address owner = ownerOf(tokenId);\\n        SpeciesCounter memory c = speciesCounters[owner];\\n        return (\\n         c.pluto > 0 && c.mercury > 0 && c.saturn > 0 && c.uranus > 0 &&\\n         c.venus > 0 && c.mars > 0 && c.neptune > 0 && c.jupiter > 0\\n        );\\n    }\\n\\n    function energyOf(uint128 tokenId) public view returns (uint128) {\\n        if (isCreator(tokenId)) {\\n            EnergyBalance memory balance = energyBalances[tokenId];\\n            return balance.basic + (creatorIndex - balance.index);\\n        } else {\\n            Freaker memory freaker = freakers[tokenId];\\n            EnergyBalance memory balance = energyBalances[tokenId];\\n            return balance.basic + (freakerIndex - balance.index) * freaker.fortune;\\n        }\\n    }\\n\\n    function attackPower(uint128 freakerId) public view returns (uint128) {\\n        address attacker = ownerOf(freakerId);\\n        return combatMultipliers[attacker].attack * energyOf(freakerId);\\n    }\\n\\n    function defendPower(uint128 freakerId) public view returns (uint128) {\\n        address defender = ownerOf(freakerId);\\n        return combatMultipliers[defender].defend * energyOf(freakerId);\\n    }\\n\\n    function middlePrice() public view returns (uint256) {\\n        uint256 length = birthCertificates.length;\\n        return length > 0 ? birthCertificates[length / 2] : 0;\\n    }\\n\\n    function _randomishIntLessThan(bytes32 salt, uint256 n) internal view returns (uint256) {\\n        if (n == 0)\\n            return 0;\\n        return uint256(keccak256(abi.encodePacked(block.timestamp, msg.sender, salt))) % n;\\n    }\\n\\n    function _dissipateEnergyIntoPool(uint128 amount) internal {\\n        if (amount > 0) {\\n            if (totalFortune > 0) {\\n                uint128 creatorAmount = amount * 20 / 100;\\n                uint128 freakerAmount = amount * 80 / 100;\\n                creatorIndex += creatorAmount / 8;\\n                freakerIndex += freakerAmount / totalFortune;\\n            } else {\\n                creatorIndex += amount / 8;\\n            }\\n        }\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override {\\n        if (isFreaker(tokenId)) {\\n            uint128 freakerId = uint128(tokenId);\\n            Freaker memory freaker = freakers[freakerId];\\n\\n            if (from != address(0)) {\\n                CombatMultipliers memory multipliers = combatMultipliers[from];\\n                combatMultipliers[from] = CombatMultipliers({\\n                    attack: multipliers.attack - freaker.offense * uint128(freaker.offense),\\n                    defend: multipliers.defend - freaker.defense * uint128(freaker.defense)\\n                  });\\n                _countSpecies(from, freaker.species, -1);\\n            }\\n\\n            if (to != address(0)) {\\n                CombatMultipliers memory multipliers = combatMultipliers[to];\\n                combatMultipliers[to] = CombatMultipliers({\\n                    attack: multipliers.attack + freaker.offense * uint128(freaker.offense),\\n                    defend: multipliers.defend + freaker.defense * uint128(freaker.defense)\\n                  });\\n                _countSpecies(to, freaker.species, 1);\\n            }\\n\\n            if (from != address(0) && to != address(0)) {\\n                uint128 freakerCharge = energyOf(freakerId);\\n                uint128 freakerSpent = freakerCharge / 1000;\\n                energyBalances[freakerId] = EnergyBalance({\\n                    basic: freakerCharge - freakerSpent,\\n                    index: freakerIndex\\n                  });\\n                _dissipateEnergyIntoPool(freakerSpent);\\n            }\\n        }\\n    }\\n\\n    function _countSpecies(address account, uint8 species, int8 delta) internal {\\n        if (species < 4) {\\n            if (species < 2) {\\n                if (species == 0) {\\n                    speciesCounters[account].pluto += delta;\\n                } else {\\n                    speciesCounters[account].mercury += delta;\\n                }\\n            } else {\\n                if (species == 2) {\\n                    speciesCounters[account].saturn += delta;\\n                } else {\\n                    speciesCounters[account].uranus += delta;\\n                }\\n            }\\n        } else {\\n            if (species < 6) {\\n                if (species == 4) {\\n                    speciesCounters[account].venus += delta;\\n                } else {\\n                    speciesCounters[account].mars += delta;\\n                }\\n            } else {\\n                if (species == 6) {\\n                    speciesCounters[account].neptune += delta;\\n                } else {\\n                    speciesCounters[account].jupiter += delta;\\n                }\\n            }\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/FreakerAttack.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.2;\\n\\nimport \\\"./EtherFreakers.sol\\\";\\nimport \\\"./FreakerFortress.sol\\\";\\n\\ncontract FreakerAttack {\\n\\taddress payable public owner;\\n\\taddress public etherFreakersAddress;\\n\\n\\tconstructor(address payable creator, address _etherFreakersAddress) {\\n\\t\\towner = creator;\\n\\t\\tetherFreakersAddress = _etherFreakersAddress;\\n\\n\\t}\\n\\n\\tfunction attack(address payable onBehalfOf, uint128 sourceId, uint128 targetId) external returns (bool) {\\n\\t\\trequire(msg.sender == owner, \\\"FreakerAttack: Only owner\\\");\\n\\t\\trequire(address(this) == EtherFreakers(etherFreakersAddress).ownerOf(sourceId), \\\"FreakerAttack: does not own sourceId\\\");\\n\\t\\tbool success = EtherFreakers(etherFreakersAddress).attack(sourceId, targetId);\\n\\t\\tif(success){\\n\\t\\t\\tEtherFreakers(etherFreakersAddress).approve(owner, targetId);\\n\\t\\t\\tFreakerFortress(owner).depositFreakerFree(onBehalfOf, targetId);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\t// for gas fees, can use a max of four attackers\\n\\t// so we only allow for to be sent back \\n\\tfunction sendBack(uint128[] calldata freakers) external {\\n\\t\\tfor(uint i=0; i < freakers.length; i++){\\n\\t\\t\\tEtherFreakers(etherFreakersAddress).transferFrom(address(this), owner, freakers[i]);\\n\\t\\t}\\n\\t}\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"author\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_etherFreakersAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attackContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attackFeeWei\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"freakerID\",\"type\":\"uint128\"}],\"name\":\"charge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"freakerID\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createAttackContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"mintTo\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"freakerID\",\"type\":\"uint128\"}],\"name\":\"depositFreaker\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"mintTo\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"freakerID\",\"type\":\"uint128\"}],\"name\":\"depositFreakerFree\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"freakerID\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"discharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etherFreakersAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinFeeWei\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRemoteAttackers\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128[]\",\"name\":\"freakers\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128\",\"name\":\"sourceId\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"targetId\",\"type\":\"uint128\"}],\"name\":\"remoteAttack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"response\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_fee\",\"type\":\"uint128\"}],\"name\":\"updateFightFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_fee\",\"type\":\"uint128\"}],\"name\":\"updateJoinFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"updateManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"count\",\"type\":\"uint8\"}],\"name\":\"updateMaxRemoteAttackers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"freakerID\",\"type\":\"uint128\"}],\"name\":\"withdrawFreaker\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FreakerFortress","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000bc3ed6b537f2980e66f396fe14210a56ba3f72c40000000000000000000000003a275655586a049fe860be867d10cdae2ffc0f33","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}