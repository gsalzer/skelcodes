{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"details\": {\r\n        \"constantOptimizer\": true,\r\n        \"cse\": true,\r\n        \"deduplicate\": true,\r\n        \"jumpdestRemover\": true,\r\n        \"orderLiterals\": false,\r\n        \"peephole\": true,\r\n        \"yul\": false\r\n      },\r\n      \"runs\": 256\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"src/rollup/contracts/IModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.7.6;\\n\\n// Audit-1: ok\\ninterface IModule {\\n  enum VotingStatus {\\n    UNKNOWN,\\n    OPEN,\\n    CLOSED,\\n    PASSED\\n  }\\n\\n  function onCreateProposal (\\n    bytes32 communityId,\\n    uint256 totalMemberCount,\\n    uint256 totalValueLocked,\\n    address proposer,\\n    uint256 proposerBalance,\\n    uint256 startDate,\\n    bytes calldata internalActions,\\n    bytes calldata externalActions\\n  ) external view;\\n\\n  function onProcessProposal (\\n    bytes32 proposalId,\\n    bytes32 communityId,\\n    uint256 totalMemberCount,\\n    uint256 totalVoteCount,\\n    uint256 totalVotingShares,\\n    uint256 totalVotingSignal,\\n    uint256 totalValueLocked,\\n    uint256 secondsPassed\\n  ) external view returns (VotingStatus, uint256 secondsTillClose, uint256 quorumPercent);\\n}\\n\"\r\n    },\r\n    \"src/rollup/contracts/modules/TwoThirdVotingThreshold.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.7.6;\\n\\nimport '../IModule.sol';\\n\\n/// @notice This Module has a 2/3 TVL voting threshold with at least 1% of TVL required to create proposals.\\n/// This is useful for acting as multisigs.\\n// Audit-1: ok\\ncontract TwoThirdVotingThreshold is IModule {\\n  /// @notice Called if a proposal gets created.\\n  /// Requirements:\\n  /// - proposerBalance needs to be at least 1% of TVL.\\n  function onCreateProposal (\\n    bytes32 /*communityId*/,\\n    uint256 /*totalMemberCount*/,\\n    uint256 totalValueLocked,\\n    address /*proposer*/,\\n    uint256 proposerBalance,\\n    uint256 /*startDate*/,\\n    bytes calldata /*internalActions*/,\\n    bytes calldata /*externalActions*/\\n  ) external pure override\\n  {\\n    uint256 minProposerBalance = totalValueLocked / 100;\\n    require(\\n      proposerBalance >= minProposerBalance,\\n      'Not enough balance'\\n    );\\n  }\\n\\n  /// @notice A proposal is open until at least 2/3 from `totalValueLocked` are voted on the proposal.\\n  /// Depending on the average voting signal, the proposal passes if `averageSignal` > 50.\\n  function onProcessProposal (\\n    bytes32 /*proposalId*/,\\n    bytes32 /*communityId*/,\\n    uint256 /*totalMemberCount*/,\\n    uint256 totalVoteCount,\\n    uint256 totalVotingShares,\\n    uint256 totalVotingSignal,\\n    uint256 totalValueLocked,\\n    uint256 secondsPassed\\n  ) external pure override returns (VotingStatus, uint256, uint256) {\\n\\n    uint256 twoThird = (totalValueLocked / 3) * 2;\\n\\n    if (totalVoteCount == 0 || twoThird == 0 || secondsPassed < 1) {\\n      return (VotingStatus.OPEN, uint256(-1), 0);\\n    }\\n\\n    // assuming this does not overflow\\n    uint256 quorum = (totalVotingShares * 100) / twoThird;\\n\\n    if (quorum > 99) {\\n      uint256 averageSignal = totalVotingSignal / totalVoteCount;\\n      if (averageSignal > 50) {\\n        return (VotingStatus.PASSED, 0, quorum);\\n      } else {\\n        return (VotingStatus.CLOSED, 0, quorum);\\n      }\\n    }\\n\\n    return (VotingStatus.OPEN, 0, quorum);\\n  }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalValueLocked\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"proposerBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onCreateProposal\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVoteCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVotingShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVotingSignal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalValueLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsPassed\",\"type\":\"uint256\"}],\"name\":\"onProcessProposal\",\"outputs\":[{\"internalType\":\"enum IModule.VotingStatus\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"TwoThirdVotingThreshold","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"256","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"none"}]}