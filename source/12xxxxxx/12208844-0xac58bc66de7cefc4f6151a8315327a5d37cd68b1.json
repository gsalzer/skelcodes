{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ProofOfCultureMinter.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"./lib/LibSafeMath.sol\\\";\\nimport \\\"./ERC1155Mintable.sol\\\";\\nimport \\\"./mixin/MixinOwnable.sol\\\";\\n\\ncontract ProofOfCultureMinter is Ownable {\\n  using LibSafeMath for uint256;\\n\\n  struct _HashtagContainer {\\n    string originalHashtag;\\n    string normalizedHashtag;\\n    uint256 timestamp;\\n  }\\n\\n  uint256 public hashtagTokenType;\\n\\n  uint256 public batchOrderLimit;\\n\\n  ERC1155Mintable public mintableErc1155;\\n\\n  uint256 public constant MAX_NFT_SUPPLY = 9999;\\n\\n  address payable public treasury;\\n\\n  string[] public claimedHashtags;\\n\\n  mapping(uint256 => _HashtagContainer) public tokenIdToHashtagContainer;\\n  mapping(string => uint256) public normalizedHashtagToTokenId;\\n\\n  mapping(string => string) public normalizedHashtagToImageURI;\\n  mapping(uint256 => string) public tokenIdToImageURI;\\n\\n  // platform supporter vars\\n  uint256 public constant supporterTokenCap = 15; // THIS WILL NEVER CHANGE!! WE ONLY MINT A SET AMOUNT FOR SUPPORTERS\\n  uint256 public currentSupporterTokenCount;\\n\\n  // image change counts\\n  mapping(uint256 => uint256) public tokenIdToImageChangeCount;\\n\\n  // admin toggles\\n  bool public saleStarted;\\n \\n  constructor(\\n    address _mintableErc1155,\\n    address payable _treasury,\\n    uint256 _hashtagTokenType,\\n    uint256 _batchOrderLimit\\n  ) {\\n    mintableErc1155 = ERC1155Mintable(_mintableErc1155);\\n    treasury = _treasury;\\n    hashtagTokenType = _hashtagTokenType;\\n    batchOrderLimit = _batchOrderLimit;\\n  }\\n\\n  event UpdatedRegistry(\\n    uint256 tokenId,\\n    string hashtag\\n  );\\n\\n  event Received(address, uint);\\n\\n\\n  /**\\n  * @dev Gets the total supply, which is the sum of all hashtags minted.\\n  \\n         Note that NFTs have a maxIndex but FTs don't, so we just keep track of the total here.\\n  */\\n  function totalSupply() public view returns (uint256) {\\n    return mintableErc1155.maxIndex(hashtagTokenType);\\n  }\\n\\n  /**\\n  * @dev Returns all claimed hashtags as an array\\n  */\\n  function getAllClaimedHashtags() public view returns (string[] memory) {\\n    return claimedHashtags;\\n  }\\n\\n  /**\\n  * @dev Return original (not normalized) hashtags that a given address owns. Leverages nfTokensOf but returns the hashtags instead of the token IDs\\n  */\\n  function hashtagsOf(address _address) public view returns (string[] memory) {\\n    uint256[] memory tokenIds = mintableErc1155.nfTokensOf(_address);\\n    string[] memory hashtags = new string[](tokenIds.length);\\n    for(uint i=0; i<tokenIds.length; i++){\\n      uint256 tokenId = tokenIds[i];\\n      hashtags[i] = tokenIdToHashtagContainer[tokenId].originalHashtag;\\n    }\\n    return hashtags;\\n  }\\n\\n  /**\\n  * @dev Validate hashtag.\\n         - string must start with a '#'\\n         - string length must be min 2 chars (# + one char)\\n         - string length must be max 31 chars (1 + 30)\\n         - string must be alphanumeric + underscore (aside from the first hashtag)\\n  */\\n  function validateHashtag(string memory _hashtag) public pure returns (bool) {\\n    bytes memory b = bytes(_hashtag);\\n    if(b.length < 2) return false;\\n    if(b.length > 31) return false;\\n\\n    bytes1 firstChar = b[0];\\n    if (!(firstChar == 0x23)) return false; // make sure the first character is a '#'\\n\\n    for(uint i=1; i<b.length; i++){\\n        bytes1 char = b[i];\\n\\n        if(\\n            !(char >= 0x30 && char <= 0x39) && //9-0\\n            !(char >= 0x41 && char <= 0x5A) && //A-Z\\n            !(char >= 0x61 && char <= 0x7A) && //a-z\\n            !(char == 0x5F) //_\\n        )\\n            return false;\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n  * @dev Normalize hashtag by making uppercase into lowercase.\\n         Examples:\\n         - #BlackLivesMatter   => #blacklivesmatter\\n         - #BLM                => #blm\\n         - #NFTsAreAwesome123  => #nftsareawesome123\\n  */\\n  function normalizeHashtag(string memory _hashtag) public pure returns (string memory) {\\n    bytes memory b = bytes(_hashtag);\\n    require(b.length >= 2, \\\"Hashtag cannot be less than 2 chars\\\");\\n    require(b.length <= 31, \\\"Hashtag cannot be more than 31 chars\\\");\\n\\n    bytes1 firstChar = b[0];\\n    require(firstChar == 0x23, \\\"Hashtag must start with a '#'\\\");\\n\\n\\t\\tbytes memory bLower = new bytes(b.length);\\n\\n\\t\\tfor (uint i = 0; i < b.length; i++) {\\n\\t\\t\\t// Uppercase character...\\n\\t\\t\\tif ((uint8(b[i]) >= 65) && (uint8(b[i]) <= 90)) {\\n        // So we add 32 to make it lowercase\\n        bLower[i] = bytes1(uint8(b[i]) + 32);\\n      } else {\\n        bLower[i] = b[i];\\n      }\\n\\t\\t}\\n\\t\\treturn string(bLower);\\n  }\\n\\n  /**\\n  * @dev Gets the price up to 9999 tokens.\\n         As we put in a lot of artistic work into each token, we are taking a \\n         constant pricing model, instead of the bonding curve model popularly seen\\n         in this space recently.\\n  */\\n  function getPrice() public view returns (uint256) {\\n    require(totalSupply() < MAX_NFT_SUPPLY, \\\"Sale has already ended\\\");\\n\\n    return 1000000000000000000; // 1ETH\\n  }\\n\\n  /**\\n  * @dev Set address of treasury - the address that will receive all payments\\n  */\\n  function setTreasury(address payable _treasury) external onlyOwner() {\\n    treasury = _treasury;\\n  }\\n\\n  /**\\n  * @dev Set batch order limit\\n  */\\n  function setBatchOrderLimit(uint256 _batchOrderLimit) external onlyOwner() {\\n    batchOrderLimit = _batchOrderLimit;\\n  }\\n\\n  /**\\n  * @dev Set Image URL for Token Id in batch.\\n  *      Note that we will only use this after individually crafting the image.\\n  *      The image will be hosted on IPFS and seeded properly for perpetuity so the image can remain accessible.\\n  *\\n  *      If for any reason we have to update the image after the first time, we refund the original price of the art\\n  *      to the current owner of the token.\\n  */\\n  function setBatchImageURIsForTokens(uint256[] calldata _ids, string[] calldata _image_uris) external onlyOwner() {\\n    require(_ids.length == _image_uris.length, \\\"Batch arrays must be of the same length\\\");\\n\\n    for (uint256 i = 0; i < _ids.length; ++i) {\\n      // Cache value to local variable to reduce read costs.\\n      uint256 id = _ids[i];\\n      string memory image_uri = _image_uris[i];\\n\\n      // If this image has already been changed once, then we should refund the original price to the current owner\\n      uint256 imageChangeCount = tokenIdToImageChangeCount[id];\\n      if (imageChangeCount == 1) {\\n        address payable owner = payable(mintableErc1155.ownerOf(id));\\n        owner.transfer(1000000000000000000); // refund the 1ETH\\n      }\\n\\n      tokenIdToImageURI[id] = image_uri;\\n\\n      // also set it for the hashtag\\n      _HashtagContainer memory container = tokenIdToHashtagContainer[id];\\n      normalizedHashtagToImageURI[container.normalizedHashtag] = image_uri;\\n\\n      tokenIdToImageChangeCount[id] += 1;\\n    }\\n  }\\n\\n  /**\\n  * @dev Set saleStarted boolean to start or end sale\\n  */\\n  function setSaleStarted(bool _saleStarted) external onlyOwner() {\\n    saleStarted = _saleStarted;\\n  }\\n\\n  /**\\n  * @dev Mint signature hashtags for our platform supporters (up to a certain limit that is a constant).\\n  */\\n  function mintSignatureTokens(string[] memory _hashtags) external onlyOwner() {\\n    require(currentSupporterTokenCount.safeAdd(_hashtags.length) <= supporterTokenCap, \\\"Exceeds supporterTokenCap\\\");\\n    for (uint i = 0; i < _hashtags.length; i++) {\\n      string memory hashtag = _hashtags[i];\\n\\n      if (!validateHashtag(hashtag)) {\\n        continue; // skip if this is not a valid hashtag\\n      }\\n\\n      string memory normalizedHashtag = normalizeHashtag(hashtag);\\n      if (normalizedHashtagToTokenId[normalizedHashtag] != 0) {\\n        continue; // skip if this hashtag already exists\\n      }\\n\\n      // mint the NFT\\n      address[] memory dsts = new address[](1);\\n      dsts[0] = msg.sender;\\n      uint256 index = mintableErc1155.maxIndex(hashtagTokenType) + 1;\\n      uint256 tokenId  = hashtagTokenType | index;\\n      mintableErc1155.mintNonFungible(hashtagTokenType, dsts);\\n\\n      // bookkeeping\\n      _HashtagContainer memory hc;\\n      hc.normalizedHashtag = normalizedHashtag;\\n      hc.originalHashtag = hashtag;\\n      hc.timestamp = block.timestamp;\\n      tokenIdToHashtagContainer[tokenId] = hc;\\n      normalizedHashtagToTokenId[normalizedHashtag] = tokenId;\\n\\n      claimedHashtags.push(hashtag);\\n\\n      emit UpdatedRegistry(tokenId, hashtag);\\n\\n      currentSupporterTokenCount += 1;\\n    }\\n  }\\n\\n  /**\\n  * @dev Mint multiple hashtags at once. We will try our best to mint all but\\n         if they have already been claimed, then we will refund the money back.\\n\\n         Note that this function is inefficient because each mint actually emits a transfer\\n         event and this doesn't scale. 25 should be OK, but for anything more, consider the\\n         EIP2309 extension of ERC721.\\n  */\\n  function mint(address _dst, string[] memory _hashtags) public payable {\\n    require(saleStarted, \\\"Sale has not started yet\\\");\\n    require(totalSupply() < MAX_NFT_SUPPLY, \\\"Sale has already ended\\\");\\n\\n    uint numberOfNfts = _hashtags.length;\\n    require(numberOfNfts > 0, \\\"numberOfNfts cannot be 0\\\");\\n    require(numberOfNfts <= batchOrderLimit, \\\"You may not buy more than the batch limit at once\\\");\\n    require(totalSupply().safeAdd(numberOfNfts) <= MAX_NFT_SUPPLY, \\\"Exceeds MAX_NFT_SUPPLY\\\");\\n    require(getPrice().safeMul(numberOfNfts) <= msg.value, \\\"Ether value sent is not correct\\\");\\n\\n    // set price upfront before minting - we will need to use this to calculate refunds\\n    uint256 pricePerHashtag = getPrice();\\n\\n    // Keep track of which hashtags we were able to mint\\n    uint mintedCount = 0;\\n    for (uint i = 0; i < numberOfNfts; i++) {\\n      string memory hashtag = _hashtags[i];\\n\\n      if (!validateHashtag(hashtag)) {\\n        continue; // skip if this is not a valid hashtag\\n      }\\n\\n      string memory normalizedHashtag = normalizeHashtag(hashtag);\\n      if (normalizedHashtagToTokenId[normalizedHashtag] != 0) {\\n        continue; // skip if this hashtag already exists\\n      }\\n\\n      // mint the NFT\\n      address[] memory dsts = new address[](1);\\n      dsts[0] = _dst;\\n      uint256 index = mintableErc1155.maxIndex(hashtagTokenType) + 1;\\n      uint256 tokenId  = hashtagTokenType | index;\\n      mintableErc1155.mintNonFungible(hashtagTokenType, dsts);\\n\\n      // bookkeeping\\n      _HashtagContainer memory hc;\\n      hc.normalizedHashtag = normalizedHashtag;\\n      hc.originalHashtag = hashtag;\\n      hc.timestamp = block.timestamp;\\n      tokenIdToHashtagContainer[tokenId] = hc;\\n      normalizedHashtagToTokenId[normalizedHashtag] = tokenId;\\n      mintedCount++;\\n\\n      claimedHashtags.push(hashtag);\\n\\n      emit UpdatedRegistry(tokenId, hashtag);\\n    }\\n\\n    // Only charge for the hashtags that we were able to mint, and refund the rest\\n    uint256 actualTotalPrice = pricePerHashtag.safeMul(mintedCount);\\n    treasury.transfer(actualTotalPrice);\\n    msg.sender.transfer(msg.value - actualTotalPrice);\\n  }\\n\\n  receive() external payable {\\n      emit Received(msg.sender, msg.value);\\n  }\\n}\"\r\n    },\r\n    \"contracts/lib/LibSafeMath.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2019 ZeroEx Intl.\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n*/\\n\\npragma solidity ^0.7.5;\\n\\nimport \\\"./LibRichErrors.sol\\\";\\nimport \\\"./LibSafeMathRichErrors.sol\\\";\\n\\n\\nlibrary LibSafeMath {\\n\\n    function safeMul(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b;\\n        if (c / a != b) {\\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\\n                LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return c;\\n    }\\n\\n    function safeDiv(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (b == 0) {\\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\\n                LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,\\n                a,\\n                b\\n            ));\\n        }\\n        uint256 c = a / b;\\n        return c;\\n    }\\n\\n    function safeSub(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (b > a) {\\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\\n                LibSafeMathRichErrors.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return a - b;\\n    }\\n\\n    function safeAdd(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 c = a + b;\\n        if (c < a) {\\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\\n                LibSafeMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,\\n                a,\\n                b\\n            ));\\n        }\\n        return c;\\n    }\\n\\n    function max256(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min256(uint256 a, uint256 b)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return a < b ? a : b;\\n    }\\n}\"\r\n    },\r\n    \"contracts/ERC1155Mintable.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.7.5;\\n\\nimport \\\"./lib/LibSafeMath.sol\\\";\\nimport \\\"./lib/LibAddress.sol\\\";\\nimport \\\"./ERC1155.sol\\\";\\nimport \\\"./interface/IERC1155Mintable.sol\\\";\\nimport \\\"./mixin/MixinOwnable.sol\\\";\\nimport \\\"./mixin/MixinContractURI.sol\\\";\\nimport \\\"./mixin/MixinTokenURI.sol\\\";\\n\\n/// @dev Mintable form of ERC1155\\n/// Shows how easy it is to mint new items\\ncontract ERC1155Mintable is\\n    IERC1155Mintable,\\n    ERC1155,\\n    MixinContractURI,\\n    MixinTokenURI\\n{\\n    using LibSafeMath for uint256;\\n    using LibAddress for address;\\n\\n    uint256 internal nonce;\\n\\n    /// mapping from token to max index\\n    mapping (uint256 => uint256) public maxIndex;\\n\\n    mapping (uint256 => mapping(address => bool)) internal creatorApproval;\\n\\n    modifier onlyCreator(uint256 _id) {\\n        require(creatorApproval[_id][msg.sender], \\\"not an approved creator of id\\\");\\n        _;\\n    }\\n\\n    function setCreatorApproval(uint256 id, address creator, bool status) external onlyCreator(id) {\\n        creatorApproval[id][creator] = status;\\n    }\\n\\n    /// @dev creates a new token\\n    /// @param isNF is non-fungible token\\n    /// @return type_ of token (a unique identifier)\\n    function create(\\n        bool isNF\\n    )\\n        external\\n        override\\n        onlyOwner()\\n        returns (uint256 type_)\\n    {\\n        // Store the type in the upper 128 bits\\n        type_ = (++nonce << 128);\\n\\n        // Set a flag if this is an NFI.\\n        if (isNF) {\\n            type_ = type_ | TYPE_NF_BIT;\\n        }\\n\\n        creatorApproval[type_][msg.sender] = true;\\n\\n        // emit a Transfer event with Create semantic to help with discovery.\\n        emit TransferSingle(\\n            msg.sender,\\n            address(0x0),\\n            address(0x0),\\n            type_,\\n            0\\n        );\\n\\n        emit URI(uri(type_), type_);\\n    }\\n\\n    /// @dev creates a new token\\n    /// @param type_ of token\\n    function createWithType(\\n        uint256 type_\\n    )\\n        external\\n        onlyOwner()\\n    {\\n\\n        creatorApproval[type_][msg.sender] = true;\\n\\n        // emit a Transfer event with Create semantic to help with discovery.\\n        emit TransferSingle(\\n            msg.sender,\\n            address(0x0),\\n            address(0x0),\\n            type_,\\n            0\\n        );\\n\\n        emit URI(uri(type_), type_);\\n    }\\n\\n    /// @dev mints fungible tokens\\n    /// @param id token type\\n    /// @param to beneficiaries of minted tokens\\n    /// @param quantities amounts of minted tokens\\n    function mintFungible(\\n        uint256 id,\\n        address[] calldata to,\\n        uint256[] calldata quantities\\n    )\\n        external\\n        override\\n        onlyCreator(id)\\n    {\\n        // sanity checks\\n        require(\\n            isFungible(id),\\n            \\\"TRIED_TO_MINT_FUNGIBLE_FOR_NON_FUNGIBLE_TOKEN\\\"\\n        );\\n\\n        // mint tokens\\n        for (uint256 i = 0; i < to.length; ++i) {\\n            // cache to reduce number of loads\\n            address dst = to[i];\\n            uint256 quantity = quantities[i];\\n\\n            // Grant the items to the caller\\n            balances[id][dst] = quantity.safeAdd(balances[id][dst]);\\n\\n            // Emit the Transfer/Mint event.\\n            // the 0x0 source address implies a mint\\n            // It will also provide the circulating supply info.\\n            emit TransferSingle(\\n                msg.sender,\\n                address(0x0),\\n                dst,\\n                id,\\n                quantity\\n            );\\n\\n            // if `to` is a contract then trigger its callback\\n            if (dst.isContract()) {\\n                bytes4 callbackReturnValue = IERC1155Receiver(dst).onERC1155Received(\\n                    msg.sender,\\n                    msg.sender,\\n                    id,\\n                    quantity,\\n                    \\\"\\\"\\n                );\\n                require(\\n                    callbackReturnValue == ERC1155_RECEIVED,\\n                    \\\"BAD_RECEIVER_RETURN_VALUE\\\"\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @dev mints a non-fungible token\\n    /// @param type_ token type\\n    /// @param to beneficiaries of minted tokens\\n    function mintNonFungible(\\n        uint256 type_,\\n        address[] calldata to\\n    )\\n        external\\n        override\\n        onlyCreator(type_)\\n    {\\n        require(\\n            isNonFungible(type_),\\n            \\\"TRIED_TO_MINT_NON_FUNGIBLE_FOR_FUNGIBLE_TOKEN\\\"\\n        );\\n\\n        // Index are 1-based.\\n        uint256 index = maxIndex[type_] + 1;\\n\\n        for (uint256 i = 0; i < to.length; ++i) {\\n            // cache to reduce number of loads\\n            address dst = to[i];\\n            uint256 id  = type_ | index + i;\\n\\n            transferNFToken(id, address(0x0), dst);\\n\\n            // You could use base-type id to store NF type balances if you wish.\\n            balances[type_][dst] = balances[type_][dst].safeAdd(1);\\n\\n            emit TransferSingle(msg.sender, address(0x0), dst, id, 1);\\n\\n            // if `to` is a contract then trigger its callback\\n            if (dst.isContract()) {\\n                bytes4 callbackReturnValue = IERC1155Receiver(dst).onERC1155Received(\\n                    msg.sender,\\n                    msg.sender,\\n                    id,\\n                    1,\\n                    \\\"\\\"\\n                );\\n                require(\\n                    callbackReturnValue == ERC1155_RECEIVED,\\n                    \\\"BAD_RECEIVER_RETURN_VALUE\\\"\\n                );\\n            }\\n        }\\n\\n        // record the `maxIndex` of this nft type\\n        // this allows us to mint more nft's of this type in a subsequent call.\\n        maxIndex[type_] = to.length.safeAdd(maxIndex[type_]);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mixin/MixinOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.5;\\n\\ncontract Context {\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"contracts/lib/LibRichErrors.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.7.5;\\n\\n\\nlibrary LibRichErrors {\\n\\n    // bytes4(keccak256(\\\"Error(string)\\\"))\\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\\n        0x08c379a0;\\n\\n    // solhint-disable func-name-mixedcase\\n    /// @dev ABI encode a standard, string revert error payload.\\n    ///      This is the same payload that would be included by a `revert(string)`\\n    ///      solidity statement. It has the function signature `Error(string)`.\\n    /// @param message The error string.\\n    /// @return The ABI encoded error.\\n    function StandardError(\\n        string memory message\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            STANDARD_ERROR_SELECTOR,\\n            bytes(message)\\n        );\\n    }\\n    // solhint-enable func-name-mixedcase\\n\\n    /// @dev Reverts an encoded rich revert reason `errorData`.\\n    /// @param errorData ABI encoded error data.\\n    function rrevert(bytes memory errorData)\\n        internal\\n        pure\\n    {\\n        assembly {\\n            revert(add(errorData, 0x20), mload(errorData))\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/lib/LibSafeMathRichErrors.sol\": {\r\n      \"content\": \"/*\\n  Copyright 2019 ZeroEx Intl.\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n*/\\n\\npragma solidity ^0.7.5;\\n\\n\\nlibrary LibSafeMathRichErrors {\\n\\n    // bytes4(keccak256(\\\"Uint256BinOpError(uint8,uint256,uint256)\\\"))\\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\\n        0xe946c1bb;\\n\\n    // bytes4(keccak256(\\\"Uint256DowncastError(uint8,uint256)\\\"))\\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\\n        0xc996af7b;\\n\\n    enum BinOpErrorCodes {\\n        ADDITION_OVERFLOW,\\n        MULTIPLICATION_OVERFLOW,\\n        SUBTRACTION_UNDERFLOW,\\n        DIVISION_BY_ZERO\\n    }\\n\\n    enum DowncastErrorCodes {\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\\n    }\\n\\n    // solhint-disable func-name-mixedcase\\n    function Uint256BinOpError(\\n        BinOpErrorCodes errorCode,\\n        uint256 a,\\n        uint256 b\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            UINT256_BINOP_ERROR_SELECTOR,\\n            errorCode,\\n            a,\\n            b\\n        );\\n    }\\n\\n    function Uint256DowncastError(\\n        DowncastErrorCodes errorCode,\\n        uint256 a\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            UINT256_DOWNCAST_ERROR_SELECTOR,\\n            errorCode,\\n            a\\n        );\\n    }\\n}\"\r\n    },\r\n    \"contracts/lib/LibAddress.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.7.5;\\n\\n\\n/**\\n * Utility library of inline functions on addresses\\n */\\nlibrary LibAddress {\\n\\n    /**\\n     * Returns whether the target address is a contract\\n     * @dev This function will return false if invoked during the constructor of a contract,\\n     * as the code is not actually created until after the constructor finishes.\\n     * @param account address of the account to check\\n     * @return whether the target address is a contract\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        // XXX Currently there is no better way to check if there is a contract in an address\\n        // than to check the size of the code at that address.\\n        // See https://ethereum.stackexchange.com/a/14016/36603\\n        // for more details about how this works.\\n        // TODO Check this again before the Serenity release, because all addresses will be\\n        // contracts then.\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/ERC1155.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.7.5;\\n\\nimport \\\"./lib/LibSafeMath.sol\\\";\\nimport \\\"./lib/LibAddress.sol\\\";\\nimport \\\"./interface/IERC1155.sol\\\";\\nimport \\\"./interface/IERC1155Receiver.sol\\\";\\nimport \\\"./mixin/MixinNonFungibleToken.sol\\\";\\nimport \\\"./mixin/MixinOwnable.sol\\\";\\nimport \\\"./WhitelistExchangesProxy.sol\\\";\\n\\ncontract ERC1155 is\\n    IERC1155,\\n    MixinNonFungibleToken,\\n    Ownable\\n{\\n    using LibAddress for address;\\n    using LibSafeMath for uint256;\\n\\n    // selectors for receiver callbacks\\n    bytes4 constant public ERC1155_RECEIVED       = 0xf23a6e61;\\n    bytes4 constant public ERC1155_BATCH_RECEIVED = 0xbc197c81;\\n\\n    // id => (owner => balance)\\n    mapping (uint256 => mapping(address => uint256)) internal balances;\\n\\n    // owner => (operator => approved)\\n    mapping (address => mapping(address => bool)) internal operatorApproval;\\n\\n    address public exchangesRegistry;\\n\\n    function setExchangesRegistry(address newExchangesRegistry) external onlyOwner() {\\n        exchangesRegistry = newExchangesRegistry;\\n    }\\n\\n    function burn(address from, uint256 id, uint256 amount) external {\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            \\\"INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n        require(isFungible(id), \\\"Don't allow burn of NFTs via this function\\\");\\n\\n        balances[id][from] = balances[id][from].safeSub(amount);\\n        emit TransferSingle(msg.sender, from, address(0x0), id, amount);\\n    }\\n\\n    /// @notice Transfers value amount of an _id from the _from address to the _to address specified.\\n    /// @dev MUST emit TransferSingle event on success.\\n    /// Caller must be approved to manage the _from account's tokens (see isApprovedForAll).\\n    /// MUST throw if `_to` is the zero address.\\n    /// MUST throw if balance of sender for token `_id` is lower than the `_value` sent.\\n    /// MUST throw on any other error.\\n    /// When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0).\\n    /// If so, it MUST call `onERC1155Received` on `_to` and revert if the return value\\n    /// is not `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`.\\n    /// @param from    Source address\\n    /// @param to      Target address\\n    /// @param id      ID of the token type\\n    /// @param value   Transfer amount\\n    /// @param data    Additional data with no specified format, sent in call to `_to`\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        override\\n        external\\n    {\\n        // sanity checks\\n        require(\\n            to != address(0x0),\\n            \\\"CANNOT_TRANSFER_TO_ADDRESS_ZERO\\\"\\n        );\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            \\\"INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n\\n        // perform transfer\\n        if (isNonFungible(id)) {\\n            require(\\n                    value == 1,\\n                    \\\"AMOUNT_EQUAL_TO_ONE_REQUIRED\\\"\\n            );\\n            require(\\n                nfOwners[id] == from,\\n                \\\"NFT_NOT_OWNED_BY_FROM_ADDRESS\\\"\\n            );\\n            transferNFToken(id, from, to);\\n            // You could keep balance of NF type in base type id like so:\\n            // uint256 baseType = getNonFungibleBaseType(_id);\\n            // balances[baseType][_from] = balances[baseType][_from].safeSub(_value);\\n            // balances[baseType][_to]   = balances[baseType][_to].safeAdd(_value);\\n        } else {\\n            balances[id][from] = balances[id][from].safeSub(value);\\n            balances[id][to] = balances[id][to].safeAdd(value);\\n        }\\n        emit TransferSingle(msg.sender, from, to, id, value);\\n\\n        // if `to` is a contract then trigger its callback\\n        if (to.isContract()) {\\n            bytes4 callbackReturnValue = IERC1155Receiver(to).onERC1155Received(\\n                msg.sender,\\n                from,\\n                id,\\n                value,\\n                data\\n            );\\n            require(\\n                callbackReturnValue == ERC1155_RECEIVED,\\n                \\\"BAD_RECEIVER_RETURN_VALUE\\\"\\n            );\\n        }\\n    }\\n\\n    /// @notice Send multiple types of Tokens from a 3rd party in one transfer (with safety call).\\n    /// @dev MUST emit TransferBatch event on success.\\n    /// Caller must be approved to manage the _from account's tokens (see isApprovedForAll).\\n    /// MUST throw if `_to` is the zero address.\\n    /// MUST throw if length of `_ids` is not the same as length of `_values`.\\n    ///  MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_values` sent.\\n    /// MUST throw on any other error.\\n    /// When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0).\\n    /// If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return value\\n    /// is not `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`.\\n    /// @param from    Source addresses\\n    /// @param to      Target addresses\\n    /// @param ids     IDs of each token type\\n    /// @param values  Transfer amounts per token type\\n    /// @param data    Additional data with no specified format, sent in call to `_to`\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        override\\n        external\\n    {\\n        // sanity checks\\n        require(\\n            to != address(0x0),\\n            \\\"CANNOT_TRANSFER_TO_ADDRESS_ZERO\\\"\\n        );\\n        require(\\n            ids.length == values.length,\\n            \\\"TOKEN_AND_VALUES_LENGTH_MISMATCH\\\"\\n        );\\n\\n        // Only supporting a global operator approval allows us to do\\n        // only 1 check and not to touch storage to handle allowances.\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            \\\"INSUFFICIENT_ALLOWANCE\\\"\\n        );\\n\\n        // perform transfers\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            // Cache value to local variable to reduce read costs.\\n            uint256 id = ids[i];\\n            uint256 value = values[i];\\n\\n            if (isNonFungible(id)) {\\n                require(\\n                    value == 1,\\n                    \\\"AMOUNT_EQUAL_TO_ONE_REQUIRED\\\"\\n                );\\n                require(\\n                    nfOwners[id] == from,\\n                    \\\"NFT_NOT_OWNED_BY_FROM_ADDRESS\\\"\\n                );\\n                transferNFToken(id, from, to);\\n            } else {\\n                balances[id][from] = balances[id][from].safeSub(value);\\n                balances[id][to] = balances[id][to].safeAdd(value);\\n            }\\n        }\\n        emit TransferBatch(msg.sender, from, to, ids, values);\\n\\n        // if `to` is a contract then trigger its callback\\n        if (to.isContract()) {\\n            bytes4 callbackReturnValue = IERC1155Receiver(to).onERC1155BatchReceived(\\n                msg.sender,\\n                from,\\n                ids,\\n                values,\\n                data\\n            );\\n            require(\\n                callbackReturnValue == ERC1155_BATCH_RECEIVED,\\n                \\\"BAD_RECEIVER_RETURN_VALUE\\\"\\n            );\\n        }\\n    }\\n\\n    /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of the caller's tokens.\\n    /// @dev MUST emit the ApprovalForAll event on success.\\n    /// @param operator  Address to add to the set of authorized operators\\n    /// @param approved  True if the operator is approved, false to revoke approval\\n    function setApprovalForAll(address operator, bool approved) external override {\\n        operatorApproval[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /// @notice Queries the approval status of an operator for a given owner.\\n    /// @param owner     The owner of the Tokens\\n    /// @param operator  Address of authorized operator\\n    /// @return           True if the operator is approved, false if not\\n    function isApprovedForAll(address owner, address operator) public override view returns (bool) {\\n        bool approved = operatorApproval[owner][operator];\\n        if (!approved && exchangesRegistry != address(0)) {\\n            return WhitelistExchangesProxy(exchangesRegistry).isAddressWhitelisted(operator) == true;\\n        }\\n        return approved;\\n    }\\n\\n    /// @notice Get the balance of an account's Tokens.\\n    /// @param owner  The address of the token holder\\n    /// @param id     ID of the Token\\n    /// @return        The _owner's balance of the Token type requested\\n    function balanceOf(address owner, uint256 id) external override view returns (uint256) {\\n        if (isNonFungibleItem(id)) {\\n            return nfOwners[id] == owner ? 1 : 0;\\n        }\\n        return balances[id][owner];\\n    }\\n\\n    /// @notice Get the balance of multiple account/token pairs\\n    /// @param owners The addresses of the token holders\\n    /// @param ids    ID of the Tokens\\n    /// @return balances_       The _owner's balance of the Token types requested\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external override view returns (uint256[] memory balances_) {\\n        // sanity check\\n        require(\\n            owners.length == ids.length,\\n            \\\"OWNERS_AND_IDS_MUST_HAVE_SAME_LENGTH\\\"\\n        );\\n\\n        // get balances\\n        balances_ = new uint256[](owners.length);\\n        for (uint256 i = 0; i < owners.length; ++i) {\\n            uint256 id = ids[i];\\n            if (isNonFungibleItem(id)) {\\n                balances_[i] = nfOwners[id] == owners[i] ? 1 : 0;\\n            } else {\\n                balances_[i] = balances[id][owners[i]];\\n            }\\n        }\\n\\n        return balances_;\\n    }\\n\\n    bytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\\n    bytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\\n\\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\\n        if (_interfaceID == INTERFACE_SIGNATURE_ERC165 ||\\n            _interfaceID == INTERFACE_SIGNATURE_ERC1155) {\\n        return true;\\n        }\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC1155Mintable.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.7.5;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n\\n/// @dev Mintable form of ERC1155\\n/// Shows how easy it is to mint new items\\ninterface IERC1155Mintable is\\n    IERC1155\\n{\\n\\n    /// @dev creates a new token\\n    /// @param isNF is non-fungible token\\n    /// @return type_ of token (a unique identifier)\\n    function create(\\n        bool isNF\\n    )\\n        external\\n        returns (uint256 type_);\\n\\n    /// @dev mints fungible tokens\\n    /// @param id token type\\n    /// @param to beneficiaries of minted tokens\\n    /// @param quantities amounts of minted tokens\\n    function mintFungible(\\n        uint256 id,\\n        address[] calldata to,\\n        uint256[] calldata quantities\\n    )\\n        external;\\n\\n    /// @dev mints a non-fungible token\\n    /// @param type_ token type\\n    /// @param to beneficiaries of minted tokens\\n    function mintNonFungible(\\n        uint256 type_,\\n        address[] calldata to\\n    )\\n        external;\\n}\\n\"\r\n    },\r\n    \"contracts/mixin/MixinContractURI.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.5;\\n\\nimport \\\"./MixinOwnable.sol\\\";\\n\\ncontract MixinContractURI is Ownable {\\n    string public contractURI;\\n\\n    function setContractURI(string calldata newContractURI) external onlyOwner() {\\n        contractURI = newContractURI;\\n    }\\n}\"\r\n    },\r\n    \"contracts/mixin/MixinTokenURI.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.5;\\n\\nimport \\\"./MixinOwnable.sol\\\";\\nimport \\\"../lib/LibString.sol\\\";\\n\\ncontract MixinTokenURI is Ownable {\\n    using LibString for string;\\n\\n    string public baseMetadataURI = \\\"\\\";\\n\\n    function setBaseMetadataURI(string memory newBaseMetadataURI) public onlyOwner() {\\n        baseMetadataURI = newBaseMetadataURI;\\n    }\\n\\n    function uri(uint256 _id) public view returns (string memory) {\\n        return LibString.strConcat(\\n        baseMetadataURI,\\n        LibString.uint2hexstr(_id)\\n        );\\n    }\\n}\"\r\n    },\r\n    \"contracts/interface/IERC1155.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.7.5;\\n\\n/// @title ERC-1155 Multi Token Standard\\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md\\n/// Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\ninterface IERC1155 {\\n\\n    /// @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred,\\n    ///      including zero value transfers as well as minting or burning.\\n    /// Operator will always be msg.sender.\\n    /// Either event from address `0x0` signifies a minting operation.\\n    /// An event to address `0x0` signifies a burning or melting operation.\\n    /// The total value transferred from address 0x0 minus the total value transferred to 0x0 may\\n    /// be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID.\\n    /// To define a token ID with no initial balance, the contract SHOULD emit the TransferSingle event\\n    /// from `0x0` to `0x0`, with the token creator as `_operator`.\\n    event TransferSingle(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256 _id,\\n        uint256 _value\\n    );\\n\\n    /// @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred,\\n    ///      including zero value transfers as well as minting or burning.\\n    ///Operator will always be msg.sender.\\n    /// Either event from address `0x0` signifies a minting operation.\\n    /// An event to address `0x0` signifies a burning or melting operation.\\n    /// The total value transferred from address 0x0 minus the total value transferred to 0x0 may\\n    /// be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID.\\n    /// To define multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event\\n    /// from `0x0` to `0x0`, with the token creator as `_operator`.\\n    event TransferBatch(\\n        address indexed _operator,\\n        address indexed _from,\\n        address indexed _to,\\n        uint256[] _ids,\\n        uint256[] _values\\n    );\\n\\n    /// @dev MUST emit when an approval is updated.\\n    event ApprovalForAll(\\n        address indexed _owner,\\n        address indexed _operator,\\n        bool _approved\\n    );\\n\\n    /// @dev MUST emit when the URI is updated for a token ID.\\n    /// URIs are defined in RFC 3986.\\n    /// The URI MUST point a JSON file that conforms to the \\\"ERC-1155 Metadata JSON Schema\\\".\\n    event URI(\\n        string _value,\\n        uint256 indexed _id\\n    );\\n\\n    /// @notice Transfers value amount of an _id from the _from address to the _to address specified.\\n    /// @dev MUST emit TransferSingle event on success.\\n    /// Caller must be approved to manage the _from account's tokens (see isApprovedForAll).\\n    /// MUST throw if `_to` is the zero address.\\n    /// MUST throw if balance of sender for token `_id` is lower than the `_value` sent.\\n    /// MUST throw on any other error.\\n    /// When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0).\\n    /// If so, it MUST call `onERC1155Received` on `_to` and revert if the return value\\n    /// is not `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`.\\n    /// @param from    Source address\\n    /// @param to      Target address\\n    /// @param id      ID of the token type\\n    /// @param value   Transfer amount\\n    /// @param data    Additional data with no specified format, sent in call to `_to`\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external;\\n\\n    /// @notice Send multiple types of Tokens from a 3rd party in one transfer (with safety call).\\n    /// @dev MUST emit TransferBatch event on success.\\n    /// Caller must be approved to manage the _from account's tokens (see isApprovedForAll).\\n    /// MUST throw if `_to` is the zero address.\\n    /// MUST throw if length of `_ids` is not the same as length of `_values`.\\n    ///  MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_values` sent.\\n    /// MUST throw on any other error.\\n    /// When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0).\\n    /// If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return value\\n    /// is not `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`.\\n    /// @param from    Source addresses\\n    /// @param to      Target addresses\\n    /// @param ids     IDs of each token type\\n    /// @param values  Transfer amounts per token type\\n    /// @param data    Additional data with no specified format, sent in call to `_to`\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external;\\n\\n    /// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of the caller's tokens.\\n    /// @dev MUST emit the ApprovalForAll event on success.\\n    /// @param operator  Address to add to the set of authorized operators\\n    /// @param approved  True if the operator is approved, false to revoke approval\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Queries the approval status of an operator for a given owner.\\n    /// @param owner     The owner of the Tokens\\n    /// @param operator  Address of authorized operator\\n    /// @return           True if the operator is approved, false if not\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /// @notice Get the balance of an account's Tokens.\\n    /// @param owner  The address of the token holder\\n    /// @param id     ID of the Token\\n    /// @return        The _owner's balance of the Token type requested\\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\\n\\n    /// @notice Get the balance of multiple account/token pairs\\n    /// @param owners The addresses of the token holders\\n    /// @param ids    ID of the Tokens\\n    /// @return balances_ The _owner's balance of the Token types requested\\n    function balanceOfBatch(\\n        address[] calldata owners,\\n        uint256[] calldata ids\\n    )\\n        external\\n        view\\n        returns (uint256[] memory balances_);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC1155Receiver.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.7.5;\\n\\n\\ninterface IERC1155Receiver {\\n\\n    /// @notice Handle the receipt of a single ERC1155 token type\\n    /// @dev The smart contract calls this function on the recipient\\n    /// after a `safeTransferFrom`. This function MAY throw to revert and reject the\\n    /// transfer. Return of other than the magic value MUST result in the\\n    ///transaction being reverted\\n    /// Note: the contract address is always the message sender\\n    /// @param operator  The address which called `safeTransferFrom` function\\n    /// @param from      The address which previously owned the token\\n    /// @param id        An array containing the ids of the token being transferred\\n    /// @param value     An array containing the amount of tokens being transferred\\n    /// @param data      Additional data with no specified format\\n    /// @return          `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /// @notice Handle the receipt of multiple ERC1155 token types\\n    /// @dev The smart contract calls this function on the recipient\\n    /// after a `safeTransferFrom`. This function MAY throw to revert and reject the\\n    /// transfer. Return of other than the magic value MUST result in the\\n    /// transaction being reverted\\n    /// Note: the contract address is always the message sender\\n    /// @param operator  The address which called `safeTransferFrom` function\\n    /// @param from      The address which previously owned the token\\n    /// @param ids       An array containing ids of each token being transferred\\n    /// @param values    An array containing amounts of each token being transferred\\n    /// @param data      Additional data with no specified format\\n    /// @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"contracts/mixin/MixinNonFungibleToken.sol\": {\r\n      \"content\": \"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.7.5;\\n\\n\\ncontract MixinNonFungibleToken {\\n    uint256 constant internal TYPE_MASK = uint256(uint128(~0)) << 128;\\n\\n    uint256 constant internal NF_INDEX_MASK = uint128(~0);\\n\\n    uint256 constant internal TYPE_NF_BIT = 1 << 255;\\n\\n    mapping (uint256 => address) internal nfOwners;\\n\\n    mapping (address => uint256[]) internal nfOwnerMapping;\\n\\n    // One index as a hack to tell the diff between unset and 0-value\\n    mapping (uint256 => uint256) internal tokenIdToNFOwnerMappingOneIndex;\\n\\n    /// @dev Returns true if token is non-fungible\\n    function isNonFungible(uint256 id) public pure returns(bool) {\\n        return id & TYPE_NF_BIT == TYPE_NF_BIT;\\n    }\\n\\n    /// @dev Returns true if token is fungible\\n    function isFungible(uint256 id) public pure returns(bool) {\\n        return id & TYPE_NF_BIT == 0;\\n    }\\n\\n    /// @dev Returns index of non-fungible token\\n    function getNonFungibleIndex(uint256 id) public pure returns(uint256) {\\n        return id & NF_INDEX_MASK;\\n    }\\n\\n    /// @dev Returns base type of non-fungible token\\n    function getNonFungibleBaseType(uint256 id) public pure returns(uint256) {\\n        return id & TYPE_MASK;\\n    }\\n\\n    /// @dev Returns true if input is base-type of a non-fungible token\\n    function isNonFungibleBaseType(uint256 id) public pure returns(bool) {\\n        // A base type has the NF bit but does not have an index.\\n        return (id & TYPE_NF_BIT == TYPE_NF_BIT) && (id & NF_INDEX_MASK == 0);\\n    }\\n\\n    /// @dev Returns true if input is a non-fungible token\\n    function isNonFungibleItem(uint256 id) public pure returns(bool) {\\n        // A base type has the NF bit but does has an index.\\n        return (id & TYPE_NF_BIT == TYPE_NF_BIT) && (id & NF_INDEX_MASK != 0);\\n    }\\n\\n    /// @dev returns owner of a non-fungible token\\n    function ownerOf(uint256 id) public view returns (address) {\\n        return nfOwners[id];\\n    }\\n\\n    /// @dev returns all owned NF tokenIds given an address\\n    function nfTokensOf(address _address) external view returns (uint256[] memory) {\\n        return nfOwnerMapping[_address];\\n    }\\n\\n    /// @dev transfer token from one NF owner to another\\n    function transferNFToken(uint256 _id, address _from, address _to) internal {\\n        require(nfOwners[_id] == _from, \\\"Token not owned by the from address\\\");\\n\\n        // chage nfOwner of the id to the new address\\n        nfOwners[_id] = _to;\\n\\n        // only delete from the \\\"from\\\" user if this tokenId mapping already exists. When the from is 0x0 then it won't\\n        if (tokenIdToNFOwnerMappingOneIndex[_id] != 0) {\\n            // get index of where the token ID is stored in the from user's array of token IDs\\n            uint256 fromTokenIdIndex = tokenIdToNFOwnerMappingOneIndex[_id] - 1;\\n\\n            // move the last token of the from user's array of token IDs to where fromTokenIdIndex is so we can shrink the array\\n            uint256 tokenIdToMove = nfOwnerMapping[_from][nfOwnerMapping[_from].length-1];\\n\\n            // make the moves and then shrink the array. make sure to move the reference of the index in the tokenIdToNFOwnerMappingOneIndex\\n            nfOwnerMapping[_from][fromTokenIdIndex] = tokenIdToMove;\\n            nfOwnerMapping[_from].pop();\\n            tokenIdToNFOwnerMappingOneIndex[tokenIdToMove] = fromTokenIdIndex + 1;\\n        }\\n\\n        // move the tokenId to the \\\"to\\\" user (and override index)\\n        nfOwnerMapping[_to].push(_id);\\n        tokenIdToNFOwnerMappingOneIndex[_id] = nfOwnerMapping[_to].length; // no need -1 because 1-index\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/WhitelistExchangesProxy.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.5;\\n\\nimport \\\"./mixin/MixinOwnable.sol\\\";\\n\\ncontract WhitelistExchangesProxy is Ownable {\\n    mapping(address => bool) internal proxies;\\n\\n    bool public paused = true;\\n    \\n    function setPaused(bool newPaused) external onlyOwner() {\\n        paused = newPaused;\\n    }\\n\\n    function updateProxyAddress(address proxy, bool status) external onlyOwner() {\\n        proxies[proxy] = status;\\n    }\\n\\n    function isAddressWhitelisted(address proxy) external view returns (bool) {\\n        if (paused) {\\n            return false;\\n        } else {\\n            return proxies[proxy];\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/lib/LibString.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.5;\\n\\nlibrary LibString {\\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\\n  function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory) {\\n      bytes memory _ba = bytes(_a);\\n      bytes memory _bb = bytes(_b);\\n      bytes memory _bc = bytes(_c);\\n      bytes memory _bd = bytes(_d);\\n      bytes memory _be = bytes(_e);\\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\\n      bytes memory babcde = bytes(abcde);\\n      uint k = 0;\\n      for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\\n      for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\\n      for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\\n      for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\\n      for (uint i = 0; i < _be.length; i++) babcde[k++] = _be[i];\\n      return string(babcde);\\n    }\\n\\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory) {\\n        return strConcat(_a, _b, _c, _d, \\\"\\\");\\n    }\\n\\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\\n        return strConcat(_a, _b, _c, \\\"\\\", \\\"\\\");\\n    }\\n\\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\\n        return strConcat(_a, _b, \\\"\\\", \\\"\\\", \\\"\\\");\\n    }\\n\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = byte(uint8(48 + _i % 10));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function uint2hexstr(uint i) internal pure returns (string memory) {\\n        if (i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j = j >> 4;\\n        }\\n        uint mask = 15;\\n        bytes memory bstr = new bytes(len);\\n        uint k = len - 1;\\n        while (i != 0){\\n            uint curr = (i & mask);\\n            bstr[k--] = curr > 9 ? byte(uint8(55 + curr)) : byte(uint8(48 + curr));\\n            i = i >> 4;\\n        }\\n        return string(bstr);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintableErc1155\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_hashtagTokenType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_batchOrderLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hashtag\",\"type\":\"string\"}],\"name\":\"UpdatedRegistry\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_NFT_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchOrderLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimedHashtags\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSupporterTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllClaimedHashtags\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hashtagTokenType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hashtagsOf\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dst\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_hashtags\",\"type\":\"string[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_hashtags\",\"type\":\"string[]\"}],\"name\":\"mintSignatureTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintableErc1155\",\"outputs\":[{\"internalType\":\"contract ERC1155Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hashtag\",\"type\":\"string\"}],\"name\":\"normalizeHashtag\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"normalizedHashtagToImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"normalizedHashtagToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_image_uris\",\"type\":\"string[]\"}],\"name\":\"setBatchImageURIsForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_batchOrderLimit\",\"type\":\"uint256\"}],\"name\":\"setBatchOrderLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_saleStarted\",\"type\":\"bool\"}],\"name\":\"setSaleStarted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supporterTokenCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToHashtagContainer\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"originalHashtag\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"normalizedHashtag\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToImageChangeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hashtag\",\"type\":\"string\"}],\"name\":\"validateHashtag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ProofOfCultureMinter","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f3bb2bdb756e75c80fef8cd2332b3b593ffb398e00000000000000000000000098bd1a61b63cfee9bdc230e2de70919a0601a4ad80000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000032","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}