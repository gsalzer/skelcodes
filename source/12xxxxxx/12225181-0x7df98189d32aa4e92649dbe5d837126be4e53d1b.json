{"status":"1","message":"OK","result":[{"SourceCode":"// File: @chainlink/contracts/src/v0.5/interfaces/AggregatorV3Interface.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n// File: contracts/price/ChainlinkService.sol\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\n\r\ncontract ChainlinkService {  \r\n  \r\n    function getLatestPrice(address feedAddress) \r\n        public \r\n        view \r\n        returns (int, uint, uint8) \r\n    {\r\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(feedAddress);\r\n        ( ,int price, ,uint timeStamp, ) = priceFeed.latestRoundData();\r\n        uint8 decimal = priceFeed.decimals();\r\n        return (price, timeStamp, decimal);\r\n    }\r\n}\r\n\r\n// File: contracts/external/YieldsterVaultMath.sol\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\n\r\n/**\r\n * @title YieldsterVaultMath\r\n * @dev Math operations with safety checks that revert on error\r\n * Renamed from SafeMath to YieldsterVaultMath to avoid conflicts\r\n * TODO: remove once open zeppelin update to solc 0.5.0\r\n */\r\nlibrary YieldsterVaultMath{\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Returns the largest of two numbers.\r\n  */\r\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a >= b ? a : b;\r\n  }\r\n}\r\n\r\n// File: contracts/interfaces/IRegistry.sol\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\ninterface IRegistry {\r\n    \r\n    function get_virtual_price_from_lp_token(address) external view returns(uint256);\r\n\r\n}\r\n\r\n// File: contracts/interfaces/yearn/IVault.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\ninterface IVault {\r\n    function token() external view returns (address);\r\n\r\n    function underlying() external view returns (address);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function controller() external view returns (address);\r\n\r\n    function governance() external view returns (address);\r\n\r\n    function getPricePerFullShare() external view returns (uint256);\r\n\r\n    function deposit(uint256) external;\r\n\r\n    function depositAll() external;\r\n\r\n    function withdraw(uint256) external;\r\n\r\n    function withdrawAll() external;\r\n}\r\n\r\n// File: contracts/interfaces/IYieldsterVault.sol\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\ninterface IYieldsterVault {\r\n    \r\n    function tokenValueInUSD() external view returns(uint256);\r\n\r\n}\r\n\r\n// File: contracts/interfaces/IYieldsterStrategy.sol\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\ninterface IYieldsterStrategy {\r\n    \r\n    function tokenValueInUSD() external view returns(uint256);\r\n\r\n}\r\n\r\n// File: contracts/price/PriceModule.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract PriceModule is ChainlinkService\r\n{\r\n\r\n    using YieldsterVaultMath for uint256;\r\n    \r\n    address public priceModuleManager;\r\n    \r\n    address public curveRegistry;\r\n\r\n    struct Token {\r\n        address feedAddress;\r\n        uint256 tokenType;\r\n        bool created;\r\n    }\r\n\r\n    mapping(address => Token) tokens;\r\n\r\n    constructor(address _curveRegistry)\r\n    public\r\n    {\r\n        priceModuleManager = msg.sender;\r\n        curveRegistry = _curveRegistry;\r\n    }\r\n\r\n    function setManager(address _manager)\r\n        external\r\n    {\r\n        require(msg.sender == priceModuleManager, \"Not Authorized\");\r\n        priceModuleManager = _manager;\r\n    }\r\n\r\n    function addToken(\r\n        address _tokenAddress, \r\n        address _feedAddress, \r\n        uint256 _tokenType\r\n    )\r\n    external\r\n    {\r\n        require(msg.sender == priceModuleManager, \"Not Authorized\");\r\n        Token memory newToken = Token({ feedAddress:_feedAddress, tokenType: _tokenType, created:true});\r\n        tokens[_tokenAddress] = newToken;\r\n    }\r\n\r\n    function setCurveRegistry(address _curveRegistry)\r\n        external\r\n    {\r\n        require(msg.sender == priceModuleManager, \"Not Authorized\");\r\n        curveRegistry = _curveRegistry;\r\n    }\r\n\r\n\r\n    function getUSDPrice(address _tokenAddress) \r\n        public \r\n        view\r\n        returns(uint256)\r\n    {\r\n        require(tokens[_tokenAddress].created, \"Token not present\");\r\n\r\n        if(tokens[_tokenAddress].tokenType == 1) {\r\n            (int price, , uint8 decimals) = getLatestPrice(tokens[_tokenAddress].feedAddress);\r\n\r\n            if(decimals < 18) {\r\n                return (uint256(price)).mul(10 ** uint256(18 - decimals));\r\n            }\r\n            else if (decimals > 18) {\r\n                return (uint256(price)).div(uint256(decimals - 18));\r\n            }\r\n            else {\r\n                return uint256(price);\r\n            }\r\n\r\n        } else if(tokens[_tokenAddress].tokenType == 2) {\r\n            return IRegistry(curveRegistry).get_virtual_price_from_lp_token(_tokenAddress);\r\n\r\n        } else if(tokens[_tokenAddress].tokenType == 3) {\r\n            address token = IVault(_tokenAddress).token();\r\n            uint256 tokenPrice = getUSDPrice(token);\r\n            return (tokenPrice.mul(IVault(_tokenAddress).getPricePerFullShare())).div(1e18);\r\n\r\n        } else if(tokens[_tokenAddress].tokenType == 4) {\r\n            return IYieldsterStrategy(_tokenAddress).tokenValueInUSD();\r\n\r\n        } else if(tokens[_tokenAddress].tokenType == 5) {\r\n            return IYieldsterVault(_tokenAddress).tokenValueInUSD();\r\n\r\n        } else {\r\n            revert(\"Token not present\");\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_curveRegistry\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenType\",\"type\":\"uint256\"}],\"name\":\"addToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curveRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"feedAddress\",\"type\":\"address\"}],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getUSDPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceModuleManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_curveRegistry\",\"type\":\"address\"}],\"name\":\"setCurveRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PriceModule","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000090e00ace148ca3b23ac1bc8c240c2a7dd9c2d7f5","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d7cf83439010d9cdafe7210b5bcc7016b4dca15e1a021a9fb4170f3d0c53723e"}]}