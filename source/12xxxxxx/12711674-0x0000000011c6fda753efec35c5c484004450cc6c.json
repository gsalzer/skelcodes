{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\nSPDX-License-Identifier: M̧͖̪̬͚͕̘̻̙̫͎̉̾͑̽͌̓̏̅͌̕͘ĩ̢͎̥̦̼͖̾̀͒̚͠n̺̼̳̩̝̐͒̑̄̕͢͞è̫̦̬͙̌͗͡ş̣̞̤̲̳̭̫̬̦͗́͂̅̉̒̍͑̑̒̈́̏͟͜™͍͙͆̒̏ͅ®̳̻̋̿©͕̅\r\n*/\r\n\r\npragma solidity ^0.8.6;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ncontract Receiver is Context, Ownable {\r\n    address payable private dev1;\r\n    address payable private dev2;\r\n    uint8 private divamount1;\r\n    uint8 private divamount2;\r\n    constructor(address payable _dev1, address payable _dev2) {\r\n        dev1 = _dev1;\r\n        dev2 = _dev2;\r\n        divamount1 = 2;\r\n        divamount2 = 2;\r\n    }\r\n    receive() external payable {\r\n        uint256 amount = msg.value;\r\n        if (amount > 0) {\r\n            dev1.transfer(amount / divamount1);\r\n            dev2.transfer(amount / divamount2);\r\n        }\r\n    }\r\n    function changeDivideAmount(uint8 newamount1, uint8 newamount2) public onlyOwner {\r\n        divamount1 = newamount1;\r\n        divamount2 = newamount2;\r\n    }\r\n    function changeDevAddresses(address payable newdev1, address payable newdev2) public onlyOwner {\r\n        dev1 = newdev1;\r\n        dev2 = newdev2;\r\n    }\r\n\t\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_dev1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_dev2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newdev1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"newdev2\",\"type\":\"address\"}],\"name\":\"changeDevAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newamount1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newamount2\",\"type\":\"uint8\"}],\"name\":\"changeDivideAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Receiver","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b0b5a6e743d5659ce742ca9fb60c5f24bde600c700000000000000000000000025e2f51b83ef5beac06ea0309beba68ae074cd12","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cf55fa4808c90a24124930c33a1def2b434299df49114e2ac03ad2aadd5ea5a3"}]}