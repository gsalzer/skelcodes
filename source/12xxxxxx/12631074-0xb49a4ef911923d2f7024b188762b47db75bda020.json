{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/upgrades/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Initializable, Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/Stake/IClusterRewards.sol\r\n\r\npragma solidity ^0.5.17;\r\n\r\ninterface IClusterRewards {\r\n    function clusterRewards(address _cluster) external returns(uint256);\r\n    function rewardWeight(bytes32 _networkId) external returns(uint256);\r\n    function totalRewardsPerEpoch() external returns(uint256);\r\n    function feeder() external returns(address);\r\n    function rewardDistributionWaitTime() external returns(uint256);\r\n    function changeFeeder(address _newFeeder) external;\r\n    function addNetwork(bytes32 _networkId, uint256 _rewardWeight) external;\r\n    function removeNetwork(bytes32 _networkId) external;\r\n    function changeNetworkReward(bytes32 _networkId, uint256 _updatedRewardWeight) external;\r\n    function feed(bytes32 _networkId, address[] calldata _clusters, uint256[] calldata _payouts, uint256 _epoch) external;\r\n    function getRewardPerEpoch(bytes32 _networkId) external view returns(uint256);\r\n    function claimReward(address _cluster) external returns(uint256);\r\n    function updateRewardDelegatorAddress(address _updatedRewardDelegator) external;\r\n    function updatePONDAddress(address _updatedPOND) external;\r\n    function changeRewardPerEpoch(uint256 _updatedRewardPerEpoch) external;\r\n    function changePayoutDenomination(uint256 _updatedPayoutDenomination) external;\r\n    function updateRewardDistributionWaitTime(uint256 _updatedRewardDistributionWaitTime) external;\r\n}\r\n\r\n// File: contracts/Stake/IClusterRegistry.sol\r\n\r\npragma solidity ^0.5.17;\r\ninterface IClusterRegistry {\r\n    function locks(bytes32 _lockId) external returns(uint256, uint256);\r\n    function lockWaitTime(bytes32 _selectorId) external returns(uint256);\r\n    function updateLockWaitTime(bytes32 _selector, uint256 _updatedWaitTime) external;\r\n    function register(bytes32 _networkId, uint256 _commission, address _rewardAddress, address _clientKey) external returns(bool);\r\n    function updateCluster(uint256 _commission, bytes32 _networkId, address _rewardAddress, address _clientKey) external;\r\n    function updateCommission(uint256 _commission) external;\r\n    function switchNetwork(bytes32 _networkId) external;\r\n    function updateRewardAddress(address _rewardAddress) external;\r\n    function updateClientKey(address _clientKey) external;\r\n    function unregister() external;\r\n    function isClusterValid(address _cluster) external returns(bool);\r\n    function getCommission(address _cluster) external returns(uint256);\r\n    function getNetwork(address _cluster) external returns(bytes32);\r\n    function getRewardAddress(address _cluster) external view returns(address);\r\n    function getClientKey(address _cluster) external view returns(address);\r\n    function getCluster(address _cluster) external;\r\n}\r\n\r\n// File: contracts/Stake/RewardDelegators.sol\r\n\r\npragma solidity >=0.4.21 <0.7.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract RewardDelegators is Initializable, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    struct Cluster {\r\n        mapping(bytes32 => uint256) totalDelegations;\r\n        mapping(address => mapping(bytes32 => uint256)) delegators;\r\n        mapping(address => mapping(bytes32 => uint256)) rewardDebt;\r\n        mapping(bytes32 => uint256) accRewardPerShare;\r\n    }\r\n\r\n    mapping(address => Cluster) clusters;\r\n\r\n    uint256 __unused_2;\r\n    address stakeAddress;\r\n    uint256 public minMPONDStake;\r\n    bytes32 public MPONDTokenId;\r\n    mapping(bytes32 => uint256) rewardFactor;\r\n    mapping(bytes32 => uint256) tokenIndex;\r\n    mapping(bytes32 => bytes32) __unused_1;\r\n    bytes32[] tokenList;\r\n    IClusterRewards clusterRewards;\r\n    IClusterRegistry clusterRegistry;\r\n    ERC20 PONDToken;\r\n\r\n    event AddReward(bytes32 tokenId, uint256 rewardFactor);\r\n    event RemoveReward(bytes32 tokenId);\r\n    event MPONDTokenIdUpdated(bytes32 MPONDTokenId);\r\n    event RewardsUpdated(bytes32 tokenId, uint256 rewardFactor);\r\n    event ClusterRewardDistributed(address cluster);\r\n    event RewardsWithdrawn(address cluster, address delegator, bytes32[] tokenIds, uint256 rewards);\r\n    event MinMPONDStakeUpdated(uint256 minMPONDStake);\r\n\r\n    modifier onlyStake() {\r\n        require(msg.sender == stakeAddress, \"RD:OS-only stake contract can invoke\");\r\n        _;\r\n    }\r\n\r\n    function initialize(\r\n        address _stakeAddress,\r\n        address _clusterRewardsAddress,\r\n        address _clusterRegistry,\r\n        address _rewardDelegatorsAdmin,\r\n        uint256 _minMPONDStake,\r\n        bytes32 _MPONDTokenId,\r\n        address _PONDAddress,\r\n        bytes32[] memory _tokenIds,\r\n        uint256[] memory _rewardFactors\r\n    ) public initializer {\r\n        require(\r\n            _tokenIds.length == _rewardFactors.length,\r\n            \"RD:I-Each TokenId should have a corresponding Reward Factor and vice versa\"\r\n        );\r\n        stakeAddress = _stakeAddress;\r\n        clusterRegistry = IClusterRegistry(_clusterRegistry);\r\n        clusterRewards = IClusterRewards(_clusterRewardsAddress);\r\n        PONDToken = ERC20(_PONDAddress);\r\n        minMPONDStake = _minMPONDStake;\r\n        emit MinMPONDStakeUpdated(_minMPONDStake);\r\n        MPONDTokenId = _MPONDTokenId;\r\n        emit MPONDTokenIdUpdated(_MPONDTokenId);\r\n        for(uint256 i=0; i < _tokenIds.length; i++) {\r\n            rewardFactor[_tokenIds[i]] = _rewardFactors[i];\r\n            tokenIndex[_tokenIds[i]] = tokenList.length;\r\n            tokenList.push(_tokenIds[i]);\r\n            emit AddReward(_tokenIds[i], _rewardFactors[i]);\r\n        }\r\n        super.initialize(_rewardDelegatorsAdmin);\r\n    }\r\n\r\n    function updateMPONDTokenId(bytes32 _updatedMPONDTokenId) public onlyOwner {\r\n        MPONDTokenId = _updatedMPONDTokenId;\r\n        emit MPONDTokenIdUpdated(_updatedMPONDTokenId);\r\n    }\r\n\r\n    function addRewardFactor(bytes32 _tokenId, uint256 _rewardFactor) public onlyOwner {\r\n        require(rewardFactor[_tokenId] == 0, \"RD:AR-Reward already exists\");\r\n        require(_rewardFactor != 0, \"RD:AR-Reward cant be 0\");\r\n        rewardFactor[_tokenId] = _rewardFactor;\r\n        tokenIndex[_tokenId] = tokenList.length;\r\n        tokenList.push(_tokenId);\r\n        emit AddReward(_tokenId, _rewardFactor);\r\n    }\r\n\r\n    function removeRewardFactor(bytes32 _tokenId) public onlyOwner {\r\n        require(rewardFactor[_tokenId] != 0, \"RD:RR-Reward doesnt exist\");\r\n        bytes32 tokenToReplace = tokenList[tokenList.length - 1];\r\n        uint256 originalTokenIndex = tokenIndex[_tokenId];\r\n        tokenList[originalTokenIndex] = tokenToReplace;\r\n        tokenIndex[tokenToReplace] = originalTokenIndex;\r\n        tokenList.pop();\r\n        delete rewardFactor[_tokenId];\r\n        delete tokenIndex[_tokenId];\r\n        emit RemoveReward(_tokenId);\r\n    }\r\n\r\n    function updateRewardFactor(bytes32 _tokenId, uint256 _updatedRewardFactor) public onlyOwner {\r\n        require(rewardFactor[_tokenId] != 0, \"RD:UR-Cant update reward that doesnt exist\");\r\n        require(_updatedRewardFactor != 0, \"RD:UR-Reward cant be 0\");\r\n        rewardFactor[_tokenId] = _updatedRewardFactor;\r\n        emit RewardsUpdated(_tokenId, _updatedRewardFactor);\r\n    }\r\n\r\n    function _updateRewards(address _cluster) public {\r\n        uint256 reward = clusterRewards.claimReward(_cluster);\r\n        if(reward == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 commissionReward = reward.mul(clusterRegistry.getCommission(_cluster)).div(100);\r\n        uint256 delegatorReward = reward.sub(commissionReward);\r\n        bytes32[] memory tokens = tokenList;\r\n        uint256[] memory delegations = new uint256[](tokens.length);\r\n        uint256 delegatedTokens = 0;\r\n        for(uint i=0; i < tokens.length; i++) {\r\n            delegations[i] = clusters[_cluster].totalDelegations[tokens[i]];\r\n            if(delegations[i] != 0) {\r\n                delegatedTokens++;\r\n            }\r\n        }\r\n        for(uint i=0; i < tokens.length; i++) {\r\n            // clusters[_cluster].accRewardPerShare[tokens[i]] = clusters[_cluster].accRewardPerShare[tokens[i]].add(\r\n            //                                                         delegatorReward\r\n            //                                                         .mul(rewardFactor[tokens[i]])\r\n            //                                                         .mul(10**30)\r\n            //                                                         .div(weightedStake)\r\n            //                                                     );\r\n            if(delegations[i] != 0) {\r\n                clusters[_cluster].accRewardPerShare[tokens[i]] = clusters[_cluster].accRewardPerShare[tokens[i]].add(\r\n                                                                    delegatorReward\r\n                                                                    .mul(10**30)\r\n                                                                    .div(delegatedTokens)\r\n                                                                    .div(delegations[i])\r\n                                                                );\r\n            }\r\n        }\r\n        transferRewards(clusterRegistry.getRewardAddress(_cluster), commissionReward);\r\n        emit ClusterRewardDistributed(_cluster);\r\n    }\r\n\r\n    function delegate(\r\n        address _delegator,\r\n        address _cluster,\r\n        bytes32[] memory _tokens,\r\n        uint256[] memory _amounts\r\n    ) public onlyStake {\r\n        _updateTokens(_delegator, _cluster, _tokens, _amounts, true);\r\n    }\r\n\r\n    function _updateTokens(\r\n        address _delegator,\r\n        address _cluster,\r\n        bytes32[] memory _tokens,\r\n        uint256[] memory _amounts,\r\n        bool _isDelegation\r\n    ) internal returns(uint256 _aggregateReward) {\r\n        _updateRewards(_cluster);\r\n\r\n        for(uint256 i = 0; i < _tokens.length; i++) {\r\n            bytes32 _tokenId = _tokens[i];\r\n            uint256 _amount = _amounts[i];\r\n\r\n            (uint256 _oldBalance, uint256 _newBalance) = _updateBalances(\r\n                _cluster,\r\n                _delegator,\r\n                _tokenId,\r\n                _amount,\r\n                _isDelegation\r\n            );\r\n\r\n            uint256 _reward = _updateDelegatorRewards(\r\n                _cluster,\r\n                _delegator,\r\n                _tokenId,\r\n                _oldBalance,\r\n                _newBalance\r\n            );\r\n\r\n            _aggregateReward = _aggregateReward.add(_reward);\r\n        }\r\n\r\n        if(_aggregateReward != 0) {\r\n            transferRewards(_delegator, _aggregateReward);\r\n            emit RewardsWithdrawn(_cluster, _delegator, _tokens, _aggregateReward);\r\n        }\r\n    }\r\n\r\n    function _updateBalances(\r\n        address _cluster,\r\n        address _delegator,\r\n        bytes32 _tokenId,\r\n        uint256 _amount,\r\n        bool _isDelegation\r\n    ) internal returns(uint256 _oldBalance, uint256 _newBalance) {\r\n        _oldBalance = clusters[_cluster].delegators[_delegator][_tokenId];\r\n\r\n        // short circuit\r\n        if(_amount == 0) {\r\n            _newBalance = _oldBalance;\r\n            return (_oldBalance, _newBalance);\r\n        }\r\n\r\n        // update balances\r\n        if(_isDelegation) {\r\n            _newBalance =  _oldBalance.add(_amount);\r\n            clusters[_cluster].totalDelegations[_tokenId] = clusters[_cluster].totalDelegations[_tokenId]\r\n                                                            .add(_amount);\r\n        } else {\r\n            _newBalance =  _oldBalance.sub(_amount);\r\n            clusters[_cluster].totalDelegations[_tokenId] = clusters[_cluster].totalDelegations[_tokenId]\r\n                                                            .sub(_amount);\r\n        }\r\n        clusters[_cluster].delegators[_delegator][_tokenId] = _newBalance;\r\n    }\r\n\r\n    function _updateDelegatorRewards(\r\n        address _cluster,\r\n        address _delegator,\r\n        bytes32 _tokenId,\r\n        uint256 _oldBalance,\r\n        uint256 _newBalance\r\n    ) internal returns(uint256 _reward) {\r\n        uint256 _accRewardPerShare = clusters[_cluster].accRewardPerShare[_tokenId];\r\n        uint256 _rewardDebt = clusters[_cluster].rewardDebt[_delegator][_tokenId];\r\n\r\n        // pending rewards\r\n        uint256 _tokenPendingRewards =  _accRewardPerShare.mul(_oldBalance).div(10**30);\r\n\r\n        // calculating pending rewards for the delegator if any\r\n        _reward = _tokenPendingRewards.sub(_rewardDebt);\r\n\r\n        // short circuit\r\n        if(_oldBalance == _newBalance && _reward == 0) {\r\n            return _reward;\r\n        }\r\n\r\n        // update the debt for next reward calculation\r\n        clusters[_cluster].rewardDebt[_delegator][_tokenId] = _accRewardPerShare.mul(_newBalance).div(10**30);\r\n    }\r\n\r\n    function undelegate(\r\n        address _delegator,\r\n        address _cluster,\r\n        bytes32[] memory _tokens,\r\n        uint256[] memory _amounts\r\n    ) public onlyStake {\r\n        _updateTokens(_delegator, _cluster, _tokens, _amounts, false);\r\n    }\r\n\r\n    function withdrawRewards(address _delegator, address _cluster) external returns(uint256) {\r\n        return _updateTokens(_delegator, _cluster, tokenList, new uint256[](tokenList.length), true);\r\n    }\r\n\r\n    function transferRewards(address _to, uint256 _amount) internal {\r\n        PONDToken.transfer(_to, _amount);\r\n    }\r\n\r\n    function isClusterActive(address _cluster) public returns(bool) {\r\n        if(\r\n            clusterRegistry.isClusterValid(_cluster)\r\n            && clusters[_cluster].totalDelegations[MPONDTokenId] > minMPONDStake\r\n        ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function getClusterDelegation(address _cluster, bytes32 _tokenId)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return clusters[_cluster].totalDelegations[_tokenId];\r\n    }\r\n\r\n    function getDelegation(address _cluster, address _delegator, bytes32 _tokenId)\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return clusters[_cluster].delegators[_delegator][_tokenId];\r\n    }\r\n\r\n    function updateMinMPONDStake(uint256 _minMPONDStake) public onlyOwner {\r\n        minMPONDStake = _minMPONDStake;\r\n        emit MinMPONDStakeUpdated(_minMPONDStake);\r\n    }\r\n\r\n    function updateStakeAddress(address _updatedStakeAddress) public onlyOwner {\r\n        require(\r\n            _updatedStakeAddress != address(0),\r\n            \"RD:USA-Stake contract address cant be 0\"\r\n        );\r\n        stakeAddress = _updatedStakeAddress;\r\n    }\r\n\r\n    function updateClusterRewards(\r\n        address _updatedClusterRewards\r\n    ) public onlyOwner {\r\n        require(\r\n            _updatedClusterRewards != address(0),\r\n            \"RD:UCR-ClusterRewards address cant be 0\"\r\n        );\r\n        clusterRewards = IClusterRewards(_updatedClusterRewards);\r\n    }\r\n\r\n    function updateClusterRegistry(\r\n        address _updatedClusterRegistry\r\n    ) public onlyOwner {\r\n        require(\r\n            _updatedClusterRegistry != address(0),\r\n            \"RD:UCR-Cluster Registry address cant be 0\"\r\n        );\r\n        clusterRegistry = IClusterRegistry(_updatedClusterRegistry);\r\n    }\r\n\r\n    function updatePONDAddress(address _updatedPOND) public onlyOwner {\r\n        require(\r\n            _updatedPOND != address(0),\r\n            \"RD:UPA-Updated POND token address cant be 0\"\r\n        );\r\n        PONDToken = ERC20(_updatedPOND);\r\n    }\r\n\r\n    function getFullTokenList() public view returns (bytes32[] memory) {\r\n        return tokenList;\r\n    }\r\n\r\n    function getAccRewardPerShare(address _cluster, bytes32 _tokenId) public view returns(uint256) {\r\n        return clusters[_cluster].accRewardPerShare[_tokenId];\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardFactor\",\"type\":\"uint256\"}],\"name\":\"AddReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cluster\",\"type\":\"address\"}],\"name\":\"ClusterRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"MPONDTokenId\",\"type\":\"bytes32\"}],\"name\":\"MPONDTokenIdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minMPONDStake\",\"type\":\"uint256\"}],\"name\":\"MinMPONDStakeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"RemoveReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardFactor\",\"type\":\"uint256\"}],\"name\":\"RewardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cluster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"tokenIds\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"RewardsWithdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"MPONDTokenId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cluster\",\"type\":\"address\"}],\"name\":\"_updateRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_rewardFactor\",\"type\":\"uint256\"}],\"name\":\"addRewardFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cluster\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_tokens\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"delegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cluster\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_tokenId\",\"type\":\"bytes32\"}],\"name\":\"getAccRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cluster\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_tokenId\",\"type\":\"bytes32\"}],\"name\":\"getClusterDelegation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cluster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_tokenId\",\"type\":\"bytes32\"}],\"name\":\"getDelegation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getFullTokenList\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_clusterRewardsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_clusterRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardDelegatorsAdmin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minMPONDStake\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_MPONDTokenId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_PONDAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_tokenIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardFactors\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cluster\",\"type\":\"address\"}],\"name\":\"isClusterActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minMPONDStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tokenId\",\"type\":\"bytes32\"}],\"name\":\"removeRewardFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cluster\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_tokens\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"undelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_updatedClusterRegistry\",\"type\":\"address\"}],\"name\":\"updateClusterRegistry\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_updatedClusterRewards\",\"type\":\"address\"}],\"name\":\"updateClusterRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_updatedMPONDTokenId\",\"type\":\"bytes32\"}],\"name\":\"updateMPONDTokenId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minMPONDStake\",\"type\":\"uint256\"}],\"name\":\"updateMinMPONDStake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_updatedPOND\",\"type\":\"address\"}],\"name\":\"updatePONDAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_updatedRewardFactor\",\"type\":\"uint256\"}],\"name\":\"updateRewardFactor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_updatedStakeAddress\",\"type\":\"address\"}],\"name\":\"updateStakeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cluster\",\"type\":\"address\"}],\"name\":\"withdrawRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RewardDelegators","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8e180888c2e6ad341f6904754fda9ac2043ff6ea1ad1dad19c614d44f15b4c3a"}]}