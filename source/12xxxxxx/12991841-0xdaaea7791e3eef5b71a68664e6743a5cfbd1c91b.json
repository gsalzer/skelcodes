{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/SimplePriceOracle.sol\r\n\r\n\r\npragma solidity ^0.6.10;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ncontract SimplePriceOracle is Ownable{\r\n\r\n    /// @dev Describe how to interpret the fixedPrice in the TokenConfig.\r\n    enum PriceSource {\r\n        FIXED_ETH, /// implies the fixedPrice is a constant multiple of the ETH price (which varies)\r\n        FIXED_USD, /// implies the fixedPrice is a constant multiple of the USD price (which is 1)\r\n        REPORTER   /// implies the price is set by the reporter\r\n    }\r\n\r\n    struct TokenConfig {\r\n        address slToken;\r\n        address underlying;\r\n        bytes32 symbolHash;\r\n        uint256 baseUnit;\r\n        PriceSource priceSource;\r\n        uint256 fixedPrice;\r\n    }\r\n\r\n    /// @notice The number of wei in 1 ETH\r\n    uint public constant ethBaseUnit = 1e18;\r\n\r\n    /// @notice Official prices by slTokne address\r\n    mapping(address => uint) public prices;\r\n    /// @notice slToken => TokenConfig\r\n    mapping(address => TokenConfig) public tokenConfigs;\r\n    /// @notice symbol hash => slToken\r\n    mapping(bytes32 => address) public slTokens;\r\n\r\n    /// @notice The event emitted when the stored price is updated\r\n    event PriceUpdated(string symbol, uint price);\r\n\r\n\r\n    bytes32 constant ethHash = keccak256(abi.encodePacked(\"ETH\"));\r\n\r\n    constructor(TokenConfig[] memory configs) public {\r\n        for(uint i = 0; i < configs.length; i++){\r\n            tokenConfigs[configs[i].slToken] = configs[i];\r\n            slTokens[configs[i].symbolHash] = configs[i].slToken;\r\n        }\r\n    }\r\n\r\n    function price(string memory symbol) external view returns (uint) {\r\n        TokenConfig memory config = getTokenConfigBySymbol(symbol);\r\n        return priceInternal(config);\r\n    }\r\n\r\n    function priceInternal(TokenConfig memory config) internal view returns (uint) {\r\n        if (config.priceSource == PriceSource.REPORTER) return prices[config.slToken];\r\n        if (config.priceSource == PriceSource.FIXED_USD) return config.fixedPrice;\r\n        if (config.priceSource == PriceSource.FIXED_ETH) {\r\n            uint usdPerEth = prices[slTokens[ethHash]];\r\n            require(usdPerEth > 0, \"ETH price not set, cannot convert to dollars\");\r\n            return mul(usdPerEth, config.fixedPrice) / ethBaseUnit;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Get the underlying price of a slToken\r\n     * @dev Implements the PriceOracle interface for Compound v2.\r\n     * @param slToken The slToken address for price retrieval\r\n     * @return Price denominated in USD, with 18 decimals, for the given slToken address\r\n     */\r\n    function getUnderlyingPrice(address slToken) external view returns (uint) {\r\n        TokenConfig memory config = tokenConfigs[slToken];\r\n         // Comptroller needs prices in the format: ${raw price} * 1e(36 - baseUnit)\r\n         // Since the prices in this view have 6 decimals, we must scale them by 1e(36 - 6 - baseUnit)\r\n        return mul(1e30, priceInternal(config)) / config.baseUnit;\r\n    }\r\n\r\n    function postPrices(string[] calldata symbols, uint[] calldata priceArr) external onlyOwner{\r\n        require(symbols.length == priceArr.length, \"symbols and prices must be 1:1\");\r\n\r\n        TokenConfig memory config;\r\n        // Try to update the view storage\r\n        for (uint i = 0; i < symbols.length; i++) {\r\n            config = getTokenConfigBySymbol(symbols[i]);\r\n            require(config.priceSource == PriceSource.REPORTER, \"only reporter prices get posted\");\r\n\r\n            prices[config.slToken] = priceArr[i];\r\n            emit PriceUpdated(symbols[i], priceArr[i]);\r\n        }\r\n    }\r\n\r\n    function getTokenConfigBySymbol(string memory symbol) public view returns (TokenConfig memory){\r\n        bytes32 symbolHash = keccak256(abi.encodePacked(symbol));\r\n        return tokenConfigs[slTokens[symbolHash]];\r\n    }\r\n\r\n    /// @dev Overflow proof multiplication\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) return 0;\r\n        uint c = a * b;\r\n        require(c / a == b, \"multiplication overflow\");\r\n        return c;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"slToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum SimplePriceOracle.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct SimplePriceOracle.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenConfigBySymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"slToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum SimplePriceOracle.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct SimplePriceOracle.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"slToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"priceArr\",\"type\":\"uint256[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"slTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenConfigs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"slToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum SimplePriceOracle.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SimplePriceOracle","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000008000000000000000000000000c597f86424eeb6599ea40f999dbb739e3aca5d820000000000000000000000000000000000000000000000000000000000000000aaaebeba3810b1e6b70781f14b2d72c1cb89c0b2b320c43bb67ff79f562f5ff40000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000002394de3827e233298fff0fdf6aa261070bfe013d000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec78b1a1d9c2b109e527c9134b25b1a1833b16b6594f92daa9f6d9b7a6024bce9d000000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000bbcc16ab7937469bb1e72337427678e7e701b9ea000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48d6aca1be9729c13d677335161321649cccae6a591554772516700f986f942eaa00000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f424000000000000000000000000009a7fb5e4499e61c7cf53acb8df7b2a8e4fb36f90000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c59998da2c5e4c6b1db946694570273b859a6e4083ccc8faa155edfc4c54eb3cfd730000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000006ddbcbaa13bde44a406780e298721483d684f1b00000000000000000000000000bc529c00c6401aef6d220be8c6ea1667f6ad93eec34391362c28ee226b3b8624a699ee507a40fa771fd01d38b03ac7b70998bbe0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dddaf1a95e57f7a74d85f366936f8a2abbc86b45000000000000000000000000bf2179859fc6d5bee9bf9158632dc51678a4100e53506a2f8b8dfe25ce412a1f5d08cbf756d6fada01a88f3f18679258c67f7f080000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000008ce5aa7812fdd6799d4c2b284a6e9f9b186e3af3000000000000000000000000c28e27870558cf22add83540d2126da2e4b464c2b5aa07bc09fd2a89ff8c3e997f711eb342e858c2b47d4a836c683e1dc27463ad0000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000002918231f262f764dbb5753a95bd7684fdb313ea40000000000000000000000006b175474e89094c44da98b954eedeac495271d0fa5e92f3efb6826155f1f728e162af9d7cda33a574a1153b58f03ea01cc37e5680000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://79135a15912105809d82f534ea79e2a2214c5f1ca14b8d41ac575e68b4d4cf11"}]}