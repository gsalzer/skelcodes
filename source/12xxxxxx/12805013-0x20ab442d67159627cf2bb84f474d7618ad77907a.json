{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/******************************************/\r\n/*       IERC20 starts here               */\r\n/******************************************/\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/******************************************/\r\n/*       Context starts here              */\r\n/******************************************/\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/******************************************/\r\n/*       Ownable starts here              */\r\n/******************************************/\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/******************************************/\r\n/*       DinoAllocation starts here       */\r\n/******************************************/\r\n\r\ncontract DinoAllocation is Ownable {\r\n\r\n    IERC20 public DINO; \r\n\r\n    uint256 public startBlock;\r\n    uint256 public endBlock;\r\n    bool initialized;\r\n    bool treasuryExecuted;\r\n    address constant treasury = 0x15c3a1ea1fc90b7fc07B8C12fb275271170fB143;\r\n    address constant liquidity = 0x06992C1E01206FBaaD17ECda434d3D0A736498a2;\r\n    uint256 constant treasuryAllocation = 3640000*1e18;\r\n    uint256 constant liquidityAllocation = 42250000*1e18;\r\n\r\n\r\n    mapping (address => Allocation) public allocations;\r\n\r\n    struct Allocation {\r\n        uint256 sharePerBlock;\r\n        uint256 lastWithdrawalBlock;\r\n        bool team;\r\n    }\r\n\r\n    /**\r\n     * @dev Populate allocations.\r\n     */\r\n    constructor()\r\n    {\r\n        // Team\r\n        allocations[0x636981134A6c38295AF85521CfCBFEBe6c5995eC] = Allocation({\r\n            sharePerBlock: 273972602739726000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: true  \r\n        });\r\n        allocations[0x1b2a371135bfD32C5AeB58238E54D2b26f756D41] = Allocation({\r\n            sharePerBlock: 410958904109589000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: true  \r\n        });\r\n        allocations[0x4a3953B59132ed60999e9954738D1CD588F2BD74] = Allocation({\r\n            sharePerBlock: 273972602739726000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: true  \r\n        });\r\n        allocations[0x4D6945c269195Ab9ef821ed67baEeC7c16B5002E] = Allocation({\r\n            sharePerBlock: 479452054794521000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: true  \r\n        });\r\n        allocations[0x350661d34c58a8eb8ec7e3aD5bc809753B60FD59] = Allocation({\r\n            sharePerBlock: 239726027397260000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: true  \r\n        });\r\n        allocations[0x4a7fAA271539b039C72c15bC085802e19EA25432] = Allocation({\r\n            sharePerBlock: 239726027397260000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: true  \r\n        });\r\n        allocations[0xD534B942A243e6fc69C66d1ec3AbcD55991bE24C] = Allocation({\r\n            sharePerBlock: 164383561643836000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: true  \r\n        });\r\n        allocations[0x267A6E6d9e4cD70aA0382B02E9b5cDcE67807a93] = Allocation({\r\n            sharePerBlock: 315068493150685000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: true  \r\n        });\r\n        allocations[0x4B2EC9B3202c2de0923bf21A099121656c087ba5] = Allocation({\r\n            sharePerBlock: 205479452054795000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: true  \r\n        });\r\n        allocations[0x04FB55364a095a0566AFEb96cC73F0c400871ac5] = Allocation({\r\n            sharePerBlock: 273972602739726000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: true  \r\n        });\r\n        allocations[0x8d1D80296Bc224B50c31412A0C3C2534581D3c99] = Allocation({\r\n            sharePerBlock: 295047418335090000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: true  \r\n        });\r\n        allocations[0x3217ee17d78260EC39d2ece486C143bB0507cFD8] = Allocation({\r\n            sharePerBlock: 326659641728135000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: true  \r\n        });\r\n        allocations[0x4D5764BFBfFa5F09B7966D876Bfc4dF4E749991F] = Allocation({\r\n            sharePerBlock: 337197049525817000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: true  \r\n        });\r\n        allocations[0xF131aCEF5A608241467dA98f3f6961a37874176A] = Allocation({\r\n            sharePerBlock: 41095890410958900,\r\n            lastWithdrawalBlock: block.number,\r\n            team: true  \r\n        });\r\n        allocations[0xF0190aacF9Cd574004D2bE21cb780c45d51A50a7] = Allocation({\r\n            sharePerBlock: 41095890410958900,\r\n            lastWithdrawalBlock: block.number,\r\n            team: true  \r\n        });\r\n        allocations[0xb426CF07A9cFe0c0674D9B551Fd48144d2a18885] = Allocation({\r\n            sharePerBlock: 27397260273972600,\r\n            lastWithdrawalBlock: block.number,\r\n            team: true  \r\n        });\r\n\r\n        // Investors\r\n        allocations[0xFbA3E27cC635051Bb030Dcc7EAa0a224dB2dD5C7] = Allocation({\r\n            sharePerBlock: 177569258166492000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x120e6B24f0E60d952db82E4a092fbA6806A7B45B] = Allocation({\r\n            sharePerBlock: 177569258166492000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x57500Df016294f21B5366a35B1B6669689BDC69D] = Allocation({\r\n            sharePerBlock: 177569258166492000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x1814b585Db8ACefAa4ebf96240Ed28528B8CC958] = Allocation({\r\n            sharePerBlock: 177569258166492000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0xf957Fa14eA72a9ECD7BDC06c5be89A5a34C7aa89] = Allocation({\r\n            sharePerBlock: 41095890410958900,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x96a5fec92E43E7E68502C75FE98abc9436BD1e40] = Allocation({\r\n            sharePerBlock: 41095890410958900,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x3974B53404800c7bd83d1FD0fDF014a5E394B300] = Allocation({\r\n            sharePerBlock: 651263317175975000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x66E9cb06ab7CC033c6d40173384cee7D7d177359] = Allocation({\r\n            sharePerBlock: 21917808219178100,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x4Cb3E05e4eE4F55173792F1432A004AdE5e3E46a] = Allocation({\r\n            sharePerBlock: 19178082191780800,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0xFa2C58416e564fc4C19f09747b7aADBCc94066a6] = Allocation({\r\n            sharePerBlock: 10958904109589000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x08cC804300491D1A500520b6264ae7A5B52414A7] = Allocation({\r\n            sharePerBlock: 76712328767123300,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x8Ae4aA31C8D4cbBCdeF62fA2e301145bfd77F06B] = Allocation({\r\n            sharePerBlock: 28006086406743900,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x9080196182F77B89BB5B0EeE3Ddb48cFA716c4c3] = Allocation({\r\n            sharePerBlock: 2191780821917810,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x0ACAC28a6d03570896236a99847A92c2e7f9B6Bd] = Allocation({\r\n            sharePerBlock: 35312025289778700,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x58D95B6B20dEDCA1b066d8478fF6Df2f1F736714] = Allocation({\r\n            sharePerBlock: 261796042149631000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x67df21B9a8e79352649E0A304767eC02571c8197] = Allocation({\r\n            sharePerBlock: 176560122233930000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x9B5ea8C719e29A5bd0959FaF79C9E5c8206d0499] = Allocation({\r\n            sharePerBlock: 136986301369863000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x57BB6525C489EE43BEe420F90379B047d7c40f31] = Allocation({\r\n            sharePerBlock: 136986301369863000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x66CC7F5F88f65ad480a285b1FCAb824Cf0617dF1] = Allocation({\r\n            sharePerBlock: 219178082191781000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x9413Da1bC1797179e5D019A9420cEEc44680A4bf] = Allocation({\r\n            sharePerBlock: 76712328767123300,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x3a6b4135B5B83c0A9AC46eDBFDc413952854db3d] = Allocation({\r\n            sharePerBlock: 7671232876712330,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0xd8190FD3E70A76a2222E692eba259b77ca903594] = Allocation({\r\n            sharePerBlock: 54794520547945200,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x0DC874Fb5260Bd8749e6e98fd95d161b7605774D] = Allocation({\r\n            sharePerBlock: 219178082191781000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0xE6da9b009b16e55dF73bFA544C4f4B32E74dFFbE] = Allocation({\r\n            sharePerBlock: 118721462592202000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0xBbb6e8eabFBF4D1A6ebf16801B62cF7Bdf70cE57] = Allocation({\r\n            sharePerBlock: 14003043203372000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0xb6C3B5Efc0f4AA24f9e18d6Ce3f80e0371316657] = Allocation({\r\n            sharePerBlock: 35799085353003200,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0xB1885A84C53f22587a3e49A27e8C92c8d6B44374] = Allocation({\r\n            sharePerBlock: 45662099051633300,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x84FABD111C71A5A0B20E5864fFcb213C7429e556] = Allocation({\r\n            sharePerBlock: 152207001053741000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0xEaf3B28A87D498530cDC7f0700E70502CF896D3f] = Allocation({\r\n            sharePerBlock: 304414002107482000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x2eE1367F51B4381feA82DBF2729c2226DE578084] = Allocation({\r\n            sharePerBlock: 45662099051633300,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0xF14c9dbDb31b0a18aF44Fcf97Ed12b0abfE1b92e] = Allocation({\r\n            sharePerBlock: 60882798735511100,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0xb8F03E0a03673B5e9E094880EdE376Dc2caF4286] = Allocation({\r\n            sharePerBlock: 76103502634352000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x9b7686c3af3f6Fb73374E1dC89D971335f09fAFb] = Allocation({\r\n            sharePerBlock: 3044139093782930,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0xc055A10E57598303B2874a665dD79BE92dc41777] = Allocation({\r\n            sharePerBlock: 30441399367755500,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x99F229481Bbb6245BA2763f224f733A7Cd784f0c] = Allocation({\r\n            sharePerBlock: 15220699683877800,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0xF5bC8bb5FA79B608f55AfbE002884f736dAf11ee] = Allocation({\r\n            sharePerBlock: 12176560590094800,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0xf2BADeCF0c986b6E4039AF276494E744a9A0432F] = Allocation({\r\n            sharePerBlock: 6070014752370920,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0xfDaA37F9D01f96b348C7Ce8853EA563082ff71Bb] = Allocation({\r\n            sharePerBlock: 9132421496311910,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0xbe535c49d8e65DA9cd9a809A3D59248A89A2496B] = Allocation({\r\n            sharePerBlock: 1522069546891460,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0xcbf4Ec5e64ff05C170a07fa839Ece108f7332734] = Allocation({\r\n            sharePerBlock: 9132421496311910,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x8c4209A00682164F1b1fFFe7D11895a4beC45855] = Allocation({\r\n            sharePerBlock: 3044139093782930,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x34ceD0b5f7F4983CF12b3D598E76BCb610321A01] = Allocation({\r\n            sharePerBlock: 6088278187565860,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0xd2337058Ef96b3E2675b0f1cc0F0ef0b2D425f6A] = Allocation({\r\n            sharePerBlock: 9132421496311910,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x0051437667689B36f9cFec31E4F007f1497c0F98] = Allocation({\r\n            sharePerBlock: 6088278187565860,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x4d5a77B869312A8E2b3daA67C01C59753F6254AE] = Allocation({\r\n            sharePerBlock: 6088278187565860,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x90FFFbbdf770eFB530d950C24bf56a292CDab3F7] = Allocation({\r\n            sharePerBlock: 9132421496311910,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0xbb3016fa2eeCD283eF40133754a83313D15210c1] = Allocation({\r\n            sharePerBlock: 6088278187565860,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x9C9bb489800568943a42082E7a8294544d298ac5] = Allocation({\r\n            sharePerBlock: 1522069546891460,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0xb5d226e52E1547119EF74B90890b7e22A09339A3] = Allocation({\r\n            sharePerBlock: 1522069546891460,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x2Aaa2483b5cFe7719595779579Cf36819021bcaE] = Allocation({\r\n            sharePerBlock: 6088278187565860,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x8c5608579970CDf93EE59A05f5d97a3f15B843Bc] = Allocation({\r\n            sharePerBlock: 71841702845100100,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0xae4F08dF03f1Dd837f5e1c96255E078426e4f4Ab] = Allocation({\r\n            sharePerBlock: 65753424657534200,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x3b8D277F1D1f194733F204aa85dAdb0fa7ffE7c3] = Allocation({\r\n            sharePerBlock: 12176560590094800,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x285b7EEa81a5B66B62e7276a24c1e0F83F7409c1] = Allocation({\r\n            sharePerBlock: 15220699683877800,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0xE0a47370ef5847add20330282105C498CD625aeF] = Allocation({\r\n            sharePerBlock: 8036531085353000,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        allocations[0x10885898F58f73Cba69E0Df9114779d8740E8B83] = Allocation({\r\n            sharePerBlock: 13698630136986300,\r\n            lastWithdrawalBlock: block.number,\r\n            team: false  \r\n        });\r\n        \r\n        startBlock = block.number;\r\n        endBlock = block.number + 2372500;\r\n    }\r\n\r\n    function initialize(IERC20 _DINO) external onlyOwner\r\n    {\r\n        require(initialized == false, \"Already initialized.\");\r\n        initialized = true;\r\n        DINO = _DINO;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw all unlocked shares.\r\n     */\r\n    function withdrawShare() external\r\n    {\r\n        require(allocations[msg.sender].lastWithdrawalBlock < endBlock, \"All shares have already been claimed.\");\r\n        uint256 unlockedBlock;\r\n        if (block.number > endBlock) {\r\n            unlockedBlock = endBlock;\r\n        } else {\r\n            unlockedBlock = block.number;\r\n        }\r\n        uint256 tempLastWithdrawalBlock = allocations[msg.sender].lastWithdrawalBlock;\r\n        allocations[msg.sender].lastWithdrawalBlock = unlockedBlock;                    // Avoid reentrancy\r\n        uint256 unlockedShares = allocations[msg.sender].sharePerBlock * (unlockedBlock - tempLastWithdrawalBlock);\r\n        DINO.transfer(msg.sender, unlockedShares);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the remaining balance of a shareholder's total outstanding shares.\r\n     */\r\n    function getOutstandingShares() external view returns(uint256)\r\n    {\r\n        return allocations[msg.sender].sharePerBlock * (endBlock - allocations[msg.sender].lastWithdrawalBlock);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the balance of a shareholder's claimable shares.\r\n     */\r\n    function getUnlockedShares() external view returns(uint256)\r\n    {\r\n        uint256 unlockedBlock;\r\n        if (block.number > endBlock) {\r\n            unlockedBlock = endBlock;\r\n        } else {\r\n            unlockedBlock = block.number;\r\n        }\r\n        return allocations[msg.sender].sharePerBlock * (unlockedBlock - allocations[msg.sender].lastWithdrawalBlock);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the withdrawn shares of a shareholder.\r\n     */\r\n    function getWithdrawnShares() external view returns(uint256)\r\n    {\r\n        return allocations[msg.sender].sharePerBlock * (allocations[msg.sender].lastWithdrawalBlock - startBlock);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total shares of shareholder.\r\n     */\r\n    function getTotalShares(address shareholder) external view returns(uint256)\r\n    {\r\n        return allocations[shareholder].sharePerBlock * 2372500;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw initial share attributed towards the treasury.\r\n     */\r\n    function treasuryWithdraw() external \r\n    {\r\n        require(treasuryExecuted == false, \"Treasury share already withdrawn.\");\r\n        treasuryExecuted = true;\r\n        DINO.transfer(treasury, treasuryAllocation);\r\n        DINO.transfer(liquidity, liquidityAllocation);\r\n    }\r\n\r\n    /**\r\n     * @dev Emergency function to change allocations.\r\n     */\r\n    function emergencyChangeAllocation(address _allocation, uint256 _newSharePerBlock) external onlyOwner \r\n    {\r\n        require (allocations[_allocation].team == false, \"Can't change allocations of team members.\");\r\n        allocations[_allocation].sharePerBlock = _newSharePerBlock;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DINO\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawalBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"team\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allocation\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newSharePerBlock\",\"type\":\"uint256\"}],\"name\":\"emergencyChangeAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOutstandingShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawnShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_DINO\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DinoAllocation","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4cdec772b92a3dd193d84f50ecd96e59f13353c4f46299e3df0a75e7e098cbd8"}]}