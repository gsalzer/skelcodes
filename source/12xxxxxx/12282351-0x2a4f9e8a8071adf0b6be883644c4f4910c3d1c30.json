{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.7.0;\r\n\r\ninterface IUniswap {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    \r\n    function getAmountsOut(\r\n        uint amountIn, \r\n        address[] memory path\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(\r\n        address recipient, \r\n        uint256 amount\r\n    ) external returns (bool);\r\n    \r\n    function approve(\r\n        address spender, \r\n        uint256 amount\r\n    ) external returns (bool);\r\n    \r\n    function balanceOf(\r\n        address account\r\n    ) external view returns (uint256);\r\n}\r\n\r\ncontract Swap {\r\n    address owner;\r\n    mapping(address => bool) private whitelistedMap;\r\n\r\n    address internal constant UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    \r\n    IUniswap public uniswapRouter;\r\n    \r\n    event Swap(address indexed account, address[] indexed path, uint amountIn, uint amountOut);\r\n\r\n    // MODIFIERS\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onWhiteList {\r\n        require(whitelistedMap[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        uniswapRouter = IUniswap(UNISWAP_ROUTER_ADDRESS);\r\n        owner = msg.sender;\r\n        setAddress(owner,true);\r\n    }\r\n\r\n    function setAddress(address _address,bool flag) public onlyOwner {\r\n        whitelistedMap[_address] = flag;\r\n    }\r\n    // WITHDRAW\r\n    function withdrawToken(address to,address token) external onlyOwner {\r\n        require(IERC20(token).balanceOf(address(this)) > 0);\r\n        IERC20(token).transfer(to, IERC20(token).balanceOf(address(this)));\r\n    }\r\n\r\n    // GET BALANCE\r\n    function getTokenBalance(address token) public view onWhiteList returns (uint256){\r\n        return IERC20(token).balanceOf(address(this));\r\n    }\r\n\r\n    // SWAP\r\n    function tradeIn(\r\n        uint amountIn,uint amountMinOut,\r\n        address[] calldata path\r\n    ) external onWhiteList {\r\n        uint256 amount=getTokenBalance(path[0]);//token balance\r\n        if(amount>=amountIn){\r\n            uint256[] memory amounts = getAmountOut(amountIn, path);\r\n            if(amounts[amounts.length - 1]>=amountMinOut){\r\n                IERC20(path[0]).approve(address(uniswapRouter), amountIn);\r\n                uniswapRouter.swapExactTokensForTokens(\r\n                amountIn,\r\n                amountMinOut,\r\n                path,\r\n                address(this),\r\n                block.timestamp + 60*30\r\n                );\r\n            }\r\n            emit Swap(msg.sender, path, amountIn, amounts[amounts.length - 1]);\r\n        }\r\n        \r\n\r\n    }\r\n    function tradeOut(\r\n        address[] calldata path,uint amountMinOut\r\n    ) external onWhiteList {\r\n        uint256 amount=getTokenBalance(path[0]);//token balance\r\n        \r\n        if(amount>0){\r\n            uint256[] memory amounts = getAmountOut(amount, path);\r\n            if(amounts[amounts.length - 1]>=amountMinOut){\r\n                IERC20(path[0]).approve(address(uniswapRouter), amount);\r\n                uniswapRouter.swapExactTokensForTokens(\r\n                amount,\r\n                amountMinOut,\r\n                path,\r\n                address(this),\r\n                block.timestamp + 60*30\r\n                );\r\n            }\r\n            emit Swap(msg.sender, path, amount, amounts[amounts.length - 1]);\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    // UTILS    \r\n    function getAmountOut(uint amountIn, address[] memory path) private returns(uint256[] memory){\r\n        return uniswapRouter.getAmountsOut(amountIn, path);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountMinOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"tradeIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountMinOut\",\"type\":\"uint256\"}],\"name\":\"tradeOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Swap","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d7a8109cef06ccb2d50f9696ac31d3311e70a15d8838fdf01574577bce4aaf82"}]}