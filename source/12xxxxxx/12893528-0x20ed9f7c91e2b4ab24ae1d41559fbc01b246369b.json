{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.5.11;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\ncontract Ownable {\r\n    address public owner;\r\n    address public manager;\r\n    uint private unlocked = 1;\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"1000\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == owner || (manager != address(0) && msg.sender == manager), \"1000\");\r\n        _;\r\n    }\r\n\r\n    function setManager(address user) external onlyOwner {\r\n        manager = user;\r\n    }\r\n\r\n    modifier lock() {\r\n        require(unlocked == 1, '1001');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n}\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, '1002');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, '1002');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, '1002');\r\n    }\r\n    \r\n    function div(uint x,uint y) internal pure returns (uint z){\r\n        if(x==0){\r\n            return 0;\r\n        }\r\n        require(y == 0 || (z = x / y) > 0, '100');\r\n    }\r\n}\r\n\r\n/**\r\n1000:必须是管理员\r\n1001:交易暂时锁定\r\n1002:只允许矿工合约回调\r\n1003:不接收ETH\r\n1004:不能购买TGToken\r\n1005:存量不足\r\n1006:超出发行量\r\n1007:不允许注册\r\n1008:矿工合约无效\r\n1009:签名无效\r\n1010:已领取过的空投或奖励\r\n3000:已停止兑换\r\n3001:不允许增发\r\n3002:不允许销毁\r\n */\r\n\r\ncontract BaseERC20 is IERC20,Ownable{\r\n    using SafeMath for uint;\r\n    string public name;\r\n    string public symbol;\r\n    string public desc = \"\";\r\n    uint public constant decimals = 18;\r\n    uint public totalSupply;\r\n    uint public sellRatio = 0;\r\n    uint public developTime;\r\n    bool public allowMint = false;\r\n    bool public allowBurn = false;\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => mapping(address => uint)) public allowance;\r\n\r\n\r\n    constructor (\r\n        string memory _name,string memory _symbol,uint _totalSupply,\r\n        bool _allowMint, bool _allowBurn\r\n    ) public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        totalSupply = _totalSupply * 10 ** decimals;\r\n        allowMint = _allowMint;\r\n        allowBurn = _allowBurn;\r\n        //solium-disable-next-line\r\n        developTime = block.timestamp;\r\n    }\r\n\r\n    function _approve(address from, address spender, uint value) internal {\r\n        allowance[from][spender] = value;\r\n        emit Approval(from, spender, value);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function _transferFrom(address spender, address from, address to, uint value) internal {\r\n        if (allowance[from][spender] != uint(-1)) {\r\n            allowance[from][spender] = allowance[from][spender].sub(value);\r\n        }\r\n        _transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint value) external returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool) {\r\n        _transferFrom(msg.sender, from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferBatch(address[] calldata addresses, uint[] calldata values) external payable returns (bool success){\r\n        require(\r\n            addresses.length > 0 &&\r\n            (addresses.length == values.length || values.length == 1),\r\n            '1005'\r\n        );\r\n\r\n        uint256 total = 0;\r\n        uint256 length = addresses.length;\r\n        if(values.length == 1){\r\n            total = values[0].mul(length);\r\n        }else{\r\n            for(uint256 i = 0 ; i < length; i++){\r\n                total = total.add(values[i]);\r\n            }\r\n        }\r\n\r\n        require(msg.value > 0 ? msg.value >= total : balanceOf[msg.sender] >= total,\"1002\");\r\n\r\n        for(uint i = 0 ; i < addresses.length; i++){\r\n            address to = addresses[i];\r\n            uint amount = (values.length == 1) ? values[0] : values[i];\r\n            if(msg.value > 0){\r\n                address(uint160(to)).transfer(amount);\r\n            }else{\r\n                _transfer(msg.sender, to, amount);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function setSellRatio(uint ratio) external onlyOwner{\r\n        sellRatio = ratio;\r\n    }\r\n\r\n}\r\n\r\ncontract UserToken is BaseERC20{\r\n    using SafeMath for uint;\r\n    event Buy(address indexed from,uint value,uint tokens);\r\n    event Mint(address indexed from,uint amount,uint total,uint balance);\r\n    event Burn(address indexed from,uint amount,uint total,uint balance);\r\n    constructor(\r\n        address _owner,string memory _name,string memory _symbol,uint _totalSupply,\r\n        bool _allowMint, bool _allowBurn\r\n    ) BaseERC20(_name,_symbol,_totalSupply,_allowMint,_allowBurn) public {\r\n        owner = _owner;\r\n        balanceOf[owner] = totalSupply;\r\n    }\r\n\r\n    function () external payable {\r\n        buy();\r\n    }\r\n    function buy() public payable{\r\n        require(sellRatio > 0, '3000');\r\n        uint tokens = msg.value.mul(sellRatio);\r\n        _transfer(owner,msg.sender,tokens);\r\n        address(uint160(owner)).transfer(msg.value);\r\n        emit Buy(msg.sender, msg.value, tokens);\r\n    }\r\n    function mint(address account, uint amount) external onlyOwner{\r\n        require(allowMint,\"3001\");\r\n        totalSupply = totalSupply.add(amount);\r\n        balanceOf[account] = balanceOf[account].add(amount);\r\n        emit Mint(account,amount,totalSupply,balanceOf[account]);\r\n    }\r\n\r\n    function burn(uint amount) external{\r\n        require(allowBurn,\"3002\");\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);\r\n        totalSupply = totalSupply.sub(amount);\r\n        emit Burn(msg.sender, amount, totalSupply,balanceOf[msg.sender]);\r\n    }\r\n\r\n    function setDesc(string calldata _desc) external onlyOwner{\r\n        desc = _desc;\r\n    }\r\n\r\n    function viewSummary() external view returns (\r\n        string memory _name,string memory _symbol,uint _decimals,uint _totalSupply,\r\n        bool _allowMint, bool _allowBurn,uint _sellRatio,uint _developTime,string memory _desc\r\n    ){\r\n        return (name,symbol,decimals,totalSupply,allowMint,allowBurn,sellRatio,developTime,desc);\r\n    }\r\n}\r\n\r\ncontract TGToken is BaseERC20 {\r\n    using SafeMath for uint;\r\n    address public lastMintContract;\r\n    mapping(address => bool) mintContracts;\r\n    uint public limitSupply;\r\n    uint sellQuantity = 0;\r\n    mapping(address => UserToken) public factorys;\r\n    bytes32 DOMAIN_SEPARATOR;\r\n    bytes32 constant AIRDROP_TYPE = keccak256('AirDrop(address receiver,address issuer,uint256 value,uint256 nonce)');\r\n    bytes32 public constant PERMIT_TYPE = keccak256('Permit(address owner,address spender,uint256 value)');\r\n    mapping(address=>mapping(uint=>uint)) public airDropNonces;\r\n    event Buy(address indexed from,uint value,uint tokens);\r\n    event MintCallback(address indexed from,uint amount,uint total,uint balance);\r\n    event RedeemCallback(address indexed from,uint amount,uint total,uint balance);\r\n    event CreateToken(address indexed contractAddress,address userAddress);\r\n\r\n    constructor () BaseERC20('Telegram Token','TG',3 * 10 ** 6,false,false) public {\r\n        limitSupply = 3 ether * 10 ** 8;\r\n        sellRatio = 10000;\r\n        balanceOf[msg.sender] = totalSupply;\r\n        mintContracts[msg.sender] = true;\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\r\n                keccak256('Telegram Token'),\r\n                keccak256(\"1\"),\r\n                1,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    modifier onlyMintContract() {\r\n        require(mintContracts[msg.sender], '1002');\r\n        _;\r\n    }\r\n\r\n    function () external payable {\r\n        revert('1003');\r\n    }\r\n\r\n    function buy() public payable{\r\n        require(sellRatio > 0, '1004');\r\n        uint tokens = msg.value.mul(sellRatio);\r\n        require(sellQuantity >= tokens, '1005');\r\n        sellQuantity = sellQuantity.sub(tokens);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(tokens);\r\n        address(uint160(owner)).transfer(msg.value);\r\n        emit Buy(msg.sender, msg.value, tokens);\r\n    }\r\n\r\n    function mint(address miner,uint tokens,uint additional) external onlyMintContract returns (bool success){\r\n        uint increment = tokens.add(additional);\r\n        uint _totalSupply = totalSupply.add(increment);\r\n        require(_totalSupply <= limitSupply, '1006');\r\n\r\n        balanceOf[miner] = balanceOf[miner].add(tokens);\r\n        if(additional > 0){\r\n            balanceOf[owner] = balanceOf[owner].add(additional);\r\n        }\r\n        totalSupply = _totalSupply;\r\n        emit MintCallback(miner,tokens,totalSupply,balanceOf[miner]);\r\n        return true;\r\n    }\r\n\r\n    function redeem(address miner,uint tokens) external onlyMintContract returns (bool success){\r\n        balanceOf[miner] = balanceOf[miner].sub(tokens);\r\n        totalSupply = totalSupply.sub(tokens);\r\n        emit RedeemCallback(miner, tokens, totalSupply,balanceOf[miner]);\r\n        return true;\r\n    }\r\n\r\n    function addMintContract(address mint_contract) external onlyOwner{\r\n        require(mint_contract != address(0), '1008');\r\n        mintContracts[mint_contract] = true;\r\n        lastMintContract = mint_contract;\r\n    }\r\n\r\n    function setSellQuantity(uint quantity) external onlyOwner{\r\n        if(quantity == 0){\r\n            totalSupply = totalSupply.sub(sellQuantity);\r\n            sellQuantity = 0;\r\n        }else{\r\n            sellQuantity = sellQuantity.add(quantity);\r\n            totalSupply = totalSupply.add(quantity);\r\n            require(totalSupply<=limitSupply,\"1006\");\r\n        }\r\n    }\r\n\r\n    function viewSummary() external view\r\n        returns (uint balance,uint _totalSupply,uint _limitSupply,\r\n        uint _sellRatio,uint _sellQuantity,address _lastMintContract)\r\n    {\r\n        return (address(this).balance,totalSupply,limitSupply,sellRatio,sellQuantity,lastMintContract);\r\n    }\r\n\r\n    function permit(address owner, address spender, uint value, uint8 v, bytes32 r, bytes32 s) external {\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                '\\x19\\x01',\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(abi.encode(PERMIT_TYPE, owner, spender, value))\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(recoveredAddress != address(0) && recoveredAddress == owner, '1009');\r\n        _approve(owner, spender, value);\r\n    }\r\n\r\n    function airDrop(address receiver,address issuer,uint256 value,uint256 nonce, uint8 v, bytes32 r, bytes32 s) public {\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                '\\x19\\x01',\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(abi.encode(AIRDROP_TYPE, receiver,issuer, value,nonce))\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(recoveredAddress != address(0) && recoveredAddress == issuer, '1009');\r\n        require(airDropNonces[receiver][nonce]==0,'1010');\r\n        airDropNonces[receiver][nonce] = value;\r\n        _transfer(issuer, receiver, value);\r\n    }\r\n\r\n    function factory(\r\n        string calldata _name,string calldata _symbol,uint _totalSupply,\r\n        bool _allowMint, bool _allowBurn\r\n    ) external {\r\n        factorys[msg.sender] = new UserToken(msg.sender,_name,_symbol,_totalSupply,_allowMint,_allowBurn);\r\n        emit CreateToken(address(factorys[msg.sender]),msg.sender);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"CreateToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"MintCallback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"RedeemCallback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERMIT_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"mint_contract\",\"type\":\"address\"}],\"name\":\"addMintContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"airDrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"airDropNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"allowMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"desc\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_allowMint\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_allowBurn\",\"type\":\"bool\"}],\"name\":\"factory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"factorys\",\"outputs\":[{\"internalType\":\"contract UserToken\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lastMintContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limitSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"additional\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"setSellQuantity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setSellRatio\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"transferBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewSummary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limitSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lastMintContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TGToken","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://1a049b2c6bacf093e4018792c9a8622c8f032285f8e79047cc357300ae9ec9d6"}]}