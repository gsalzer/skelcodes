{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Users/Lloyd/Desktop/ShareFinderToken/contracts/ShareFinder.sol\": {\r\n      \"content\": \"/* \\r\\n * Copyright (c) Capital Market and Technology Association, 2018-2019\\r\\n * https://cmta.ch\\r\\n *\\r\\n * This Source Code Form is subject to the terms of the Mozilla Public\\r\\n * License, v. 2.0. If a copy of the MPL was not distributed with this\\r\\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \\r\\n */\\r\\n\\r\\npragma solidity ^0.5.3;\\r\\n\\r\\nimport \\\"./zeppelin/math/SafeMath.sol\\\";\\r\\nimport \\\"./zeppelin/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./zeppelin/lifecycle/Pausable.sol\\\";\\r\\nimport \\\"./zeppelin/ownership/Ownable.sol\\\";\\r\\nimport \\\"./interface/IIssuable.sol\\\";\\r\\nimport \\\"./interface/IRedeemable.sol\\\";\\r\\nimport \\\"./interface/IDestroyable.sol\\\";\\r\\nimport \\\"./interface/IReassignable.sol\\\";\\r\\nimport \\\"./interface/IIdentifiable.sol\\\";\\r\\nimport \\\"./interface/IContactable.sol\\\";\\r\\nimport \\\"./interface/IRuleEngine.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title CMTA20\\r\\n * @dev CMTA20 contract\\r\\n *\\r\\n * @author SÃ©bastien Krafft - <sebastien.krafft@mtpelerin.com>\\r\\n *\\r\\n * errors:\\r\\n * CM01: Attempt to reassign from an original address which is 0x0\\r\\n * CM02: Attempt to reassign to a replacement address is 0x0\\r\\n * CM03: Attempt to reassign to replacement address which is the same as the original address\\r\\n * CM04: Transfer rejected by Rule Engine \\r\\n * CM05: Attempt to reassign from an original address which does not have any tokens\\r\\n * CM06: Cannot call destroy with owner address contained in parameter\\r\\n */\\r\\n\\r\\n//IDestroyable\\r\\n//IReassignable\\r\\n \\r\\ncontract ShareFinderToken is ERC20, Ownable, Pausable, IContactable, IIdentifiable, IIssuable, IRedeemable  {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  /* Constants */\\r\\n  uint8 constant TRANSFER_OK = 0;\\r\\n  uint8 constant TRANSFER_REJECTED_PAUSED = 1;\\r\\n\\r\\n  string constant TEXT_TRANSFER_OK = \\\"No restriction\\\";\\r\\n  string constant TEXT_TRANSFER_REJECTED_PAUSED = \\\"All transfers paused\\\";\\r\\n\\r\\n  string public name;\\r\\n  string public symbol;\\r\\n  string public contact;\\r\\n  mapping (address => bytes) internal identities;\\r\\n  IRuleEngine public ruleEngine;\\r\\n\\r\\n  // solium-disable-next-line uppercase\\r\\n  uint8 constant public decimals = 0;\\r\\n\\r\\n  constructor(string memory _name, string memory _symbol, string memory _contact) public {\\r\\n    name = _name;\\r\\n    symbol = _symbol;\\r\\n    contact = _contact;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * Purpose:\\r\\n  * This event is emitted when rule engine is changed\\r\\n  *\\r\\n  * @param newRuleEngine - new rule engine address\\r\\n  */\\r\\n  event LogRuleEngineSet(address indexed newRuleEngine);\\r\\n  /**\\r\\n  * Purpose:\\r\\n  * This event is emitted when the contact information is changed\\r\\n  *\\r\\n  * @param contact - new contact information\\r\\n  */\\r\\n  event LogContactSet(string contact);\\r\\n\\r\\n  /**\\r\\n  * Purpose\\r\\n  * Set optional rule engine by owner\\r\\n  * \\r\\n  * @param _ruleEngine - the rule engine that will approve/reject transfers\\r\\n  */\\r\\n  function setRuleEngine(IRuleEngine _ruleEngine) external onlyOwner {\\r\\n    ruleEngine = _ruleEngine;\\r\\n    emit LogRuleEngineSet(address(_ruleEngine));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * Purpose\\r\\n  * Set contact point for shareholders\\r\\n  * \\r\\n  * @param _contact - the contact information for the shareholders\\r\\n  */\\r\\n  function setContact(string calldata _contact) external onlyOwner {\\r\\n    contact = _contact;\\r\\n    emit LogContactSet(_contact);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * Purpose\\r\\n  * Retrieve identity of a potential/actual shareholder\\r\\n  */\\r\\n  function identity(address shareholder) external view returns (bytes memory) {\\r\\n    return identities[shareholder];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * Purpose\\r\\n  * Set identity of a potential/actual shareholder. Can only be called by the potential/actual shareholder himself. Has to be encrypted data.\\r\\n  * \\r\\n  * @param _identity - the potential/actual shareholder identity\\r\\n  */\\r\\n  function setMyIdentity(bytes calldata _identity) external {\\r\\n    identities[msg.sender] = _identity;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * Purpose:\\r\\n  * Issue tokens on the owner address\\r\\n  *\\r\\n  * @param _value - amount of newly issued tokens\\r\\n  */\\r\\n  function issue(uint256 _value) public onlyOwner {\\r\\n    _balances[owner] = _balances[owner].add(_value);\\r\\n    _totalSupply = _totalSupply.add(_value);\\r\\n\\r\\n    emit Transfer(address(0), owner, _value);\\r\\n    emit LogIssued(_value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * Purpose:\\r\\n  * Redeem tokens on the owner address\\r\\n  *\\r\\n  * @param _value - amount of redeemed tokens\\r\\n  */\\r\\n  function redeem(uint256 _value) public onlyOwner {\\r\\n    _balances[owner] = _balances[owner].sub(_value);\\r\\n    _totalSupply = _totalSupply.sub(_value);\\r\\n\\r\\n    emit Transfer(owner, address(0), _value);\\r\\n    emit LogRedeemed(_value);\\r\\n  }\\r\\n\\r\\n\\r\\n  /**\\r\\n    * Purpose:\\r\\n    * Redeem tokens on the owner address\\r\\n    *\\r\\n    * @param value - amount of tokens to burn\\r\\n    */\\r\\n    function burn(uint256 value)  public whenNotPaused  {\\r\\n\\r\\n     return _burn(msg.sender, value);\\r\\n    }\\r\\n\\r\\n\\r\\n  /**\\r\\n  * @dev check if _value token can be transferred from _from to _to\\r\\n  * @param _from address The address which you want to send tokens from\\r\\n  * @param _to address The address which you want to transfer to\\r\\n  * @param _value uint256 the amount of tokens to be transferred\\r\\n  */\\r\\n  function canTransfer(address _from, address _to, uint256 _value) public view returns (bool) {\\r\\n    if (paused()) {\\r\\n      return false;\\r\\n    }\\r\\n    if (address(ruleEngine) != address(0)) {\\r\\n      return ruleEngine.validateTransfer(_from, _to, _value);\\r\\n    }\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev check if _value token can be transferred from _from to _to\\r\\n  * @param _from address The address which you want to send tokens from\\r\\n  * @param _to address The address which you want to transfer to\\r\\n  * @param _value uint256 the amount of tokens to be transferred\\r\\n  * @return code of the rejection reason\\r\\n  */\\r\\n  function detectTransferRestriction (address _from, address _to, uint256 _value) public view returns (uint8) {\\r\\n    if (paused()) {\\r\\n      return TRANSFER_REJECTED_PAUSED;\\r\\n    }\\r\\n    if (address(ruleEngine) != address(0)) {\\r\\n      return ruleEngine.detectTransferRestriction(_from, _to, _value);\\r\\n    }\\r\\n    return TRANSFER_OK;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev returns the human readable explaination corresponding to the error code returned by detectTransferRestriction\\r\\n  * @param _restrictionCode The error code returned by detectTransferRestriction\\r\\n  * @return The human readable explaination corresponding to the error code returned by detectTransferRestriction\\r\\n  */\\r\\n  function messageForTransferRestriction (uint8 _restrictionCode) external view returns (string memory) {\\r\\n    if (_restrictionCode == TRANSFER_OK) {\\r\\n      return TEXT_TRANSFER_OK;\\r\\n    } else if (_restrictionCode == TRANSFER_REJECTED_PAUSED) {\\r\\n      return TEXT_TRANSFER_REJECTED_PAUSED;\\r\\n    } else if (address(ruleEngine) != address(0)) {\\r\\n      return ruleEngine.messageForTransferRestriction(_restrictionCode);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev transfer token for a specified address\\r\\n  * @param _to The address to transfer to.\\r\\n  * @param _value The amount to be transferred.\\r\\n  */\\r\\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\\r\\n    if (address(ruleEngine) != address(0)) {\\r\\n      require(ruleEngine.validateTransfer(msg.sender, _to, _value), \\\"CM04\\\");\\r\\n      return super.transfer(_to, _value);\\r\\n    } else {\\r\\n      return super.transfer(_to, _value);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another\\r\\n   * @param _from address The address which you want to send tokens from\\r\\n   * @param _to address The address which you want to transfer to\\r\\n   * @param _value uint256 the amount of tokens to be transferred\\r\\n   */\\r\\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\\r\\n    if (address(ruleEngine) != address(0)) {\\r\\n      require(ruleEngine.validateTransfer(_from, _to, _value), \\\"CM04\\\");\\r\\n      return super.transferFrom(_from, _to, _value);\\r\\n    } else {\\r\\n      return super.transferFrom(_from, _to, _value);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r\\n   *\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _value The amount of tokens to be spent.\\r\\n   */\\r\\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\\r\\n    return super.approve(_spender, _value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\r\\n   *\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\r\\n   */\\r\\n  function increaseAllowance(address _spender, uint256 _addedValue) public whenNotPaused returns (bool)\\r\\n  {\\r\\n    return super.increaseAllowance(_spender, _addedValue);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\r\\n   *\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\r\\n   */\\r\\n  function decreaseAllowance(address _spender, uint256 _subtractedValue) public whenNotPaused returns (bool)\\r\\n  {\\r\\n    return super.decreaseAllowance(_spender, _subtractedValue);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * Purpose:\\r\\n  * To withdraw tokens from the original address and\\r\\n  * transfer those tokens to the replacement address.\\r\\n  * Use in cases when e.g. investor loses access to his account.\\r\\n  *\\r\\n  * ShareFinderInterjection - DO WE WANT THIS???\\r\\n  * Conditions:\\r\\n  * Throw error if the `original` address supplied is not a shareholder.\\r\\n  * Only issuer can execute this function.\\r\\n  *\\r\\n  * @param original - original address\\r\\n  * @param replacement - replacement address\\r\\n  \\r\\n  function reassign(address original, address replacement) external onlyOwner whenNotPaused {\\r\\n    require(original != address(0), \\\"CM01\\\");\\r\\n    require(replacement != address(0), \\\"CM02\\\");\\r\\n    require(original != replacement, \\\"CM03\\\");\\r\\n    uint256 originalBalance = _balances[original];\\r\\n    require(originalBalance != 0, \\\"CM05\\\");\\r\\n    _balances[replacement] = _balances[replacement].add(originalBalance);\\r\\n    _balances[original] = 0;\\r\\n    emit Transfer(original, replacement, originalBalance);\\r\\n    emit LogReassigned(original, replacement, originalBalance);\\r\\n  }\\r\\n    */\\r\\n\\r\\n  /**\\r\\n  * Purpose;\\r\\n  * To destroy issued tokens.\\r\\n  *\\r\\n  * Conditions:\\r\\n  * Only issuer can execute this function.\\r\\n  *\\r\\n  * ShareFinder - Do we need this?? Remove...\\r\\n  *\\r\\n  * @param shareholders - list of shareholders\\r\\n  \\r\\n  function destroy(address[] calldata shareholders) external onlyOwner {\\r\\n    for (uint256 i = 0; i<shareholders.length; i++) {\\r\\n      require(shareholders[i] != owner, \\\"CM06\\\");\\r\\n      uint256 shareholderBalance = _balances[shareholders[i]];\\r\\n      _balances[owner] = _balances[owner].add(shareholderBalance);\\r\\n      _balances[shareholders[i]] = 0;\\r\\n      emit Transfer(shareholders[i], owner, shareholderBalance);\\r\\n    }\\r\\n    emit LogDestroyed(shareholders);\\r\\n  }\\r\\n  */\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/Lloyd/Desktop/ShareFinderToken/contracts/interface/IContactable.sol\": {\r\n      \"content\": \"/* \\r\\n * Copyright (c) Capital Market and Technology Association, 2018-2019\\r\\n * https://cmta.ch\\r\\n *\\r\\n * This Source Code Form is subject to the terms of the Mozilla Public\\r\\n * License, v. 2.0. If a copy of the MPL was not distributed with this\\r\\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \\r\\n */\\r\\n\\r\\npragma solidity ^0.5.3;\\r\\n\\r\\n/**\\r\\n * @title IContactable\\r\\n * @dev IContactable interface\\r\\n *\\r\\n * @author SÃ©bastien Krafft - <sebastien.krafft@mtpelerin.com>\\r\\n *\\r\\n **/\\r\\n\\r\\n\\r\\ninterface IContactable {\\r\\n  function contact() external view returns (string memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/Lloyd/Desktop/ShareFinderToken/contracts/interface/IDestroyable.sol\": {\r\n      \"content\": \"/* \\r\\n * Copyright (c) Capital Market and Technology Association, 2018-2019\\r\\n * https://cmta.ch\\r\\n *\\r\\n * This Source Code Form is subject to the terms of the Mozilla Public\\r\\n * License, v. 2.0. If a copy of the MPL was not distributed with this\\r\\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \\r\\n */\\r\\n\\r\\npragma solidity ^0.5.3;\\r\\n\\r\\n/**\\r\\n * @title IDestroyable\\r\\n * @dev IDestroyable interface\\r\\n *\\r\\n * @author SÃ©bastien Krafft - <sebastien.krafft@mtpelerin.com>\\r\\n *\\r\\n **/\\r\\n \\r\\n\\r\\ninterface IDestroyable {\\r\\n  /**\\r\\n  * Purpose;\\r\\n  * To destroy issued tokens.\\r\\n  *\\r\\n  * Conditions:\\r\\n  * Only issuer can execute this function.\\r\\n  *\\r\\n  * @param shareholders - list of shareholders\\r\\n  */\\r\\n  function destroy(address[] calldata shareholders) external;\\r\\n\\r\\n  /**\\r\\n  * Purpose:\\r\\n  * This event is emitted when issued tokens are destroyed.\\r\\n  *\\r\\n  * @param shareholders - list of shareholders of destroyed tokens\\r\\n  */\\r\\n  event LogDestroyed(address[] shareholders);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/Lloyd/Desktop/ShareFinderToken/contracts/interface/IIdentifiable.sol\": {\r\n      \"content\": \"/* \\r\\n * Copyright (c) Capital Market and Technology Association, 2018-2019\\r\\n * https://cmta.ch\\r\\n *\\r\\n * This Source Code Form is subject to the terms of the Mozilla Public\\r\\n * License, v. 2.0. If a copy of the MPL was not distributed with this\\r\\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \\r\\n */\\r\\n \\r\\npragma solidity ^0.5.3;\\r\\n\\r\\n/**\\r\\n * @title IIdentifiable\\r\\n * @dev IIdentifiable interface\\r\\n *\\r\\n * @author SÃ©bastien Krafft - <sebastien.krafft@mtpelerin.com>\\r\\n *\\r\\n **/\\r\\n\\r\\n\\r\\ninterface IIdentifiable {\\r\\n  function identity(address shareholder) external view returns (bytes memory);\\r\\n  function setMyIdentity(bytes calldata _identity) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/Lloyd/Desktop/ShareFinderToken/contracts/interface/IIssuable.sol\": {\r\n      \"content\": \"/* \\r\\n * Copyright (c) Capital Market and Technology Association, 2018-2019\\r\\n * https://cmta.ch\\r\\n *\\r\\n * This Source Code Form is subject to the terms of the Mozilla Public\\r\\n * License, v. 2.0. If a copy of the MPL was not distributed with this\\r\\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \\r\\n */\\r\\n \\r\\npragma solidity ^0.5.3;\\r\\n\\r\\n/**\\r\\n * @title IIssuable\\r\\n * @dev IIssuable interface\\r\\n *\\r\\n * @author SÃ©bastien Krafft - <sebastien.krafft@mtpelerin.com>\\r\\n *\\r\\n **/\\r\\n\\r\\n\\r\\ninterface IIssuable {\\r\\n  function issue(uint256 value) external;\\r\\n  /**\\r\\n  * Purpose:\\r\\n  * This event is emitted when new tokens are issued.\\r\\n  *\\r\\n  * @param value - amount of newly issued tokens\\r\\n  */\\r\\n  event LogIssued(uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/Lloyd/Desktop/ShareFinderToken/contracts/interface/IReassignable.sol\": {\r\n      \"content\": \"/* \\r\\n * Copyright (c) Capital Market and Technology Association, 2018-2019\\r\\n * https://cmta.ch\\r\\n *\\r\\n * This Source Code Form is subject to the terms of the Mozilla Public\\r\\n * License, v. 2.0. If a copy of the MPL was not distributed with this\\r\\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \\r\\n */\\r\\n \\r\\npragma solidity ^0.5.3;\\r\\n\\r\\n/**\\r\\n * @title IReassignable\\r\\n * @dev IReassignable interface\\r\\n *\\r\\n * @author SÃ©bastien Krafft - <sebastien.krafft@mtpelerin.com>\\r\\n *\\r\\n **/\\r\\n \\r\\n\\r\\ninterface IReassignable {\\r\\n  /**\\r\\n  * Purpose:\\r\\n  * To withdraw tokens from the original address and\\r\\n  * transfer those tokens to the replacement address.\\r\\n  * Use in cases when e.g. investor loses access to his account.\\r\\n  *\\r\\n  * Conditions:\\r\\n  * Throw error if the `original` address supplied is not a shareholder.\\r\\n  * Throw error if the 'replacement' address already holds tokens.\\r\\n  * Original address MUST NOT be reused again.\\r\\n  * Only issuer can execute this function.\\r\\n  *\\r\\n  * @param original - original address\\r\\n  * @param replacement - replacement address\\r\\n    */\\r\\n  function reassign(\\r\\n    address original,\\r\\n    address replacement\\r\\n  ) \\r\\n    external;\\r\\n\\r\\n  /**\\r\\n  * Purpose:\\r\\n  * This event is emitted when tokens are withdrawn from one address\\r\\n  * and issued to a new one.\\r\\n  *\\r\\n  * @param original - original address\\r\\n  * @param replacement - replacement address\\r\\n  * @param value - amount transfered from original to replacement\\r\\n  */\\r\\n  event LogReassigned(\\r\\n    address indexed original,\\r\\n    address indexed replacement,\\r\\n    uint256 value\\r\\n  );\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/Lloyd/Desktop/ShareFinderToken/contracts/interface/IRedeemable.sol\": {\r\n      \"content\": \"/* \\r\\n * Copyright (c) Capital Market and Technology Association, 2018-2019\\r\\n * https://cmta.ch\\r\\n *\\r\\n * This Source Code Form is subject to the terms of the Mozilla Public\\r\\n * License, v. 2.0. If a copy of the MPL was not distributed with this\\r\\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \\r\\n */\\r\\n \\r\\npragma solidity ^0.5.3;\\r\\n\\r\\n/**\\r\\n * @title IRedeemable\\r\\n * @dev IRedeemable interface\\r\\n *\\r\\n * @author SÃ©bastien Krafft - <sebastien.krafft@mtpelerin.com>\\r\\n *\\r\\n **/\\r\\n\\r\\n\\r\\ninterface IRedeemable {\\r\\n  function redeem(uint256 value) external;\\r\\n\\r\\n  /**\\r\\n  * Purpose:\\r\\n  * This event is emitted when tokens are redeemed.\\r\\n  *\\r\\n  * @param value - amount of redeemed tokens\\r\\n  */\\r\\n  event LogRedeemed(uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/Lloyd/Desktop/ShareFinderToken/contracts/interface/IRule.sol\": {\r\n      \"content\": \"/* \\r\\n * Copyright (c) Capital Market and Technology Association, 2018-2019\\r\\n * https://cmta.ch\\r\\n *\\r\\n * This Source Code Form is subject to the terms of the Mozilla Public\\r\\n * License, v. 2.0. If a copy of the MPL was not distributed with this\\r\\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \\r\\n */\\r\\n\\r\\npragma solidity ^0.5.3;\\r\\n\\r\\n/**\\r\\n * @title IRule\\r\\n * @dev IRule interface.\\r\\n **/\\r\\ninterface IRule {\\r\\n  function isTransferValid(\\r\\n    address _from, address _to, uint256 _amount)\\r\\n  external view returns (bool isValid);\\r\\n\\r\\n  function detectTransferRestriction(\\r\\n    address _from, address _to, uint256 _amount)\\r\\n  external view returns (uint8);\\r\\n\\r\\n  function canReturnTransferRestrictionCode(uint8 _restrictionCode) external view returns (bool);\\r\\n  function messageForTransferRestriction(uint8 _restrictionCode) external view returns (string memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/Lloyd/Desktop/ShareFinderToken/contracts/interface/IRuleEngine.sol\": {\r\n      \"content\": \"/* \\r\\n * Copyright (c) Capital Market and Technology Association, 2018-2019\\r\\n * https://cmta.ch\\r\\n *\\r\\n * This Source Code Form is subject to the terms of the Mozilla Public\\r\\n * License, v. 2.0. If a copy of the MPL was not distributed with this\\r\\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \\r\\n */\\r\\n \\r\\npragma solidity ^0.5.3;\\r\\n\\r\\n\\r\\nimport \\\"./IRule.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title IRuleEngine\\r\\n * @dev IRuleEngine \\r\\n **/\\r\\n\\r\\n\\r\\ninterface IRuleEngine {\\r\\n\\r\\n  function setRules(IRule[] calldata rules) external;\\r\\n  function ruleLength() external view returns (uint256);\\r\\n  function rule(uint256 ruleId) external view returns (IRule);\\r\\n  function rules() external view returns(IRule[] memory);\\r\\n\\r\\n  function validateTransfer(\\r\\n    address _from,\\r\\n    address _to,\\r\\n    uint256 _amount)\\r\\n  external view returns (bool);\\r\\n\\r\\n  function detectTransferRestriction (\\r\\n    address _from,\\r\\n    address _to,\\r\\n    uint256 _value)\\r\\n  external view returns (uint8);\\r\\n\\r\\n  function messageForTransferRestriction (uint8 _restrictionCode) external view returns (string memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/Lloyd/Desktop/ShareFinderToken/contracts/zeppelin/access/Roles.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @title Roles\\r\\n * @dev Library for managing addresses assigned to a Role.\\r\\n */\\r\\nlibrary Roles {\\r\\n    struct Role {\\r\\n        mapping (address => bool) bearer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Give an account access to this role.\\r\\n     */\\r\\n    function add(Role storage role, address account) internal {\\r\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\r\\n        role.bearer[account] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an account's access to this role.\\r\\n     */\\r\\n    function remove(Role storage role, address account) internal {\\r\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\r\\n        role.bearer[account] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an account has this role.\\r\\n     * @return bool\\r\\n     */\\r\\n    function has(Role storage role, address account) internal view returns (bool) {\\r\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\r\\n        return role.bearer[account];\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/C/Users/Lloyd/Desktop/ShareFinderToken/contracts/zeppelin/access/roles/PauserRole.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"../Roles.sol\\\";\\r\\n\\r\\ncontract PauserRole {\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    event PauserAdded(address indexed account);\\r\\n    event PauserRemoved(address indexed account);\\r\\n\\r\\n    Roles.Role private _pausers;\\r\\n\\r\\n    constructor () internal {\\r\\n        _addPauser(msg.sender);\\r\\n    }\\r\\n\\r\\n    modifier onlyPauser() {\\r\\n        require(isPauser(msg.sender), \\\"PauserRole: caller does not have the Pauser role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isPauser(address account) public view returns (bool) {\\r\\n        return _pausers.has(account);\\r\\n    }\\r\\n\\r\\n    function addPauser(address account) public onlyPauser {\\r\\n        _addPauser(account);\\r\\n    }\\r\\n\\r\\n    function renouncePauser() public {\\r\\n        _removePauser(msg.sender);\\r\\n    }\\r\\n\\r\\n    function _addPauser(address account) internal {\\r\\n        _pausers.add(account);\\r\\n        emit PauserAdded(account);\\r\\n    }\\r\\n\\r\\n    function _removePauser(address account) internal {\\r\\n        _pausers.remove(account);\\r\\n        emit PauserRemoved(account);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/C/Users/Lloyd/Desktop/ShareFinderToken/contracts/zeppelin/lifecycle/Pausable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"../access/roles/PauserRole.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\ncontract Pausable is PauserRole {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\\r\\n     * to the deployer.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!_paused, \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(_paused, \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called by a pauser to pause, triggers stopped state.\\r\\n     */\\r\\n    function pause() public onlyPauser whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Called by a pauser to unpause, returns to normal state.\\r\\n     */\\r\\n    function unpause() public onlyPauser whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(msg.sender);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/C/Users/Lloyd/Desktop/ShareFinderToken/contracts/zeppelin/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/C/Users/Lloyd/Desktop/ShareFinderToken/contracts/zeppelin/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\r\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\r\\n * errors\\r\\n * OW01: Sender is not owner\\r\\n * OW02: Trying to set owner to 0x0\\r\\n */\\r\\ncontract Ownable {\\r\\n  address public owner;\\r\\n\\r\\n\\r\\n  event OwnershipRenounced(address indexed previousOwner);\\r\\n  event OwnershipTransferred(\\r\\n    address indexed previousOwner,\\r\\n    address indexed newOwner\\r\\n  );\\r\\n\\r\\n\\r\\n  /**\\r\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n   * account.\\r\\n   */\\r\\n  constructor() public {\\r\\n    owner = msg.sender;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if called by any account other than the owner.\\r\\n   */\\r\\n  modifier onlyOwner() {\\r\\n    require(msg.sender == owner, \\\"OW01\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Allows the current owner to relinquish control of the contract.\\r\\n   */\\r\\n  function renounceOwnership() public onlyOwner {\\r\\n    emit OwnershipRenounced(owner);\\r\\n    owner = address(0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n   * @param _newOwner The address to transfer ownership to.\\r\\n   */\\r\\n  function transferOwnership(address _newOwner) public onlyOwner {\\r\\n    _transferOwnership(_newOwner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers control of the contract to a newOwner.\\r\\n   * @param _newOwner The address to transfer ownership to.\\r\\n   */\\r\\n  function _transferOwnership(address _newOwner) internal {\\r\\n    require(_newOwner != address(0), \\\"OW02\\\");\\r\\n    emit OwnershipTransferred(owner, _newOwner);\\r\\n    owner = _newOwner;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/Lloyd/Desktop/ShareFinderToken/contracts/zeppelin/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"../../math/SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the `IERC20` interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using `_mint`.\\r\\n * For a generic mechanism see `ERC20Mintable`.\\r\\n *\\r\\n * *For a detailed writeup see our guide [How to implement supply\\r\\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See `IERC20.approve`.\\r\\n */\\r\\ncontract ERC20 is IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address => uint256) internal _balances;\\r\\n\\r\\n    mapping (address => mapping (address => uint256)) internal _allowances;\\r\\n\\r\\n    uint256 internal _totalSupply;\\r\\n\\r\\n    /**\\r\\n     * @dev See `IERC20.totalSupply`.\\r\\n     */\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See `IERC20.balanceOf`.\\r\\n     */\\r\\n    function balanceOf(address account) public view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See `IERC20.transfer`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See `IERC20.allowance`.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See `IERC20.approve`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 value) public returns (bool) {\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See `IERC20.transferFrom`.\\r\\n     *\\r\\n     * Emits an `Approval` event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of `ERC20`;\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `value`.\\r\\n     * - the caller must have allowance for `sender`'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to `approve` that can be used as a mitigation for\\r\\n     * problems described in `IERC20.approve`.\\r\\n     *\\r\\n     * Emits an `Approval` event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to `approve` that can be used as a mitigation for\\r\\n     * problems described in `IERC20.approve`.\\r\\n     *\\r\\n     * Emits an `Approval` event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to `transfer`, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a `Transfer` event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount);\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a `Transfer` event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n     /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a `Transfer` event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 value) internal {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.sub(value);\\r\\n        _balances[account] = _balances[account].sub(value);\\r\\n        emit Transfer(account, address(0), value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * This is internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an `Approval` event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 value) internal {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\\r\\n     * from the caller's allowance.\\r\\n     *\\r\\n     * See `_burn` and `_approve`.\\r\\n     */\\r\\n    function _burnFrom(address account, uint256 amount) internal {\\r\\n        _burn(account, amount);\\r\\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/C/Users/Lloyd/Desktop/ShareFinderToken/contracts/zeppelin/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see `ERC20Detailed`.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a `Transfer` event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when `approve` or `transferFrom` are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * > Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an `Approval` event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a `Transfer` event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to `approve`. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"byzantium\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contact\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_identity\",\"type\":\"bytes\"}],\"name\":\"setMyIdentity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_restrictionCode\",\"type\":\"uint8\"}],\"name\":\"messageForTransferRestriction\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contact\",\"type\":\"string\"}],\"name\":\"setContact\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_ruleEngine\",\"type\":\"address\"}],\"name\":\"setRuleEngine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"detectTransferRestriction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"canTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"identity\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ruleEngine\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_contact\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"newRuleEngine\",\"type\":\"address\"}],\"name\":\"LogRuleEngineSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"contact\",\"type\":\"string\"}],\"name\":\"LogContactSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LogIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"ShareFinderToken","CompilerVersion":"v0.5.3+commit.10d17f24","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000018536861726546696e6465722045717569747920546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000353465200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012737570706f727440726369732e636f2e7a610000000000000000000000000000","EVMVersion":"byzantium","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}