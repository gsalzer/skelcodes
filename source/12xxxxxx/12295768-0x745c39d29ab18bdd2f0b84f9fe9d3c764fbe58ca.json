{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.2;\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // benefit is lost if 'b' is also tested.\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity ^0.5.2;\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity ^0.5.2;\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\npragma solidity ^0.5.2;\r\n\r\ninterface IVault {\r\n    function transfer(address token, address from, address to, uint256 amount, uint256 fromFeeRate, uint256 toFeeRate) external;\r\n\r\n    function calculateFee(uint256 amount, uint256 feeRate) external pure returns (uint256);\r\n\r\n    function balanceOf(address token, address client) external view returns (uint256);\r\n\r\n    event Transfer(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 fromFee, uint256 toFee);\r\n}\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n\r\n\r\n\r\ncontract ExchangeV1 is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event VaultChanged(address indexed account);\r\n    event MarketPermissionChanged(address indexed base, address indexed quote, bool permission);\r\n    event BlacklistChanged(address indexed client, bool tradeBlacklist);\r\n    event MarketFeeRateChanged(address indexed base, address indexed quote, uint256 makeFeeRate, uint256 takeFeeRate);\r\n    event Trade(bytes32 indexed orderHash, uint256 amount, uint256 price, address indexed take, uint256 makeFee, uint256 takeFee);\r\n    event Cancel(bytes32 indexed orderHash);\r\n\r\n    address private _vault;\r\n    mapping (address => mapping (address => bool)) private _marketPermissions;\r\n    mapping (address => bool) private _tradeBlacklist;\r\n    mapping (address => mapping (address => uint256)) private _makeFeeRates;\r\n    mapping (address => mapping (address => uint256)) private _takeFeeRates;\r\n    mapping (bytes32 => uint256) private _orderFills;\r\n\r\n    constructor () public {\r\n    } \r\n    \r\n    function renounceOwnership() public onlyOwner {\r\n        revert();\r\n    }\r\n\r\n    function setVault(address account) public onlyOwner {\r\n        if (_vault != account) {\r\n            _vault = account;\r\n            emit VaultChanged(account);\r\n        }\r\n    }\r\n\r\n    function vault() public view returns (address) {\r\n        return _vault;\r\n    }\r\n\r\n    function setMarketPermission(address base, address quote, bool permission) public onlyOwner {\r\n        if (isMarketPermitted(base, quote) != permission) {\r\n            _marketPermissions[base][quote] = permission;\r\n            emit MarketPermissionChanged(base, quote, permission);\r\n        }\r\n    }\r\n\r\n    function multiSetMarketPermission(address[] memory bases, address[] memory quotes, bool[] memory permissions) public onlyOwner {\r\n        require(bases.length == quotes.length && bases.length == permissions.length);\r\n        for (uint256 i = 0; i < bases.length; i++) {\r\n            setMarketPermission(bases[i], quotes[i], permissions[i]);\r\n        }\r\n    }\r\n\r\n    function isMarketPermitted(address base, address quote) public view returns (bool) {\r\n        return _marketPermissions[base][quote];\r\n    }\r\n\r\n    function isTradeBlacklisted(address client) public view returns (bool) {\r\n        return _tradeBlacklist[client];\r\n    }\r\n\r\n    function setBlacklist(address client, bool tradeBlacklist) public onlyOwner {\r\n        if (isTradeBlacklisted(client) != tradeBlacklist) {\r\n            _tradeBlacklist[client] = tradeBlacklist;\r\n            emit BlacklistChanged(client, isTradeBlacklisted(client));\r\n        }\r\n    }\r\n    \r\n    function multiSetBlacklist(address[] memory clients, bool[] memory tradeBlacklists) public onlyOwner {\r\n        require(clients.length == tradeBlacklists.length);\r\n        for (uint256 i = 0; i < clients.length; i++) {\r\n            setBlacklist(clients[i], tradeBlacklists[i]);\r\n        }\r\n    }\r\n\r\n    function setMarketFeeRate(address base, address quote, uint256 makeFeeRate, uint256 takeFeeRate) public onlyOwner {\r\n        if (makeFeeRateOf(base, quote) != makeFeeRate || takeFeeRateOf(base, quote) != takeFeeRate) {\r\n            _makeFeeRates[base][quote] = makeFeeRate;\r\n            _takeFeeRates[base][quote] = takeFeeRate;\r\n            emit MarketFeeRateChanged(base, quote, makeFeeRate, takeFeeRate);\r\n        }\r\n    }\r\n\r\n    function multiSetMarketFeeRate(address[] memory bases, address[] memory quotes, uint256[] memory makeFeeRates, uint256[] memory takeFeeRates) public onlyOwner {\r\n        require(bases.length == quotes.length && bases.length == makeFeeRates.length && bases.length == takeFeeRates.length);\r\n        for (uint256 i = 0; i < bases.length; i++) {\r\n            setMarketFeeRate(bases[i], quotes[i], makeFeeRates[i], takeFeeRates[i]);\r\n        }\r\n    }\r\n\r\n    function makeFeeRateOf(address base, address quote) public view returns (uint256) {\r\n        return _makeFeeRates[base][quote];\r\n    }\r\n\r\n    function takeFeeRateOf(address base, address quote) public view returns (uint256) {\r\n        return _takeFeeRates[base][quote];\r\n    }\r\n\r\n    function orderFillOf(bytes32 orderHash) public view returns (uint256) {\r\n        return _orderFills[orderHash];\r\n    }\r\n\r\n    function trade(address base, address quote, uint256 baseAmount, uint256 quoteAmount, bool isBuy, uint256 expire, uint256 nonce, address make, uint256 amount, uint8 v, bytes32 r, bytes32 s) public {\r\n        bytes32 orderHash = _buildOrderHash(base, quote, baseAmount, quoteAmount, isBuy, expire, nonce);\r\n        require(block.timestamp < expire && isMarketPermitted(base, quote) && !isTradeBlacklisted(msg.sender) && orderFillOf(orderHash).add(amount) <= baseAmount && _checkOrderHash(orderHash, make, v, r, s));\r\n        _trade(orderHash, base, quote, baseAmount, quoteAmount, isBuy, make, amount);\r\n    }\r\n\r\n    function _trade(bytes32 orderHash, address base, address quote, uint256 baseAmount, uint256 quoteAmount, bool isBuy, address make, uint256 amount) private {\r\n        uint256 price = amount.mul(quoteAmount).div(baseAmount);\r\n        uint256 makeFeeRate = makeFeeRateOf(base, quote);\r\n        uint256 takeFeeRate = takeFeeRateOf(base, quote);\r\n        if (isBuy) {\r\n            _transfer(base, msg.sender, make, amount, 0, 0);\r\n            _transfer(quote, make, msg.sender, price, makeFeeRate, takeFeeRate);\r\n        }\r\n        else {\r\n            _transfer(base, make, msg.sender, amount, 0, 0);\r\n            _transfer(quote, msg.sender, make, price, takeFeeRate, makeFeeRate);\r\n        }\r\n        _orderFills[orderHash] = orderFillOf(orderHash).add(amount);\r\n        emit Trade(orderHash, amount, price, msg.sender, _calculateFee(price, makeFeeRate), _calculateFee(price, takeFeeRate));\r\n    }\r\n\r\n    function multiTrade(address[] memory bases, address[] memory quotes, uint256[] memory baseAmounts, uint256[] memory quoteAmounts, bool[] memory isBuys, uint256[] memory expires, uint256[] memory nonces, address[] memory makes, uint256[] memory amounts, uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss) public {\r\n        require(bases.length == quotes.length && bases.length == baseAmounts.length && bases.length == quoteAmounts.length && bases.length == isBuys.length && bases.length == expires.length && bases.length == nonces.length && bases.length == makes.length && bases.length == amounts.length && bases.length == vs.length && bases.length == rs.length && bases.length == ss.length);\r\n        for (uint256 i = 0; i < bases.length; i++) {\r\n            trade(bases[i], quotes[i], baseAmounts[i], quoteAmounts[i], isBuys[i], expires[i], nonces[i], makes[i], amounts[i], vs[i], rs[i], ss[i]);\r\n        }\r\n    }\r\n\r\n    function availableAmountOf(address base, address quote, uint256 baseAmount, uint256 quoteAmount, bool isBuy, uint256 expire, uint256 nonce, address make, uint8 v, bytes32 r, bytes32 s) public view returns (uint256) {\r\n        bytes32 orderHash = _buildOrderHash(base, quote, baseAmount, quoteAmount, isBuy, expire, nonce);\r\n        return block.timestamp >= expire || !_checkOrderHash(orderHash, make, v, r, s) ? 0 : _availableAmountOf(orderHash, base, quote, baseAmount, quoteAmount, isBuy, make);\r\n    }\r\n\r\n    function _availableAmountOf(bytes32 orderHash, address base, address quote, uint256 baseAmount, uint256 quoteAmount, bool isBuy, address make) private view returns (uint256) {\r\n        uint256 availableByFill = baseAmount.sub(orderFillOf(orderHash));\r\n        uint256 availableByBalance = isBuy ? _balanceOf(quote, make).mul(baseAmount).div(quoteAmount) : _balanceOf(base, make);\r\n        return availableByFill < availableByBalance ? availableByFill : availableByBalance;\r\n    }\r\n\r\n    function cancel(address base, address quote, uint256 baseAmount, uint256 quoteAmount, bool isBuy, uint256 expire, uint256 nonce, uint8 v, bytes32 r, bytes32 s) public {\r\n        bytes32 orderHash = _buildOrderHash(base, quote, baseAmount, quoteAmount, isBuy, expire, nonce);\r\n        require(_checkOrderHash(orderHash, msg.sender, v, r, s));\r\n        _orderFills[orderHash] = baseAmount;\r\n        emit Cancel(orderHash);\r\n    }\r\n\r\n    function multiCancel(address[] memory bases, address[] memory quotes, uint256[] memory baseAmounts, uint256[] memory quoteAmounts, bool[] memory isBuys, uint256[] memory expires, uint256[] memory nonces, uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss) public {\r\n        require(bases.length == quotes.length && bases.length == baseAmounts.length && bases.length == quoteAmounts.length && bases.length == isBuys.length && bases.length == expires.length && bases.length == nonces.length && bases.length == vs.length && bases.length == rs.length && bases.length == ss.length);\r\n        for (uint256 i = 0; i < bases.length; i++) {\r\n            cancel(bases[i], quotes[i], baseAmounts[i], quoteAmounts[i], isBuys[i], expires[i], nonces[i], vs[i], rs[i], ss[i]);\r\n        }\r\n    }\r\n\r\n    function _transfer(address token, address from, address to, uint256 amount, uint256 fromFeeRate, uint256 toFeeRate) private {\r\n        IVault(vault()).transfer(token, from, to, amount, fromFeeRate, toFeeRate);\r\n    }\r\n\r\n    function _calculateFee(uint256 amount, uint256 feeRate) private view returns (uint256) {\r\n        return IVault(vault()).calculateFee(amount, feeRate);\r\n    }\r\n\r\n    function _balanceOf(address token, address client) private view returns (uint256) {\r\n        return IVault(vault()).balanceOf(token, client);\r\n    }\r\n\r\n   function _buildOrderHash(address base, address quote, uint256 baseAmount, uint256 quoteAmount, bool isBuy, uint256 expire, uint256 nonce) private view returns (bytes32) {\r\n        return sha256(abi.encodePacked(address(this), base, quote, baseAmount, quoteAmount, isBuy, expire, nonce));\r\n    }\r\n\r\n    function _checkOrderHash(bytes32 orderHash, address make, uint8 v, bytes32 r, bytes32 s) private pure returns (bool) {\r\n        return ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", orderHash)), v, r, s) == make;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"base\",\"type\":\"address\"},{\"name\":\"quote\",\"type\":\"address\"},{\"name\":\"permission\",\"type\":\"bool\"}],\"name\":\"setMarketPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"client\",\"type\":\"address\"},{\"name\":\"tradeBlacklist\",\"type\":\"bool\"}],\"name\":\"setBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"clients\",\"type\":\"address[]\"},{\"name\":\"tradeBlacklists\",\"type\":\"bool[]\"}],\"name\":\"multiSetBlacklist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"base\",\"type\":\"address\"},{\"name\":\"quote\",\"type\":\"address\"}],\"name\":\"takeFeeRateOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"client\",\"type\":\"address\"}],\"name\":\"isTradeBlacklisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"base\",\"type\":\"address\"},{\"name\":\"quote\",\"type\":\"address\"}],\"name\":\"isMarketPermitted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"base\",\"type\":\"address\"},{\"name\":\"quote\",\"type\":\"address\"}],\"name\":\"makeFeeRateOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bases\",\"type\":\"address[]\"},{\"name\":\"quotes\",\"type\":\"address[]\"},{\"name\":\"baseAmounts\",\"type\":\"uint256[]\"},{\"name\":\"quoteAmounts\",\"type\":\"uint256[]\"},{\"name\":\"isBuys\",\"type\":\"bool[]\"},{\"name\":\"expires\",\"type\":\"uint256[]\"},{\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"name\":\"vs\",\"type\":\"uint8[]\"},{\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"multiCancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"base\",\"type\":\"address\"},{\"name\":\"quote\",\"type\":\"address\"},{\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"name\":\"isBuy\",\"type\":\"bool\"},{\"name\":\"expire\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"orderFillOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bases\",\"type\":\"address[]\"},{\"name\":\"quotes\",\"type\":\"address[]\"},{\"name\":\"makeFeeRates\",\"type\":\"uint256[]\"},{\"name\":\"takeFeeRates\",\"type\":\"uint256[]\"}],\"name\":\"multiSetMarketFeeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bases\",\"type\":\"address[]\"},{\"name\":\"quotes\",\"type\":\"address[]\"},{\"name\":\"baseAmounts\",\"type\":\"uint256[]\"},{\"name\":\"quoteAmounts\",\"type\":\"uint256[]\"},{\"name\":\"isBuys\",\"type\":\"bool[]\"},{\"name\":\"expires\",\"type\":\"uint256[]\"},{\"name\":\"nonces\",\"type\":\"uint256[]\"},{\"name\":\"makes\",\"type\":\"address[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"vs\",\"type\":\"uint8[]\"},{\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"multiTrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bases\",\"type\":\"address[]\"},{\"name\":\"quotes\",\"type\":\"address[]\"},{\"name\":\"permissions\",\"type\":\"bool[]\"}],\"name\":\"multiSetMarketPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"base\",\"type\":\"address\"},{\"name\":\"quote\",\"type\":\"address\"},{\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"name\":\"isBuy\",\"type\":\"bool\"},{\"name\":\"expire\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"make\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"trade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"base\",\"type\":\"address\"},{\"name\":\"quote\",\"type\":\"address\"},{\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"name\":\"quoteAmount\",\"type\":\"uint256\"},{\"name\":\"isBuy\",\"type\":\"bool\"},{\"name\":\"expire\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"make\",\"type\":\"address\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"availableAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"base\",\"type\":\"address\"},{\"name\":\"quote\",\"type\":\"address\"},{\"name\":\"makeFeeRate\",\"type\":\"uint256\"},{\"name\":\"takeFeeRate\",\"type\":\"uint256\"}],\"name\":\"setMarketFeeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"VaultChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"base\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"quote\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"permission\",\"type\":\"bool\"}],\"name\":\"MarketPermissionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tradeBlacklist\",\"type\":\"bool\"}],\"name\":\"BlacklistChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"base\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"quote\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"makeFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"takeFeeRate\",\"type\":\"uint256\"}],\"name\":\"MarketFeeRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"take\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"makeFee\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"takeFee\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"Cancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"ExchangeV1","CompilerVersion":"v0.5.2+commit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://1b70c80af9cfb16f8d5f8fa2c73691ad3750ed2a571503d75aa2bfd6834f8fea"}]}