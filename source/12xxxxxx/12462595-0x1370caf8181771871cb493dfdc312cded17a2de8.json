{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Users/khera/Documents/GitHub/GasSwapTokens/contracts/GSVEBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract GSVEBeacon is Ownable{\\r\\n    \\r\\n    mapping(address => address) private _deployedAddress;\\r\\n    mapping(address => address) private _addressGasToken;\\r\\n    mapping(address => uint256) private _supportedGasTokens;\\r\\n    \\r\\n    constructor (address _wchi, address _wgst2, address _wgst1) public {\\r\\n        //chi, gst2 and gst1\\r\\n        _supportedGasTokens[0x0000000000004946c0e9F43F4Dee607b0eF1fA1c] = 30053;\\r\\n        _supportedGasTokens[0x0000000000b3F879cb30FE243b4Dfee438691c04] = 30870;\\r\\n        _supportedGasTokens[0x88d60255F917e3eb94eaE199d827DAd837fac4cB] = 20046;\\r\\n\\r\\n        //wchi, wgst2 and wgst1\\r\\n        _supportedGasTokens[_wchi] = 30053;\\r\\n        _supportedGasTokens[_wgst2] = 30870;\\r\\n        _supportedGasTokens[_wgst1] = 20046;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n    * @dev return the location of a users deployed wrapper\\r\\n    */\\r\\n    function getDeployedAddress(address creator) public view returns(address){\\r\\n        return _deployedAddress[creator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev return the gas token used by a safe\\r\\n    */\\r\\n    function getAddressGastoken(address safe) public view returns(address){\\r\\n        return _addressGasToken[safe];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev return the savings a gas token gives\\r\\n    */\\r\\n    function getAddressGasTokenSaving(address gastoken) public view returns(uint256){\\r\\n        return _supportedGasTokens[gastoken];\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n    * @dev return the address and savings for a given safe proxy\\r\\n    */\\r\\n    function getGasTokenAndSaving(address safe) public view returns(address, uint256){\\r\\n        return (getAddressGastoken(safe), getAddressGasTokenSaving(safe));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev allows the creator of a safe to change the gas token used by the safe\\r\\n    */\\r\\n    function setAddressGasToken(address safe, address gasToken) public{\\r\\n        require(_deployedAddress[msg.sender] == safe, \\\"GSVE: Sender is not the safe creator\\\");\\r\\n        if (gasToken != address(0)){\\r\\n            require(_supportedGasTokens[gasToken] > 0, \\\"GSVE: Invalid Gas Token\\\");\\r\\n        }\\r\\n        _addressGasToken[safe] = gasToken;\\r\\n        emit UpdatedGasToken(safe, gasToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev sets the initial gas token of a given safe proxy\\r\\n    */\\r\\n    function initSafe(address owner, address safe) public onlyOwner{\\r\\n        require(_deployedAddress[owner] == address(0), \\\"GSVE: address already init'd\\\");\\r\\n        _deployedAddress[owner] = safe;\\r\\n        _addressGasToken[safe] = address(0);\\r\\n        emit UpdatedGasToken(safe, address(0));\\r\\n    }\\r\\n\\r\\n    event UpdatedGasToken(address safe, address gasToken);\\r\\n\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wchi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wgst2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wgst1\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"}],\"name\":\"UpdatedGasToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gastoken\",\"type\":\"address\"}],\"name\":\"getAddressGasTokenSaving\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"}],\"name\":\"getAddressGastoken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getDeployedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"}],\"name\":\"getGasTokenAndSaving\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"}],\"name\":\"initSafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"}],\"name\":\"setAddressGasToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GSVEBeacon","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000047536fd7c0cdb9338ce495694be6463a303145820000000000000000000000001f4dd5a297ca59cc086f6f24c36a8a032c4ddbad000000000000000000000000e39b8dc27ffdca3f2591eb801c7548fce7d87d72","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}