{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/hging/Downloads/qilin/contracts/Liquidation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./utils/AddressResolver.sol\\\";\\nimport \\\"./utils/BasicMaths.sol\\\";\\n\\nimport \\\"./interfaces/ISystemSetting.sol\\\";\\nimport \\\"./interfaces/IDepot.sol\\\";\\nimport \\\"./interfaces/ILiquidation.sol\\\";\\nimport \\\"./interfaces/IExchangeRates.sol\\\";\\n\\ncontract Liquidation is AddressResolver, ILiquidation {\\n    using SafeMath for uint;\\n    using BasicMaths for uint;\\n    using BasicMaths for bool;\\n\\n    bytes32 private constant CONTRACT_FUNDTOKEN = \\\"FundToken\\\";\\n    bytes32 private constant CONTRACT_EXCHANGERATES = \\\"ExchangeRates\\\";\\n    bytes32 private constant CONTRACT_DEPOT = \\\"Depot\\\";\\n    bytes32 private constant CONTRACT_SYSTEMSETTING = \\\"SystemSetting\\\";\\n    bytes32 private constant CONTRACT_BASECURRENCY = \\\"BaseCurrency\\\";\\n\\n    /* -------------  contract interfaces  ------------- */\\n    function fundToken() internal view returns (address) {\\n        return requireAndGetAddress(CONTRACT_FUNDTOKEN, \\\"Missing FundToken Address\\\");\\n    }\\n\\n    function exchangeRates() internal view returns (IExchangeRates) {\\n        return IExchangeRates(requireAndGetAddress(CONTRACT_EXCHANGERATES, \\\"Missing ExchangeRates Address\\\"));\\n    }\\n\\n    function systemSetting() internal view returns (ISystemSetting) {\\n        return ISystemSetting(requireAndGetAddress(CONTRACT_SYSTEMSETTING, \\\"Missing SystemSetting Address\\\"));\\n    }\\n\\n    function depotAddress() internal view returns (address) {\\n        return requireAndGetAddress(CONTRACT_DEPOT, \\\"Missing Depot Address\\\");\\n    }\\n\\n    function getDepot() internal view returns (IDepot) {\\n        return IDepot(depotAddress());\\n    }\\n\\n    function baseCurrency() internal view returns (IERC20) {\\n        return IERC20(requireAndGetAddress(CONTRACT_BASECURRENCY, \\\"Missing BaseCurrency Address\\\"));\\n    }\\n\\n\\n    function liquidate(uint32 positionId) external override {\\n        ISystemSetting setting = systemSetting();\\n        setting.requireSystemActive();\\n        IDepot depot = getDepot();\\n\\n        require(IERC20(fundToken()).balanceOf(msg.sender) >= setting.minFundTokenRequired(),\\n            \\\"Not Meet Min Fund Token Required\\\");\\n\\n        Position memory position;\\n        (\\n            position.account,\\n            position.share,\\n            position.leveragedPosition,\\n            position.openPositionPrice,\\n            position.currencyKeyIdx,\\n            position.direction,\\n            position.margin,\\n            position.openRebaseLeft\\n        ) = depot.position(positionId);\\n\\n        require(position.account != address(0), \\\"Position Not Match\\\");\\n\\n        uint serviceFee = position.leveragedPosition.mul(setting.positionClosingFee()) / 1e18;\\n        uint marginLoss = depot.calMarginLoss(position.leveragedPosition, position.share, position.direction);\\n\\n        uint rateForCurrency = exchangeRates().rateForCurrencyByIdx(position.currencyKeyIdx);\\n        uint value = position.leveragedPosition.mul(rateForCurrency.diff(position.openPositionPrice)).div(position.openPositionPrice);\\n\\n        bool isProfit = (rateForCurrency >= position.openPositionPrice) == (position.direction == 1);\\n        uint feeAddML = serviceFee.add(marginLoss);\\n\\n        if ( isProfit ) {\\n            require(position.margin.add(value) > feeAddML, \\\"Position Cannot Be Liquidated in profit\\\");\\n        } else {\\n            require(position.margin > value.add(feeAddML), \\\"Position Cannot Be Liquidated in not profit\\\");\\n        }\\n\\n        require(\\n            isProfit.addOrSub(position.margin, value).sub(feeAddML) < position.margin.mul(setting.marginRatio()) / 1e18,\\n            \\\"Position Cannot Be Liquidated by not in marginRatio\\\");\\n\\n        uint liqReward = isProfit.addOrSub(position.margin, value).sub(feeAddML);\\n\\n        depot.liquidate(\\n            position,\\n            positionId,\\n            isProfit,\\n            serviceFee,\\n            value,\\n            marginLoss,\\n            liqReward,\\n            msg.sender);\\n\\n        emit Liquidate(\\n            msg.sender,\\n            positionId,\\n            rateForCurrency,\\n            serviceFee,\\n            liqReward,\\n            marginLoss,\\n            isProfit,\\n            value);\\n    }\\n\\n    function bankruptedLiquidate(uint32 positionId) external override {\\n        ISystemSetting setting = systemSetting();\\n        setting.requireSystemActive();\\n        IDepot depot = getDepot();\\n        require(IERC20(fundToken()).balanceOf(msg.sender) >= setting.minFundTokenRequired(),\\n            \\\"Not Meet Min Fund Token Required\\\");\\n\\n        Position memory position;\\n        (\\n            position.account,\\n            position.share,\\n            position.leveragedPosition,\\n            position.openPositionPrice,\\n            position.currencyKeyIdx,\\n            position.direction,\\n            position.margin,\\n            position.openRebaseLeft\\n        ) = depot.position(positionId);\\n        require(position.account != address(0), \\\"Position Not Match\\\");\\n\\n        uint serviceFee = position.leveragedPosition.mul(setting.positionClosingFee()) / 1e18;\\n        uint marginLoss = depot.calMarginLoss(position.leveragedPosition, position.share, position.direction);\\n\\n        uint rateForCurrency = exchangeRates().rateForCurrencyByIdx(position.currencyKeyIdx);\\n        uint value = position.leveragedPosition.mul(rateForCurrency.diff(position.openPositionPrice)) / position.openPositionPrice;\\n\\n        bool isProfit = (rateForCurrency >= position.openPositionPrice) == (position.direction == 1);\\n\\n        if ( isProfit ) {\\n            require(position.margin.add(value) < serviceFee.add(marginLoss), \\\"Position Cannot Be Bankrupted Liquidated\\\");\\n        } else {\\n            require(position.margin < value.add(serviceFee).add(marginLoss), \\\"Position Cannot Be Bankrupted Liquidated\\\");\\n        }\\n\\n        uint liquidateFee = position.margin.mul(setting.liquidationFee()) / 1e18;\\n\\n        depot.bankruptedLiquidate(\\n            position,\\n            positionId,\\n            liquidateFee,\\n            marginLoss,\\n            msg.sender);\\n\\n        emit BankruptedLiquidate(msg.sender, positionId, rateForCurrency, serviceFee, liquidateFee, marginLoss, isProfit, value);\\n    }\\n\\n    function alertLiquidation(uint32 positionId) external override view returns (bool) {\\n        IDepot depot = getDepot();\\n\\n        (\\n            address account,\\n            uint share,\\n            uint leveragedPosition,\\n            uint openPositionPrice,\\n            uint32 currencyKeyIdx,\\n            uint8 direction,\\n            uint margin,\\n        ) = depot.position(positionId);\\n\\n        if (account != address(0)) {\\n            uint serviceFee = leveragedPosition.mul(systemSetting().positionClosingFee()) / 1e18;\\n            uint marginLoss = depot.calMarginLoss(leveragedPosition, share, direction);\\n\\n            (bool isProfit, uint value) = depot.calNetProfit(currencyKeyIdx, leveragedPosition, openPositionPrice, direction);\\n\\n            if (isProfit) {\\n                if (margin.add(value) > serviceFee.add(marginLoss)) {\\n                    return margin.add(value).sub(serviceFee).sub(marginLoss) < margin.mul(systemSetting().marginRatio()) / 1e18;\\n                }\\n            } else {\\n                if (margin > value.add(serviceFee).add(marginLoss)) {\\n                    return margin.sub(value).sub(serviceFee).sub(marginLoss) < margin.mul(systemSetting().marginRatio()) / 1e18;\\n                }\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function alertBankruptedLiquidation(uint32 positionId) external override view returns (bool) {\\n        IDepot depot = getDepot();\\n\\n        (\\n            address account,\\n            uint share,\\n            uint leveragedPosition,\\n            uint openPositionPrice,\\n            uint32 currencyKeyIdx,\\n            uint8 direction,\\n            uint margin,\\n        ) = depot.position(positionId);\\n\\n        if (account != address(0)) {\\n            uint serviceFee = leveragedPosition.mul(systemSetting().positionClosingFee()) / 1e18;\\n            uint marginLoss = depot.calMarginLoss(leveragedPosition, share, direction);\\n\\n            (bool isProfit, uint value) = depot.calNetProfit(currencyKeyIdx, leveragedPosition, openPositionPrice, direction);\\n\\n            if (isProfit) {\\n                return margin.add(value) < serviceFee.add(marginLoss);\\n            } else {\\n                return margin < value.add(serviceFee).add(marginLoss);\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    event Liquidate(\\n        address indexed sender,\\n        uint32 positionId,\\n        uint price,\\n        uint serviceFee,\\n        uint liqReward,\\n        uint marginLoss,\\n        bool isProfit,\\n        uint value);\\n\\n    event BankruptedLiquidate(address indexed sender,\\n        uint32 positionId,\\n        uint price,\\n        uint serviceFee,\\n        uint liqReward,\\n        uint marginLoss,\\n        bool isProfit,\\n        uint value);\\n}\\n\"\r\n    },\r\n    \"/Users/hging/Downloads/qilin/contracts/interfaces/IDepot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nstruct Position {\\n    uint share;                 // decimals 18\\n    uint openPositionPrice;     // decimals 18\\n    uint leveragedPosition;     // decimals 6\\n    uint margin;                // decimals 6\\n    uint openRebaseLeft;        // decimals 18\\n    address account;\\n    uint32 currencyKeyIdx;\\n    uint8 direction;\\n}\\n\\ninterface IDepot {\\n    function initialFundingCompleted() external view returns (bool);\\n    function liquidityPool() external view returns (uint);\\n    function totalLeveragedPositions() external view returns (uint);\\n    function totalValue() external view returns (uint);\\n\\n    function position(uint32 index) external view returns (\\n        address account,\\n        uint share,\\n        uint leveragedPosition,\\n        uint openPositionPrice,\\n        uint32 currencyKeyIdx,\\n        uint8 direction,\\n        uint margin,\\n        uint openRebaseLeft);\\n\\n    function netValue(uint8 direction) external view returns (uint);\\n    function calMarginLoss(uint leveragedPosition, uint share, uint8 direction) external view returns (uint);\\n    function calNetProfit(uint32 currencyKeyIdx,\\n        uint leveragedPosition,\\n        uint openPositionPrice,\\n        uint8 direction) external view returns (bool, uint);\\n\\n    function completeInitialFunding() external;\\n\\n    function updateSubTotalState(bool isLong, uint liquidity, uint detaMargin,\\n        uint detaLeveraged, uint detaShare, uint rebaseLeft) external;\\n    function getTotalPositionState() external view returns (uint, uint, uint, uint);\\n\\n    function newPosition(\\n        address account,\\n        uint openPositionPrice,\\n        uint margin,\\n        uint32 currencyKeyIdx,\\n        uint16 level,\\n        uint8 direction) external returns (uint32);\\n\\n    function addDeposit(\\n        address account,\\n        uint32 positionId,\\n        uint margin) external;\\n\\n    function liquidate(\\n        Position memory position,\\n        uint32 positionId,\\n        bool isProfit,\\n        uint fee,\\n        uint value,\\n        uint marginLoss,\\n        uint liqReward,\\n        address liquidator) external;\\n\\n    function bankruptedLiquidate(\\n        Position memory position,\\n        uint32 positionId,\\n        uint liquidateFee,\\n        uint marginLoss,\\n        address liquidator) external;\\n\\n    function closePosition(\\n        Position memory position,\\n        uint32 positionId,\\n        bool isProfit,\\n        uint value,\\n        uint marginLoss,\\n        uint fee) external;\\n\\n    function addLiquidity(address account, uint value) external;\\n    function withdrawLiquidity(address account, uint value) external;\\n}\\n\"\r\n    },\r\n    \"/Users/hging/Downloads/qilin/contracts/interfaces/IExchangeRates.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\ninterface IExchangeRates {\\n    function addCurrencyKey(bytes32 currencyKey_, address aggregator_) external;\\n\\n    function updateCurrencyKey(bytes32 currencyKey_, address aggregator_) external;\\n\\n    function deleteCurrencyKey(bytes32 currencyKey) external;\\n\\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint32, uint);\\n\\n    function rateForCurrencyByIdx(uint32 idx) external view returns (uint);\\n\\n    function currencyKeyExist(bytes32 currencyKey) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/Users/hging/Downloads/qilin/contracts/interfaces/ILiquidation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\ninterface ILiquidation {\\n    function liquidate(uint32 positionId) external;\\n\\n    function bankruptedLiquidate(uint32 positionId) external;\\n\\n    function alertLiquidation(uint32 positionId) external view returns (bool);\\n\\n    function alertBankruptedLiquidation(uint32 positionId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/Users/hging/Downloads/qilin/contracts/interfaces/ISystemSetting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\ninterface ISystemSetting {\\n    // maxInitialLiquidityFunding\\n    function maxInitialLiquidityFunding() external view returns (uint256);\\n\\n    // constantMarginRatio\\n    function constantMarginRatio() external view returns (uint256);\\n\\n    // leverageExist\\n    function leverageExist(uint32 leverage_) external view returns (bool);\\n\\n    // minInitialMargin\\n    function minInitialMargin() external view returns (uint256);\\n\\n    // minAddDeposit\\n    function minAddDeposit() external view returns (uint256);\\n\\n    // minHoldingPeriod\\n    function minHoldingPeriod() external view returns (uint);\\n\\n    // marginRatio\\n    function marginRatio() external view returns (uint256);\\n\\n    // positionClosingFee\\n    function positionClosingFee() external view returns (uint256);\\n\\n    // liquidationFee\\n    function liquidationFee() external view returns (uint256);\\n\\n    // rebaseInterval\\n    function rebaseInterval() external view returns (uint);\\n\\n    // rebaseRate\\n    function rebaseRate() external view returns (uint);\\n\\n    // imbalanceThreshold\\n    function imbalanceThreshold() external view returns (uint);\\n\\n    // minFundTokenRequired\\n    function minFundTokenRequired() external view returns (uint);\\n\\n    function checkOpenPosition(uint position, uint16 level) external view;\\n    function checkAddDeposit(uint margin) external view;\\n\\n    function requireSystemActive() external;\\n    function resumeSystem() external;\\n    function suspendSystem() external;\\n\\n    event Suspend(address indexed sender);\\n    event Resume(address indexed sender);\\n}\\n\"\r\n    },\r\n    \"/Users/hging/Downloads/qilin/contracts/utils/AddressResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract AddressResolver is Ownable {\\n    mapping(bytes32 => address) public repository;\\n\\n    function importAddresses(bytes32[] calldata names, address[] calldata destinations) external onlyOwner {\\n        require(names.length == destinations.length, \\\"Input lengths must match\\\");\\n\\n        for (uint i = 0; i < names.length; i++) {\\n            repository[names[i]] = destinations[i];\\n        }\\n    }\\n\\n    function requireAndGetAddress(bytes32 name, string memory reason) internal view returns (address) {\\n        address _foundAddress = repository[name];\\n        require(_foundAddress != address(0), reason);\\n        return _foundAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/hging/Downloads/qilin/contracts/utils/BasicMaths.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary BasicMaths {\\n    /**\\n     * @dev Returns the abs of substraction of two unsigned integers\\n     *\\n     * _Available since v3.4._\\n     */\\n    function diff(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a >= b) {\\n            return a - b;\\n        } else {\\n            return b - a;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a - b if a > b, else return 0\\n     *\\n     * _Available since v3.4._\\n     */\\n    function sub2Zero(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return a - b;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev if isSub then Returns a - b, else return a + b\\n     *\\n     * _Available since v3.4._\\n     */\\n    function addOrSub(bool isAdd, uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (isAdd) {\\n            return SafeMath.add(a, b);\\n        } else {\\n            return SafeMath.sub(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @dev if isSub then Returns sub2Zero(a, b), else return a + b\\n     *\\n     * _Available since v3.4._\\n     */\\n    function addOrSub2Zero(bool isAdd, uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (isAdd) {\\n            return SafeMath.add(a, b);\\n        } else {\\n            if (a > b) {\\n                return a - b;\\n            } else {\\n                return 0;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"positionId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liqReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marginLoss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isProfit\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BankruptedLiquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"positionId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liqReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marginLoss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isProfit\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"positionId\",\"type\":\"uint32\"}],\"name\":\"alertBankruptedLiquidation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"positionId\",\"type\":\"uint32\"}],\"name\":\"alertLiquidation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"positionId\",\"type\":\"uint32\"}],\"name\":\"bankruptedLiquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"names\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"destinations\",\"type\":\"address[]\"}],\"name\":\"importAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"positionId\",\"type\":\"uint32\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"repository\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Liquidation","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}