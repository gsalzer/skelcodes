{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: MIT\r\n\r\n// Tornado Cash proposal to fund a multisig with 5% of the vested TORN of the governance treasury \r\n// and 5% of the funds vesting over the next 12 month. The multisig is owned by community members\r\n// and its goal is to funds ecosystem initiatives. \r\n\r\n// Author: @Rezan-vm\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface ISablier {\r\n    function createStream(\r\n        address recipient,\r\n        uint256 deposit,\r\n        address tokenAddress,\r\n        uint256 startTime,\r\n        uint256 stopTime\r\n    ) external returns (uint256);\r\n}\r\n\r\ninterface Vesting {\r\n  function SECONDS_PER_MONTH() external view returns (uint256);\r\n  function release() external;\r\n  function vestedAmount() external view returns (uint256);\r\n  function released() external view returns (uint256);\r\n  function startTimestamp() external view returns (uint256);\r\n}\r\n\r\ncontract TCashProposal {\r\n    IERC20 public constant TORN = IERC20(0x77777FeDdddFfC19Ff86DB637967013e6C6A116C);\r\n    \r\n    Vesting public constant GOV_VESTING = Vesting(0x179f48C78f57A3A78f0608cC9197B8972921d1D2);\r\n\r\n    ISablier public constant SABLIER = ISablier(0xA4fc358455Febe425536fd1878bE67FfDBDEC59a);\r\n\r\n    // Gnosis safe address that will receive the tokens\r\n    address public constant COMMUNITY_MULTISIG = address(0xb04E030140b30C27bcdfaafFFA98C57d80eDa7B4);\r\n    \r\n    // Percentage of the treasury to fund the multisig with\r\n    uint256 public constant PERCENT_OF_TREASURY = 5; // 5%\r\n    \r\n    uint256 public constant SECOND_PER_MONTH = 30 days;\r\n    uint256 public constant MONTH_PER_YEAR = 12;\r\n    uint256 public constant SECOND_PER_YEAR = SECOND_PER_MONTH * MONTH_PER_YEAR;\r\n    uint256 public constant HUNDRED = 100;\r\n\r\n    function executeProposal() public {\r\n        // Claim vested funds if any\r\n        if(GOV_VESTING.vestedAmount() > 0) {\r\n            GOV_VESTING.release();\r\n        }\r\n\r\n        // Total funds that have already vested\r\n        uint256 releasedFunds = GOV_VESTING.released();\r\n\r\n        // Initial Funding, transfer 5% of what has already vested\r\n        // Note: No safeMath needed in solidity 0.8.0\r\n        TORN.transfer(COMMUNITY_MULTISIG, releasedFunds * PERCENT_OF_TREASURY / HUNDRED);\r\n\r\n        // Calculate how many token are vesting per month\r\n        uint256 elapsedMonths = (block.timestamp - GOV_VESTING.startTimestamp()) / SECOND_PER_MONTH;\r\n        uint256 vestingPerMonth = releasedFunds / elapsedMonths;\r\n        \r\n        // Send to sablier 5% of what is about to unlock in the next 12 months\r\n        uint256 sablierDeposit = vestingPerMonth * MONTH_PER_YEAR * PERCENT_OF_TREASURY / HUNDRED;\r\n        \r\n        // The deposited amount in Sablier needs to be a multiple of the of the distribution period.\r\n        // Round down and distribute slightly less tokens.\r\n        uint256 sablierAdjustedDeposit = sablierDeposit - sablierDeposit % SECOND_PER_YEAR;\r\n\r\n        // Approve the amount and create the stream\r\n        TORN.approve(address(SABLIER), sablierAdjustedDeposit);\r\n        SABLIER.createStream(\r\n            COMMUNITY_MULTISIG,\r\n            sablierAdjustedDeposit,\r\n            address(TORN),\r\n            block.timestamp,\r\n            block.timestamp + SECOND_PER_YEAR\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"COMMUNITY_MULTISIG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV_VESTING\",\"outputs\":[{\"internalType\":\"contract Vesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HUNDRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MONTH_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_OF_TREASURY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SABLIER\",\"outputs\":[{\"internalType\":\"contract ISablier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECOND_PER_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECOND_PER_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TORN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TCashProposal","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://68a1cfa762ddb6d6ff5f271356bc806d33e389128974d3e2ec29d2863746d7fd"}]}