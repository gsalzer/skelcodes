{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/core/abstractV2/PendleLiquidityMiningBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../../periphery/WithdrawableV2.sol\\\";\\nimport \\\"../../interfaces/IPendleLiquidityMiningV2.sol\\\";\\nimport \\\"../../interfaces/IPendlePausingManager.sol\\\";\\nimport \\\"../../interfaces/IPendleWhitelist.sol\\\";\\nimport \\\"../../libraries/MathLib.sol\\\";\\nimport \\\"../../libraries/TokenUtilsLib.sol\\\";\\n\\n/*\\n- stakeToken is the token to be used to stake into this contract to receive rewards\\n- yieldToken is the token generated by stakeToken while it's being staked. For example, Sushi's LP\\ntoken generates SUSHI(if it's in Onsen program), or Pendle's Aave LP generates aToken\\n- If there is no yieldToken, it should be set to address(0) to save gas\\n*/\\ncontract PendleLiquidityMiningBaseV2 is IPendleLiquidityMiningV2, WithdrawableV2, ReentrancyGuard {\\n    using Math for uint256;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    struct EpochData {\\n        uint256 totalStakeUnits;\\n        uint256 totalRewards;\\n        uint256 lastUpdated;\\n        mapping(address => uint256) stakeUnitsForUser;\\n        mapping(address => uint256) availableRewardsForUser;\\n    }\\n\\n    IPendleWhitelist public immutable whitelist;\\n    IPendlePausingManager public immutable pausingManager;\\n\\n    uint256 public override numberOfEpochs;\\n    uint256 public override totalStake;\\n    mapping(uint256 => EpochData) internal epochData;\\n    mapping(address => uint256) public override balances;\\n    mapping(address => uint256) public lastTimeUserStakeUpdated;\\n    mapping(address => uint256) public lastEpochClaimed;\\n\\n    address public immutable override pendleTokenAddress;\\n    address public immutable override stakeToken;\\n    address public immutable override yieldToken;\\n    uint256 public immutable override startTime;\\n    uint256 public immutable override epochDuration;\\n    uint256 public immutable override vestingEpochs;\\n    uint256 public constant MULTIPLIER = 10**20;\\n\\n    // yieldToken-related\\n    mapping(address => uint256) public override dueInterests;\\n    mapping(address => uint256) public override lastParamL;\\n    uint256 public override lastNYield;\\n    uint256 public override paramL;\\n\\n    modifier hasStarted() {\\n        require(_getCurrentEpochId() > 0, \\\"NOT_STARTED\\\");\\n        _;\\n    }\\n\\n    modifier nonContractOrWhitelisted() {\\n        bool isEOA = !Address.isContract(msg.sender) && tx.origin == msg.sender;\\n        require(isEOA || whitelist.whitelisted(msg.sender), \\\"CONTRACT_NOT_WHITELISTED\\\");\\n        _;\\n    }\\n\\n    modifier isUserAllowedToUse() {\\n        (bool paused, ) = pausingManager.checkLiqMiningStatus(address(this));\\n        require(!paused, \\\"LIQ_MINING_PAUSED\\\");\\n        require(numberOfEpochs > 0, \\\"NOT_FUNDED\\\");\\n        require(_getCurrentEpochId() > 0, \\\"NOT_STARTED\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _governanceManager,\\n        address _pausingManager,\\n        address _whitelist,\\n        address _pendleTokenAddress,\\n        address _stakeToken,\\n        address _yieldToken,\\n        uint256 _startTime,\\n        uint256 _epochDuration,\\n        uint256 _vestingEpochs\\n    ) PermissionsV2(_governanceManager) {\\n        require(_startTime > block.timestamp, \\\"INVALID_START_TIME\\\");\\n        TokenUtils.requireERC20(_pendleTokenAddress);\\n        TokenUtils.requireERC20(_stakeToken);\\n        require(_vestingEpochs > 0, \\\"INVALID_VESTING_EPOCHS\\\");\\n        // yieldToken can be zero address\\n        pausingManager = IPendlePausingManager(_pausingManager);\\n        whitelist = IPendleWhitelist(_whitelist);\\n        pendleTokenAddress = _pendleTokenAddress;\\n\\n        stakeToken = _stakeToken;\\n        yieldToken = _yieldToken;\\n        startTime = _startTime;\\n        epochDuration = _epochDuration;\\n        vestingEpochs = _vestingEpochs;\\n        paramL = 1;\\n    }\\n\\n    /**\\n    @notice set up emergencyMode by pulling all tokens back to this contract & approve spender to\\n    spend infinity amount\\n    */\\n    function setUpEmergencyMode(address spender, bool) external virtual override {\\n        (, bool emergencyMode) = pausingManager.checkLiqMiningStatus(address(this));\\n        require(emergencyMode, \\\"NOT_EMERGENCY\\\");\\n\\n        (address liqMiningEmergencyHandler, , ) = pausingManager.liqMiningEmergencyHandler();\\n        require(msg.sender == liqMiningEmergencyHandler, \\\"NOT_EMERGENCY_HANDLER\\\");\\n\\n        // because we are not staking our tokens anywhere else, we can just approve\\n        IERC20(pendleTokenAddress).safeApprove(spender, type(uint256).max);\\n        IERC20(stakeToken).safeApprove(spender, type(uint256).max);\\n        if (yieldToken != address(0)) IERC20(yieldToken).safeApprove(spender, type(uint256).max);\\n    }\\n\\n    /**\\n    @notice create new epochs & fund rewards for them\\n    @dev same logic as the function in V1\\n    */\\n    function fund(uint256[] calldata rewards) external virtual override onlyGovernance {\\n        // Once the program is over, it cannot be extended\\n        require(_getCurrentEpochId() <= numberOfEpochs, \\\"LAST_EPOCH_OVER\\\");\\n\\n        uint256 nNewEpochs = rewards.length;\\n        uint256 totalFunded;\\n        // all the funding will be used for new epochs\\n        for (uint256 i = 0; i < nNewEpochs; i++) {\\n            totalFunded = totalFunded.add(rewards[i]);\\n            epochData[numberOfEpochs + i + 1].totalRewards = rewards[i];\\n        }\\n\\n        numberOfEpochs = numberOfEpochs.add(nNewEpochs);\\n        IERC20(pendleTokenAddress).safeTransferFrom(msg.sender, address(this), totalFunded);\\n        emit Funded(rewards, numberOfEpochs);\\n    }\\n\\n    /**\\n    @notice top up rewards of exisiting epochs\\n    @dev almost same logic as the function in V1 without the redundant isFunded check\\n    */\\n    function topUpRewards(uint256[] calldata epochIds, uint256[] calldata rewards)\\n        external\\n        virtual\\n        override\\n        onlyGovernance\\n    {\\n        require(epochIds.length == rewards.length, \\\"INVALID_ARRAYS\\\");\\n\\n        uint256 curEpoch = _getCurrentEpochId();\\n        uint256 endEpoch = numberOfEpochs;\\n        uint256 totalTopUp;\\n\\n        for (uint256 i = 0; i < epochIds.length; i++) {\\n            require(curEpoch < epochIds[i] && epochIds[i] <= endEpoch, \\\"INVALID_EPOCH_ID\\\");\\n            totalTopUp = totalTopUp.add(rewards[i]);\\n            epochData[epochIds[i]].totalRewards = epochData[epochIds[i]].totalRewards.add(\\n                rewards[i]\\n            );\\n        }\\n\\n        IERC20(pendleTokenAddress).safeTransferFrom(msg.sender, address(this), totalTopUp);\\n        emit RewardsToppedUp(epochIds, rewards);\\n    }\\n\\n    /**\\n    @notice stake tokens in to receive rewards. It's allowed to stake for others\\n    @param forAddr the address to stake for\\n    @dev all staking data will be updated for `forAddr`, but msg.sender will be the one transferring\\n    tokens in\\n     */\\n    function stake(address forAddr, uint256 amount)\\n        external\\n        virtual\\n        override\\n        nonReentrant\\n        nonContractOrWhitelisted\\n        isUserAllowedToUse\\n    {\\n        require(forAddr != address(0), \\\"ZERO_ADDRESS\\\");\\n        require(amount != 0, \\\"ZERO_AMOUNT\\\");\\n        require(_getCurrentEpochId() <= numberOfEpochs, \\\"INCENTIVES_PERIOD_OVER\\\");\\n\\n        _settleStake(forAddr, msg.sender, amount);\\n        emit Staked(forAddr, amount);\\n    }\\n\\n    /**\\n    @notice withdraw tokens from the staking contract. It's allowed to withdraw to an address\\n    different from msg.sender\\n    @param toAddr the address to receive all tokens\\n    @dev all staking data will be updated for msg.sender, but `toAddr` will be the one receiving\\n    all tokens\\n    */\\n    function withdraw(address toAddr, uint256 amount)\\n        external\\n        virtual\\n        override\\n        nonReentrant\\n        isUserAllowedToUse\\n    {\\n        require(amount != 0, \\\"ZERO_AMOUNT\\\");\\n        require(toAddr != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        _settleWithdraw(msg.sender, toAddr, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    /**\\n    @notice redeem all available rewards from expired epochs. It's allowed to redeem for others\\n    @param user the address whose data will be updated & receive rewards\\n    */\\n    function redeemRewards(address user)\\n        external\\n        virtual\\n        override\\n        nonReentrant\\n        isUserAllowedToUse\\n        returns (uint256 rewards)\\n    {\\n        require(user != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        rewards = _beforeTransferPendingRewards(user);\\n        if (rewards != 0) IERC20(pendleTokenAddress).safeTransfer(user, rewards);\\n    }\\n\\n    /**\\n    @notice redeem all due interests. It's allowed to redeem for others\\n    @param user the address whose data will be updated & receive due interests\\n    */\\n    function redeemDueInterests(address user)\\n        external\\n        virtual\\n        override\\n        nonReentrant\\n        isUserAllowedToUse\\n        returns (uint256 amountOut)\\n    {\\n        if (yieldToken == address(0)) return 0;\\n        require(user != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        amountOut = _beforeTransferDueInterests(user);\\n        amountOut = _pushYieldToken(user, amountOut);\\n    }\\n\\n    function updateAndReadEpochData(uint256 epochId, address user)\\n        external\\n        override\\n        nonReentrant\\n        isUserAllowedToUse\\n        returns (\\n            uint256 totalStakeUnits,\\n            uint256 totalRewards,\\n            uint256 lastUpdated,\\n            uint256 stakeUnitsForUser,\\n            uint256 availableRewardsForUser\\n        )\\n    {\\n        _updatePendingRewards(user);\\n        return readEpochData(epochId, user);\\n    }\\n\\n    function readEpochData(uint256 epochId, address user)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256 totalStakeUnits,\\n            uint256 totalRewards,\\n            uint256 lastUpdated,\\n            uint256 stakeUnitsForUser,\\n            uint256 availableRewardsForUser\\n        )\\n    {\\n        totalStakeUnits = epochData[epochId].totalStakeUnits;\\n        totalRewards = epochData[epochId].totalRewards;\\n        lastUpdated = epochData[epochId].lastUpdated;\\n        stakeUnitsForUser = epochData[epochId].stakeUnitsForUser[user];\\n        availableRewardsForUser = epochData[epochId].availableRewardsForUser[user];\\n    }\\n\\n    /**\\n    @notice update all reward-related data for user\\n    @dev to be called before user's stakeToken balance changes\\n    @dev same logic as the function in V1\\n    */\\n    function _updatePendingRewards(address user) internal virtual {\\n        _updateStakeData();\\n\\n        // user has not staked before, no need to do anything\\n        if (lastTimeUserStakeUpdated[user] == 0) {\\n            lastTimeUserStakeUpdated[user] = block.timestamp;\\n            return;\\n        }\\n\\n        uint256 _curEpoch = _getCurrentEpochId();\\n        uint256 _endEpoch = Math.min(numberOfEpochs, _curEpoch);\\n\\n        // if _curEpoch<=numberOfEpochs => the endEpoch hasn't ended yet (since endEpoch=curEpoch)\\n        bool _isEndEpochOver = (_curEpoch > numberOfEpochs);\\n\\n        // caching\\n        uint256 _balance = balances[user];\\n        uint256 _lastTimeUserStakeUpdated = lastTimeUserStakeUpdated[user];\\n        uint256 _totalStake = totalStake;\\n        uint256 _startEpoch = _epochOfTimestamp(_lastTimeUserStakeUpdated);\\n\\n        // Go through all epochs until now to update stakeUnitsForUser and availableRewardsForEpoch\\n        for (uint256 epochId = _startEpoch; epochId <= _endEpoch; epochId++) {\\n            if (epochData[epochId].totalStakeUnits == 0) {\\n                // in the extreme case of zero staked tokens for this expiry even now,\\n                // => nothing to do from this epoch onwards\\n                if (_totalStake == 0) break;\\n                // nobody stakes anything in this epoch\\n                continue;\\n            }\\n            // updating stakeUnits for users. The logic of this is similar to _updateStakeDataForExpiry\\n            epochData[epochId].stakeUnitsForUser[user] = epochData[epochId]\\n            .stakeUnitsForUser[user]\\n            .add(_calcUnitsStakeInEpoch(_balance, _lastTimeUserStakeUpdated, epochId));\\n\\n            // all epochs prior to the endEpoch must have ended\\n            // if epochId == _endEpoch, we must check if the epoch has ended or not\\n            if (epochId == _endEpoch && !_isEndEpochOver) {\\n                break;\\n            }\\n\\n            // Now this epoch has ended,let's distribute its reward to this user\\n            // calc the amount of rewards the user is eligible to receive from this epoch\\n            uint256 rewardsPerVestingEpoch = _calcAmountRewardsForUserInEpoch(user, epochId);\\n\\n            // Now we distribute this rewards over the vestingEpochs starting from epochId + 1\\n            // to epochId + vestingEpochs\\n            for (uint256 i = epochId + 1; i <= epochId + vestingEpochs; i++) {\\n                epochData[i].availableRewardsForUser[user] = epochData[i]\\n                .availableRewardsForUser[user]\\n                .add(rewardsPerVestingEpoch);\\n            }\\n        }\\n\\n        lastTimeUserStakeUpdated[user] = block.timestamp;\\n    }\\n\\n    /**\\n    @notice update staking data for the current epoch\\n    @dev same logic as the function in V1\\n    */\\n    function _updateStakeData() internal virtual {\\n        uint256 _curEpoch = _getCurrentEpochId();\\n\\n        // loop through all epochData in descending order\\n        for (uint256 i = Math.min(_curEpoch, numberOfEpochs); i > 0; i--) {\\n            uint256 epochEndTime = _endTimeOfEpoch(i);\\n            uint256 lastUpdatedForEpoch = epochData[i].lastUpdated;\\n\\n            if (lastUpdatedForEpoch == epochEndTime) {\\n                break; // its already updated until this epoch, our job here is done\\n            }\\n\\n            // if the epoch hasn't been fully updated yet, we will update it\\n            // just add the amount of units contributed by users since lastUpdatedForEpoch -> now\\n            // by calling _calcUnitsStakeInEpoch\\n            epochData[i].totalStakeUnits = epochData[i].totalStakeUnits.add(\\n                _calcUnitsStakeInEpoch(totalStake, lastUpdatedForEpoch, i)\\n            );\\n            // If the epoch has ended, lastUpdated = epochEndTime\\n            // If not yet, lastUpdated = block.timestamp (aka now)\\n            epochData[i].lastUpdated = Math.min(block.timestamp, epochEndTime);\\n        }\\n    }\\n\\n    /**\\n    @notice update all interest-related data for user\\n    @dev to be called before user's stakeToken balance changes or when user wants to update his\\n    interests\\n    @dev same logic as the function in CompoundLiquidityMiningV1\\n    */\\n    function _updateDueInterests(address user) internal virtual {\\n        if (yieldToken == address(0)) return;\\n\\n        _updateParamL();\\n\\n        if (lastParamL[user] == 0) {\\n            lastParamL[user] = paramL;\\n            return;\\n        }\\n\\n        uint256 principal = balances[user];\\n        uint256 interestValuePerStakeToken = paramL.sub(lastParamL[user]);\\n\\n        uint256 interestFromStakeToken = principal.mul(interestValuePerStakeToken).div(MULTIPLIER);\\n\\n        dueInterests[user] = dueInterests[user].add(interestFromStakeToken);\\n        lastParamL[user] = paramL;\\n    }\\n\\n    /**\\n    @notice update paramL, lastNYield & redeem interest from external sources\\n    @dev to be called only from _updateDueInterests\\n    @dev same logic as the function in V1\\n    */\\n    function _updateParamL() internal virtual {\\n        if (yieldToken == address(0) || !_checkNeedUpdateParamL()) return;\\n\\n        _redeemExternalInterests();\\n\\n        uint256 currentNYield = IERC20(yieldToken).balanceOf(address(this));\\n        (uint256 firstTerm, uint256 paramR) = _getFirstTermAndParamR(currentNYield);\\n\\n        uint256 secondTerm;\\n\\n        if (totalStake != 0) secondTerm = paramR.mul(MULTIPLIER).div(totalStake);\\n\\n        // Update new states\\n        paramL = firstTerm.add(secondTerm);\\n        lastNYield = currentNYield;\\n    }\\n\\n    /**\\n    @dev same logic as the function in CompoundLiquidityMining\\n    @dev to be called only from _updateParamL\\n    */\\n    function _getFirstTermAndParamR(uint256 currentNYield)\\n        internal\\n        virtual\\n        returns (uint256 firstTerm, uint256 paramR)\\n    {\\n        firstTerm = paramL;\\n        paramR = currentNYield.sub(lastNYield);\\n    }\\n\\n    /**\\n    @dev function is empty because by default yieldToken==0\\n    */\\n    function _checkNeedUpdateParamL() internal virtual returns (bool) {}\\n\\n    /**\\n    @dev function is empty because by default yieldToken==0\\n    */\\n    function _redeemExternalInterests() internal virtual {}\\n\\n    /**\\n    @notice Calc the amount of rewards that the user can receive now & clear all the pending\\n    rewards\\n    @dev To be called before any rewards is transferred out\\n    @dev same logic as the function in V1\\n    */\\n    function _beforeTransferPendingRewards(address user)\\n        internal\\n        virtual\\n        returns (uint256 amountOut)\\n    {\\n        _updatePendingRewards(user);\\n\\n        uint256 _lastEpoch = Math.min(_getCurrentEpochId(), numberOfEpochs + vestingEpochs);\\n        for (uint256 i = lastEpochClaimed[user]; i <= _lastEpoch; i++) {\\n            if (epochData[i].availableRewardsForUser[user] > 0) {\\n                amountOut = amountOut.add(epochData[i].availableRewardsForUser[user]);\\n                epochData[i].availableRewardsForUser[user] = 0;\\n            }\\n        }\\n\\n        lastEpochClaimed[user] = _lastEpoch;\\n        emit PendleRewardsSettled(user, amountOut);\\n    }\\n\\n    /**\\n    @notice Calc the amount of interests that the user can receive now & clear all the due\\n    interests\\n    @dev To be called before any interests is transferred out\\n    @dev same logic as the function in V1\\n    */\\n    function _beforeTransferDueInterests(address user)\\n        internal\\n        virtual\\n        returns (uint256 amountOut)\\n    {\\n        if (yieldToken == address(0)) return 0;\\n\\n        _updateDueInterests(user);\\n        amountOut = Math.min(dueInterests[user], lastNYield);\\n        dueInterests[user] = 0;\\n        lastNYield = lastNYield.sub(amountOut);\\n    }\\n\\n    /**\\n    @param user the address whose all stake data will be updated\\n    @param payer the address which tokens will be pulled from\\n    @param amount amount of tokens to be staked\\n    @dev payer is only used to pass to _pullStakeToken\\n     */\\n    function _settleStake(\\n        address user,\\n        address payer,\\n        uint256 amount\\n    ) internal virtual {\\n        _updatePendingRewards(user);\\n        _updateDueInterests(user);\\n\\n        balances[user] = balances[user].add(amount);\\n        totalStake = totalStake.add(amount);\\n\\n        _pullStakeToken(payer, amount);\\n    }\\n\\n    /**\\n    @param user the address whose all stake data will be updated\\n    @param receiver the address which tokens will be pushed to\\n    @param amount amount of tokens to be withdrawn\\n    @dev receiver is only used to pass to _pullStakeToken\\n     */\\n    function _settleWithdraw(\\n        address user,\\n        address receiver,\\n        uint256 amount\\n    ) internal virtual {\\n        _updatePendingRewards(user);\\n        _updateDueInterests(user);\\n\\n        balances[user] = balances[user].sub(amount);\\n        totalStake = totalStake.sub(amount);\\n\\n        _pushStakeToken(receiver, amount);\\n    }\\n\\n    function _pullStakeToken(address from, uint256 amount) internal virtual {\\n        // For the case that we don't need to stake the stakeToken anywhere else, just pull it\\n        // into the current contract\\n        IERC20(stakeToken).safeTransferFrom(from, address(this), amount);\\n    }\\n\\n    function _pushStakeToken(address to, uint256 amount) internal virtual {\\n        // For the case that we don't need to stake the stakeToken anywhere else, just transfer out\\n        // from the current contract\\n        if (amount != 0) IERC20(stakeToken).safeTransfer(to, amount);\\n    }\\n\\n    function _pushYieldToken(address to, uint256 amount)\\n        internal\\n        virtual\\n        returns (uint256 outAmount)\\n    {\\n        outAmount = Math.min(amount, IERC20(yieldToken).balanceOf(address(this)));\\n        if (outAmount != 0) IERC20(yieldToken).safeTransfer(to, outAmount);\\n    }\\n\\n    /**\\n     @notice returns the stakeUnits in the _epochId(th) epoch of an user if he stake from _startTime to now\\n     @dev to calculate durationStakeThisEpoch:\\n       user will stake from _startTime -> _endTime, while the epoch last from _startTimeOfEpoch -> _endTimeOfEpoch\\n       => the stakeDuration of user will be min(_endTime,_endTimeOfEpoch) - max(_startTime,_startTimeOfEpoch)\\n     @dev same logic as in V1\\n     */\\n    function _calcUnitsStakeInEpoch(\\n        uint256 _tokenAmount,\\n        uint256 _startTime,\\n        uint256 _epochId\\n    ) internal view returns (uint256 stakeUnitsForUser) {\\n        uint256 _endTime = block.timestamp;\\n\\n        uint256 _l = Math.max(_startTime, _startTimeOfEpoch(_epochId));\\n        uint256 _r = Math.min(_endTime, _endTimeOfEpoch(_epochId));\\n        uint256 durationStakeThisEpoch = _r.subMax0(_l);\\n\\n        return _tokenAmount.mul(durationStakeThisEpoch);\\n    }\\n\\n    /**\\n    @notice calc the amount of rewards the user is eligible to receive from this epoch, but we will\\n    return the amount per vestingEpoch instead\\n    @dev same logic as in V1\\n     */\\n    function _calcAmountRewardsForUserInEpoch(address user, uint256 epochId)\\n        internal\\n        view\\n        returns (uint256 rewardsPerVestingEpoch)\\n    {\\n        rewardsPerVestingEpoch = epochData[epochId]\\n        .totalRewards\\n        .mul(epochData[epochId].stakeUnitsForUser[user])\\n        .div(epochData[epochId].totalStakeUnits)\\n        .div(vestingEpochs);\\n    }\\n\\n    function _startTimeOfEpoch(uint256 t) internal view returns (uint256) {\\n        // epoch id starting from 1\\n        return startTime.add((t.sub(1)).mul(epochDuration));\\n    }\\n\\n    function _getCurrentEpochId() internal view returns (uint256) {\\n        return _epochOfTimestamp(block.timestamp);\\n    }\\n\\n    function _epochOfTimestamp(uint256 t) internal view returns (uint256) {\\n        if (t < startTime) return 0;\\n        return (t.sub(startTime)).div(epochDuration).add(1);\\n    }\\n\\n    function _endTimeOfEpoch(uint256 t) internal view returns (uint256) {\\n        // epoch id starting from 1\\n        return startTime.add(t.mul(epochDuration));\\n    }\\n\\n    function _allowedToWithdraw(address _token) internal view override returns (bool allowed) {\\n        allowed = _token != pendleTokenAddress && _token != stakeToken && _token != yieldToken;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/WithdrawableV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./PermissionsV2.sol\\\";\\n\\nabstract contract WithdrawableV2 is PermissionsV2 {\\n    using SafeERC20 for IERC20;\\n\\n    event EtherWithdraw(uint256 amount, address sendTo);\\n    event TokenWithdraw(IERC20 token, uint256 amount, address sendTo);\\n\\n    /**\\n     * @dev Allows governance to withdraw Ether in a Pendle contract\\n     *      in case of accidental ETH transfer into the contract.\\n     * @param amount The amount of Ether to withdraw.\\n     * @param sendTo The recipient address.\\n     */\\n    function withdrawEther(uint256 amount, address payable sendTo) external onlyGovernance {\\n        (bool success, ) = sendTo.call{value: amount}(\\\"\\\");\\n        require(success, \\\"WITHDRAW_FAILED\\\");\\n        emit EtherWithdraw(amount, sendTo);\\n    }\\n\\n    /**\\n     * @dev Allows governance to withdraw all IERC20 compatible tokens in a Pendle\\n     *      contract in case of accidental token transfer into the contract.\\n     * @param token IERC20 The address of the token contract.\\n     * @param amount The amount of IERC20 tokens to withdraw.\\n     * @param sendTo The recipient address.\\n     */\\n    function withdrawToken(\\n        IERC20 token,\\n        uint256 amount,\\n        address sendTo\\n    ) external onlyGovernance {\\n        require(_allowedToWithdraw(address(token)), \\\"TOKEN_NOT_ALLOWED\\\");\\n        token.safeTransfer(sendTo, amount);\\n        emit TokenWithdraw(token, amount, sendTo);\\n    }\\n\\n    // must be overridden by the sub contracts, so we must consider explicitly\\n    // in each and every contract which tokens are allowed to be withdrawn\\n    function _allowedToWithdraw(address) internal view virtual returns (bool allowed);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPendleLiquidityMiningV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n * MIT License\\n * ===========\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in all\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n */\\n\\npragma solidity 0.7.6;\\n\\ninterface IPendleLiquidityMiningV2 {\\n    event Funded(uint256[] rewards, uint256 numberOfEpochs);\\n    event RewardsToppedUp(uint256[] epochIds, uint256[] rewards);\\n    event Staked(address user, uint256 amount);\\n    event Withdrawn(address user, uint256 amount);\\n    event PendleRewardsSettled(address user, uint256 amount);\\n\\n    function fund(uint256[] calldata rewards) external;\\n\\n    function topUpRewards(uint256[] calldata epochIds, uint256[] calldata rewards) external;\\n\\n    function stake(address forAddr, uint256 amount) external;\\n\\n    function withdraw(address toAddr, uint256 amount) external;\\n\\n    function redeemRewards(address user) external returns (uint256 rewards);\\n\\n    function redeemDueInterests(address user) external returns (uint256 amountOut);\\n\\n    function setUpEmergencyMode(address spender, bool) external;\\n\\n    function updateAndReadEpochData(uint256 epochId, address user)\\n        external\\n        returns (\\n            uint256 totalStakeUnits,\\n            uint256 totalRewards,\\n            uint256 lastUpdated,\\n            uint256 stakeUnitsForUser,\\n            uint256 availableRewardsForUser\\n        );\\n\\n    function balances(address user) external view returns (uint256);\\n\\n    function startTime() external view returns (uint256);\\n\\n    function epochDuration() external view returns (uint256);\\n\\n    function readEpochData(uint256 epochId, address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalStakeUnits,\\n            uint256 totalRewards,\\n            uint256 lastUpdated,\\n            uint256 stakeUnitsForUser,\\n            uint256 availableRewardsForUser\\n        );\\n\\n    function numberOfEpochs() external view returns (uint256);\\n\\n    function vestingEpochs() external view returns (uint256);\\n\\n    function stakeToken() external view returns (address);\\n\\n    function yieldToken() external view returns (address);\\n\\n    function pendleTokenAddress() external view returns (address);\\n\\n    function totalStake() external view returns (uint256);\\n\\n    function dueInterests(address) external view returns (uint256);\\n\\n    function lastParamL(address) external view returns (uint256);\\n\\n    function lastNYield() external view returns (uint256);\\n\\n    function paramL() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPendlePausingManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n * MIT License\\n * ===========\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in all\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n */\\npragma solidity 0.7.6;\\n\\ninterface IPendlePausingManager {\\n    event AddPausingAdmin(address admin);\\n    event RemovePausingAdmin(address admin);\\n    event PendingForgeEmergencyHandler(address _pendingForgeHandler);\\n    event PendingMarketEmergencyHandler(address _pendingMarketHandler);\\n    event PendingLiqMiningEmergencyHandler(address _pendingLiqMiningHandler);\\n    event ForgeEmergencyHandlerSet(address forgeEmergencyHandler);\\n    event MarketEmergencyHandlerSet(address marketEmergencyHandler);\\n    event LiqMiningEmergencyHandlerSet(address liqMiningEmergencyHandler);\\n\\n    event PausingManagerLocked();\\n    event ForgeHandlerLocked();\\n    event MarketHandlerLocked();\\n    event LiqMiningHandlerLocked();\\n\\n    event SetForgePaused(bytes32 forgeId, bool settingToPaused);\\n    event SetForgeAssetPaused(bytes32 forgeId, address underlyingAsset, bool settingToPaused);\\n    event SetForgeAssetExpiryPaused(\\n        bytes32 forgeId,\\n        address underlyingAsset,\\n        uint256 expiry,\\n        bool settingToPaused\\n    );\\n\\n    event SetForgeLocked(bytes32 forgeId);\\n    event SetForgeAssetLocked(bytes32 forgeId, address underlyingAsset);\\n    event SetForgeAssetExpiryLocked(bytes32 forgeId, address underlyingAsset, uint256 expiry);\\n\\n    event SetMarketFactoryPaused(bytes32 marketFactoryId, bool settingToPaused);\\n    event SetMarketPaused(bytes32 marketFactoryId, address market, bool settingToPaused);\\n\\n    event SetMarketFactoryLocked(bytes32 marketFactoryId);\\n    event SetMarketLocked(bytes32 marketFactoryId, address market);\\n\\n    event SetLiqMiningPaused(address liqMiningContract, bool settingToPaused);\\n    event SetLiqMiningLocked(address liqMiningContract);\\n\\n    function forgeEmergencyHandler()\\n        external\\n        view\\n        returns (\\n            address handler,\\n            address pendingHandler,\\n            uint256 timelockDeadline\\n        );\\n\\n    function marketEmergencyHandler()\\n        external\\n        view\\n        returns (\\n            address handler,\\n            address pendingHandler,\\n            uint256 timelockDeadline\\n        );\\n\\n    function liqMiningEmergencyHandler()\\n        external\\n        view\\n        returns (\\n            address handler,\\n            address pendingHandler,\\n            uint256 timelockDeadline\\n        );\\n\\n    function permLocked() external view returns (bool);\\n\\n    function permForgeHandlerLocked() external view returns (bool);\\n\\n    function permMarketHandlerLocked() external view returns (bool);\\n\\n    function permLiqMiningHandlerLocked() external view returns (bool);\\n\\n    function isPausingAdmin(address) external view returns (bool);\\n\\n    function setPausingAdmin(address admin, bool isAdmin) external;\\n\\n    function requestForgeHandlerChange(address _pendingForgeHandler) external;\\n\\n    function requestMarketHandlerChange(address _pendingMarketHandler) external;\\n\\n    function requestLiqMiningHandlerChange(address _pendingLiqMiningHandler) external;\\n\\n    function applyForgeHandlerChange() external;\\n\\n    function applyMarketHandlerChange() external;\\n\\n    function applyLiqMiningHandlerChange() external;\\n\\n    function lockPausingManagerPermanently() external;\\n\\n    function lockForgeHandlerPermanently() external;\\n\\n    function lockMarketHandlerPermanently() external;\\n\\n    function lockLiqMiningHandlerPermanently() external;\\n\\n    function setForgePaused(bytes32 forgeId, bool paused) external;\\n\\n    function setForgeAssetPaused(\\n        bytes32 forgeId,\\n        address underlyingAsset,\\n        bool paused\\n    ) external;\\n\\n    function setForgeAssetExpiryPaused(\\n        bytes32 forgeId,\\n        address underlyingAsset,\\n        uint256 expiry,\\n        bool paused\\n    ) external;\\n\\n    function setForgeLocked(bytes32 forgeId) external;\\n\\n    function setForgeAssetLocked(bytes32 forgeId, address underlyingAsset) external;\\n\\n    function setForgeAssetExpiryLocked(\\n        bytes32 forgeId,\\n        address underlyingAsset,\\n        uint256 expiry\\n    ) external;\\n\\n    function checkYieldContractStatus(\\n        bytes32 forgeId,\\n        address underlyingAsset,\\n        uint256 expiry\\n    ) external returns (bool _paused, bool _locked);\\n\\n    function setMarketFactoryPaused(bytes32 marketFactoryId, bool paused) external;\\n\\n    function setMarketPaused(\\n        bytes32 marketFactoryId,\\n        address market,\\n        bool paused\\n    ) external;\\n\\n    function setMarketFactoryLocked(bytes32 marketFactoryId) external;\\n\\n    function setMarketLocked(bytes32 marketFactoryId, address market) external;\\n\\n    function checkMarketStatus(bytes32 marketFactoryId, address market)\\n        external\\n        returns (bool _paused, bool _locked);\\n\\n    function setLiqMiningPaused(address liqMiningContract, bool settingToPaused) external;\\n\\n    function setLiqMiningLocked(address liqMiningContract) external;\\n\\n    function checkLiqMiningStatus(address liqMiningContract)\\n        external\\n        returns (bool _paused, bool _locked);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPendleWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n * MIT License\\n * ===========\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in all\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n */\\npragma solidity 0.7.6;\\n\\ninterface IPendleWhitelist {\\n    event AddedToWhiteList(address);\\n    event RemovedFromWhiteList(address);\\n\\n    function whitelisted(address) external view returns (bool);\\n\\n    function addToWhitelist(address[] calldata _addresses) external;\\n\\n    function removeFromWhitelist(address[] calldata _addresses) external;\\n\\n    function getWhitelist() external view returns (address[] memory list);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/MathLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary Math {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant BIG_NUMBER = (uint256(1) << uint256(200));\\n    uint256 internal constant PRECISION_BITS = 40;\\n    uint256 internal constant RONE = uint256(1) << PRECISION_BITS;\\n    uint256 internal constant PI = (314 * RONE) / 10**2;\\n    uint256 internal constant PI_PLUSONE = (414 * RONE) / 10**2;\\n    uint256 internal constant PRECISION_POW = 1e2;\\n\\n    function checkMultOverflow(uint256 _x, uint256 _y) internal pure returns (bool) {\\n        if (_y == 0) return false;\\n        return (((_x * _y) / _y) != _x);\\n    }\\n\\n    /**\\n    @notice find the integer part of log2(p/q)\\n        => find largest x s.t p >= q * 2^x\\n        => find largest x s.t 2^x <= p / q\\n     */\\n    function log2Int(uint256 _p, uint256 _q) internal pure returns (uint256) {\\n        uint256 res = 0;\\n        uint256 remain = _p / _q;\\n        while (remain > 0) {\\n            res++;\\n            remain /= 2;\\n        }\\n        return res - 1;\\n    }\\n\\n    /**\\n    @notice log2 for a number that it in [1,2)\\n    @dev _x is FP, return a FP\\n    @dev function is from Kyber. Long modified the condition to be (_x >= one) && (_x < two)\\n    to avoid the case where x = 2 may lead to incorrect result\\n     */\\n    function log2ForSmallNumber(uint256 _x) internal pure returns (uint256) {\\n        uint256 res = 0;\\n        uint256 one = (uint256(1) << PRECISION_BITS);\\n        uint256 two = 2 * one;\\n        uint256 addition = one;\\n\\n        require((_x >= one) && (_x < two), \\\"MATH_ERROR\\\");\\n        require(PRECISION_BITS < 125, \\\"MATH_ERROR\\\");\\n\\n        for (uint256 i = PRECISION_BITS; i > 0; i--) {\\n            _x = (_x * _x) / one;\\n            addition = addition / 2;\\n            if (_x >= two) {\\n                _x = _x / 2;\\n                res += addition;\\n            }\\n        }\\n\\n        return res;\\n    }\\n\\n    /**\\n    @notice log2 of (p/q). returns result in FP form\\n    @dev function is from Kyber.\\n    @dev _p & _q is FP, return a FP\\n     */\\n    function logBase2(uint256 _p, uint256 _q) internal pure returns (uint256) {\\n        uint256 n = 0;\\n\\n        if (_p > _q) {\\n            n = log2Int(_p, _q);\\n        }\\n\\n        require(n * RONE <= BIG_NUMBER, \\\"MATH_ERROR\\\");\\n        require(!checkMultOverflow(_p, RONE), \\\"MATH_ERROR\\\");\\n        require(!checkMultOverflow(n, RONE), \\\"MATH_ERROR\\\");\\n        require(!checkMultOverflow(uint256(1) << n, _q), \\\"MATH_ERROR\\\");\\n\\n        uint256 y = (_p * RONE) / (_q * (uint256(1) << n));\\n        uint256 log2Small = log2ForSmallNumber(y);\\n\\n        assert(log2Small <= BIG_NUMBER);\\n\\n        return n * RONE + log2Small;\\n    }\\n\\n    /**\\n    @notice calculate ln(p/q). returned result >= 0\\n    @dev function is from Kyber.\\n    @dev _p & _q is FP, return a FP\\n    */\\n    function ln(uint256 p, uint256 q) internal pure returns (uint256) {\\n        uint256 ln2Numerator = 6931471805599453094172;\\n        uint256 ln2Denomerator = 10000000000000000000000;\\n\\n        uint256 log2x = logBase2(p, q);\\n\\n        require(!checkMultOverflow(ln2Numerator, log2x), \\\"MATH_ERROR\\\");\\n\\n        return (ln2Numerator * log2x) / ln2Denomerator;\\n    }\\n\\n    /**\\n    @notice extract the fractional part of a FP\\n    @dev value is a FP, return a FP\\n     */\\n    function fpart(uint256 value) internal pure returns (uint256) {\\n        return value % RONE;\\n    }\\n\\n    /**\\n    @notice convert a FP to an Int\\n    @dev value is a FP, return an Int\\n     */\\n    function toInt(uint256 value) internal pure returns (uint256) {\\n        return value / RONE;\\n    }\\n\\n    /**\\n    @notice convert an Int to a FP\\n    @dev value is an Int, return a FP\\n     */\\n    function toFP(uint256 value) internal pure returns (uint256) {\\n        return value * RONE;\\n    }\\n\\n    /**\\n    @notice return e^exp in FP form\\n    @dev estimation by formula at http://pages.mtu.edu/~shene/COURSES/cs201/NOTES/chap04/exp.html\\n        the function is based on exp function of:\\n        https://github.com/NovakDistributed/macroverse/blob/master/contracts/RealMath.sol\\n    @dev the function is expected to converge quite fast, after about 20 iteration\\n    @dev exp is a FP, return a FP\\n     */\\n    function rpowe(uint256 exp) internal pure returns (uint256) {\\n        uint256 res = 0;\\n\\n        uint256 curTerm = RONE;\\n\\n        for (uint256 n = 0; ; n++) {\\n            res += curTerm;\\n            curTerm = rmul(curTerm, rdiv(exp, toFP(n + 1)));\\n            if (curTerm == 0) {\\n                break;\\n            }\\n            if (n == 500) {\\n                /*\\n                testing shows that in the most extreme case, it will take 430 turns to converge.\\n                however, it's expected that the numbers will not exceed 2^120 in normal situation\\n                the most extreme case is rpow((1<<256)-1,(1<<40)-1) (equal to rpow((2^256-1)/2^40,0.99..9))\\n                */\\n                revert(\\\"RPOWE_SLOW_CONVERGE\\\");\\n            }\\n        }\\n\\n        return res;\\n    }\\n\\n    /**\\n    @notice calculate base^exp with base and exp being FP int\\n    @dev to improve accuracy, base^exp = base^(int(exp)+frac(exp))\\n                                       = base^int(exp) * base^frac\\n    @dev base & exp are FP, return a FP\\n     */\\n    function rpow(uint256 base, uint256 exp) internal pure returns (uint256) {\\n        if (exp == 0) {\\n            // Anything to the 0 is 1\\n            return RONE;\\n        }\\n        if (base == 0) {\\n            // 0 to anything except 0 is 0\\n            return 0;\\n        }\\n\\n        uint256 frac = fpart(exp); // get the fractional part\\n        uint256 whole = exp - frac;\\n\\n        uint256 wholePow = rpowi(base, toInt(whole)); // whole is a FP, convert to Int\\n        uint256 fracPow;\\n\\n        // instead of calculating base ^ frac, we will calculate e ^ (frac*ln(base))\\n        if (base < RONE) {\\n            /* since the base is smaller than 1.0, ln(base) < 0.\\n            Since 1 / (e^(frac*ln(1/base))) = e ^ (frac*ln(base)),\\n            we will calculate 1 / (e^(frac*ln(1/base))) instead.\\n            */\\n            uint256 newExp = rmul(frac, ln(rdiv(RONE, base), RONE));\\n            fracPow = rdiv(RONE, rpowe(newExp));\\n        } else {\\n            /* base is greater than 1, calculate normally */\\n            uint256 newExp = rmul(frac, ln(base, RONE));\\n            fracPow = rpowe(newExp);\\n        }\\n        return rmul(wholePow, fracPow);\\n    }\\n\\n    /**\\n    @notice return base^exp with base in FP form and exp in Int\\n    @dev this function use a technique called: exponentiating by squaring\\n        complexity O(log(q))\\n    @dev function is from Kyber.\\n    @dev base is a FP, exp is an Int, return a FP\\n     */\\n    function rpowi(uint256 base, uint256 exp) internal pure returns (uint256) {\\n        uint256 res = exp % 2 != 0 ? base : RONE;\\n\\n        for (exp /= 2; exp != 0; exp /= 2) {\\n            base = rmul(base, base);\\n\\n            if (exp % 2 != 0) {\\n                res = rmul(res, base);\\n            }\\n        }\\n        return res;\\n    }\\n\\n    /**\\n    @dev y is an Int, returns an Int\\n    @dev babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    @dev from Uniswap\\n     */\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    /**\\n    @notice divide 2 FP, return a FP\\n    @dev function is from Balancer.\\n    @dev x & y are FP, return a FP\\n     */\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (y / 2).add(x.mul(RONE)).div(y);\\n    }\\n\\n    /**\\n    @notice multiply 2 FP, return a FP\\n    @dev function is from Balancer.\\n    @dev x & y are FP, return a FP\\n     */\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (RONE / 2).add(x.mul(y)).div(RONE);\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function subMax0(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a - b : 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TokenUtilsLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.7.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary TokenUtils {\\n    function requireERC20(address tokenAddr) internal view {\\n        require(IERC20(tokenAddr).totalSupply() > 0, \\\"INVALID_ERC20\\\");\\n    }\\n\\n    function requireERC20(IERC20 token) internal view {\\n        require(token.totalSupply() > 0, \\\"INVALID_ERC20\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/periphery/PermissionsV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../core/PendleGovernanceManager.sol\\\";\\nimport \\\"../interfaces/IPermissionsV2.sol\\\";\\n\\nabstract contract PermissionsV2 is IPermissionsV2 {\\n    PendleGovernanceManager public immutable override governanceManager;\\n    address internal initializer;\\n\\n    constructor(address _governanceManager) {\\n        require(_governanceManager != address(0), \\\"ZERO_ADDRESS\\\");\\n        initializer = msg.sender;\\n        governanceManager = PendleGovernanceManager(_governanceManager);\\n    }\\n\\n    modifier initialized() {\\n        require(initializer == address(0), \\\"NOT_INITIALIZED\\\");\\n        _;\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == _governance(), \\\"ONLY_GOVERNANCE\\\");\\n        _;\\n    }\\n\\n    function _governance() internal view returns (address) {\\n        return governanceManager.governance();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/PendleGovernanceManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.7.6;\\n\\ncontract PendleGovernanceManager {\\n    address public governance;\\n    address public pendingGovernance;\\n\\n    event GovernanceClaimed(address newGovernance, address previousGovernance);\\n\\n    event TransferGovernancePending(address pendingGovernance);\\n\\n    constructor(address _governance) {\\n        require(_governance != address(0), \\\"ZERO_ADDRESS\\\");\\n        governance = _governance;\\n    }\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == governance, \\\"ONLY_GOVERNANCE\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the pendingGovernance address to finalize the change governance process.\\n     */\\n    function claimGovernance() external {\\n        require(pendingGovernance == msg.sender, \\\"WRONG_GOVERNANCE\\\");\\n        emit GovernanceClaimed(pendingGovernance, governance);\\n        governance = pendingGovernance;\\n        pendingGovernance = address(0);\\n    }\\n\\n    /**\\n     * @dev Allows the current governance to set the pendingGovernance address.\\n     * @param _governance The address to transfer ownership to.\\n     */\\n    function transferGovernance(address _governance) external onlyGovernance {\\n        require(_governance != address(0), \\\"ZERO_ADDRESS\\\");\\n        pendingGovernance = _governance;\\n\\n        emit TransferGovernancePending(pendingGovernance);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPermissionsV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n * MIT License\\n * ===========\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in all\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n */\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../core/PendleGovernanceManager.sol\\\";\\n\\ninterface IPermissionsV2 {\\n    function governanceManager() external returns (PendleGovernanceManager);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pausingManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pendleTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yieldToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingEpochs\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"EtherWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfEpochs\",\"type\":\"uint256\"}],\"name\":\"Funded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PendleRewardsSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"epochIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"RewardsToppedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"TokenWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dueInterests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceManager\",\"outputs\":[{\"internalType\":\"contract PendleGovernanceManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastEpochClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastNYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastParamL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTimeUserStakeUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paramL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausingManager\",\"outputs\":[{\"internalType\":\"contract IPendlePausingManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendleTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"readEpochData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStakeUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeUnitsForUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableRewardsForUser\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"redeemDueInterests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"redeemRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setUpEmergencyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"epochIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewards\",\"type\":\"uint256[]\"}],\"name\":\"topUpRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"updateAndReadEpochData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalStakeUnits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeUnitsForUser\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableRewardsForUser\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingEpochs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"contract IPendleWhitelist\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sendTo\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PendleLiquidityMiningBaseV2","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005a05a64115bd86f220a26461fde3a011c7142476000000000000000000000000ea2575f82c881b223208fa53982e6e09ab55ccda0000000000000000000000006fa13469428e85e6ac12c84b73a19aef7c53332a000000000000000000000000808507121b80c02388fad14726482e061b8da8270000000000000000000000002c80d72af9ab0bb9d98f607c817c6f512dd647e6000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000611464800000000000000000000000000000000000000000000000000000000000093a800000000000000000000000000000000000000000000000000000000000000005","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}