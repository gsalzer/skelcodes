{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n        external\r\n        returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}  library Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}  library SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}  library SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     */\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(ERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n} \r\n\r\n\r\n\r\nabstract contract IAaveProtocolDataProviderV2 {\r\n\r\n  struct TokenData {\r\n    string symbol;\r\n    address tokenAddress;\r\n  }\r\n\r\n  function getAllReservesTokens() external virtual view returns (TokenData[] memory);\r\n\r\n  function getAllATokens() external virtual view returns (TokenData[] memory);\r\n\r\n  function getReserveConfigurationData(address asset)\r\n    external virtual\r\n    view\r\n    returns (\r\n      uint256 decimals,\r\n      uint256 ltv,\r\n      uint256 liquidationThreshold,\r\n      uint256 liquidationBonus,\r\n      uint256 reserveFactor,\r\n      bool usageAsCollateralEnabled,\r\n      bool borrowingEnabled,\r\n      bool stableBorrowRateEnabled,\r\n      bool isActive,\r\n      bool isFrozen\r\n    );\r\n\r\n  function getReserveData(address asset)\r\n    external virtual\r\n    view\r\n    returns (\r\n      uint256 availableLiquidity,\r\n      uint256 totalStableDebt,\r\n      uint256 totalVariableDebt,\r\n      uint256 liquidityRate,\r\n      uint256 variableBorrowRate,\r\n      uint256 stableBorrowRate,\r\n      uint256 averageStableBorrowRate,\r\n      uint256 liquidityIndex,\r\n      uint256 variableBorrowIndex,\r\n      uint40 lastUpdateTimestamp\r\n    );\r\n\r\n  function getUserReserveData(address asset, address user)\r\n    external virtual\r\n    view\r\n    returns (\r\n      uint256 currentATokenBalance,\r\n      uint256 currentStableDebt,\r\n      uint256 currentVariableDebt,\r\n      uint256 principalStableDebt,\r\n      uint256 scaledVariableDebt,\r\n      uint256 stableBorrowRate,\r\n      uint256 liquidityRate,\r\n      uint40 stableRateLastUpdated,\r\n      bool usageAsCollateralEnabled\r\n    );\r\n\r\n  function getReserveTokensAddresses(address asset)\r\n    external virtual\r\n    view\r\n    returns (\r\n      address aTokenAddress,\r\n      address stableDebtTokenAddress,\r\n      address variableDebtTokenAddress\r\n    );\r\n} \r\n\r\n  \r\n\r\n/**\r\n * @title LendingPoolAddressesProvider contract\r\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\r\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\r\n * - Owned by the Aave Governance\r\n * @author Aave\r\n **/\r\ninterface ILendingPoolAddressesProviderV2 {\r\n  event LendingPoolUpdated(address indexed newAddress);\r\n  event ConfigurationAdminUpdated(address indexed newAddress);\r\n  event EmergencyAdminUpdated(address indexed newAddress);\r\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\r\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\r\n  event PriceOracleUpdated(address indexed newAddress);\r\n  event LendingRateOracleUpdated(address indexed newAddress);\r\n  event ProxyCreated(bytes32 id, address indexed newAddress);\r\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\r\n\r\n  function setAddress(bytes32 id, address newAddress) external;\r\n\r\n  function setAddressAsProxy(bytes32 id, address impl) external;\r\n\r\n  function getAddress(bytes32 id) external view returns (address);\r\n\r\n  function getLendingPool() external view returns (address);\r\n\r\n  function setLendingPoolImpl(address pool) external;\r\n\r\n  function getLendingPoolConfigurator() external view returns (address);\r\n\r\n  function setLendingPoolConfiguratorImpl(address configurator) external;\r\n\r\n  function getLendingPoolCollateralManager() external view returns (address);\r\n\r\n  function setLendingPoolCollateralManager(address manager) external;\r\n\r\n  function getPoolAdmin() external view returns (address);\r\n\r\n  function setPoolAdmin(address admin) external;\r\n\r\n  function getEmergencyAdmin() external view returns (address);\r\n\r\n  function setEmergencyAdmin(address admin) external;\r\n\r\n  function getPriceOracle() external view returns (address);\r\n\r\n  function setPriceOracle(address priceOracle) external;\r\n\r\n  function getLendingRateOracle() external view returns (address);\r\n\r\n  function setLendingRateOracle(address lendingRateOracle) external;\r\n}\r\n\r\nlibrary DataTypes {\r\n  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\r\n  struct ReserveData {\r\n    //stores the reserve configuration\r\n    ReserveConfigurationMap configuration;\r\n    //the liquidity index. Expressed in ray\r\n    uint128 liquidityIndex;\r\n    //variable borrow index. Expressed in ray\r\n    uint128 variableBorrowIndex;\r\n    //the current supply rate. Expressed in ray\r\n    uint128 currentLiquidityRate;\r\n    //the current variable borrow rate. Expressed in ray\r\n    uint128 currentVariableBorrowRate;\r\n    //the current stable borrow rate. Expressed in ray\r\n    uint128 currentStableBorrowRate;\r\n    uint40 lastUpdateTimestamp;\r\n    //tokens addresses\r\n    address aTokenAddress;\r\n    address stableDebtTokenAddress;\r\n    address variableDebtTokenAddress;\r\n    //address of the interest rate strategy\r\n    address interestRateStrategyAddress;\r\n    //the id of the reserve. Represents the position in the list of the active reserves\r\n    uint8 id;\r\n  }\r\n\r\n  struct ReserveConfigurationMap {\r\n    //bit 0-15: LTV\r\n    //bit 16-31: Liq. threshold\r\n    //bit 32-47: Liq. bonus\r\n    //bit 48-55: Decimals\r\n    //bit 56: Reserve is active\r\n    //bit 57: reserve is frozen\r\n    //bit 58: borrowing is enabled\r\n    //bit 59: stable rate borrowing enabled\r\n    //bit 60-63: reserved\r\n    //bit 64-79: reserve factor\r\n    uint256 data;\r\n  }\r\n\r\n  struct UserConfigurationMap {\r\n    uint256 data;\r\n  }\r\n\r\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\r\n}\r\n\r\ninterface ILendingPoolV2 {\r\n  /**\r\n   * @dev Emitted on deposit()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address initiating the deposit\r\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\r\n   * @param amount The amount deposited\r\n   * @param referral The referral code used\r\n   **/\r\n  event Deposit(\r\n    address indexed reserve,\r\n    address user,\r\n    address indexed onBehalfOf,\r\n    uint256 amount,\r\n    uint16 indexed referral\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on withdraw()\r\n   * @param reserve The address of the underlyng asset being withdrawn\r\n   * @param user The address initiating the withdrawal, owner of aTokens\r\n   * @param to Address that will receive the underlying\r\n   * @param amount The amount to be withdrawn\r\n   **/\r\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\r\n\r\n  /**\r\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\r\n   * @param reserve The address of the underlying asset being borrowed\r\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\r\n   * initiator of the transaction on flashLoan()\r\n   * @param onBehalfOf The address that will be getting the debt\r\n   * @param amount The amount borrowed out\r\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\r\n   * @param borrowRate The numeric rate at which the user has borrowed\r\n   * @param referral The referral code used\r\n   **/\r\n  event Borrow(\r\n    address indexed reserve,\r\n    address user,\r\n    address indexed onBehalfOf,\r\n    uint256 amount,\r\n    uint256 borrowRateMode,\r\n    uint256 borrowRate,\r\n    uint16 indexed referral\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on repay()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The beneficiary of the repayment, getting his debt reduced\r\n   * @param repayer The address of the user initiating the repay(), providing the funds\r\n   * @param amount The amount repaid\r\n   **/\r\n  event Repay(\r\n    address indexed reserve,\r\n    address indexed user,\r\n    address indexed repayer,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted on swapBorrowRateMode()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user swapping his rate mode\r\n   * @param rateMode The rate mode that the user wants to swap to\r\n   **/\r\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\r\n\r\n  /**\r\n   * @dev Emitted on setUserUseReserveAsCollateral()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user enabling the usage as collateral\r\n   **/\r\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\r\n\r\n  /**\r\n   * @dev Emitted on setUserUseReserveAsCollateral()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user enabling the usage as collateral\r\n   **/\r\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\r\n\r\n  /**\r\n   * @dev Emitted on rebalanceStableBorrowRate()\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param user The address of the user for which the rebalance has been executed\r\n   **/\r\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\r\n\r\n  /**\r\n   * @dev Emitted on flashLoan()\r\n   * @param target The address of the flash loan receiver contract\r\n   * @param initiator The address initiating the flash loan\r\n   * @param asset The address of the asset being flash borrowed\r\n   * @param amount The amount flash borrowed\r\n   * @param premium The fee flash borrowed\r\n   * @param referralCode The referral code used\r\n   **/\r\n  event FlashLoan(\r\n    address indexed target,\r\n    address indexed initiator,\r\n    address indexed asset,\r\n    uint256 amount,\r\n    uint256 premium,\r\n    uint16 referralCode\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when the pause is triggered.\r\n   */\r\n  event Paused();\r\n\r\n  /**\r\n   * @dev Emitted when the pause is lifted.\r\n   */\r\n  event Unpaused();\r\n\r\n  /**\r\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\r\n   * LendingPoolCollateral manager using a DELEGATECALL\r\n   * This allows to have the events in the generated ABI for LendingPool.\r\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\r\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\r\n   * @param user The address of the borrower getting liquidated\r\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\r\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\r\n   * @param liquidator The address of the liquidator\r\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\r\n   * to receive the underlying collateral asset directly\r\n   **/\r\n  event LiquidationCall(\r\n    address indexed collateralAsset,\r\n    address indexed debtAsset,\r\n    address indexed user,\r\n    uint256 debtToCover,\r\n    uint256 liquidatedCollateralAmount,\r\n    address liquidator,\r\n    bool receiveAToken\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\r\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\r\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\r\n   * gets added to the LendingPool ABI\r\n   * @param reserve The address of the underlying asset of the reserve\r\n   * @param liquidityRate The new liquidity rate\r\n   * @param stableBorrowRate The new stable borrow rate\r\n   * @param variableBorrowRate The new variable borrow rate\r\n   * @param liquidityIndex The new liquidity index\r\n   * @param variableBorrowIndex The new variable borrow index\r\n   **/\r\n  event ReserveDataUpdated(\r\n    address indexed reserve,\r\n    uint256 liquidityRate,\r\n    uint256 stableBorrowRate,\r\n    uint256 variableBorrowRate,\r\n    uint256 liquidityIndex,\r\n    uint256 variableBorrowIndex\r\n  );\r\n\r\n  /**\r\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\r\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\r\n   * @param asset The address of the underlying asset to deposit\r\n   * @param amount The amount to be deposited\r\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\r\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\r\n   *   is a different wallet\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   **/\r\n  function deposit(\r\n    address asset,\r\n    uint256 amount,\r\n    address onBehalfOf,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\r\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\r\n   * @param asset The address of the underlying asset to withdraw\r\n   * @param amount The underlying amount to be withdrawn\r\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\r\n   * @param to Address that will receive the underlying, same as msg.sender if the user\r\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\r\n   *   different wallet\r\n   **/\r\n  function withdraw(\r\n    address asset,\r\n    uint256 amount,\r\n    address to\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\r\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\r\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\r\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\r\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\r\n   * @param asset The address of the underlying asset to borrow\r\n   * @param amount The amount to be borrowed\r\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\r\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\r\n   * if he has been given credit delegation allowance\r\n   **/\r\n  function borrow(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 interestRateMode,\r\n    uint16 referralCode,\r\n    address onBehalfOf\r\n  ) external;\r\n\r\n  /**\r\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\r\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\r\n   * @param asset The address of the borrowed underlying asset previously borrowed\r\n   * @param amount The amount to repay\r\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\r\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\r\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\r\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\r\n   * other borrower whose debt should be removed\r\n   **/\r\n  function repay(\r\n    address asset,\r\n    uint256 amount,\r\n    uint256 rateMode,\r\n    address onBehalfOf\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\r\n   * @param asset The address of the underlying asset borrowed\r\n   * @param rateMode The rate mode that the user wants to swap to\r\n   **/\r\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\r\n\r\n  /**\r\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\r\n   * - Users can be rebalanced if the following conditions are satisfied:\r\n   *     1. Usage ratio is above 95%\r\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\r\n   *        borrowed at a stable rate and depositors are not earning enough\r\n   * @param asset The address of the underlying asset borrowed\r\n   * @param user The address of the user to be rebalanced\r\n   **/\r\n  function rebalanceStableBorrowRate(address asset, address user) external;\r\n\r\n  /**\r\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\r\n   * @param asset The address of the underlying asset deposited\r\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\r\n   **/\r\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\r\n\r\n  /**\r\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\r\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\r\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\r\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\r\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\r\n   * @param user The address of the borrower getting liquidated\r\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\r\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\r\n   * to receive the underlying collateral asset directly\r\n   **/\r\n  function liquidationCall(\r\n    address collateralAsset,\r\n    address debtAsset,\r\n    address user,\r\n    uint256 debtToCover,\r\n    bool receiveAToken\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\r\n   * as long as the amount taken plus a fee is returned.\r\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\r\n   * For further details please visit https://developers.aave.com\r\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\r\n   * @param assets The addresses of the assets being flash-borrowed\r\n   * @param amounts The amounts amounts being flash-borrowed\r\n   * @param modes Types of the debt to open if the flash loan is not returned:\r\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\r\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\r\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\r\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\r\n   * @param params Variadic packed params to pass to the receiver as extra information\r\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\r\n   *   0 if the action is executed directly by the user, without any middle-man\r\n   **/\r\n  function flashLoan(\r\n    address receiverAddress,\r\n    address[] calldata assets,\r\n    uint256[] calldata amounts,\r\n    uint256[] calldata modes,\r\n    address onBehalfOf,\r\n    bytes calldata params,\r\n    uint16 referralCode\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Returns the user account data across all the reserves\r\n   * @param user The address of the user\r\n   * @return totalCollateralETH the total collateral in ETH of the user\r\n   * @return totalDebtETH the total debt in ETH of the user\r\n   * @return availableBorrowsETH the borrowing power left of the user\r\n   * @return currentLiquidationThreshold the liquidation threshold of the user\r\n   * @return ltv the loan to value of the user\r\n   * @return healthFactor the current health factor of the user\r\n   **/\r\n  function getUserAccountData(address user)\r\n    external\r\n    view\r\n    returns (\r\n      uint256 totalCollateralETH,\r\n      uint256 totalDebtETH,\r\n      uint256 availableBorrowsETH,\r\n      uint256 currentLiquidationThreshold,\r\n      uint256 ltv,\r\n      uint256 healthFactor\r\n    );\r\n\r\n  function initReserve(\r\n    address reserve,\r\n    address aTokenAddress,\r\n    address stableDebtAddress,\r\n    address variableDebtAddress,\r\n    address interestRateStrategyAddress\r\n  ) external;\r\n\r\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\r\n    external;\r\n\r\n  function setConfiguration(address reserve, uint256 configuration) external;\r\n\r\n  /**\r\n   * @dev Returns the configuration of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The configuration of the reserve\r\n   **/\r\n  function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\r\n\r\n  /**\r\n   * @dev Returns the configuration of the user across all the reserves\r\n   * @param user The user address\r\n   * @return The configuration of the user\r\n   **/\r\n  function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\r\n\r\n  /**\r\n   * @dev Returns the normalized income normalized income of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The reserve's normalized income\r\n   */\r\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the normalized variable debt per unit of asset\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The reserve normalized variable debt\r\n   */\r\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the state and configuration of the reserve\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @return The state of the reserve\r\n   **/\r\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\r\n\r\n  function finalizeTransfer(\r\n    address asset,\r\n    address from,\r\n    address to,\r\n    uint256 amount,\r\n    uint256 balanceFromAfter,\r\n    uint256 balanceToBefore\r\n  ) external;\r\n\r\n  function getReservesList() external view returns (address[] memory);\r\n\r\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProviderV2);\r\n\r\n  function setPause(bool val) external;\r\n\r\n  function paused() external view returns (bool);\r\n}  abstract contract TokenInterface {\r\n\taddress public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    \r\n    function allowance(address, address) public virtual returns (uint256);\r\n\r\n    function balanceOf(address) public virtual returns (uint256);\r\n\r\n    function approve(address, uint256) public virtual;\r\n\r\n    function transfer(address, uint256) public virtual returns (bool);\r\n\r\n    function transferFrom(address, address, uint256) public virtual returns (bool);\r\n\r\n    function deposit() public virtual payable;\r\n\r\n    function withdraw(uint256) public virtual;\r\n}  abstract contract IAToken {\r\n    function redeem(uint256 _amount) external virtual;\r\n    function balanceOf(address _owner) external virtual view returns (uint256 balance);\r\n}  abstract contract ILendingPool {\r\n    function flashLoan( address payable _receiver, address _reserve, uint _amount, bytes calldata _params) external virtual;\r\n    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) external virtual payable;\r\n\tfunction setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external virtual;\r\n\tfunction borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode) external virtual;\r\n\tfunction repay( address _reserve, uint256 _amount, address payable _onBehalfOf) external virtual payable;\r\n\tfunction swapBorrowRateMode(address _reserve) external virtual;\r\n    function getReserves() external virtual view returns(address[] memory);\r\n\r\n    /// @param _reserve underlying token address\r\n    function getReserveData(address _reserve)\r\n        external virtual\r\n        view\r\n        returns (\r\n            uint256 totalLiquidity,               // reserve total liquidity\r\n            uint256 availableLiquidity,           // reserve available liquidity for borrowing\r\n            uint256 totalBorrowsStable,           // total amount of outstanding borrows at Stable rate\r\n            uint256 totalBorrowsVariable,         // total amount of outstanding borrows at Variable rate\r\n            uint256 liquidityRate,                // current deposit APY of the reserve for depositors, in Ray units.\r\n            uint256 variableBorrowRate,           // current variable rate APY of the reserve pool, in Ray units.\r\n            uint256 stableBorrowRate,             // current stable rate APY of the reserve pool, in Ray units.\r\n            uint256 averageStableBorrowRate,      // current average stable borrow rate\r\n            uint256 utilizationRate,              // expressed as total borrows/total liquidity.\r\n            uint256 liquidityIndex,               // cumulative liquidity index\r\n            uint256 variableBorrowIndex,          // cumulative variable borrow index\r\n            address aTokenAddress,                // aTokens contract address for the specific _reserve\r\n            uint40 lastUpdateTimestamp            // timestamp of the last update of reserve data\r\n        );\r\n\r\n    /// @param _user users address\r\n    function getUserAccountData(address _user)\r\n        external virtual\r\n        view\r\n        returns (\r\n            uint256 totalLiquidityETH,            // user aggregated deposits across all the reserves. In Wei\r\n            uint256 totalCollateralETH,           // user aggregated collateral across all the reserves. In Wei\r\n            uint256 totalBorrowsETH,              // user aggregated outstanding borrows across all the reserves. In Wei\r\n            uint256 totalFeesETH,                 // user aggregated current outstanding fees in ETH. In Wei\r\n            uint256 availableBorrowsETH,          // user available amount to borrow in ETH\r\n            uint256 currentLiquidationThreshold,  // user current average liquidation threshold across all the collaterals deposited\r\n            uint256 ltv,                          // user average Loan-to-Value between all the collaterals\r\n            uint256 healthFactor                  // user current Health Factor\r\n    );\r\n\r\n    /// @param _reserve underlying token address\r\n    /// @param _user users address\r\n    function getUserReserveData(address _reserve, address _user)\r\n        external virtual\r\n        view\r\n        returns (\r\n            uint256 currentATokenBalance,         // user current reserve aToken balance\r\n            uint256 currentBorrowBalance,         // user current reserve outstanding borrow balance\r\n            uint256 principalBorrowBalance,       // user balance of borrowed asset\r\n            uint256 borrowRateMode,               // user borrow rate mode either Stable or Variable\r\n            uint256 borrowRate,                   // user current borrow rate APY\r\n            uint256 liquidityRate,                // user current earn rate on _reserve\r\n            uint256 originationFee,               // user outstanding loan origination fee\r\n            uint256 variableBorrowIndex,          // user variable cumulative index\r\n            uint256 lastUpdateTimestamp,          // Timestamp of the last data update\r\n            bool usageAsCollateralEnabled         // Whether the user's current reserve is enabled as a collateral\r\n    );\r\n\r\n    function getReserveConfigurationData(address _reserve)\r\n        external virtual\r\n        view\r\n        returns (\r\n            uint256 ltv,\r\n            uint256 liquidationThreshold,\r\n            uint256 liquidationBonus,\r\n            address rateStrategyAddress,\r\n            bool usageAsCollateralEnabled,\r\n            bool borrowingEnabled,\r\n            bool stableBorrowRateEnabled,\r\n            bool isActive\r\n    );\r\n\r\n    // ------------------ LendingPoolCoreData ------------------------\r\n    function getReserveATokenAddress(address _reserve) public virtual view returns (address);\r\n    function getReserveConfiguration(address _reserve)\r\n        external virtual\r\n        view\r\n        returns (uint256, uint256, uint256, bool);\r\n    function getUserUnderlyingAssetBalance(address _reserve, address _user)\r\n        public virtual\r\n        view\r\n        returns (uint256);\r\n\r\n    function getReserveCurrentLiquidityRate(address _reserve)\r\n        public virtual\r\n        view\r\n        returns (uint256);\r\n    function getReserveCurrentVariableBorrowRate(address _reserve)\r\n        public virtual\r\n        view\r\n        returns (uint256);\r\n    function getReserveCurrentStableBorrowRate(address _reserve)\r\n        public virtual\r\n        view\r\n        returns (uint256);\r\n    function getReserveTotalLiquidity(address _reserve)\r\n        public virtual\r\n        view\r\n        returns (uint256);\r\n    function getReserveAvailableLiquidity(address _reserve)\r\n        public virtual\r\n        view\r\n        returns (uint256);\r\n    function getReserveTotalBorrowsVariable(address _reserve)\r\n        public virtual\r\n        view\r\n        returns (uint256);\r\n    function getReserveTotalBorrowsStable(address _reserve)\r\n        public virtual\r\n        view\r\n        returns (uint256);\r\n\r\n    // ---------------- LendingPoolDataProvider ---------------------\r\n    function calculateUserGlobalData(address _user)\r\n        public virtual\r\n        view\r\n        returns (\r\n            uint256 totalLiquidityBalanceETH,\r\n            uint256 totalCollateralBalanceETH,\r\n            uint256 totalBorrowBalanceETH,\r\n            uint256 totalFeesETH,\r\n            uint256 currentLtv,\r\n            uint256 currentLiquidationThreshold,\r\n            uint256 healthFactor,\r\n            bool healthFactorBelowThreshold\r\n        );\r\n}  /**\r\n@title ILendingPoolAddressesProvider interface\r\n@notice provides the interface to fetch the LendingPoolCore address\r\n */\r\nabstract contract ILendingPoolAddressesProvider {\r\n\r\n    function getLendingPool() public virtual view returns (address);\r\n    function getLendingPoolCore() public virtual view returns (address payable);\r\n    function getLendingPoolConfigurator() public virtual view returns (address);\r\n    function getLendingPoolDataProvider() public virtual view returns (address);\r\n    function getLendingPoolParametersProvider() public virtual view returns (address);\r\n    function getTokenDistributor() public virtual view returns (address);\r\n    function getFeeProvider() public virtual view returns (address);\r\n    function getLendingPoolLiquidationManager() public virtual view returns (address);\r\n    function getLendingPoolManager() public virtual view returns (address);\r\n    function getPriceOracle() public virtual view returns (address);\r\n    function getLendingRateOracle() public virtual view returns (address);\r\n} \r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AaveMigration {\r\n    using SafeERC20 for ERC20;\r\n\r\n    address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    uint16 public constant AAVE_REFERRAL_CODE = 64;\r\n\r\n    address public constant AAVE_V1_LENDING_POOL_ADDRESSES =\r\n        0x24a42fD28C976A61Df5D00D0599C34c4f90748c8;\r\n\r\n    struct MigrateLoanData {\r\n        address market;\r\n        address[] collAssets;\r\n        bool[] isColl;\r\n        address[] borrowAssets;\r\n        uint256[] borrowAmounts;\r\n        uint256[] fees;\r\n        uint256[] modes;\r\n    }\r\n\r\n    function migrateLoan(MigrateLoanData memory _loanData) public {\r\n        address lendingPoolCoreV1 =\r\n            ILendingPoolAddressesProvider(AAVE_V1_LENDING_POOL_ADDRESSES).getLendingPoolCore();\r\n\r\n        address lendingPoolV2 = ILendingPoolAddressesProviderV2(_loanData.market).getLendingPool();\r\n\r\n        // payback AaveV1 loans\r\n        for (uint256 i = 0; i < _loanData.borrowAssets.length; ++i) {\r\n            paybackAaveV1(lendingPoolCoreV1, _loanData.borrowAssets[i], _loanData.borrowAmounts[i]);\r\n        }\r\n\r\n        // withdraw from AaveV1 and deposit to V2\r\n        for (uint256 i = 0; i < _loanData.collAssets.length; ++i) {\r\n            address aTokenAddr =\r\n                ILendingPool(lendingPoolCoreV1).getReserveATokenAddress(_loanData.collAssets[i]);\r\n\r\n            uint256 withdrawnAmount = withdrawAaveV1(aTokenAddr);\r\n\r\n            depositAaveV2(\r\n                lendingPoolV2,\r\n                _loanData.market,\r\n                _loanData.collAssets[i],\r\n                withdrawnAmount,\r\n                _loanData.isColl[i]\r\n\r\n            );\r\n        }\r\n\r\n        // borrow debt from AaveV2\r\n        // for (uint256 i = 0; i < _loanData.borrowAssets.length; ++i) {\r\n        //     borrowAaveV2(\r\n        //         lendingPoolV2,\r\n        //         _loanData.borrowAssets[i],\r\n        //         (_loanData.borrowAmounts[i] + _loanData.fees[i]),\r\n        //         _loanData.modes[i]\r\n        //     );\r\n        // }\r\n    }\r\n\r\n    function depositAaveV2(\r\n        address _lendingPoolV2,\r\n        address _market,\r\n        address _tokenAddr,\r\n        uint256 _amount,\r\n        bool _isColl\r\n    ) internal {\r\n        // handle weth\r\n        if (_tokenAddr == ETH_ADDR) {\r\n            TokenInterface(WETH_ADDRESS).deposit{value: _amount}();\r\n            _tokenAddr = WETH_ADDRESS;\r\n        }\r\n\r\n        ERC20(_tokenAddr).safeApprove(_lendingPoolV2, _amount);\r\n        ILendingPoolV2(_lendingPoolV2).deposit(\r\n            _tokenAddr,\r\n            _amount,\r\n            address(this),\r\n            AAVE_REFERRAL_CODE\r\n        );\r\n\r\n        if (_isColl) {\r\n            setUserUseReserveAsCollateralIfNeeded(_lendingPoolV2, _market, _tokenAddr);\r\n        }\r\n    }\r\n\r\n    // function borrowAaveV2(\r\n    //     address _lendingPoolV2,\r\n    //     address _tokenAddr,\r\n    //     uint256 _amount,\r\n    //     uint256 _type\r\n    // ) internal {\r\n    //     _tokenAddr = _tokenAddr == ETH_ADDR ? WETH_ADDRESS : _tokenAddr;\r\n\r\n    //     ILendingPoolV2(_lendingPoolV2).borrow(\r\n    //         _tokenAddr,\r\n    //         _amount,\r\n    //         _type,\r\n    //         AAVE_REFERRAL_CODE,\r\n    //         address(this)\r\n    //     );\r\n\r\n    //     ERC20(_tokenAddr).safeTransfer(msg.sender, _amount);\r\n    // }\r\n\r\n    function withdrawAaveV1(address _aTokenAddr)\r\n        internal\r\n        returns (uint256 amount)\r\n    {\r\n        amount = ERC20(_aTokenAddr).balanceOf(address(this));\r\n\r\n        IAToken(_aTokenAddr).redeem(amount);\r\n    }\r\n\r\n    function paybackAaveV1(\r\n        address _lendingPoolCore,\r\n        address _tokenAddr,\r\n        uint256 _amount\r\n    ) internal {\r\n        address lendingPool =\r\n            ILendingPoolAddressesProvider(AAVE_V1_LENDING_POOL_ADDRESSES).getLendingPool();\r\n\r\n        uint256 ethAmount = 0;\r\n\r\n        if (_tokenAddr != WETH_ADDRESS) {\r\n            ERC20(_tokenAddr).safeApprove(_lendingPoolCore, uint(-1));\r\n        } else {\r\n            ethAmount = _amount;\r\n            TokenInterface(WETH_ADDRESS).withdraw(ethAmount);\r\n        }\r\n\r\n        ILendingPool(lendingPool).repay{value: ethAmount}(\r\n            _tokenAddr,\r\n            _amount,\r\n            payable(address(this))\r\n        );\r\n    }\r\n\r\n    function setUserUseReserveAsCollateralIfNeeded(\r\n        address _lendingPoolV2,\r\n        address _market,\r\n        address _tokenAddr\r\n    ) public {\r\n        IAaveProtocolDataProviderV2 dataProvider = getDataProvider(_market);\r\n\r\n        (, , , , , , , , bool collateralEnabled) =\r\n            dataProvider.getUserReserveData(_tokenAddr, address(this));\r\n\r\n        if (!collateralEnabled) {\r\n            ILendingPoolV2(_lendingPoolV2).setUserUseReserveAsCollateral(_tokenAddr, true);\r\n        }\r\n    }\r\n\r\n    function getDataProvider(address _market) internal view returns (IAaveProtocolDataProviderV2) {\r\n        return\r\n            IAaveProtocolDataProviderV2(\r\n                ILendingPoolAddressesProviderV2(_market).getAddress(\r\n                    0x0100000000000000000000000000000000000000000000000000000000000000\r\n                )\r\n            );\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"AAVE_REFERRAL_CODE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AAVE_V1_LENDING_POOL_ADDRESSES\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"collAssets\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isColl\",\"type\":\"bool[]\"},{\"internalType\":\"address[]\",\"name\":\"borrowAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"modes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AaveMigration.MigrateLoanData\",\"name\":\"_loanData\",\"type\":\"tuple\"}],\"name\":\"migrateLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lendingPoolV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"setUserUseReserveAsCollateralIfNeeded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AaveMigration","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6c236dedfa4494ae0ff4a9cff6099802fb915620b3c7d5adff4509a0da798ac0"}]}