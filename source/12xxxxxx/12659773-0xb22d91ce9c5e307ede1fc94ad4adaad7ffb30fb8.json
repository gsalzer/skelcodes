{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: MIT\r\n\r\n/**\r\n    Name: Healthiers Token\r\n    Symbol: HEALTH\r\n    Decimals: 8\r\n    @ 2021 Healthiers\r\n*/\r\n\r\npragma solidity ^0.8.4; \r\n\r\nabstract contract ERC20Interface {\r\n    function totalSupply() public virtual view returns (uint256);\r\n    function balanceOf(address who) public virtual view returns (uint256);\r\n    function transfer(address to, uint256 value) public virtual returns (bool);\r\n    function allowance(address owner, address spender) public virtual view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\r\n    function approve(address spender, uint256 value) public virtual returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract ERC223Interface {\r\n    function transfer(address to, uint value, bytes memory data) public virtual;\r\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\r\n}\r\n\r\nabstract contract ERC223ReceivingContract { \r\n    function tokenFallback(address _from, uint _value, bytes memory _data) public  virtual;\r\n}\r\n\r\ncontract OwnableInterface {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        require(_newOwner != address(0), \"OwnableInterface: new owner is the zero address\");\r\n        emit OwnershipTransferred(owner, _newOwner);\r\n        owner = _newOwner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n}\r\n\r\ncontract HealthiersToken is OwnableInterface, ERC20Interface, ERC223Interface {\r\n    using SafeMath for uint;\r\n     \r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8 internal _decimals;\r\n    uint256 internal _totalSupply;\r\n    bool internal _minting = false;\r\n    bool internal _burning = false;\r\n\r\n    mapping (address => uint256) internal balances;\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    mapping (address => bool) public frozenAccount;\r\n    mapping (address => uint256) public limitAccount;\r\n\r\n    event MintingDisable();\r\n    event MintingEnable();\r\n    event BurningEnable();\r\n    event BurningDisable();\r\n    event FrozenFunds(address target, bool frozen);\r\n    event LimitFunds(address target, uint256 periodTime);\r\n\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_, uint256 totalSupply_) {\r\n        _symbol = symbol_;\r\n        _name = name_;\r\n        _decimals = decimals_;\r\n        _totalSupply = totalSupply_ * 10 ** uint256(decimals_);\r\n        balances[msg.sender] = totalSupply_ * 10 ** uint256(decimals_);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address _owner) public override view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    function setPeriodAccount(address target, uint256 periodTime) onlyOwner public {\r\n        limitAccount[target] = periodTime;\r\n        emit LimitFunds(target, periodTime);\r\n    }\r\n    \r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public override returns (bool) {\r\n        require(_to != msg.sender, \"HealthiersToken: transfer to the own address\");\r\n        require(_value > 0, \"HealthiersToken: transfer zero value\");\r\n        require(!frozenAccount[msg.sender], \"HealthiersToken: frozenAccount\");\r\n        require(limitAccount[msg.sender] < uint256(block.timestamp), \"HealthiersToken: do not reach period\");\r\n        require(!frozenAccount[_to], \"HealthiersToken: frozenAccount\");\r\n        \r\n        require(_to != address(0), \"HealthiersToken: transfer to the zero address\");\r\n        require(_value <= balances[msg.sender], \"HealthiersToken: transfer amount exceeds balance\");\r\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\r\n        balances[_to] = SafeMath.add(balances[_to], _value);\r\n        \r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint _value, bytes memory _data) public override {\r\n        require(_to != msg.sender, \"HealthiersToken: transfer to the own address\");\r\n        require(_value > 0, \"HealthiersToken: transfer zero value\");\r\n        require(!frozenAccount[msg.sender], \"HealthiersToken: frozenAccount\");\r\n        require(limitAccount[msg.sender] < uint256(block.timestamp), \"HealthiersToken: do not reach period\");\r\n        require(!frozenAccount[_to], \"HealthiersToken: frozenAccount\");\r\n        \r\n        require(_to != address(0), \"HealthiersToken: transfer to the zero address\");\r\n        require(_value <= balances[msg.sender], \"HealthiersToken: transfer amount exceeds balance\");\r\n        if(isContract(_to)) {\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Transfer(msg.sender, _to, _value, _data);\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool) {\r\n        require(_to != _from, \"HealthiersToken: transfer to the own address\");\r\n        require(_value > 0, \"HealthiersToken: transfer zero value\");\r\n        require(!frozenAccount[_from], \"HealthiersToken: frozenAccount\");\r\n        require(limitAccount[_from] < uint256(block.timestamp), \"HealthiersToken: do not reach period\");\r\n        require(!frozenAccount[_to], \"HealthiersToken: frozenAccount\");\r\n        \r\n        require(_to != address(0), \"HealthiersToken: transfer to the zero address\");\r\n        require(_value <= balances[_from], \"HealthiersToken: transfer amount exceeds balance\");\r\n        require(_value <= allowed[_from][msg.sender], \"HealthiersToken: transfer amount exceeds balance\");\r\n        \r\n        balances[_from] = SafeMath.sub(balances[_from], _value);\r\n        balances[_to] = SafeMath.add(balances[_to], _value);\r\n        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\r\n        \r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public override returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        \r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address _owner, address _spender) public override view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = SafeMath.add(allowed[msg.sender][_spender], _addedValue);\r\n        \r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n    \r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = SafeMath.sub(oldValue, _subtractedValue);\r\n        }\r\n        \r\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    function minting() public view returns (bool) {\r\n        return _minting;\r\n    }\r\n\r\n    function _mintingDisable() onlyOwner public {\r\n        _minting = false;\r\n        emit MintingDisable();\r\n    }\r\n\r\n    function _mintingEnable() onlyOwner public {\r\n        _minting = true;\r\n        emit MintingEnable();\r\n    }\r\n\r\n    function mint(address _to, uint256 _value) onlyOwner public {\r\n        require(_to != address(0), \"HealthiersToken: mint to the zero address\");\r\n        require(_minting, \"HealthiersToken: minting is disabled\");\r\n\r\n        _totalSupply += _value;\r\n        balances[_to] = SafeMath.add(balances[_to], _value);\r\n        emit Transfer(address(0), _to, _value);\r\n    }\r\n\r\n    function burning() public view returns (bool) {\r\n        return _burning;\r\n    }\r\n\r\n    function _burningDisable() onlyOwner public {\r\n        _burning = false;\r\n        emit BurningDisable();\r\n    }\r\n\r\n    function _burningEnable() onlyOwner public {\r\n        _burning = true;\r\n        emit BurningEnable();\r\n    }\r\n\r\n    function burn(uint256 _value) onlyOwner public {\r\n        require(_burning, \"HealthiersToken: burning is disabled\");\r\n        uint256 accountBalance = balances[msg.sender];\r\n        require(accountBalance >= _value, \"HealthiersToken: burn amount exceeds balance\");\r\n        require(_totalSupply >= _value, \"HealthiersToken: burn amount exceeds totalSupply\");\r\n        _totalSupply -= _value;\r\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\r\n\r\n        emit Transfer(msg.sender, address(0), _value);\r\n    }\r\n    \r\n    function isContract(address _addr) private view returns (bool is_contract) {\r\n        uint length;\r\n        assembly {\r\n            length := extcodesize(_addr)\r\n        }\r\n        return (length>0);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BurningDisable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BurningEnable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"periodTime\",\"type\":\"uint256\"}],\"name\":\"LimitFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintingDisable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintingEnable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_burningDisable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_burningEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mintingDisable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mintingEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"periodTime\",\"type\":\"uint256\"}],\"name\":\"setPeriodAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HealthiersToken","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000000a4865616c7468696572730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064845414c54480000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://68ae477477cb6a41e4b48219ada03c32eb6cc17b632d33049ee14df2b862f883"}]}