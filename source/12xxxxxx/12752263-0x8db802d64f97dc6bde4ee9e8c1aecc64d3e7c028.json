{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.2.0 https://hardhat.org\r\n\r\n// File openzeppelin-solidity/contracts/utils/introspection/IERC165.sol@v4.0.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/token/ERC721/IERC721.sol@v4.0.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n      *\r\n      * Requirements:\r\n      *\r\n      * - `from` cannot be the zero address.\r\n      * - `to` cannot be the zero address.\r\n      * - `tokenId` token must exist and be owned by `from`.\r\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n      *\r\n      * Emits a {Transfer} event.\r\n      */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol@v4.0.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/token/ERC721/extensions/IERC721Metadata.sol@v4.0.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/token/ERC721/extensions/IERC721Enumerable.sol@v4.0.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/utils/Address.sol@v4.0.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/utils/Context.sol@v4.0.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/utils/Strings.sol@v4.0.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant alphabet = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = alphabet[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/utils/introspection/ERC165.sol@v4.0.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File openzeppelin-solidity/contracts/token/ERC721/ERC721.sol@v4.0.0\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping (uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping (address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping (uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC721).interfaceId\r\n            || interfaceId == type(IERC721Metadata).interfaceId\r\n            || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    mapping(uint => string) public uri;\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n        return uri[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\r\n     * in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\r\n        private returns (bool)\r\n    {\r\n        if (to.isContract()) {\r\n            IERC721Receiver(to).onERC721Received(from, tokenId, _data);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\r\n}\r\n    \r\n    pragma solidity ^ 0.8.0;\r\n    contract GreenPointLandReserves{\r\n        address THIS = address(this);\r\n        uint $ = 1e18;\r\n        uint genesis;\r\n        Totem public totemNFT;\r\n        ERC20 MVT = ERC20(0x3D46454212c61ECb7b31248047Fa033120B88668);\r\n        ERC20 MDT = ERC20(0x32A087D5fdF8c84eC32554c56727a7C81124544E);\r\n        ERC20 COLOR = ERC20(0xe324C8cF74899461Ef7aD2c3EB952DA7819aabc5);\r\n        Oracle public ORACLE = Oracle(address(0));\r\n        \r\n        address public GLR_nonprofit;\r\n        address public DEV;\r\n        address public oracleTeller;\r\n        uint public GLR_funds;\r\n        uint public devPot;\r\n\r\n        constructor(){\r\n            genesis = block.timestamp;\r\n            nextFloorRaisingTime = genesis + 86400 * 45;\r\n            totemNFT = new Totem(\"Totem\",\"TOTEM\");\r\n            GLR_nonprofit = msg.sender;\r\n            DEV = msg.sender;\r\n            oracleTeller = msg.sender;\r\n        }\r\n\r\n        function shiftOwnership(address addr) public{\r\n            require(msg.sender == GLR_nonprofit);\r\n            GLR_nonprofit = addr;\r\n        }\r\n\r\n        function GLR_pullFunds() public{\r\n            require(msg.sender == GLR_nonprofit && GLR_funds > 0);\r\n            uint cash = GLR_funds;\r\n            GLR_funds = 0;\r\n            (bool success, ) = GLR_nonprofit.call{value:cash}(\"\");\r\n            require(success, \"Transfer failed.\");\r\n        }\r\n\r\n        function Dev_pullFunds() public{\r\n            require(msg.sender == DEV && devPot > 0);\r\n            uint cash = devPot;\r\n            devPot = 0;\r\n            (bool success, ) = DEV.call{value:cash}(\"\");\r\n            require(success, \"Transfer failed.\");\r\n        }\r\n\r\n        function shiftDev(address addr) public{\r\n            require(msg.sender == DEV);\r\n            DEV = addr;\r\n        }\r\n\r\n        function shiftOracleTeller(address addr) public{\r\n            require(msg.sender == oracleTeller);\r\n            oracleTeller = addr;\r\n        }\r\n\r\n        function setOracle(address addr) public{\r\n            require(msg.sender == oracleTeller);\r\n            ORACLE = Oracle(addr);\r\n        }\r\n\r\n        function globalData() public view returns(uint _MVT_to_rollout, uint _mvt5xHodlPool, uint _nextFloorRaisingTime, uint _floorPrice, uint _totalACRESupply, uint _totalAcreWeight, uint _totalTotemWeight){\r\n            return (MVT_to_rollout, mvt5xHodlPool, nextFloorRaisingTime, floorPrice, _totalSupply, totalShares[ETHpool], totalTotemWeight);\r\n        }\r\n        \r\n        function userData(address account) public view returns(uint acreBalance, uint totemWeight, uint acreDividends, uint totemDividends, bool MDT_approval, bool MVT_approval){\r\n            return (balanceOf(account), shares[MVTpool][account], dividendsOf(ETHpool, account) + earnings[ETHpool][account], dividendsOf(MVTpool, account) + earnings[MVTpool][account], MDT.allowance(account,THIS)>$*1000000, MVT.allowance(account,THIS)>$*1000000);\r\n        }\r\n\r\n        function userData2(address account) public view returns(uint MDT_balance, uint MVT_balance, uint colorDividends){\r\n            return ( MDT.balanceOf(account), MVT.balanceOf(account), colorDividendsOf(account) + earnings[COLORpool][account] );\r\n        }\r\n\r\n        uint mvt5xHodlPool;\r\n        event PurchaseAcre(address boughtFor, uint acreBought);\r\n        function purchaseAcre(address buyFor) public payable{\r\n            if( buyFor == address(0) ){\r\n                buyFor = msg.sender;\r\n            }\r\n\r\n            require(msg.value > 0 && msg.sender == tx.origin);\r\n            uint MONEY = msg.value;\r\n            uint forDev;\r\n            if(block.timestamp - genesis <= 86400*365){forDev = MONEY * 6/1000;}\r\n            devPot += forDev;\r\n\r\n            uint val = MONEY - forDev;\r\n            mint(buyFor, val);\r\n            uint forBuyingMVT = val * (_totalSupply - totalTotemWeight + builder_totalShares) / _totalSupply;\r\n            GLR_funds += val - forBuyingMVT;\r\n            mvt5xHodlPool += forBuyingMVT;\r\n            emit PurchaseAcre(buyFor, val);\r\n            rolloutDepositedMVTRewards();\r\n        }\r\n\r\n        uint nextFloorRaisingTime;\r\n        uint floorPrice = 0.00002 ether;\r\n        bool firstBump = true;\r\n        event Sell_MVT(uint mvtSold, uint cashout,uint forManifest,uint forDaily);\r\n        function sell_MVT(uint amount) public{\r\n            address payable sender = payable(msg.sender);\r\n            require( MVT.transferFrom(sender, THIS, amount) );\r\n            uint NOW = block.timestamp;\r\n            \r\n            if(NOW >= nextFloorRaisingTime){\r\n                if(firstBump){\r\n                    firstBump = false;\r\n                    floorPrice = floorPrice * 10;\r\n                }else{\r\n                    floorPrice = floorPrice * 3;\r\n                }\r\n                nextFloorRaisingTime += 300 * 86400;\r\n            }\r\n\r\n            uint cost = floorPrice*amount/$;\r\n            require( mvt5xHodlPool >= cost && cost > 0 );\r\n            mvt5xHodlPool -= cost;\r\n\r\n            uint forManifest = amount * ( totalTotemWeight - builder_totalShares) / _totalSupply;\r\n            uint forDaily =  amount  - forManifest;\r\n            MVT_to_rollout += forDaily;\r\n            storeUpCommunityRewards(forManifest);\r\n            emit Sell_MVT(amount, cost,forManifest, forDaily);\r\n            (bool success, ) = sender.call{value:cost}(\"\");\r\n            require(success, \"Transfer failed.\");\r\n        }\r\n\r\n        mapping(uint => mapping(address => uint)) public  shares;\r\n        mapping(uint => uint) public totalShares;\r\n        mapping(uint => uint)  earningsPer;\r\n        mapping(uint => mapping(address => uint)) payouts;\r\n        mapping(uint => mapping(address => uint)) public  earnings;\r\n        uint256 constant scaleFactor = 0x10000000000000000;\r\n        uint constant ETHpool = 0;\r\n        uint constant MVTpool = 1;\r\n        uint constant COLORpool = 2;\r\n\r\n        function withdraw(uint pool) public{\r\n            address payable sender = payable(msg.sender);\r\n            require(pool>=0 && pool<=2);\r\n\r\n\r\n            if(pool == COLORpool){\r\n                update(ETHpool, sender);\r\n            }else{\r\n                update(pool, sender);\r\n            }\r\n\r\n            if(pool == ETHpool){\r\n                testClean(sender);\r\n            }\r\n            \r\n\r\n            uint earned = earnings[pool][sender];\r\n            earnings[pool][sender] = 0;\r\n            require(earned > 0);\r\n\r\n            if(pool == ETHpool){\r\n                (bool success, ) = sender.call{value:earned}(\"\");\r\n                require(success, \"Transfer failed.\");\r\n            }else if(pool == MVTpool){\r\n                MVT.transfer(sender, earned);\r\n            }else if(pool == COLORpool){\r\n                COLOR.transfer(sender, earned);\r\n            }\r\n        }\r\n\r\n        function addShares(uint pool, address account, uint amount) internal{\r\n            update(pool, account);\r\n            totalShares[pool] += amount;\r\n            shares[pool][account] += amount;\r\n        }\r\n\r\n        function removeShares(uint pool, address account, uint amount) internal{\r\n            update(pool, account);\r\n            totalShares[pool] -= amount;\r\n            shares[pool][account] -= amount;\r\n        }\r\n\r\n        function dividendsOf(uint pool, address account) public view returns(uint){\r\n            uint owedPerShare = earningsPer[pool] - payouts[pool][account];\r\n            return shares[pool][account] * owedPerShare / scaleFactor;\r\n        }\r\n        function colorDividendsOf(address account) public view returns(uint){\r\n            uint owedPerShare = earningsPer[COLORpool] - payouts[COLORpool][account];\r\n            return shares[ETHpool][account] * owedPerShare / scaleFactor;\r\n        }\r\n        \r\n        function update(uint pool, address account) internal {\r\n            uint newMoney = dividendsOf(pool, account);\r\n            payouts[pool][account] = earningsPer[pool];\r\n            earnings[pool][account] += newMoney;\r\n            if(pool == ETHpool){\r\n                newMoney = colorDividendsOf(account);\r\n                payouts[COLORpool][account] = earningsPer[COLORpool];\r\n                earnings[COLORpool][account] += newMoney;\r\n            }\r\n        }\r\n\r\n        event PayEthToAcreStakers(uint amount);\r\n        function payEthToAcreStakers() payable public{\r\n            uint val = msg.value;\r\n            require(totalShares[ETHpool]>0);\r\n            earningsPer[ETHpool] += val * scaleFactor / totalShares[ETHpool];\r\n            emit PayEthToAcreStakers(val);\r\n        }\r\n\r\n        event PayColor( uint amount );\r\n        function tokenFallback(address from, uint value, bytes calldata _data) external{\r\n            if(msg.sender == address(COLOR) ){\r\n                require(totalShares[ETHpool]>0);\r\n                earningsPer[COLORpool] += value * scaleFactor / totalShares[ETHpool];\r\n                emit PayColor(value);\r\n            }else{\r\n                revert(\"no want\");\r\n            }\r\n        }\r\n\r\n\r\n        mapping(uint => uint) public  builder_shares;\r\n        uint public builder_totalShares;\r\n        uint builder_earningsPer;\r\n        mapping(uint => uint) builder_payouts;\r\n        mapping(uint => uint) public  builder_earnings;\r\n        function builder_addShares(uint TOTEM, uint amount) internal{\r\n            if(!totemManifest[TOTEM]){\r\n                builder_update(TOTEM);\r\n                builder_totalShares += amount;\r\n                builder_shares[TOTEM] += amount;\r\n            }\r\n        }\r\n\r\n        function builder_removeShares(uint TOTEM, uint amount) internal{\r\n            if(!totemManifest[TOTEM]){\r\n                builder_update(TOTEM);\r\n                builder_totalShares -= amount;\r\n                builder_shares[TOTEM] -= amount;\r\n            }\r\n        }\r\n\r\n        function builder_dividendsOf(uint TOTEM) public view returns(uint){\r\n            uint owedPerShare = builder_earningsPer - builder_payouts[TOTEM];\r\n            return builder_shares[TOTEM] * owedPerShare / scaleFactor;\r\n        }\r\n        \r\n        function builder_update(uint TOTEM) internal{\r\n            uint newMoney = builder_dividendsOf(TOTEM);\r\n            builder_payouts[TOTEM] = builder_earningsPer;\r\n            builder_earnings[TOTEM] += newMoney;        \r\n        }\r\n\r\n        uint public MVT_to_rollout;\r\n        uint public lastRollout;\r\n\r\n        event DepositMVTForRewards(address addr, uint amount);\r\n        function depositMVTForRewards(uint amount) public{\r\n            require(MVT.transferFrom(msg.sender, THIS, amount));\r\n            storeUpCommunityRewards(amount);\r\n            emit DepositMVTForRewards(msg.sender, amount);\r\n        }\r\n\r\n        function storeUpCommunityRewards(uint amount)internal{\r\n            if( builder_totalShares == 0 ){\r\n                storedUpBuilderMVT += amount;\r\n            }else{\r\n                builder_earningsPer += ( amount + storedUpBuilderMVT ) * scaleFactor / builder_totalShares;\r\n                storedUpBuilderMVT = 0;\r\n            }\r\n        }\r\n\r\n        event RolloutDepositedMVTRewards(uint amountToDistribute);\r\n        function rolloutDepositedMVTRewards() public{\r\n            uint NOW = block.timestamp;\r\n            if( (NOW - lastRollout) > 86400 && totalShares[MVTpool] > 0 &&  MVT_to_rollout > 0){\r\n                lastRollout = NOW;\r\n                uint amountToDistribute = MVT_to_rollout * (totalTotemWeight-totalShares[MVTpool]) / _totalSupply;\r\n                MVT_to_rollout -= amountToDistribute;\r\n                earningsPer[MVTpool] += amountToDistribute * scaleFactor / totalShares[MVTpool];\r\n                emit RolloutDepositedMVTRewards(amountToDistribute);\r\n            }\r\n        }\r\n\r\n        string public name = \"Acre\";\r\n        string public symbol = \"ACRE\";\r\n        uint8 constant public decimals = 18;\r\n        mapping(address => uint256) public balances;\r\n        uint _totalSupply;\r\n\r\n        mapping(address => mapping(address => uint)) approvals;\r\n\r\n        event Transfer(\r\n            address indexed from,\r\n            address indexed to,\r\n            uint256 amount,\r\n            bytes data\r\n        );\r\n        event Transfer(\r\n            address indexed from,\r\n            address indexed to,\r\n            uint256 amount\r\n        );\r\n        \r\n        event Mint(\r\n            address indexed addr,\r\n            uint256 amount\r\n        );\r\n\r\n        function mint(address _address, uint _value) internal{\r\n            balances[_address] += _value;\r\n            _totalSupply += _value;\r\n            if(!isContract(msg.sender)) addShares(ETHpool, _address, _value);\r\n            emit Mint(_address, _value);\r\n        }\r\n\r\n        function totalSupply() public view returns (uint256) {\r\n            return _totalSupply;\r\n        }\r\n\r\n        function balanceOf(address _owner) public view returns (uint256 balance) {\r\n            return balances[_owner];\r\n        }\r\n\r\n        function transfer(address _to, uint _value) public virtual returns (bool) {\r\n            bytes memory empty;\r\n            return transferToAddress(_to, _value, empty);\r\n        }\r\n\r\n        function transfer(address _to, uint _value, bytes memory _data) public virtual returns (bool) {\r\n            if( isContract(_to) ){\r\n                return transferToContract(_to, _value, _data);\r\n            }else{\r\n                return transferToAddress(_to, _value, _data);\r\n            }\r\n        }\r\n\r\n        //function that is called when transaction target is an address\r\n        function transferToAddress(address _to, uint _value, bytes memory _data) private returns (bool) {\r\n            moveTokens(msg.sender, _to, _value);\r\n            emit Transfer(msg.sender, _to, _value, _data);\r\n            return true;\r\n        }\r\n\r\n        //function that is called when transaction target is a contract\r\n        function transferToContract(address _to, uint _value, bytes memory _data) private returns (bool) {\r\n            moveTokens(msg.sender, _to, _value);\r\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n            emit Transfer(msg.sender, _to, _value, _data);\r\n            return true;\r\n        }\r\n\r\n        function testClean(address addr) public {\r\n            if(isContract(addr)){\r\n                clean(addr);\r\n            }\r\n        }\r\n\r\n        function clean(address addr) internal{\r\n            uint _shares = shares[ETHpool][addr];\r\n            if( _shares > 0 ){\r\n                removeShares(ETHpool, addr, _shares);\r\n                uint earned = earnings[ETHpool][addr];\r\n                earnings[ETHpool][addr] = 0;\r\n\r\n                require( totalShares[ETHpool] > 0 );\r\n                earningsPer[ETHpool] += earned * scaleFactor / totalShares[ETHpool];\r\n                emit PayEthToAcreStakers(earned);\r\n            }\r\n        }\r\n\r\n        function moveTokens(address _from, address _to, uint _amount) internal virtual{\r\n            require( _amount <= balances[_from] );\r\n            //update balances\r\n            balances[_from] -= _amount;\r\n            balances[_to] += _amount;\r\n\r\n            if(!isContract(_from) ){\r\n                if(_to != THIS ){\r\n                    require( MVT.transferFrom(_from, THIS, _amount) );\r\n                    storeUpCommunityRewards(_amount);\r\n                }\r\n                removeShares(ETHpool, _from, _amount);\r\n            }else{\r\n                clean(_from);\r\n            }\r\n\r\n            if( !isContract(_to) ){\r\n                addShares(ETHpool, _to, _amount);\r\n            }else{\r\n                clean(_to);\r\n            }\r\n\r\n            emit Transfer(_from, _to, _amount);\r\n        }\r\n\r\n        function allowance(address src, address guy) public view returns (uint) {\r\n            return approvals[src][guy];\r\n        }\r\n        \r\n        function transferFrom(address src, address dst, uint amount) public returns (bool){\r\n            address sender = msg.sender;\r\n            require(approvals[src][sender] >=  amount);\r\n            require(balances[src] >= amount);\r\n            approvals[src][sender] -= amount;\r\n            moveTokens(src,dst,amount);\r\n            bytes memory empty;\r\n            emit Transfer(sender, dst, amount, empty);\r\n            return true;\r\n        }\r\n\r\n        event Approval(address indexed src, address indexed guy, uint amount);\r\n        function approve(address guy, uint amount) public returns (bool) {\r\n            address sender = msg.sender;\r\n            approvals[sender][guy] = amount;\r\n\r\n            emit Approval( sender, guy, amount );\r\n            return true;\r\n        }\r\n\r\n        function isContract(address _addr) public view returns (bool is_contract) {\r\n            uint length;\r\n            assembly {\r\n                //retrieve the size of the code on target address, this needs assembly\r\n                length := extcodesize(_addr)\r\n            }\r\n            if(length>0) {\r\n                return true;\r\n            }else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        uint NFTcount;\r\n        \r\n        mapping(address => uint[]) public totemsHad;\r\n        mapping(address => mapping(uint => bool)) public alreadyHadAtleastOnce;\r\n\r\n        uint totalTotemWeight;\r\n        event AcreToTotem(address account, uint amount, bool autoStake);\r\n        function acreToTotem(uint amount, bool autoStake) public returns(uint TOTEM_ID){\r\n            address sender = msg.sender;\r\n            require( MDT.transferFrom(sender, THIS, $) );\r\n\r\n            totemNFT.mintUniqueTokenTo(autoStake?THIS:sender, NFTcount, amount);\r\n\r\n            if(autoStake){\r\n                stakeNFT(sender, NFTcount);\r\n            }else{\r\n                builder_addShares(NFTcount, amount);\r\n                totemsHad[sender].push(NFTcount);\r\n                alreadyHadAtleastOnce[sender][NFTcount] = true;\r\n            }\r\n\r\n            NFTcount += 1;\r\n            totalTotemWeight += amount;\r\n            moveTokens(sender, THIS, amount);\r\n            bytes memory empty;\r\n            emit Transfer(sender, THIS, amount, empty);\r\n            emit AcreToTotem(sender, amount, autoStake);\r\n            return NFTcount - 1;\r\n        }\r\n\r\n        uint storedUpBuilderMVT;\r\n        event TotemToMDT(address lastOwner, uint totemID, bool preventBurn);\r\n        mapping(uint => bool) public totemManifest;\r\n        function totemToMDT(uint totemID, bool preventBurn) public{\r\n            address sender = msg.sender;\r\n            require( sender == staker[totemID] && !totemManifest[totemID] && !requestLocked[totemID]);\r\n            require( MDT.transfer(sender, $) );\r\n            uint totemWeight = totemNFT.getWeight(totemID);\r\n            removeShares( MVTpool, sender, totemWeight );\r\n            staker[totemID] = address(0);\r\n\r\n            uint burnage;\r\n            if(preventBurn){\r\n                require( MVT.transferFrom(sender,THIS, totemWeight) );\r\n                storeUpCommunityRewards(totemWeight);\r\n            }else{\r\n                burnage = totemWeight * totalTotemWeight / _totalSupply;\r\n            }\r\n            storeUpCommunityRewards(builder_dividendsOf(totemID)+builder_earnings[totemID]);\r\n            \r\n            moveTokens(THIS, sender, totemWeight - burnage);\r\n            _totalSupply -= burnage;\r\n            balances[THIS] -= burnage;\r\n\r\n            totalTotemWeight -= totemWeight;\r\n            \r\n            emit TotemToMDT(sender, totemID, preventBurn);\r\n        }\r\n\r\n        mapping(uint => address) public staker;\r\n        mapping(uint => uint) public lastMove;\r\n        event StakeNFT(address who, uint tokenID);\r\n        function stakeNFT(address who, uint256 tokenID) internal{\r\n            staker[tokenID] = who;\r\n\r\n            if( !alreadyHadAtleastOnce[who][tokenID] ){\r\n                totemsHad[who].push(tokenID);\r\n                alreadyHadAtleastOnce[who][tokenID] = true;\r\n            }\r\n\r\n            addShares( MVTpool, who, totemNFT.getWeight(tokenID) );\r\n            emit StakeNFT(who, tokenID);\r\n        }\r\n\r\n        event UnstakeNFT(address unstaker, uint tokenID);\r\n        function unstakeNFT(uint tokenID) public{\r\n            address sender = msg.sender;\r\n            require(staker[tokenID] == sender && !requestLocked[tokenID] && block.timestamp-lastMove[tokenID]>=86400 );\r\n            uint weight = totemNFT.getWeight(tokenID);\r\n            lastMove[tokenID] = block.timestamp;\r\n            removeShares( MVTpool, sender, weight );\r\n            staker[tokenID] = address(0);\r\n            builder_addShares(tokenID, weight);\r\n\r\n            totemNFT.transferFrom(THIS, sender, tokenID);\r\n            emit UnstakeNFT(sender, tokenID);\r\n        }\r\n\r\n        function viewTotems(address account, uint[] memory totems) public view returns(uint[] memory tokenIDs, bool[] memory accountIsCurrentlyStaking, uint[] memory acreWeight, bool[] memory owned, bool[] memory manifested, bool[] memory staked, uint[] memory manifestEarnings, uint[] memory lastMoved,bool[] memory pendingManifest){\r\n            uint L;\r\n            if(totems.length==0){\r\n                L = totemsHad[account].length;\r\n            }else{\r\n                L = totems.length;\r\n            }\r\n\r\n            tokenIDs = new uint[](L);\r\n            acreWeight = new uint[](L);\r\n            accountIsCurrentlyStaking = new bool[](L);\r\n            owned = new bool[](L);\r\n            manifested = new bool[](L);\r\n            staked = new bool[](L);\r\n            pendingManifest = new bool[](L);\r\n            manifestEarnings = new uint[](L);\r\n            lastMoved = new uint[](L);\r\n\r\n            uint tID;\r\n            for(uint c = 0; c<L; c+=1){\r\n                if(totems.length==0){\r\n                    tID = totemsHad[account][c];\r\n                }else{\r\n                    tID = totems[c];\r\n                }\r\n                tokenIDs[c] = tID;\r\n                acreWeight[c] = totemNFT.getWeight(tID);\r\n                accountIsCurrentlyStaking[c] = staker[tID] == account;\r\n                staked[c] = totemNFT.ownerOf(tID) == THIS;\r\n                manifested[c] = totemManifest[tID];\r\n                pendingManifest[c] = requestLocked[tID];\r\n                manifestEarnings[c] = builder_dividendsOf(tID) + builder_earnings[tID];\r\n                lastMoved[c] = lastMove[tID];\r\n                owned[c] = ( staker[tID] == account || totemNFT.ownerOf(tID) == account );\r\n            }\r\n        }\r\n\r\n        function onERC721Received(address from, uint256 tokenID, bytes memory _data) external returns(bytes4) {\r\n            bytes4 empty;\r\n            require( msg.sender == address(totemNFT) && block.timestamp-lastMove[tokenID]>=86400 );\r\n            lastMove[tokenID] = block.timestamp;\r\n            builder_removeShares(tokenID, totemNFT.getWeight(tokenID) );\r\n            stakeNFT(from, tokenID);\r\n            return empty;\r\n        }\r\n\r\n        mapping(uint=>address) public theWork; //noita\r\n        mapping(uint=>uint) workingTotem;\r\n        mapping(uint=>string) public txt;\r\n        mapping(uint=>bool) requestLocked;\r\n        event OracleRequest(address buidlr, uint totemID, uint earningsToManifest, address _theWork, string text, uint ticketID);\r\n        function oracleRequest(uint totemID, string memory _txt, address contract_optional) public payable returns(uint ticketID){\r\n            address sender = msg.sender;\r\n            require( staker[totemID] == sender && !totemManifest[totemID] && !requestLocked[totemID] );\r\n            uint ID = ORACLE.fileRequestTicket{value: msg.value}(1, true);\r\n            workingTotem[ID] = totemID;\r\n            theWork[totemID] = contract_optional;\r\n            txt[totemID] = _txt;\r\n            requestLocked[totemID] = true;\r\n            emit OracleRequest(sender, totemID, builder_dividendsOf(totemID)+builder_earnings[totemID], contract_optional, _txt, ID);\r\n            return ID;\r\n        }\r\n\r\n        event CommunityReward(address buidlr, uint totemID, uint reward, address contractBuilt, string text, uint ticketID);\r\n        event RequestRejected(uint totemID, uint ticketID);\r\n        function oracleIntFallback(uint ticketID, bool requestRejected, uint numberOfOptions, uint[] memory optionWeights, int[] memory intOptions) public{\r\n            uint optWeight;\r\n            uint positive;\r\n            uint negative;\r\n            uint totemID = workingTotem[ticketID];\r\n            require( msg.sender == address(ORACLE) );\r\n\r\n            for(uint i; i < numberOfOptions; i+=1){\r\n                optWeight = optionWeights[i];\r\n                if(intOptions[i]>0){\r\n                    positive += optWeight;\r\n                }else{\r\n                    negative += optWeight;\r\n                }\r\n            }\r\n\r\n            if(!requestRejected && positive>negative){\r\n                //emit event and give reward\r\n                if(!totemManifest[totemID]){\r\n                    totemManifest[totemID] = true;\r\n                    uint earned = builder_earnings[totemID];\r\n                    if(earned>0){\r\n                        if( staker[totemID]==address(0) ){\r\n                            storeUpCommunityRewards(earned);\r\n                        }else{\r\n                            earnings[MVTpool][staker[totemID]] += earned;\r\n                        }\r\n                    }\r\n                    emit CommunityReward(staker[totemID], totemID, earned, theWork[totemID], txt[totemID], ticketID );\r\n                }\r\n            }else{\r\n                emit RequestRejected(totemID,ticketID);\r\n            }\r\n            requestLocked[totemID] = false;\r\n        }\r\n    }\r\n\r\n    abstract contract Oracle{\r\n        function fileRequestTicket( uint8 returnType, bool subjective) public virtual payable returns(uint ticketID);\r\n    }\r\n\r\n    abstract contract ERC20{\r\n        function totalSupply() external virtual view returns (uint256);\r\n        function balanceOf(address account) external virtual view returns (uint256);\r\n        function allowance(address owner, address spender) external virtual view returns (uint256);\r\n        function transfer(address recipient, uint256 amount) external virtual returns (bool);\r\n        function approve(address spender, uint256 amount) external virtual returns (bool);\r\n        function transferFrom(address sender, address recipient, uint256 amount) external virtual returns (bool);\r\n    }\r\n\r\n    contract Totem is ERC721 {\r\n        constructor (string memory _name, string memory _symbol)\r\n            ERC721(_name, _symbol)\r\n        {\r\n            greenpoint = msg.sender;\r\n        }\r\n\r\n        address greenpoint;\r\n        mapping(uint => uint)  weight;\r\n        function mintUniqueTokenTo(\r\n            address _to,\r\n            uint256 _tokenId,\r\n            uint _weight\r\n        ) public {\r\n            require(msg.sender == greenpoint);\r\n            super._mint(_to, _tokenId);\r\n            weight[_tokenId] = _weight;\r\n        }\r\n\r\n        function getWeight(uint ID) public view returns(uint){\r\n            return weight[ID];\r\n        }\r\n\r\n        mapping(uint => string) desiredURI;\r\n        mapping(uint => uint) workingTotem;\r\n        event URI_request(uint totemID, string desiredURI, uint ticketID);\r\n        function uriRequest(uint ID, string memory _desiredURI) public payable returns(uint){\r\n            require( msg.sender == ownerOf(ID) );\r\n            uint otID = GreenPointLandReserves(greenpoint).ORACLE().fileRequestTicket{value:msg.value}(1,true);\r\n            desiredURI[otID] = _desiredURI;\r\n            workingTotem[otID] = ID;\r\n            emit URI_request(ID, _desiredURI, otID);\r\n            return otID;\r\n        }\r\n\r\n        event AcceptedURI(uint totemID);\r\n        event RejectedURI(uint totemID);\r\n        function oracleIntFallback(uint ticketID, bool requestRejected, uint numberOfOptions, uint[] memory optionWeights, int[] memory intOptions) public{\r\n            uint optWeight;\r\n            uint positive;\r\n            uint negative;\r\n            \r\n            require( msg.sender == address( GreenPointLandReserves(greenpoint).ORACLE() ) );\r\n\r\n            for(uint i; i < numberOfOptions; i+=1){\r\n                optWeight = optionWeights[i];\r\n                if(intOptions[i]>0){\r\n                    positive += optWeight;\r\n                }else{\r\n                    negative += optWeight;\r\n                }\r\n            }\r\n            uint totemID = workingTotem[ticketID];\r\n            if(!requestRejected && positive>negative && !GreenPointLandReserves(greenpoint).totemManifest(totemID) ){\r\n                uri[totemID] = desiredURI[ticketID];\r\n                emit AcceptedURI(totemID);\r\n            }else{\r\n                emit RejectedURI(totemID);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    abstract contract ERC223ReceivingContract{\r\n        function tokenFallback(address _from, uint _value, bytes calldata _data) external virtual;\r\n    }","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"autoStake\",\"type\":\"bool\"}],\"name\":\"AcreToTotem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buidlr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totemID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractBuilt\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketID\",\"type\":\"uint256\"}],\"name\":\"CommunityReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositMVTForRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buidlr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totemID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earningsToManifest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_theWork\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketID\",\"type\":\"uint256\"}],\"name\":\"OracleRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayColor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayEthToAcreStakers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"boughtFor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"acreBought\",\"type\":\"uint256\"}],\"name\":\"PurchaseAcre\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totemID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketID\",\"type\":\"uint256\"}],\"name\":\"RequestRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToDistribute\",\"type\":\"uint256\"}],\"name\":\"RolloutDepositedMVTRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mvtSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forManifest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forDaily\",\"type\":\"uint256\"}],\"name\":\"Sell_MVT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"StakeNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lastOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totemID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"preventBurn\",\"type\":\"bool\"}],\"name\":\"TotemToMDT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"unstaker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"UnstakeNFT\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Dev_pullFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GLR_funds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GLR_nonprofit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GLR_pullFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MVT_to_rollout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORACLE\",\"outputs\":[{\"internalType\":\"contract Oracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autoStake\",\"type\":\"bool\"}],\"name\":\"acreToTotem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"TOTEM_ID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"alreadyHadAtleastOnce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"TOTEM\",\"type\":\"uint256\"}],\"name\":\"builder_dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"builder_earnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"builder_shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"builder_totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"colorDividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositMVTForRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_MVT_to_rollout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mvt5xHodlPool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nextFloorRaisingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_floorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalACRESupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalAcreWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTotemWeight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"is_contract\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastMove\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRollout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"requestRejected\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numberOfOptions\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"optionWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"int256[]\",\"name\":\"intOptions\",\"type\":\"int256[]\"}],\"name\":\"oracleIntFallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totemID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_txt\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contract_optional\",\"type\":\"address\"}],\"name\":\"oracleRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketID\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleTeller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payEthToAcreStakers\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyFor\",\"type\":\"address\"}],\"name\":\"purchaseAcre\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rolloutDepositedMVTRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell_MVT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"shiftDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"shiftOracleTeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"shiftOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"testClean\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"theWork\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totemManifest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totemNFT\",\"outputs\":[{\"internalType\":\"contract Totem\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totemID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"preventBurn\",\"type\":\"bool\"}],\"name\":\"totemToMDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totemsHad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"txt\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"unstakeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"acreBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totemWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acreDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totemDividends\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"MDT_approval\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"MVT_approval\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"userData2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"MDT_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MVT_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colorDividends\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"totems\",\"type\":\"uint256[]\"}],\"name\":\"viewTotems\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIDs\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"accountIsCurrentlyStaking\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"acreWeight\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"owned\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"manifested\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"staked\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"manifestEarnings\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lastMoved\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"pendingManifest\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GreenPointLandReserves","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://024a48b0116d3623d3c4e658180554ae0cb7b39ebc109de8c78519e16fb1e6e5"}]}