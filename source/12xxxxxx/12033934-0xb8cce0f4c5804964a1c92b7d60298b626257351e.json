{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.8.1;\r\n\r\n\r\n/** @title Repeater\r\n *  This contract repeats calls on the owner request.\r\n */\r\ncontract Repeater {\r\n    address owner = msg.sender;\r\n    \r\n/** @dev Call `_target` with `_data`\r\n *  @param _target The contract to call.\r\n *  @param _data The data to send to the contract.\r\n */    \r\n    function repeat(address _target, bytes calldata _data) external {\r\n        require(msg.sender == owner);\r\n        _target.call(_data);\r\n    }\r\n\r\n/** @dev Call `_target` with `_data` sending `_value` wei.\r\n *  @param _target The contract to call.\r\n *  @param _data The data to send to the contract.\r\n *  @param _value The amount of wei to send.\r\n */\r\n    function repeatWithValue(address _target, bytes calldata _data, uint _value) external {\r\n        require(msg.sender == owner);\r\n        _target.call{value: _value}(_data);\r\n    }\r\n    \r\n    receive() external payable {}\r\n}\r\n\r\n/** @title Master\r\n *  This contract creates repeaters and make them perform some actions.\r\n */\r\ncontract Master {\r\n    address public owner = msg.sender;\r\n    Repeater[] public repeaters;\r\n    \r\n    function changeOwner(address _newOwner) external {\r\n        require(msg.sender == owner);\r\n        owner = _newOwner;\r\n    }\r\n    \r\n    /** @dev Create `_amount` repeaters.\r\n     *  @param _amount The amount of repeaters to create.\r\n     */\r\n    function addRepeaters(uint _amount) external {\r\n        require(msg.sender == owner);\r\n        for (uint i; i<_amount; ++i) {\r\n            repeaters.push(new Repeater());\r\n        }\r\n    }\r\n    \r\n    /** @dev Make repeaters from `_start` to `_end` (included) call `_target` with `_data`.\r\n     *  @param _start The first repeater ID.\r\n     *  @param _end The last repeater ID.\r\n     *  @param _target The contract to be called by the repeaters.\r\n     *  @param _data The data the repeaters will send to the contract.\r\n     */\r\n    function say(uint _start, uint _end, address _target, bytes calldata _data) external {\r\n        require(msg.sender == owner);\r\n        for (uint i=_start; i<=_end; ++i) {\r\n            repeaters[i].repeat(_target, _data);\r\n        }\r\n    }\r\n\r\n    /** @dev Make repeaters from `_start` to `_end` (included) call `_target` with `_data` sending `_value` wei.\r\n     *  @param _start The first repeater ID.\r\n     *  @param _end The last repeater ID.\r\n     *  @param _target The contract to be called by the repeaters.\r\n     *  @param _data The data the repeaters will send to the contract.\r\n     *  @param _value The amount of wei to send.\r\n     */\r\n    function sayWithValue(uint _start, uint _end, address _target, bytes calldata _data, uint _value) external {\r\n        require(msg.sender == owner);\r\n        for (uint i=_start; i<=_end; ++i) {\r\n            repeaters[i].repeatWithValue(_target, _data, _value);\r\n        }\r\n    }    \r\n    \r\n    /** @dev Return the list of repeaters.\r\n     *  @return The list of repeaters.\r\n     */\r\n    function getRepeatersAddresses() external view returns(Repeater[] memory)  {\r\n        return repeaters;\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addRepeaters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRepeatersAddresses\",\"outputs\":[{\"internalType\":\"contract Repeater[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"repeaters\",\"outputs\":[{\"internalType\":\"contract Repeater\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"say\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sayWithValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Master","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://273b1ff46cd360a166d1cd7428edb047d295324a3043739289f9916d768c57de"}]}