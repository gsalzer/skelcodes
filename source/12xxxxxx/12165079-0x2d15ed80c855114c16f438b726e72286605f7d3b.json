{"status":"1","message":"OK","result":[{"SourceCode":"// File: @chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n// File: contracts/ChainlinkRewardOracle.sol\r\n\r\n\r\npragma solidity ^0.7.1;\r\n\r\n\r\ncontract ChainlinkRewardOracle {\r\n\r\n  mapping(uint16 => uint256[]) public base_SFI_rewards;\r\n  mapping(uint16 => uint256[]) public bonus_SFI_rewards;\r\n\r\n  mapping(uint256 => AggregatorV3Interface) public pool_feed;\r\n  mapping(uint256 => uint256) public base_asset_price_begin;\r\n  mapping(uint256 => uint256) public base_asset_price_end;\r\n  mapping(uint256 => uint256) public limit; // If end price is less than X percent of `begin` use maximum reward; 1e18 scale\r\n\r\n  mapping(uint16 => uint16[]) public tracked_pools;\r\n\r\n  enum states {UNSET, REWARD_SET, STARTED, ENDED}\r\n  mapping(uint16 => states) public epoch_state;\r\n\r\n  address public governance;\r\n  address public _new_governance;\r\n  address public strategy;\r\n\r\n  constructor(address strategyAddr) {\r\n    governance = msg.sender;\r\n    strategy = strategyAddr;\r\n  }\r\n\r\n  function set_feed(uint16 epoch, uint16 pool, address feedAddr, uint256 maxPct, uint256 alt_reward) public {\r\n    require(msg.sender == strategy || msg.sender == governance, \"must be strategy or gov\");\r\n    require(epoch_state[epoch] == states.REWARD_SET, \"rewards must be set and not started\");\r\n    require(pool < base_SFI_rewards[epoch].length, \"cannot feed pool with undefined reward\");\r\n    require(maxPct < 1 ether, \"can't award on no change\"); // Prevent divide by zero\r\n    uint256 index = pack(epoch, pool);\r\n    pool_feed[index] = AggregatorV3Interface(feedAddr);\r\n    tracked_pools[epoch].push(pool);\r\n    limit[index] = maxPct;\r\n    bonus_SFI_rewards[epoch][pool] = alt_reward;\r\n  }\r\n\r\n  function set_base_reward(uint16 epoch, uint256[] calldata SFI_rewards) public {\r\n    require(msg.sender == strategy || msg.sender == governance, \"must be strategy or gov\");\r\n    require(epoch_state[epoch] == states.UNSET || epoch_state[epoch] == states.REWARD_SET, \"must not be started\");\r\n    epoch_state[epoch] = states.REWARD_SET;\r\n    base_SFI_rewards[epoch] = SFI_rewards;\r\n    bonus_SFI_rewards[epoch] = SFI_rewards;\r\n  }\r\n\r\n  event BeginEpoch(uint16 epoch);\r\n\r\n  function begin_epoch(uint16 epoch) public {\r\n    require(msg.sender == strategy || msg.sender == governance, \"must be strategy or gov\");\r\n    require(epoch_state[epoch] == states.REWARD_SET, \"must set rewards first\");\r\n    epoch_state[epoch] = states.STARTED;\r\n    emit BeginEpoch(epoch);\r\n    for (uint256 i = 0; i < tracked_pools[epoch].length; i++) {\r\n      uint256 index = pack(epoch, tracked_pools[epoch][i]);\r\n      base_asset_price_begin[index] = get_latest_price(index);\r\n    }\r\n  }\r\n\r\n  event EndEpoch(uint16 epoch);\r\n\r\n  function end_epoch(uint16 epoch) public {\r\n    require(msg.sender == strategy || msg.sender == governance, \"must be strategy or gov\");\r\n    require(epoch_state[epoch] == states.STARTED, \"must be started\");\r\n    epoch_state[epoch] = states.ENDED;\r\n    emit EndEpoch(epoch);\r\n    for (uint256 i = 0; i < tracked_pools[epoch].length; i++) {\r\n      uint256 index = pack(epoch, tracked_pools[epoch][i]);\r\n      base_asset_price_end[index] = get_latest_price(index);\r\n    }\r\n  }\r\n\r\n  event OracleGetReward(uint256 index, uint256 begin, uint256 end, uint256 reward);\r\n\r\n  function get_reward(uint16 epoch, uint16 pool) public view returns (uint256 index, uint256 begin, uint256 end, uint256 reward) {\r\n    require(epoch_state[epoch] == states.ENDED, \"must be ended\");\r\n    if (pool > base_SFI_rewards[epoch].length) {\r\n      return (index, begin, end, reward);\r\n    }\r\n\r\n    index = pack(epoch, pool);\r\n\r\n    if (pool_feed[index] == AggregatorV3Interface(0x0)) {\r\n      reward = base_SFI_rewards[epoch][pool];\r\n      return (index, begin, end, reward);\r\n    }\r\n\r\n    begin = base_asset_price_begin[index];\r\n    end = base_asset_price_end[index];\r\n\r\n    if (end >= begin) {\r\n      reward = base_SFI_rewards[epoch][pool];\r\n      return (index, begin, end, reward);\r\n    }\r\n\r\n    uint256 pct = limit[index];\r\n    uint256 max_price_move = begin * pct / 1e18;\r\n\r\n    reward = base_SFI_rewards[epoch][pool] + calc_reward_bonus(begin, end, pct, max_price_move, bonus_SFI_rewards[epoch][pool]);\r\n\r\n    return (index, begin, end, reward);\r\n  }\r\n\r\n  function calc_reward_bonus(uint256 begin, uint256 end, uint256 pct, uint256 max_price_move, uint256 bonus_SFI_reward) internal pure returns (uint256) {\r\n    if (end <= max_price_move) return bonus_SFI_reward;\r\n    uint256 delta = (begin - end);\r\n    uint256 delta_pct = (delta * 1 ether) / begin;\r\n    uint256 reward_multiplier = delta_pct * 1 ether / (1 ether - pct);\r\n    return bonus_SFI_reward * reward_multiplier / 1 ether;\r\n  }\r\n\r\n  function get_latest_price(uint256 index) internal view returns (uint256) {\r\n    AggregatorV3Interface priceFeed = pool_feed[index];\r\n    require(priceFeed != AggregatorV3Interface(0x0), \"no feed found\");\r\n    // uint80 roundID, int price, uint startedAt, uint timeStamp, uint80 answeredInRound\r\n    (,int price,,,) = priceFeed.latestRoundData();\r\n    return uint256(price);\r\n  }\r\n\r\n  function pack(uint16 epoch, uint16 pool) internal pure returns (uint256) {\r\n    return uint256(epoch) | uint256(pool) << 16;\r\n  }\r\n\r\n  //  function unpack(uint256 value) public pure returns (uint16, uint16) {\r\n  //    return (uint16(value), uint16(value >> 16));\r\n  //  }\r\n\r\n  event SetGovernance(address prev, address next);\r\n  event AcceptGovernance(address who);\r\n\r\n  function set_governance(address to) external {\r\n    require(msg.sender == governance, \"must be governance\");\r\n    _new_governance = to;\r\n    emit SetGovernance(msg.sender, to);\r\n  }\r\n\r\n  function accept_governance() external {\r\n    require(msg.sender == _new_governance, \"must be new governance\");\r\n    governance = msg.sender;\r\n    emit AcceptGovernance(msg.sender);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"AcceptGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"name\":\"BeginEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"name\":\"EndEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"begin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"OracleGetReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prev\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"next\",\"type\":\"address\"}],\"name\":\"SetGovernance\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_new_governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accept_governance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"base_SFI_rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"base_asset_price_begin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"base_asset_price_end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"name\":\"begin_epoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonus_SFI_rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"}],\"name\":\"end_epoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"epoch_state\",\"outputs\":[{\"internalType\":\"enum ChainlinkRewardOracle.states\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pool\",\"type\":\"uint16\"}],\"name\":\"get_reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"begin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_feed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"internalType\":\"uint256[]\",\"name\":\"SFI_rewards\",\"type\":\"uint256[]\"}],\"name\":\"set_base_reward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"epoch\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pool\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"feedAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxPct\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alt_reward\",\"type\":\"uint256\"}],\"name\":\"set_feed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"set_governance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tracked_pools\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ChainlinkRewardOracle","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000d857fcf1aea51d72b6843c00e9e180b68e363638","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f78e300bf2fc8a750ff37cf4b3c1365293f2b3410b49a2b59d79a42d2b12a731"}]}