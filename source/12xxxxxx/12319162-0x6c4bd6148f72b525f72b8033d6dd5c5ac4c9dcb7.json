{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\lib\\IERC20.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.3;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\lib\\TransferHelper.sol\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n// File: contracts\\interface\\INTokenController.sol\r\n\r\n///@dev This interface defines the methods for ntoken management\r\ninterface INTokenController {\r\n    \r\n    /// @notice when the auction of a token gets started\r\n    /// @param tokenAddress The address of the (ERC20) token\r\n    /// @param ntokenAddress The address of the ntoken w.r.t. token for incentives\r\n    /// @param owner The address of miner who opened the oracle\r\n    event NTokenOpened(address tokenAddress, address ntokenAddress, address owner);\r\n    \r\n    /// @notice ntoken disable event\r\n    /// @param tokenAddress token address\r\n    event NTokenDisabled(address tokenAddress);\r\n    \r\n    /// @notice ntoken enable event\r\n    /// @param tokenAddress token address\r\n    event NTokenEnabled(address tokenAddress);\r\n\r\n    /// @dev ntoken configuration structure\r\n    struct Config {\r\n\r\n        // The number of nest needed to pay for opening ntoken. 10000 ether\r\n        uint96 openFeeNestAmount;\r\n\r\n        // ntoken management is enabled. 0: not enabled, 1: enabled\r\n        uint8 state;\r\n    }\r\n\r\n    /// @dev A struct for an ntoken\r\n    struct NTokenTag {\r\n\r\n        // ntoken address\r\n        address ntokenAddress;\r\n\r\n        // How much nest has paid for open this ntoken\r\n        uint96 nestFee;\r\n    \r\n        // token address\r\n        address tokenAddress;\r\n\r\n        // Index for this ntoken\r\n        uint40 index;\r\n\r\n        // Create time\r\n        uint48 startTime;\r\n\r\n        // State of this ntoken. 0: disabled; 1 normal\r\n        uint8 state;\r\n    }\r\n\r\n    /* ========== Governance ========== */\r\n\r\n    /// @dev Modify configuration\r\n    /// @param config Configuration object\r\n    function setConfig(Config memory config) external;\r\n\r\n    /// @dev Get configuration\r\n    /// @return Configuration object\r\n    function getConfig() external view returns (Config memory);\r\n\r\n    /// @dev Set the token mapping\r\n    /// @param tokenAddress Destination token address\r\n    /// @param ntokenAddress Destination ntoken address\r\n    /// @param state status for this map\r\n    function setNTokenMapping(address tokenAddress, address ntokenAddress, uint state) external;\r\n\r\n    /// @dev Get token address from ntoken address\r\n    /// @param ntokenAddress Destination ntoken address\r\n    /// @return token address\r\n    function getTokenAddress(address ntokenAddress) external view returns (address);\r\n\r\n    /// @dev Get ntoken address from token address\r\n    /// @param tokenAddress Destination token address\r\n    /// @return ntoken address\r\n    function getNTokenAddress(address tokenAddress) external view returns (address);\r\n\r\n    /* ========== ntoken management ========== */\r\n    \r\n    /// @dev Bad tokens should be banned \r\n    function disable(address tokenAddress) external;\r\n\r\n    /// @dev enable ntoken\r\n    function enable(address tokenAddress) external;\r\n\r\n    /// @notice Open a NToken for a token by anyone (contracts aren't allowed)\r\n    /// @dev Create and map the (Token, NToken) pair in NestPool\r\n    /// @param tokenAddress The address of token contract\r\n    function open(address tokenAddress) external;\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    /// @dev Get ntoken information\r\n    /// @param tokenAddress Destination token address\r\n    /// @return ntoken information\r\n    function getNTokenTag(address tokenAddress) external view returns (NTokenTag memory);\r\n\r\n    /// @dev Get opened ntoken count\r\n    /// @return ntoken count\r\n    function getNTokenCount() external view returns (uint);\r\n\r\n    /// @dev List ntoken information by page\r\n    /// @param offset Skip previous (offset) records\r\n    /// @param count Return (count) records\r\n    /// @param order Order. 0 reverse order, non-0 positive order\r\n    /// @return ntoken information by page\r\n    function list(uint offset, uint count, uint order) external view returns (NTokenTag[] memory);\r\n}\r\n\r\n// File: contracts\\interface\\INToken.sol\r\n\r\n/// @dev ntoken interface\r\ninterface INToken {\r\n        \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /// @dev Mint \r\n    /// @param value The amount of NToken to add\r\n    function increaseTotal(uint256 value) external;\r\n\r\n    /// @notice The view of variables about minting \r\n    /// @dev The naming follows Nestv3.0\r\n    /// @return createBlock The block number where the contract was created\r\n    /// @return recentlyUsedBlock The block number where the last minting went\r\n    function checkBlockInfo() external view returns(uint256 createBlock, uint256 recentlyUsedBlock);\r\n\r\n    /// @dev The ABI keeps unchanged with old NTokens, so as to support token-and-ntoken-mining\r\n    /// @return The address of bidder\r\n    function checkBidder() external view returns(address);\r\n    \r\n    /// @notice The view of totalSupply\r\n    /// @return The total supply of ntoken\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /// @dev The view of balances\r\n    /// @param owner The address of an account\r\n    /// @return The balance of the account\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256); \r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: contracts\\interface\\INestMapping.sol\r\n\r\n/// @dev The interface defines methods for nest builtin contract address mapping\r\ninterface INestMapping {\r\n\r\n    /// @dev Set the built-in contract address of the system\r\n    /// @param nestTokenAddress Address of nest token contract\r\n    /// @param nestNodeAddress Address of nest node contract\r\n    /// @param nestLedgerAddress INestLedger implementation contract address\r\n    /// @param nestMiningAddress INestMining implementation contract address for nest\r\n    /// @param ntokenMiningAddress INestMining implementation contract address for ntoken\r\n    /// @param nestPriceFacadeAddress INestPriceFacade implementation contract address\r\n    /// @param nestVoteAddress INestVote implementation contract address\r\n    /// @param nestQueryAddress INestQuery implementation contract address\r\n    /// @param nnIncomeAddress NNIncome contract address\r\n    /// @param nTokenControllerAddress INTokenController implementation contract address\r\n    function setBuiltinAddress(\r\n        address nestTokenAddress,\r\n        address nestNodeAddress,\r\n        address nestLedgerAddress,\r\n        address nestMiningAddress,\r\n        address ntokenMiningAddress,\r\n        address nestPriceFacadeAddress,\r\n        address nestVoteAddress,\r\n        address nestQueryAddress,\r\n        address nnIncomeAddress,\r\n        address nTokenControllerAddress\r\n    ) external;\r\n\r\n    /// @dev Get the built-in contract address of the system\r\n    /// @return nestTokenAddress Address of nest token contract\r\n    /// @return nestNodeAddress Address of nest node contract\r\n    /// @return nestLedgerAddress INestLedger implementation contract address\r\n    /// @return nestMiningAddress INestMining implementation contract address for nest\r\n    /// @return ntokenMiningAddress INestMining implementation contract address for ntoken\r\n    /// @return nestPriceFacadeAddress INestPriceFacade implementation contract address\r\n    /// @return nestVoteAddress INestVote implementation contract address\r\n    /// @return nestQueryAddress INestQuery implementation contract address\r\n    /// @return nnIncomeAddress NNIncome contract address\r\n    /// @return nTokenControllerAddress INTokenController implementation contract address\r\n    function getBuiltinAddress() external view returns (\r\n        address nestTokenAddress,\r\n        address nestNodeAddress,\r\n        address nestLedgerAddress,\r\n        address nestMiningAddress,\r\n        address ntokenMiningAddress,\r\n        address nestPriceFacadeAddress,\r\n        address nestVoteAddress,\r\n        address nestQueryAddress,\r\n        address nnIncomeAddress,\r\n        address nTokenControllerAddress\r\n    );\r\n\r\n    /// @dev Get address of nest token contract\r\n    /// @return Address of nest token contract\r\n    function getNestTokenAddress() external view returns (address);\r\n\r\n    /// @dev Get address of nest node contract\r\n    /// @return Address of nest node contract\r\n    function getNestNodeAddress() external view returns (address);\r\n\r\n    /// @dev Get INestLedger implementation contract address\r\n    /// @return INestLedger implementation contract address\r\n    function getNestLedgerAddress() external view returns (address);\r\n\r\n    /// @dev Get INestMining implementation contract address for nest\r\n    /// @return INestMining implementation contract address for nest\r\n    function getNestMiningAddress() external view returns (address);\r\n\r\n    /// @dev Get INestMining implementation contract address for ntoken\r\n    /// @return INestMining implementation contract address for ntoken\r\n    function getNTokenMiningAddress() external view returns (address);\r\n\r\n    /// @dev Get INestPriceFacade implementation contract address\r\n    /// @return INestPriceFacade implementation contract address\r\n    function getNestPriceFacadeAddress() external view returns (address);\r\n\r\n    /// @dev Get INestVote implementation contract address\r\n    /// @return INestVote implementation contract address\r\n    function getNestVoteAddress() external view returns (address);\r\n\r\n    /// @dev Get INestQuery implementation contract address\r\n    /// @return INestQuery implementation contract address\r\n    function getNestQueryAddress() external view returns (address);\r\n\r\n    /// @dev Get NNIncome contract address\r\n    /// @return NNIncome contract address\r\n    function getNnIncomeAddress() external view returns (address);\r\n\r\n    /// @dev Get INTokenController implementation contract address\r\n    /// @return INTokenController implementation contract address\r\n    function getNTokenControllerAddress() external view returns (address);\r\n\r\n    /// @dev Registered address. The address registered here is the address accepted by nest system\r\n    /// @param key The key\r\n    /// @param addr Destination address. 0 means to delete the registration information\r\n    function registerAddress(string memory key, address addr) external;\r\n\r\n    /// @dev Get registered address\r\n    /// @param key The key\r\n    /// @return Destination address. 0 means empty\r\n    function checkAddress(string memory key) external view returns (address);\r\n}\r\n\r\n// File: contracts\\interface\\INestGovernance.sol\r\n\r\n/// @dev This interface defines the governance methods\r\ninterface INestGovernance is INestMapping {\r\n\r\n    /// @dev Set governance authority\r\n    /// @param addr Destination address\r\n    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function setGovernance(address addr, uint flag) external;\r\n\r\n    /// @dev Get governance rights\r\n    /// @param addr Destination address\r\n    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function getGovernance(address addr) external view returns (uint);\r\n\r\n    /// @dev Check whether the target address has governance rights for the given target\r\n    /// @param addr Destination address\r\n    /// @param flag Permission weight. The permission of the target address must be greater than this weight to pass the check\r\n    /// @return True indicates permission\r\n    function checkGovernance(address addr, uint flag) external view returns (bool);\r\n}\r\n\r\n// File: contracts\\interface\\INestLedger.sol\r\n\r\n/// @dev This interface defines the nest ledger methods\r\ninterface INestLedger {\r\n\r\n    /// @dev Application Flag Changed event\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    event ApplicationChanged(address addr, uint flag);\r\n    \r\n    /// @dev Configuration structure of nest ledger contract\r\n    struct Config {\r\n        \r\n        // nest reward scale(10000 based). 2000\r\n        uint16 nestRewardScale;\r\n\r\n        // // ntoken reward scale(10000 based). 8000\r\n        // uint16 ntokenRewardScale;\r\n    }\r\n    \r\n    /// @dev Modify configuration\r\n    /// @param config Configuration object\r\n    function setConfig(Config memory config) external;\r\n\r\n    /// @dev Get configuration\r\n    /// @return Configuration object\r\n    function getConfig() external view returns (Config memory);\r\n\r\n    /// @dev Set DAO application\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function setApplication(address addr, uint flag) external;\r\n\r\n    /// @dev Check DAO application flag\r\n    /// @param addr DAO application contract address\r\n    /// @return Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function checkApplication(address addr) external view returns (uint);\r\n\r\n    /// @dev Carve reward\r\n    /// @param ntokenAddress Destination ntoken address\r\n    function carveETHReward(address ntokenAddress) external payable;\r\n\r\n    /// @dev Add reward\r\n    /// @param ntokenAddress Destination ntoken address\r\n    function addETHReward(address ntokenAddress) external payable;\r\n\r\n    /// @dev The function returns eth rewards of specified ntoken\r\n    /// @param ntokenAddress The ntoken address\r\n    function totalETHRewards(address ntokenAddress) external view returns (uint);\r\n\r\n    /// @dev Pay\r\n    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to pay with\r\n    /// @param tokenAddress Token address of receiving funds (0 means ETH)\r\n    /// @param to Address to receive\r\n    /// @param value Amount to receive\r\n    function pay(address ntokenAddress, address tokenAddress, address to, uint value) external;\r\n\r\n    /// @dev Settlement\r\n    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to settle with\r\n    /// @param tokenAddress Token address of receiving funds (0 means ETH)\r\n    /// @param to Address to receive\r\n    /// @param value Amount to receive\r\n    function settle(address ntokenAddress, address tokenAddress, address to, uint value) external payable;\r\n}\r\n\r\n// File: contracts\\NestBase.sol\r\n\r\n/// @dev Base contract of nest\r\ncontract NestBase {\r\n\r\n    // Address of nest token contract\r\n    address constant NEST_TOKEN_ADDRESS = 0x04abEdA201850aC0124161F037Efd70c74ddC74C;\r\n\r\n    // Genesis block number of nest\r\n    // NEST token contract is created at block height 6913517. However, because the mining algorithm of nest1.0\r\n    // is different from that at present, a new mining algorithm is adopted from nest2.0. The new algorithm\r\n    // includes the attenuation logic according to the block. Therefore, it is necessary to trace the block\r\n    // where the nest begins to decay. According to the circulation when nest2.0 is online, the new mining\r\n    // algorithm is used to deduce and convert the nest, and the new algorithm is used to mine the nest2.0\r\n    // on-line flow, the actual block is 5120000\r\n    uint constant NEST_GENESIS_BLOCK = 5120000;\r\n\r\n    /// @dev To support open-zeppelin/upgrades\r\n    /// @param nestGovernanceAddress INestGovernance implementation contract address\r\n    function initialize(address nestGovernanceAddress) virtual public {\r\n        require(_governance == address(0), 'NEST:!initialize');\r\n        _governance = nestGovernanceAddress;\r\n    }\r\n\r\n    /// @dev INestGovernance implementation contract address\r\n    address public _governance;\r\n\r\n    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \r\n    ///      super.update(nestGovernanceAddress) when overriding, and override method without onlyGovernance\r\n    /// @param nestGovernanceAddress INestGovernance implementation contract address\r\n    function update(address nestGovernanceAddress) virtual public {\r\n\r\n        address governance = _governance;\r\n        require(governance == msg.sender || INestGovernance(governance).checkGovernance(msg.sender, 0), \"NEST:!gov\");\r\n        _governance = nestGovernanceAddress;\r\n    }\r\n\r\n    /// @dev Migrate funds from current contract to NestLedger\r\n    /// @param tokenAddress Destination token address.(0 means eth)\r\n    /// @param value Migrate amount\r\n    function migrate(address tokenAddress, uint value) external onlyGovernance {\r\n\r\n        address to = INestGovernance(_governance).getNestLedgerAddress();\r\n        if (tokenAddress == address(0)) {\r\n            INestLedger(to).addETHReward { value: value } (address(0));\r\n        } else {\r\n            TransferHelper.safeTransfer(tokenAddress, to, value);\r\n        }\r\n    }\r\n\r\n    //---------modifier------------\r\n\r\n    modifier onlyGovernance() {\r\n        require(INestGovernance(_governance).checkGovernance(msg.sender, 0), \"NEST:!gov\");\r\n        _;\r\n    }\r\n\r\n    modifier noContract() {\r\n        require(msg.sender == tx.origin, \"NEST:!contract\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts\\NToken.sol\r\n\r\n// The contract is based on Nest_NToken from Nest Protocol v3.0. Considering compatibility, the interface\r\n// keeps the same. \r\n/// @dev ntoken contract\r\ncontract NToken is NestBase, INToken {\r\n\r\n    /// @notice Constructor\r\n    /// @dev Given the address of NestPool, NToken can get other contracts by calling addrOfxxx()\r\n    /// @param _name The name of NToken\r\n    /// @param _symbol The symbol of NToken\r\n    constructor (string memory _name, string memory _symbol) {\r\n\r\n        GENESIS_BLOCK_NUMBER = block.number;\r\n        name = _name;                                                               \r\n        symbol = _symbol;\r\n        _state = block.number;\r\n    }\r\n\r\n    // INestMining implementation contract address\r\n    address _ntokenMiningAddress;\r\n    \r\n    // token information: name\r\n    string public name;\r\n\r\n    // token information: symbol\r\n    string public symbol;\r\n\r\n    // token information: decimals\r\n    uint8 constant public decimals = 18;\r\n\r\n    // token state，high 128 bits represent _totalSupply, low 128 bits represent lastestMintAtHeight\r\n    uint256 _state;\r\n    \r\n    // Balances ledger\r\n    mapping (address=>uint) private _balances;\r\n\r\n    // Approve ledger\r\n    mapping (address=>mapping(address=>uint)) private _allowed;\r\n\r\n    // ntoken genesis block number\r\n    uint256 immutable public GENESIS_BLOCK_NUMBER;\r\n\r\n    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \r\n    ///      super.update(nestGovernanceAddress) when overriding, and override method without onlyGovernance\r\n    /// @param nestGovernanceAddress INestGovernance implementation contract address\r\n    function update(address nestGovernanceAddress) override public {\r\n        super.update(nestGovernanceAddress);\r\n        _ntokenMiningAddress = INestGovernance(nestGovernanceAddress).getNTokenMiningAddress();\r\n    }\r\n\r\n    /// @dev Mint \r\n    /// @param value The amount of NToken to add\r\n    function increaseTotal(uint256 value) override public {\r\n\r\n        require(msg.sender == _ntokenMiningAddress, \"NToken:!Auth\");\r\n        \r\n        // Increases balance for target address\r\n        _balances[msg.sender] += value;\r\n\r\n        // Increases total supply\r\n        uint totalSupply_ = (_state >> 128) + value;\r\n        require(totalSupply_ < 0x100000000000000000000000000000000, \"NToken:!totalSupply\");\r\n        // Total supply and lastest mint height share one storage unit\r\n        _state = (totalSupply_ << 128) | block.number;\r\n    }\r\n        \r\n    /// @notice The view of variables about minting \r\n    /// @dev The naming follows Nestv3.0\r\n    /// @return createBlock The block number where the contract was created\r\n    /// @return recentlyUsedBlock The block number where the last minting went\r\n    function checkBlockInfo() \r\n        override public view \r\n        returns(uint256 createBlock, uint256 recentlyUsedBlock) \r\n    {\r\n        return (GENESIS_BLOCK_NUMBER, _state & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n    }\r\n\r\n    /// @dev The ABI keeps unchanged with old NTokens, so as to support token-and-ntoken-mining\r\n    /// @return The address of bidder\r\n    function checkBidder() override public view returns(address) {\r\n        return _ntokenMiningAddress;\r\n    }\r\n\r\n    /// @notice The view of totalSupply\r\n    /// @return The total supply of ntoken\r\n    function totalSupply() override public view returns (uint256) {\r\n        // The high 128 bits means total supply\r\n        return _state >> 128;\r\n    }\r\n\r\n    /// @dev The view of balances\r\n    /// @param owner The address of an account\r\n    /// @return The balance of the account\r\n    function balanceOf(address owner) override public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    function allowance(address owner, address spender) override public view returns (uint256) \r\n    {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) override public returns (bool) \r\n    {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) override public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) override public returns (bool) \r\n    {\r\n        mapping(address=>uint) storage allowed = _allowed[from];\r\n        allowed[msg.sender] -= value;\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, allowed[msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n\r\n        mapping(address=>uint) storage allowed = _allowed[msg.sender];\r\n        allowed[spender] += addedValue;\r\n        emit Approval(msg.sender, spender, allowed[spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) \r\n    {\r\n        require(spender != address(0));\r\n\r\n        mapping(address=>uint) storage allowed = _allowed[msg.sender];\r\n        allowed[spender] -= subtractedValue;\r\n        emit Approval(msg.sender, spender, allowed[spender]);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        _balances[from] -= value;\r\n        _balances[to] += value;\r\n        emit Transfer(from, to, value);\r\n    }\r\n}\r\n\r\n// File: contracts\\NTokenController.sol\r\n\r\n/// @dev NToken Controller, management for ntoken\r\ncontract NTokenController is NestBase, INTokenController {\r\n\r\n    // /// @param nestTokenAddress Address of nest token contract\r\n    // constructor(address nestTokenAddress)\r\n    // {\r\n    //     NEST_TOKEN_ADDRESS = nestTokenAddress;\r\n    // }\r\n\r\n    // Configuration\r\n    Config _config;\r\n\r\n    // ntoken information array\r\n    NTokenTag[] _nTokenTagList;\r\n\r\n    // A mapping for all ntoken\r\n    mapping(address=>uint) public _nTokenTags;\r\n\r\n    /* ========== Governance ========== */\r\n\r\n    /// @dev Modify configuration\r\n    /// @param config Configuration object\r\n    function setConfig(Config memory config) override external onlyGovernance {\r\n        require(uint(config.state) <= 1, \"NTokenController:!value\");\r\n        _config = config;\r\n    }\r\n\r\n    /// @dev Get configuration\r\n    /// @return Configuration object\r\n    function getConfig() override external view returns (Config memory) {\r\n        return _config;\r\n    }\r\n\r\n    /// @dev Set the token mapping\r\n    /// @param tokenAddress Destination token address\r\n    /// @param ntokenAddress Destination ntoken address\r\n    /// @param state status for this map\r\n    function setNTokenMapping(address tokenAddress, address ntokenAddress, uint state) override external onlyGovernance {\r\n        \r\n        uint index = _nTokenTags[tokenAddress];\r\n        if (index == 0) {\r\n\r\n            _nTokenTagList.push(NTokenTag(\r\n                // address ntokenAddress;\r\n                ntokenAddress,\r\n                // uint96 nestFee;\r\n                uint96(0),\r\n                // address tokenAddress;\r\n                tokenAddress,\r\n                // uint40 index;\r\n                uint40(_nTokenTagList.length),\r\n                // uint48 startTime;\r\n                uint48(block.timestamp),\r\n                // uint8 state;  \r\n                uint8(state)\r\n            ));\r\n            _nTokenTags[tokenAddress] = _nTokenTags[ntokenAddress] = _nTokenTagList.length;\r\n        } else {\r\n\r\n            NTokenTag memory tag = _nTokenTagList[index - 1];\r\n            tag.ntokenAddress = ntokenAddress;\r\n            tag.tokenAddress = tokenAddress;\r\n            tag.index = uint40(index - 1);\r\n            tag.startTime = uint48(block.timestamp);\r\n            tag.state = uint8(state);\r\n\r\n            _nTokenTagList[index - 1] = tag;\r\n            _nTokenTags[tokenAddress] = _nTokenTags[ntokenAddress] = index;\r\n        }\r\n    }\r\n\r\n    /// @dev Get token address from ntoken address\r\n    /// @param ntokenAddress Destination ntoken address\r\n    /// @return token address\r\n    function getTokenAddress(address ntokenAddress) override external view returns (address) {\r\n\r\n        uint index = _nTokenTags[ntokenAddress];\r\n        if (index > 0) {\r\n            return _nTokenTagList[index - 1].tokenAddress;\r\n        }\r\n        return address(0);\r\n    }\r\n\r\n    /// @dev Get ntoken address from token address\r\n    /// @param tokenAddress Destination token address\r\n    /// @return ntoken address\r\n    function getNTokenAddress(address tokenAddress) override public view returns (address) {\r\n\r\n        uint index = _nTokenTags[tokenAddress];\r\n        if (index > 0) {\r\n            return _nTokenTagList[index - 1].ntokenAddress;\r\n        }\r\n        return address(0);\r\n    }\r\n\r\n    /* ========== ntoken management ========== */\r\n    \r\n    /// @dev Bad tokens should be banned \r\n    function disable(address tokenAddress) override external onlyGovernance\r\n    {\r\n        // When tokenAddress does not exist, _nTokenTags[tokenAddress] - 1 will overflow error\r\n        _nTokenTagList[_nTokenTags[tokenAddress] - 1].state = 0;\r\n        emit NTokenDisabled(tokenAddress);\r\n    }\r\n\r\n    /// @dev enable ntoken\r\n    function enable(address tokenAddress) override external onlyGovernance\r\n    {\r\n        // When tokenAddress does not exist, _nTokenTags[tokenAddress] - 1 will overflow error\r\n        _nTokenTagList[_nTokenTags[tokenAddress] - 1].state = 1;\r\n        emit NTokenEnabled(tokenAddress);\r\n    }\r\n\r\n    /// @notice Open a NToken for a token by anyone (contracts aren't allowed)\r\n    /// @dev Create and map the (Token, NToken) pair in NestPool\r\n    /// @param tokenAddress The address of token contract\r\n    function open(address tokenAddress) override external noContract\r\n    {\r\n        Config memory config = _config;\r\n        require(config.state == 1, \"NTokenController:!state\");\r\n\r\n        // Check token mapping\r\n        require(getNTokenAddress(tokenAddress) == address(0), \"NTokenController:!exists\");\r\n\r\n        // Check token state\r\n        uint index = _nTokenTags[tokenAddress];\r\n        require(index == 0 || _nTokenTagList[index - 1].state == 0, \"NTokenController:!active\");\r\n\r\n        uint ntokenCounter = _nTokenTagList.length;\r\n\r\n        // Create ntoken contract\r\n        string memory sn = getAddressStr(ntokenCounter);\r\n        NToken ntoken = new NToken(strConcat(\"NToken\", sn), strConcat(\"N\", sn));\r\n\r\n        address governance = _governance;\r\n        ntoken.initialize(address(this));\r\n        ntoken.update(governance);\r\n\r\n        // Is token valid ?\r\n        TransferHelper.safeTransferFrom(tokenAddress, msg.sender, address(this), 1);\r\n        require(IERC20(tokenAddress).balanceOf(address(this)) >= 1, \"NTokenController:!transfer\");\r\n        TransferHelper.safeTransfer(tokenAddress, msg.sender, 1);\r\n\r\n        // Pay nest\r\n        IERC20(NEST_TOKEN_ADDRESS).transferFrom(msg.sender, governance, uint(config.openFeeNestAmount));\r\n\r\n        // TODO: Consider how to migrate the existing token information\r\n        _nTokenTags[tokenAddress] = _nTokenTags[address(ntoken)] = ntokenCounter + 1;\r\n        _nTokenTagList.push(NTokenTag(\r\n            // address ntokenAddress;\r\n            address(ntoken),\r\n            // uint96 nestFee;\r\n            config.openFeeNestAmount,\r\n            // address tokenAddress;\r\n            tokenAddress,\r\n            // uint40 index;\r\n            uint40(_nTokenTagList.length),\r\n            // uint48 startTime;\r\n            uint48(block.timestamp),\r\n            // uint8 state;  \r\n            1\r\n        ));\r\n\r\n        emit NTokenOpened(tokenAddress, address(ntoken), msg.sender);\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    /// @dev Get ntoken information\r\n    /// @param tokenAddress Destination token address\r\n    /// @return ntoken information\r\n    function getNTokenTag(address tokenAddress) override external view returns (NTokenTag memory) \r\n    {\r\n        return _nTokenTagList[_nTokenTags[tokenAddress] - 1];\r\n    }\r\n\r\n    /// @dev Get opened ntoken count\r\n    /// @return ntoken count\r\n    function getNTokenCount() override external view returns (uint) {\r\n        return _nTokenTagList.length;\r\n    }\r\n\r\n    /// @dev List ntoken information by page\r\n    /// @param offset Skip previous (offset) records\r\n    /// @param count Return (count) records\r\n    /// @param order Order. 0 reverse order, non-0 positive order\r\n    /// @return ntoken information by page\r\n    function list(uint offset, uint count, uint order) override external view returns (NTokenTag[] memory) {\r\n        \r\n        NTokenTag[] storage nTokenTagList = _nTokenTagList;\r\n        NTokenTag[] memory result = new NTokenTag[](count);\r\n        uint length = nTokenTagList.length;\r\n        uint i = 0;\r\n\r\n        // Reverse order\r\n        if (order == 0) {\r\n\r\n            uint index = length - offset;\r\n            uint end = index > count ? index - count : 0;\r\n            while (index > end) {\r\n                result[i++] = nTokenTagList[--index];\r\n            }\r\n        } \r\n        // Positive order\r\n        else {\r\n            \r\n            uint index = offset;\r\n            uint end = index + count;\r\n            if (end > length) {\r\n                end = length;\r\n            }\r\n            while (index < end) {\r\n                result[i++] = nTokenTagList[index++];\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /* ========== HELPERS ========== */\r\n\r\n    /// @dev from NESTv3.0\r\n    function strConcat(string memory _a, string memory _b) public pure returns (string memory)\r\n    {\r\n        bytes memory _ba = bytes(_a);\r\n        bytes memory _bb = bytes(_b);\r\n        string memory ret = new string(_ba.length + _bb.length);\r\n        bytes memory bret = bytes(ret);\r\n        uint k = 0;\r\n        for (uint i = 0; i < _ba.length; i++) {\r\n            bret[k++] = _ba[i];\r\n        } \r\n        for (uint i = 0; i < _bb.length; i++) {\r\n            bret[k++] = _bb[i];\r\n        } \r\n        return string(ret);\r\n    } \r\n    \r\n    /// @dev Convert number into a string, if less than 4 digits, make up 0 in front, from NestV3.0\r\n    function getAddressStr(uint256 iv) public pure returns (string memory) \r\n    {\r\n        bytes memory buf = new bytes(64);\r\n        uint256 index = 0;\r\n        do {\r\n            buf[index++] = bytes1(uint8(iv % 10 + 48));\r\n            iv /= 10;\r\n        } while (iv > 0 || index < 4);\r\n        bytes memory str = new bytes(index);\r\n        for(uint256 i = 0; i < index; ++i) {\r\n            str[i] = buf[index - i - 1];\r\n        }\r\n        return string(str);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"NTokenDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"NTokenEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ntokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NTokenOpened\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_nTokenTags\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"enable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"iv\",\"type\":\"uint256\"}],\"name\":\"getAddressStr\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint96\",\"name\":\"openFeeNestAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct INTokenController.Config\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getNTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getNTokenTag\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ntokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"nestFee\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"index\",\"type\":\"uint40\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct INTokenController.NTokenTag\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ntokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nestGovernanceAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"order\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ntokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"nestFee\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"index\",\"type\":\"uint40\"},{\"internalType\":\"uint48\",\"name\":\"startTime\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct INTokenController.NTokenTag[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint96\",\"name\":\"openFeeNestAmount\",\"type\":\"uint96\"},{\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct INTokenController.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ntokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"setNTokenMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_a\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_b\",\"type\":\"string\"}],\"name\":\"strConcat\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nestGovernanceAddress\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NTokenController","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"256","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0621adc46fb22b0cd161bd59c7425e2bf51b6cf77bd9b0b3a36b8932b38dcc47"}]}