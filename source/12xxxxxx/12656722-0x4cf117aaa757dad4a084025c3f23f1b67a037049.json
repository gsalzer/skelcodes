{"status":"1","message":"OK","result":[{"SourceCode":"\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.0/contracts/GSN/Context.sol\n\npragma solidity ^0.5.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.0/contracts/ownership/Ownable.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.0/contracts/utils/Address.sol\n\npragma solidity ^0.5.5;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following \n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.0/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.0/contracts/token/ERC20/SafeERC20.sol\n\npragma solidity ^0.5.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.0/contracts/math/SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: contracts/GrantsDAOV2.sol\n\npragma solidity ^0.5.16;\n\n\n\n\n\ncontract GrantsDAOV2 is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    uint256 public grantsCount;\n    uint256 public initiativesCount;\n    uint256 public competitionCount;\n\n    mapping(string => Grant) public grants;\n    mapping(string => Initiative) public initiatives;\n    mapping(string => Competition) public competitions;\n\n    /**\n     * @notice The enum for the possible states that a grant can be in\n     * ACTIVE - when the grant is initially created on the contract\n     * COMPLETED - when all the milestones are paid out\n     * CANCELLED - when a grant fails to reach all milestone payments\n     */\n    enum GrantState {ACTIVE, COMPLETED, CANCELLED}\n\n    /**\n     * @notice The enum for the possible states that a grant can be in\n     * OPEN - when an initiative is open for someone to take up\n     * ASSIGNED - when an initiative is assigned to someone\n     * COMPLETED -  when all the milestones are paid out\n     * CANCELLED - when a initiative fails to reach all milestone payments\n     */\n    enum InitiativeState {OPEN, ASSIGNED, COMPLETED, CANCELLED}\n\n    /**\n     * @notice The enum for the possible states that a competition can be in\n     * ACTIVE - when the competition is initially created on the contract\n     * COMPLETED - when a competition has been concluded successfully\n     * CANCELLED - when a competition fails to be completed\n     */\n    enum CompetitionState {ACTIVE, COMPLETED, CANCELLED}\n\n    /**\n     * @notice A struct representing a grant\n     */\n    struct Grant {\n        string grantHash;\n        string title;\n        string description;\n        uint256[] milestones;\n        address paymentCurrency;\n        string proposer;\n        address receivingAddress;\n        uint256 currentMilestone;\n        uint256 createdAt;\n        uint256 modifiedAt;\n        GrantState state;\n    }\n\n    /**\n     * @notice A struct representing a initiative\n     */\n    struct Initiative {\n        string initiativeHash;\n        string title;\n        string description;\n        uint256[] milestones;\n        address paymentCurrency;\n        address receivingAddress;\n        uint256 currentMilestone;\n        uint256 createdAt;\n        uint256 modifiedAt;\n        InitiativeState state;\n    }\n\n    /**\n     * @notice A struct representing a competition or hackathon bounty\n     */\n    struct Competition {\n        string competitionHash;\n        string title;\n        string description;\n        address paymentCurrency;\n        uint256 totalBounty;\n        uint256[] placeAmounts;\n        uint256 createdAt;\n        uint256 modifiedAt;\n        CompetitionState state;\n    }\n\n    /**\n     * @notice Event emitted when a new grant is created\n     */\n    event NewGrant(string indexed grantHash, string proposer, address receivingAddress);\n\n    /**\n     * @notice Event emitted when a new grant is created\n     */\n    event NewInitiative(string indexed initiativeHash);\n\n    /**\n     * @notice Event emitted when a new competition is created\n     */\n    event NewCompetition(string indexed competitionHash);\n\n    /**\n     * @notice Event emitted when an initiative is assigned\n     */\n    event InitiativeAssigned(string indexed initiativeHash, address assignee);\n\n    /**\n     * @notice Event emitted when an grant is re-assigned\n     */\n    event GrantReassigned(string indexed grantHash, address assignee);\n\n    /**\n     * @notice Event emitted when a grant milestone is paid\n     */\n    event GrantMilestoneReleased(string indexed grantHash, uint256 amount, address receiver, address paymentCurrency);\n\n    /**\n     * @notice Event emitted when an initiative milestone is paid\n     */\n    event InitiativeMilestoneReleased(\n        string indexed initiativeHash,\n        uint256 amount,\n        address receiver,\n        address paymentCurrency\n    );\n\n    /**\n     * @notice Event emitted when an grant is completed\n     */\n    event GrantCompleted(string indexed grantHash);\n\n    /**\n     * @notice Event emitted when an initiative is completed\n     */\n    event InitiativeCompleted(string indexed initiativeHash);\n\n    /**\n     * @notice Event emitted when an competition is completed\n     */\n    event CompetitionCompleted(string indexed competitionHash);\n\n    /**\n     * @notice Event emitted when an grant is cancelled\n     */\n    event GrantCancelled(string indexed grantHash, string reason);\n\n    /**\n     * @notice Event emitted when an initiative is cancelled\n     */\n    event InitiativeCancelled(string indexed initiativeHash, string reason);\n\n    /**\n     * @notice Event emitted when an competition is cancelled\n     */\n    event CompetitionCancelled(string indexed competitionHash, string reason);\n\n    /**\n     * @notice Event emitted when a withdrawal from the contract occurs\n     */\n    event Withdrawal(address indexed receiver, uint256 amount, address token);\n\n    /**\n     * @notice Contract is created by a deployer who then sets the grantsDAO multisig to be the owner\n     */\n    constructor() public {}\n\n    /**\n     * @notice Called by the owners (gDAO multisig) to create a new grant\n     * Emits NewGrant event.\n     * @param _grantHash The ipfs hash of a grant (retrieved from the snapshot proposal)\n     * @param _title The title of the grant\n     * @param _description The description of the grant\n     * @param _milestones An array specifying the number of milestones and the respective payment amounts\n     * @param _paymentCurrency An address specifying the ERC20 token to be paid in\n     * @param _proposer The identifier of the proposer\n     * @param _receivingAddress The address in which to receive the grant milestones in\n     */\n    function createGrant(\n        string memory _grantHash,\n        string memory _title,\n        string memory _description,\n        uint256[] memory _milestones,\n        address _paymentCurrency,\n        string memory _proposer,\n        address _receivingAddress\n    ) public onlyOwner() {\n        require(grants[_grantHash].createdAt == 0, \"duplicate grants hash\");\n\n        grants[_grantHash] = Grant(\n            _grantHash,\n            _title,\n            _description,\n            _milestones,\n            _paymentCurrency,\n            _proposer,\n            _receivingAddress,\n            0,\n            block.timestamp,\n            block.timestamp,\n            GrantState.ACTIVE\n        );\n\n        grantsCount += 1;\n\n        emit NewGrant(_grantHash, _proposer, _receivingAddress);\n    }\n\n    /**\n     * @notice Called by the owners (gDAO multisig) to create a new initiative\n     * Emits NewInitiative event.\n     * @param _initiativeHash The ipfs hash of an initiatve, if passed through ipfs should return the content of this initiative\n     * @param _title The title of the initiative\n     * @param _description The description of the initiative\n     * @param _milestones An array specifying the number of milestones and the respective payment amounts\n     */\n    function createInitiative(\n        string memory _initiativeHash,\n        string memory _title,\n        string memory _description,\n        uint256[] memory _milestones,\n        address _paymentCurrency\n    ) public onlyOwner() {\n        require(initiatives[_initiativeHash].createdAt == 0, \"duplicate initiatives hash\");\n\n        initiatives[_initiativeHash] = Initiative(\n            _initiativeHash,\n            _title,\n            _description,\n            _milestones,\n            _paymentCurrency,\n            address(0),\n            0,\n            block.timestamp,\n            block.timestamp,\n            InitiativeState.OPEN\n        );\n\n        initiativesCount += 1;\n\n        emit NewInitiative(_initiativeHash);\n    }\n\n    /**\n     * @notice Called by the owners (gDAO multisig) to create a new competition\n     * Emits NewCompetition event.\n     * @param _competitionHash The ipfs hash of an competition, if passed through ipfs should return the content of this initiative\n     * @param _title The title of the initiative\n     * @param _description The description of the initiative\n     * @param _paymentCurrency The currency that the bounty is to be paid in\n     * @param _totalBounty The total bounty amount allocated to this competition\n     * @param _placeAmounts The amounts rewarded for each place, where index [0,1,2] represents 1st, 2nd, 3rd place and so on\n     */\n    function createCompetition(\n        string memory _competitionHash,\n        string memory _title,\n        string memory _description,\n        address _paymentCurrency,\n        uint256 _totalBounty,\n        uint256[] memory _placeAmounts\n    ) public onlyOwner() {\n        require(competitions[_competitionHash].createdAt == 0, \"duplicate competition hash\");\n\n        competitions[_competitionHash] = Competition(\n            _competitionHash,\n            _title,\n            _description,\n            _paymentCurrency,\n            _totalBounty,\n            _placeAmounts,\n            block.timestamp,\n            block.timestamp,\n            CompetitionState.ACTIVE\n        );\n        competitionCount += 1;\n        emit NewCompetition(_competitionHash);\n    }\n\n    /**\n     * @notice Called by the owners (gDAO multisig) to assign a initiative to a payable address\n     * Emits InitiativeAssigned event.\n     * @param _hash The hash of the initiative to modify\n     * @param _assignee An address to assign the initiative to\n     */\n    function assignInitiative(string memory _hash, address _assignee) public onlyOwner() {\n        Initiative storage initiative = initiatives[_hash];\n\n        initiative.state = InitiativeState.ASSIGNED;\n\n        initiative.receivingAddress = _assignee;\n\n        emit InitiativeAssigned(_hash, _assignee);\n    }\n\n    /**\n     * @notice Called by the owners (gDAO multisig) to assign a initiative to a payable address\n     * Emits InitiativeAssigned event.\n     * @param _hash The hash of the initiative to modify\n     * @param _assignee An address to assign the initiative to\n     */\n    function reassignGrant(string memory _hash, address _assignee) public onlyOwner() {\n        grants[_hash].receivingAddress = _assignee;\n\n        emit GrantReassigned(_hash, _assignee);\n    }\n\n    /**\n     * @notice Called by the owners (gDAO multisig) to release a milestone payment on a grant\n     * Emits GrantMilestoneReleased event or GrantCompleted\n     * @param _hash The hash of the grant to release payment for\n     */\n    function progressGrant(string memory _hash) public onlyOwner() {\n        Grant storage grant = grants[_hash];\n\n        require(grant.state == GrantState.ACTIVE, \"grant is not active\");\n\n        uint256 currentMilestone = grant.currentMilestone;\n\n        // If the current milestone is the last one, mark the grant as completed\n        if (currentMilestone == grant.milestones.length - 1) {\n            grant.state = GrantState.COMPLETED;\n            emit GrantCompleted(_hash);\n        } else {\n            grant.currentMilestone += 1;\n        }\n\n        grant.modifiedAt = block.timestamp;\n\n        _transferMilestonePayment(grant.milestones[currentMilestone], grant.paymentCurrency, grant.receivingAddress);\n\n        emit GrantMilestoneReleased(\n            _hash,\n            grant.milestones[currentMilestone],\n            grant.receivingAddress,\n            grant.paymentCurrency\n        );\n    }\n\n    /**\n     * @notice Called by the owners (gDAO multisig) to release a milestone payment on an initiative\n     * Emits InitiativeMilestoneReleased event or InitiativeCompleted\n     * @param _hash The hash of the grant to release payment for\n     */\n    function progressInitiative(string memory _hash) public onlyOwner() {\n        Initiative storage initiative = initiatives[_hash];\n\n        require(initiative.state == InitiativeState.ASSIGNED, \"initiative has not been assigned\");\n\n        uint256 currentMilestone = initiative.currentMilestone;\n\n        // If the current milestone is the last one, mark the initiative as completed\n        if (currentMilestone == initiative.milestones.length - 1) {\n            initiative.state = InitiativeState.COMPLETED;\n            emit InitiativeCompleted(_hash);\n        } else {\n            initiative.currentMilestone += 1;\n        }\n\n        initiative.modifiedAt = block.timestamp;\n\n        _transferMilestonePayment(\n            initiative.milestones[currentMilestone],\n            initiative.paymentCurrency,\n            initiative.receivingAddress\n        );\n\n        emit InitiativeMilestoneReleased(\n            _hash,\n            initiative.milestones[currentMilestone],\n            initiative.receivingAddress,\n            initiative.paymentCurrency\n        );\n    }\n\n    /**\n     * @notice Called by the owners (gDAO multisig) to release all payments on an grant\n     * Emits GrantCompleted\n     * @param _hash The hash of the grant to release all payments\n     */\n    function completeGrant(string memory _hash) public onlyOwner() {\n        Grant storage grant = grants[_hash];\n\n        require(grant.state == GrantState.ACTIVE, \"grant is not active\");\n\n        uint256 currentMilestone = grant.currentMilestone;\n\n        uint256 total;\n\n        for (uint256 i = currentMilestone; i < grant.milestones.length; i++) {\n            total += grant.milestones[i];\n            emit GrantMilestoneReleased(_hash, grant.milestones[i], grant.receivingAddress, grant.paymentCurrency);\n        }\n\n        grant.currentMilestone = grant.milestones.length - 1;\n\n        grant.state = GrantState.COMPLETED;\n\n        grant.modifiedAt = block.timestamp;\n\n        _transferMilestonePayment(total, grant.paymentCurrency, grant.receivingAddress);\n\n        emit GrantCompleted(_hash);\n    }\n\n    /**\n     * @notice Called by the owners (gDAO multisig) to release a milestone payment on an initiative\n     * Emits InitiativeCompleted\n     * @param _hash The hash of the initiative to release all payments\n     */\n    function completeInitiative(string memory _hash) public onlyOwner() {\n        Initiative storage initiative = initiatives[_hash];\n\n        require(initiative.state == InitiativeState.ASSIGNED, \"initiative has not been assigned\");\n\n        uint256 currentMilestone = initiative.currentMilestone;\n\n        uint256 total;\n\n        for (uint256 i = currentMilestone; i < initiative.milestones.length; i++) {\n            total += initiative.milestones[i];\n            emit InitiativeMilestoneReleased(\n                _hash,\n                initiative.milestones[i],\n                initiative.receivingAddress,\n                initiative.paymentCurrency\n            );\n        }\n\n        initiative.currentMilestone = initiative.milestones.length - 1;\n\n        initiative.state = InitiativeState.COMPLETED;\n\n        initiative.modifiedAt = block.timestamp;\n\n        _transferMilestonePayment(total, initiative.paymentCurrency, initiative.receivingAddress);\n\n        emit InitiativeCompleted(_hash);\n    }\n\n    /**\n     * @notice Called by the owners (gDAO multisig) to pay out the places of a competition\n     * Emits CompetitionCompleted\n     * @param _hash The hash of the competition to release payments for\n     * @param _winners An array of addresses specifying the winners from (1st...Nth)\n     */\n    function completeCompetition(string memory _hash, address[] memory _winners) public onlyOwner() {\n        Competition storage competition = competitions[_hash];\n        IERC20 token = IERC20(competition.paymentCurrency);\n        require(_winners.length == competition.placeAmounts.length, \"winners length invalid\");\n        require(competition.state == CompetitionState.ACTIVE, \"competition is not active\");\n        require(token.balanceOf(address(this)) >= competition.totalBounty, \"insufficient balance\");\n\n        for (uint256 i = 0; i < competition.placeAmounts.length; i++) {\n            _transferMilestonePayment(competition.placeAmounts[i], competition.paymentCurrency, _winners[i]);\n        }\n\n        competition.state = CompetitionState.COMPLETED;\n\n        emit CompetitionCompleted(_hash);\n    }\n\n    /**\n     * @notice Called by the owners (gDAO multisig) to cancel a grant\n     * Emits GrantCancelled\n     * @param _hash The hash of the grant to cancel\n     * @param _reason The reason why the grant was cancelled\n     */\n    function cancelGrant(string memory _hash, string memory _reason) public onlyOwner() {\n        Grant storage grant = grants[_hash];\n\n        grant.state = GrantState.CANCELLED;\n\n        grant.modifiedAt = block.timestamp;\n\n        emit GrantCancelled(_hash, _reason);\n    }\n\n    /**\n     * @notice Called by the owners (gDAO multisig) to cancel a initiative\n     * Emits InitiativeCancelled\n     * @param _hash The hash of the initiative to cancel\n     * @param _reason The reason why the initiative was cancelled\n     */\n    function cancelInitiative(string memory _hash, string memory _reason) public onlyOwner() {\n        Initiative storage initiative = initiatives[_hash];\n\n        initiative.state = InitiativeState.CANCELLED;\n\n        initiative.modifiedAt = block.timestamp;\n\n        emit InitiativeCancelled(_hash, _reason);\n    }\n\n    /**\n     * @notice Called by the owners (gDAO multisig) to cancel a competition\n     * Emits CompetitionCancelled\n     * @param _hash The hash of the initiative to cancel\n     * @param _reason The reason why the initiative was cancelled\n     */\n    function cancelCompetition(string memory _hash, string memory _reason) public onlyOwner() {\n        Competition storage competition = competitions[_hash];\n\n        competition.state = CompetitionState.CANCELLED;\n\n        competition.modifiedAt = block.timestamp;\n\n        emit CompetitionCancelled(_hash, _reason);\n    }\n\n    /**\n     * @notice Called by the owners (gDAO multisig) to withdraw any ERC20 deposited in this account\n     * Emits Withdrawal\n     * @param _receiver The hash of the initiative to release all payments\n     * @param _amount The amount of specified erc20 to withdraw\n     * @param _token The hash of the initiative to release all payments\n     */\n    function withdraw(\n        address _receiver,\n        uint256 _amount,\n        address _token\n    ) public onlyOwner() {\n        IERC20 token = IERC20(_token);\n\n        require(token.balanceOf(address(this)) >= _amount, \"insufficient balance\");\n\n        token.safeTransfer(_receiver, _amount);\n\n        emit Withdrawal(_receiver, _amount, _token);\n    }\n\n    /**\n     * @notice An internal function that handles the transfer of funds from the contract to the payable address\n     * @param _milestoneAmount The amount to transfer\n     * @param _paymentCurrency The ERC20 address of token to transfer\n     * @param _receiver The address of the receiver\n     */\n    function _transferMilestonePayment(\n        uint256 _milestoneAmount,\n        address _paymentCurrency,\n        address _receiver\n    ) internal {\n        IERC20 token = IERC20(_paymentCurrency);\n\n        require(token.balanceOf(address(this)) >= _milestoneAmount, \"insufficient balance\");\n\n        token.safeTransfer(_receiver, _milestoneAmount);\n    }\n}\n","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"competitionHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"CompetitionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"competitionHash\",\"type\":\"string\"}],\"name\":\"CompetitionCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"grantHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"GrantCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"grantHash\",\"type\":\"string\"}],\"name\":\"GrantCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"grantHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentCurrency\",\"type\":\"address\"}],\"name\":\"GrantMilestoneReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"grantHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"}],\"name\":\"GrantReassigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"initiativeHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assignee\",\"type\":\"address\"}],\"name\":\"InitiativeAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"initiativeHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"InitiativeCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"initiativeHash\",\"type\":\"string\"}],\"name\":\"InitiativeCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"initiativeHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentCurrency\",\"type\":\"address\"}],\"name\":\"InitiativeMilestoneReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"competitionHash\",\"type\":\"string\"}],\"name\":\"NewCompetition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"grantHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proposer\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"}],\"name\":\"NewGrant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"initiativeHash\",\"type\":\"string\"}],\"name\":\"NewInitiative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_assignee\",\"type\":\"address\"}],\"name\":\"assignInitiative\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"cancelCompetition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"cancelGrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_reason\",\"type\":\"string\"}],\"name\":\"cancelInitiative\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"competitionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"competitions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"competitionHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalBounty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modifiedAt\",\"type\":\"uint256\"},{\"internalType\":\"enum GrantsDAOV2.CompetitionState\",\"name\":\"state\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_winners\",\"type\":\"address[]\"}],\"name\":\"completeCompetition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"completeGrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"completeInitiative\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_competitionHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalBounty\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_placeAmounts\",\"type\":\"uint256[]\"}],\"name\":\"createCompetition\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_grantHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"_milestones\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_proposer\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_receivingAddress\",\"type\":\"address\"}],\"name\":\"createGrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_initiativeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"_milestones\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_paymentCurrency\",\"type\":\"address\"}],\"name\":\"createInitiative\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"grants\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"grantHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"proposer\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentMilestone\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modifiedAt\",\"type\":\"uint256\"},{\"internalType\":\"enum GrantsDAOV2.GrantState\",\"name\":\"state\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"grantsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"initiatives\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"initiativeHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"paymentCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivingAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentMilestone\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"modifiedAt\",\"type\":\"uint256\"},{\"internalType\":\"enum GrantsDAOV2.InitiativeState\",\"name\":\"state\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initiativesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"progressGrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"progressInitiative\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_hash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_assignee\",\"type\":\"address\"}],\"name\":\"reassignGrant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GrantsDAOV2","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}