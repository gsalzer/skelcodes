{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/APYAssetAllocationRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./utils/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/IAssetAllocation.sol\\\";\\nimport \\\"./interfaces/IAssetAllocationRegistry.sol\\\";\\n\\n/**\\n * @title APY Asset Allocation Registry\\n * @author APY.Finance\\n * @notice This contract allows registration of asset allocations\\n *         expected to arise from movement of capital through\\n *         the system such as funding or execution of strategies.\\n *\\n *         Information on registered allocations, such as balances,\\n *         can then be pulled by external systems to compute the\\n *         TVL of the APY.Finance system.\\n */\\ncontract APYAssetAllocationRegistry is\\n    Ownable,\\n    IAssetAllocationRegistry,\\n    IAssetAllocation\\n{\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    address public manager;\\n\\n    EnumerableSet.Bytes32Set private _allocationIds;\\n    mapping(bytes32 => Data) private _allocationData;\\n    mapping(bytes32 => string) private _allocationSymbols;\\n    mapping(bytes32 => uint256) private _allocationDecimals;\\n\\n    event ManagerChanged(address);\\n\\n    constructor(address managerAddress) public {\\n        require(managerAddress != address(0), \\\"INVALID_MANAGER\\\");\\n        setManagerAddress(managerAddress);\\n    }\\n\\n    function setManagerAddress(address _manager) public onlyOwner {\\n        require(_manager != address(0), \\\"INVALID_MANAGER\\\");\\n        manager = _manager;\\n        emit ManagerChanged(_manager);\\n    }\\n\\n    /**\\n     * @dev Throws if non-permissioned account calls.  Access list for\\n     *      now includes only the deployer (owner) and the APY Manager.\\n     */\\n    modifier onlyPermissioned() {\\n        require(\\n            msg.sender == owner() || msg.sender == manager,\\n            \\\"PERMISSIONED_ONLY\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Registers an allocation for use with the `balanceOf` functionality.\\n     * @dev Has O(n) time complexity, where n is the total size of `data`.\\n     */\\n    function addAssetAllocation(\\n        bytes32 allocationId,\\n        Data memory data,\\n        string calldata symbol,\\n        uint256 decimals\\n    ) external override onlyPermissioned {\\n        _allocationIds.add(allocationId);\\n        _allocationData[allocationId] = data;\\n        _allocationSymbols[allocationId] = symbol;\\n        _allocationDecimals[allocationId] = decimals;\\n    }\\n\\n    /**\\n     * @notice Deregisters an allocation for use with the `balanceOf` functionality.\\n     * @dev Has O(n) time complexity, where n is the total size of allocation data.\\n     */\\n    function removeAssetAllocation(bytes32 allocationId)\\n        external\\n        override\\n        onlyPermissioned\\n    {\\n        _allocationIds.remove(allocationId);\\n        delete _allocationData[allocationId];\\n        delete _allocationSymbols[allocationId];\\n        delete _allocationDecimals[allocationId];\\n    }\\n\\n    /**\\n     * @notice Returns true/false indicating if allocation is registered.\\n     * @dev Operation is O(1) in time complexity.\\n     */\\n    function isAssetAllocationRegistered(bytes32 allocationId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _allocationIds.contains(allocationId);\\n    }\\n\\n    /**\\n     * @notice Returns the list of identifiers used by the other functions\\n     *         to pull asset info.\\n     *\\n     *         Each identifier represents a token and information on\\n     *         how it is placed within the system.\\n     *\\n     *         Note that the list has no duplicates, but a token may have\\n     *         multiplier identifiers since it may be placed in different\\n     *         parts of the system.\\n     *\\n     * @dev Identifiers are added during Account deployments.\\n     * @return List of identifiers\\n     */\\n    function getAssetAllocationIds()\\n        external\\n        view\\n        override\\n        returns (bytes32[] memory)\\n    {\\n        uint256 length = _allocationIds.length();\\n        bytes32[] memory allocationIds = new bytes32[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            allocationIds[i] = _allocationIds.at(i);\\n        }\\n        return allocationIds;\\n    }\\n\\n    /**\\n     * @notice Returns the balance represented by the identifier, i.e.\\n     *         the token balance held in a specific part of the system.\\n     * @dev The balance may be aggregated from multiple contracts holding\\n     *      the token and also may result from a series of calculations.\\n     * @param allocationId identifier for a token placed in the system\\n     * @return token balance represented by the identifer\\n     */\\n    function balanceOf(bytes32 allocationId)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        require(\\n            isAssetAllocationRegistered(allocationId),\\n            \\\"INVALID_ALLOCATION_ID\\\"\\n        );\\n        Data memory data = _allocationData[allocationId];\\n        bytes memory returnData = executeView(data);\\n\\n        uint256 _balance;\\n        assembly {\\n            _balance := mload(add(returnData, 0x20))\\n        }\\n\\n        return _balance;\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the token represented by the identifier.\\n     * @param allocationId identifier for a token placed in the system\\n     * @return the token symbol\\n     */\\n    function symbolOf(bytes32 allocationId)\\n        external\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        return _allocationSymbols[allocationId];\\n    }\\n\\n    /**\\n     * @notice Returns the decimals of the token represented by the identifier.\\n     * @param allocationId Identifier for a token placed in the system\\n     * @return The token decimals\\n     */\\n    function decimalsOf(bytes32 allocationId)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allocationDecimals[allocationId];\\n    }\\n\\n    /**\\n     * @notice Executes code to return a result from a smart contract function,\\n     *         without modifying the internal state of the contract.\\n     * @dev The execution is via static call, meaning no state changes can arise.\\n     * @param data a struct holding the target and data of the static call\\n     * See IAssetAllocationRegistry.Data.\\n     */\\n    function executeView(Data memory data)\\n        public\\n        view\\n        returns (bytes memory returnData)\\n    {\\n        returnData = _staticcall(data.target, data.data);\\n    }\\n\\n    function _staticcall(address target, bytes memory data)\\n        private\\n        view\\n        returns (bytes memory)\\n    {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(\\\"STATIC_CALL_FAILED\\\");\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.11;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\n\\n/* solhint-disable */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAssetAllocation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\n\\n/**\\n * @title Interface to access APY.Finance's asset allocation\\n * @author APY.Finance\\n * @notice These functions enable Chainlink to pull necessary info\\n *         to compute the TVL of the APY.Finance system.\\n */\\ninterface IAssetAllocation {\\n    /**\\n     * @notice Returns the list of identifiers used by the other functions\\n     *         to pull asset info.\\n     *\\n     *         Each identifier represents a token and information on\\n     *         how it is placed within the system.\\n     *\\n     *         Note that the list has no duplicates, but a token may have\\n     *         multiplier identifiers since it may be placed in different\\n     *         parts of the system.\\n     *\\n     * @dev Identifiers are added during Account deployments.\\n     * @return List of identifiers\\n     */\\n    function getAssetAllocationIds() external view returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Returns the balance represented by the identifier, i.e.\\n     *         the token balance held in a specific part of the system.\\n     * @dev The balance may be aggregated from multiple contracts holding\\n     *      the token and also may result from a series of calculations.\\n     * @param allocationId Identifier for a token placed in the system\\n     * @return Token balance represented by the identifer\\n     */\\n    function balanceOf(bytes32 allocationId) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the symbol of the token represented by the identifier.\\n     * @param allocationId Identifier for a token placed in the system\\n     * @return The token symbol\\n     */\\n    function symbolOf(bytes32 allocationId)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @notice Returns the decimals of the token represented by the identifier.\\n     * @param allocationId Identifier for a token placed in the system\\n     * @return The token decimals\\n     */\\n    function decimalsOf(bytes32 allocationId) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAssetAllocationRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.11;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title Interface for addition and removal of asset allocations\\n          for account deployments\\n * @author APY.Finance\\n * @notice These functions enable external systems to pull necessary info\\n *         to compute the TVL of the APY.Finance system.\\n */\\ninterface IAssetAllocationRegistry {\\n    // struct representing an execution against a contract given bytes\\n    // target is the garget contract to execute view calls agaisnt\\n    // bytes data represents the encoded function signature + parameters\\n    struct Data {\\n        address target;\\n        bytes data;\\n    }\\n\\n    struct AssetAllocation {\\n        bytes32 sequenceId;\\n        string symbol;\\n        uint256 decimals;\\n        Data data;\\n    }\\n\\n    function addAssetAllocation(\\n        bytes32 allocationId,\\n        Data calldata data,\\n        string calldata symbol,\\n        uint256 decimals\\n    ) external;\\n\\n    function removeAssetAllocation(bytes32 allocationId) external;\\n\\n    function isAssetAllocationRegistered(bytes32 allocationId)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"managerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"allocationId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAssetAllocationRegistry.Data\",\"name\":\"data\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"addAssetAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"allocationId\",\"type\":\"bytes32\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"allocationId\",\"type\":\"bytes32\"}],\"name\":\"decimalsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IAssetAllocationRegistry.Data\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"executeView\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetAllocationIds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"allocationId\",\"type\":\"bytes32\"}],\"name\":\"isAssetAllocationRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"allocationId\",\"type\":\"bytes32\"}],\"name\":\"removeAssetAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManagerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"allocationId\",\"type\":\"bytes32\"}],\"name\":\"symbolOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"APYAssetAllocationRegistry","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000cafecafecafecafecafecafecafecafecafecafe","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}