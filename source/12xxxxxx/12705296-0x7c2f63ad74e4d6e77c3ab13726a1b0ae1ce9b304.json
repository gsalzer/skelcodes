{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/private/var/www/nft/contracts/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Constants {\\n    bytes32 constant ROLE_OWNER = keccak256(bytes(\\\"ROLE_OWNER\\\"));\\n    bytes32 constant ROLE_CREATOR = keccak256(bytes(\\\"ROLE_CREATOR\\\"));\\n    bytes32 constant _DOMAIN_SEPARATOR = keccak256(abi.encode(\\n        keccak256(\\\"EIP712Domain(string name,string version)\\\"),\\n        keccak256(\\\"LiveArt\\\"),\\n        keccak256(\\\"1\\\")\\n    ));\\n}\"\r\n    },\r\n    \"/private/var/www/nft/contracts/Exchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"./Structs.sol\\\";\\nimport \\\"./IERC755.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\ncontract Exchange is Initializable, Context {\\n    using AddressUpgradeable for address;\\n\\n    struct TokenByNowDeal {\\n        uint256 tokenId;\\n        uint256 price;\\n        Structs.Policy[] rights;\\n    }\\n    struct TokenAuction {\\n        uint256 id;\\n        uint256 tokenId;\\n\\n        uint256 highestBid;\\n        address highestBidder;\\n\\n        uint256 initialPrice;\\n        Structs.Policy[] rights;\\n        uint256 endTime;\\n        uint256 maxDuration;\\n    }\\n\\n    event TokenRightsListed(\\n        uint256 tokenId,\\n        uint256 price,\\n        Structs.Policy[] rights,\\n        uint256 timestamp\\n    );\\n    event TokenRightsSold(\\n        uint256 tokenId,\\n        uint256 price,\\n        Structs.Policy[] rights,\\n        address from,\\n        address to,\\n        uint256 timestamp\\n    );\\n    event TokenAuctionStarted(\\n        uint256 id,\\n        uint256 tokenId,\\n        uint256 initialPrice,\\n        Structs.Policy[] rights,\\n        uint256 endTime,\\n        uint256 timestamp\\n    );\\n    event BidPlaced(\\n        uint256 tokenId,\\n        uint256 auctionId,\\n        address bidder,\\n        uint256 price,\\n        uint256 timestamp\\n    );\\n\\n    IERC755 private _tokenContract;\\n    address private _owner;\\n    uint256 private _marketFee;\\n    address private _marketWallet;\\n\\n    mapping(uint256 => TokenByNowDeal[]) private _buyNowTokenDeals;\\n\\n    mapping(uint256 => TokenAuction[]) private _tokenAuctions;\\n\\n    mapping(uint256 => bool) private _signedTimestamp;\\n\\n    uint256 private constant _MAX_AUCTION_DURATION = 100 days;\\n    uint256 private constant _EXTENSION_DURATION = 15 minutes;\\n\\n    mapping(uint256 => uint256) private _auctionIdByToken;\\n\\n    function initialize(\\n        IERC755 tokenContract,\\n        uint256 marketFee,\\n        address marketWallet\\n    ) external initializer {\\n        require(\\n            marketWallet != address(0),\\n            \\\"invalid market address\\\"\\n        );\\n        require(\\n            address(tokenContract) != address(0),\\n            \\\"invalid token contract\\\"\\n        );\\n\\n        _tokenContract = tokenContract;\\n        _owner = _msgSender();\\n\\n        _marketFee = marketFee;\\n        _marketWallet = marketWallet;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            _owner == _msgSender(),\\n            \\\"caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function _requireMessageSigned(\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v,\\n        uint256 timestamp\\n    ) private {\\n        require(\\n            !_signedTimestamp[timestamp],\\n            \\\"timestamp already signed\\\"\\n        );\\n        require(\\n            _msgSender() == ecrecover(\\n            keccak256(abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                Constants._DOMAIN_SEPARATOR,\\n                keccak256(abi.encode(\\n                    keccak256(\\\"BasicOperation(uint256 timestamp)\\\"),\\n                    timestamp\\n                ))\\n            )),\\n            v,\\n            r,\\n            s\\n        ),\\n            \\\"invalid sig\\\"\\n        );\\n\\n        _signedTimestamp[timestamp] = true;\\n    }\\n\\n    function _requireCanSellTokenRights(\\n        Structs.Policy[] memory sellRights,\\n        uint256 tokenId,\\n        address seller\\n    ) internal view {\\n        if (_msgSender() != seller) {\\n            require(\\n                _tokenContract.isApprovedForAll(seller, _msgSender()) ||\\n                _tokenContract.getApproved(\\n                    seller,\\n                    tokenId\\n                ) == _msgSender(),\\n                \\\"not approved nor operator\\\"\\n            );\\n        }\\n\\n        require(\\n            _tokenContract.rightsOwned(\\n                seller,\\n                sellRights,\\n                tokenId\\n            ),\\n            \\\"rights not owned by seller\\\"\\n        );\\n    }\\n\\n    function getTokenBuyNowDeals(\\n        uint256 tokenId\\n    ) external view returns (TokenByNowDeal[] memory) {\\n        return _buyNowTokenDeals[tokenId];\\n    }\\n\\n    function _requireTokenIsApprovedForExchange(\\n        address seller,\\n        uint256 tokenId\\n    ) internal view {\\n        require(\\n            _tokenContract.getApproved(seller, tokenId) == address(this),\\n            \\\"exchange is not approved for the token by seller\\\"\\n        );\\n    }\\n\\n    function setBuyNowPrice(\\n        Structs.Policy[] memory sellRights,\\n        uint256 tokenId,\\n        address seller,\\n        uint256 price,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v,\\n        uint256 timestamp\\n    ) external {\\n        _requireMessageSigned(r, s, v, timestamp);\\n        _requireCanSellTokenRights(sellRights, tokenId, seller);\\n        require(price > 0, \\\"price <= 0\\\");\\n\\n        _requireTokenIsApprovedForExchange(seller, tokenId);\\n\\n        TokenByNowDeal storage deal = _buyNowTokenDeals[tokenId].push();\\n        deal.tokenId = tokenId;\\n        deal.price = price;\\n        for (uint256 i = 0; i < sellRights.length; i++) {\\n            _requireRightIsNotOnSale(tokenId, sellRights[i]);\\n            deal.rights.push(sellRights[i]);\\n        }\\n        require(\\n            _buyNowTokenDeals[tokenId][_buyNowTokenDeals[tokenId].length - 1].rights.length > 0,\\n            \\\"no rights added to the deal\\\"\\n        );\\n\\n        emit TokenRightsListed(\\n            tokenId,\\n            price,\\n            sellRights,\\n            block.timestamp\\n        );\\n    }\\n\\n    function _requireRightIsNotOnSale(\\n        uint256 tokenId,\\n        Structs.Policy memory right\\n    ) internal view {\\n        for (uint256 i = 0; i < _buyNowTokenDeals[tokenId].length; i++) {\\n            Structs.Policy[] memory dealRights = _buyNowTokenDeals[tokenId][i].rights;\\n            for (uint256 j = 0; j < dealRights.length; j++) {\\n                if (\\n                    compareStrings(dealRights[j].action, right.action) &&\\n                    dealRights[j].permission.wallet == right.permission.wallet\\n                ) {\\n                    revert(\\\"right is already listed for sale\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function _rightsEqual(\\n        Structs.Policy[] memory bundle1,\\n        Structs.Policy[] memory bundle2\\n    ) internal pure returns (bool) {\\n        if (bundle1.length != bundle2.length) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < bundle1.length; i++) {\\n            bool foundRight = false;\\n            for (uint256 j = 0; j < bundle2.length; j++) {\\n                if (\\n                    compareStrings(bundle1[i].action, bundle2[j].action) &&\\n                    bundle1[i].permission.wallet == bundle2[j].permission.wallet\\n                ) {\\n                    foundRight = true;\\n                }\\n            }\\n            if (!foundRight) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function removeBuyNowPrice(\\n        uint256 tokenId,\\n        uint256 price,\\n        Structs.Policy[] memory sellRights,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v,\\n        uint256 timestamp\\n    ) external {\\n        _requireMessageSigned(r, s, v, timestamp);\\n        _removeBuyNowPrice(\\n            tokenId,\\n            price,\\n            sellRights\\n        );\\n    }\\n\\n    function _removeBuyNowPrice(\\n        uint256 tokenId,\\n        uint256 price,\\n        Structs.Policy[] memory sellRights\\n    ) private {\\n        for (uint256 i = 0; i < _buyNowTokenDeals[tokenId].length; i++) {\\n            if (_buyNowTokenDeals[tokenId][i].price == price) {\\n                if (_rightsEqual(_buyNowTokenDeals[tokenId][i].rights, sellRights)) {\\n                    if (i == _buyNowTokenDeals[tokenId].length - 1) {\\n                        _buyNowTokenDeals[tokenId].pop();\\n                    } else {\\n                        for (uint256 j = i; j < _buyNowTokenDeals[tokenId].length - 1; j++) {\\n                            _buyNowTokenDeals[tokenId][j] = _buyNowTokenDeals[tokenId][j + 1];\\n                        }\\n                        _buyNowTokenDeals[tokenId].pop();\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _findTokenDealRights(\\n        uint256 tokenId,\\n        Structs.Policy[] memory sellRights,\\n        uint256 price\\n    ) internal view returns (Structs.Policy[] memory) {\\n        for (uint256 i = 0; i < _buyNowTokenDeals[tokenId].length; i++) {\\n            if (_buyNowTokenDeals[tokenId][i].price == price) {\\n                if (\\n                    _rightsEqual(\\n                        _buyNowTokenDeals[tokenId][i].rights,\\n                        sellRights\\n                    )\\n                ) {\\n                    return _buyNowTokenDeals[tokenId][i].rights;\\n                }\\n            }\\n        }\\n        Structs.Policy[] memory emptyRights = new Structs.Policy[](0);\\n        return emptyRights;\\n    }\\n\\n    function _calculatePercentage(\\n        uint256 number,\\n        uint256 percentage\\n    ) private pure returns (uint256) {\\n        // https://ethereum.stackexchange.com/a/55702\\n        // https://www.investopedia.com/terms/b/basispoint.asp\\n        return number * percentage / 10000;\\n    }\\n\\n    function _findAuctionByRights(\\n        uint256 tokenId,\\n        Structs.Policy[] memory sellRights\\n    ) internal view returns (TokenAuction memory) {\\n        for (uint256 i = 0; i < _tokenAuctions[tokenId].length; i++) {\\n            if (\\n                _rightsEqual(\\n                    _tokenAuctions[tokenId][i].rights,\\n                    sellRights\\n                )\\n            ) {\\n                return _tokenAuctions[tokenId][i];\\n            }\\n        }\\n        return TokenAuction(0, 0, 0, address(0), 0, new Structs.Policy[](0), 0, 0);\\n    }\\n\\n    function _payMarketFee(\\n        uint256 price\\n    ) internal returns (uint256) {\\n        uint256 marketFee = _calculatePercentage(price, _marketFee);\\n        AddressUpgradeable.sendValue(\\n            payable(_marketWallet),\\n            marketFee\\n        );\\n\\n        return price - marketFee;\\n    }\\n\\n    function buyNow(\\n        uint256 tokenId,\\n        Structs.Policy[] memory sellRights,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v,\\n        uint256 timestamp\\n    ) external payable {\\n        _requireMessageSigned(r, s, v, timestamp);\\n        uint256 price = msg.value;\\n\\n        Structs.Policy[] memory buyRights = _findTokenDealRights(\\n            tokenId,\\n            sellRights,\\n            price\\n        );\\n        require(\\n            buyRights.length > 0,\\n            \\\"no deals for this price and rights\\\"\\n        );\\n\\n        uint256 priceAfterMarketFee = _payMarketFee(price);\\n        _tokenContract.payForTransfer{value: priceAfterMarketFee}(\\n            buyRights[0].permission.wallet,\\n            _msgSender(),\\n            tokenId,\\n            buyRights\\n        );\\n        _tokenContract.safeTransferFrom(\\n            buyRights[0].permission.wallet,\\n            _msgSender(),\\n            tokenId,\\n            buyRights,\\n            \\\"\\\"\\n        );\\n\\n        _removeBuyNowPrice(tokenId, price, buyRights);\\n\\n        TokenAuction memory auctionWithRights = _findAuctionByRights(\\n            tokenId,\\n            buyRights\\n        );\\n        if (auctionWithRights.id > 0) {\\n            _cancelAuction(\\n                tokenId,\\n                auctionWithRights.id\\n            );\\n        }\\n\\n        emit TokenRightsSold(\\n            tokenId,\\n            price,\\n            buyRights,\\n            buyRights[0].permission.wallet,\\n            _msgSender(),\\n            block.timestamp\\n        );\\n    }\\n\\n    function _requireRightIsNotOnAuction(\\n        uint256 tokenId,\\n        Structs.Policy memory right\\n    ) internal view {\\n        for (uint256 i = 0; i < _tokenAuctions[tokenId].length; i++) {\\n            Structs.Policy[] memory auctionRights = _tokenAuctions[tokenId][i].rights;\\n            for (uint256 j = 0; j < auctionRights.length; j++) {\\n                if (\\n                    compareStrings(auctionRights[j].action, right.action) &&\\n                    auctionRights[j].permission.wallet == right.permission.wallet\\n                ) {\\n                    revert(\\\"right is already on another auction\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function getTokenAuctions(\\n        uint256 tokenId\\n    ) external view returns (TokenAuction[] memory)  {\\n        return _tokenAuctions[tokenId];\\n    }\\n\\n    function startAuction(\\n        Structs.Policy[] memory sellRights,\\n        uint256 startPrice,\\n        uint256 auctionEndTime,\\n        uint256 tokenId,\\n        address seller,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v,\\n        uint256 timestamp\\n    ) external {\\n        _requireMessageSigned(r, s, v, timestamp);\\n        _requireCanSellTokenRights(sellRights, tokenId, seller);\\n        require(startPrice > 0, \\\"initial price should be positive\\\");\\n\\n        _requireTokenIsApprovedForExchange(seller, tokenId);\\n        require(\\n            _numDigits(block.timestamp) == _numDigits(auctionEndTime),\\n            \\\"incorrect timestamp\\\"\\n        );\\n        require(block.timestamp < auctionEndTime, \\\"can't start auction in past\\\");\\n\\n        TokenAuction storage auction = _tokenAuctions[tokenId].push();\\n        auction.id = ++_auctionIdByToken[tokenId];\\n        auction.tokenId = tokenId;\\n        auction.initialPrice = startPrice;\\n        auction.endTime = auctionEndTime;\\n        auction.maxDuration = block.timestamp + _MAX_AUCTION_DURATION;\\n        for (uint256 i = 0; i < sellRights.length; i++) {\\n            _requireRightIsNotOnAuction(tokenId, sellRights[i]);\\n            auction.rights.push(sellRights[i]);\\n        }\\n\\n        emit TokenAuctionStarted(\\n            auction.id,\\n            auction.tokenId,\\n            startPrice,\\n            sellRights,\\n            auctionEndTime,\\n            block.timestamp\\n        );\\n    }\\n\\n    function _deleteAuction(\\n        uint256 tokenId,\\n        uint256 auctionIndex\\n    ) internal {\\n        uint256 i = auctionIndex;\\n\\n        if (i == _tokenAuctions[tokenId].length - 1) {\\n            _tokenAuctions[tokenId].pop();\\n        } else {\\n            for (uint256 j = i; j < _tokenAuctions[tokenId].length - 1; j++) {\\n                _tokenAuctions[tokenId][j] = _tokenAuctions[tokenId][j + 1];\\n            }\\n            _tokenAuctions[tokenId].pop();\\n        }\\n    }\\n\\n    function cancelAuction(\\n        uint256 tokenId,\\n        uint256 auctionId,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v,\\n        uint256 timestamp\\n    ) external {\\n        _requireMessageSigned(r, s, v, timestamp);\\n        _cancelAuction(\\n            tokenId,\\n            auctionId\\n        );\\n    }\\n\\n    function _cancelAuction(\\n        uint256 tokenId,\\n        uint256 auctionId\\n    ) private {\\n        for (uint256 i = 0; i < _tokenAuctions[tokenId].length; i++) {\\n            if (_tokenAuctions[tokenId][i].id == auctionId) {\\n                TokenAuction memory auction = _tokenAuctions[tokenId][i];\\n                if (\\n                    auction.highestBid > 0 &&\\n                    auction.highestBidder != address(0)\\n                ) {\\n                    // withdraw bid\\n                    AddressUpgradeable.sendValue(\\n                        payable(auction.highestBidder),\\n                        auction.highestBid\\n                    );\\n                }\\n\\n                _deleteAuction(tokenId, i);\\n            }\\n        }\\n    }\\n\\n    function _findTokenDealByRights(\\n        uint256 tokenId,\\n        Structs.Policy[] memory sellRights\\n    ) internal view returns (TokenByNowDeal memory) {\\n        for (uint256 i = 0; i < _buyNowTokenDeals[tokenId].length; i++) {\\n            if (\\n                _rightsEqual(\\n                    _buyNowTokenDeals[tokenId][i].rights,\\n                    sellRights\\n                )\\n            ) {\\n                return _buyNowTokenDeals[tokenId][i];\\n            }\\n        }\\n        return TokenByNowDeal(0, 0, new Structs.Policy[](0));\\n    }\\n\\n    function bid(\\n        uint256 tokenId,\\n        uint256 auctionId,\\n        bytes32 r,\\n        bytes32 s,\\n        uint8 v,\\n        uint256 timestamp\\n    ) external payable {\\n        _requireMessageSigned(r, s, v, timestamp);\\n        uint256 bidPrice = msg.value;\\n        require(bidPrice > 0, \\\"bid should be positive\\\");\\n\\n        bool auctionExists = false;\\n        for (uint256 i = 0; i < _tokenAuctions[tokenId].length; i++) {\\n            if (_tokenAuctions[tokenId][i].id == auctionId) {\\n                TokenAuction memory auction = _tokenAuctions[tokenId][i];\\n\\n                require(\\n                    block.timestamp < auction.endTime,\\n                    \\\"can't bid on closed auction\\\"\\n                );\\n                require(\\n                    bidPrice > auction.highestBid &&\\n                    bidPrice > auction.initialPrice,\\n                    \\\"bid should be higher than initial price & highest bid\\\"\\n                );\\n\\n                if (auction.highestBid > 0) {\\n                    // return previous bid\\n                    AddressUpgradeable.sendValue(\\n                        payable(auction.highestBidder),\\n                        auction.highestBid\\n                    );\\n                }\\n\\n                TokenByNowDeal memory dealWithRights = _findTokenDealByRights(\\n                    tokenId,\\n                    auction.rights\\n                );\\n                if (\\n                    dealWithRights.price > 0 &&\\n                    bidPrice >= _calculatePercentage(dealWithRights.price, 50 * 100)\\n                ) {\\n                    _removeBuyNowPrice(\\n                        tokenId,\\n                        dealWithRights.price,\\n                        dealWithRights.rights\\n                    );\\n                }\\n\\n                _tokenAuctions[tokenId][i].highestBid = bidPrice;\\n                _tokenAuctions[tokenId][i].highestBidder = _msgSender();\\n\\n                if ((auction.endTime - block.timestamp) <= _EXTENSION_DURATION) {\\n                    if ((auction.endTime + _EXTENSION_DURATION) < auction.maxDuration) {\\n                        _tokenAuctions[tokenId][i].endTime += _EXTENSION_DURATION;\\n                    }\\n                }\\n\\n                emit BidPlaced(\\n                    tokenId,\\n                    auction.id,\\n                    _msgSender(),\\n                    bidPrice,\\n                    block.timestamp\\n                );\\n\\n                auctionExists = true;\\n            }\\n        }\\n        require(auctionExists, \\\"no auction to bid\\\");\\n    }\\n\\n    function _numDigits(uint256 number) internal pure returns (uint8) {\\n        uint8 digits = 0;\\n        while (number != 0) {\\n            number /= 10;\\n            digits++;\\n        }\\n        return digits;\\n    }\\n\\n    function endAuction(\\n        uint256 tokenId,\\n        uint256 auctionId\\n    ) external {\\n        bool auctionExists = false;\\n        for (uint256 i = 0; i < _tokenAuctions[tokenId].length; i++) {\\n            if (_tokenAuctions[tokenId][i].id == auctionId) {\\n                TokenAuction memory auction = _tokenAuctions[tokenId][i];\\n\\n                require(\\n                    block.timestamp >= auction.endTime,\\n                    \\\"auction is not ended\\\"\\n                );\\n\\n                if (auction.highestBid > 0) {\\n                    TokenByNowDeal memory dealWithRights = _findTokenDealByRights(\\n                        tokenId,\\n                        auction.rights\\n                    );\\n                    if (dealWithRights.rights.length > 0) {\\n                        _removeBuyNowPrice(\\n                            tokenId,\\n                            dealWithRights.price,\\n                            dealWithRights.rights\\n                        );\\n                    }\\n\\n                    uint256 priceAfterMarketFee = _payMarketFee(auction.highestBid);\\n                    _tokenContract.payForTransfer{value: priceAfterMarketFee}(\\n                        auction.rights[0].permission.wallet,\\n                        auction.highestBidder,\\n                        tokenId,\\n                        auction.rights\\n                    );\\n                    _tokenContract.safeTransferFrom(\\n                        auction.rights[0].permission.wallet,\\n                        auction.highestBidder,\\n                        tokenId,\\n                        auction.rights,\\n                        \\\"\\\"\\n                    );\\n\\n                    emit TokenRightsSold(\\n                        tokenId,\\n                        auction.highestBid,\\n                        auction.rights,\\n                        auction.rights[0].permission.wallet,\\n                        auction.highestBidder,\\n                        block.timestamp\\n                    );\\n                }\\n\\n                _deleteAuction(tokenId, i);\\n\\n                auctionExists = true;\\n            }\\n        }\\n        require(auctionExists, \\\"no auction to end\\\");\\n    }\\n\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    function version() external virtual pure returns (uint256) {\\n        return 1;\\n    }\\n}\"\r\n    },\r\n    \"/private/var/www/nft/contracts/IERC755.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./Structs.sol\\\";\\n\\ninterface IERC755 is IERC165 {\\n    event PaymentReceived(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount,\\n        Structs.Policy[] transferRights,\\n        uint256 timestamp\\n    );\\n    event ArtworkCreated(\\n        uint256 tokenId,\\n        Structs.Policy[] creationRights,\\n        string tokenURI,\\n        uint256 editionOf,\\n        uint256 maxTokenSupply,\\n        uint256 timestamp\\n    );\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId,\\n        Structs.Policy[] rights,\\n        uint256 timestamp\\n    );\\n\\n    event Approval(\\n        address indexed approver,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n    event ApprovalForAll(\\n        address indexed approver,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        Structs.Policy[] memory policies,\\n        bytes calldata data\\n    ) external payable;\\n\\n    function payForTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        Structs.Policy[] memory policies\\n    ) external payable;\\n\\n    function approve(\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    function getApproved(\\n        address from,\\n        uint256 tokenId\\n    ) external view returns (address);\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    function editions(uint256 tokenId) external view returns (uint256[] memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function tokenSupply(uint256 tokenId) external view returns (uint256);\\n\\n    function rights(uint256 tokenId) external view returns (Structs.Policy[] memory);\\n\\n    function supportedActions() external view returns (string[] memory);\\n\\n    function rightsOwned(\\n        address owner,\\n        Structs.Policy[] memory policies,\\n        uint256 tokenId\\n    ) external view returns (bool);\\n}\"\r\n    },\r\n    \"/private/var/www/nft/contracts/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Structs {\\n    struct RoyaltyReceiver {\\n        address payable wallet;\\n        string role;\\n        uint256 percentage;\\n        uint256 resalePercentage;\\n        uint256 CAPPS;\\n        uint256 fixedCut;\\n    }\\n\\n    struct Party {\\n        string role;\\n        address wallet;\\n    }\\n\\n    struct Policy {\\n        string action;\\n        uint256 target;\\n        Party permission;\\n    }\\n\\n    struct SupportedAction {\\n        string action;\\n        string group;\\n    }\\n\\n    struct BasicOperation {\\n        string operation;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"internalType\":\"struct Structs.Party\",\"name\":\"permission\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structs.Policy[]\",\"name\":\"rights\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenAuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"internalType\":\"struct Structs.Party\",\"name\":\"permission\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structs.Policy[]\",\"name\":\"rights\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenRightsListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"internalType\":\"struct Structs.Party\",\"name\":\"permission\",\"type\":\"tuple\"}],\"indexed\":false,\"internalType\":\"struct Structs.Policy[]\",\"name\":\"rights\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenRightsSold\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"internalType\":\"struct Structs.Party\",\"name\":\"permission\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.Policy[]\",\"name\":\"sellRights\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"buyNow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenAuctions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"internalType\":\"struct Structs.Party\",\"name\":\"permission\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.Policy[]\",\"name\":\"rights\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Exchange.TokenAuction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenBuyNowDeals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"internalType\":\"struct Structs.Party\",\"name\":\"permission\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.Policy[]\",\"name\":\"rights\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Exchange.TokenByNowDeal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC755\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"marketWallet\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"internalType\":\"struct Structs.Party\",\"name\":\"permission\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.Policy[]\",\"name\":\"sellRights\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"removeBuyNowPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"internalType\":\"struct Structs.Party\",\"name\":\"permission\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.Policy[]\",\"name\":\"sellRights\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setBuyNowPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"internalType\":\"struct Structs.Party\",\"name\":\"permission\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.Policy[]\",\"name\":\"sellRights\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"startAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Exchange","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}