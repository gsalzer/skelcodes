{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.4.1 https://hardhat.org\r\n\r\n// File interfaces/badger/ISett.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0 <0.8.0;\r\n\r\ninterface ISett {\r\n    function token() external view returns (address);\r\n\r\n    function keeper() external view returns (address);\r\n\r\n    function deposit(uint256) external;\r\n\r\n    function depositFor(address, uint256) external;\r\n\r\n    function depositAll() external;\r\n\r\n    function withdraw(uint256) external;\r\n\r\n    function withdrawAll() external;\r\n\r\n    function earn() external;\r\n\r\n    function balance() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function claimInsurance() external; // NOTE: Only yDelegatedVault implements this\r\n\r\n    function getPricePerFullShare() external view returns (uint256);\r\n}\r\n\r\n\r\n// File interfaces/badger/IStrategy.sol\r\n\r\n\r\n\r\n\r\npragma solidity >=0.5.0 <0.8.0;\r\n\r\ninterface IStrategy {\r\n    function want() external view returns (address);\r\n\r\n    function deposit() external;\r\n\r\n    // NOTE: must exclude any tokens used in the yield\r\n    // Controller role - withdraw should return to Controller\r\n    function withdrawOther(address) external returns (uint256 balance);\r\n\r\n    // Controller | Vault role - withdraw should always return to Vault\r\n    function withdraw(uint256) external;\r\n\r\n    // Controller | Vault role - withdraw should always return to Vault\r\n    function withdrawAll() external returns (uint256);\r\n\r\n    function balanceOf() external view returns (uint256);\r\n    function balanceOfPool() external view returns (uint256);\r\n    function balanceOfWant() external view returns (uint256);\r\n\r\n    function getName() external pure returns (string memory);\r\n\r\n    function setStrategist(address _strategist) external;\r\n\r\n    function setWithdrawalFee(uint256 _withdrawalFee) external;\r\n\r\n    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist) external;\r\n\r\n    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance) external;\r\n\r\n    function setGovernance(address _governance) external;\r\n\r\n    function setController(address _controller) external;\r\n\r\n    function controller() external returns (address);\r\n\r\n    function governance() external returns (address);\r\n\r\n    function tend() external;\r\n\r\n    function harvest() external;\r\n}\r\n\r\n\r\n// File interfaces/badger/IController.sol\r\n\r\n\r\npragma solidity >=0.5.0 <0.8.0;\r\n\r\ninterface IController {\r\n    function withdraw(address, uint256) external;\r\n\r\n    function withdrawAll(address) external;\r\n\r\n    function strategies(address) external view returns (address);\r\n\r\n    function approvedStrategies(address, address) external view returns (address);\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function earn(address, uint256) external;\r\n\r\n    function approveStrategy(address, address) external;\r\n\r\n    function setStrategy(address, address) external;\r\n\r\n    function setVault(address, address) external;\r\n\r\n    function want(address) external view returns (address);\r\n\r\n    function rewards() external view returns (address);\r\n\r\n    function vaults(address) external view returns (address);\r\n}\r\n\r\n\r\n// File interfaces/convex/IBaseRewardsPool.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IBaseRewardsPool {\r\n    //balance\r\n    function balanceOf(address _account) external view returns (uint256);\r\n\r\n    //withdraw to a convex tokenized deposit\r\n    function withdraw(uint256 _amount, bool _claim) external returns (bool);\r\n\r\n    //withdraw directly to curve LP token\r\n    function withdrawAndUnwrap(uint256 _amount, bool _claim) external returns (bool);\r\n\r\n    //claim rewards\r\n    function getReward() external returns (bool);\r\n\r\n    //stake a convex tokenized deposit\r\n    function stake(uint256 _amount) external returns (bool);\r\n\r\n    //stake a convex tokenized deposit for another address(transfering ownership)\r\n    function stakeFor(address _account, uint256 _amount) external returns (bool);\r\n\r\n    function getReward(address _account, bool _claimExtras) external returns (bool);\r\n\r\n    function rewards(address _account) external view returns (uint256);\r\n\r\n    function earned(address _account) external view returns (uint256);\r\n\r\n    function stakingToken() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/badger-sett/MigrationAssistant.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.11;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\ncontract MigrationAssistant {\r\n    event Debug(uint256 value);\r\n    event DebugAddress(address value);\r\n\r\n    struct MigrationParams {\r\n        address want;\r\n        address beforeStrategy;\r\n        address afterStrategy;\r\n    }\r\n\r\n    function migrate(IController controller, MigrationParams[] memory migrations) public {\r\n        for (uint256 i = 0; i < migrations.length; i++) {\r\n            MigrationParams memory params = migrations[i];\r\n\r\n            ISett sett = ISett(controller.vaults(params.want));\r\n            IStrategy beforeStrategy = IStrategy(params.beforeStrategy);\r\n            IStrategy afterStrategy = IStrategy(params.afterStrategy);\r\n\r\n            // ===== Pre Verification =====\r\n            // Strategies must have same want\r\n            require(beforeStrategy.want() == afterStrategy.want(), \"strategy-want-mismatch\");\r\n            require(afterStrategy.want() == sett.token(), \"strategy-sett-want-mismatch\");\r\n            require(params.want == sett.token(), \"want-param-mismatch\");\r\n            require(beforeStrategy.controller() == afterStrategy.controller(), \"strategy-controller-mismatch\");\r\n            // require(beforeStrategy.governance() == afterStrategy.governance(), \"strategy-governance-mismatch\");\r\n\r\n            require(beforeStrategy.controller() == address(controller), \"before-strategy-controller-mismatch\");\r\n            require(afterStrategy.controller() == address(controller), \"after-strategy-controller-mismatch\");\r\n\r\n            uint256 beforeBalance = sett.balance();\r\n            uint256 beforePpfs = sett.getPricePerFullShare();\r\n\r\n            // ===== Run Migration =====\r\n            controller.setStrategy(params.want, params.afterStrategy);\r\n\r\n            uint256 afterBalance = sett.balance();\r\n            uint256 afterPpfs = sett.getPricePerFullShare();\r\n\r\n            // ===== Post Verification =====\r\n            // Strategy must report same total balance\r\n            require(afterBalance == beforeBalance, \"sett-balance-mismatch\");\r\n\r\n            // PPFS must not change\r\n            require(beforePpfs == afterPpfs, \"ppfs-mismatch\");\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"DebugAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"controller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beforeStrategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"afterStrategy\",\"type\":\"address\"}],\"internalType\":\"struct MigrationAssistant.MigrationParams[]\",\"name\":\"migrations\",\"type\":\"tuple[]\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MigrationAssistant","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a832b11d32c493842ddaf763070b153dfeb65538754027ed810e8764b7648fa5"}]}