{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\n// This contract locks uniswap v2 liquidity tokens. Used to give investors peace of mind a token team has locked liquidity\r\n// and that the univ2 tokens cannot be removed from uniswap until the specified unlock date has been reached.\r\n\r\npragma solidity ^0.6.12;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal virtual view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal virtual view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n    helper methods for interacting with ERC20 tokens that do not consistently return true/false\r\n    with the addition of a transfer function to send eth or an erc20 token\r\n*/\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x095ea7b3, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: APPROVE_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0xa9059cbb, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"TransferHelper: TRANSFER_FROM_FAILED\"\r\n        );\r\n    }\r\n\r\n    // sends ETH or an erc20 token\r\n    function safeTransferBaseToken(\r\n        address token,\r\n        address payable to,\r\n        uint256 value,\r\n        bool isERC20\r\n    ) internal {\r\n        if (!isERC20) {\r\n            to.transfer(value);\r\n        } else {\r\n            (bool success, bytes memory data) = token.call(\r\n                abi.encodeWithSelector(0xa9059cbb, to, value)\r\n            );\r\n            require(\r\n                success && (data.length == 0 || abi.decode(data, (bool))),\r\n                \"TransferHelper: TRANSFER_FAILED\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index)\r\n        private\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        require(\r\n            set._values.length > index,\r\n            \"EnumerableSet: index out of bounds\"\r\n        );\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    function tryDiv(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (bool, uint256)\r\n    {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n}\r\n\r\ninterface IERCBurn {\r\n    function burn(uint256 _amount) external;\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IUniFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address);\r\n}\r\n\r\ninterface IMigrator {\r\n    function migrate(address lpToken, uint256 amount, uint256 unlockDate, address owner) external returns (bool);\r\n}\r\n\r\ncontract UniswapV2Locker is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n\r\n    IUniFactory public uniswapFactory;\r\n\r\n    struct UserInfo {\r\n        EnumerableSet.AddressSet lockedTokens; // records all tokens the user has locked\r\n        mapping(address => uint256[]) locksForToken; // map erc20 address to lock id for that token\r\n    }\r\n\r\n    struct TokenLock {\r\n        uint256 lockDate; // the date the token was locked\r\n        uint256 amount; // the amount of tokens still locked (initialAmount minus withdrawls)\r\n        uint256 initialAmount; // the initial lock amount\r\n        uint256 unlockDate; // the date the token can be withdrawn\r\n        uint256 lockID; // lockID nonce per uni pair\r\n        address owner;\r\n    }\r\n\r\n    mapping(address => UserInfo) private users;\r\n\r\n    EnumerableSet.AddressSet private lockedTokens;\r\n    mapping(address => TokenLock[]) public tokenLocks; //map univ2 pair to all its locks\r\n\r\n    struct FeeStruct {\r\n        uint256 ethFee; // Small eth fee to prevent spam on the platform\r\n        IERCBurn secondaryFeeToken; // UNCX or UNCL\r\n        uint256 secondaryTokenFee; // optional, UNCX or UNCL\r\n        uint256 secondaryTokenDiscount; // discount on liquidity fee for burning secondaryToken\r\n        uint256 liquidityFee; // fee on univ2 liquidity tokens\r\n        uint256 referralPercent; // fee for referrals\r\n        IERCBurn referralToken; // token the refferer must hold to qualify as a referrer\r\n        uint256 referralHold; // balance the referrer must hold to qualify as a referrer\r\n        uint256 referralDiscount; // discount on flatrate fees for using a valid referral address\r\n    }\r\n\r\n    FeeStruct public gFees;\r\n    EnumerableSet.AddressSet private feeWhitelist;\r\n\r\n    address payable devaddr;\r\n\r\n    IMigrator migrator;\r\n\r\n    event onDeposit(address lpToken, address user, uint256 amount, uint256 lockDate, uint256 unlockDate);\r\n    event onWithdraw(address lpToken, uint256 amount);\r\n\r\n    constructor(IUniFactory _uniswapFactory) public {\r\n        devaddr = msg.sender;\r\n        gFees.referralPercent = 250; // 25%\r\n        gFees.ethFee = 1e18;\r\n        gFees.secondaryTokenFee = 100e18;\r\n        gFees.secondaryTokenDiscount = 200; // 20%\r\n        gFees.liquidityFee = 10; // 1%\r\n        gFees.referralHold = 10e18;\r\n        gFees.referralDiscount = 100; // 10%\r\n        uniswapFactory = _uniswapFactory;\r\n    }\r\n\r\n    function setDev(address payable _devaddr) public onlyOwner {\r\n        devaddr = _devaddr;\r\n    }\r\n\r\n    /**\r\n    * @notice set the migrator contract which allows locked lp tokens to be migrated to uniswap v3\r\n    */\r\n    function setMigrator(IMigrator _migrator) public onlyOwner {\r\n        migrator = _migrator;\r\n    }\r\n\r\n    function setSecondaryFeeToken(address _secondaryFeeToken) public onlyOwner {\r\n        gFees.secondaryFeeToken = IERCBurn(_secondaryFeeToken);\r\n    }\r\n\r\n    /**\r\n    * @notice referrers need to hold the specified token and hold amount to be elegible for referral fees\r\n    */\r\n    function setReferralTokenAndHold(IERCBurn _referralToken, uint256 _hold) public onlyOwner {\r\n        gFees.referralToken = _referralToken;\r\n        gFees.referralHold = _hold;\r\n    }\r\n\r\n    function setFees(\r\n        uint256 _referralPercent, uint256 _referralDiscount, uint256 _ethFee, uint256 _secondaryTokenFee, uint256 _secondaryTokenDiscount, uint256 _liquidityFee) public onlyOwner {\r\n        gFees.referralPercent = _referralPercent;\r\n        gFees.referralDiscount = _referralDiscount;\r\n        gFees.ethFee = _ethFee;\r\n        gFees.secondaryTokenFee = _secondaryTokenFee;\r\n        gFees.secondaryTokenDiscount = _secondaryTokenDiscount;\r\n        gFees.liquidityFee = _liquidityFee;\r\n    }\r\n\r\n    /**\r\n    * @notice whitelisted accounts dont pay flatrate fees on locking\r\n    */\r\n    function whitelistFeeAccount(address _user, bool _add) public onlyOwner {\r\n        if (_add) {\r\n            feeWhitelist.add(_user);\r\n        } else {\r\n            feeWhitelist.remove(_user);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Creates a new lock\r\n    * @param _lpToken the univ2 token address\r\n    * @param _amount amount of LP tokens to lock\r\n    * @param _unlock_date the unix timestamp (in seconds) until unlock\r\n    * @param _referral the referrer address if any or address(0) for none\r\n    * @param _fee_in_eth fees can be paid in eth or in a secondary token such as UNCX with a discount on univ2 tokens\r\n    * @param _withdrawer the user who can withdraw liquidity once the lock expires.\r\n    */\r\n    function lockLPToken (\r\n        address _lpToken, uint256 _amount, uint256 _unlock_date, address payable _referral, bool _fee_in_eth, address payable _withdrawer) external payable nonReentrant {\r\n        require(_unlock_date < 10000000000, 'TIMESTAMP INVALID'); // prevents errors when timestamp entered in milliseconds\r\n        require(_amount > 0, 'INSUFFICIENT');\r\n\r\n        // ensure this pair is a univ2 pair by querying the factory\r\n        IUniswapV2Pair lpair = IUniswapV2Pair(address(_lpToken));\r\n        address factoryPairAddress = uniswapFactory.getPair(lpair.token0(), lpair.token1());\r\n        require(factoryPairAddress == address(_lpToken), 'NOT UNIV2');\r\n\r\n        TransferHelper.safeTransferFrom(_lpToken, address(msg.sender), address(this), _amount);\r\n\r\n        if (_referral != address(0) && address(gFees.referralToken) != address(0)) {\r\n            require(gFees.referralToken.balanceOf(_referral) >= gFees.referralHold, 'INADEQUATE BALANCE');\r\n        }\r\n\r\n        // flatrate fees\r\n        if (!feeWhitelist.contains(msg.sender)) {\r\n            if (_fee_in_eth) { // charge fee in eth\r\n                uint256 ethFee = gFees.ethFee;\r\n                if (_referral != address(0)) {\r\n                ethFee = ethFee.mul(1000 - gFees.referralDiscount).div(1000);\r\n                }\r\n                require(msg.value == ethFee, 'FEE NOT MET');\r\n                uint256 devFee = ethFee;\r\n                if (ethFee != 0 && _referral != address(0)) { // referral fee\r\n                uint256 referralFee = devFee.mul(gFees.referralPercent).div(1000);\r\n                _referral.transfer(referralFee);\r\n                devFee = devFee.sub(referralFee);\r\n                }\r\n                devaddr.transfer(devFee);\r\n            } else { // charge fee in token\r\n                uint256 burnFee = gFees.secondaryTokenFee;\r\n                if (_referral != address(0)) {\r\n                burnFee = burnFee.mul(1000 - gFees.referralDiscount).div(1000);\r\n                }\r\n                TransferHelper.safeTransferFrom(address(gFees.secondaryFeeToken), address(msg.sender), address(this), burnFee);\r\n                if (gFees.referralPercent != 0 && _referral != address(0)) { // referral fee\r\n                uint256 referralFee = burnFee.mul(gFees.referralPercent).div(1000);\r\n                TransferHelper.safeApprove(address(gFees.secondaryFeeToken), _referral, referralFee);\r\n                TransferHelper.safeTransfer(address(gFees.secondaryFeeToken), _referral, referralFee);\r\n                burnFee = burnFee.sub(referralFee);\r\n                }\r\n                gFees.secondaryFeeToken.burn(burnFee);\r\n            }\r\n        } else if (msg.value > 0){\r\n        // refund eth if a whitelisted member sent it by mistake\r\n        msg.sender.transfer(msg.value);\r\n        }\r\n\r\n        // percent fee\r\n        uint256 liquidityFee = _amount.mul(gFees.liquidityFee).div(1000);\r\n        if (!_fee_in_eth && !feeWhitelist.contains(msg.sender)) { // fee discount for large lockers using secondary token\r\n        liquidityFee = liquidityFee.mul(1000 - gFees.secondaryTokenDiscount).div(1000);\r\n        }\r\n        TransferHelper.safeTransfer(_lpToken, devaddr, liquidityFee);\r\n        uint256 amountLocked = _amount.sub(liquidityFee);\r\n\r\n        TokenLock memory token_lock;\r\n        token_lock.lockDate = block.timestamp;\r\n        token_lock.amount = amountLocked;\r\n        token_lock.initialAmount = amountLocked;\r\n        token_lock.unlockDate = _unlock_date;\r\n        token_lock.lockID = tokenLocks[_lpToken].length;\r\n        token_lock.owner = _withdrawer;\r\n\r\n        // record the lock for the univ2pair\r\n        tokenLocks[_lpToken].push(token_lock);\r\n        lockedTokens.add(_lpToken);\r\n\r\n        // record the lock for the user\r\n        UserInfo storage user = users[_withdrawer];\r\n        user.lockedTokens.add(_lpToken);\r\n        uint256[] storage user_locks = user.locksForToken[_lpToken];\r\n        user_locks.push(token_lock.lockID);\r\n\r\n        emit onDeposit(_lpToken, msg.sender, token_lock.amount, token_lock.lockDate, token_lock.unlockDate);\r\n    }\r\n\r\n    /**\r\n    * @notice extend a lock with a new unlock date, _index and _lockID ensure the correct lock is changed\r\n    * this prevents errors when a user performs multiple tx per block possibly with varying gas prices\r\n    */\r\n    function relock (address _lpToken, uint256 _index, uint256 _lockID, uint256 _unlock_date) external nonReentrant {\r\n        require(_unlock_date < 10000000000, 'TIMESTAMP INVALID'); // prevents errors when timestamp entered in milliseconds\r\n        uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\r\n        TokenLock storage userLock = tokenLocks[_lpToken][lockID];\r\n        require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\r\n        require(userLock.unlockDate < _unlock_date, 'UNLOCK BEFORE');\r\n\r\n        uint256 liquidityFee = userLock.amount.mul(gFees.liquidityFee).div(1000);\r\n        uint256 amountLocked = userLock.amount.sub(liquidityFee);\r\n\r\n        userLock.amount = amountLocked;\r\n        userLock.unlockDate = _unlock_date;\r\n\r\n        // send univ2 fee to dev address\r\n        TransferHelper.safeTransfer(_lpToken, devaddr, liquidityFee);\r\n    }\r\n\r\n    /**\r\n    * @notice withdraw a specified amount from a lock. _index and _lockID ensure the correct lock is changed\r\n    * this prevents errors when a user performs multiple tx per block possibly with varying gas prices\r\n    */\r\n    function withdraw (address _lpToken, uint256 _index, uint256 _lockID, uint256 _amount) external nonReentrant {\r\n        require(_amount > 0, 'ZERO WITHDRAWL');\r\n        uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\r\n        TokenLock storage userLock = tokenLocks[_lpToken][lockID];\r\n        require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\r\n        require(userLock.unlockDate < block.timestamp, 'NOT YET');\r\n        userLock.amount = userLock.amount.sub(_amount);\r\n\r\n        // clean user storage\r\n        if (userLock.amount == 0) {\r\n            uint256[] storage userLocks = users[msg.sender].locksForToken[_lpToken];\r\n            userLocks[_index] = userLocks[userLocks.length-1];\r\n            userLocks.pop();\r\n            if (userLocks.length == 0) {\r\n                users[msg.sender].lockedTokens.remove(_lpToken);\r\n            }\r\n        }\r\n\r\n        TransferHelper.safeTransfer(_lpToken, msg.sender, _amount);\r\n        emit onWithdraw(_lpToken, _amount);\r\n    }\r\n\r\n    /**\r\n    * @notice increase the amount of tokens per a specific lock, this is preferable to creating a new lock, less fees, and faster loading on our live block explorer\r\n    */\r\n    function incrementLock (address _lpToken, uint256 _index, uint256 _lockID, uint256 _amount) external nonReentrant {\r\n        require(_amount > 0, 'ZERO AMOUNT');\r\n        uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\r\n        TokenLock storage userLock = tokenLocks[_lpToken][lockID];\r\n        require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\r\n\r\n        TransferHelper.safeTransferFrom(_lpToken, address(msg.sender), address(this), _amount);\r\n\r\n        // send univ2 fee to dev address\r\n        uint256 liquidityFee = _amount.mul(gFees.liquidityFee).div(1000);\r\n        TransferHelper.safeTransfer(_lpToken, devaddr, liquidityFee);\r\n        uint256 amountLocked = _amount.sub(liquidityFee);\r\n\r\n        userLock.amount = userLock.amount.add(amountLocked);\r\n\r\n        emit onDeposit(_lpToken, msg.sender, amountLocked, userLock.lockDate, userLock.unlockDate);\r\n    }\r\n\r\n    /**\r\n    * @notice split a lock into two seperate locks, useful when a lock is about to expire and youd like to relock a portion\r\n    * and withdraw a smaller portion\r\n    */\r\n    function splitLock (address _lpToken, uint256 _index, uint256 _lockID, uint256 _amount) external payable nonReentrant {\r\n        require(_amount > 0, 'ZERO AMOUNT');\r\n        uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\r\n        TokenLock storage userLock = tokenLocks[_lpToken][lockID];\r\n        require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\r\n\r\n        require(msg.value == gFees.ethFee, 'FEE NOT MET');\r\n        devaddr.transfer(gFees.ethFee);\r\n\r\n        userLock.amount = userLock.amount.sub(_amount);\r\n\r\n        TokenLock memory token_lock;\r\n        token_lock.lockDate = userLock.lockDate;\r\n        token_lock.amount = _amount;\r\n        token_lock.initialAmount = _amount;\r\n        token_lock.unlockDate = userLock.unlockDate;\r\n        token_lock.lockID = tokenLocks[_lpToken].length;\r\n        token_lock.owner = msg.sender;\r\n\r\n        // record the lock for the univ2pair\r\n        tokenLocks[_lpToken].push(token_lock);\r\n\r\n        // record the lock for the user\r\n        UserInfo storage user = users[msg.sender];\r\n        uint256[] storage user_locks = user.locksForToken[_lpToken];\r\n        user_locks.push(token_lock.lockID);\r\n    }\r\n\r\n    /**\r\n    * @notice transfer a lock to a new owner, e.g. presale project -> project owner\r\n    */\r\n    function transferLockOwnership (address _lpToken, uint256 _index, uint256 _lockID, address payable _newOwner) external {\r\n        require(msg.sender != _newOwner, 'OWNER');\r\n        uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\r\n        TokenLock storage transferredLock = tokenLocks[_lpToken][lockID];\r\n        require(lockID == _lockID && transferredLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\r\n\r\n        // record the lock for the new Owner\r\n        UserInfo storage user = users[_newOwner];\r\n        user.lockedTokens.add(_lpToken);\r\n        uint256[] storage user_locks = user.locksForToken[_lpToken];\r\n        user_locks.push(transferredLock.lockID);\r\n\r\n        // remove the lock from the old owner\r\n        uint256[] storage userLocks = users[msg.sender].locksForToken[_lpToken];\r\n        userLocks[_index] = userLocks[userLocks.length-1];\r\n        userLocks.pop();\r\n        if (userLocks.length == 0) {\r\n            users[msg.sender].lockedTokens.remove(_lpToken);\r\n        }\r\n        transferredLock.owner = _newOwner;\r\n    }\r\n\r\n    /**\r\n    * @notice migrates liquidity to uniswap v3\r\n    */\r\n    function migrate (address _lpToken, uint256 _index, uint256 _lockID, uint256 _amount) external nonReentrant {\r\n        require(address(migrator) != address(0), \"NOT SET\");\r\n        require(_amount > 0, 'ZERO MIGRATION');\r\n\r\n        uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\r\n        TokenLock storage userLock = tokenLocks[_lpToken][lockID];\r\n        require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\r\n        userLock.amount = userLock.amount.sub(_amount);\r\n\r\n        // clean user storage\r\n        if (userLock.amount == 0) {\r\n            uint256[] storage userLocks = users[msg.sender].locksForToken[_lpToken];\r\n            userLocks[_index] = userLocks[userLocks.length-1];\r\n            userLocks.pop();\r\n            if (userLocks.length == 0) {\r\n                users[msg.sender].lockedTokens.remove(_lpToken);\r\n            }\r\n        }\r\n\r\n        TransferHelper.safeApprove(_lpToken, address(migrator), _amount);\r\n        migrator.migrate(_lpToken, _amount, userLock.unlockDate, msg.sender);\r\n    }\r\n\r\n    function getNumLocksForToken (address _lpToken) external view returns (uint256) {\r\n        return tokenLocks[_lpToken].length;\r\n    }\r\n\r\n    function getNumLockedTokens () external view returns (uint256) {\r\n        return lockedTokens.length();\r\n    }\r\n\r\n    function getLockedTokenAtIndex (uint256 _index) external view returns (address) {\r\n        return lockedTokens.at(_index);\r\n    }\r\n\r\n    // user functions\r\n    function getUserNumLockedTokens (address _user) external view returns (uint256) {\r\n        UserInfo storage user = users[_user];\r\n        return user.lockedTokens.length();\r\n    }\r\n\r\n    function getUserLockedTokenAtIndex (address _user, uint256 _index) external view returns (address) {\r\n        UserInfo storage user = users[_user];\r\n        return user.lockedTokens.at(_index);\r\n    }\r\n\r\n    function getUserNumLocksForToken (address _user, address _lpToken) external view returns (uint256) {\r\n        UserInfo storage user = users[_user];\r\n        return user.locksForToken[_lpToken].length;\r\n    }\r\n\r\n    function getUserLockForTokenAtIndex (\r\n        address _user, address _lpToken, uint256 _index) external view returns (uint256, uint256, uint256, uint256, uint256, address) {\r\n        uint256 lockID = users[_user].locksForToken[_lpToken][_index];\r\n        TokenLock storage tokenLock = tokenLocks[_lpToken][lockID];\r\n        return (tokenLock.lockDate, tokenLock.amount, tokenLock.initialAmount, tokenLock.unlockDate, tokenLock.lockID, tokenLock.owner);\r\n    }\r\n\r\n    // whitelist\r\n    function getWhitelistedUsersLength () external view returns (uint256) {\r\n        return feeWhitelist.length();\r\n    }\r\n\r\n    function getWhitelistedUserAtIndex (uint256 _index) external view returns (address) {\r\n        return feeWhitelist.at(_index);\r\n    }\r\n\r\n    function getUserWhitelistStatus (address _user) external view returns (bool) {\r\n        return feeWhitelist.contains(_user);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IUniFactory\",\"name\":\"_uniswapFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"}],\"name\":\"onDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"gFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethFee\",\"type\":\"uint256\"},{\"internalType\":\"contract IERCBurn\",\"name\":\"secondaryFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"secondaryTokenFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryTokenDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralPercent\",\"type\":\"uint256\"},{\"internalType\":\"contract IERCBurn\",\"name\":\"referralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralHold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralDiscount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLockedTokenAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"getNumLocksForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserLockForTokenAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserLockedTokenAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserNumLockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"getUserNumLocksForToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserWhitelistStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getWhitelistedUserAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistedUsersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"incrementLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_date\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_fee_in_eth\",\"type\":\"bool\"},{\"internalType\":\"address payable\",\"name\":\"_withdrawer\",\"type\":\"address\"}],\"name\":\"lockLPToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_date\",\"type\":\"uint256\"}],\"name\":\"relock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referralPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_referralDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondaryTokenFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondaryTokenDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigrator\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERCBurn\",\"name\":\"_referralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_hold\",\"type\":\"uint256\"}],\"name\":\"setReferralTokenAndHold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_secondaryFeeToken\",\"type\":\"address\"}],\"name\":\"setSecondaryFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"splitLock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferLockOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapFactory\",\"outputs\":[{\"internalType\":\"contract IUniFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_add\",\"type\":\"bool\"}],\"name\":\"whitelistFeeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UniswapV2Locker","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2d349316d2c905e80212ae79efae8bcad3634db842c9c3e0ab73422f2565e16c"}]}