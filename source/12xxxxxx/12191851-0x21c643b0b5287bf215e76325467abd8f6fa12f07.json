{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.12;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\r\n * metering changes introduced in the Istanbul hardfork.\r\n */\r\ncontract ReentrancyGuard {\r\n    bool private _notEntered;\r\n\r\n    constructor () internal {\r\n        // Storing an initial non-zero value makes deployment a bit more\r\n        // expensive, but in exchange the refund on every call to nonReentrant\r\n        // will be lower in amount. Since refunds are capped to a percetange of\r\n        // the total transaction's gas, it is best to keep them low in cases\r\n        // like this one, to increase the likelihood of the full refund coming\r\n        // into effect.\r\n        _notEntered = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _notEntered = false;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _notEntered = true;\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @dev Interface identification is specified in ERC-165. This function\r\n     * uses less than 30,000 gas\r\n     * @param _interfaceId The interface identifier, as specified in ERC-165\r\n     */\r\n    function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n\r\n/**\r\n * @dev ERC-1155 interface for accepting safe transfers.\r\n */\r\ninterface IERC1155TokenReceiver {\r\n\r\n    /**\r\n     * @notice Handle the receipt of a single ERC1155 token type\r\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\r\n     * This function MAY throw to revert and reject the transfer\r\n     * Return of other amount than the magic value MUST result in the transaction being reverted\r\n     * Note: The token contract address is always the message sender\r\n     * @param _operator  The address which called the `safeTransferFrom` function\r\n     * @param _from      The address which previously owned the token\r\n     * @param _id        The id of the token being transferred\r\n     * @param _amount    The amount of tokens being transferred\r\n     * @param _data      Additional data with no specified format\r\n     * @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     */\r\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4);\r\n\r\n    /**\r\n     * @notice Handle the receipt of multiple ERC1155 token types\r\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\r\n     * This function MAY throw to revert and reject the transfer\r\n     * Return of other amount than the magic value WILL result in the transaction being reverted\r\n     * Note: The token contract address is always the message sender\r\n     * @param _operator  The address which called the `safeBatchTransferFrom` function\r\n     * @param _from      The address which previously owned the token\r\n     * @param _ids       An array containing ids of each token being transferred\r\n     * @param _amounts   An array containing amounts of each token being transferred\r\n     * @param _data      Additional data with no specified format\r\n     * @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     */\r\n    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4);\r\n\r\n    /**\r\n     * @notice Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types.\r\n     * @param  interfaceID The ERC-165 interface ID that is queried for support.s\r\n     * @dev This function MUST return true if it implements the ERC1155TokenReceiver interface and ERC-165 interface.\r\n     *      This function MUST NOT consume more than 5,000 gas.\r\n     * @return Wheter ERC-165 or ERC1155TokenReceiver interfaces are supported.\r\n     */\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n\r\n}\r\n\r\ncontract DRFTokenWrapper {\r\n    using SafeMath for uint256;\r\n    IERC20 public drf;\r\n\r\n    constructor(address _drfAddress) public {\r\n        drf = IERC20(_drfAddress);\r\n    }\r\n\r\n    uint256 private _totalSupply;\r\n    // Objects balances [id][address] => balance\r\n    mapping(uint256 => mapping(address => uint256)) internal _balances;\r\n    mapping(uint256 => uint256) private _totalDeposits;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function totalDeposits(uint256 id) public view returns (uint256) {\r\n        return _totalDeposits[id];\r\n    }\r\n\r\n    function balanceOf(address account, uint256 id) public view returns (uint256) {\r\n        return _balances[id][account];\r\n    }\r\n\r\n    function bid(uint256 id, uint256 amount) public {\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _totalDeposits[id] = _totalDeposits[id].add(amount);\r\n        _balances[id][msg.sender] = _balances[id][msg.sender].add(amount);\r\n        drf.transferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    function withdraw(uint256 id) public {\r\n        uint256 amount = balanceOf(msg.sender, id);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _totalDeposits[id] = _totalDeposits[id].sub(amount);\r\n        _balances[id][msg.sender] = _balances[id][msg.sender].sub(amount);\r\n        drf.transfer(msg.sender, amount);\r\n    }\r\n\r\n    function _emergencyWithdraw(address account, uint256 id) internal {\r\n        uint256 amount = _balances[id][account];\r\n\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _totalDeposits[id] = _totalDeposits[id].sub(amount);\r\n        _balances[id][account] = _balances[id][account].sub(amount);\r\n        drf.transfer(account, amount);\r\n    }\r\n\r\n    function _end(\r\n        uint256 id,\r\n        address highestBidder,\r\n        address beneficiary,\r\n        address runner,\r\n        uint256 fee,\r\n        uint256 amount\r\n    ) internal {\r\n        uint256 accountDeposits = _balances[id][highestBidder];\r\n        require(accountDeposits == amount);\r\n\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        uint256 drfFee = (amount.mul(fee)).div(100);\r\n\r\n        _totalDeposits[id] = _totalDeposits[id].sub(amount);\r\n        _balances[id][highestBidder] = _balances[id][highestBidder].sub(amount);\r\n        drf.transfer(beneficiary, amount.sub(drfFee));\r\n        drf.transfer(runner, drfFee);\r\n    }\r\n}\r\n\r\ninterface IERC1155 {\r\n    function create(\r\n        uint256 _maxSupply,\r\n        uint256 _initialSupply,\r\n        string calldata _uri,\r\n        bytes calldata _data\r\n    ) external returns (uint256 tokenId);\r\n\r\n    function safeTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _id,\r\n        uint256 _amount,\r\n        bytes calldata _data\r\n    ) external;\r\n\r\n    function safeBatchTransferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256[] calldata _ids,\r\n        uint256[] calldata _amounts,\r\n        bytes calldata _data\r\n    ) external;\r\n\r\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\r\n\r\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\r\n    external\r\n    view\r\n    returns (uint256[] memory);\r\n\r\n    function setApprovalForAll(address _operator, bool _approved) external;\r\n\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\r\n\r\n    event TransferSingle(\r\n        address indexed _operator,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _id,\r\n        uint256 _amount\r\n    );\r\n\r\n    event TransferBatch(\r\n        address indexed _operator,\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256[] _ids,\r\n        uint256[] _amounts\r\n    );\r\n\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    event URI(string _amount, uint256 indexed _id);\r\n}\r\n\r\ncontract DRFAuctionExtending is Ownable, ReentrancyGuard, DRFTokenWrapper, IERC1155TokenReceiver {\r\n    using SafeMath for uint256;\r\n\r\n    address public drfLtdAddress;\r\n    address public runner;\r\n\r\n    // info about a particular auction\r\n    struct AuctionInfo {\r\n        address beneficiary;\r\n        uint256 fee;\r\n        uint256 auctionStart;\r\n        uint256 auctionEnd;\r\n        uint256 originalAuctionEnd;\r\n        uint256 extension;\r\n        uint256 nft;\r\n        address highestBidder;\r\n        uint256 highestBid;\r\n        bool auctionEnded;\r\n    }\r\n\r\n    mapping(uint256 => AuctionInfo) public auctionsById;\r\n    uint256[] public auctions;\r\n\r\n    // Events that will be fired on changes.\r\n    event BidPlaced(address indexed user, uint256 indexed id, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 indexed id, uint256 amount);\r\n    event Ended(address indexed user, uint256 indexed id, uint256 amount);\r\n\r\n    constructor(\r\n        address _runner,\r\n        address _drfAddress,\r\n        address _drfLtdAddress\r\n    ) public DRFTokenWrapper(_drfAddress) {\r\n        runner = _runner;\r\n        drfLtdAddress = _drfLtdAddress;\r\n    }\r\n\r\n    function auctionStart(uint256 id) public view returns (uint256) {\r\n        return auctionsById[id].auctionStart;\r\n    }\r\n\r\n    function beneficiary(uint256 id) public view returns (address) {\r\n        return auctionsById[id].beneficiary;\r\n    }\r\n\r\n    function auctionEnd(uint256 id) public view returns (uint256) {\r\n        return auctionsById[id].auctionEnd;\r\n    }\r\n\r\n    function drfLtdNft(uint256 id) public view returns (uint256) {\r\n        return auctionsById[id].nft;\r\n    }\r\n\r\n    function highestBidder(uint256 id) public view returns (address) {\r\n        return auctionsById[id].highestBidder;\r\n    }\r\n\r\n    function highestBid(uint256 id) public view returns (uint256) {\r\n        return auctionsById[id].highestBid;\r\n    }\r\n\r\n    function ended(uint256 id) public view returns (bool) {\r\n        return now >= auctionsById[id].auctionEnd;\r\n    }\r\n\r\n    function runnerFee(uint256 id) public view returns (uint256) {\r\n        return auctionsById[id].fee;\r\n    }\r\n\r\n    function setRunnerAddress(address account) public onlyOwner {\r\n        runner = account;\r\n    }\r\n\r\n    function create(\r\n        uint256 id,\r\n        address beneficiaryAddress,\r\n        uint256 fee,\r\n        uint256 start,\r\n        uint256 duration,\r\n        uint256 extension // in minutes\r\n    ) public onlyOwner {\r\n        AuctionInfo storage auction = auctionsById[id];\r\n        require(auction.beneficiary == address(0), \"DRFAuction::create: auction already created\");\r\n\r\n        auction.beneficiary = beneficiaryAddress;\r\n        auction.fee = fee;\r\n        auction.auctionStart = start;\r\n        auction.auctionEnd = start.add(duration * 1 days);\r\n        auction.originalAuctionEnd = start.add(duration * 1 days);\r\n        auction.extension = extension * 60;\r\n\r\n        auctions.push(id);\r\n\r\n        uint256 tokenId = IERC1155(drfLtdAddress).create(1, 1, \"\", \"\");\r\n        require(tokenId > 0, \"DRFAuction::create: ERC1155 create did not succeed\");\r\n        auction.nft = tokenId;\r\n    }\r\n\r\n    function bid(uint256 id, uint256 amount) public nonReentrant {\r\n        AuctionInfo storage auction = auctionsById[id];\r\n        require(auction.beneficiary != address(0), \"DRFAuction::bid: auction does not exist\");\r\n        require(now >= auction.auctionStart, \"DRFAuction::bid: auction has not started\");\r\n        require(now <= auction.auctionEnd, \"DRFAuction::bid: auction has ended\");\r\n\r\n        uint256 newAmount = amount.add(balanceOf(msg.sender, id));\r\n        require(newAmount > auction.highestBid, \"DRFAuction::bid: bid is less than highest bid\");\r\n\r\n        auction.highestBidder = msg.sender;\r\n        auction.highestBid = newAmount;\r\n\r\n        if (auction.extension > 0 && auction.auctionEnd.sub(now) <= auction.extension) {\r\n            auction.auctionEnd = now.add(auction.extension);\r\n        }\r\n\r\n        super.bid(id, amount);\r\n        emit BidPlaced(msg.sender, id, amount);\r\n    }\r\n\r\n    function withdraw(uint256 id) public nonReentrant {\r\n        AuctionInfo storage auction = auctionsById[id];\r\n        uint256 amount = balanceOf(msg.sender, id);\r\n        require(auction.beneficiary != address(0), \"DRFAuction::withdraw: auction does not exist\");\r\n        require(amount > 0, \"DRFAuction::withdraw: cannot withdraw 0\");\r\n\r\n        require(\r\n            auction.highestBidder != msg.sender,\r\n            \"DRFAuction::withdraw: you are the highest bidder and cannot withdraw\"\r\n        );\r\n\r\n        super.withdraw(id);\r\n        emit Withdrawn(msg.sender, id, amount);\r\n    }\r\n\r\n    function emergencyWithdraw(uint256 id) public onlyOwner {\r\n        AuctionInfo storage auction = auctionsById[id];\r\n        require(auction.beneficiary != address(0), \"DRFAuction::create: auction does not exist\");\r\n        require(now >= auction.auctionEnd, \"DRFAuction::emergencyWithdraw: the auction has not ended\");\r\n        require(!auction.auctionEnded, \"DRFAuction::emergencyWithdraw: auction ended and item sent\");\r\n\r\n        _emergencyWithdraw(auction.highestBidder, id);\r\n        emit Withdrawn(auction.highestBidder, id, auction.highestBid);\r\n    }\r\n\r\n    function end(uint256 id) public nonReentrant {\r\n        AuctionInfo storage auction = auctionsById[id];\r\n        require(auction.beneficiary != address(0), \"DRFAuction::end: auction does not exist\");\r\n        require(now >= auction.auctionEnd, \"DRFAuction::end: the auction has not ended\");\r\n        require(!auction.auctionEnded, \"DRFAuction::end: auction already ended\");\r\n\r\n        auction.auctionEnded = true;\r\n        _end(id, auction.highestBidder, auction.beneficiary, runner, auction.fee, auction.highestBid);\r\n        IERC1155(drfLtdAddress).safeTransferFrom(address(this), auction.highestBidder, auction.nft, 1, \"\");\r\n        emit Ended(auction.highestBidder, id, auction.highestBid);\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address _operator,\r\n        address, // _from\r\n        uint256, // _id\r\n        uint256, // _amount\r\n        bytes memory // _data\r\n    ) public returns (bytes4) {\r\n        require(msg.sender == address(drfLtdAddress), \"DRFAuction::onERC1155BatchReceived:: invalid token address\");\r\n        require(_operator == address(this), \"DRFAuction::onERC1155BatchReceived:: operator must be auction contract\");\r\n\r\n        // Return success\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address _operator,\r\n        address, // _from,\r\n        uint256[] memory, // _ids,\r\n        uint256[] memory, // _amounts,\r\n        bytes memory // _data\r\n    ) public returns (bytes4) {\r\n        require(msg.sender == address(drfLtdAddress), \"DRFAuction::onERC1155BatchReceived:: invalid token address\");\r\n        require(_operator == address(this), \"DRFAuction::onERC1155BatchReceived:: operator must be auction contract\");\r\n\r\n        // Return success\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceID) external view returns (bool) {\r\n        return\r\n        interfaceID == 0x01ffc9a7 || // ERC-165 support\r\n        interfaceID == 0x4e2312e0; // ERC-1155 `ERC1155TokenReceiver` support\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_runner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_drfAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_drfLtdAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Ended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"auctionEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"auctionStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionsById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalAuctionEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extension\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"auctionEnded\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiaryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extension\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"drf\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"drfLtdAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"drfLtdNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"end\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"highestBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"highestBidder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"runner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"runnerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setRunnerAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DRFAuctionExtending","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d4fb5dc9377b8cc93f5c4752d10eee704e734040000000000000000000000000379ec11344929da69ddfd805d564608089c97e5500000000000000000000000016d9ea8edde55d3f6756c26ecf61d05ad23fd363","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5494fe9a469094695466cfe0e4fff2d94845126239e60f84642ae461f9ae410b"}]}