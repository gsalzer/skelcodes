{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.4;\r\n\r\n// Interfaces for contract interaction\r\ninterface INterfaces {\r\n    function balanceOf(address) external returns (uint256);\r\n\r\n    function transfer(address, uint256) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) external returns (bool);\r\n\r\n    function allowance(address, address) external returns (uint256);\r\n\r\n    //usdc\r\n    function transferWithAuthorization(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        uint256 validAfter,\r\n        uint256 validBefore,\r\n        bytes32 nonce,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n\r\n// USDT is not ERC-20 compliant, not returning true on transfers\r\ninterface IUsdt {\r\n    function transfer(address, uint256) external;\r\n\r\n    function transferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) external;\r\n}\r\n\r\n// BigShortBets.com presale contract - via StableCoins and ETH\r\n//\r\n// USE ONLY OWN WALLET (Metamask, Trezor, Ledger...)\r\n// DO NOT SEND FROM EXCHANGES OR ANY SERVICES\r\n//\r\n// Use ONLY ETH network, ERC20 tokens (Not Binance/Tron/whatever!)\r\n//\r\n// Set approval to contract address or use USDC authorization first\r\n//\r\n// DO NOT SEND STABLE TOKENS DIRECTLY - IT WILL NOT COUNT THAT!\r\n//\r\n// send ONLY round number of USD(c|t)/DAI!\r\n// ie 20, 500, 2000 NOT 20.1, 500.5, 2000.3\r\n// contract will ignore decimals\r\n//\r\n// Need 150k gas limit\r\n// use proper pay* function\r\ncontract BigShortBetsPresale2 {\r\n    // max USD per user\r\n    uint256 private immutable _maxUsd;\r\n    // soft limit USD total\r\n    uint256 private immutable _limitUsd;\r\n    // max ETH per user\r\n    uint256 private immutable _maxEth;\r\n    // soft limit ETH total\r\n    uint256 private immutable _limitEth;\r\n    // contract starts accepting transfers\r\n    uint256 private immutable _dateStart;\r\n    // hard time limit\r\n    uint256 private immutable _dateEnd;\r\n\r\n    // total collected USD\r\n    uint256 private _usdCollected;\r\n\r\n    uint256 private constant DECIMALS_DAI = 18;\r\n    uint256 private constant DECIMALS_USDC = 6;\r\n    uint256 private constant DECIMALS_USDT = 6;\r\n\r\n    // addresses of tokens\r\n    address private immutable usdt;\r\n    address private immutable usdc;\r\n    address private immutable dai;\r\n\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    bool private _presaleEnded;\r\n\r\n    // deposited per user\r\n    mapping(address => uint256) private _usdBalance;\r\n    mapping(address => uint256) private _ethBalance;\r\n\r\n    // deposited per tokens\r\n    mapping(address => uint256) private _deposited;\r\n\r\n    // will be set after presale\r\n    uint256 private _tokensPerEth;\r\n\r\n    string private constant ERROR_ANS = \"Approval not set!\";\r\n\r\n    event AcceptedUSD(address indexed user, uint256 amount);\r\n    event AcceptedETH(address indexed user, uint256 amount);\r\n\r\n    constructor(\r\n        address _owner,\r\n        uint256 maxUsd,\r\n        uint256 limitUsd,\r\n        uint256 maxEth,\r\n        uint256 limitEth,\r\n        uint256 startDate,\r\n        uint256 endDate,\r\n        address _usdt,\r\n        address _usdc,\r\n        address _dai\r\n    ) {\r\n        owner = _owner;\r\n        _maxUsd = maxUsd;\r\n        _limitUsd = limitUsd;\r\n        _maxEth = maxEth;\r\n        _limitEth = limitEth;\r\n        _dateStart = startDate;\r\n        _dateEnd = endDate;\r\n        usdt = _usdt;\r\n        usdc = _usdc;\r\n        dai = _dai;\r\n\r\n        /**\r\n        mainnet:\r\n        usdt=0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n        usdc=0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n        dai=0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n        */\r\n    }\r\n\r\n    //pay in using USDC\r\n    //need prepare and sign approval first\r\n    //not included in dapp\r\n    function payUsdcByAuthorization(\r\n        address from,\r\n        address to,\r\n        uint256 value,\r\n        uint256 validAfter,\r\n        uint256 validBefore,\r\n        bytes32 nonce,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        require(to == address(this), \"Wrong authorization address\");\r\n        // should throw on any error\r\n        INterfaces(usdc).transferWithAuthorization(\r\n            from,\r\n            to,\r\n            value,\r\n            validAfter,\r\n            validBefore,\r\n            nonce,\r\n            v,\r\n            r,\r\n            s\r\n        );\r\n        // not msg.sender, approval can be sent by anyone\r\n        _pay(from, value, DECIMALS_USDC);\r\n        _deposited[usdc] += value;\r\n    }\r\n\r\n    //pay in using USDC\r\n    //use approve/transferFrom\r\n    function payUSDC(uint256 amount) external {\r\n        require(\r\n            INterfaces(usdc).allowance(msg.sender, address(this)) >= amount,\r\n            ERROR_ANS\r\n        );\r\n        require(\r\n            INterfaces(usdc).transferFrom(msg.sender, address(this), amount),\r\n            \"USDC transfer failed\"\r\n        );\r\n        _pay(msg.sender, amount, DECIMALS_USDC);\r\n        _deposited[usdc] += amount;\r\n    }\r\n\r\n    //pay in using USDT\r\n    //need set approval first\r\n    function payUSDT(uint256 amount) external {\r\n        require(\r\n            INterfaces(usdt).allowance(msg.sender, address(this)) >= amount,\r\n            ERROR_ANS\r\n        );\r\n        IUsdt(usdt).transferFrom(msg.sender, address(this), amount);\r\n        _pay(msg.sender, amount, DECIMALS_USDT);\r\n        _deposited[usdt] += amount;\r\n    }\r\n\r\n    //pay in using DAI\r\n    //need set approval first\r\n    function payDAI(uint256 amount) external {\r\n        require(\r\n            INterfaces(dai).allowance(msg.sender, address(this)) >= amount,\r\n            ERROR_ANS\r\n        );\r\n        require(\r\n            INterfaces(dai).transferFrom(msg.sender, address(this), amount),\r\n            \"DAI transfer failed\"\r\n        );\r\n        _pay(msg.sender, amount, DECIMALS_DAI);\r\n        _deposited[dai] += amount;\r\n    }\r\n\r\n    //direct ETH send will not back\r\n    //\r\n    //accept ETH\r\n\r\n    // takes about 50k gas\r\n    receive() external payable {\r\n        _payEth(msg.sender, msg.value);\r\n    }\r\n\r\n    // takes about 35k gas\r\n    function payETH() external payable {\r\n        _payEth(msg.sender, msg.value);\r\n    }\r\n\r\n    function _payEth(address user, uint256 amount) internal notEnded {\r\n        uint256 amt = _ethBalance[user] + amount;\r\n        require(amt <= _maxEth, \"ETH per user reached\");\r\n        _ethBalance[user] += amt;\r\n        emit AcceptedETH(user, amount);\r\n    }\r\n\r\n    function _pay(\r\n        address user,\r\n        uint256 amount,\r\n        uint256 decimals\r\n    ) internal notEnded {\r\n        uint256 usd = amount / (10**decimals);\r\n        _usdBalance[user] += usd;\r\n        require(_usdBalance[user] <= _maxUsd, \"USD amount too high\");\r\n        _usdCollected += usd;\r\n        emit AcceptedUSD(user, usd);\r\n    }\r\n\r\n    //\r\n    // external readers\r\n    //\r\n    function USDcollected() external view returns (uint256) {\r\n        return _usdCollected;\r\n    }\r\n\r\n    function ETHcollected() external view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function USDmax() external view returns (uint256) {\r\n        return _maxUsd;\r\n    }\r\n\r\n    function USDlimit() external view returns (uint256) {\r\n        return _limitUsd;\r\n    }\r\n\r\n    function ETHmax() external view returns (uint256) {\r\n        return _maxEth;\r\n    }\r\n\r\n    function ETHlimit() external view returns (uint256) {\r\n        return _limitEth;\r\n    }\r\n\r\n    function dateStart() external view returns (uint256) {\r\n        return _dateStart;\r\n    }\r\n\r\n    function dateEnd() external view returns (uint256) {\r\n        return _dateEnd;\r\n    }\r\n\r\n    function tokensBoughtOf(address user) external view returns (uint256 amt) {\r\n        require(_tokensPerEth > 0, \"Tokens/ETH ratio not set yet\");\r\n        amt = (_usdBalance[user] * 95) / 100;\r\n        amt += _ethBalance[user] * _tokensPerEth;\r\n        return amt;\r\n    }\r\n\r\n    function usdDepositOf(address user) external view returns (uint256) {\r\n        return _usdBalance[user];\r\n    }\r\n\r\n    function ethDepositOf(address user) external view returns (uint256) {\r\n        return _ethBalance[user];\r\n    }\r\n\r\n    modifier notEnded() {\r\n        require(!_presaleEnded, \"Presale ended\");\r\n        require(\r\n            block.timestamp > _dateStart && block.timestamp < _dateEnd,\r\n            \"Too soon or too late\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only for contract Owner\");\r\n        _;\r\n    }\r\n\r\n    modifier timeIsUp() {\r\n        require(block.timestamp > _dateEnd, \"SOON\");\r\n        _;\r\n    }\r\n\r\n    function endPresale() external onlyOwner {\r\n        require(\r\n            _usdCollected > _limitUsd || address(this).balance > _limitEth,\r\n            \"Limit not reached\"\r\n        );\r\n        _presaleEnded = true;\r\n    }\r\n\r\n    function setTokensPerEth(uint256 ratio) external onlyOwner {\r\n        require(_tokensPerEth == 0, \"Ratio already set\");\r\n        _tokensPerEth = ratio;\r\n    }\r\n\r\n    // take out all stables and ETH\r\n    function takeAll() external onlyOwner timeIsUp {\r\n        _presaleEnded = true; //just to save gas for ppl that want buy too late\r\n        uint256 amt = INterfaces(usdt).balanceOf(address(this));\r\n        if (amt > 0) {\r\n            IUsdt(usdt).transfer(owner, amt);\r\n        }\r\n        amt = INterfaces(usdc).balanceOf(address(this));\r\n        if (amt > 0) {\r\n            INterfaces(usdc).transfer(owner, amt);\r\n        }\r\n        amt = INterfaces(dai).balanceOf(address(this));\r\n        if (amt > 0) {\r\n            INterfaces(dai).transfer(owner, amt);\r\n        }\r\n        amt = address(this).balance;\r\n        if (amt > 0) {\r\n            payable(owner).transfer(amt);\r\n        }\r\n    }\r\n\r\n    // we can recover any ERC20 token send in wrong way... for price!\r\n    function recoverErc20(address token) external onlyOwner {\r\n        uint256 amt = INterfaces(token).balanceOf(address(this));\r\n        // do not take deposits\r\n        amt -= _deposited[token];\r\n        if (amt > 0) {\r\n            INterfaces(token).transfer(owner, amt);\r\n        }\r\n    }\r\n\r\n    // should not be needed, but...\r\n    function recoverEth() external onlyOwner timeIsUp {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n\r\n    function changeOwner(address _newOwner) external onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(\r\n            msg.sender != address(0) && msg.sender == newOwner,\r\n            \"Only NewOwner\"\r\n        );\r\n        newOwner = address(0);\r\n        owner = msg.sender;\r\n    }\r\n}\r\n\r\n// rav3n_pl was here","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AcceptedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AcceptedUSD\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETHcollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETHlimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETHmax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDcollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDlimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDmax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dateEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dateStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ethDepositOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payDAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"payUsdcByAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"setTokensPerEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"tokensBoughtOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"usdDepositOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BigShortBetsPresale2","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000023e7f318c383a5e9af702ee11e342632006a23cc0000000000000000000000000000000000000000000000000000000000003a98000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000004563918244f4000000000000000000000000000000000000000000000000010f0cf064dd5920000000000000000000000000000000000000000000000000000000000000608673000000000000000000000000000000000000000000000000000000000060b55c5f000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000006b175474e89094c44da98b954eedeac495271d0f","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fd9aeaac70547cd455e59e83a9b728dbadc8f25db0fe086e0753e53fa54770d0"}]}