{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/pool/PerpetualPoolTemp.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// Version: 0.1.0, 1/20/2021\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\nimport \\\"../interface/IERC20.sol\\\";\\r\\nimport \\\"../interface/IPToken.sol\\\";\\r\\nimport \\\"../interface/ILToken.sol\\\";\\r\\nimport \\\"../interface/IOracle.sol\\\";\\r\\nimport \\\"../interface/ILiquidatorQualifier.sol\\\";\\r\\nimport \\\"../interface/IMigratablePool.sol\\\";\\r\\nimport \\\"../interface/IPreMiningPool.sol\\\";\\r\\nimport \\\"../interface/IPerpetualPool.sol\\\";\\r\\nimport \\\"../utils/SafeERC20.sol\\\";\\r\\nimport \\\"../math/MixedSafeMathWithUnit.sol\\\";\\r\\nimport \\\"./MigratablePool.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Deri Protocol PerpetualPool Implementation\\r\\n */\\r\\ncontract PerpetualPool is IMigratablePool, IPerpetualPool, MigratablePool {\\r\\n\\r\\n    using MixedSafeMathWithUnit for uint256;\\r\\n    using MixedSafeMathWithUnit for int256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Trading symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Last price\\r\\n    uint256 private _price;\\r\\n    // Last price timestamp\\r\\n    uint256 private _lastPriceTimestamp;\\r\\n    // Last price block number\\r\\n    uint256 private _lastPriceBlockNumber;\\r\\n\\r\\n    // Base token contract, all settlements are done in base token\\r\\n    IERC20  private _bToken;\\r\\n    // Base token decimals\\r\\n    uint256 private _bDecimals;\\r\\n    // Position token contract\\r\\n    IPToken private _pToken;\\r\\n    // Liquidity provider token contract\\r\\n    ILToken private _lToken;\\r\\n    // For on-chain oracle, it is a contract and must have getPrice() method to fetch current price\\r\\n    // For off-chain signed price oracle, it is an EOA\\r\\n    // and its address is used to verify price signature\\r\\n    IOracle private _oracle;\\r\\n    // Is on-chain oracle, or off-chain oracle with signed price\\r\\n    bool private _isContractOracle;\\r\\n    // LiquidatorQualifier contract to check if an address can call liquidate function\\r\\n    // If this address is 0, means no liquidator qualification check, anyone can call liquidate\\r\\n    ILiquidatorQualifier private _liquidatorQualifier;\\r\\n\\r\\n    // Contract multiplier\\r\\n    uint256 private _multiplier;\\r\\n    // Trading fee ratio\\r\\n    uint256 private _feeRatio;\\r\\n    // Minimum pool margin ratio\\r\\n    uint256 private _minPoolMarginRatio;\\r\\n    // Minimum initial margin ratio for trader\\r\\n    uint256 private _minInitialMarginRatio;\\r\\n    // Minimum maintenance margin ratio for trader\\r\\n    uint256 private _minMaintenanceMarginRatio;\\r\\n    // Minimum amount requirement when add liquidity\\r\\n    uint256 private _minAddLiquidity;\\r\\n    // Redemption fee ratio when removing liquidity\\r\\n    uint256 private _redemptionFeeRatio;\\r\\n    // Funding rate coefficient\\r\\n    uint256 private _fundingRateCoefficient;\\r\\n    // Minimum liquidation reward\\r\\n    uint256 private _minLiquidationReward;\\r\\n    // Maximum liquidation reward\\r\\n    uint256 private _maxLiquidationReward;\\r\\n    // Cutting ratio for liquidator\\r\\n    uint256 private _liquidationCutRatio;\\r\\n    // Price delay allowance in seconds\\r\\n    uint256 private _priceDelayAllowance;\\r\\n\\r\\n    // Recorded cumulative funding rate, overflow of this value is intended\\r\\n    int256  private _cumuFundingRate;\\r\\n    // Last block number when cumulative funding rate was recorded\\r\\n    uint256 private _cumuFundingRateBlock;\\r\\n    // Total liquidity pool holds\\r\\n    uint256 private _liquidity;\\r\\n    // Total net volume of all traders in the pool\\r\\n    int256  private _tradersNetVolume;\\r\\n    // Total cost of current traders net volume\\r\\n    // The cost for a long position is positive, and short position is negative\\r\\n    int256  private _tradersNetCost;\\r\\n\\r\\n    ////////////////////////////////////////\\r\\n    // Disallow high frequency trading\\r\\n    ////////////////////////////////////////\\r\\n    uint256 public minTradingInverval = 220;\\r\\n    mapping (address => uint256) public lastTradingTimestamp;\\r\\n\\r\\n    bool private _mutex;\\r\\n    // Locker to prevent reentry\\r\\n    modifier _lock_() {\\r\\n        require(!_mutex, \\\"PerpetualPool: reentry\\\");\\r\\n        _mutex = true;\\r\\n        _;\\r\\n        _mutex = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev A dummy constructor, which deos not initialize any storage variables\\r\\n     * A template will be deployed with no initialization and real pool will be cloned\\r\\n     * from this template (same as create_forwarder_to mechanism in Vyper),\\r\\n     * and use `initialize` to initialize all storage variables\\r\\n     */\\r\\n    constructor () {}\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPerpetualPool}.{initialize}\\r\\n     */\\r\\n    function initialize(\\r\\n        string memory symbol_,\\r\\n        address[5] calldata addresses_,\\r\\n        uint256[12] calldata parameters_\\r\\n    ) public override {\\r\\n        require(bytes(_symbol).length == 0 && _controller == address(0), \\\"PerpetualPool: already initialized\\\");\\r\\n\\r\\n        _controller = msg.sender;\\r\\n        _symbol = symbol_;\\r\\n\\r\\n        _bToken = IERC20(addresses_[0]);\\r\\n        _bDecimals = _bToken.decimals();\\r\\n        _pToken = IPToken(addresses_[1]);\\r\\n        _lToken = ILToken(addresses_[2]);\\r\\n        _oracle = IOracle(addresses_[3]);\\r\\n        _isContractOracle = _isContract(address(_oracle));\\r\\n        _liquidatorQualifier = ILiquidatorQualifier(addresses_[4]);\\r\\n\\r\\n        _multiplier = parameters_[0];\\r\\n        _feeRatio = parameters_[1];\\r\\n        _minPoolMarginRatio = parameters_[2];\\r\\n        _minInitialMarginRatio = parameters_[3];\\r\\n        _minMaintenanceMarginRatio = parameters_[4];\\r\\n        _minAddLiquidity = parameters_[5];\\r\\n        _redemptionFeeRatio = parameters_[6];\\r\\n        _fundingRateCoefficient = parameters_[7];\\r\\n        _minLiquidationReward = parameters_[8];\\r\\n        _maxLiquidationReward = parameters_[9];\\r\\n        _liquidationCutRatio = parameters_[10];\\r\\n        _priceDelayAllowance = parameters_[11];\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////////////\\r\\n    // Set minTradingInverval\\r\\n    ////////////////////////////////////////\\r\\n    function setMinTradingInterval(uint256 interval) public _controller_ {\\r\\n        minTradingInverval = interval;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IMigratablePool}.{approveMigration}\\r\\n     */\\r\\n    function approveMigration() public override _controller_ {\\r\\n        require(_migrationTimestamp != 0 && block.timestamp >= _migrationTimestamp, \\\"PerpetualPool: migrationTimestamp not met yet\\\");\\r\\n        // approve new pool to pull all base tokens from this pool\\r\\n        _bToken.safeApprove(_migrationDestination, uint256(-1));\\r\\n        // set pToken/lToken to new pool, after redirecting pToken/lToken to new pool, this pool will stop functioning\\r\\n        _pToken.setPool(_migrationDestination);\\r\\n        _lToken.setPool(_migrationDestination);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IMigratablePool}.{executeMigration}\\r\\n     */\\r\\n    function executeMigration(address source) public override _controller_ {\\r\\n        uint256 migrationTimestamp_ = IPerpetualPool(source).migrationTimestamp();\\r\\n        address migrationDestination_ = IPerpetualPool(source).migrationDestination();\\r\\n        require(migrationTimestamp_ != 0 && block.timestamp >= migrationTimestamp_, \\\"PerpetualPool: migrationTimestamp not met yet\\\");\\r\\n        require(migrationDestination_ == address(this), \\\"PerpetualPool: executeMigration to not destination pool\\\");\\r\\n\\r\\n        // migrate base token\\r\\n        _bToken.safeTransferFrom(source, address(this), _bToken.balanceOf(source));\\r\\n\\r\\n        // migrate state values from PerpetualPool\\r\\n        (int256 cumuFundingRate, uint256 cumuFundingRateBlock, uint256 liquidity, int256 tradersNetVolume, int256 tradersNetCost) = IPerpetualPool(source).getStateValues();\\r\\n        _cumuFundingRate = cumuFundingRate;\\r\\n        _cumuFundingRateBlock = cumuFundingRateBlock;\\r\\n        _liquidity = liquidity;\\r\\n        _tradersNetVolume = tradersNetVolume;\\r\\n        _tradersNetCost = tradersNetCost;\\r\\n\\r\\n        // // migrate state values from PreMiningPool\\r\\n        // _liquidity = IPreMiningPool(source).getStateValues();\\r\\n\\r\\n        emit ExecuteMigration(migrationTimestamp_, source, address(this));\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPerpetualPool}.{symbol}\\r\\n     */\\r\\n    function symbol() public view override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPerpetualPool}.{getAddresses}\\r\\n     */\\r\\n    function getAddresses() public view override returns (\\r\\n        address bToken,\\r\\n        address pToken,\\r\\n        address lToken,\\r\\n        address oracle,\\r\\n        address liquidatorQualifier\\r\\n    ) {\\r\\n        return (\\r\\n            address(_bToken),\\r\\n            address(_pToken),\\r\\n            address(_lToken),\\r\\n            address(_oracle),\\r\\n            address(_liquidatorQualifier)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPerpetualPool}.{getParameters}\\r\\n     */\\r\\n    function getParameters() public view override returns (\\r\\n        uint256 multiplier,\\r\\n        uint256 feeRatio,\\r\\n        uint256 minPoolMarginRatio,\\r\\n        uint256 minInitialMarginRatio,\\r\\n        uint256 minMaintenanceMarginRatio,\\r\\n        uint256 minAddLiquidity,\\r\\n        uint256 redemptionFeeRatio,\\r\\n        uint256 fundingRateCoefficient,\\r\\n        uint256 minLiquidationReward,\\r\\n        uint256 maxLiquidationReward,\\r\\n        uint256 liquidationCutRatio,\\r\\n        uint256 priceDelayAllowance\\r\\n    ) {\\r\\n        return (\\r\\n            _multiplier,\\r\\n            _feeRatio,\\r\\n            _minPoolMarginRatio,\\r\\n            _minInitialMarginRatio,\\r\\n            _minMaintenanceMarginRatio,\\r\\n            _minAddLiquidity,\\r\\n            _redemptionFeeRatio,\\r\\n            _fundingRateCoefficient,\\r\\n            _minLiquidationReward,\\r\\n            _maxLiquidationReward,\\r\\n            _liquidationCutRatio,\\r\\n            _priceDelayAllowance\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPerpetualPool}.{getStateValues}\\r\\n     */\\r\\n    function getStateValues() public view override returns (\\r\\n        int256 cumuFundingRate,\\r\\n        uint256 cumuFundingRateBlock,\\r\\n        uint256 liquidity,\\r\\n        int256 tradersNetVolume,\\r\\n        int256 tradersNetCost\\r\\n    ) {\\r\\n        return (\\r\\n            _cumuFundingRate,\\r\\n            _cumuFundingRateBlock,\\r\\n            _liquidity,\\r\\n            _tradersNetVolume,\\r\\n            _tradersNetCost\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    //================================================================================\\r\\n    // Pool interactions\\r\\n    //================================================================================\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPerpetualPool}.{tradeWithMargin}\\r\\n     */\\r\\n    function tradeWithMargin(int256 tradeVolume, uint256 bAmount) public override {\\r\\n        _updatePriceFromOracle();\\r\\n        _tradeWithMargin(tradeVolume, bAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPerpetualPool}.{tradeWithMargin}\\r\\n     */\\r\\n    function tradeWithMargin(\\r\\n        int256 tradeVolume,\\r\\n        uint256 bAmount,\\r\\n        uint256 timestamp,\\r\\n        uint256 price,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public override {\\r\\n        _updatePriceWithSignature(timestamp, price, v, r, s);\\r\\n        _tradeWithMargin(tradeVolume, bAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPerpetualPool}.{trade}\\r\\n     */\\r\\n    function trade(int256 tradeVolume) public override {\\r\\n        _updatePriceFromOracle();\\r\\n        _trade(tradeVolume);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPerpetualPool}.{trade}\\r\\n     */\\r\\n    function trade(\\r\\n        int256 tradeVolume,\\r\\n        uint256 timestamp,\\r\\n        uint256 price,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public override {\\r\\n        _updatePriceWithSignature(timestamp, price, v, r, s);\\r\\n        _trade(tradeVolume);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPerpetualPool}.{depositMargin}\\r\\n     */\\r\\n    function depositMargin(uint256 bAmount) public override {\\r\\n        _updatePriceFromOracle();\\r\\n        _depositMargin(bAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPerpetualPool}.{depositMargin}\\r\\n     */\\r\\n    function depositMargin(\\r\\n        uint256 bAmount,\\r\\n        uint256 timestamp,\\r\\n        uint256 price,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public override {\\r\\n        _updatePriceWithSignature(timestamp, price, v, r, s);\\r\\n        _depositMargin(bAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPerpetualPool}.{withdrawMargin}\\r\\n     */\\r\\n    function withdrawMargin(uint256 bAmount) public override {\\r\\n        _updatePriceFromOracle();\\r\\n        _withdrawMargin(bAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPerpetualPool}.{withdrawMargin}\\r\\n     */\\r\\n    function withdrawMargin(\\r\\n        uint256 bAmount,\\r\\n        uint256 timestamp,\\r\\n        uint256 price,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public override {\\r\\n        _updatePriceWithSignature(timestamp, price, v, r, s);\\r\\n        _withdrawMargin(bAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPerpetualPool}.{addLiquidity}\\r\\n     */\\r\\n    function addLiquidity(uint256 bAmount) public override {\\r\\n        _updatePriceFromOracle();\\r\\n        _addLiquidity(bAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPerpetualPool}.{addLiquidity}\\r\\n     */\\r\\n    function addLiquidity(\\r\\n        uint256 bAmount,\\r\\n        uint256 timestamp,\\r\\n        uint256 price,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public override {\\r\\n        _updatePriceWithSignature(timestamp, price, v, r, s);\\r\\n        _addLiquidity(bAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPerpetualPool}.{removeLiquidity}\\r\\n     */\\r\\n    function removeLiquidity(uint256 lShares) public override {\\r\\n        _updatePriceFromOracle();\\r\\n        _removeLiquidity(lShares);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPerpetualPool}.{removeLiquidity}\\r\\n     */\\r\\n    function removeLiquidity(\\r\\n        uint256 lShares,\\r\\n        uint256 timestamp,\\r\\n        uint256 price,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public override {\\r\\n        _updatePriceWithSignature(timestamp, price, v, r, s);\\r\\n        _removeLiquidity(lShares);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPerpetualPool}.{liquidate}\\r\\n     */\\r\\n    function liquidate(address owner) public override {\\r\\n        require(\\r\\n            address(_liquidatorQualifier) == address(0) || _liquidatorQualifier.isQualifiedLiquidator(msg.sender),\\r\\n            \\\"PerpetualPool: not quanlified liquidator\\\"\\r\\n        );\\r\\n        _updatePriceFromOracle();\\r\\n        _liquidate(owner, block.timestamp, _price);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IPerpetualPool}.{liquidate}\\r\\n     *\\r\\n     * A price signature with timestamp after position's lastUpdateTimestamp\\r\\n     * will be a valid liquidation price\\r\\n     */\\r\\n    function liquidate(\\r\\n        address owner,\\r\\n        uint256 timestamp,\\r\\n        uint256 price,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public override {\\r\\n        require(\\r\\n            address(_liquidatorQualifier) == address(0) || _liquidatorQualifier.isQualifiedLiquidator(msg.sender),\\r\\n            \\\"PerpetualPool: not quanlified liquidator\\\"\\r\\n        );\\r\\n        _checkPriceSignature(timestamp, price, v, r, s);\\r\\n        _liquidate(owner, timestamp, price);\\r\\n    }\\r\\n\\r\\n\\r\\n    //================================================================================\\r\\n    // Pool critic logics\\r\\n    //================================================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Low level tradeWithMargin implementation\\r\\n     * _lock_ is not need in this function, as sub-functions will apply _lock_\\r\\n     */\\r\\n    function _tradeWithMargin(int256 tradeVolume, uint256 bAmount) internal {\\r\\n        if (bAmount == 0) {\\r\\n            _trade(tradeVolume);\\r\\n        } else if (tradeVolume == 0) {\\r\\n            _depositMargin(bAmount);\\r\\n        } else {\\r\\n            _depositMargin(bAmount);\\r\\n            _trade(tradeVolume);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Low level trade implementation\\r\\n     */\\r\\n    function _trade(int256 tradeVolume) internal _lock_ {\\r\\n        require(tradeVolume != 0, \\\"PerpetualPool: trade with 0 volume\\\");\\r\\n        require(tradeVolume.reformat(0) == tradeVolume, \\\"PerpetualPool: trade volume must be int\\\");\\r\\n\\r\\n        ////////////////////////////////////////\\r\\n        // Disallow high frequency trading\\r\\n        ////////////////////////////////////////\\r\\n        require(\\r\\n            block.timestamp - lastTradingTimestamp[msg.sender] >= minTradingInverval,\\r\\n            'PerpetualPool: trade too frequently'\\r\\n        );\\r\\n        lastTradingTimestamp[msg.sender] = block.timestamp;\\r\\n\\r\\n        // get trader's position, trader must have a position token to call this function\\r\\n        (int256 volume, int256 cost, int256 lastCumuFundingRate, uint256 margin,) = _pToken.getPosition(msg.sender);\\r\\n\\r\\n        // update cumulative funding rate\\r\\n        _updateCumuFundingRate(_price);\\r\\n\\r\\n        // calculate trader's funding fee\\r\\n        int256 funding = volume.mul(_cumuFundingRate - lastCumuFundingRate);\\r\\n\\r\\n        // calculate trading fee for this transaction\\r\\n        int256 curCost = tradeVolume.mul(_price).mul(_multiplier);\\r\\n        uint256 fee = _feeRatio.mul(curCost.abs());\\r\\n\\r\\n        // calculate realized cost\\r\\n        int256 realizedCost = 0;\\r\\n        if ((volume >= 0 && tradeVolume >= 0) || (volume <= 0 && tradeVolume <= 0)) {\\r\\n            // open in same direction, no realized cost\\r\\n        } else if (volume.abs() <= tradeVolume.abs()) {\\r\\n            // previous position is flipped\\r\\n            realizedCost = curCost.mul(volume.abs()).div(tradeVolume.abs()).add(cost);\\r\\n        } else {\\r\\n            // previous position is partially closed\\r\\n            realizedCost = cost.mul(tradeVolume.abs()).div(volume.abs()).add(curCost);\\r\\n        }\\r\\n\\r\\n        // total paid in this transaction, could be negative if there is realized pnl\\r\\n        // this paid amount should be a valid value in base token decimals representation\\r\\n        int256 paid = funding.add(fee).add(realizedCost).reformat(_bDecimals);\\r\\n\\r\\n        // settlements\\r\\n        volume = volume.add(tradeVolume);\\r\\n        cost = cost.add(curCost).sub(realizedCost);\\r\\n        margin = margin.sub(paid);\\r\\n        _tradersNetVolume = _tradersNetVolume.add(tradeVolume);\\r\\n        _tradersNetCost = _tradersNetCost.add(curCost).sub(realizedCost);\\r\\n        _liquidity = _liquidity.add(paid);\\r\\n        lastCumuFundingRate = _cumuFundingRate;\\r\\n\\r\\n        // check margin requirements\\r\\n        require(volume == 0 || _calculateMarginRatio(volume, cost, _price, margin) >= _minInitialMarginRatio,\\r\\n                \\\"PerpetualPool: trader insufficient margin\\\");\\r\\n        require(_tradersNetVolume == 0 || _calculateMarginRatio(_tradersNetVolume.neg(), _tradersNetCost.neg(), _price, _liquidity) >= _minPoolMarginRatio,\\r\\n                \\\"PerpetualPool: pool insufficient liquidity\\\");\\r\\n\\r\\n        _pToken.update(msg.sender, volume, cost, lastCumuFundingRate, margin, block.timestamp);\\r\\n        emit Trade(msg.sender, tradeVolume, _price);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Low level depositMargin implementation\\r\\n     */\\r\\n    function _depositMargin(uint256 bAmount) internal _lock_ {\\r\\n        require(bAmount != 0, \\\"PerpetualPool: deposit zero margin\\\");\\r\\n        require(bAmount.reformat(_bDecimals) == bAmount, \\\"PerpetualPool: _depositMargin bAmount not valid\\\");\\r\\n\\r\\n        bAmount = _deflationCompatibleSafeTransferFrom(msg.sender, address(this), bAmount);\\r\\n        if (!_pToken.exists(msg.sender)) {\\r\\n            _pToken.mint(msg.sender, bAmount);\\r\\n        } else {\\r\\n            (int256 volume, int256 cost, int256 lastCumuFundingRate, uint256 margin,) = _pToken.getPosition(msg.sender);\\r\\n            margin = margin.add(bAmount);\\r\\n            _pToken.update(msg.sender, volume, cost, lastCumuFundingRate, margin, block.timestamp);\\r\\n        }\\r\\n        emit DepositMargin(msg.sender, bAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Low level withdrawMargin implementation\\r\\n     */\\r\\n    function _withdrawMargin(uint256 bAmount) internal _lock_ {\\r\\n        require(bAmount != 0, \\\"PerpetualPool: withdraw zero margin\\\");\\r\\n        require(bAmount.reformat(_bDecimals) == bAmount, \\\"PerpetualPool: _withdrawMargin bAmount not valid\\\");\\r\\n\\r\\n        (int256 volume, int256 cost, int256 lastCumuFundingRate, uint256 margin,) = _pToken.getPosition(msg.sender);\\r\\n        _updateCumuFundingRate(_price);\\r\\n\\r\\n        int256 funding = volume.mul(_cumuFundingRate - lastCumuFundingRate).reformat(_bDecimals);\\r\\n        margin = margin.sub(funding).sub(bAmount);\\r\\n        _liquidity = _liquidity.add(funding);\\r\\n        lastCumuFundingRate = _cumuFundingRate;\\r\\n\\r\\n        require(volume == 0 || _calculateMarginRatio(volume, cost, _price, margin) >= _minInitialMarginRatio,\\r\\n                \\\"PerpetualPool: withdraw cause insufficient margin\\\");\\r\\n\\r\\n        _pToken.update(msg.sender, volume, cost, lastCumuFundingRate, margin, block.timestamp);\\r\\n        _bToken.safeTransfer(msg.sender, bAmount.rescale(_bDecimals));\\r\\n        emit WithdrawMargin(msg.sender, bAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Low level addLiquidity implementation\\r\\n     */\\r\\n    function _addLiquidity(uint256 bAmount) internal _lock_ {\\r\\n        require(bAmount >= _minAddLiquidity, \\\"PerpetualPool: add liquidity less than minimum requirement\\\");\\r\\n        require(bAmount.reformat(_bDecimals) == bAmount, \\\"PerpetualPool: _addLiquidity bAmount not valid\\\");\\r\\n\\r\\n        _updateCumuFundingRate(_price);\\r\\n\\r\\n        bAmount = _deflationCompatibleSafeTransferFrom(msg.sender, address(this), bAmount);\\r\\n\\r\\n        uint256 poolDynamicEquity = _liquidity.add(_tradersNetCost.sub(_tradersNetVolume.mul(_price).mul(_multiplier)));\\r\\n        uint256 totalSupply = _lToken.totalSupply();\\r\\n        uint256 lShares;\\r\\n        if (totalSupply == 0) {\\r\\n            lShares = bAmount;\\r\\n        } else {\\r\\n            lShares = bAmount.mul(totalSupply).div(poolDynamicEquity);\\r\\n        }\\r\\n\\r\\n        _lToken.mint(msg.sender, lShares);\\r\\n        _liquidity = _liquidity.add(bAmount);\\r\\n\\r\\n        emit AddLiquidity(msg.sender, lShares, bAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Low level removeLiquidity implementation\\r\\n     */\\r\\n    function _removeLiquidity(uint256 lShares) internal _lock_ {\\r\\n        require(lShares > 0, \\\"PerpetualPool: remove 0 liquidity\\\");\\r\\n        uint256 balance = _lToken.balanceOf(msg.sender);\\r\\n        require(lShares == balance || balance.sub(lShares) >= 10**18, \\\"PerpetualPool: remaining liquidity shares must be 0 or at least 1\\\");\\r\\n\\r\\n        _updateCumuFundingRate(_price);\\r\\n\\r\\n        uint256 poolDynamicEquity = _liquidity.add(_tradersNetCost.sub(_tradersNetVolume.mul(_price).mul(_multiplier)));\\r\\n        uint256 totalSupply = _lToken.totalSupply();\\r\\n        uint256 bAmount = lShares.mul(poolDynamicEquity).div(totalSupply);\\r\\n        if (lShares < totalSupply) {\\r\\n            bAmount = bAmount.sub(bAmount.mul(_redemptionFeeRatio));\\r\\n        }\\r\\n        bAmount = bAmount.reformat(_bDecimals);\\r\\n\\r\\n        _liquidity = _liquidity.sub(bAmount);\\r\\n        require(_tradersNetVolume == 0 || _calculateMarginRatio(_tradersNetVolume.neg(), _tradersNetCost.neg(), _price, _liquidity) >= _minPoolMarginRatio,\\r\\n                \\\"PerpetualPool: remove liquidity cause pool insufficient liquidity\\\");\\r\\n\\r\\n        _lToken.burn(msg.sender, lShares);\\r\\n        _bToken.safeTransfer(msg.sender, bAmount.rescale(_bDecimals));\\r\\n\\r\\n        emit RemoveLiquidity(msg.sender, lShares, bAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Low level liquidate implementation\\r\\n     */\\r\\n    function _liquidate(address owner, uint256 timestamp, uint256 price) internal _lock_ {\\r\\n        (int256 volume, int256 cost, , uint256 margin, uint256 lastUpdateTimestamp) = _pToken.getPosition(owner);\\r\\n        require(timestamp > lastUpdateTimestamp, \\\"PerpetualPool: liquidate price is before position timestamp\\\");\\r\\n\\r\\n        int256 pnl = volume.mul(price).mul(_multiplier).sub(cost);\\r\\n        require(pnl.add(margin) <= 0 || _calculateMarginRatio(volume, cost, price, margin) < _minMaintenanceMarginRatio, \\\"PerpetualPool: cannot liquidate\\\");\\r\\n\\r\\n        _liquidity = _liquidity.add(margin);\\r\\n        _tradersNetVolume = _tradersNetVolume.sub(volume);\\r\\n        _tradersNetCost = _tradersNetCost.sub(cost);\\r\\n        _pToken.update(owner, 0, 0, 0, 0, 0);\\r\\n\\r\\n        uint256 reward;\\r\\n        if (margin <= _minLiquidationReward) {\\r\\n            reward = _minLiquidationReward;\\r\\n        } else if (margin >= _maxLiquidationReward) {\\r\\n            reward = _maxLiquidationReward;\\r\\n        } else {\\r\\n            reward = margin.sub(_minLiquidationReward).mul(_liquidationCutRatio).add(_minLiquidationReward);\\r\\n        }\\r\\n        reward = reward.reformat(_bDecimals);\\r\\n\\r\\n        _liquidity = _liquidity.sub(reward);\\r\\n        _bToken.safeTransfer(msg.sender, reward.rescale(_bDecimals));\\r\\n\\r\\n        emit Liquidate(owner, volume, cost, margin, timestamp, price, msg.sender, reward);\\r\\n    }\\r\\n\\r\\n\\r\\n    //================================================================================\\r\\n    // Helpers\\r\\n    //================================================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an address is a contract\\r\\n     */\\r\\n    function _isContract(address addr) internal view returns (bool) {\\r\\n        uint32 size;\\r\\n        assembly {\\r\\n            size := extcodesize(addr)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                            margin + unrealizedPnl\\r\\n     *@dev margin ratio = --------------------------------------\\r\\n     *                       abs(volume) * price * multiplier\\r\\n     *\\r\\n     * volume cannot be zero\\r\\n     */\\r\\n    function _calculateMarginRatio(int256 volume, int256 cost, uint256 price, uint256 margin)\\r\\n        internal view returns (uint256)\\r\\n    {\\r\\n        int256 value = volume.mul(price).mul(_multiplier);\\r\\n        uint256 ratio = margin.add(value.sub(cost)).div(value.abs());\\r\\n        return ratio;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *                          _tradersNetVolume * price * multiplier\\r\\n     * @dev rate per block = ------------------------------------------- * coefficient\\r\\n     *                                      _liquidity\\r\\n     */\\r\\n    function _updateCumuFundingRate(uint256 price) private {\\r\\n        if (block.number > _cumuFundingRateBlock) {\\r\\n            int256 rate;\\r\\n            if (_liquidity != 0) {\\r\\n                rate = _tradersNetVolume.mul(price).mul(_multiplier).mul(_fundingRateCoefficient).div(_liquidity);\\r\\n            } else {\\r\\n                rate = 0;\\r\\n            }\\r\\n            int256 delta = rate * (int256(block.number.sub(_cumuFundingRateBlock))); // overflow is intended\\r\\n            _cumuFundingRate += delta; // overflow is intended\\r\\n            _cumuFundingRateBlock = block.number;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check price signature\\r\\n     */\\r\\n    function _checkPriceSignature(uint256 timestamp, uint256 price, uint8 v, bytes32 r, bytes32 s)\\r\\n        internal view\\r\\n    {\\r\\n        require(v == 27 || v == 28, \\\"PerpetualPool: v not valid\\\");\\r\\n        bytes32 message = keccak256(abi.encodePacked(_symbol, timestamp, price));\\r\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", message));\\r\\n        address signer = ecrecover(hash, v, r, s);\\r\\n        require(signer == address(_oracle), \\\"PerpetualPool: price not signed by oracle\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check price signature to verify if price is authorized, and update _price\\r\\n     * only check/update once for one block\\r\\n     */\\r\\n    function _updatePriceWithSignature(\\r\\n        uint256 timestamp, uint256 price, uint8 v, bytes32 r, bytes32 s\\r\\n    ) internal\\r\\n    {\\r\\n        if (block.number != _lastPriceBlockNumber) {\\r\\n            require(timestamp >= _lastPriceTimestamp, \\\"PerpetualPool: price is not the newest\\\");\\r\\n            require(block.timestamp - timestamp <= _priceDelayAllowance, \\\"PerpetualPool: price is older than allowance\\\");\\r\\n\\r\\n            _checkPriceSignature(timestamp, price, v, r, s);\\r\\n\\r\\n            _price = price;\\r\\n            _lastPriceTimestamp = timestamp;\\r\\n            _lastPriceBlockNumber = block.number;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update price from on-chain Oracle\\r\\n     */\\r\\n    function _updatePriceFromOracle() internal {\\r\\n        require(_isContractOracle, \\\"PerpetualPool: wrong type of orcale\\\");\\r\\n        if (block.number != _lastPriceBlockNumber) {\\r\\n            _price = _oracle.getPrice();\\r\\n            _lastPriceBlockNumber = block.number;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev safeTransferFrom for base token with deflation protection\\r\\n     * Returns the actual received amount in base token (as base 10**18)\\r\\n     */\\r\\n    function _deflationCompatibleSafeTransferFrom(address from, address to, uint256 amount) internal returns (uint256) {\\r\\n        uint256 preBalance = _bToken.balanceOf(to);\\r\\n        _bToken.safeTransferFrom(from, to, amount.rescale(_bDecimals));\\r\\n        uint256 curBalance = _bToken.balanceOf(to);\\r\\n\\r\\n        uint256 a = curBalance.sub(preBalance);\\r\\n        uint256 b = 10**18;\\r\\n        uint256 c = a * b;\\r\\n        require(c / b == a, \\\"PreMiningPool: _deflationCompatibleSafeTransferFrom multiplication overflows\\\");\\r\\n\\r\\n        uint256 actualReceivedAmount = c / (10 ** _bDecimals);\\r\\n        return actualReceivedAmount;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `amount` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `amount` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `amount` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the name.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\r\\n     * called.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the allowance mechanism.\\r\\n     * `amount` is then deducted from the caller's allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IPToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\nimport \\\"./IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Deri Protocol non-fungible position token interface\\r\\n */\\r\\ninterface IPToken is IERC721 {\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner`'s position is updated\\r\\n     */\\r\\n    event Update(\\r\\n        address indexed owner,\\r\\n        int256 volume,\\r\\n        int256 cost,\\r\\n        int256 lastCumuFundingRate,\\r\\n        uint256 margin,\\r\\n        uint256 lastUpdateTimestamp\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Position struct\\r\\n     */\\r\\n    struct Position {\\r\\n        // Position volume, long is positive and short is negative\\r\\n        int256 volume;\\r\\n        // Position cost, long position cost is positive, short position cost is negative\\r\\n        int256 cost;\\r\\n        // The last cumuFundingRate since last funding settlement for this position\\r\\n        // The overflow for this value is intended\\r\\n        int256 lastCumuFundingRate;\\r\\n        // Margin associated with this position\\r\\n        uint256 margin;\\r\\n        // Last timestamp this position updated\\r\\n        uint256 lastUpdateTimestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set pool address of position token\\r\\n     * pool is the only controller of this contract\\r\\n     * can only be called by current pool\\r\\n     */\\r\\n    function setPool(address newPool) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns address of current pool\\r\\n     */\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection name\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total number of ever minted position tokens, including those burned\\r\\n     */\\r\\n    function totalMinted() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total number of existent position tokens\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if `owner` owns a position token in this contract\\r\\n     */\\r\\n    function exists(address owner) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if position token of `tokenId` exists\\r\\n     */\\r\\n    function exists(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the position of owner `owner`\\r\\n     *\\r\\n     * `owner` must exist\\r\\n     */\\r\\n    function getPosition(address owner) external view returns (\\r\\n        int256 volume,\\r\\n        int256 cost,\\r\\n        int256 lastCumuFundingRate,\\r\\n        uint256 margin,\\r\\n        uint256 lastUpdateTimestamp\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the position of token `tokenId`\\r\\n     *\\r\\n     * `tokenId` must exist\\r\\n     */\\r\\n    function getPosition(uint256 tokenId) external view returns (\\r\\n        int256 volume,\\r\\n        int256 cost,\\r\\n        int256 lastCumuFundingRate,\\r\\n        uint256 margin,\\r\\n        uint256 lastUpdateTimestamp\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Mint a position token for `owner` with intial margin of `margin`\\r\\n     *\\r\\n     * Can only be called by pool\\r\\n     * `owner` cannot be zero address\\r\\n     * `owner` must not exist before calling\\r\\n     */\\r\\n    function mint(address owner, uint256 margin) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Update the position token for `owner`\\r\\n     *\\r\\n     * Can only be called by pool\\r\\n     * `owner` must exist\\r\\n     */\\r\\n    function update(\\r\\n        address owner,\\r\\n        int256 volume,\\r\\n        int256 cost,\\r\\n        int256 lastCumuFundingRate,\\r\\n        uint256 margin,\\r\\n        uint256 lastUpdateTimestamp\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Burn the position token owned of `owner`\\r\\n     *\\r\\n     * Can only be called by pool\\r\\n     * `owner` must exist\\r\\n     */\\r\\n    function burn(address owner) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/ILToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Deri Protocol liquidity provider token interface\\r\\n */\\r\\ninterface ILToken is IERC20 {\\r\\n\\r\\n    /**\\r\\n     * @dev Set the pool address of this LToken\\r\\n     * pool is the only controller of this contract\\r\\n     * can only be called by current pool\\r\\n     */\\r\\n    function setPool(address newPool) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns address of pool\\r\\n     */\\r\\n    function pool() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Mint LToken to `account` of `amount`\\r\\n     *\\r\\n     * Can only be called by pool\\r\\n     * `account` cannot be zero address\\r\\n     */\\r\\n    function mint(address account, uint256 amount) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Burn `amount` LToken of `account`\\r\\n     *\\r\\n     * Can only be called by pool\\r\\n     * `account` cannot be zero address\\r\\n     * `account` must owns at least `amount` LToken\\r\\n     */\\r\\n    function burn(address account, uint256 amount) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Oracle interface\\r\\n */\\r\\ninterface IOracle {\\r\\n\\r\\n    function getPrice() external view returns (uint256);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/ILiquidatorQualifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Deri Protocol liquidator qualifier interface\\r\\n */\\r\\ninterface ILiquidatorQualifier {\\r\\n\\r\\n    /**\\r\\n     * @dev Check if `liquidator` is a qualified liquidator to call the `liquidate` function in PerpetualPool\\r\\n     */\\r\\n    function isQualifiedLiquidator(address liquidator) external view returns (bool);\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IMigratablePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Deri Protocol migratable pool interface\\r\\n */\\r\\ninterface IMigratablePool {\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when migration is prepared\\r\\n     * `source` pool will be migrated to `target` pool after `migrationTimestamp`\\r\\n     */\\r\\n    event PrepareMigration(uint256 migrationTimestamp, address source, address target);\\r\\n\\r\\n    /**\\r\\n     * @dev Emmited when migration is executed\\r\\n     * `source` pool is migrated to `target` pool\\r\\n     */\\r\\n    event ExecuteMigration(uint256 migrationTimestamp, address source, address target);\\r\\n\\r\\n    /**\\r\\n     * @dev Set controller to `newController`\\r\\n     *\\r\\n     * can only be called by current controller or the controller has not been set\\r\\n     */\\r\\n    function setController(address newController) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns address of current controller\\r\\n     */\\r\\n    function controller() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the migrationTimestamp of this pool, zero means not set\\r\\n     */\\r\\n    function migrationTimestamp() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the destination pool this pool will migrate to after grace period\\r\\n     * zero address means not set\\r\\n     */\\r\\n    function migrationDestination() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Prepare a migration from this pool to `newPool` with `graceDays` as grace period\\r\\n     * `graceDays` must be at least 3 days from now, allow users to verify the `newPool` code\\r\\n     *\\r\\n     * can only be called by controller\\r\\n     */\\r\\n    function prepareMigration(address newPool, uint256 graceDays) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Approve migration to `newPool` when grace period ends\\r\\n     * after approvement, current pool will stop functioning\\r\\n     *\\r\\n     * can only be called by controller\\r\\n     */\\r\\n    function approveMigration() external;\\r\\n\\r\\n    /**\\r\\n     * @dev Called from the `newPool` to migrate from `source` pool\\r\\n     * the grace period of `source` pool must ends\\r\\n     * current pool must be the destination pool set before grace period in the `source` pool\\r\\n     *\\r\\n     * can only be called by controller\\r\\n     */\\r\\n    function executeMigration(address source) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IPreMiningPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\nimport \\\"./IMigratablePool.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Deri Protocol PreMining PerpetualPool Interface\\r\\n */\\r\\ninterface IPreMiningPool is IMigratablePool {\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` add liquidity of `bAmount`,\\r\\n     * and receive `lShares` liquidity token\\r\\n     */\\r\\n    event AddLiquidity(address indexed owner, uint256 lShares, uint256 bAmount);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` burn `lShares` of liquidity token,\\r\\n     * and receive `bAmount` in base token\\r\\n     */\\r\\n    event RemoveLiquidity(address indexed owner, uint256 lShares, uint256 bAmount);\\r\\n\\r\\n    /**\\r\\n     * @dev Initialize pool\\r\\n     *\\r\\n     * addresses:\\r\\n     *      bToken\\r\\n     *      lToken\\r\\n     *\\r\\n     * parameters:\\r\\n     *      minAddLiquidity\\r\\n     *      redemptionFeeRatio\\r\\n     */\\r\\n    function initialize(\\r\\n        string memory symbol_,\\r\\n        address[2] calldata addresses_,\\r\\n        uint256[2] calldata parameters_\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns trading symbol\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns addresses of (bToken, pToken, lToken, oracle) in this pool\\r\\n     */\\r\\n    function getAddresses() external view returns (\\r\\n        address bToken,\\r\\n        address lToken\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns parameters of this pool\\r\\n     */\\r\\n    function getParameters() external view returns (\\r\\n        uint256 minAddLiquidity,\\r\\n        uint256 redemptionFeeRatio\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns currents state values of this pool\\r\\n     */\\r\\n    function getStateValues() external view returns (\\r\\n        uint256 liquidity\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Add liquidity of `bAmount` in base token\\r\\n     *\\r\\n     * New liquidity provider token will be issued to the provider\\r\\n     */\\r\\n    function addLiquidity(uint256 bAmount) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Remove `lShares` of liquidity provider token\\r\\n     *\\r\\n     * The liquidity provider token will be burned and\\r\\n     * the corresponding amount in base token will be sent to provider\\r\\n     */\\r\\n    function removeLiquidity(uint256 lShares) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IPerpetualPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\nimport \\\"./IMigratablePool.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Deri Protocol PerpetualPool Interface\\r\\n */\\r\\ninterface IPerpetualPool is IMigratablePool {\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` traded `tradeVolume` at `price` in pool\\r\\n     */\\r\\n    event Trade(address indexed owner, int256 tradeVolume, uint256 price);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` deposit margin of `bAmount` in base token\\r\\n     */\\r\\n    event DepositMargin(address indexed owner, uint256 bAmount);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` withdraw margin of `bAmount` in base token\\r\\n     */\\r\\n    event WithdrawMargin(address indexed owner, uint256 bAmount);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` add liquidity of `bAmount`,\\r\\n     * and receive `lShares` liquidity token\\r\\n     */\\r\\n    event AddLiquidity(address indexed owner, uint256 lShares, uint256 bAmount);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` burn `lShares` of liquidity token,\\r\\n     * and receive `bAmount` in base token\\r\\n     */\\r\\n    event RemoveLiquidity(address indexed owner, uint256 lShares, uint256 bAmount);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner`'s position is liquidated\\r\\n     */\\r\\n    event Liquidate(\\r\\n        address indexed owner,\\r\\n        int256 volume,\\r\\n        int256 cost,\\r\\n        uint256 margin,\\r\\n        uint256 timestamp,\\r\\n        uint256 price,\\r\\n        address liquidator,\\r\\n        uint256 reward\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initialize pool\\r\\n     *\\r\\n     * addresses:\\r\\n     *      bToken\\r\\n     *      pToken\\r\\n     *      lToken\\r\\n     *      oracle\\r\\n     *      liquidatorQualifier\\r\\n     *\\r\\n     * parameters:\\r\\n     *      multiplier\\r\\n     *      feeRatio\\r\\n     *      minPoolMarginRatio\\r\\n     *      minInitialMarginRatio\\r\\n     *      minMaintenanceMarginRatio\\r\\n     *      minAddLiquidity\\r\\n     *      redemptionFeeRatio\\r\\n     *      fundingRateCoefficient\\r\\n     *      minLiquidationReward\\r\\n     *      maxLiquidationReward\\r\\n     *      liquidationCutRatio\\r\\n     *      priceDelayAllowance\\r\\n     */\\r\\n    function initialize(\\r\\n        string memory symbol_,\\r\\n        address[5] calldata addresses_,\\r\\n        uint256[12] calldata parameters_\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns trading symbol\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns addresses of (bToken, pToken, lToken, oracle) in this pool\\r\\n     */\\r\\n    function getAddresses() external view returns (\\r\\n        address bToken,\\r\\n        address pToken,\\r\\n        address lToken,\\r\\n        address oracle,\\r\\n        address liquidatorQualifier\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns parameters of this pool\\r\\n     */\\r\\n    function getParameters() external view returns (\\r\\n        uint256 multiplier,\\r\\n        uint256 feeRatio,\\r\\n        uint256 minPoolMarginRatio,\\r\\n        uint256 minInitialMarginRatio,\\r\\n        uint256 minMaintenanceMarginRatio,\\r\\n        uint256 minAddLiquidity,\\r\\n        uint256 redemptionFeeRatio,\\r\\n        uint256 fundingRateCoefficient,\\r\\n        uint256 minLiquidationReward,\\r\\n        uint256 maxLiquidationReward,\\r\\n        uint256 liquidationCutRatio,\\r\\n        uint256 priceDelayAllowance\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Returns currents state values of this pool\\r\\n     */\\r\\n    function getStateValues() external view returns (\\r\\n        int256 cumuFundingRate,\\r\\n        uint256 cumuFundingRateBlock,\\r\\n        uint256 liquidity,\\r\\n        int256 tradersNetVolume,\\r\\n        int256 tradersNetCost\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Trade `tradeVolume` with pool while deposit margin of `bAmount` in base token\\r\\n     * This function is the combination of `depositMargin` and `trade`\\r\\n     *\\r\\n     * The first version is implemented with an on-chain oracle contract\\r\\n     * The second version is implemented with off-chain price provider with signature\\r\\n     */\\r\\n    function tradeWithMargin(int256 tradeVolume, uint256 bAmount) external;\\r\\n    function tradeWithMargin(\\r\\n        int256 tradeVolume,\\r\\n        uint256 bAmount,\\r\\n        uint256 timestamp,\\r\\n        uint256 price,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Trade `tradeVolume` with pool\\r\\n     *\\r\\n     * A trader must hold a Position Token (with sufficient margin in PToken)\\r\\n     * before calling this function\\r\\n     *\\r\\n     * The first version is implemented with an on-chain oracle contract\\r\\n     * The second version is implemented with off-chain price provider with signature\\r\\n     */\\r\\n    function trade(int256 tradeVolume) external;\\r\\n    function trade(\\r\\n        int256 tradeVolume,\\r\\n        uint256 timestamp,\\r\\n        uint256 price,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Deposit margin of `bAmount` in base token\\r\\n     *\\r\\n     * If trader does not hold position token, a new position token will be minted\\r\\n     * to trader with supplied margin\\r\\n     * Otherwise, the position token of trader will be updated with added margin\\r\\n     *\\r\\n     * The first version is implemented with an on-chain oracle contract\\r\\n     * The second version is implemented with off-chain price provider with signature\\r\\n     */\\r\\n    function depositMargin(uint256 bAmount) external;\\r\\n    function depositMargin(\\r\\n        uint256 bAmount,\\r\\n        uint256 timestamp,\\r\\n        uint256 price,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw margin of `bAmount` in base token\\r\\n     *\\r\\n     * Trader must hold a position token\\r\\n     * If trader holds any open position in position token, the left margin after withdraw\\r\\n     * must be sufficient for the open position\\r\\n     *\\r\\n     * The first version is implemented with an on-chain oracle contract\\r\\n     * The second version is implemented with off-chain price provider with signature\\r\\n     */\\r\\n    function withdrawMargin(uint256 bAmount) external;\\r\\n    function withdrawMargin(\\r\\n        uint256 bAmount,\\r\\n        uint256 timestamp,\\r\\n        uint256 price,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Add liquidity of `bAmount` in base token\\r\\n     *\\r\\n     * New liquidity provider token will be issued to the provider\\r\\n     *\\r\\n     * The first version is implemented with an on-chain oracle contract\\r\\n     * The second version is implemented with off-chain price provider with signature\\r\\n     */\\r\\n    function addLiquidity(uint256 bAmount) external;\\r\\n    function addLiquidity(\\r\\n        uint256 bAmount,\\r\\n        uint256 timestamp,\\r\\n        uint256 price,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Remove `lShares` of liquidity provider token\\r\\n     *\\r\\n     * The liquidity provider token will be burned and\\r\\n     * the corresponding amount in base token will be sent to provider\\r\\n     *\\r\\n     * The first version is implemented with an on-chain oracle contract\\r\\n     * The second version is implemented with off-chain price provider with signature\\r\\n     */\\r\\n    function removeLiquidity(uint256 lShares) external;\\r\\n    function removeLiquidity(\\r\\n        uint256 lShares,\\r\\n        uint256 timestamp,\\r\\n        uint256 price,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Liquidate the position owned by `owner`\\r\\n     * Anyone can call this function to liquidate a position, as long as the liquidation line\\r\\n     * is touched, the liquidator will be rewarded\\r\\n     *\\r\\n     * The first version is implemented with an on-chain oracle contract\\r\\n     * The second version is implemented with off-chain price provider with signature\\r\\n     */\\r\\n    function liquidate(address owner) external;\\r\\n    function liquidate(\\r\\n        address owner,\\r\\n        uint256 timestamp,\\r\\n        uint256 price,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"../interface/IERC20.sol\\\";\\r\\nimport \\\"../math/UnsignedSafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using UnsignedSafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/math/MixedSafeMathWithUnit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Mixed safe math with base unit of 10**18\\r\\n */\\r\\nlibrary MixedSafeMathWithUnit {\\r\\n\\r\\n    uint256 constant UONE = 10**18;\\r\\n    uint256 constant UMAX = 2**255 - 1;\\r\\n\\r\\n    int256 constant IONE = 10**18;\\r\\n    int256 constant IMIN = -2**255;\\r\\n\\r\\n    //================================================================================\\r\\n    // Conversions\\r\\n    //================================================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Convert uint256 to int256\\r\\n     */\\r\\n    function utoi(uint256 a) internal pure returns (int256) {\\r\\n        require(a <= UMAX, \\\"MixedSafeMathWithUnit: convert uint256 to int256 overflow\\\");\\r\\n        int256 b = int256(a);\\r\\n        return b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Convert int256 to uint256\\r\\n     */\\r\\n    function itou(int256 a) internal pure returns (uint256) {\\r\\n        require(a >= 0, \\\"MixedSafeMathWithUnit: convert int256 to uint256 overflow\\\");\\r\\n        uint256 b = uint256(a);\\r\\n        return b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Take abs of int256\\r\\n     */\\r\\n    function abs(int256 a) internal pure returns (int256) {\\r\\n        require(a != IMIN, \\\"MixedSafeMathWithUnit: int256 abs overflow\\\");\\r\\n        if (a >= 0) {\\r\\n            return a;\\r\\n        } else {\\r\\n            return -a;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Take negation of int256\\r\\n     */\\r\\n    function neg(int256 a) internal pure returns (int256) {\\r\\n        require(a != IMIN, \\\"MixedSafeMathWithUnit: int256 negate overflow\\\");\\r\\n        return -a;\\r\\n    }\\r\\n\\r\\n    //================================================================================\\r\\n    // Rescale and reformat\\r\\n    //================================================================================\\r\\n\\r\\n    function _rescale(uint256 a, uint256 decimals1, uint256 decimals2)\\r\\n        internal pure returns (uint256)\\r\\n    {\\r\\n        uint256 scale1 = 10 ** decimals1;\\r\\n        uint256 scale2 = 10 ** decimals2;\\r\\n        uint256 b = a * scale2;\\r\\n        require(b / scale2 == a, \\\"MixedSafeMathWithUnit: rescale uint256 overflow\\\");\\r\\n        uint256 c = b / scale1;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function _rescale(int256 a, uint256 decimals1, uint256 decimals2)\\r\\n        internal pure returns (int256)\\r\\n    {\\r\\n        int256 scale1 = utoi(10 ** decimals1);\\r\\n        int256 scale2 = utoi(10 ** decimals2);\\r\\n        int256 b = a * scale2;\\r\\n        require(b / scale2 == a, \\\"MixedSafeMathWithUnit: rescale int256 overflow\\\");\\r\\n        int256 c = b / scale1;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Rescales a value from 10**18 base to 10**decimals base\\r\\n     */\\r\\n    function rescale(uint256 a, uint256 decimals) internal pure returns (uint256) {\\r\\n        return _rescale(a, 18, decimals);\\r\\n    }\\r\\n\\r\\n    function rescale(int256 a, uint256 decimals) internal pure returns (int256) {\\r\\n        return _rescale(a, 18, decimals);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reformat a value to be a valid 10**decimals base value\\r\\n     * The formatted value is still in 10**18 base\\r\\n     */\\r\\n    function reformat(uint256 a, uint256 decimals) internal pure returns (uint256) {\\r\\n        return _rescale(_rescale(a, 18, decimals), decimals, 18);\\r\\n    }\\r\\n\\r\\n    function reformat(int256 a, uint256 decimals) internal pure returns (int256) {\\r\\n        return _rescale(_rescale(a, 18, decimals), decimals, 18);\\r\\n    }\\r\\n\\r\\n\\r\\n    //================================================================================\\r\\n    // Addition\\r\\n    //================================================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Addition: uint256 + uint256\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"MixedSafeMathWithUnit: uint256 addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Addition: int256 + int256\\r\\n     */\\r\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a + b;\\r\\n        require(\\r\\n            (b >= 0 && c >= a) || (b < 0 && c < a),\\r\\n            \\\"MixedSafeMathWithUnit: int256 addition overflow\\\"\\r\\n        );\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Addition: uint256 + int256\\r\\n     * uint256(-b) will not overflow when b is IMIN\\r\\n     */\\r\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\r\\n        if (b >= 0) {\\r\\n            return add(a, uint256(b));\\r\\n        } else {\\r\\n            return sub(a, uint256(-b));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Addition: int256 + uint256\\r\\n     */\\r\\n    function add(int256 a, uint256 b) internal pure returns (int256) {\\r\\n        return add(a, utoi(b));\\r\\n    }\\r\\n\\r\\n    //================================================================================\\r\\n    // Subtraction\\r\\n    //================================================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Subtraction: uint256 - uint256\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(a >= b, \\\"MixedSafeMathWithUnit: uint256 subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtraction: int256 - int256\\r\\n     */\\r\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a - b;\\r\\n        require(\\r\\n            (b >= 0 && c <= a) || (b < 0 && c > a),\\r\\n            \\\"MixedSafeMathWithUnit: int256 subtraction overflow\\\"\\r\\n        );\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtraction: uint256 - int256\\r\\n     * uint256(-b) will not overflow when b is IMIN\\r\\n     */\\r\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\r\\n        if (b >= 0) {\\r\\n            return sub(a, uint256(b));\\r\\n        } else {\\r\\n            return add(a, uint256(-b));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtraction: int256 - uint256\\r\\n     */\\r\\n    function sub(int256 a, uint256 b) internal pure returns (int256) {\\r\\n        return sub(a, utoi(b));\\r\\n    }\\r\\n\\r\\n    //================================================================================\\r\\n    // Multiplication\\r\\n    //================================================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplication: uint256 * uint256\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero,\\r\\n        // but the benefit is lost if 'b' is also tested\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"MixedSafeMathWithUnit: uint256 multiplication overflow\\\");\\r\\n        return c / UONE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplication: int256 * int256\\r\\n     */\\r\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero,\\r\\n        // but the benefit is lost if 'b' is also tested\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        require(!(a == -1 && b == IMIN), \\\"MixedSafeMathWithUnit: int256 multiplication overflow\\\");\\r\\n        int256 c = a * b;\\r\\n        require(c / a == b, \\\"MixedSafeMathWithUnit: int256 multiplication overflow\\\");\\r\\n        return c / IONE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplication: uint256 * int256\\r\\n     */\\r\\n    function mul(uint256 a, int256 b) internal pure returns (uint256) {\\r\\n        return mul(a, itou(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplication: int256 * uint256\\r\\n     */\\r\\n    function mul(int256 a, uint256 b) internal pure returns (int256) {\\r\\n        return mul(a, utoi(b));\\r\\n    }\\r\\n\\r\\n    //================================================================================\\r\\n    // Division\\r\\n    //================================================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Division: uint256 / uint256\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"MixedSafeMathWithUnit: uint256 division by zero\\\");\\r\\n        uint256 c = a * UONE;\\r\\n        require(\\r\\n            c / UONE == a,\\r\\n            \\\"MixedSafeMathWithUnit: uint256 division internal multiplication overflow\\\"\\r\\n        );\\r\\n        uint256 d = c / b;\\r\\n        return d;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Division: int256 / int256\\r\\n     */\\r\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\r\\n        require(b != 0, \\\"MixedSafeMathWithUnit: int256 division by zero\\\");\\r\\n        int256 c = a * IONE;\\r\\n        require(\\r\\n            c / IONE == a,\\r\\n            \\\"MixedSafeMathWithUnit: int256 division internal multiplication overflow\\\"\\r\\n        );\\r\\n        require(!(c == IMIN && b == -1), \\\"MixedSafeMathWithUnit: int256 division overflow\\\");\\r\\n        int256 d = c / b;\\r\\n        return d;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Division: uint256 / int256\\r\\n     */\\r\\n    function div(uint256 a, int256 b) internal pure returns (uint256) {\\r\\n        return div(a, itou(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Division: int256 / uint256\\r\\n     */\\r\\n    function div(int256 a, uint256 b) internal pure returns (int256) {\\r\\n        return div(a, utoi(b));\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/pool/MigratablePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"../interface/IMigratablePool.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Deri Protocol migratable pool implementation\\r\\n */\\r\\nabstract contract MigratablePool is IMigratablePool {\\r\\n\\r\\n    // Controller address\\r\\n    address _controller;\\r\\n\\r\\n    // Migration timestamp of this pool, zero means not set\\r\\n    // Migration timestamp can only be set with a grace period at least 3 days, and the\\r\\n    // `migrationDestination` pool address must be also set when setting migration timestamp,\\r\\n    // users can use this grace period to verify the `migrationDestination` pool code\\r\\n    uint256 _migrationTimestamp;\\r\\n\\r\\n    // The new pool this pool will migrate to after grace period, zero address means not set\\r\\n    address _migrationDestination;\\r\\n\\r\\n    modifier _controller_() {\\r\\n        require(msg.sender == _controller, \\\"can only be called by current controller\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IMigratablePool}.{setController}\\r\\n     */\\r\\n    function setController(address newController) public override {\\r\\n        require(newController != address(0), \\\"MigratablePool: setController to 0 address\\\");\\r\\n        require(\\r\\n            _controller == address(0) || msg.sender == _controller,\\r\\n            \\\"MigratablePool: setController can only be called by current controller or not set\\\"\\r\\n        );\\r\\n        _controller = newController;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IMigratablePool}.{controller}\\r\\n     */\\r\\n    function controller() public view override returns (address) {\\r\\n        return _controller;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IMigratablePool}.{migrationTimestamp}\\r\\n     */\\r\\n    function migrationTimestamp() public view override returns (uint256) {\\r\\n        return _migrationTimestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IMigratablePool}.{migrationDestination}\\r\\n     */\\r\\n    function migrationDestination() public view override returns (address) {\\r\\n        return _migrationDestination;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IMigratablePool}.{prepareMigration}\\r\\n     */\\r\\n    function prepareMigration(address newPool, uint256 graceDays) public override _controller_ {\\r\\n        require(newPool != address(0), \\\"MigratablePool: prepareMigration to 0 address\\\");\\r\\n        require(graceDays >= 3 && graceDays <= 365, \\\"MigratablePool: graceDays must be 3-365 days\\\");\\r\\n\\r\\n        _migrationTimestamp = block.timestamp + graceDays * 1 days;\\r\\n        _migrationDestination = newPool;\\r\\n\\r\\n        emit PrepareMigration(_migrationTimestamp, address(this), _migrationDestination);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IMigratablePool}.{approveMigration}\\r\\n     *\\r\\n     * This function will be implemented in inheriting contract\\r\\n     * This function will change if there is an upgrade to existent pool\\r\\n     */\\r\\n    // function approveMigration() public virtual override _controller_ {}\\r\\n\\r\\n    /**\\r\\n     * @dev See {IMigratablePool}.{executeMigration}\\r\\n     *\\r\\n     * This function will be implemented in inheriting contract\\r\\n     * This function will change if there is an upgrade to existent pool\\r\\n     */\\r\\n    // function executeMigration(address source) public virtual override _controller_ {}\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `operator` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed operator, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in `owner`'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `operator` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address\\r\\n     * clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address operator, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token\\r\\n     *   by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first\\r\\n     * that contract recipients are aware of the ERC721 protocol to prevent\\r\\n     * tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this token\\r\\n     *   by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement\\r\\n     *   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token\\r\\n     *   by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement\\r\\n     *   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interface/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/math/UnsignedSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Unsigned safe math\\r\\n */\\r\\nlibrary UnsignedSafeMath {\\r\\n\\r\\n    /**\\r\\n     * @dev Addition of unsigned integers, counterpart to `+`\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"UnsignedSafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtraction of unsigned integers, counterpart to `-`\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(a >= b, \\\"UnsignedSafeMath: subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplication of unsigned integers, counterpart to `*`\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero,\\r\\n        // but the benefit is lost if 'b' is also tested\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"UnsignedSafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Division of unsigned integers, counterpart to `/`\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"UnsignedSafeMath: division by zero\\\");\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modulo of unsigned integers, counterpart to `%`\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"UnsignedSafeMath: modulo by zero\\\");\\r\\n        uint256 c = a % b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"DepositMargin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawMargin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidatorQualifier\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPoolMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minInitialMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMaintenanceMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAddLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingRateCoefficient\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationCutRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceDelayAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateValues\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"cumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"cumuFundingRateBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetVolume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetCost\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[5]\",\"name\":\"addresses_\",\"type\":\"address[5]\"},{\"internalType\":\"uint256[12]\",\"name\":\"parameters_\",\"type\":\"uint256[12]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastTradingTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTradingInverval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"setMinTradingInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PerpetualPool","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}