{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"solidity-util/lib/Integers.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * Integers Library\\r\\n * \\r\\n * In summary this is a simple library of integer functions which allow a simple\\r\\n * conversion to and from strings\\r\\n * \\r\\n * @author James Lockhart <james@n3tw0rk.co.uk>\\r\\n */\\r\\nlibrary Integers {\\r\\n    /**\\r\\n     * Parse Int\\r\\n     * \\r\\n     * Converts an ASCII string value into an uint as long as the string \\r\\n     * its self is a valid unsigned integer\\r\\n     * \\r\\n     * @param _value The ASCII string to be converted to an unsigned integer\\r\\n     * @return uint The unsigned value of the ASCII string\\r\\n     */\\r\\n    function parseInt(string memory _value)\\r\\n        public\\r\\n        pure\\r\\n        returns (uint _ret) {\\r\\n        bytes memory _bytesValue = bytes(_value);\\r\\n        uint j = 1;\\r\\n        for(uint i = _bytesValue.length-1; i >= 0 && i < _bytesValue.length; i--) {\\r\\n            assert(uint8(_bytesValue[i]) >= 48 && uint8(_bytesValue[i]) <= 57);\\r\\n            _ret += (uint8(_bytesValue[i]) - 48)*j;\\r\\n            j*=10;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * To String\\r\\n     * \\r\\n     * Converts an unsigned integer to the ASCII string equivalent value\\r\\n     * \\r\\n     * @param _base The unsigned integer to be converted to a string\\r\\n     * @return string The resulting ASCII string value\\r\\n     */\\r\\n    function toString(uint _base)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory) {\\r\\n        bytes memory _tmp = new bytes(32);\\r\\n        uint i;\\r\\n        for(i = 0;_base > 0;i++) {\\r\\n            _tmp[i] = byte(uint8((_base % 10) + 48));\\r\\n            _base /= 10;\\r\\n        }\\r\\n        bytes memory _real = new bytes(i--);\\r\\n        for(uint j = 0; j < _real.length; j++) {\\r\\n            _real[j] = _tmp[i--];\\r\\n        }\\r\\n        return string(_real);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * To Byte\\r\\n     *\\r\\n     * Convert an 8 bit unsigned integer to a byte\\r\\n     *\\r\\n     * @param _base The 8 bit unsigned integer\\r\\n     * @return byte The byte equivalent\\r\\n     */\\r\\n    function toByte(uint8 _base)\\r\\n        public\\r\\n        pure\\r\\n        returns (byte _ret) {\\r\\n        assembly {\\r\\n            let m_alloc := add(msize(),0x1)\\r\\n            mstore8(m_alloc, _base)\\r\\n            _ret := mload(m_alloc)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * To Bytes\\r\\n     *\\r\\n     * Converts an unsigned integer to bytes\\r\\n     *\\r\\n     * @param _base The integer to be converted to bytes\\r\\n     * @return bytes The bytes equivalent \\r\\n     */\\r\\n    function toBytes(uint _base)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bytes memory _ret) {\\r\\n        assembly {\\r\\n            let m_alloc := add(msize(),0x1)\\r\\n            _ret := mload(m_alloc)\\r\\n            mstore(_ret, 0x20)\\r\\n            mstore(add(_ret, 0x20), _base)\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"parseInt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_ret\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_base\",\"type\":\"uint8\"}],\"name\":\"toByte\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"_ret\",\"type\":\"bytes1\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Integers","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}