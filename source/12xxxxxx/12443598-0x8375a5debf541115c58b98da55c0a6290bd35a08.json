{"status":"1","message":"OK","result":[{"SourceCode":"{\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see {ERC20Detailed}.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"SwappingETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma experimental ABIEncoderV2;\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\u0027./IERC20.sol\\u0027;\\r\\ncontract swappingEth{\\r\\n    struct swappedTransaction{\\r\\n        uint amount;\\r\\n        uint tax;\\r\\n        address sender;\\r\\n        address receiver;\\r\\n    }\\r\\n    IERC20 public token;\\r\\n    address public authorizedAccount;\\r\\n    mapping(uint =\\u003e swappedTransaction) transactions;\\r\\n    uint totalTransactions;\\r\\n    \\r\\n    constructor(address _token,address _authorizedAccount){\\r\\n        token = IERC20(_token);\\r\\n        authorizedAccount = _authorizedAccount;\\r\\n    }\\r\\n\\r\\n    modifier onlyAuthorizedAccount(address withdrawer){\\r\\n        require(authorizedAccount == withdrawer,\\u0027Only Authorized Account can submit a withdraw request\\u0027);\\r\\n        _;\\r\\n    }\\r\\n    modifier validTransaction(uint index, address transactionInitiator){\\r\\n        require(index \\u003c= totalTransactions, \\\"Invalid Transaction ID\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    event fundingReciept(uint256 index);\\r\\n\\r\\n    event refunded(uint256 index);\\r\\n\\r\\n    function fund(uint _amount,uint _tax,address reciever) external payable returns(uint currentIndex){\\r\\n        require(token.balanceOf(msg.sender)\\u003e= _amount,\\\"Not Enough Balance to complete this transaction\\\");\\r\\n        // require(token.approve(address(this), _amount),\\\"Approve Failed Try Again\\\");\\r\\n        swappedTransaction memory newTransaction = swappedTransaction(_amount,_tax,msg.sender,reciever);\\r\\n        transactions[totalTransactions] = newTransaction;\\r\\n        require(token.transferFrom(msg.sender,address(this),_amount),\\\"Could not process the transaction try again\\\");\\r\\n        emit fundingReciept(totalTransactions);\\r\\n        totalTransactions = totalTransactions + 1;\\r\\n        return totalTransactions;\\r\\n    }\\r\\n\\r\\n    function refund(uint index) validTransaction(index,msg.sender) onlyAuthorizedAccount(msg.sender) public{\\r\\n        require(token.transfer(transactions[totalTransactions].sender, transactions[totalTransactions].amount),\\\"Transaction Failed\\\");\\r\\n        emit refunded(index);\\r\\n    }\\r\\n    // Removing onlyAuthorized Restriction\\r\\n    function withdraw(uint _amount, address reciever) onlyAuthorizedAccount(msg.sender) public{\\r\\n        token.transfer(reciever, _amount);\\r\\n    }\\r\\n\\r\\n    function getCurrentIndex() external view returns (uint256 index){\\r\\n        return totalTransactions;        \\r\\n    }\\r\\n    // works fine\\r\\n    function withDrawTax(address payable to) onlyAuthorizedAccount(msg.sender) public{\\r\\n        to.transfer(address(this).balance);\\r\\n    }\\r\\n    // Withdraws xDNA FUNCTIOn\\r\\n    function withDrawxDNA(address to,uint256 amount) onlyAuthorizedAccount(msg.sender) public{\\r\\n       require(token.transfer(to, amount),\\\"TRANSACTION FAILED WHEN TRANSFERING XDNA\\\");\\r\\n    }\\r\\n\\r\\n    function getTransaction(uint index) external view returns (swappedTransaction memory transaction){\\r\\n        require(index \\u003e= 0 \\u0026\\u0026 index \\u003c= totalTransactions,\\\"Invalid Index\\\");\\r\\n        return transactions[index];        \\r\\n    }\\r\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authorizedAccount\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"fundingReciept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"refunded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authorizedAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reciever\",\"type\":\"address\"}],\"name\":\"fund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTransaction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"internalType\":\"struct swappingEth.swappedTransaction\",\"name\":\"transaction\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withDrawTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withDrawxDNA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reciever\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"swappingEth","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008e57c27761ebbd381b0f9d09bb92ceb51a358abb000000000000000000000000a2a4070b9987d876fde92d5fd5c2dc937ebc3890","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c95b1f4883ad422d5f40878f592b1ba2e299aa6228b7d9eb906773daf6936dbc"}]}