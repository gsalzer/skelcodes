{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.7;\r\n\r\n\r\npragma solidity 0.6.7;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function mint(address account, uint256 amount) external;\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\ninterface PauseLike {\r\n    function delay() external returns (uint);\r\n    function exec(address, bytes32, bytes calldata, uint256) external;\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n}\r\n\r\ninterface IlkRegistryAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function cat() external view returns (address);\r\n    function spot() external view returns (address);\r\n    function add(address) external;\r\n}\r\n\r\ninterface ChainlogAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function keys() external view returns (bytes32[] memory);\r\n    function version() external view returns (string memory);\r\n    function ipfs() external view returns (string memory);\r\n    function setVersion(string calldata) external;\r\n    function setSha256sum(string calldata) external;\r\n    function setIPFS(string calldata) external;\r\n    function setAddress(bytes32,address) external;\r\n    function removeAddress(bytes32) external;\r\n    function count() external view returns (uint256);\r\n    function get(uint256) external view returns (bytes32,address);\r\n    function list() external view returns (bytes32[] memory);\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\ninterface GemJoinAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function gem() external view returns (address);\r\n    function dec() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function cage() external;\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface FlipAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address usr) external;\r\n    function deny(address usr) external;\r\n    function bids(uint256) external view returns (uint256, uint256, address, uint48, uint48, address, address, uint256);\r\n    function vat() external view returns (address);\r\n    function cat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function beg() external view returns (uint256);\r\n    function ttl() external view returns (uint48);\r\n    function tau() external view returns (uint48);\r\n    function kicks() external view returns (uint256);\r\n    function file(bytes32, uint256) external;\r\n    function kick(address, address, uint256, uint256, uint256) external returns (uint256);\r\n    function tick(uint256) external;\r\n    function tend(uint256, uint256, uint256) external;\r\n    function dent(uint256, uint256, uint256) external;\r\n    function deal(uint256) external;\r\n    function yank(uint256) external;\r\n}\r\n\r\ninterface OsmMomAbstract {\r\n    function owner() external view returns (address);\r\n    function authority() external view returns (address);\r\n    function osms(bytes32) external view returns (address);\r\n    function setOsm(bytes32, address) external;\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n    function stop(bytes32) external;\r\n}\r\n\r\ninterface VatAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n    function gem(bytes32, address) external view returns (uint256);\r\n    function dai(address) external view returns (uint256);\r\n    function vice() external view returns (uint256);\r\n    function Line() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function init(bytes32) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n}\r\n\r\n\r\ninterface ConfigLike {\r\n    function init(bytes32) external;\r\n    function file(bytes32, bytes32, address) external;\r\n    function file(bytes32, bytes32, uint) external;\r\n    function rely(address) external;\r\n}\r\n\r\n\r\ninterface SpotAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function ilks(bytes32) external view returns (address, uint256);\r\n    function vat() external view returns (address);\r\n    function par() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function file(bytes32, bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function poke(bytes32) external;\r\n    function cage() external;\r\n}\r\n\r\nlibrary SharedStructs {\r\n\r\n    // decimals & precision\r\n    uint256 constant THOUSAND = 10 ** 3;\r\n    uint256 constant MILLION  = 10 ** 6;\r\n    uint256 constant WAD      = 10 ** 18;\r\n    uint256 constant RAY      = 10 ** 27;\r\n    uint256 constant RAD      = 10 ** 45;\r\n\r\n    uint256 constant ZERO_PERCENT_RATE            = 1000000000000000000000000000;\r\n\r\n\r\n    struct IlkNetSpecific {   \r\n        address gem;\r\n        address join;\r\n        address flip;\r\n        address pip;\r\n        ChainlogAbstract CHANGELOG;\r\n    }\r\n\r\n    struct IlkDesc {   \r\n        bytes32 ilk;\r\n        bytes32 joinName;\r\n        bytes32 flipName;\r\n        bytes32 pipName;\r\n        bytes32 gemName;\r\n        uint256 line;\r\n        uint256 dust;\r\n        uint256 dunk;\r\n        uint256 chop;\r\n        uint256 duty;\r\n        uint256 beg;\r\n        uint256 ttl;\r\n        uint256 tau;\r\n        uint256 mat;\r\n    }\r\n}\r\n\r\ncontract SpellAction {\r\n\r\n\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    // A table of rates can be found at\r\n    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n    //\r\n    uint256 constant ZERO_PERCENT_RATE            = 1000000000000000000000000000;\r\n    uint256 constant ONE_PERCENT_RATE             = 1000000000315522921573372069;\r\n    uint256 constant TWO_PERCENT_RATE             = 1000000000627937192491029810;\r\n    uint256 constant TWO_POINT_FIVE_PERCENT_RATE  = 1000000000782997609082909351;\r\n    uint256 constant THREE_PERCENT_RATE           = 1000000000937303470807876289;\r\n    uint256 constant FOUR_POINT_FIVE_PERCENT_RATE = 1000000001395766281313196627;\r\n    uint256 constant FIVE_PERCENT_RATE            = 1000000001547125957863212448;\r\n    uint256 constant SIX_PERCENT_RATE             = 1000000001847694957439350562;\r\n    uint256 constant EIGHT_PERCENT_RATE           = 1000000002440418608258400030;\r\n    uint256 constant NINE_PERCENT_RATE            = 1000000002732676825177582095;\r\n    uint256 constant TEN_PERCENT_RATE             = 1000000003022265980097387650;\r\n\r\n\r\n\r\n    function execute(SharedStructs.IlkDesc memory desc, \r\n                     SharedStructs.IlkNetSpecific memory net) internal {\r\n\r\n        ChainlogAbstract CHANGELOG = net.CHANGELOG;\r\n\r\n        address MCD_VAT      = CHANGELOG.getAddress(\"MCD_VAT\");\r\n        address MCD_CAT      = CHANGELOG.getAddress(\"MCD_CAT\");\r\n        address MCD_JUG      = CHANGELOG.getAddress(\"MCD_JUG\");\r\n        address MCD_SPOT     = CHANGELOG.getAddress(\"MCD_SPOT\");\r\n        address MCD_END      = CHANGELOG.getAddress(\"MCD_END\");\r\n        address FLIPPER_MOM  = CHANGELOG.getAddress(\"FLIPPER_MOM\");\r\n        address OSM_MOM      = CHANGELOG.getAddress(\"OSM_MOM\"); // Only if PIP_TOKEN = Osm\r\n        address ILK_REGISTRY = CHANGELOG.getAddress(\"ILK_REGISTRY\");\r\n\r\n\r\n        // Set the global debt ceiling\r\n        // +  100 M for gem-A\r\n        VatAbstract(MCD_VAT).file(\"Line\", VatAbstract(MCD_VAT).Line() + desc.line * SharedStructs.MILLION * SharedStructs.RAD);\r\n\r\n        // Sanity checks\r\n        require(GemJoinAbstract(net.join).vat() == MCD_VAT, \"join-vat-not-match\");\r\n        require(GemJoinAbstract(net.join).ilk() == desc.ilk, \"join-ilk-not-match\");\r\n        require(GemJoinAbstract(net.join).gem() == net.gem, \"join-gem-not-match\");\r\n        require(GemJoinAbstract(net.join).dec() == IERC20(net.gem).decimals(), \"join-dec-not-match\");\r\n        require(FlipAbstract(net.flip).vat() == MCD_VAT, \"flip-vat-not-match\");\r\n        require(FlipAbstract(net.flip).cat() == MCD_CAT, \"flip-cat-not-match\");\r\n        require(FlipAbstract(net.flip).ilk() == desc.ilk, \"flip-ilk-not-match\");\r\n\r\n        // Set the gem PIP in the Spotter\r\n        SpotAbstract(MCD_SPOT).file(desc.ilk, \"pip\", net.pip);\r\n\r\n        // Set the gem-A Flipper in the Cat\r\n        ConfigLike(MCD_CAT).file(desc.ilk, \"flip\", net.flip);\r\n\r\n        // Init gem-A ilk in Vat & Jug\r\n        VatAbstract(MCD_VAT).init(desc.ilk);\r\n        ConfigLike(MCD_JUG).init(desc.ilk);\r\n\r\n        // Allow gem-A Join to modify Vat registry\r\n        VatAbstract(MCD_VAT).rely(net.join);\r\n        // Allow the gem-A Flipper to reduce the Cat litterbox on deal()\r\n        ConfigLike(MCD_CAT).rely(net.flip);\r\n        // Allow Cat to kick auctions in gem-A Flipper\r\n        FlipAbstract(net.flip).rely(MCD_CAT);\r\n        // Allow End to yank auctions in gem-A Flipper\r\n        FlipAbstract(net.flip).rely(MCD_END);\r\n        // Allow FlipperMom to access to the gem-A Flipper\r\n        FlipAbstract(net.flip).rely(FLIPPER_MOM);\r\n        // Disallow Cat to kick auctions in gem-A Flipper\r\n        // !!!!!!!! Only for certain collaterals that do not trigger liquidations like USDC-A)\r\n        //FlipperMomAbstract(FLIPPER_MOM).deny(net.flip);\r\n\r\n        // Set gem Osm in the OsmMom for new ilk\r\n        // !!!!!!!! Only if net.pip = Osm\r\n        OsmMomAbstract(OSM_MOM).setOsm(desc.ilk, net.pip);\r\n\r\n        // Set the gem-A debt ceiling\r\n        VatAbstract(MCD_VAT).file(desc.ilk, \"line\", desc.line * SharedStructs.MILLION * SharedStructs.RAD);\r\n        // Set the gem-A dust\r\n        VatAbstract(MCD_VAT).file(desc.ilk, \"dust\", desc.dust * SharedStructs.RAD);\r\n        // Set the Lot size\r\n        ConfigLike(MCD_CAT).file(desc.ilk, \"dunk\", desc.dunk * SharedStructs.RAD);\r\n        // Set the gem-A liquidation penalty (e.g. 13% => X = 113)\r\n        ConfigLike(MCD_CAT).file(desc.ilk, \"chop\", desc.chop);\r\n        // Set the gem-A stability fee (e.g. 1% = 1000000000315522921573372069)\r\n        ConfigLike(MCD_JUG).file(desc.ilk, \"duty\", desc.duty);\r\n        // Set the gem-A percentage between bids (e.g. 3% => X = 103)\r\n        FlipAbstract(net.flip).file(\"beg\", desc.beg);\r\n        // Set the gem-A time max time between bids\r\n        FlipAbstract(net.flip).file(\"ttl\", desc.ttl);\r\n        // Set the gem-A max auction duration to\r\n        FlipAbstract(net.flip).file(\"tau\", desc.tau);\r\n        // Set the gem-A min collateralization ratio (e.g. 150% => X = 150)\r\n        SpotAbstract(MCD_SPOT).file(desc.ilk, \"mat\", desc.mat);\r\n\r\n        // Update gem-A spot value in Vat\r\n        SpotAbstract(MCD_SPOT).poke(desc.ilk);\r\n\r\n        // Add new ilk to the IlkRegistry\r\n        IlkRegistryAbstract(ILK_REGISTRY).add(net.join);\r\n\r\n        // Update the changelog\r\n        CHANGELOG.setAddress(desc.gemName, net.gem);\r\n        CHANGELOG.setAddress(desc.joinName, net.join);\r\n        CHANGELOG.setAddress(desc.flipName, net.flip);\r\n        CHANGELOG.setAddress(desc.pipName, net.pip);\r\n        // Bump version\r\n    }\r\n}\r\n\r\n\r\ncontract IlkCurveCfg {\r\n\r\n    function getIlkCfg() internal pure returns (SharedStructs.IlkDesc memory desc) {\r\n\r\n        desc.ilk = \"CRV_3POOL-A\";\r\n        desc.joinName = \"MCD_JOIN_CRV_3POOL_A\";\r\n        desc.flipName = \"MCD_FLIP_CRV_3POOL_A\";\r\n        desc.pipName = \"PIP_CRV_3POOL\";\r\n        desc.gemName = \"CRV_3POOL\";\r\n        desc.line = 150;\r\n        desc.dust = 100;\r\n        desc.dunk = 50000;\r\n        desc.chop = 113 * SharedStructs.WAD / 100;\r\n        desc.duty = SharedStructs.ZERO_PERCENT_RATE;\r\n        desc.beg = 101 * SharedStructs.WAD / 100;\r\n        desc.ttl = 21600;\r\n        desc.tau = 21600;\r\n        desc.mat = 110 * SharedStructs.RAY / 100;\r\n    }\r\n}\r\n\r\ncontract SpellActionMainnet is SpellAction, IlkCurveCfg {\r\n    function execute() external {\r\n\r\n        SharedStructs.IlkNetSpecific memory net;\r\n\r\n        net.gem  = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\r\n        net.join = 0xDcd8cad273373DD52B23194EC9B4a207EfEC99CD;\r\n        net.flip = 0xDA03DAD7D4B012214F353E15F5656c4dFF35ABC2;\r\n        net.pip = 0x7BBa7664baaec1DB10b16E6cf712007BEA644dc0;\r\n        net.CHANGELOG = ChainlogAbstract(0xE0fb0a1B0F1db37D803bad3F6d55158291Bb7bAc);\r\n\r\n        execute(getIlkCfg(), net);\r\n\r\n        net.CHANGELOG.setVersion(\"1.1.0\");\r\n    }\r\n}\r\n\r\ncontract SpellActionKovan is SpellAction, IlkCurveCfg {\r\n    function execute() external {\r\n\r\n        SharedStructs.IlkNetSpecific memory net;\r\n\r\n        net.gem  = 0x168a6114396aAB83Ba14b8Bd8E5B4D7CB3c2E82e;\r\n        net.join = 0xcf68FB166293cDE638FA55451FdCC6F9E569fe15;\r\n        net.flip = 0x0Fe624186e46EF16bc3c483eA0790d2694DD5Acc;\r\n        net.pip = 0x0F5ad35285A9D4e27E932777494a77461A579Bd6;\r\n        net.CHANGELOG = ChainlogAbstract(0x873396d69b017e3Ed499406892E1cd2f3EE1CFA7);\r\n\r\n\r\n        execute(getIlkCfg(), net);\r\n\r\n        net.CHANGELOG.setVersion(\"1.2.0\");\r\n    }\r\n}\r\n\r\n\r\ncontract ActionSpell {\r\n    bool      public done;\r\n    address   public pause;\r\n    uint256   public expiration;\r\n\r\n\r\n    address   public action;\r\n    bytes32   public tag;\r\n    uint256   public eta;\r\n    bytes     public sig;\r\n\r\n\r\n\r\n\r\n    function setup(address deployer) internal {\r\n        expiration = block.timestamp + 30 days;\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        bytes32 _tag; assembly { _tag := extcodehash(deployer) }\r\n        action = deployer;\r\n        tag = _tag;\r\n    }\r\n\r\n    function schedule() external {\r\n        require(block.timestamp <= expiration, \"DSSSpell/spell-has-expired\");\r\n        require(eta == 0, \"spell-already-scheduled\");\r\n        eta = now + PauseLike(pause).delay();\r\n        PauseLike(pause).plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        PauseLike(pause).exec(action, tag, sig, eta);\r\n    }\r\n}\r\n\r\n\r\ncontract ActionSpellMainnet is ActionSpell {\r\n    constructor() public {\r\n        pause = 0x146921eF7A94C50b96cb53Eb9C2CA4EB25D4Bfa8;\r\n        setup(address(new SpellActionMainnet()));\r\n    }\r\n}\r\n\r\n\r\ncontract ActionSpellKovan is ActionSpell {\r\n    constructor() public {\r\n        pause = 0x95D6fBdD8bE0FfBEB62b3B3eB2A7dFD19cFae8F5;\r\n        setup(address(new SpellActionKovan()));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"action\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tag\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ActionSpellMainnet","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://541a04aa983d7126c47943bc612ad024ae195b7e760e8e2caa7047c93002fed1"}]}