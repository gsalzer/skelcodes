{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\ninterface IBridge {\r\n    function deposit(\r\n        uint8 destinationChainID,\r\n        bytes32 resourceID,\r\n        bytes calldata data\r\n    ) external payable;\r\n\r\n    function getFee(uint8 destinationChainID) external view returns (uint256);\r\n}\r\n\r\ninterface IPolicy {\r\n    function globalAmpleforthEpochAndAMPLSupply() external view returns (uint256, uint256);\r\n}\r\n\r\n/**\r\n * @title ChainBridgeBatchRebaseReport\r\n * @notice Utility that executes rebase report 'deposit' transactions in batch.\r\n */\r\ncontract ChainBridgeBatchRebaseReport {\r\n    function execute(\r\n        address policy,\r\n        address bridge,\r\n        uint8[] memory destinationChainIDs,\r\n        bytes32 resourceID\r\n    ) external payable {\r\n        for (uint256 i = 0; i < destinationChainIDs.length; i++) {\r\n            uint8 destinationChainID = destinationChainIDs[i];\r\n\r\n            uint256 epoch;\r\n            uint256 totalSupply;\r\n            (epoch, totalSupply) = IPolicy(policy).globalAmpleforthEpochAndAMPLSupply();\r\n\r\n            uint256 dataLen = 64;\r\n            uint256 bridgeFee = IBridge(bridge).getFee(destinationChainID);\r\n            IBridge(bridge).deposit{value: bridgeFee}(\r\n                destinationChainID,\r\n                resourceID,\r\n                abi.encode(dataLen, epoch, totalSupply)\r\n            );\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"policy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"destinationChainIDs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ChainBridgeBatchRebaseReport","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8ffc087ff4aae4b96627c5d0d84fa7755a2ca9049130039b2437ae8162691097"}]}