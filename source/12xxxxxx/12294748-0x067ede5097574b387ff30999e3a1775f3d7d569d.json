{"status":"1","message":"OK","result":[{"SourceCode":"/**************************************************************************\r\n *            ____        _                              \r\n *           / ___|      | |     __ _  _   _   ___  _ __ \r\n *          | |    _____ | |    / _` || | | | / _ \\| '__|\r\n *          | |___|_____|| |___| (_| || |_| ||  __/| |   \r\n *           \\____|      |_____|\\__,_| \\__, | \\___||_|   \r\n *                                     |___/             \r\n * \r\n **************************************************************************\r\n *\r\n *  The MIT License (MIT)\r\n * SPDX-License-Identifier: MIT\r\n *\r\n * Copyright (c) 2016-2021 Cyril Lapinte\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included\r\n * in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n *\r\n **************************************************************************\r\n *\r\n * Flatten Contract: MintableTokenERC20\r\n *\r\n **************************************************************************/\r\n\r\n// File @c-layer/common/contracts/interface/IERC20.sol@v1.3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title IERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ninterface IERC20 {\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n\r\n  function name() external view returns (string memory);\r\n  function symbol() external view returns (string memory);\r\n  function decimals() external view returns (uint256);\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address _owner) external view returns (uint256);\r\n\r\n  function transfer(address _to, uint256 _value) external returns (bool);\r\n\r\n  function allowance(address _owner, address _spender)\r\n    external view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    external returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) external returns (bool);\r\n\r\n  function increaseApproval(address _spender, uint256 _addedValue)\r\n    external returns (bool);\r\n\r\n  function decreaseApproval(address _spender, uint256 _subtractedValue)\r\n    external returns (bool);\r\n}\r\n\r\n\r\n// File @c-layer/common/contracts/token/TokenERC20.sol@v1.3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Token ERC20\r\n * @dev Token ERC20 default implementation\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n *   TE01: Recipient is invalid\r\n *   TE02: Not enougth tokens\r\n *   TE03: Approval too low\r\n */\r\ncontract TokenERC20 is IERC20 {\r\n\r\n  string internal name_;\r\n  string internal symbol_;\r\n  uint256 internal decimals_;\r\n\r\n  uint256 internal totalSupply_;\r\n  mapping(address => uint256) internal balances;\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n  constructor(\r\n    string memory _name,\r\n    string memory _symbol,\r\n    uint256 _decimals,\r\n    address _initialAccount,\r\n    uint256 _initialSupply\r\n  ) {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n    decimals_ = _decimals;\r\n    totalSupply_ = _initialSupply;\r\n    balances[_initialAccount] = _initialSupply;\r\n\r\n    emit Transfer(address(0), _initialAccount, _initialSupply);\r\n  }\r\n\r\n  function name() external override view returns (string memory) {\r\n    return name_;\r\n  }\r\n\r\n  function symbol() external override view returns (string memory) {\r\n    return symbol_;\r\n  }\r\n\r\n  function decimals() external override view returns (uint256) {\r\n    return decimals_;\r\n  }\r\n\r\n  function totalSupply() external override virtual view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  function balanceOf(address _owner) external override virtual view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function allowance(address _owner, address _spender)\r\n    external override view returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) external override virtual returns (bool) {\r\n    return transferFromInternal(msg.sender, _to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    external override virtual returns (bool)\r\n  {\r\n    return transferFromInternal(_from, _to, _value);\r\n  }\r\n\r\n  function transferFromInternal(address _from, address _to, uint256 _value)\r\n    internal virtual returns (bool)\r\n  {\r\n    require(_to != address(0), \"TE01\");\r\n    require(_value <= balances[_from], \"TE02\");\r\n\r\n    if (_from != msg.sender) {\r\n      require(_value <= allowed[_from][msg.sender], \"TE03\");\r\n      allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\r\n    }\r\n\r\n    balances[_from] = balances[_from] - _value;\r\n    balances[_to] = balances[_to] + _value;\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) external override returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue)\r\n    external override returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] =\r\n      allowed[msg.sender][_spender] + _addedValue;\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue)\r\n    external override returns (bool)\r\n  {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue - _subtractedValue;\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// File @c-layer/common/contracts/operable/Ownable.sol@v1.3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * @dev functions, this simplifies the implementation of \"user permissions\".\r\n *\r\n * Error messages\r\n *   OW01: Message sender is not the owner\r\n *   OW02: New owner must be valid\r\n*/\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"OW01\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0), \"OW02\");\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/interface/IMintableERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title IMintableERC20 interface\r\n */\r\ninterface IMintableERC20 {\r\n\r\n  event Burn(address indexed from, uint256 value);\r\n  event Mint(address indexed to, uint256 value);\r\n  event FinishMinting();\r\n\r\n  function mintingFinished() external view returns (bool);\r\n  function allTimeMinted() external view returns (uint256);\r\n\r\n  function burn(uint256 _amount) external;\r\n  function mint(address[] memory _recipients, uint256[] memory _amounts) external;\r\n  function finishMinting() external;\r\n}\r\n\r\n\r\n// File contracts/monolithic/MintableTokenERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @title Mintable Token ERC20\r\n * @dev Mintable Token ERC20 default implementation\r\n *\r\n * @author Cyril Lapinte - <cyril.lapinte@openfiz.com>\r\n *\r\n * Error messages\r\n *   MT01: Unable to mint\r\n *   MT02: Invalid number of recipients and amounts\r\n */\r\ncontract MintableTokenERC20 is IMintableERC20, Ownable, TokenERC20 {\r\n\r\n  bool internal mintingFinished_;\r\n  uint256 internal allTimeMinted_;\r\n\r\n  modifier canMint {\r\n    require(!mintingFinished_, \"MT01\");\r\n    _;\r\n  }\r\n\r\n  constructor(\r\n    string memory _name,\r\n    string memory _symbol,\r\n    uint256 _decimals,\r\n    address _initialAccount,\r\n    uint256 _initialSupply\r\n  ) TokenERC20(\r\n    _name,\r\n    _symbol,\r\n    _decimals,\r\n    address(this),\r\n    0)\r\n  {\r\n    mintInternal(_initialAccount, _initialSupply);\r\n  }\r\n\r\n  function mintingFinished() external override view returns (bool) {\r\n    return mintingFinished_;\r\n  }\r\n\r\n  function allTimeMinted() external override view returns (uint256) {\r\n    return allTimeMinted_;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to burn tokens\r\n   * @param _amount The amount of tokens to burn.\r\n   */\r\n  function burn(uint256 _amount) external override onlyOwner\r\n  {\r\n    burnInternal(msg.sender, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint all tokens at once\r\n   * @param _recipients The addresses that will receive the minted tokens.\r\n   * @param _amounts The amounts of tokens to mint.\r\n   */\r\n  function mint(address[] memory _recipients, uint256[] memory _amounts)\r\n    external override canMint onlyOwner\r\n  {\r\n    require(_recipients.length == _amounts.length, \"MT02\");\r\n    for (uint256 i=0; i < _recipients.length; i++) {\r\n      mintInternal(_recipients[i], _amounts[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   */\r\n  function finishMinting() external override canMint onlyOwner\r\n  {\r\n    mintingFinished_ = true;\r\n    emit FinishMinting();\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens internal\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   */\r\n  function mintInternal(address _to, uint256 _amount) internal virtual\r\n  {\r\n    totalSupply_ = totalSupply_ + _amount;\r\n    balances[_to] = balances[_to] + _amount;\r\n    allTimeMinted_ = allTimeMinted_ + _amount;\r\n\r\n    emit Mint(_to, _amount);\r\n    emit Transfer(address(0), _to, _amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to burn tokens internal\r\n   * @param _from The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   */\r\n  function burnInternal(address _from, uint256 _amount) internal virtual\r\n  {\r\n    totalSupply_ = totalSupply_ - _amount;\r\n    balances[_from] = balances[_from] - _amount;\r\n\r\n    emit Transfer(_from, address(0), _amount);\r\n    emit Burn(_from, _amount);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_initialAccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FinishMinting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allTimeMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MintableTokenERC20","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000001200000000000000000000000098eb1e0f3d76b031856138cfac5d7dedfc374ebb000000000000000000000000000000000000000000084595161401484a0000000000000000000000000000000000000000000000000000000000000000000008446f70616d696e650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004444f504500000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://084ce7663c9d464c93c62762f70297c87280811af52d009674410fea6e58d0e7"}]}