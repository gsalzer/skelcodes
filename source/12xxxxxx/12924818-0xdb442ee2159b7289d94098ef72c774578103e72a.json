{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IAddressConfig.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IAddressConfig {\r\n\tfunction token() external view returns (address);\r\n\r\n\tfunction allocator() external view returns (address);\r\n\r\n\tfunction allocatorStorage() external view returns (address);\r\n\r\n\tfunction withdraw() external view returns (address);\r\n\r\n\tfunction withdrawStorage() external view returns (address);\r\n\r\n\tfunction marketFactory() external view returns (address);\r\n\r\n\tfunction marketGroup() external view returns (address);\r\n\r\n\tfunction propertyFactory() external view returns (address);\r\n\r\n\tfunction propertyGroup() external view returns (address);\r\n\r\n\tfunction metricsGroup() external view returns (address);\r\n\r\n\tfunction metricsFactory() external view returns (address);\r\n\r\n\tfunction policy() external view returns (address);\r\n\r\n\tfunction policyFactory() external view returns (address);\r\n\r\n\tfunction policySet() external view returns (address);\r\n\r\n\tfunction policyGroup() external view returns (address);\r\n\r\n\tfunction lockup() external view returns (address);\r\n\r\n\tfunction lockupStorage() external view returns (address);\r\n\r\n\tfunction voteTimes() external view returns (address);\r\n\r\n\tfunction voteTimesStorage() external view returns (address);\r\n\r\n\tfunction voteCounter() external view returns (address);\r\n\r\n\tfunction voteCounterStorage() external view returns (address);\r\n\r\n\tfunction setAllocator(address _addr) external;\r\n\r\n\tfunction setAllocatorStorage(address _addr) external;\r\n\r\n\tfunction setWithdraw(address _addr) external;\r\n\r\n\tfunction setWithdrawStorage(address _addr) external;\r\n\r\n\tfunction setMarketFactory(address _addr) external;\r\n\r\n\tfunction setMarketGroup(address _addr) external;\r\n\r\n\tfunction setPropertyFactory(address _addr) external;\r\n\r\n\tfunction setPropertyGroup(address _addr) external;\r\n\r\n\tfunction setMetricsFactory(address _addr) external;\r\n\r\n\tfunction setMetricsGroup(address _addr) external;\r\n\r\n\tfunction setPolicyFactory(address _addr) external;\r\n\r\n\tfunction setPolicyGroup(address _addr) external;\r\n\r\n\tfunction setPolicySet(address _addr) external;\r\n\r\n\tfunction setPolicy(address _addr) external;\r\n\r\n\tfunction setToken(address _addr) external;\r\n\r\n\tfunction setLockup(address _addr) external;\r\n\r\n\tfunction setLockupStorage(address _addr) external;\r\n\r\n\tfunction setVoteTimes(address _addr) external;\r\n\r\n\tfunction setVoteTimesStorage(address _addr) external;\r\n\r\n\tfunction setVoteCounter(address _addr) external;\r\n\r\n\tfunction setVoteCounterStorage(address _addr) external;\r\n}\r\n\r\n// File: contracts/src/common/config/UsingConfig.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n/**\r\n * Module for using AddressConfig contracts.\r\n */\r\ncontract UsingConfig {\r\n\taddress private _config;\r\n\r\n\t/**\r\n\t * Initialize the argument as AddressConfig address.\r\n\t */\r\n\tconstructor(address _addressConfig) public {\r\n\t\t_config = _addressConfig;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the latest AddressConfig instance.\r\n\t */\r\n\tfunction config() internal view returns (IAddressConfig) {\r\n\t\treturn IAddressConfig(_config);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the latest AddressConfig address.\r\n\t */\r\n\tfunction configAddress() external view returns (address) {\r\n\t\treturn _config;\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/interface/IProperty.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IProperty {\r\n\tfunction author() external view returns (address);\r\n\r\n\tfunction changeAuthor(address _nextAuthor) external;\r\n\r\n\tfunction changeName(string calldata _name) external;\r\n\r\n\tfunction changeSymbol(string calldata _symbol) external;\r\n\r\n\tfunction withdraw(address _sender, uint256 _value) external;\r\n}\r\n\r\n// File: contracts/interface/IMarket.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IMarket {\r\n\tfunction authenticate(\r\n\t\taddress _prop,\r\n\t\tstring calldata _args1,\r\n\t\tstring calldata _args2,\r\n\t\tstring calldata _args3,\r\n\t\tstring calldata _args4,\r\n\t\tstring calldata _args5\r\n\t) external returns (bool);\r\n\r\n\tfunction authenticateFromPropertyFactory(\r\n\t\taddress _prop,\r\n\t\taddress _author,\r\n\t\tstring calldata _args1,\r\n\t\tstring calldata _args2,\r\n\t\tstring calldata _args3,\r\n\t\tstring calldata _args4,\r\n\t\tstring calldata _args5\r\n\t) external returns (bool);\r\n\r\n\tfunction authenticatedCallback(address _property, bytes32 _idHash)\r\n\t\texternal\r\n\t\treturns (address);\r\n\r\n\tfunction deauthenticate(address _metrics) external;\r\n\r\n\tfunction schema() external view returns (string memory);\r\n\r\n\tfunction behavior() external view returns (address);\r\n\r\n\tfunction issuedMetrics() external view returns (uint256);\r\n\r\n\tfunction enabled() external view returns (bool);\r\n\r\n\tfunction votingEndBlockNumber() external view returns (uint256);\r\n\r\n\tfunction toEnable() external;\r\n}\r\n\r\n// File: contracts/interface/IMarketBehavior.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IMarketBehavior {\r\n\tfunction authenticate(\r\n\t\taddress _prop,\r\n\t\tstring calldata _args1,\r\n\t\tstring calldata _args2,\r\n\t\tstring calldata _args3,\r\n\t\tstring calldata _args4,\r\n\t\tstring calldata _args5,\r\n\t\taddress market,\r\n\t\taddress account\r\n\t) external returns (bool);\r\n\r\n\tfunction schema() external view returns (string memory);\r\n\r\n\tfunction getId(address _metrics) external view returns (string memory);\r\n\r\n\tfunction getMetrics(string calldata _id) external view returns (address);\r\n}\r\n\r\n// File: contracts/interface/IPolicy.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IPolicy {\r\n\tfunction rewards(uint256 _lockups, uint256 _assets)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction holdersShare(uint256 _amount, uint256 _lockups)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction authenticationFee(uint256 _assets, uint256 _propertyAssets)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction marketVotingBlocks() external view returns (uint256);\r\n\r\n\tfunction policyVotingBlocks() external view returns (uint256);\r\n\r\n\tfunction shareOfTreasury(uint256 _supply) external view returns (uint256);\r\n\r\n\tfunction treasury() external view returns (address);\r\n\r\n\tfunction capSetter() external view returns (address);\r\n}\r\n\r\n// File: contracts/interface/IMetrics.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IMetrics {\r\n\tfunction market() external view returns (address);\r\n\r\n\tfunction property() external view returns (address);\r\n}\r\n\r\n// File: contracts/interface/IMetricsFactory.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IMetricsFactory {\r\n\tfunction create(address _property) external returns (address);\r\n\r\n\tfunction destroy(address _metrics) external;\r\n}\r\n\r\n// File: contracts/interface/IMetricsGroup.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IMetricsGroup {\r\n\tfunction addGroup(address _addr) external;\r\n\r\n\tfunction removeGroup(address _addr) external;\r\n\r\n\tfunction isGroup(address _addr) external view returns (bool);\r\n\r\n\tfunction totalIssuedMetrics() external view returns (uint256);\r\n\r\n\tfunction hasAssets(address _property) external view returns (bool);\r\n\r\n\tfunction getMetricsCountPerProperty(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction totalAuthenticatedProperties() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interface/ILockup.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface ILockup {\r\n\tfunction lockup(\r\n\t\taddress _from,\r\n\t\taddress _property,\r\n\t\tuint256 _value\r\n\t) external;\r\n\r\n\tfunction update() external;\r\n\r\n\tfunction withdraw(address _property, uint256 _amount) external;\r\n\r\n\tfunction calculateCumulativeRewardPrices()\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (\r\n\t\t\tuint256 _reward,\r\n\t\t\tuint256 _holders,\r\n\t\t\tuint256 _interest,\r\n\t\t\tuint256 _holdersCap\r\n\t\t);\r\n\r\n\tfunction calculateRewardAmount(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256, uint256);\r\n\r\n\t/**\r\n\t * caution!!!this function is deprecated!!!\r\n\t * use calculateRewardAmount\r\n\t */\r\n\tfunction calculateCumulativeHoldersRewardAmount(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction getPropertyValue(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction getAllValue() external view returns (uint256);\r\n\r\n\tfunction getValue(address _property, address _sender)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction calculateWithdrawableInterestAmount(\r\n\t\taddress _property,\r\n\t\taddress _user\r\n\t) external view returns (uint256);\r\n\r\n\tfunction cap() external view returns (uint256);\r\n\r\n\tfunction updateCap(uint256 _cap) external;\r\n\r\n\tfunction devMinter() external view returns (address);\r\n}\r\n\r\n// File: contracts/interface/IDev.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IDev {\r\n\tfunction deposit(address _to, uint256 _amount) external returns (bool);\r\n\r\n\tfunction depositFrom(\r\n\t\taddress _from,\r\n\t\taddress _to,\r\n\t\tuint256 _amount\r\n\t) external returns (bool);\r\n\r\n\tfunction fee(address _from, uint256 _amount) external returns (bool);\r\n}\r\n\r\n// File: contracts/src/market/Market.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * A user-proposable contract for authenticating and associating assets with Property.\r\n * A user deploys a contract that inherits IMarketBehavior and creates this Market contract with the MarketFactory contract.\r\n */\r\ncontract Market is UsingConfig, IMarket {\r\n\tusing SafeMath for uint256;\r\n\tbool public enabled;\r\n\taddress public behavior;\r\n\tuint256 public votingEndBlockNumber;\r\n\tuint256 public issuedMetrics;\r\n\tmapping(bytes32 => bool) private idMap;\r\n\tmapping(address => bytes32) private idHashMetricsMap;\r\n\r\n\t/**\r\n\t * Initialize the passed address as AddressConfig address and user-proposed contract.\r\n\t */\r\n\tconstructor(address _config, address _behavior)\r\n\t\tpublic\r\n\t\tUsingConfig(_config)\r\n\t{\r\n\t\t/**\r\n\t\t * Validates the sender is MarketFactory contract.\r\n\t\t */\r\n\t\trequire(\r\n\t\t\tmsg.sender == config().marketFactory(),\r\n\t\t\t\"this is illegal address\"\r\n\t\t);\r\n\r\n\t\t/**\r\n\t\t * Stores the contract address proposed by a user as an internal variable.\r\n\t\t */\r\n\t\tbehavior = _behavior;\r\n\r\n\t\t/**\r\n\t\t * By default this contract is disabled.\r\n\t\t */\r\n\t\tenabled = false;\r\n\r\n\t\t/**\r\n\t\t * Sets the period during which voting by voters can be accepted.\r\n\t\t * This period is determined by `Policy.marketVotingBlocks`.\r\n\t\t */\r\n\t\tuint256 marketVotingBlocks = IPolicy(config().policy())\r\n\t\t\t.marketVotingBlocks();\r\n\t\tvotingEndBlockNumber = block.number.add(marketVotingBlocks);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the sender is the passed Property's author.\r\n\t */\r\n\tfunction propertyValidation(address _prop) private view {\r\n\t\trequire(\r\n\t\t\tmsg.sender == IProperty(_prop).author(),\r\n\t\t\t\"this is illegal address\"\r\n\t\t);\r\n\t\trequire(enabled, \"market is not enabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Modifier for validates the sender is the passed Property's author.\r\n\t */\r\n\tmodifier onlyPropertyAuthor(address _prop) {\r\n\t\tpropertyValidation(_prop);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * Modifier for validates the sender is the author of the Property associated with the passed Metrics contract.\r\n\t */\r\n\tmodifier onlyLinkedPropertyAuthor(address _metrics) {\r\n\t\taddress _prop = IMetrics(_metrics).property();\r\n\t\tpropertyValidation(_prop);\r\n\t\t_;\r\n\t}\r\n\r\n\t/**\r\n\t * Activates this Market.\r\n\t * Called from MarketFactory contract.\r\n\t */\r\n\tfunction toEnable() external {\r\n\t\trequire(\r\n\t\t\tmsg.sender == config().marketFactory(),\r\n\t\t\t\"this is illegal address\"\r\n\t\t);\r\n\t\trequire(isDuringVotingPeriod(), \"deadline is over\");\r\n\t\tenabled = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Authenticates the new asset and proves that the Property author is the owner of the asset.\r\n\t */\r\n\tfunction authenticate(\r\n\t\taddress _prop,\r\n\t\tstring memory _args1,\r\n\t\tstring memory _args2,\r\n\t\tstring memory _args3,\r\n\t\tstring memory _args4,\r\n\t\tstring memory _args5\r\n\t) public onlyPropertyAuthor(_prop) returns (bool) {\r\n\t\treturn\r\n\t\t\t_authenticate(\r\n\t\t\t\t_prop,\r\n\t\t\t\tmsg.sender,\r\n\t\t\t\t_args1,\r\n\t\t\t\t_args2,\r\n\t\t\t\t_args3,\r\n\t\t\t\t_args4,\r\n\t\t\t\t_args5\r\n\t\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Authenticates the new asset and proves that the Property author is the owner of the asset.\r\n\t */\r\n\tfunction authenticateFromPropertyFactory(\r\n\t\taddress _prop,\r\n\t\taddress _author,\r\n\t\tstring calldata _args1,\r\n\t\tstring calldata _args2,\r\n\t\tstring calldata _args3,\r\n\t\tstring calldata _args4,\r\n\t\tstring calldata _args5\r\n\t) external returns (bool) {\r\n\t\t/**\r\n\t\t * Validates the sender is PropertyFactory.\r\n\t\t */\r\n\t\trequire(\r\n\t\t\tmsg.sender == config().propertyFactory(),\r\n\t\t\t\"this is illegal address\"\r\n\t\t);\r\n\r\n\t\t/**\r\n\t\t * Validates this Market is already enabled..\r\n\t\t */\r\n\t\trequire(enabled, \"market is not enabled\");\r\n\r\n\t\treturn\r\n\t\t\t_authenticate(\r\n\t\t\t\t_prop,\r\n\t\t\t\t_author,\r\n\t\t\t\t_args1,\r\n\t\t\t\t_args2,\r\n\t\t\t\t_args3,\r\n\t\t\t\t_args4,\r\n\t\t\t\t_args5\r\n\t\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Bypass to IMarketBehavior.authenticate.\r\n\t * Authenticates the new asset and proves that the Property author is the owner of the asset.\r\n\t */\r\n\tfunction _authenticate(\r\n\t\taddress _prop,\r\n\t\taddress _author,\r\n\t\tstring memory _args1,\r\n\t\tstring memory _args2,\r\n\t\tstring memory _args3,\r\n\t\tstring memory _args4,\r\n\t\tstring memory _args5\r\n\t) private returns (bool) {\r\n\t\trequire(bytes(_args1).length > 0, \"id is required\");\r\n\r\n\t\treturn\r\n\t\t\tIMarketBehavior(behavior).authenticate(\r\n\t\t\t\t_prop,\r\n\t\t\t\t_args1,\r\n\t\t\t\t_args2,\r\n\t\t\t\t_args3,\r\n\t\t\t\t_args4,\r\n\t\t\t\t_args5,\r\n\t\t\t\taddress(this),\r\n\t\t\t\t_author\r\n\t\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the authentication fee.\r\n\t * Calculates by gets the staking amount of the Property to be authenticated\r\n\t * and the total number of authenticated assets on the protocol, and calling `Policy.authenticationFee`.\r\n\t */\r\n\tfunction getAuthenticationFee(address _property)\r\n\t\tprivate\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tuint256 tokenValue = ILockup(config().lockup()).getPropertyValue(\r\n\t\t\t_property\r\n\t\t);\r\n\t\tIPolicy policy = IPolicy(config().policy());\r\n\t\tIMetricsGroup metricsGroup = IMetricsGroup(config().metricsGroup());\r\n\t\treturn\r\n\t\t\tpolicy.authenticationFee(\r\n\t\t\t\tmetricsGroup.totalIssuedMetrics(),\r\n\t\t\t\ttokenValue\r\n\t\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * A function that will be called back when the asset is successfully authenticated.\r\n\t * There are cases where oracle is required for the authentication process, so the function is used callback style.\r\n\t */\r\n\tfunction authenticatedCallback(address _property, bytes32 _idHash)\r\n\t\texternal\r\n\t\treturns (address)\r\n\t{\r\n\t\t/**\r\n\t\t * Validates the sender is the saved IMarketBehavior address.\r\n\t\t */\r\n\t\trequire(msg.sender == behavior, \"this is illegal address\");\r\n\t\trequire(enabled, \"market is not enabled\");\r\n\r\n\t\t/**\r\n\t\t * Validates the assets are not double authenticated.\r\n\t\t */\r\n\t\trequire(idMap[_idHash] == false, \"id is duplicated\");\r\n\t\tidMap[_idHash] = true;\r\n\r\n\t\t/**\r\n\t\t * Gets the Property author address.\r\n\t\t */\r\n\t\taddress sender = IProperty(_property).author();\r\n\r\n\t\t/**\r\n\t\t * Publishes a new Metrics contract and associate the Property with the asset.\r\n\t\t */\r\n\t\tIMetricsFactory metricsFactory = IMetricsFactory(\r\n\t\t\tconfig().metricsFactory()\r\n\t\t);\r\n\t\taddress metrics = metricsFactory.create(_property);\r\n\t\tidHashMetricsMap[metrics] = _idHash;\r\n\r\n\t\t/**\r\n\t\t * Burn as a authentication fee.\r\n\t\t */\r\n\t\tuint256 authenticationFee = getAuthenticationFee(_property);\r\n\t\trequire(\r\n\t\t\tIDev(config().token()).fee(sender, authenticationFee),\r\n\t\t\t\"dev fee failed\"\r\n\t\t);\r\n\r\n\t\t/**\r\n\t\t * Adds the number of authenticated assets in this Market.\r\n\t\t */\r\n\t\tissuedMetrics = issuedMetrics.add(1);\r\n\t\treturn metrics;\r\n\t}\r\n\r\n\t/**\r\n\t * Release the authenticated asset.\r\n\t */\r\n\tfunction deauthenticate(address _metrics)\r\n\t\texternal\r\n\t\tonlyLinkedPropertyAuthor(_metrics)\r\n\t{\r\n\t\t/**\r\n\t\t * Validates the passed Metrics address is authenticated in this Market.\r\n\t\t */\r\n\t\tbytes32 idHash = idHashMetricsMap[_metrics];\r\n\t\trequire(idMap[idHash], \"not authenticated\");\r\n\r\n\t\t/**\r\n\t\t * Removes the authentication status from local variables.\r\n\t\t */\r\n\t\tidMap[idHash] = false;\r\n\t\tidHashMetricsMap[_metrics] = bytes32(0);\r\n\r\n\t\t/**\r\n\t\t * Removes the passed Metrics contract from the Metrics address set.\r\n\t\t */\r\n\t\tIMetricsFactory metricsFactory = IMetricsFactory(\r\n\t\t\tconfig().metricsFactory()\r\n\t\t);\r\n\t\tmetricsFactory.destroy(_metrics);\r\n\r\n\t\t/**\r\n\t\t * Subtracts the number of authenticated assets in this Market.\r\n\t\t */\r\n\t\tissuedMetrics = issuedMetrics.sub(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Bypass to IMarketBehavior.schema.\r\n\t */\r\n\tfunction schema() external view returns (string memory) {\r\n\t\treturn IMarketBehavior(behavior).schema();\r\n\t}\r\n\r\n\tfunction isDuringVotingPeriod() private view returns (bool) {\r\n\t\treturn block.number < votingEndBlockNumber;\r\n\t}\r\n}\r\n\r\n// File: contracts/interface/IMarketFactory.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IMarketFactory {\r\n\tfunction create(address _addr) external returns (address);\r\n\r\n\tfunction enable(address _addr) external;\r\n}\r\n\r\n// File: contracts/interface/IMarketGroup.sol\r\n\r\n// SPDX-License-Identifier: MPL-2.0\r\npragma solidity >=0.5.17;\r\n\r\ninterface IMarketGroup {\r\n\tfunction addGroup(address _addr) external;\r\n\r\n\tfunction isGroup(address _addr) external view returns (bool);\r\n\r\n\tfunction getCount() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/src/market/MarketFactory.sol\r\n\r\npragma solidity 0.5.17;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * A factory contract that creates a new Market contract.\r\n */\r\ncontract MarketFactory is Ownable, IMarketFactory, UsingConfig {\r\n\tevent Create(address indexed _from, address _market);\r\n\r\n\t/**\r\n\t * Initialize the passed address as AddressConfig address.\r\n\t */\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\t/**\r\n\t * Creates a new Market contract.\r\n\t */\r\n\tfunction create(address _addr) external returns (address) {\r\n\t\t/**\r\n\t\t * Validates the passed address is not 0 address.\r\n\t\t */\r\n\t\trequire(_addr != address(0), \"this is illegal address\");\r\n\r\n\t\t/**\r\n\t\t * Creates a new Market contract with the passed address as the IMarketBehavior.\r\n\t\t */\r\n\t\tMarket market = new Market(address(config()), _addr);\r\n\r\n\t\t/**\r\n\t\t * Adds the created Market contract to the Market address set.\r\n\t\t */\r\n\t\taddress marketAddr = address(market);\r\n\t\tIMarketGroup marketGroup = IMarketGroup(config().marketGroup());\r\n\t\tmarketGroup.addGroup(marketAddr);\r\n\r\n\t\t/**\r\n\t\t * For the first Market contract, it will be activated immediately.\r\n\t\t * If not, the Market contract will be activated after a vote by the voters.\r\n\t\t */\r\n\t\tif (marketGroup.getCount() == 1) {\r\n\t\t\tmarket.toEnable();\r\n\t\t}\r\n\r\n\t\temit Create(msg.sender, marketAddr);\r\n\t\treturn marketAddr;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Market contract.\r\n\t */\r\n\tfunction enable(address _addr) external onlyOwner {\r\n\t\t/**\r\n\t\t * Validates the passed address is not 0 address.\r\n\t\t */\r\n\t\tIMarketGroup marketGroup = IMarketGroup(config().marketGroup());\r\n\t\trequire(marketGroup.isGroup(_addr), \"this is illegal address\");\r\n\r\n\t\t/**\r\n\t\t * Market will be enable.\r\n\t\t */\r\n\t\tIMarket market = IMarket(_addr);\r\n\t\trequire(market.enabled() == false, \"already enabled\");\r\n\r\n\t\tmarket.toEnable();\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"}],\"name\":\"Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"configAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"enable\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MarketFactory","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001d415aa39d647834786eb9b5a333a50e9935b796","EVMVersion":"Default","Library":"","LicenseType":"MPL-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c7ed0b3b5cca0a498ddbe22acfc66d3d081ba66a70b0efe93bdf45b0d0121e55"}]}