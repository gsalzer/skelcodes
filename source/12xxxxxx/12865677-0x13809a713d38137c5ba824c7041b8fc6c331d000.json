{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/v1/markets/eth/nftx/NftxV1Market.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"../../../../../interfaces/markets/tokens/IERC20.sol\\\";\\nimport \\\"../../../../../interfaces/markets/tokens/IERC721.sol\\\";\\n\\ninterface INFTX {\\n    function mint(\\n        uint256 vaultId, \\n        uint256[] memory nftIds, \\n        uint256 d2Amount\\n    ) external payable;\\n\\n    // function redeem(\\n    //     uint256 vaultId,\\n    //     uint256 amount\\n    // ) external payable;\\n}\\n\\ninterface IWrappedPunk {\\n    /**\\n     * @dev Mints a wrapped punk\\n     */\\n    function mint(uint256 punkIndex) external;\\n    \\n    /**\\n     * @dev Registers proxy\\n     */\\n    function registerProxy() external;\\n\\n    /**\\n     * @dev Gets proxy address\\n     */\\n    function proxyInfo(address user) external view returns (address);\\n}\\n\\ninterface ICryptoPunks {\\n    // Transfer ownership of a punk to another user without requiring payment\\n    function transferPunk(address to, uint punkIndex) external;\\n}\\n\\ninterface IMoonCatsWrapped {\\n    function wrap(bytes5 catId) external;\\n    function _catIDToTokenID(bytes5 catId) external view returns(uint256);\\n}\\n\\ninterface IMoonCatsRescue {\\n    /* puts a cat up for a specific address to adopt */\\n    function makeAdoptionOfferToAddress(bytes5 catId, uint price, address to) external;\\n\\n    function rescueOrder(uint256 rescueIndex) external view returns(bytes5);\\n}\\n\\ninterface IMoonCatAcclimator {\\n    /**\\n     * @dev Take a list of MoonCats wrapped in this contract and unwrap them.\\n     * @param _rescueOrders an array of MoonCats, identified by rescue order, to unwrap\\n     */\\n    function batchUnwrap(uint256[] memory _rescueOrders) external;\\n}\\n\\nlibrary NftxV1Market {\\n    address public constant NFTX = 0xAf93fCce0548D3124A5fC3045adAf1ddE4e8Bf7e;\\n\\n    function _approve(\\n        address _operator, \\n        address _token, \\n        uint256[] memory _tokenIds\\n    ) internal {\\n        // in case of kitties\\n        if (_token == 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d) {\\n            for (uint256 i = 0; i < _tokenIds.length; i++) {\\n                IERC721(_token).approve(_operator, _tokenIds[i]);\\n            }\\n        }\\n        // default\\n        else if (!IERC721(_token).isApprovedForAll(address(this), _operator)) {\\n            IERC721(_token).setApprovalForAll(_operator, true);\\n        }\\n    }\\n\\n    function sellERC721ForERC20Equivalent(\\n        uint256 vaultId,\\n        uint256[] memory tokenIds,\\n        address token\\n    ) external {\\n        _approve(NFTX, token, tokenIds);\\n        INFTX(NFTX).mint(vaultId, tokenIds, 0);\\n    }\\n}\"\r\n    },\r\n    \"interfaces/markets/tokens/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\ninterface IERC20 {\\n    /**\\n        * @dev Returns the amount of tokens owned by `account`.\\n        */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n        * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n        *\\n        * Returns a boolean value indicating whether the operation succeeded.\\n        *\\n        * Emits a {Transfer} event.\\n        */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\"\r\n    },\r\n    \"interfaces/markets/tokens/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.4;\\n\\ninterface IERC721 {\\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n    ///  THEY MAY BE PERMANENTLY LOST\\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\\n    ///  `_tokenId` is not a valid NFT.\\n    /// @param _from The current owner of the NFT\\n    /// @param _to The new owner\\n    /// @param _tokenId The NFT to transfer\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) external;\\n    \\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function approve(address to, uint256 tokenId) external;\\n    \\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"NFTX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"NftxV1Market","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}