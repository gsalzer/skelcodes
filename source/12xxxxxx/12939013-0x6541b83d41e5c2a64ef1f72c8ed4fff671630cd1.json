{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/contracts/RocketFactoryMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract RocketFactoryMarket is Ownable, IERC721Receiver, ReentrancyGuard {\\n    /*\\n        EVENTS\\n    */\\n    event ItemOnAuction(\\n        uint256 timestamp,\\n        uint256 indexed itemId,\\n        uint8 indexed itemType,\\n        Auction auction\\n    );\\n    event ItemClaimed(\\n        uint256 timestamp,\\n        uint256 indexed itemId,\\n        uint8 indexed itemType,\\n        Auction auction\\n    );\\n    event ItemBidded(\\n        uint256 timestamp,\\n        uint256 indexed itemId,\\n        uint8 indexed itemType,\\n        Auction auction\\n    );\\n    event ItemForSale(\\n        uint256 timestamp,\\n        uint256 indexed itemId,\\n        uint8 indexed itemType,\\n        Sale sale\\n    );\\n    event ItemSold(\\n        uint256 timestamp,\\n        uint256 indexed itemId,\\n        uint8 indexed itemType,\\n        address buyer,\\n        Sale sale\\n    );\\n    event ItemSaleCancelled(\\n        uint256 timestamp,\\n        uint256 indexed itemId,\\n        uint8 indexed itemType,\\n        Sale sale\\n    );\\n    event TradeCreated(uint256 timestamp, Trade trade);\\n    event TradeAccepted(uint256 timestamp, Trade trade);\\n    event TradeCancelled(uint256 timestamp, Trade trade);\\n    event TradeRejected(uint256 timestamp, Trade trade);\\n    event OfferCreated(\\n        uint256 timestamp,\\n        uint256 indexed itemId,\\n        uint8 indexed itemType,\\n        Offer offer\\n    );\\n    event OfferAccepted(\\n        uint256 timestamp,\\n        uint256 indexed itemId,\\n        uint8 indexed itemType,\\n        Offer offer\\n    );\\n    event OfferCancelled(\\n        uint256 timestamp,\\n        uint256 indexed itemId,\\n        uint8 indexed itemType,\\n        Offer offer\\n    );\\n    event OfferRejected(\\n        uint256 timestamp,\\n        uint256 indexed itemId,\\n        uint8 indexed itemType,\\n        Offer offer\\n    );\\n\\n    /*\\n        STRUCTS\\n    */\\n    struct Sale {\\n        address seller;\\n        uint16 itemId;\\n        uint8 itemType;\\n        uint32 endTimestamp;\\n        address erc20;\\n        uint256 price;\\n    }\\n\\n    struct Auction {\\n        address seller;\\n        uint16 itemId;\\n        uint8 itemType;\\n        uint32 endTimestamp;\\n        uint32 maxBidTimestamp;\\n        address erc20;\\n        address maxBidderAddress;\\n        uint256 startPrice;\\n        uint256 maxBidAmount;\\n    }\\n\\n    struct Item {\\n        uint16 itemId;\\n        uint8 itemType;\\n    }\\n\\n    struct Trade {\\n        address offerer;\\n        address offeree;\\n        Item[] offering;\\n        Item[] requesting;\\n    }\\n\\n    struct Offer {\\n        address offerer;\\n        uint8 itemType;\\n        uint16 itemId;\\n        address offeree;\\n        address erc20;\\n        uint256 price;\\n    }\\n\\n    mapping(uint8 => mapping(uint256 => Auction)) public itemsToAuction;\\n    mapping(uint8 => mapping(uint256 => Sale)) public itemsToSale;\\n    mapping(address => mapping(address => Trade)) public trades;\\n    mapping(uint8 => mapping(uint256 => mapping(address => Offer))) public offers;\\n    mapping(uint8 => address) itemTypeToTokenAddress;\\n    mapping(address => bool) allowedErc20;\\n    mapping(address => uint256) contractBalance;\\n\\n    uint256 ownerCutPercentage = 1000;\\n\\n    /* \\n        MODIFIERS\\n    */\\n\\n    modifier isNotBeingTransacted(uint16 _itemId, uint8 _itemType) {\\n        require(\\n            IERC721(itemTypeToTokenAddress[_itemType]).ownerOf(_itemId) != address(this),\\n            \\\"The item is part of another transaction\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier isOnSale(uint16 _itemId, uint8 _itemType) {\\n        require(\\n            itemsToSale[_itemType][_itemId].seller != address(0x0),\\n            \\\"The item is not for sale\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier isNotOnSale(uint16 _itemId, uint8 _itemType) {\\n        require(\\n            itemsToSale[_itemType][_itemId].seller == address(0x0),\\n            \\\"The item is for sale\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier isOnAuction(uint16 _itemId, uint8 _itemType) {\\n        require(\\n            itemsToAuction[_itemType][_itemId].seller != address(0x0),\\n            \\\"The item is not on auction\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier isNotOnAuction(uint16 _itemId, uint8 _itemType) {\\n        require(\\n            itemsToAuction[_itemType][_itemId].seller == address(0x0),\\n            \\\"The item is on auction\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier itemTypeExists(uint8 _itemType) {\\n        require(\\n            itemTypeToTokenAddress[_itemType] != address(0x0),\\n            \\\"The item type does not exist\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier callerIsUser() {\\n        require(tx.origin == msg.sender, \\\"The caller is another contract\\\");\\n        _;\\n    }\\n\\n    /* \\n        MANAGEMENT METHODS \\n    */\\n    constructor() {\\n        allowedErc20[address(0x0)] = true;\\n    }\\n\\n    function setItemTokenAddress(uint8 _itemType, address _itemTokenAddress)\\n        external\\n        onlyOwner\\n    {\\n        itemTypeToTokenAddress[_itemType] = _itemTokenAddress;\\n    }\\n\\n    function setAllowedERC20(address _erc20, bool _allowed) external onlyOwner {\\n        allowedErc20[_erc20] = _allowed;\\n    }\\n\\n    function withdraw(address _erc20) external onlyOwner {\\n        if (_erc20 == address(0x0)) {\\n            payable(msg.sender).transfer(contractBalance[_erc20]);\\n            contractBalance[_erc20] = 0;\\n        } else {\\n            IERC20(_erc20).transferFrom(address(this), msg.sender, contractBalance[_erc20]);\\n            contractBalance[_erc20] = 0;\\n        }\\n    }\\n\\n    function returnItem(uint16 _itemId, uint8 _itemType, address _to) external onlyOwner {\\n        IERC721(itemTypeToTokenAddress[_itemType]).safeTransferFrom(address(this), _to, _itemId);\\n    }\\n\\n    \\n    function deleteAuction(uint16 _itemId, uint8 _itemType) external onlyOwner {\\n        Auction memory auction = itemsToAuction[_itemType][_itemId];\\n\\n        if (auction.maxBidderAddress != address(0x0)) {\\n            if (auction.erc20 == address(0x0)) {\\n                payable(auction.maxBidderAddress).transfer(\\n                    auction.maxBidAmount\\n                );\\n            } else {\\n                IERC20(auction.erc20).transfer(\\n                    auction.maxBidderAddress,\\n                    auction.maxBidAmount\\n                );\\n            }\\n        }\\n\\n        IERC721(itemTypeToTokenAddress[_itemType]).safeTransferFrom(address(this), auction.seller, _itemId);\\n        \\n        delete itemsToAuction[_itemType][_itemId];\\n    }\\n\\n    \\n    function deleteSale(uint16 _itemId, uint8 _itemType) external onlyOwner {\\n        Sale memory sale = itemsToSale[_itemType][_itemId];\\n        IERC721(itemTypeToTokenAddress[_itemType]).safeTransferFrom(address(this), sale.seller, _itemId);\\n        delete itemsToSale[_itemType][_itemId];\\n    }\\n\\n    function checkBalance(address _erc20) external view onlyOwner returns (uint256) {\\n        return contractBalance[_erc20];\\n    }\\n\\n    function setOwnerCut(uint16 _ownerCutPercentage) external onlyOwner {\\n        ownerCutPercentage = _ownerCutPercentage;\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) external virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /* \\n        SALES\\n    */\\n    function createSale(\\n        uint16 _itemId,\\n        uint8 _itemType,\\n        uint256 _price,\\n        uint32 _endTimestamp,\\n        address _erc20\\n    )\\n        external\\n        itemTypeExists(_itemType)\\n        isNotBeingTransacted(_itemId, _itemType)\\n    {\\n        IERC721 token = IERC721(itemTypeToTokenAddress[_itemType]);\\n        require(\\n            allowedErc20[_erc20] == true,\\n            \\\"The specified ERC20 token is not allowed\\\"\\n        );\\n        require(\\n            token.ownerOf(_itemId) == msg.sender,\\n            \\\"Only the item owner can create an auction\\\"\\n        );\\n        require(_price > 0, \\\"Minimum price must be above 0\\\");\\n\\n        token.safeTransferFrom(msg.sender, address(this), _itemId);\\n\\n        Sale storage sale = itemsToSale[_itemType][_itemId];\\n\\n        sale.seller = msg.sender;\\n        sale.erc20 = _erc20;\\n        sale.itemId = _itemId;\\n        sale.itemType = _itemType;\\n        sale.price = _price;\\n        sale.endTimestamp = _endTimestamp;\\n\\n        emit ItemForSale( uint32(block.timestamp % 2**32), _itemId, _itemType, sale);\\n    }\\n\\n    function buy(\\n        uint16 _itemId,\\n        uint8 _itemType\\n    )\\n        external\\n        payable\\n        callerIsUser()\\n        itemTypeExists(_itemType)\\n        isOnSale(_itemId, _itemType)\\n    {\\n        Sale memory sale = itemsToSale[_itemType][_itemId];\\n\\n        require(msg.sender != sale.seller, \\\"Can't buy on your own sale\\\"); \\n        require( uint32(block.timestamp % 2**32) < sale.endTimestamp || sale.endTimestamp == 0, \\\"Sale has finished already\\\");\\n\\n        uint256 sellerCut = sale.price;\\n        uint256 ownerCut = 0;\\n\\n        if (sale.seller != owner()) {\\n            ownerCut = (sellerCut * ownerCutPercentage) / 10000;\\n            sellerCut = sellerCut - ownerCut;\\n        }\\n\\n        if (sale.erc20 == address(0x0)) {\\n            require(\\n                msg.value >= sale.price,\\n                \\\"Not enough Ether sent to complete the sale\\\"\\n            );\\n\\n            payable(sale.seller).transfer(sellerCut);\\n        } else {\\n            IERC20(sale.erc20).transferFrom(msg.sender, sale.seller, sellerCut);\\n            IERC20(sale.erc20).transferFrom(msg.sender, address(this), ownerCut);\\n        }\\n\\n        contractBalance[sale.erc20] += ownerCut;\\n\\n        delete itemsToSale[_itemType][_itemId];\\n\\n        IERC721(itemTypeToTokenAddress[_itemType]).safeTransferFrom(\\n            address(this),\\n            msg.sender,\\n            _itemId\\n        );\\n\\n        emit ItemSold( uint32(block.timestamp % 2**32), _itemId, _itemType, msg.sender, sale);\\n    }\\n\\n    function cancelSale(uint16 _itemId, uint8 _itemType)\\n        external\\n        itemTypeExists(_itemType)\\n        isOnSale(_itemId, _itemType)\\n    {\\n        Sale memory sale = itemsToSale[_itemType][_itemId];\\n        require(\\n            sale.seller == msg.sender,\\n            \\\"Only the creator can cancel the sale\\\"\\n        );\\n        delete itemsToSale[_itemType][_itemId];\\n        IERC721(itemTypeToTokenAddress[_itemType]).safeTransferFrom(\\n            address(this),\\n            msg.sender,\\n            _itemId\\n        );\\n        emit ItemSaleCancelled( uint32(block.timestamp % 2**32), _itemId, _itemType, sale);\\n    }\\n\\n    /*\\n       AUCTIONS\\n    */\\n    function createAuction(\\n        uint16 _itemId,\\n        uint8 _itemType,\\n        uint256 _startPrice,\\n        uint32 _endTimestamp,\\n        address _erc20\\n    )\\n        external\\n        itemTypeExists(_itemType)\\n        isNotBeingTransacted(_itemId, _itemType)\\n    {\\n        IERC721 token = IERC721(itemTypeToTokenAddress[_itemType]);\\n        require(\\n            token.ownerOf(_itemId) == msg.sender,\\n            \\\"Only the item owner can create an auction\\\"\\n        );\\n        require(\\n            allowedErc20[_erc20] == true,\\n            \\\"The specified ERC20 token is not allowed\\\"\\n        );\\n\\n        token.safeTransferFrom(msg.sender, address(this), _itemId);\\n\\n        Auction storage auction = itemsToAuction[_itemType][_itemId];\\n        auction.seller = msg.sender;\\n        auction.itemId = _itemId;\\n        auction.itemType = _itemType;\\n        auction.startPrice = _startPrice;\\n        auction.maxBidAmount = _startPrice;\\n        auction.endTimestamp = _endTimestamp;\\n        auction.erc20 = _erc20;\\n\\n        emit ItemOnAuction( uint32(block.timestamp % 2**32), _itemId, _itemType, auction);\\n    }\\n\\n    function placeBid(\\n        uint16 _itemId,\\n        uint8 _itemType,\\n        uint256 _bid\\n    )\\n        external\\n        payable\\n        callerIsUser()\\n        nonReentrant()\\n        isOnAuction(_itemId, _itemType)\\n    {\\n        Auction storage auction = itemsToAuction[_itemType][_itemId];\\n\\n        require(msg.sender != auction.seller, \\\"Cant bid on your own auction\\\");\\n        require(\\n             uint32(block.timestamp % 2**32) <= auction.endTimestamp,\\n            \\\"Auction has finished already\\\"\\n        );\\n\\n        uint256 bid = auction.erc20 == address(0x0) ? msg.value : _bid;\\n\\n        if (auction.maxBidderAddress == address(0x0)) {\\n            require(\\n                bid >= auction.startPrice,\\n                \\\"Not enough to top the current bid\\\"\\n            );\\n        } else {\\n            require(\\n                bid > auction.maxBidAmount,\\n                \\\"Not enough to top the current bid\\\"\\n            );\\n        }\\n\\n\\n        if (auction.erc20 != address(0x0)) {\\n            IERC20(auction.erc20).transferFrom(msg.sender, address(this), bid);\\n        }\\n\\n        if (auction.maxBidderAddress != address(0x0)) {\\n            if (auction.erc20 == address(0x0)) {\\n                payable(auction.maxBidderAddress).transfer(\\n                    auction.maxBidAmount\\n                );\\n            } else {\\n                IERC20(auction.erc20).transfer(\\n                    auction.maxBidderAddress,\\n                    auction.maxBidAmount\\n                );\\n            }\\n        }\\n\\n        auction.maxBidderAddress = msg.sender;\\n        auction.maxBidAmount = bid;\\n        auction.maxBidTimestamp =  uint32(block.timestamp % 2**32);\\n\\n        emit ItemBidded( uint32(block.timestamp % 2**32), _itemId, _itemType, auction);\\n    }\\n\\n    function claim(uint16 _itemId, uint8 _itemType)\\n        external\\n        callerIsUser()\\n        isOnAuction(_itemId, _itemType)\\n    {\\n        Auction memory auction = itemsToAuction[_itemType][_itemId];\\n        require(\\n             uint32(block.timestamp % 2**32) > auction.endTimestamp,\\n            \\\"Auction is not finished\\\"\\n        );\\n        \\n        require(\\n            auction.maxBidderAddress == msg.sender || auction.seller == msg.sender, \\n            \\\"Only the winner or seller can claim\\\"\\n        );\\n\\n        delete itemsToAuction[_itemType][_itemId];\\n\\n        if (auction.maxBidderAddress == address(0x0)) {\\n            IERC721(itemTypeToTokenAddress[_itemType]).safeTransferFrom(\\n                address(this),\\n                auction.seller,\\n                _itemId\\n            );\\n\\n            return;\\n        }\\n\\n        uint256 sellerCut = auction.maxBidAmount;\\n        uint256 ownerCut = 0;\\n\\n        if (auction.seller != owner()) {\\n            ownerCut = (sellerCut * ownerCutPercentage) / 10000;\\n            sellerCut = sellerCut - ownerCut;\\n        }\\n\\n        if (auction.erc20 != address(0x0)) {\\n            IERC20(auction.erc20).transfer(auction.seller, sellerCut);\\n        } else {\\n            payable(auction.seller).transfer(sellerCut);\\n        }\\n\\n        contractBalance[auction.erc20] += ownerCut;\\n\\n        IERC721(itemTypeToTokenAddress[_itemType]).safeTransferFrom(\\n            address(this),\\n            auction.maxBidderAddress,\\n            _itemId\\n        );\\n        emit ItemClaimed( uint32(block.timestamp % 2**32), _itemId, _itemType, auction);\\n    }\\n\\n    /*\\n       TRADES\\n    */\\n    function proposeTrade(\\n        Item[] memory _offers,\\n        Item[] memory _requests,\\n        address _offeree\\n    ) external callerIsUser() {\\n        Trade storage trade = trades[_offeree][msg.sender];\\n\\n        require(\\n            trade.offerer == address(0x0),\\n            \\\"There is already a trade offering for the specified recipient\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _offers.length; i++) {\\n            require(\\n                itemTypeToTokenAddress[_offers[i].itemType] != address(0x0),\\n                \\\"The item type does not exist\\\"\\n            );\\n            IERC721(itemTypeToTokenAddress[_offers[i].itemType])\\n                .safeTransferFrom(msg.sender, address(this), _offers[i].itemId);\\n            trade.offering.push(Item(_offers[i].itemId, _offers[i].itemType));\\n        }\\n\\n        for (uint256 i = 0; i < _requests.length; i++) {\\n            require(\\n                itemTypeToTokenAddress[_requests[i].itemType] != address(0x0),\\n                \\\"The item type does not exist\\\"\\n            );\\n            require(\\n                IERC721(itemTypeToTokenAddress[_requests[i].itemType]).ownerOf(\\n                    _requests[i].itemId\\n                ) == _offeree,\\n                \\\"A requested item does not belong to the specified wallet\\\"\\n            );\\n            trade.requesting.push(\\n                Item(_requests[i].itemId, _requests[i].itemType)\\n            );\\n        }\\n\\n        trade.offerer = msg.sender;\\n        trade.offeree = _offeree;\\n\\n        emit TradeCreated( uint32(block.timestamp % 2**32), trade);\\n    }\\n\\n    function acceptTrade(address _offerer) external callerIsUser() {\\n        Trade memory trade = trades[msg.sender][_offerer];\\n\\n        require(\\n            trade.offerer != address(0x0),\\n            \\\"No received trade offering found for the specified address\\\"\\n        );\\n\\n        delete trades[msg.sender][_offerer];\\n\\n        for (uint256 i = 0; i < trade.offering.length; i++) {\\n            IERC721(itemTypeToTokenAddress[trade.offering[i].itemType])\\n                .safeTransferFrom(\\n                address(this),\\n                msg.sender,\\n                trade.offering[i].itemId\\n            );\\n        }\\n\\n        for (uint256 i = 0; i < trade.requesting.length; i++) {\\n            delete itemsToSale[trade.requesting[i].itemType][trade.requesting[i].itemId];\\n            IERC721(itemTypeToTokenAddress[trade.requesting[i].itemType])\\n                .safeTransferFrom(\\n                msg.sender,\\n                trade.offerer,\\n                trade.requesting[i].itemId\\n            );\\n        }\\n\\n        emit TradeAccepted( uint32(block.timestamp % 2**32), trade);\\n    }\\n\\n    function cancelTrade(address _offeree) external callerIsUser() {\\n        Trade memory trade = trades[_offeree][msg.sender];\\n\\n        require(\\n            trade.offerer != address(0x0),\\n            \\\"No sent trade offering found for the specified address\\\"\\n        );\\n\\n        delete trades[_offeree][msg.sender];\\n\\n        for (uint256 i = 0; i < trade.offering.length; i++) {\\n            IERC721(itemTypeToTokenAddress[trade.offering[i].itemType])\\n                .safeTransferFrom(\\n                address(this),\\n                trade.offerer,\\n                trade.offering[i].itemId\\n            );\\n        }\\n\\n        emit TradeCancelled( uint32(block.timestamp % 2**32), trade);\\n    }\\n\\n    function rejectTrade(address _offerer) external callerIsUser() {\\n        Trade memory trade = trades[msg.sender][_offerer];\\n\\n        require(\\n            trade.offerer != address(0x0),\\n            \\\"No received trade offering found for the specified address\\\"\\n        );\\n\\n        delete trades[msg.sender][_offerer];\\n\\n        for (uint256 i = 0; i < trade.offering.length; i++) {\\n            IERC721(itemTypeToTokenAddress[trade.offering[i].itemType])\\n                .safeTransferFrom(\\n                address(this),\\n                trade.offerer,\\n                trade.offering[i].itemId\\n            );\\n        }\\n\\n        emit TradeRejected( uint32(block.timestamp % 2**32), trade);\\n    }\\n\\n    /*\\n       OFFERS\\n    */\\n    function makeAnOffer(\\n        uint16 _itemId,\\n        uint8 _itemType,\\n        uint256 _price,\\n        address _erc20\\n    ) external payable callerIsUser() nonReentrant() isNotBeingTransacted(_itemId, _itemType) {\\n        require(\\n            itemTypeToTokenAddress[_itemType] != address(0x0),\\n            \\\"The item type does not exist\\\"\\n        );\\n\\n        address tokenOwner = IERC721(itemTypeToTokenAddress[_itemType]).ownerOf(_itemId);\\n\\n        uint256 price = _erc20 == address(0x0) ? msg.value : _price;\\n\\n        Offer storage offer = offers[_itemType][_itemId][msg.sender];\\n\\n        require(offer.offerer == address(0x0), \\\"There is already an offer made by you for this item.\\\");\\n\\n        offer.offerer = msg.sender;\\n        offer.offeree = tokenOwner;\\n        offer.price = price;\\n        offer.itemId = _itemId;\\n        offer.itemType = _itemType;\\n        offer.erc20 = _erc20;\\n\\n\\n        if (_erc20 != address(0x0)) {\\n            IERC20(_erc20).transferFrom(msg.sender, address(this), price);\\n        }\\n\\n        emit OfferCreated( uint32(block.timestamp % 2**32), offer.itemId, offer.itemType, offer);\\n    }\\n\\n    function cancelOffer(uint8 _itemType, uint16 _itemId)\\n        external\\n        callerIsUser()\\n        nonReentrant()\\n    {\\n        Offer memory offer = offers[_itemType][_itemId][msg.sender];\\n        delete offers[_itemType][_itemId][msg.sender];\\n         // NOTE: Should check offer exists before\\n        if (offer.erc20 != address(0x0)) {\\n            IERC20(offer.erc20).transfer(msg.sender, offer.price);\\n        } else {\\n            payable(msg.sender).transfer(offer.price);\\n        }\\n\\n        emit OfferCancelled(\\n             uint32(block.timestamp % 2**32),\\n            offer.itemId,\\n            offer.itemType,\\n            offer\\n        );\\n    }\\n\\n    function acceptOffer(address _offerer, uint8 _itemType, uint16 _itemId) external callerIsUser() isNotBeingTransacted(_itemId, _itemType) {\\n        Offer memory offer = offers[_itemType][_itemId][_offerer];\\n        delete offers[_itemType][_itemId][_offerer];\\n        \\n        IERC721(itemTypeToTokenAddress[offer.itemType]).safeTransferFrom(\\n            msg.sender,\\n            offer.offerer,\\n            offer.itemId\\n        );\\n\\n        uint256 sellerCut = offer.price;\\n        uint256 ownerCut = 0;\\n\\n        if (offer.offeree != owner()) {\\n            ownerCut = (sellerCut * ownerCutPercentage) / 10000;\\n            sellerCut = sellerCut - ownerCut;\\n        }\\n\\n        if (offer.erc20 != address(0x0)) {\\n            IERC20(offer.erc20).transfer(msg.sender, sellerCut);\\n        } else {\\n            payable(msg.sender).transfer(sellerCut);\\n        }\\n\\n        contractBalance[offer.erc20] += ownerCut;\\n\\n        emit OfferAccepted(\\n             uint32(block.timestamp % 2**32),\\n            offer.itemId,\\n            offer.itemType,\\n            offer\\n        );\\n    }\\n\\n    function rejectOffer(address _offerer, uint8 _itemType, uint16 _itemId)\\n        external\\n        callerIsUser()\\n        nonReentrant()\\n    {\\n        Offer memory offer = offers[_itemType][_itemId][_offerer];\\n        delete offers[_itemType][_itemId][_offerer];\\n\\n        if (offer.erc20 != address(0x0)) {\\n            IERC20(offer.erc20).transfer(offer.offerer, offer.price);\\n        } else {\\n            payable(offer.offerer).transfer(offer.price);\\n        }\\n\\n        emit OfferRejected(\\n             uint32(block.timestamp % 2**32),\\n            offer.itemId,\\n            offer.itemType,\\n            offer\\n        );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxBidTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxBidderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBidAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct RocketFactoryMarket.Auction\",\"name\":\"auction\",\"type\":\"tuple\"}],\"name\":\"ItemBidded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxBidTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxBidderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBidAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct RocketFactoryMarket.Auction\",\"name\":\"auction\",\"type\":\"tuple\"}],\"name\":\"ItemClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct RocketFactoryMarket.Sale\",\"name\":\"sale\",\"type\":\"tuple\"}],\"name\":\"ItemForSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxBidTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxBidderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBidAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct RocketFactoryMarket.Auction\",\"name\":\"auction\",\"type\":\"tuple\"}],\"name\":\"ItemOnAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct RocketFactoryMarket.Sale\",\"name\":\"sale\",\"type\":\"tuple\"}],\"name\":\"ItemSaleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct RocketFactoryMarket.Sale\",\"name\":\"sale\",\"type\":\"tuple\"}],\"name\":\"ItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"offeree\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct RocketFactoryMarket.Offer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"name\":\"OfferAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"offeree\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct RocketFactoryMarket.Offer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"name\":\"OfferCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"offeree\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct RocketFactoryMarket.Offer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"name\":\"OfferCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"offeree\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct RocketFactoryMarket.Offer\",\"name\":\"offer\",\"type\":\"tuple\"}],\"name\":\"OfferRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offeree\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"}],\"internalType\":\"struct RocketFactoryMarket.Item[]\",\"name\":\"offering\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"}],\"internalType\":\"struct RocketFactoryMarket.Item[]\",\"name\":\"requesting\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct RocketFactoryMarket.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"TradeAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offeree\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"}],\"internalType\":\"struct RocketFactoryMarket.Item[]\",\"name\":\"offering\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"}],\"internalType\":\"struct RocketFactoryMarket.Item[]\",\"name\":\"requesting\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct RocketFactoryMarket.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"TradeCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offeree\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"}],\"internalType\":\"struct RocketFactoryMarket.Item[]\",\"name\":\"offering\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"}],\"internalType\":\"struct RocketFactoryMarket.Item[]\",\"name\":\"requesting\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct RocketFactoryMarket.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"TradeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offeree\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"}],\"internalType\":\"struct RocketFactoryMarket.Item[]\",\"name\":\"offering\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"}],\"internalType\":\"struct RocketFactoryMarket.Item[]\",\"name\":\"requesting\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct RocketFactoryMarket.Trade\",\"name\":\"trade\",\"type\":\"tuple\"}],\"name\":\"TradeRejected\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offerer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_itemId\",\"type\":\"uint16\"}],\"name\":\"acceptOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offerer\",\"type\":\"address\"}],\"name\":\"acceptTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_itemType\",\"type\":\"uint8\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_itemId\",\"type\":\"uint16\"}],\"name\":\"cancelOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_itemType\",\"type\":\"uint8\"}],\"name\":\"cancelSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offeree\",\"type\":\"address\"}],\"name\":\"cancelTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_itemType\",\"type\":\"uint8\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"}],\"name\":\"createSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_itemType\",\"type\":\"uint8\"}],\"name\":\"deleteAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_itemType\",\"type\":\"uint8\"}],\"name\":\"deleteSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"itemsToAuction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxBidTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maxBidderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxBidAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"itemsToSale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"}],\"name\":\"makeAnOffer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"offers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"offeree\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"}],\"internalType\":\"struct RocketFactoryMarket.Item[]\",\"name\":\"_offers\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"itemType\",\"type\":\"uint8\"}],\"internalType\":\"struct RocketFactoryMarket.Item[]\",\"name\":\"_requests\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_offeree\",\"type\":\"address\"}],\"name\":\"proposeTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offerer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_itemType\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_itemId\",\"type\":\"uint16\"}],\"name\":\"rejectOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_offerer\",\"type\":\"address\"}],\"name\":\"rejectTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_itemId\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"_itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"returnItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowedERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_itemTokenAddress\",\"type\":\"address\"}],\"name\":\"setItemTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_ownerCutPercentage\",\"type\":\"uint16\"}],\"name\":\"setOwnerCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"trades\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"offeree\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"RocketFactoryMarket","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}