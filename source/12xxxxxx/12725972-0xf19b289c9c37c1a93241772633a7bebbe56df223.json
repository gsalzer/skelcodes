{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n    .'''''''''''..     ..''''''''''''''''..       ..'''''''''''''''..\r\n    .;;;;;;;;;;;'.   .';;;;;;;;;;;;;;;;;;,.     .,;;;;;;;;;;;;;;;;;,.\r\n    .;;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;,.    .,;;;;;;;;;;;;;;;;;;,.\r\n    .;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.   .;;;;;;;;;;;;;;;;;;;;,.\r\n    ';;;;;;;;'.  .';;;;;;;;;;;;;;;;;;;;;;,. .';;;;;;;;;;;;;;;;;;;;;,.\r\n    ';;;;;,..   .';;;;;;;;;;;;;;;;;;;;;;;,..';;;;;;;;;;;;;;;;;;;;;;,.\r\n    ......     .';;;;;;;;;;;;;,'''''''''''.,;;;;;;;;;;;;;,'''''''''..\r\n              .,;;;;;;;;;;;;;.           .,;;;;;;;;;;;;;.\r\n             .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.\r\n            .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.\r\n           .,;;;;;;;;;;;;,.           .;;;;;;;;;;;;;,.     .....\r\n          .;;;;;;;;;;;;;'.         ..';;;;;;;;;;;;;'.    .',;;;;,'.\r\n        .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.   .';;;;;;;;;;.\r\n       .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.    .;;;;;;;;;;;,.\r\n      .,;;;;;;;;;;;;;'...........,;;;;;;;;;;;;;;.      .;;;;;;;;;;;,.\r\n     .,;;;;;;;;;;;;,..,;;;;;;;;;;;;;;;;;;;;;;;,.       ..;;;;;;;;;,.\r\n    .,;;;;;;;;;;;;,. .,;;;;;;;;;;;;;;;;;;;;;;,.          .',;;;,,..\r\n   .,;;;;;;;;;;;;,.  .,;;;;;;;;;;;;;;;;;;;;;,.              ....\r\n    ..',;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.\r\n       ..',;;;;'.    .,;;;;;;;;;;;;;;;;;;;'.\r\n          ...'..     .';;;;;;;;;;;;;;,,,'.\r\n                       ...............\r\n*/\r\n\r\n// https://github.com/trusttoken/smart-contracts\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// pragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import \"@openzeppelin/contracts/utils/Address.sol\";\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/common/Initializable.sol\r\n\r\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/v3.0.0/contracts/Initializable.sol\r\n// Added public isInitialized() view of private initialized bool.\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private initializing;\r\n\r\n    /**\r\n     * @dev Modifier to use in the initializer function of a contract.\r\n     */\r\n    modifier initializer() {\r\n        require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        assembly {\r\n            cs := extcodesize(self)\r\n        }\r\n        return cs == 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Return true if and only if the contract has been initialized\r\n     * @return whether the contract has been initialized\r\n     */\r\n    function isInitialized() public view returns (bool) {\r\n        return initialized;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n// Dependency file: contracts/common/UpgradeableClaimable.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {Context} from \"@openzeppelin/contracts/GSN/Context.sol\";\r\n\r\n// import {Initializable} from \"contracts/common/Initializable.sol\";\r\n\r\n/**\r\n * @title UpgradeableClaimable\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. Since\r\n * this contract combines Claimable and UpgradableOwnable contracts, ownership\r\n * can be later change via 2 step method {transferOwnership} and {claimOwnership}\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract UpgradeableClaimable is Initializable, Context {\r\n    address private _owner;\r\n    address private _pendingOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting a custom initial owner of choice.\r\n     * @param __owner Initial owner of contract to be set.\r\n     */\r\n    function initialize(address __owner) internal initializer {\r\n        _owner = __owner;\r\n        emit OwnershipTransferred(address(0), __owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the pending owner.\r\n     */\r\n    function pendingOwner() public view returns (address) {\r\n        return _pendingOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier throws if called by any account other than the pendingOwner.\r\n     */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == _pendingOwner, \"Ownable: caller is not the pending owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to set the pendingOwner address.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _pendingOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the pendingOwner address to finalize the transfer.\r\n     */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        emit OwnershipTransferred(_owner, _pendingOwner);\r\n        _owner = _pendingOwner;\r\n        _pendingOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi2/interface/ITrueStrategy.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\ninterface ITrueStrategy {\r\n    /**\r\n     * @dev put `amount` of tokens into the strategy\r\n     * As a result of the deposit value of the strategy should increase by at least 98% of amount\r\n     */\r\n    function deposit(uint256 amount) external;\r\n\r\n    /**\r\n     * @dev pull at least `minAmount` of tokens from strategy and transfer to the pool\r\n     */\r\n    function withdraw(uint256 minAmount) external;\r\n\r\n    /**\r\n     * @dev withdraw everything from strategy\r\n     * As a result of calling withdrawAll(),at least 98% of strategy's value should be transferred to the pool\r\n     * Value must become 0\r\n     */\r\n    function withdrawAll() external;\r\n\r\n    /// @dev value evaluated to Pool's tokens\r\n    function value() external view returns (uint256);\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/interface/IYToken.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IYToken is IERC20 {\r\n    function getPricePerFullShare() external view returns (uint256);\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/interface/ICurve.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n// import {IYToken} from \"contracts/truefi/interface/IYToken.sol\";\r\n\r\ninterface ICurve {\r\n    function calc_token_amount(uint256[4] memory amounts, bool deposit) external view returns (uint256);\r\n\r\n    function get_virtual_price() external view returns (uint256);\r\n}\r\n\r\ninterface ICurveGauge {\r\n    function balanceOf(address depositor) external view returns (uint256);\r\n\r\n    function minter() external returns (ICurveMinter);\r\n\r\n    function deposit(uint256 amount) external;\r\n\r\n    function withdraw(uint256 amount) external;\r\n}\r\n\r\ninterface ICurveMinter {\r\n    function mint(address gauge) external;\r\n\r\n    function token() external view returns (IERC20);\r\n}\r\n\r\ninterface ICurvePool {\r\n    function add_liquidity(uint256[4] memory amounts, uint256 min_mint_amount) external;\r\n\r\n    function remove_liquidity_one_coin(\r\n        uint256 _token_amount,\r\n        int128 i,\r\n        uint256 min_amount,\r\n        bool donate_dust\r\n    ) external;\r\n\r\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\r\n\r\n    function token() external view returns (IERC20);\r\n\r\n    function curve() external view returns (ICurve);\r\n\r\n    function coins(int128 id) external view returns (IYToken);\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/interface/ICrvPriceOracle.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\ninterface ICrvPriceOracle {\r\n    function usdToCrv(uint256 amount) external view returns (uint256);\r\n\r\n    function crvToUsd(uint256 amount) external view returns (uint256);\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi/interface/IUniswapRouter.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\ninterface IUniswapRouter {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\n\r\n// Dependency file: contracts/common/UpgradeableERC20.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\r\n// import {Context} from \"@openzeppelin/contracts/GSN/Context.sol\";\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n// import {Initializable} from \"contracts/common/Initializable.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Initializable, Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function __ERC20_initialize(string memory name, string memory symbol) internal initializer {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public virtual view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public virtual override view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function updateNameAndSymbol(string memory __name, string memory __symbol) internal {\r\n        _name = __name;\r\n        _symbol = __symbol;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi2/interface/ILoanToken2.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import {ERC20} from \"contracts/common/UpgradeableERC20.sol\";\r\n// import {ITrueFiPool2} from \"contracts/truefi2/interface/ITrueFiPool2.sol\";\r\n\r\ninterface ILoanToken2 is IERC20 {\r\n    enum Status {Awaiting, Funded, Withdrawn, Settled, Defaulted, Liquidated}\r\n\r\n    function borrower() external view returns (address);\r\n\r\n    function amount() external view returns (uint256);\r\n\r\n    function term() external view returns (uint256);\r\n\r\n    function apy() external view returns (uint256);\r\n\r\n    function start() external view returns (uint256);\r\n\r\n    function lender() external view returns (address);\r\n\r\n    function debt() external view returns (uint256);\r\n\r\n    function pool() external view returns (ITrueFiPool2);\r\n\r\n    function profit() external view returns (uint256);\r\n\r\n    function status() external view returns (Status);\r\n\r\n    function getParameters()\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function fund() external;\r\n\r\n    function withdraw(address _beneficiary) external;\r\n\r\n    function settle() external;\r\n\r\n    function enterDefault() external;\r\n\r\n    function liquidate() external;\r\n\r\n    function redeem(uint256 _amount) external;\r\n\r\n    function repay(address _sender, uint256 _amount) external;\r\n\r\n    function repayInFull(address _sender) external;\r\n\r\n    function reclaim() external;\r\n\r\n    function allowTransfer(address account, bool _status) external;\r\n\r\n    function repaid() external view returns (uint256);\r\n\r\n    function isRepaid() external view returns (bool);\r\n\r\n    function balance() external view returns (uint256);\r\n\r\n    function value(uint256 _balance) external view returns (uint256);\r\n\r\n    function token() external view returns (ERC20);\r\n\r\n    function version() external pure returns (uint8);\r\n}\r\n\r\n//interface IContractWithPool {\r\n//    function pool() external view returns (ITrueFiPool2);\r\n//}\r\n//\r\n//// Had to be split because of multiple inheritance problem\r\n//interface ILoanToken2 is ILoanToken, IContractWithPool {\r\n//\r\n//}\r\n\r\n\r\n// Dependency file: contracts/truefi2/interface/ITrueLender2.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {ITrueFiPool2} from \"contracts/truefi2/interface/ITrueFiPool2.sol\";\r\n// import {ILoanToken2} from \"contracts/truefi2/interface/ILoanToken2.sol\";\r\n\r\ninterface ITrueLender2 {\r\n    // @dev calculate overall value of the pools\r\n    function value(ITrueFiPool2 pool) external view returns (uint256);\r\n\r\n    // @dev distribute a basket of tokens for exiting user\r\n    function distribute(\r\n        address recipient,\r\n        uint256 numerator,\r\n        uint256 denominator\r\n    ) external;\r\n\r\n    function transferAllLoanTokens(ILoanToken2 loan, address recipient) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi2/interface/IERC20WithDecimals.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IERC20WithDecimals is IERC20 {\r\n    function decimals() external view returns (uint256);\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi2/interface/ITrueFiPoolOracle.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {IERC20WithDecimals} from \"contracts/truefi2/interface/IERC20WithDecimals.sol\";\r\n\r\n/**\r\n * @dev Oracle that converts any token to and from TRU\r\n * Used for liquidations and valuing of liquidated TRU in the pool\r\n */\r\ninterface ITrueFiPoolOracle {\r\n    // token address\r\n    function token() external view returns (IERC20WithDecimals);\r\n\r\n    // amount of tokens 1 TRU is worth\r\n    function truToToken(uint256 truAmount) external view returns (uint256);\r\n\r\n    // amount of TRU 1 token is worth\r\n    function tokenToTru(uint256 tokenAmount) external view returns (uint256);\r\n\r\n    // USD price of token with 18 decimals\r\n    function tokenToUsd(uint256 tokenAmount) external view returns (uint256);\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi2/interface/I1Inch3.sol\r\n\r\n// pragma solidity 0.6.10;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface I1Inch3 {\r\n    struct SwapDescription {\r\n        address srcToken;\r\n        address dstToken;\r\n        address srcReceiver;\r\n        address dstReceiver;\r\n        uint256 amount;\r\n        uint256 minReturnAmount;\r\n        uint256 flags;\r\n        bytes permit;\r\n    }\r\n\r\n    function swap(\r\n        address caller,\r\n        SwapDescription calldata desc,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns (\r\n            uint256 returnAmount,\r\n            uint256 gasLeft,\r\n            uint256 chiSpent\r\n        );\r\n\r\n    function unoswap(\r\n        address srcToken,\r\n        uint256 amount,\r\n        uint256 minReturn,\r\n        bytes32[] calldata /* pools */\r\n    ) external payable returns (uint256 returnAmount);\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi2/interface/ISAFU.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\ninterface ISAFU {\r\n    function poolDeficit(address pool) external view returns (uint256);\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi2/interface/ITrueFiPool2.sol\r\n\r\n// pragma solidity 0.6.10;\r\n\r\n// import {ERC20, IERC20} from \"contracts/common/UpgradeableERC20.sol\";\r\n// import {ITrueLender2, ILoanToken2} from \"contracts/truefi2/interface/ITrueLender2.sol\";\r\n// import {ITrueFiPoolOracle} from \"contracts/truefi2/interface/ITrueFiPoolOracle.sol\";\r\n// import {I1Inch3} from \"contracts/truefi2/interface/I1Inch3.sol\";\r\n// import {ISAFU} from \"contracts/truefi2/interface/ISAFU.sol\";\r\n\r\ninterface ITrueFiPool2 is IERC20 {\r\n    function initialize(\r\n        ERC20 _token,\r\n        ERC20 _stakingToken,\r\n        ITrueLender2 _lender,\r\n        I1Inch3 __1Inch,\r\n        ISAFU safu,\r\n        address __owner\r\n    ) external;\r\n\r\n    function token() external view returns (ERC20);\r\n\r\n    function oracle() external view returns (ITrueFiPoolOracle);\r\n\r\n    /**\r\n     * @dev Join the pool by depositing tokens\r\n     * @param amount amount of tokens to deposit\r\n     */\r\n    function join(uint256 amount) external;\r\n\r\n    /**\r\n     * @dev borrow from pool\r\n     * 1. Transfer TUSD to sender\r\n     * 2. Only lending pool should be allowed to call this\r\n     */\r\n    function borrow(uint256 amount) external;\r\n\r\n    /**\r\n     * @dev pay borrowed money back to pool\r\n     * 1. Transfer TUSD from sender\r\n     * 2. Only lending pool should be allowed to call this\r\n     */\r\n    function repay(uint256 currencyAmount) external;\r\n\r\n    /**\r\n     * @dev SAFU buys LoanTokens from the pool\r\n     */\r\n    function liquidate(ILoanToken2 loan) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/truefi2/libraries/OneInchExchange.sol\r\n\r\n// pragma solidity 0.6.10;\r\n// pragma experimental ABIEncoderV2;\r\n\r\n// import {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import {I1Inch3} from \"contracts/truefi2/interface/I1Inch3.sol\";\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n\r\ninterface IUniRouter {\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n}\r\n\r\nlibrary OneInchExchange {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant ADDRESS_MASK = 0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\r\n    uint256 constant REVERSE_MASK = 0x8000000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    event Swapped(I1Inch3.SwapDescription description, uint256 returnedAmount);\r\n\r\n    /**\r\n     * @dev Forward data to 1Inch contract\r\n     * @param _1inchExchange address of 1Inch (currently 0x11111112542d85b3ef69ae05771c2dccff4faa26 for mainnet)\r\n     * @param data Data that is forwarded into the 1inch exchange contract. Can be acquired from 1Inch API https://api.1inch.exchange/v3.0/1/swap\r\n     * [See more](https://docs.1inch.exchange/api/quote-swap#swap)\r\n     *\r\n     * @return description - description of the swap\r\n     */\r\n\r\n    function exchange(I1Inch3 _1inchExchange, bytes calldata data)\r\n        internal\r\n        returns (I1Inch3.SwapDescription memory description, uint256 returnedAmount)\r\n    {\r\n        if (data[0] == 0x7c) {\r\n            // call `swap()`\r\n            (, description, ) = abi.decode(data[4:], (address, I1Inch3.SwapDescription, bytes));\r\n        } else {\r\n            // call `unoswap()`\r\n            (address srcToken, uint256 amount, uint256 minReturn, bytes32[] memory pathData) = abi.decode(\r\n                data[4:],\r\n                (address, uint256, uint256, bytes32[])\r\n            );\r\n            description.srcToken = srcToken;\r\n            description.amount = amount;\r\n            description.minReturnAmount = minReturn;\r\n            description.flags = 0;\r\n            uint256 lastPath = uint256(pathData[pathData.length - 1]);\r\n            IUniRouter uniRouter = IUniRouter(address(lastPath & ADDRESS_MASK));\r\n            bool isReverse = lastPath & REVERSE_MASK > 0;\r\n            description.dstToken = isReverse ? uniRouter.token0() : uniRouter.token1();\r\n            description.dstReceiver = address(this);\r\n        }\r\n\r\n        IERC20(description.srcToken).safeApprove(address(_1inchExchange), description.amount);\r\n        uint256 balanceBefore = IERC20(description.dstToken).balanceOf(description.dstReceiver);\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, ) = address(_1inchExchange).call(data);\r\n        if (!success) {\r\n            // Revert with original error message\r\n            assembly {\r\n                let ptr := mload(0x40)\r\n                let size := returndatasize()\r\n                returndatacopy(ptr, 0, size)\r\n                revert(ptr, size)\r\n            }\r\n        }\r\n\r\n        uint256 balanceAfter = IERC20(description.dstToken).balanceOf(description.dstReceiver);\r\n        returnedAmount = balanceAfter.sub(balanceBefore);\r\n\r\n        emit Swapped(description, returnedAmount);\r\n    }\r\n}\r\n\r\n\r\n// Root file: contracts/truefi2/strategies/CurveYearnStrategy.sol\r\n\r\npragma solidity 0.6.10;\r\n// pragma experimental ABIEncoderV2;\r\n\r\n// import {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\r\n// import {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n// import {UpgradeableClaimable} from \"contracts/common/UpgradeableClaimable.sol\";\r\n\r\n// import {ITrueStrategy} from \"contracts/truefi2/interface/ITrueStrategy.sol\";\r\n// import {ICurveGauge, ICurveMinter, ICurvePool, IERC20} from \"contracts/truefi/interface/ICurve.sol\";\r\n// import {ICrvPriceOracle} from \"contracts/truefi/interface/ICrvPriceOracle.sol\";\r\n// import {IUniswapRouter} from \"contracts/truefi/interface/IUniswapRouter.sol\";\r\n// import {ITrueFiPool2} from \"contracts/truefi2/interface/ITrueFiPool2.sol\";\r\n// import {I1Inch3} from \"contracts/truefi2/interface/I1Inch3.sol\";\r\n// import {OneInchExchange} from \"contracts/truefi2/libraries/OneInchExchange.sol\";\r\n// import {IERC20WithDecimals} from \"contracts/truefi2/interface/IERC20WithDecimals.sol\";\r\n\r\n/**\r\n * @dev TrueFi pool strategy that allows depositing stablecoins into Curve Yearn pool (0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51)\r\n * Supports DAI, USDC, USDT and TUSD\r\n * Curve LP tokens are being deposited into Curve Gauge and CRV rewards can be sold on 1Inch exchange and transferred to the pool\r\n */\r\ncontract CurveYearnStrategy is UpgradeableClaimable, ITrueStrategy {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using SafeERC20 for IERC20WithDecimals;\r\n    using OneInchExchange for I1Inch3;\r\n\r\n    // Number of tokens in Curve yPool\r\n    uint8 public constant N_TOKENS = 4;\r\n    // Max slippage during the swap\r\n    uint256 public constant MAX_PRICE_SLIPPAGE = 200; // 2%\r\n\r\n    // ================ WARNING ==================\r\n    // ===== THIS CONTRACT IS INITIALIZABLE ======\r\n    // === STORAGE VARIABLES ARE DECLARED BELOW ==\r\n    // REMOVAL OR REORDER OF VARIABLES WILL RESULT\r\n    // ========= IN STORAGE CORRUPTION ===========\r\n\r\n    // Index of token in Curve pool\r\n    // 0 - DAI\r\n    // 1 - USDC\r\n    // 2 - USDT\r\n    // 3 - TUSD\r\n    uint8 public tokenIndex;\r\n\r\n    ICurvePool public curvePool;\r\n    ICurveGauge public curveGauge;\r\n    ICurveMinter public minter;\r\n    I1Inch3 public _1Inch;\r\n\r\n    IERC20WithDecimals public token;\r\n    address public pool;\r\n\r\n    // CRV price oracle\r\n    ICrvPriceOracle public crvOracle;\r\n\r\n    // ======= STORAGE DECLARATION END ===========\r\n\r\n    event OracleChanged(ICrvPriceOracle newOracle);\r\n    event Deposited(uint256 depositedAmount, uint256 receivedYAmount);\r\n    event Withdrawn(uint256 minAmount, uint256 yAmount);\r\n    event WithdrawnAll(uint256 yAmount);\r\n\r\n    modifier onlyPool() {\r\n        require(msg.sender == pool, \"CurveYearnStrategy: Can only be called by pool\");\r\n        _;\r\n    }\r\n\r\n    function initialize(\r\n        ITrueFiPool2 _pool,\r\n        ICurvePool _curvePool,\r\n        ICurveGauge _curveGauge,\r\n        ICurveMinter _minter,\r\n        I1Inch3 _1inchExchange,\r\n        ICrvPriceOracle _crvOracle,\r\n        uint8 _tokenIndex\r\n    ) external initializer {\r\n        UpgradeableClaimable.initialize(msg.sender);\r\n\r\n        token = IERC20WithDecimals(address(_pool.token()));\r\n        pool = address(_pool);\r\n\r\n        curvePool = _curvePool;\r\n        curveGauge = _curveGauge;\r\n        minter = _minter;\r\n        _1Inch = _1inchExchange;\r\n        crvOracle = _crvOracle;\r\n        tokenIndex = _tokenIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets new  crv oracle address\r\n     * @param _crvOracle new oracle address\r\n     */\r\n    function setOracle(ICrvPriceOracle _crvOracle) external onlyOwner {\r\n        crvOracle = _crvOracle;\r\n        emit OracleChanged(_crvOracle);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `amount` of `token` from pool and add it as\r\n     * liquidity to the Curve yEarn Pool\r\n     * Curve LP tokens are deposited into Curve Gauge\r\n     * @param amount amount of token to add to curve\r\n     */\r\n    function deposit(uint256 amount) external override onlyPool {\r\n        token.safeTransferFrom(pool, address(this), amount);\r\n\r\n        uint256 totalAmount = token.balanceOf(address(this));\r\n        uint256[N_TOKENS] memory amounts = [uint256(0), 0, 0, 0];\r\n        amounts[tokenIndex] = totalAmount;\r\n\r\n        token.safeApprove(address(curvePool), totalAmount);\r\n        uint256 conservativeMinAmount = calcTokenAmount(totalAmount).mul(999).div(1000);\r\n        curvePool.add_liquidity(amounts, conservativeMinAmount);\r\n\r\n        // stake yCurve tokens in gauge\r\n        uint256 yBalance = curvePool.token().balanceOf(address(this));\r\n        curvePool.token().safeApprove(address(curveGauge), yBalance);\r\n        curveGauge.deposit(yBalance);\r\n\r\n        emit Deposited(amount, yBalance);\r\n    }\r\n\r\n    /**\r\n     * @dev pull at least `minAmount` of tokens from strategy\r\n     * Remove token liquidity from curve and transfer to pool\r\n     * @param minAmount Minimum amount of tokens to remove from strategy\r\n     */\r\n    function withdraw(uint256 minAmount) external override onlyPool {\r\n        // get rough estimate of how much yCRV we should sell\r\n        uint256 roughCurveTokenAmount = calcTokenAmount(minAmount);\r\n        uint256 yBalance = yTokenBalance();\r\n        require(roughCurveTokenAmount <= yBalance, \"CurveYearnStrategy: Not enough Curve liquidity tokens in pool to cover borrow\");\r\n        // Try to withdraw a bit more to be safe, but not above the total balance\r\n        uint256 conservativeCurveTokenAmount = min(yBalance, roughCurveTokenAmount.mul(1005).div(1000));\r\n\r\n        // pull tokens from gauge\r\n        withdrawFromGaugeIfNecessary(conservativeCurveTokenAmount);\r\n        // remove TUSD from curve\r\n        curvePool.token().safeApprove(address(curvePool), conservativeCurveTokenAmount);\r\n        curvePool.remove_liquidity_one_coin(conservativeCurveTokenAmount, tokenIndex, minAmount, false);\r\n        transferAllToPool();\r\n\r\n        emit Withdrawn(minAmount, conservativeCurveTokenAmount);\r\n    }\r\n\r\n    /**\r\n     *@dev withdraw everything from strategy\r\n     * Use with caution because Curve slippage is not controlled\r\n     */\r\n    function withdrawAll() external override onlyPool {\r\n        curveGauge.withdraw(curveGauge.balanceOf(address(this)));\r\n        uint256 yBalance = yTokenBalance();\r\n        curvePool.token().safeApprove(address(curvePool), yBalance);\r\n        curvePool.remove_liquidity_one_coin(yBalance, tokenIndex, 0, false);\r\n        transferAllToPool();\r\n\r\n        emit WithdrawnAll(yBalance);\r\n    }\r\n\r\n    /**\r\n     * @dev Total pool value in USD\r\n     * @notice Balance of CRV is not included into value of strategy,\r\n     * because it cannot be converted to pool tokens automatically\r\n     * @return Value of pool in USD\r\n     */\r\n    function value() external override view returns (uint256) {\r\n        return yTokenValue();\r\n    }\r\n\r\n    /**\r\n     * @dev Price of  in USD\r\n     * @return Oracle price of TRU in USD\r\n     */\r\n    function yTokenValue() public view returns (uint256) {\r\n        return normalizeDecimals(yTokenBalance().mul(curvePool.curve().get_virtual_price()).div(1 ether));\r\n    }\r\n\r\n    /**\r\n     * @dev Get total balance of curve.fi pool tokens\r\n     * @return Balance of y pool tokens in this contract\r\n     */\r\n    function yTokenBalance() public view returns (uint256) {\r\n        return curvePool.token().balanceOf(address(this)).add(curveGauge.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Price of CRV in USD\r\n     * @return Oracle price of TRU in USD\r\n     */\r\n    function crvValue() public view returns (uint256) {\r\n        uint256 balance = crvBalance();\r\n        if (balance == 0 || address(crvOracle) == address(0)) {\r\n            return 0;\r\n        }\r\n        return normalizeDecimals(conservativePriceEstimation(crvOracle.crvToUsd(balance)));\r\n    }\r\n\r\n    /**\r\n     * @dev Get total balance of CRV tokens\r\n     * @return Balance of stake tokens in this contract\r\n     */\r\n    function crvBalance() public view returns (uint256) {\r\n        return minter.token().balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Collect CRV tokens minted by staking at gauge\r\n     */\r\n    function collectCrv() external {\r\n        minter.mint(address(curveGauge));\r\n    }\r\n\r\n    /**\r\n     * @dev Swap collected CRV on 1inch and transfer gains to the pool\r\n     * Receiver of the tokens should be the pool\r\n     * Revert if resulting exchange price is much smaller than the oracle price\r\n     * @param data Data that is forwarded into the 1inch exchange contract. Can be acquired from 1Inch API https://api.1inch.exchange/v3.0/1/swap\r\n     * [See more](https://docs.1inch.exchange/api/quote-swap#swap)\r\n     */\r\n    function sellCrv(bytes calldata data) external {\r\n        (I1Inch3.SwapDescription memory swap, uint256 balanceDiff) = _1Inch.exchange(data);\r\n\r\n        uint256 expectedGain = normalizeDecimals(crvOracle.crvToUsd(swap.amount));\r\n\r\n        require(swap.srcToken == address(minter.token()), \"CurveYearnStrategy: Source token is not CRV\");\r\n        require(swap.dstToken == address(token), \"CurveYearnStrategy: Destination token is not TUSD\");\r\n        require(swap.dstReceiver == pool, \"CurveYearnStrategy: Receiver is not pool\");\r\n\r\n        require(balanceDiff >= conservativePriceEstimation(expectedGain), \"CurveYearnStrategy: Not optimal exchange\");\r\n    }\r\n\r\n    /**\r\n     * @dev Expected amount of minted Curve.fi yDAI/yUSDC/yUSDT/yTUSD tokens.\r\n     * @param currencyAmount amount to calculate for\r\n     * @return expected amount minted given currency amount\r\n     */\r\n    function calcTokenAmount(uint256 currencyAmount) public view returns (uint256) {\r\n        uint256 yTokenAmount = currencyAmount.mul(1e18).div(curvePool.coins(tokenIndex).getPricePerFullShare());\r\n        uint256[N_TOKENS] memory yAmounts = [uint256(0), 0, 0, 0];\r\n        yAmounts[tokenIndex] = yTokenAmount;\r\n        return curvePool.curve().calc_token_amount(yAmounts, true);\r\n    }\r\n\r\n    /**\r\n     * @dev ensure enough curve.fi pool tokens are available\r\n     * Check if current available amount of TUSD is enough and\r\n     * withdraw remainder from gauge\r\n     * @param neededAmount amount required\r\n     */\r\n    function withdrawFromGaugeIfNecessary(uint256 neededAmount) internal {\r\n        uint256 currentlyAvailableAmount = curvePool.token().balanceOf(address(this));\r\n        if (currentlyAvailableAmount < neededAmount) {\r\n            curveGauge.withdraw(neededAmount.sub(currentlyAvailableAmount));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to transfer entire token balance to pool\r\n     */\r\n    function transferAllToPool() internal {\r\n        token.safeTransfer(pool, token.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate price minus max percentage of slippage during exchange\r\n     * This will lead to the pool value become a bit undervalued\r\n     * compared to the oracle price but will ensure that the value doesn't drop\r\n     * when token exchanges are performed.\r\n     */\r\n    function conservativePriceEstimation(uint256 price) internal pure returns (uint256) {\r\n        return price.mul(uint256(10000).sub(MAX_PRICE_SLIPPAGE)).div(10000);\r\n    }\r\n\r\n    /**\r\n     * @dev Helper function to calculate minimum of `a` and `b`\r\n     * @param a First variable to check if minimum\r\n     * @param b Second variable to check if minimum\r\n     * @return Lowest value between a and b\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? b : a;\r\n    }\r\n\r\n    /**\r\n     * @dev Helper function to convert between token precision\r\n     * @param _value Value to normalize decimals for\r\n     * @return Normalized value\r\n     */\r\n    function normalizeDecimals(uint256 _value) internal view returns (uint256) {\r\n        return _value.mul(10**token.decimals()).div(10**18);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedYAmount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ICrvPriceOracle\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yAmount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnAll\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_PRICE_SLIPPAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"N_TOKENS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_1Inch\",\"outputs\":[{\"internalType\":\"contract I1Inch3\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currencyAmount\",\"type\":\"uint256\"}],\"name\":\"calcTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectCrv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvOracle\",\"outputs\":[{\"internalType\":\"contract ICrvPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crvValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveGauge\",\"outputs\":[{\"internalType\":\"contract ICurveGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curvePool\",\"outputs\":[{\"internalType\":\"contract ICurvePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITrueFiPool2\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"contract ICurvePool\",\"name\":\"_curvePool\",\"type\":\"address\"},{\"internalType\":\"contract ICurveGauge\",\"name\":\"_curveGauge\",\"type\":\"address\"},{\"internalType\":\"contract ICurveMinter\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"contract I1Inch3\",\"name\":\"_1inchExchange\",\"type\":\"address\"},{\"internalType\":\"contract ICrvPriceOracle\",\"name\":\"_crvOracle\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_tokenIndex\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"contract ICurveMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sellCrv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICrvPriceOracle\",\"name\":\"_crvOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20WithDecimals\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CurveYearnStrategy","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4b6d1ad05b6eb5598e35325fde78f8c4b45fdf4834aeb3439f1af5dd79f1400a"}]}