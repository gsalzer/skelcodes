{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/interfaces/ILiquidationManager.sol\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's liquidation manager interface\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ninterface ILiquidationManager  {\r\n\tfunction setCircuitBreaker(bool _emergency) external returns (bool);\r\n\tfunction partialLiquidation(address payable delinquentBorrower, uint256 targetHandler, uint256 liquidateAmount, uint256 receiveHandler) external returns (uint256);\r\n\tfunction checkLiquidation(address payable userAddr) external view returns (bool);\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\npragma solidity ^0.6.12;\r\n\r\n// from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\r\n// Subject to the MIT license.\r\n\r\n/**\r\n * @title BiFi's safe-math Contract\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\nlibrary SafeMath {\r\n  uint256 internal constant unifiedPoint = 10 ** 18;\r\n\t/******************** Safe Math********************/\r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"a\");\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\treturn _sub(a, b, \"s\");\r\n\t}\r\n\r\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\treturn _mul(a, b);\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\treturn _div(a, b, \"d\");\r\n\t}\r\n\r\n\tfunction _sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256)\r\n\t{\r\n\t\trequire(b <= a, errorMessage);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction _mul(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\tif (a == 0)\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a* b;\r\n\t\trequire((c / a) == b, \"m\");\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction _div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256)\r\n\t{\r\n\t\trequire(b > 0, errorMessage);\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\tfunction unifiedDiv(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\treturn _div(_mul(a, unifiedPoint), b, \"d\");\r\n\t}\r\n\r\n\tfunction unifiedMul(uint256 a, uint256 b) internal pure returns (uint256)\r\n\t{\r\n\t\treturn _div(_mul(a, b), unifiedPoint, \"m\");\r\n\t}\r\n}\r\n\r\n// File: contracts/interfaces/IManagerDataStorage.sol\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's manager data storage interface\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ninterface IManagerDataStorage  {\r\n\tfunction getGlobalRewardPerBlock() external view returns (uint256);\r\n\tfunction setGlobalRewardPerBlock(uint256 _globalRewardPerBlock) external returns (bool);\r\n\r\n\tfunction getGlobalRewardDecrement() external view returns (uint256);\r\n\tfunction setGlobalRewardDecrement(uint256 _globalRewardDecrement) external returns (bool);\r\n\r\n\tfunction getGlobalRewardTotalAmount() external view returns (uint256);\r\n\tfunction setGlobalRewardTotalAmount(uint256 _globalRewardTotalAmount) external returns (bool);\r\n\r\n\tfunction getAlphaRate() external view returns (uint256);\r\n\tfunction setAlphaRate(uint256 _alphaRate) external returns (bool);\r\n\r\n\tfunction getAlphaLastUpdated() external view returns (uint256);\r\n\tfunction setAlphaLastUpdated(uint256 _alphaLastUpdated) external returns (bool);\r\n\r\n\tfunction getRewardParamUpdateRewardPerBlock() external view returns (uint256);\r\n\tfunction setRewardParamUpdateRewardPerBlock(uint256 _rewardParamUpdateRewardPerBlock) external returns (bool);\r\n\r\n\tfunction getRewardParamUpdated() external view returns (uint256);\r\n\tfunction setRewardParamUpdated(uint256 _rewardParamUpdated) external returns (bool);\r\n\r\n\tfunction getInterestUpdateRewardPerblock() external view returns (uint256);\r\n\tfunction setInterestUpdateRewardPerblock(uint256 _interestUpdateRewardPerblock) external returns (bool);\r\n\r\n\tfunction getInterestRewardUpdated() external view returns (uint256);\r\n\tfunction setInterestRewardUpdated(uint256 _interestRewardLastUpdated) external returns (bool);\r\n\r\n\tfunction setTokenHandler(uint256 handlerID, address handlerAddr) external returns (bool);\r\n\r\n\tfunction getTokenHandlerInfo(uint256 handlerID) external view returns (bool, address);\r\n\r\n\tfunction getTokenHandlerID(uint256 index) external view returns (uint256);\r\n\r\n\tfunction getTokenHandlerAddr(uint256 handlerID) external view returns (address);\r\n\tfunction setTokenHandlerAddr(uint256 handlerID, address handlerAddr) external returns (bool);\r\n\r\n\tfunction getTokenHandlerExist(uint256 handlerID) external view returns (bool);\r\n\tfunction setTokenHandlerExist(uint256 handlerID, bool exist) external returns (bool);\r\n\r\n\tfunction getTokenHandlerSupport(uint256 handlerID) external view returns (bool);\r\n\tfunction setTokenHandlerSupport(uint256 handlerID, bool support) external returns (bool);\r\n\r\n\tfunction setLiquidationManagerAddr(address _liquidationManagerAddr) external returns (bool);\r\n\tfunction getLiquidationManagerAddr() external view returns (address);\r\n\r\n\tfunction setManagerAddr(address _managerAddr) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IOracleProxy.sol\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's oracle proxy interface\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ninterface IOracleProxy  {\r\n\tfunction getTokenPrice(uint256 tokenID) external view returns (uint256);\r\n\r\n\tfunction getOracleFeed(uint256 tokenID) external view returns (address, uint256);\r\n\tfunction setOracleFeed(uint256 tokenID, address feedAddr, uint256 decimals, bool needPriceConvert, uint256 priceConvertID) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IERC20.sol\r\n// from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\r\npragma solidity 0.6.12;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external ;\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external ;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interfaces/IObserver.sol\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's Observer interface\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ninterface IObserver {\r\n    function getAlphaBaseAsset() external view returns (uint256[] memory);\r\n    function setChainGlobalRewardPerblock(uint256 _idx, uint256 globalRewardPerBlocks) external returns (bool);\r\n    function updateChainMarketInfo(uint256 _idx, uint256 chainDeposit, uint256 chainBorrow) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IProxy.sol\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's proxy interface\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ninterface IProxy  {\r\n\tfunction handlerProxy(bytes memory data) external returns (bool, bytes memory);\r\n\tfunction handlerViewProxy(bytes memory data) external view returns (bool, bytes memory);\r\n\tfunction siProxy(bytes memory data) external returns (bool, bytes memory);\r\n\tfunction siViewProxy(bytes memory data) external view returns (bool, bytes memory);\r\n}\r\n\r\n// File: contracts/interfaces/IMarketHandler.sol\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's market handler interface\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ninterface IMarketHandler  {\r\n\tfunction setCircuitBreaker(bool _emergency) external returns (bool);\r\n\tfunction setCircuitBreakWithOwner(bool _emergency) external returns (bool);\r\n\r\n\tfunction getTokenName() external view returns (string memory);\r\n\r\n\tfunction ownershipTransfer(address payable newOwner) external returns (bool);\r\n\r\n\tfunction deposit(uint256 unifiedTokenAmount, bool allFlag) external payable returns (bool);\r\n\tfunction withdraw(uint256 unifiedTokenAmount, bool allFlag) external returns (bool);\r\n\tfunction borrow(uint256 unifiedTokenAmount, bool allFlag) external returns (bool);\r\n\tfunction repay(uint256 unifiedTokenAmount, bool allFlag) external payable returns (bool);\r\n\r\n\tfunction executeFlashloan(\r\n\t\taddress receiverAddress,\r\n\t\tuint256 amount\r\n  ) external returns (bool);\r\n\r\n\tfunction depositFlashloanFee(\r\n\t\tuint256 amount\r\n\t) external returns (bool);\r\n\r\n  function convertUnifiedToUnderlying(uint256 unifiedTokenAmount) external view returns (uint256);\r\n\tfunction partialLiquidationUser(address payable delinquentBorrower, uint256 liquidateAmount, address payable liquidator, uint256 rewardHandlerID) external returns (uint256, uint256, uint256);\r\n\tfunction partialLiquidationUserReward(address payable delinquentBorrower, uint256 liquidationAmountWithReward, address payable liquidator) external returns (uint256);\r\n\r\n\tfunction getTokenHandlerLimit() external view returns (uint256, uint256);\r\n  function getTokenHandlerBorrowLimit() external view returns (uint256);\r\n\tfunction getTokenHandlerMarginCallLimit() external view returns (uint256);\r\n\tfunction setTokenHandlerBorrowLimit(uint256 borrowLimit) external returns (bool);\r\n\tfunction setTokenHandlerMarginCallLimit(uint256 marginCallLimit) external returns (bool);\r\n\r\n  function getTokenLiquidityAmountWithInterest(address payable userAddr) external view returns (uint256);\r\n\r\n\tfunction getUserAmountWithInterest(address payable userAddr) external view returns (uint256, uint256);\r\n\tfunction getUserAmount(address payable userAddr) external view returns (uint256, uint256);\r\n\r\n\tfunction getUserMaxBorrowAmount(address payable userAddr) external view returns (uint256);\r\n\tfunction getUserMaxWithdrawAmount(address payable userAddr) external view returns (uint256);\r\n\tfunction getUserMaxRepayAmount(address payable userAddr) external view returns (uint256);\r\n\r\n\tfunction checkFirstAction() external returns (bool);\r\n\tfunction applyInterest(address payable userAddr) external returns (uint256, uint256);\r\n\r\n\tfunction reserveDeposit(uint256 unifiedTokenAmount) external payable returns (bool);\r\n\tfunction reserveWithdraw(uint256 unifiedTokenAmount) external returns (bool);\r\n\r\n\tfunction withdrawFlashloanFee(uint256 unifiedTokenAmount) external returns (bool);\r\n\r\n\tfunction getDepositTotalAmount() external view returns (uint256);\r\n\tfunction getBorrowTotalAmount() external view returns (uint256);\r\n\r\n\tfunction getSIRandBIR() external view returns (uint256, uint256);\r\n\r\n  function getERC20Addr() external view returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/IServiceIncentive.sol\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's si interface\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ninterface IServiceIncentive  {\r\n\tfunction setCircuitBreakWithOwner(bool emergency) external returns (bool);\r\n\tfunction setCircuitBreaker(bool emergency) external returns (bool);\r\n\r\n\tfunction updateRewardPerBlockLogic(uint256 _rewardPerBlock) external returns (bool);\r\n\tfunction updateRewardLane(address payable userAddr) external returns (bool);\r\n\r\n\tfunction getBetaRateBaseTotalAmount() external view returns (uint256);\r\n\tfunction getBetaRateBaseUserAmount(address payable userAddr) external view returns (uint256);\r\n\r\n\tfunction getMarketRewardInfo() external view returns (uint256, uint256, uint256);\r\n\r\n\tfunction getUserRewardInfo(address payable userAddr) external view returns (uint256, uint256, uint256);\r\n\r\n\tfunction claimRewardAmountUser(address payable userAddr) external returns (uint256);\r\n}\r\n\r\n// File: contracts/Errors.sol\r\npragma solidity 0.6.12;\r\n\r\ncontract Modifier {\r\n    string internal constant ONLY_OWNER = \"O\";\r\n    string internal constant ONLY_MANAGER = \"M\";\r\n    string internal constant CIRCUIT_BREAKER = \"emergency\";\r\n}\r\n\r\ncontract ManagerModifier is Modifier {\r\n    string internal constant ONLY_HANDLER = \"H\";\r\n    string internal constant ONLY_LIQUIDATION_MANAGER = \"LM\";\r\n    string internal constant ONLY_BREAKER = \"B\";\r\n}\r\n\r\ncontract HandlerDataStorageModifier is Modifier {\r\n    string internal constant ONLY_BIFI_CONTRACT = \"BF\";\r\n}\r\n\r\ncontract SIDataStorageModifier is Modifier {\r\n    string internal constant ONLY_SI_HANDLER = \"SI\";\r\n}\r\n\r\ncontract HandlerErrors is Modifier {\r\n    string internal constant USE_VAULE = \"use value\";\r\n    string internal constant USE_ARG = \"use arg\";\r\n    string internal constant EXCEED_LIMIT = \"exceed limit\";\r\n    string internal constant NO_LIQUIDATION = \"no liquidation\";\r\n    string internal constant NO_LIQUIDATION_REWARD = \"no enough reward\";\r\n    string internal constant NO_EFFECTIVE_BALANCE = \"not enough balance\";\r\n    string internal constant TRANSFER = \"err transfer\";\r\n}\r\n\r\ncontract SIErrors is Modifier { }\r\n\r\ncontract InterestErrors is Modifier { }\r\n\r\ncontract LiquidationManagerErrors is Modifier {\r\n    string internal constant NO_DELINQUENT = \"not delinquent\";\r\n}\r\n\r\ncontract ManagerErrors is ManagerModifier {\r\n    string internal constant REWARD_TRANSFER = \"RT\";\r\n    string internal constant UNSUPPORTED_TOKEN = \"UT\";\r\n}\r\n\r\ncontract OracleProxyErrors is Modifier {\r\n    string internal constant ZERO_PRICE = \"price zero\";\r\n}\r\n\r\ncontract RequestProxyErrors is Modifier { }\r\n\r\ncontract ManagerDataStorageErrors is ManagerModifier {\r\n    string internal constant NULL_ADDRESS = \"err addr null\";\r\n}\r\n\r\n// File: contracts/marketManager/ManagerSlot.sol\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's Slot contract\r\n * @notice Manager Slot Definitions & Allocations\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ncontract ManagerSlot is ManagerErrors {\r\n\tusing SafeMath for uint256;\r\n\r\n\taddress public owner;\r\n\tmapping(address => bool) operators;\r\n\tmapping(address => Breaker) internal breakerTable;\r\n\r\n\tbool public emergency = false;\r\n\r\n\tIManagerDataStorage internal dataStorageInstance;\r\n\tIOracleProxy internal oracleProxy;\r\n\r\n\t/* feat: manager reward token instance*/\r\n\tIERC20 internal rewardErc20Instance;\r\n\r\n\tIObserver public Observer;\r\n\r\n\taddress public slotSetterAddr;\r\n\taddress public handlerManagerAddr;\r\n\taddress public flashloanAddr;\r\n\r\n  // BiFi-X\r\n  address public positionStorageAddr;\r\n  address public nftAddr;\r\n\r\n\tuint256 public tokenHandlerLength;\r\n\r\n  struct FeeRateParams {\r\n    uint256 unifiedPoint;\r\n    uint256 minimum;\r\n    uint256 slope;\r\n    uint256 discountRate;\r\n  }\r\n\r\n  struct HandlerFlashloan {\r\n      uint256 flashFeeRate;\r\n      uint256 discountBase;\r\n      uint256 feeTotal;\r\n  }\r\n\r\n  mapping(uint256 => HandlerFlashloan) public handlerFlashloan;\r\n\r\n\tstruct UserAssetsInfo {\r\n\t\tuint256 depositAssetSum;\r\n\t\tuint256 borrowAssetSum;\r\n\t\tuint256 marginCallLimitSum;\r\n\t\tuint256 depositAssetBorrowLimitSum;\r\n\t\tuint256 depositAsset;\r\n\t\tuint256 borrowAsset;\r\n\t\tuint256 price;\r\n\t\tuint256 callerPrice;\r\n\t\tuint256 depositAmount;\r\n\t\tuint256 borrowAmount;\r\n\t\tuint256 borrowLimit;\r\n\t\tuint256 marginCallLimit;\r\n\t\tuint256 callerBorrowLimit;\r\n\t\tuint256 userBorrowableAsset;\r\n\t\tuint256 withdrawableAsset;\r\n\t}\r\n\r\n\tstruct Breaker {\r\n\t\tbool auth;\r\n\t\tbool tried;\r\n\t}\r\n\r\n\tstruct ContractInfo {\r\n\t\tbool support;\r\n\t\taddress addr;\r\n    address tokenAddr;\r\n\r\n    uint256 expectedBalance;\r\n    uint256 afterBalance;\r\n\r\n\t\tIProxy tokenHandler;\r\n\t\tbytes data;\r\n\r\n\t\tIMarketHandler handlerFunction;\r\n\t\tIServiceIncentive siFunction;\r\n\r\n\t\tIOracleProxy oracleProxy;\r\n\t\tIManagerDataStorage managerDataStorage;\r\n\t}\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner, ONLY_OWNER);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyHandler(uint256 handlerID) {\r\n\t\t_isHandler(handlerID);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier onlyOperators {\r\n\t\taddress payable sender = msg.sender;\r\n\t\trequire(operators[sender] || sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction _isHandler(uint256 handlerID) internal view {\r\n\t\taddress msgSender = msg.sender;\r\n\t\trequire((msgSender == dataStorageInstance.getTokenHandlerAddr(handlerID)) || (msgSender == owner), ONLY_HANDLER);\r\n\t}\r\n\r\n\tmodifier onlyLiquidationManager {\r\n\t\t_isLiquidationManager();\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction _isLiquidationManager() internal view {\r\n\t\taddress msgSender = msg.sender;\r\n\t\trequire((msgSender == dataStorageInstance.getLiquidationManagerAddr()) || (msgSender == owner), ONLY_LIQUIDATION_MANAGER);\r\n\t}\r\n\r\n\tmodifier circuitBreaker {\r\n\t\t_isCircuitBreak();\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction _isCircuitBreak() internal view {\r\n\t\trequire((!emergency) || (msg.sender == owner), CIRCUIT_BREAKER);\r\n\t}\r\n\r\n\tmodifier onlyBreaker {\r\n\t\t_isBreaker();\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction _isBreaker() internal view {\r\n\t\trequire(breakerTable[msg.sender].auth, ONLY_BREAKER);\r\n\t}\r\n}\r\n\r\n// File: contracts/marketManager/ManagerSlotSetter.sol\r\n// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title BiFi's ManagetSlotSetter contract\r\n * @notice Manager Slot Storage setter logics\r\n * @author BiFi(seinmyung25, Miller-kk, tlatkdgus1, dongchangYoo)\r\n */\r\ncontract ManagerSlotSetter is ManagerSlot {\r\n  \t/**\r\n\t* @dev Transfer ownership\r\n\t* @param _owner the address of the new owner\r\n\t* @return true (TODO: validate results)\r\n\t*/\r\n\tfunction ownershipTransfer(address payable _owner) onlyOwner public returns (bool)\r\n\t{\r\n\t\towner = _owner;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction setOperator(address payable adminAddr, bool flag) onlyOwner external returns (bool) {\r\n\t\toperators[adminAddr] = flag;\r\n\t\treturn flag;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Set the address of oracleProxy contract\r\n\t* @param oracleProxyAddr The address of oracleProxy contract\r\n\t* @return true (TODO: validate results)\r\n\t*/\r\n\tfunction setOracleProxy(address oracleProxyAddr) onlyOwner external returns (bool)\r\n\t{\r\n\t\toracleProxy = IOracleProxy(oracleProxyAddr);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Set the address of BiFi reward token contract\r\n\t* @param erc20Addr The address of BiFi reward token contract\r\n\t* @return true (TODO: validate results)\r\n\t*/\r\n\tfunction setRewardErc20(address erc20Addr) onlyOwner public returns (bool)\r\n\t{\r\n\t\trewardErc20Instance = IERC20(erc20Addr);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Authorize admin user for circuitBreaker\r\n\t* @param _target The address of the circuitBreaker admin user.\r\n\t* @param _status The boolean status of circuitBreaker (on/off)\r\n\t* @return true (TODO: validate results)\r\n\t*/\r\n\tfunction setBreakerTable(address _target, bool _status) onlyOwner external returns (bool)\r\n\t{\r\n\t\tbreakerTable[_target].auth = _status;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Set circuitBreak to freeze/unfreeze all handlers\r\n\t* @param _emergency The boolean status of circuitBreaker (on/off)\r\n\t* @return true (TODO: validate results)\r\n\t*/\r\n\tfunction setCircuitBreaker(bool _emergency) onlyBreaker external returns (bool)\r\n\t{\r\n\t\tfor (uint256 handlerID = 0; handlerID < tokenHandlerLength; handlerID++)\r\n\t\t{\r\n\t\t\tIProxy tokenHandler = IProxy(dataStorageInstance.getTokenHandlerAddr(handlerID));\r\n\r\n\t\t\t// use delegate call via handler proxy\r\n\t\t\t// for token handlers\r\n\t\t\tbytes memory callData = abi.encodeWithSelector(\r\n\t\t\t\tIMarketHandler\r\n\t\t\t\t.setCircuitBreaker.selector,\r\n\t\t\t\t_emergency\r\n\t\t\t);\r\n\r\n\t\t\ttokenHandler.handlerProxy(callData);\r\n\t\t\ttokenHandler.siProxy(callData);\r\n\t\t}\r\n\r\n\t\tILiquidationManager liquidationManager = ILiquidationManager(dataStorageInstance.getLiquidationManagerAddr());\r\n\t\tliquidationManager.setCircuitBreaker(_emergency);\r\n\t\temergency = _emergency;\r\n\t\treturn true;\r\n\t}\r\n\r\n  /**\r\n\t* @dev Register a handler\r\n\t* @param handlerID Handler ID and address\r\n\t* @param tokenHandlerAddr The handler address\r\n  * @param discountBase The minimum amount hold to get a flashloan fee discount\r\n\t* @return true (TODO: validate results)\r\n\t*/\r\n\tfunction handlerRegister(uint256 handlerID, address tokenHandlerAddr, uint256 flashFeeRate, uint256 discountBase) onlyOwner external returns (bool)\r\n\t{\r\n\t\tdataStorageInstance.setTokenHandler(handlerID, tokenHandlerAddr);\r\n\t\thandlerFlashloan[handlerID].flashFeeRate = flashFeeRate;\r\n    handlerFlashloan[handlerID].discountBase = discountBase;\r\n\r\n\t\ttokenHandlerLength = tokenHandlerLength + 1;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t* @dev Set a liquidation manager contract\r\n\t* @param liquidationManagerAddr The address of liquidiation manager\r\n\t* @return true (TODO: validate results)\r\n\t*/\r\n\tfunction setLiquidationManager(address liquidationManagerAddr) onlyOwner external returns (bool)\r\n\t{\r\n\t\tdataStorageInstance.setLiquidationManagerAddr(liquidationManagerAddr);\r\n\t\treturn true;\r\n\t}\r\n\r\n  /**\r\n\t* @dev Set the support stauts for the handler\r\n\t* @param handlerID the handler ID\r\n\t* @param support the support status (boolean)\r\n\t* @return true (TODO: validate results)\r\n\t*/\r\n\tfunction setHandlerSupport(uint256 handlerID, bool support) onlyOwner external returns (bool)\r\n\t{\r\n\t\trequire(!dataStorageInstance.getTokenHandlerExist(handlerID), UNSUPPORTED_TOKEN);\r\n\t\t/* activate or inactivate anyway*/\r\n\t\tdataStorageInstance.setTokenHandlerSupport(handlerID, support);\r\n\t\treturn true;\r\n\t}\r\n\r\n  function setSlotSetterAddr(address _slotSetterAddr) onlyOwner external returns (bool)\r\n  {\r\n    slotSetterAddr = _slotSetterAddr;\r\n    return true;\r\n  }\r\n\r\n  function sethandlerManagerAddr(address _handlerManagerAddr) onlyOwner external returns (bool)\r\n  {\r\n    handlerManagerAddr = _handlerManagerAddr;\r\n    return true;\r\n  }\r\n\r\n  function setFlashloanAddr(address _flashloanAddr) onlyOwner external returns (bool)\r\n  {\r\n    flashloanAddr = _flashloanAddr;\r\n    return true;\r\n  }\r\n\r\n  function setPositionStorageAddr(address _positionStorageAddr) onlyOwner external returns (bool) {\r\n    positionStorageAddr = _positionStorageAddr;\r\n    return true;\r\n  }\r\n\r\n  function setNFTAddr(address _nftAddr) onlyOwner external returns (bool) {\r\n    nftAddr = _nftAddr;\r\n    return true;\r\n  }\r\n\r\n  function setFlashloanFee(uint256 handlerID, uint256 flashFeeRate) onlyOwner external returns (bool) {\r\n    handlerFlashloan[handlerID].flashFeeRate = flashFeeRate;\r\n    return true;\r\n  }\r\n\r\n  function setDiscountBase(uint256 handlerID, uint256 feeBase) onlyOwner external returns (bool) {\r\n    handlerFlashloan[handlerID].discountBase = feeBase;\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"Observer\",\"outputs\":[{\"internalType\":\"contract IObserver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashloanAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"handlerFlashloan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"flashFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"handlerManagerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"handlerID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenHandlerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flashFeeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountBase\",\"type\":\"uint256\"}],\"name\":\"handlerRegister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"ownershipTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionStorageAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setBreakerTable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_emergency\",\"type\":\"bool\"}],\"name\":\"setCircuitBreaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"handlerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeBase\",\"type\":\"uint256\"}],\"name\":\"setDiscountBase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flashloanAddr\",\"type\":\"address\"}],\"name\":\"setFlashloanAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"handlerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flashFeeRate\",\"type\":\"uint256\"}],\"name\":\"setFlashloanFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"handlerID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"setHandlerSupport\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidationManagerAddr\",\"type\":\"address\"}],\"name\":\"setLiquidationManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddr\",\"type\":\"address\"}],\"name\":\"setNFTAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adminAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleProxyAddr\",\"type\":\"address\"}],\"name\":\"setOracleProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionStorageAddr\",\"type\":\"address\"}],\"name\":\"setPositionStorageAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Addr\",\"type\":\"address\"}],\"name\":\"setRewardErc20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_slotSetterAddr\",\"type\":\"address\"}],\"name\":\"setSlotSetterAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_handlerManagerAddr\",\"type\":\"address\"}],\"name\":\"sethandlerManagerAddr\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotSetterAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenHandlerLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ManagerSlotSetter","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a8a8b9f269ca3daa78f66ed4b566640186b0381e668853848ac5d52a7795447c"}]}