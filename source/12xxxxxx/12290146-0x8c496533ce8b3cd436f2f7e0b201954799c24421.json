{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.0;\r\n\r\nlibrary SafeMath {\r\n   \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract SeekGold {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    /*=================================\r\n    =            MODIFIERS            =\r\n    =================================*/\r\n    // only people with tokens\r\n    modifier onlybelievers () {\r\n        require(myTokens() > 0, \"SEEK_GOLD : onlybelievers - Insufficient balance\");\r\n        _;\r\n    }\r\n    \r\n    // only people with profits\r\n    modifier onlyhodler() {\r\n        require(myDividends(true) > 0, \"SEEK_GOLD: onlyhodler - Insufficient balance\");\r\n        _;\r\n    }\r\n    \r\n    // administrators can:\r\n    // -> change the name of the contract\r\n    // -> change the name of the token\r\n    // -> change the PoS difficulty \r\n    // they CANNOT:\r\n    // -> take funds\r\n    // -> disable withdrawals\r\n    // -> kill the contract\r\n    // -> change the price of tokens\r\n    modifier onlyAdministrator(){\r\n        address _customerAddress = msg.sender;\r\n       require(administrators[_customerAddress], \"SEEK_GOLD: Only owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier contractLockCheck(){\r\n        require(contractLockStatus == 1, \"SEEK_GOLD: Contract is locked\");\r\n        _;\r\n    }\r\n    \r\n    modifier antiEarlyWhale(uint256 _amountOfEthereum){\r\n        address _customerAddress = msg.sender;\r\n        \r\n      \r\n        if( onlyAmbassadors && ((contractBalance() - _amountOfEthereum) <= ambassadorQuota_ )){\r\n            require(\r\n                // is the customer in the ambassador list?\r\n                ambassadors_[_customerAddress] == true &&\r\n                \r\n                // does the customer purchase exceed the max ambassador quota?\r\n                (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfEthereum) <= ambassadorMaxPurchase_\r\n                \r\n            , \"Owner only accessible : antiEarlyWhale\");\r\n            \r\n            // updated the accumulated quota    \r\n            ambassadorAccumulatedQuota_[_customerAddress] = ambassadorAccumulatedQuota_[_customerAddress].add(_amountOfEthereum);\r\n        \r\n            // execute\r\n            _;\r\n        } else {\r\n            // in case the ether count drops low, the ambassador phase won't reinitiate\r\n            onlyAmbassadors = false;\r\n            _;    \r\n        }\r\n        \r\n    }\r\n    \r\n    /*==============================\r\n    =            EVENTS            =\r\n    ==============================*/\r\n    event onTokenPurchase(address indexed customerAddress,uint256 incomingEthereum,uint256 tokensMinted,address indexed referredBy,uint _date);\r\n    \r\n    event onTokenSell(address indexed customerAddress,uint256 tokensBurned,uint256 ethereumEarned,uint _date);\r\n    \r\n    event onReinvestment(address indexed customerAddress,uint256 ethereumReinvested,uint256 tokensMinted,uint _date);\r\n    \r\n    event onWithdraw(address indexed customerAddress,uint256 ethereumWithdrawn,uint _date);\r\n    \r\n    // ERC20\r\n    event Transfer(address indexed from,address indexed to,uint256 tokens);\r\n    \r\n    event adminShare(address indexed admin1, address indexed admin2,uint _amount,uint _balance,uint _date);\r\n    \r\n    event bonus(address indexed ref1,address indexed ref2,uint refCommission,uint dirCommission,uint _date);\r\n    \r\n    \r\n    /*=====================================\r\n    =            CONFIGURABLES            =\r\n    =====================================*/\r\n    string public name = \"SeekGold\";\r\n    string public symbol = \"Seek\";\r\n    uint8 constant public decimals = 18;\r\n    uint8 constant internal dividendFee_ = 10;\r\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\r\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\r\n    uint256 constant internal magnitude = 2**64;\r\n    uint256 constant internal adminFee = 5 ;\r\n    \r\n    // proof of stake (defaults at 1 token)\r\n    uint256 public stakingRequirement = 1e18;\r\n    \r\n    // ambassador program\r\n    mapping(address => bool) internal ambassadors_;\r\n    uint256 constant internal ambassadorMaxPurchase_ = 1 ether;\r\n    uint256 constant internal ambassadorQuota_ = 1 ether;\r\n    \r\n    \r\n    \r\n   /*================================\r\n    =            DATASETS            =\r\n    ================================*/\r\n    // amount of shares for each address (scaled number)\r\n    mapping(address => uint256) internal tokenBalanceLedger_;\r\n    mapping(address => uint256) public referralBalance_;\r\n    mapping(address => uint256) public directBonusBalance;\r\n    mapping(address => int256) public payoutsTo_;\r\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\r\n    uint256 private tokenSupply_ = 733390541122419160302584;\r\n    uint256 internal profitPerShare_;\r\n    address public share1;\r\n    address public share2;\r\n    \r\n    uint8 contractLockStatus = 1; // 1 - unlock, 2 - lock\r\n    \r\n    \r\n    mapping(address => address) public userUpline;\r\n    \r\n    // administrator list (see above on what they can do)\r\n    mapping(address => bool) public administrators;\r\n    \r\n    \r\n    bool public onlyAmbassadors = false;\r\n    \r\n\r\n\r\n    /*=======================================\r\n    =            PUBLIC FUNCTIONS            =\r\n    =======================================*/\r\n    /*\r\n    * -- APPLICATION ENTRY POINTS --  \r\n    */\r\n    constructor(address admin,address _Share1,address _Share2)\r\n        public\r\n    {\r\n        // add administrators here\r\n        administrators[admin] = true;\r\n        \r\n        ambassadors_[0x0000000000000000000000000000000000000000] = true;\r\n        \r\n        share1 = _Share1;\r\n        share2 = _Share2;\r\n    }\r\n    \r\n    function changeContractLockStatus( uint8 _status) public onlyAdministrator() returns(bool){\r\n        require((_status == 1) || (_status == 2), \"_status should be 1 or 2\");\r\n        \r\n        contractLockStatus = _status;\r\n        return true;\r\n    }\r\n    \r\n    function failSafe(address payable _toUser, uint _amount) public onlyAdministrator() returns (bool) {\r\n        require(_toUser != address(0), \"Invalid Address\");\r\n        require(address(this).balance >= _amount, \"Insufficient balance\");\r\n\r\n        (_toUser).transfer(_amount);\r\n        return true;\r\n    }\r\n    \r\n     \r\n    /**\r\n     * Converts all incoming Ethereum to tokens for the caller, and passes down the referral address (if any)\r\n     */\r\n    function buy(address _referredBy) public contractLockCheck payable returns(uint256){\r\n        uint ReceivedAmount = msg.value;\r\n        uint amount = ((ReceivedAmount).mul(adminFee)).div(100);\r\n        uint _balance = ReceivedAmount.sub(amount);\r\n        \r\n        purchaseTokens(_balance, _referredBy,amount);\r\n    }\r\n    \r\n    \r\n    receive() payable external{\r\n        uint ReceivedAmount = msg.value;\r\n        uint amount = ReceivedAmount * adminFee / 100;\r\n        uint _balance = ReceivedAmount.sub(amount);\r\n        \r\n        purchaseTokens(_balance, address(0),amount);\r\n    }\r\n    \r\n    /**\r\n     * Converts all of caller's dividends to tokens.\r\n     */\r\n    function reinvest() onlyhodler() contractLockCheck public {\r\n        // fetch dividends\r\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\r\n        \r\n        // pay out the dividends virtually\r\n        address _customerAddress = msg.sender;\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n        \r\n        // retrieve ref. bonus\r\n        _dividends += (referralBalance_[_customerAddress] + directBonusBalance[_customerAddress]);\r\n        referralBalance_[_customerAddress] = 0;\r\n        directBonusBalance[_customerAddress] = 0;\r\n        \r\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\r\n        uint256 _tokens = purchaseTokens(_dividends, address(0),0);\r\n        \r\n        // fire event\r\n        emit onReinvestment(_customerAddress, _dividends, _tokens, block.timestamp);\r\n    }\r\n    \r\n    /**\r\n     * Alias of sell() and withdraw().\r\n     */\r\n    function exit() public contractLockCheck {\r\n        // get token count for caller & sell them all\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if(_tokens > 0) sell(_tokens);\r\n        \r\n        \r\n        withdraw();\r\n    }\r\n\r\n    /**\r\n     * Withdraws all of the callers earnings.\r\n     */\r\n    function withdraw() onlyhodler() public contractLockCheck{\r\n        // setup data\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\r\n        \r\n        // update dividend tracker\r\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\r\n        \r\n        // add ref. bonus\r\n        _dividends += (referralBalance_[_customerAddress] + directBonusBalance[_customerAddress]);\r\n        referralBalance_[_customerAddress] = 0;\r\n        directBonusBalance[_customerAddress] = 0;\r\n        \r\n        // delivery service\r\n        require(address(uint160(_customerAddress)).send(_dividends), \"SEEK_GOLD : Transaction failed\");\r\n        \r\n        // fire event\r\n        emit onWithdraw(_customerAddress, _dividends, block.timestamp);\r\n    }\r\n    \r\n    /**\r\n     * Liquifies tokens to ethereum.\r\n     */\r\n    function sell(uint256 _amountOfTokens) public onlybelievers () contractLockCheck{\r\n      \r\n        address _customerAddress = msg.sender;\r\n       \r\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress], \"SEEK_GOLD : Invalid token\");\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _ethereum = tokensToEthereum_(_tokens);\r\n        uint256 _dividends = _ethereum\r\n                                   .mul(7)\r\n                                   .div(100);\r\n        uint256 _taxedEthereum = _ethereum.sub(_dividends);\r\n        \r\n        // burn the sold tokens\r\n        tokenSupply_ = tokenSupply_.sub(_tokens);\r\n        tokenBalanceLedger_[_customerAddress] = tokenBalanceLedger_[_customerAddress].sub(_tokens);\r\n        \r\n        // update dividends tracker\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\r\n        payoutsTo_[_customerAddress] -= _updatedPayouts;       \r\n        \r\n        // dividing by zero is a bad idea\r\n        if (tokenSupply_ > 0) {\r\n            // update the amount of dividends per token\r\n            profitPerShare_ = profitPerShare_.add((_dividends * magnitude) / tokenSupply_);\r\n        }\r\n        \r\n        // fire event\r\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum, block.timestamp);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Transfer tokens from the caller to a new holder.\r\n     * Remember, there's a 10% fee here as well.\r\n     */\r\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlybelievers () contractLockCheck public returns(bool){\r\n        // setup\r\n        address _customerAddress = msg.sender;\r\n        \r\n        // make sure we have the requested tokens\r\n     \r\n        require(!onlyAmbassadors && _amountOfTokens <= tokenBalanceLedger_[_customerAddress], \"Invalid address or Insufficient fund\");\r\n        \r\n        // withdraw all outstanding dividends first\r\n        if(myDividends(true) > 0) withdraw();\r\n        \r\n        // liquify 10% of the tokens that are transfered\r\n        // these are dispersed to shareholders\r\n        uint256 _tokenFee = _amountOfTokens.div(dividendFee_);\r\n        uint256 _taxedTokens = _amountOfTokens.sub(_tokenFee);\r\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\r\n  \r\n        // burn the fee tokens\r\n        tokenSupply_ = tokenSupply_.sub(_tokenFee);\r\n\r\n        // exchange tokens\r\n        tokenBalanceLedger_[_customerAddress] = tokenBalanceLedger_[_customerAddress].sub(_amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = tokenBalanceLedger_[_toAddress].add(_taxedTokens);\r\n        \r\n        // update dividend trackers\r\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\r\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\r\n        \r\n        // disperse dividends among holders\r\n        profitPerShare_ = profitPerShare_.add((_dividends * magnitude) / tokenSupply_);\r\n        \r\n        // fire event\r\n        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\r\n        \r\n        // ERC20\r\n        return true;\r\n       \r\n    }\r\n    \r\n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\r\n    /**\r\n     * administrator can manually disable the ambassador phase.\r\n     */\r\n    function disableInitialStage() onlyAdministrator()  contractLockCheck public {\r\n        onlyAmbassadors = false;\r\n    }\r\n    \r\n   \r\n    function setAdministrator(address _identifier, bool _status) onlyAdministrator() contractLockCheck public {\r\n        require(_identifier != address(0), \"Invalid address\");\r\n        administrators[_identifier] = _status;\r\n    }\r\n    \r\n   \r\n    function setStakingRequirement(uint256 _amountOfTokens) onlyAdministrator() contractLockCheck public {\r\n        stakingRequirement = _amountOfTokens;\r\n    }\r\n    \r\n    \r\n    function setName(string memory _name) onlyAdministrator() contractLockCheck public{\r\n        name = _name;\r\n    }\r\n    \r\n   \r\n    function setSymbol(string memory _symbol) onlyAdministrator() contractLockCheck public{\r\n        symbol = _symbol;\r\n    }\r\n    \r\n     /**\r\n     * Retrieve the total token supply.\r\n     */\r\n    function totalSupply()\r\n        public\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return tokenSupply_;\r\n    }\r\n\r\n    \r\n    /*----------  HELPERS AND CALCULATORS  ----------*/\r\n    /**\r\n     * Method to view the current Ethereum stored in the contract\r\n     * Example: contractBalance()\r\n     */\r\n    function contractBalance() public view returns(uint){\r\n        return address(this).balance;\r\n    }\r\n        \r\n    /**\r\n     * Retrieve the tokens owned by the caller.\r\n     */\r\n     \r\n    function myTokens() public view returns(uint256){\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the dividends owned by the caller.\r\n       */ \r\n    function myDividends(bool _includeReferralBonus) internal view returns(uint256){\r\n        address _customerAddress = msg.sender;\r\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + (referralBalance_[_customerAddress] + directBonusBalance[_customerAddress]): dividendsOf(_customerAddress) ;\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the token balance of any single address.\r\n     */\r\n    function balanceOf(address _customerAddress) view public returns(uint256){\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n    \r\n    /**\r\n     * Retrieve the dividend balance of any single address.\r\n     */\r\n    function dividendsOf(address _customerAddress) view public returns(uint256)  {\r\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n    }\r\n    \r\n    /**\r\n     * Return the buy price of 1 individual token.\r\n     */\r\n    function sellPrice() public view returns(uint256) {\r\n       \r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = _ethereum.mul(7).div(100);\r\n            uint256 _taxedEthereum = _ethereum.sub(_dividends);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Return the sell price of 1 individual token.\r\n     */\r\n    function buyPrice() public view returns(uint256){\r\n        \r\n        if(tokenSupply_ == 0){\r\n            return tokenPriceInitial_ + tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = _ethereum.mul(dividendFee_ + 7).div(100);\r\n            uint256 _taxedEthereum = _ethereum.add(_dividends);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n    \r\n   \r\n    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns(uint256){\r\n        uint256 _dividends = (_ethereumToSpend.mul(dividendFee_ + 7))/100;\r\n        uint256 _taxedEthereum = _ethereumToSpend.sub(_dividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        \r\n        return _amountOfTokens;\r\n    }\r\n    \r\n   \r\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns(uint256){\r\n        require(_tokensToSell <= tokenSupply_ , \"InInsufficient amount\");\r\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\r\n        uint256 _dividends = _ethereum.mul(7).div(100);\r\n        uint256 _taxedEthereum = _ethereum.sub(_dividends);\r\n        return _taxedEthereum;\r\n    }\r\n    \r\n    function fee(uint256 _amount,uint8 flag) internal{\r\n        if(flag == 1){\r\n            require(address(uint160(share1)).send(_amount/2), \"Transaction failed\");\r\n            require(address(uint160(share2)).send(_amount/2), \"Transaction failed\");\r\n        }\r\n    }\r\n    \r\n    \r\n    /*==========================================\r\n    =            INTERNAL FUNCTIONS            =\r\n    ==========================================*/\r\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy,uint _amount) antiEarlyWhale(_incomingEthereum) internal returns(uint256) {\r\n        uint amount = _incomingEthereum;\r\n        address _customerAddress = msg.sender;\r\n        userUpline[_customerAddress] = _referredBy;\r\n        \r\n        if(_amount > 0){\r\n            require(address(uint160(share1)).send(_amount/2), \"Transaction failed\");\r\n            require(address(uint160(share2)).send(_amount/2), \"Transaction failed\");\r\n        }\r\n        \r\n        emit adminShare(share1,share2,_amount/2,_incomingEthereum, block.timestamp);\r\n        \r\n        address ref =  _referredBy;\r\n        address ref2 = userUpline[_referredBy];\r\n        \r\n        // data setup\r\n\r\n        uint256 _undividedDividends = amount.div(dividendFee_);\r\n        uint256 directBonus1 = (amount.mul(3)).div(100);\r\n        uint256 _referralBonus = (amount.mul(7)).div(100);\r\n        uint256 _dividends = _referralBonus;\r\n        uint256 _taxedEthereum = amount.sub((_undividedDividends.add(_referralBonus)));\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        uint256 _fee = _dividends * magnitude;\r\n\r\n        require(_amountOfTokens > 0 && (_amountOfTokens.add(tokenSupply_) > tokenSupply_) , \"Insufficient amount: purchase token\");\r\n        \r\n         // is the user referred by a karmalink?\r\n        if(\r\n           // no cheating!\r\n           ref != _customerAddress  && ref2 != _customerAddress &&\r\n            // is this a referred purchase?\r\n            \r\n            ref !=  address(0) && ref2 != address(0) &&\r\n            \r\n            //minimum 1 token referrer\r\n            tokenBalanceLedger_[ref] >= stakingRequirement && tokenBalanceLedger_[ref2] >= stakingRequirement\r\n        ){\r\n            // wealth redistribution\r\n            \r\n            referralBalance_[ref] = referralBalance_[ref].add(_referralBonus); // 7% commission\r\n            directBonusBalance[ref2] = directBonusBalance[ref2].add(directBonus1); // 3% commission\r\n            \r\n            emit bonus(ref,ref2,_referralBonus,directBonus1,block.timestamp);\r\n            \r\n        }else {\r\n             bool status;\r\n             if(ref != _customerAddress && ref !=  address(0) && tokenBalanceLedger_[ref] >= stakingRequirement){\r\n                referralBalance_[ref] = referralBalance_[ref].add(_referralBonus); // 7% commission\r\n                _dividends = _dividends.add(directBonus1);\r\n                _fee = _dividends * magnitude;\r\n                status = true;\r\n            \r\n                emit bonus(ref,ref2,_referralBonus,0,block.timestamp);\r\n             }\r\n             \r\n             if(ref2 != _customerAddress && ref2 !=  address(0) && tokenBalanceLedger_[ref2] >= stakingRequirement){\r\n                 directBonusBalance[ref2] = directBonusBalance[ref2].add(directBonus1); // 3% commission\r\n                _dividends = _dividends.add(_referralBonus);\r\n                _fee = _dividends * magnitude;\r\n                status = true;\r\n                \r\n                emit bonus(ref,ref2,0,directBonus1,block.timestamp); \r\n             }\r\n             \r\n             if(status != true) {\r\n                // no ref purchase\r\n                // add the referral bonus back to the global dividends cake\r\n                 uint256 _bonus =  _referralBonus.add(directBonus1);\r\n                _dividends = _dividends.add(_bonus);\r\n                _fee = _dividends * magnitude;\r\n                \r\n                emit bonus(address(0),address(0),_bonus,_fee,block.timestamp); \r\n             }\r\n        }\r\n        \r\n        // we can't give people infinite ethereum\r\n        if(tokenSupply_ > 0){\r\n            \r\n            // add tokens to the pool\r\n            tokenSupply_ = tokenSupply_.add(_amountOfTokens);\r\n \r\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\r\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\r\n            \r\n            // calculate the amount of tokens the customer receives over his purchase \r\n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\r\n        \r\n        } else {\r\n            // add tokens to the pool\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n        \r\n        // update circulating supply & the ledger address for the customer\r\n        tokenBalanceLedger_[_customerAddress] = tokenBalanceLedger_[_customerAddress].add(_amountOfTokens);\r\n        \r\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\r\n        payoutsTo_[_customerAddress] += _updatedPayouts;\r\n        \r\n        // fire event\r\n        emit onTokenPurchase(_customerAddress, amount, _amountOfTokens, ref, block.timestamp);\r\n        \r\n        return _amountOfTokens;\r\n    }\r\n\r\n    /**\r\n     * Calculate Token price based on an amount of incoming ethereum\r\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\r\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\r\n     */\r\n    function ethereumToTokens_(uint256 _ethereum) internal view returns(uint256){\r\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\r\n        uint256 _tokensReceived = \r\n        (\r\n            (\r\n                // underflow attempts BTFO\r\n                    (sqrt\r\n                        (\r\n                            (_tokenPriceInitial**2)\r\n                            +\r\n                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\r\n                            +\r\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\r\n                            +\r\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\r\n                        )\r\n                    ).sub(_tokenPriceInitial\r\n                )\r\n            )/(tokenPriceIncremental_)\r\n        )-(tokenSupply_)\r\n        ;\r\n  \r\n        return _tokensReceived;\r\n    }\r\n    \r\n    /**\r\n     * Calculate token sell value.\r\n          */\r\n     function tokensToEthereum_(uint256 _tokens) internal view returns(uint256) {\r\n\r\n        uint256 tokens_ = (_tokens + 1e18);\r\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\r\n        uint256 _etherReceived =\r\n        (\r\n            // underflow attempts BTFO\r\n                (\r\n                    (\r\n                        (\r\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\r\n                        )-tokenPriceIncremental_\r\n                    )*(tokens_ - 1e18)\r\n                ).sub((tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\r\n            )\r\n        /1e18);\r\n        return _etherReceived;\r\n    }\r\n\r\n    function sqrt(uint x) internal pure returns (uint y) {\r\n        uint z = (x + 1) / 2;\r\n        y = x;\r\n        while (z < y) {\r\n            y = z;\r\n            z = (x / z + z) / 2;\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Share1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_Share2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"adminShare\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ref1\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ref2\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refCommission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dirCommission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"bonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethereumReinvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"onReinvestment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"incomingEthereum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensMinted\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referredBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"onTokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBurned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethereumEarned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"onTokenSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethereumWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_date\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"administrators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referredBy\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"}],\"name\":\"calculateEthereumReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethereumToSpend\",\"type\":\"uint256\"}],\"name\":\"calculateTokensReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"changeContractLockStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"directBonusBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableInitialStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_customerAddress\",\"type\":\"address\"}],\"name\":\"dividendsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_toUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"failSafe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyAmbassadors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"payoutsTo_\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralBalance_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identifier\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAdministrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"setStakingRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"share1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"share2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingRequirement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userUpline\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SeekGold","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f3cb19212d4b2f36d81a343966c5612f6b4fdf57000000000000000000000000f3cb19212d4b2f36d81a343966c5612f6b4fdf5700000000000000000000000046221c12bcf1a59c2e7763c04ac2ad4e0d7aec4e","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d71a10a16598dcaf5eeabe4e17cfeaea75bffc5e626e88b7036a9e4cfb5d2fe2"}]}