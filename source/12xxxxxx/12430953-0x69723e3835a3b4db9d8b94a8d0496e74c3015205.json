{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.7.6;\r\npragma experimental ABIEncoderV2;\r\n\r\nlibrary CloneLibrary {\r\n\r\n    function createClone(address target) internal returns (address result) {\r\n        // Reserve 55 bytes for the deploy code + 17 bytes as a buffer to prevent overwriting\r\n        // other memory in the final mstore\r\n        bytes memory cloneBuffer = new bytes(72);\r\n        assembly {\r\n            let clone := add(cloneBuffer, 32)\r\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(clone, 0x14), shl(96, target))\r\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            result := create(0, clone, 0x37)\r\n        }\r\n    }\r\n\r\n\r\n    function isClone(address target, address query) internal view returns (bool result) {\r\n        assembly {\r\n            let clone := mload(0x40)\r\n            mstore(clone, 0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000)\r\n            mstore(add(clone, 0xa), shl(96, target))\r\n            mstore(add(clone, 0x1e), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n\r\n            let other := add(clone, 0x40)\r\n            extcodecopy(query, other, 0, 0x2d)\r\n            result := and(\r\n                eq(mload(clone), mload(other)),\r\n                eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n/// @author Conjure Finance Team\r\n/// @title StakingRewardsFactory\r\n/// @notice Factory contract to create new instances of StakingRewards\r\ncontract StakingRewardsFactory {\r\n    using CloneLibrary for address;\r\n\r\n    event NewStakingRewards(address stakingRewards);\r\n    event FactoryOwnerChanged(address newowner);\r\n\r\n    address payable public factoryOwner;\r\n    address public stakingRewardsImplementation;\r\n\r\n    constructor(\r\n        address _stakingRewardsImplementation\r\n    )\r\n    {\r\n        require(_stakingRewardsImplementation != address(0), \"No zero address for stakingRewardsImplementation\");\r\n\r\n        factoryOwner = msg.sender;\r\n        stakingRewardsImplementation = _stakingRewardsImplementation;\r\n    }\r\n\r\n    /**\r\n     * @dev lets anyone mint a new StakingRewards contract\r\n    */\r\n    function stakingRewardsMint(\r\n        address _owner,\r\n        address _rewardsDistribution,\r\n        address _rewardsToken,\r\n        address _stakingToken,\r\n        uint256 _rewardsDuration\r\n    )\r\n    external\r\n    returns (address stakingRewardsAddress)\r\n    {\r\n        stakingRewardsAddress = stakingRewardsImplementation.createClone();\r\n\r\n        emit NewStakingRewards(stakingRewardsAddress);\r\n\r\n        IStakingRewards(stakingRewardsAddress).initialize(\r\n            _owner,\r\n            _rewardsDistribution,\r\n            _rewardsToken,\r\n            _stakingToken,\r\n            _rewardsDuration,\r\n            address(this)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev lets the owner change the current conjure implementation\r\n     *\r\n     * @param stakingRewardsImplementation_ the address of the new implementation\r\n    */\r\n    function newStakingRewardsImplementation(address stakingRewardsImplementation_) external {\r\n        require(msg.sender == factoryOwner, \"Only factory owner\");\r\n        require(stakingRewardsImplementation_ != address(0), \"No zero address for stakingRewardsImplementation_\");\r\n\r\n        stakingRewardsImplementation = stakingRewardsImplementation_;\r\n    }\r\n\r\n    /**\r\n     * @dev lets the owner change the ownership to another address\r\n     *\r\n     * @param newOwner the address of the new owner\r\n    */\r\n    function newFactoryOwner(address payable newOwner) external {\r\n        require(msg.sender == factoryOwner, \"Only factory owner\");\r\n        require(newOwner != address(0), \"No zero address for newOwner\");\r\n\r\n        factoryOwner = newOwner;\r\n        emit FactoryOwnerChanged(factoryOwner);\r\n    }\r\n}\r\n\r\ninterface IStakingRewards {\r\n    function initialize(\r\n        address _owner,\r\n        address _rewardsDistribution,\r\n        address _rewardsToken,\r\n        address _stakingToken,\r\n        uint256 _rewardsDuration,\r\n        address _factoryContract\r\n    ) external;\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingRewardsImplementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"FactoryOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakingRewards\",\"type\":\"address\"}],\"name\":\"NewStakingRewards\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"factoryOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"newFactoryOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingRewardsImplementation_\",\"type\":\"address\"}],\"name\":\"newStakingRewardsImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingRewardsImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsDistribution\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"stakingRewardsMint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakingRewardsAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingRewardsFactory","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000002211dccb13370cb088af4a5c57c9a593528fa05c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cb91baabb2fb318eea712face255ddd6995a91edd522805fe1d722f7fb18ad17"}]}