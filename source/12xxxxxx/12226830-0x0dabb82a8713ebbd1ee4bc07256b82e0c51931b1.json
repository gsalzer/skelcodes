{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: NO-LICENSE\r\npragma solidity <=0.7.4;\r\n\r\nabstract contract ReentrancyGuard {\r\n\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a + b;\r\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n\t}\r\n\r\n\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b <= a, errorMessage);\r\n\t\tuint256 c = a - b;\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tuint256 c = a * b;\r\n\t\trequire(c / a == b, \"multiplication overflow\");\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn div(a, b, \"SafeMath: division by zero\");\r\n\t}\r\n\r\n\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n\t\trequire(b > 0, errorMessage);\r\n\t\tuint256 c = a / b;\r\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n\t\treturn c;\r\n\t}\r\n\r\n}\r\n\r\n\r\ninterface IGenesisSale {\r\n\r\n    function purchase(address _reciever) external payable returns(bool); \r\n\r\n    function allocate(uint256 _tokens, address _user, uint256 _method) external returns(bool);\r\n\r\n    function reduceAllocation(uint256 _tokens, address _user) external returns(bool);\r\n\r\n    function fetchPurchaseHistory(address _user) external view returns(uint256[] memory, uint256[] memory);\r\n\r\n    function revokeOwnership(address _newOwner) external returns(bool);\r\n\r\n    function claim() external returns(bool);\r\n\r\n    function whitelist(address _user) external returns(bool);\r\n\r\n    function updateCap(uint256 _minCap, uint256 _maxCap) external returns(bool);\r\n\r\n    function lockDistribution(bool _state) external returns(bool);\r\n\r\n    function updateGovernor(address _newGovernor) external returns(bool);\r\n\r\n    function updateContract(address _contract) external returns(bool);\r\n\r\n    function updateEthSource(address _ethSource) external returns(bool);\r\n\r\n    function updateEthWallet(address _newEthWallet) external returns(bool);\r\n\r\n    function updateOrgWallet(address _newOrgWallet) external returns(bool);\r\n\r\n    function updatePresalePrice(uint256 _newPrice) external returns(bool);\r\n\r\n    function drain(address _to, uint256 _amount) external returns(bool);\r\n\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n}\r\n\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\ninterface IWhiteListOracle {\r\n\r\n    function whitelist(address _user) external returns(bool);\r\n\r\n    function blacklist(address _user) external returns(bool);\r\n\r\n    function transferGovernor(address _newGovernor) external returns(bool);\r\n\r\n    function whitelisted(address _user) external view returns(bool);\r\n\r\n}\r\n\r\ncontract GenesisSale is ReentrancyGuard {\r\n    \r\n    address public organisation;\r\n    address payable public ethWallet;\r\n    address public governor;\r\n    address public admin;\r\n\r\n    address public edgexContract;\r\n    address public ethPriceSource;\r\n    address public whitelistOracle;\r\n\r\n    uint256 public presalePrice;   // $1 = 100000000 - 8 precision\r\n\r\n    uint256 public maxCap;\r\n    uint256 public minCap;\r\n    \r\n    bool public locked;\r\n    \r\n    struct History{\r\n        uint256[] timestamps;\r\n        uint256[] amounts;\r\n        uint256[] paymentMethod;\r\n        uint256[] price;\r\n    }\r\n    \r\n    mapping(address => uint256) public allocated;\r\n    mapping(address => uint256) public purchased;\r\n    mapping(address => History) private history;\r\n\r\n    event Purchase(address indexed to, uint256 amount);\r\n    event UpdatePrice(uint256 _price);\r\n    event UpdateGovernor(address indexed _governor);\r\n    event RevokeOwnership(address indexed _newOwner);\r\n    /**\r\n     * contract address of edgex token & price oracle to be passed as an argument to constructor\r\n    */\r\n    \r\n    constructor(\r\n        address _ethWallet, \r\n        address _organisation,\r\n        address _governor,\r\n        address _admin,\r\n        address _ethSource,\r\n        address _whitelistOracle,\r\n        address _edgexContract,\r\n        uint256 _presalePrice\r\n        )\r\n    {\r\n        organisation = _organisation;\r\n        ethWallet = payable(_ethWallet);\r\n        governor = _governor;\r\n        whitelistOracle = _whitelistOracle;\r\n        admin = _admin;\r\n        edgexContract = _edgexContract;\r\n        ethPriceSource = _ethSource;\r\n        presalePrice = _presalePrice;\r\n    }\r\n    \r\n\r\n    modifier onlyAdmin(){\r\n        require(msg.sender == admin,\"Caller not admin\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyGovernor(){\r\n        require(msg.sender == governor, \"Caller not Governor\");\r\n        _;\r\n    }\r\n\r\n    modifier isZero(address _address){\r\n        require(_address != address(0),\"Invalid Address\");\r\n        _;\r\n    }\r\n\r\n    function isWhitelisted(address _user) public virtual view returns(bool){\r\n        return IWhiteListOracle(whitelistOracle).whitelisted(_user);\r\n    }\r\n    \r\n    function purchase(address _reciever) public  payable nonReentrant returns(bool){\r\n        uint256 tokens = calculate(msg.value);\r\n        require(tokens >= minCap,\"ValueError\");\r\n        require(tokens <= maxCap,\"ValueError\");\r\n        require(isWhitelisted(_reciever),\"Address not verified\");\r\n        purchased[_reciever] = SafeMath.add(purchased[_reciever],tokens);\r\n        if(locked){\r\n            allocated[_reciever] = SafeMath.add(allocated[_reciever],tokens);\r\n            ethWallet.transfer(msg.value);\r\n        }\r\n        else{\r\n            IERC20(edgexContract).transfer( _reciever,tokens);\r\n            IERC20(edgexContract).transfer(\r\n                organisation,\r\n                SafeMath.div(tokens,100)\r\n            );\r\n            ethWallet.transfer(msg.value);\r\n        }\r\n        History storage h = history[_reciever];\r\n        h.timestamps.push(block.timestamp);\r\n        h.amounts.push(tokens);\r\n        h.price.push(presalePrice);\r\n        emit Purchase(_reciever,tokens);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Used for calculate the amount of tokens purchased\r\n     * returns an uint256 which is 18 decimals of precision\r\n     * Equivalent amount of EDGX Tokens to be transferred.\r\n    */\r\n    \r\n    function calculate(uint256 _amount) private view returns(uint256){\r\n        uint256 value = uint256(fetchEthPrice());\r\n                value = SafeMath.mul(_amount,value);\r\n        uint256 tokens = SafeMath.div(value,presalePrice);\r\n        return tokens;\r\n    }\r\n    \r\n    /**\r\n     * Used to allocated tokens for purchase through other methods\r\n     * Send the amount to be allocated as 18 decimals\r\n    */\r\n    \r\n    function allocate(uint256 _tokens,address _user, uint256 _method) public onlyGovernor nonReentrant returns(bool){\r\n        require(_tokens >= minCap,\"ValueError\");\r\n        require(_tokens <= maxCap,\"ValueError\");\r\n        if(locked){\r\n          allocated[_user] = SafeMath.add(allocated[_user],_tokens);\r\n          purchased[_user] = SafeMath.add(purchased[_user],_tokens);\r\n        }\r\n        else { \r\n            IERC20(edgexContract).transfer(_user,_tokens);\r\n            IERC20(edgexContract).transfer(\r\n                organisation,\r\n                SafeMath.div(_tokens,100)\r\n            );\r\n        }\r\n        History storage h = history[_user];\r\n        h.timestamps.push(block.timestamp);\r\n        h.amounts.push(_tokens);\r\n        h.price.push(presalePrice);\r\n        h.paymentMethod.push(_method);\r\n        emit Purchase(_user,_tokens);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Reduce allocated tokens of an user from the user\"s allocated value\r\n    */\r\n    \r\n    function reduceAllocation(uint256 _tokens, address _user) public onlyAdmin returns(bool){\r\n        allocated[_user] = SafeMath.sub(allocated[_user],_tokens);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Used to transfer pre-sale tokens for other payment options\r\n    */\r\n    \r\n    function fetchPurchaseHistory(address _user) \r\n        public view \r\n        returns(\r\n            uint256[] memory _timestamp, \r\n            uint256[] memory _amounts\r\n        )\r\n    {\r\n        History storage h = history[_user];\r\n        return(h.timestamps,h.amounts);\r\n    }\r\n    \r\n\r\n     /**\r\n        @dev changing the admin of the oracle\r\n        Warning : Admin can add governor, remove governor\r\n                  and can update price.\r\n     */\r\n\r\n    function revokeOwnership(address _newOwner) public onlyAdmin isZero(_newOwner) returns(bool){\r\n        admin = payable(_newOwner);\r\n        emit RevokeOwnership(_newOwner);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * @dev withdraw the tokens from the contract by the user \r\n    */\r\n    \r\n    function claim() public nonReentrant returns(bool){\r\n        require(!locked, \"Sale Locked\");\r\n        require(allocated[msg.sender]>0, \"No Tokens Allocated\");\r\n        uint256 transferAmount = allocated[msg.sender];\r\n        allocated[msg.sender] = 0;\r\n        IERC20(edgexContract).transfer(msg.sender,transferAmount);\r\n        IERC20(edgexContract).transfer(\r\n            organisation,\r\n            SafeMath.div(transferAmount,100)\r\n            );\r\n        return true;\r\n    } \r\n\r\n    /**\r\n     * @dev fetches the price of Ethereum from chainlink oracle \r\n     */\r\n\r\n    function fetchEthPrice() public view returns (int) {\r\n        (\r\n            uint80 roundID, \r\n            int price,\r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint80 answeredInRound\r\n        ) = AggregatorV3Interface(ethPriceSource).latestRoundData();\r\n        return price;\r\n    }\r\n    \r\n    /**\r\n      * @dev update the max and min cap\r\n     */\r\n    function updateCap(uint256 _minCap, uint256 _maxCap) public onlyGovernor returns(bool){\r\n        maxCap = _maxCap;\r\n        minCap = _minCap;\r\n        return false;\r\n    }\r\n\r\n    function lockDistribution(bool _state) public onlyGovernor returns(bool){\r\n        locked = _state;\r\n        return true;\r\n    }\r\n    \r\n    function updateGovernor(address _newGovernor) public onlyGovernor isZero(_newGovernor) returns(bool){\r\n        governor = _newGovernor;\r\n        emit UpdateGovernor(_newGovernor);\r\n        return true;\r\n    }\r\n\r\n\r\n    function updateContract(address _contract) public onlyAdmin isZero(_contract) returns(bool){\r\n        edgexContract = _contract;\r\n        return true;\r\n    }\r\n\r\n    function updateEthSource(address _ethSource) public onlyAdmin isZero(_ethSource) returns(bool){\r\n        ethPriceSource = _ethSource;\r\n        return true;\r\n    }\r\n    \r\n    function updateEthWallet(address _newEthWallet) public onlyAdmin isZero(_newEthWallet) returns(bool){\r\n        ethWallet = payable(_newEthWallet);\r\n        return true;\r\n    }\r\n    \r\n    function updateOrgWallet(address _newOrgWallet) public onlyAdmin isZero(_newOrgWallet) returns(bool){\r\n        organisation = _newOrgWallet;\r\n        return true;\r\n    }\r\n    \r\n    function updatePresalePrice(uint256 _newPrice) public onlyAdmin returns(bool){\r\n        presalePrice = _newPrice;\r\n        emit UpdatePrice(_newPrice);\r\n        return true;\r\n    }\r\n\r\n    function updateWhiteListOracle(address _newOracle) public onlyAdmin isZero(_newOracle) returns(bool){\r\n        whitelistOracle = _newOracle;\r\n        return true;\r\n    }\r\n    \r\n    function drain(address _to, uint256 _amount) public onlyAdmin isZero(_to) returns(bool){\r\n        IERC20(edgexContract).transfer(_to,_amount);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_organisation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethSource\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_whitelistOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_edgexContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_presalePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"RevokeOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"UpdateGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"UpdatePrice\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_method\",\"type\":\"uint256\"}],\"name\":\"allocate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"drain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"edgexContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPriceSource\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchEthPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"fetchPurchaseHistory\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_timestamp\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"lockDistribution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"organisation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reciever\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"reduceAllocation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"revokeOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCap\",\"type\":\"uint256\"}],\"name\":\"updateCap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"updateContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ethSource\",\"type\":\"address\"}],\"name\":\"updateEthSource\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newEthWallet\",\"type\":\"address\"}],\"name\":\"updateEthWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"updateGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOrgWallet\",\"type\":\"address\"}],\"name\":\"updateOrgWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"updatePresalePrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"updateWhiteListOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GenesisSale","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000080ca65b74d1b9fad4ff796565d78ca1da558d1930000000000000000000000003d749c4be39a38658e36719925b6a791f5dee9df000000000000000000000000f344305856b5990a0e5e842f9bd688aa18158b4c000000000000000000000000bfe109a573722ca13758798cd3752982f40a44dc0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b841900000000000000000000000097f240e7d304f68723b25080fc798ead12d713d0000000000000000000000000c1f5e9185e0a84a9922acecd72a672bed3bbfb4e0000000000000000000000000000000000000000000000000000000000989680","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://93acb378fcdab99a116d3c585cea1b2e2360b154930293076452b13ed82d580f"}]}