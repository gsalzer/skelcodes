{"status":"1","message":"OK","result":[{"SourceCode":"{\"OrgV1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n}\\n\\ninterface ENS {\\n    function owner(bytes32 node) external view returns (address);\\n    function resolver(bytes32 node) external view returns (address);\\n}\\n\\ninterface ReverseRegistrar {\\n    function setName(string memory name) external returns (bytes32);\\n}\\n\\n/// A Radicle Org.\\ncontract OrgV1 {\\n    /// Object anchor.\\n    struct Anchor {\\n        // A tag that can be used to discriminate between anchor types.\\n        uint32 tag;\\n        // The hash being anchored in multihash format.\\n        bytes multihash;\\n    }\\n\\n    /// Output of namehash(\\\"addr.reverse\\\").\\n    bytes32 public constant ADDR_REVERSE_NODE =\\n        0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n    /// Org owner.\\n    address public owner;\\n\\n    /// Latest anchor for each object.\\n    mapping (bytes32 =\\u003e Anchor) public anchors;\\n\\n    // -- EVENTS --\\n\\n    /// An object was anchored.\\n    event Anchored(bytes32 id, uint32 tag, bytes multihash);\\n\\n    /// An object was unanchored.\\n    event Unanchored(bytes32 id);\\n\\n    /// The org owner changed.\\n    event OwnerChanged(address newOwner);\\n\\n    /// The org name changed.\\n    event NameChanged(string name);\\n\\n    /// Construct a new org instance, by providing an owner address.\\n    constructor(address _owner) {\\n        owner = _owner;\\n    }\\n\\n    // -- OWNER METHODS --\\n\\n    /// Functions that can only be called by the org owner.\\n    modifier ownerOnly {\\n        require(msg.sender == owner, \\\"Org: Only the org owner can perform this action\\\");\\n        _;\\n    }\\n\\n    /// Set the org owner.\\n    function setOwner(address newOwner) public ownerOnly {\\n        owner = newOwner;\\n        emit OwnerChanged(newOwner);\\n    }\\n\\n    /// Anchor an object to the org, by providing its hash in *multihash* format.\\n    /// This method should be used for adding new objects to the org, as well as\\n    /// updating existing ones.\\n    ///\\n    /// The `id` parameter is the unique identifier of the object being anchored.\\n    ///\\n    /// The `tag` parameter may be used to discriminate between different types\\n    /// of anchors.\\n    function anchor(\\n        bytes32 id,\\n        uint32 tag,\\n        bytes calldata multihash\\n    ) public ownerOnly {\\n        anchors[id] = Anchor(tag, multihash);\\n        emit Anchored(id, tag, multihash);\\n    }\\n\\n    /// Unanchor an object from the org.\\n    function unanchor(bytes32 id) public ownerOnly {\\n        delete anchors[id];\\n        emit Unanchored(id);\\n    }\\n\\n    /// Transfer funds from this contract to the owner contract.\\n    function recoverFunds(IERC20 token, uint256 amount) public ownerOnly returns (bool) {\\n        return token.transfer(msg.sender, amount);\\n    }\\n\\n    /// Configures the caller\\u0027s reverse ENS record to point to the provided name.\\n    /// The address of the ENS registry is passed as the second parameter.\\n    function setName(string memory name, ENS ens) public ownerOnly returns (bytes32) {\\n        ReverseRegistrar registrar = ReverseRegistrar(ens.owner(ADDR_REVERSE_NODE));\\n        bytes32 node = registrar.setName(name);\\n        emit NameChanged(name);\\n\\n        return node;\\n    }\\n}\\n\"},\"OrgV1Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OrgV1.sol\\\";\\n\\ninterface SafeFactory {\\n    function createProxy(address masterCopy, bytes memory data) external returns (Safe);\\n}\\n\\ninterface Safe {\\n    function setup(\\n        address[] calldata _owners,\\n        uint256 _threshold,\\n        address to,\\n        bytes calldata data,\\n        address fallbackHandler,\\n        address paymentToken,\\n        uint256 payment,\\n        address payable paymentReceiver\\n    ) external;\\n\\n    function getThreshold() external returns (uint256);\\n    function isOwner(address owner) external returns (bool);\\n}\\n\\n/// Factory for orgs.\\ncontract OrgV1Factory {\\n    SafeFactory immutable safeFactory;\\n    address immutable safeMasterCopy;\\n\\n    /// An org was created. Includes the org and safe address.\\n    event OrgCreated(address org, address safe);\\n\\n    constructor(\\n        address _safeFactory,\\n        address _safeMasterCopy\\n    ) {\\n        safeFactory = SafeFactory(_safeFactory);\\n        safeMasterCopy = _safeMasterCopy;\\n    }\\n\\n    /// Create an org with a specified owner.\\n    function createOrg(address owner) public returns (OrgV1 org) {\\n        org = new OrgV1(address(owner));\\n        emit OrgCreated(address(org), address(owner));\\n    }\\n\\n    /// Create an org with multiple owners, via a multi-sig contract. The threshold specifies\\n    /// how many signatures are required to transact.\\n    function createOrg(address[] memory owners, uint256 threshold) public returns (OrgV1 org) {\\n        require(owners.length \\u003e 0, \\\"OrgFactory: owners must not be empty\\\");\\n        require(threshold \\u003e 0, \\\"OrgFactory: threshold must be greater than zero\\\");\\n        require(threshold \\u003c= owners.length, \\\"OrgFactory: threshold must be lesser than or equal to owner count\\\");\\n\\n        // Deploy safe.\\n        Safe safe = safeFactory.createProxy(safeMasterCopy, new bytes(0));\\n        safe.setup(owners, threshold, address(0), new bytes(0), address(0), address(0), 0, payable(address(0)));\\n\\n        // Deploy org\\n        org = new OrgV1(address(safe));\\n        emit OrgCreated(address(org), address(safe));\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safeFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safeMasterCopy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"org\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"safe\",\"type\":\"address\"}],\"name\":\"OrgCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"createOrg\",\"outputs\":[{\"internalType\":\"contract OrgV1\",\"name\":\"org\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"createOrg\",\"outputs\":[{\"internalType\":\"contract OrgV1\",\"name\":\"org\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OrgV1Factory","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"00000000000000000000000076e2cfc1f5fa8f6a5b3fc4c8f4788f0116861f9b00000000000000000000000034cfac646f301356faa8b21e94227e3583fe3f5f","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://877b5515aea5cd8e00f846a107d49111c4073fdfec7ab57012f4b87abbb322ec"}]}