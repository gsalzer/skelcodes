{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^ 0.5.1;\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns(bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    struct ExcludeAddress {\r\n        bool isExist;\r\n    }\r\n    // Frontrans and Sniper bots will be blocked\r\n    mapping(address => ExcludeAddress) public blackList;\r\n    // only ICO contract and owner able to transfers before listing to uniswap\r\n    mapping(address => ExcludeAddress) public whiteList;\r\n    // ICO contract and Rewards wallet will be send without tax\r\n    mapping(address => ExcludeAddress) public taxFree;\r\n\r\n    // blocked transfers (exclude whiteList)\r\n    // to avoid fake listing not from the team\r\n    bool public isWhiteListOnly = true;\r\n    // the address that will receive taxes and send out rewards\r\n    address public rewardsWallet;\r\n\r\n    // Token params\r\n    string public constant name = \"msgt.io\";\r\n    string public constant symbol = \"MSGT\";\r\n    uint public constant decimals = 18;\r\n    uint constant total = 53750;\r\n    uint256 private _totalSupply;\r\n    uint lastCheck = now;\r\n    uint periodRebalance = 12 hours;\r\n    // -- Token params\r\n\r\n    //Taxes\r\n    uint public taxPercent = 6;\r\n    uint public taxPercentSell = 6;\r\n    uint public taxPercentBuy = 6;\r\n    \r\n    address public liqAddress = address(0);\r\n    // baseBalance - this is the balance of the reward wallet, to which the wallet will be rebalanced in case of exceeding +-10%\r\n    uint constant public baseBalance = 3500 * 10 ** decimals;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Rebalance(uint256 balance);\r\n    event Tax(uint256 taxedAmount);\r\n\r\n    constructor() public {\r\n        _mint(msg.sender, total * 10 ** decimals);\r\n    }\r\n\r\n    function totalSupply() public view returns(uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view returns(uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public returns(bool) {\r\n        _taxTransfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns(uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public returns(bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns(bool) {\r\n        _taxTransfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns(bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns(bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _taxTransfer(address _sender, address _recipient, uint256 _amount) internal returns(bool) {\r\n        require(!blackList[_sender].isExist, 'Address blocked');\r\n        require(!isWhiteListOnly || whiteList[_sender].isExist, 'White List only'); // unlock after listing\r\n\r\n        if (taxFree[_sender].isExist) {\r\n            _transfer(_sender, _recipient, _amount);\r\n        } else {\r\n            // calc tax\r\n            uint tax;\r\n            if(_sender == liqAddress) {tax = taxPercentBuy;} // buy token\r\n            else if(_recipient == liqAddress) {tax = taxPercentSell;} // sell token\r\n            else {tax = taxPercent;} // Wallet to Wallet\r\n            \r\n            uint _taxedAmount = _amount.mul(tax).div(100);\r\n            uint _transferedAmount = _amount.sub(_taxedAmount);\r\n\r\n            _transfer(_sender, rewardsWallet, _taxedAmount); // tax to rewardsWallet\r\n            _transfer(_sender, _recipient, _transferedAmount); // amount - tax to recipient\r\n            emit Tax(_taxedAmount);\r\n        }\r\n\r\n        rebalanceRW();\r\n    }\r\n\r\n    // If the balance of the reward changes from the base value by 10%, its balance is returned to the base value.\r\n    // In this case, the extra tokens are burned, and the shortage is minted.\r\n    function rebalanceRW () public {\r\n        if (isWhiteListOnly || lastCheck > now - periodRebalance) {\r\n            return;\r\n        }\r\n\r\n        lastCheck = now; // cached time of rebalance\r\n        uint balance = balanceOf(rewardsWallet);\r\n        // 10% constant\r\n        if (balance < (baseBalance.mul(90)).div(100)) { // positive\r\n            emit Rebalance(balance);\r\n            _balances[rewardsWallet] = baseBalance;\r\n            _totalSupply = _totalSupply.add(baseBalance - balance);\r\n        } else if (balance > (baseBalance.mul(110)).div(100)) { // negative\r\n            emit Rebalance(balance);\r\n            _balances[rewardsWallet] = baseBalance;\r\n            _totalSupply = _totalSupply.sub(balance - baseBalance);\r\n        }\r\n    }\r\n\r\n    // OWNER utils\r\n    function toggleWhiteList(address addr) public onlyOwner {\r\n        whiteList[addr].isExist = !whiteList[addr].isExist;\r\n    }\r\n    function toggleTaxFeeList(address addr) public onlyOwner {\r\n        taxFree[addr].isExist = !taxFree[addr].isExist;\r\n    }\r\n\r\n    function toggleBlackList(address addr) public onlyOwner {\r\n        blackList[addr].isExist = !blackList[addr].isExist;\r\n    }\r\n    function toggleIsWhiteListOnly() public onlyOwner {\r\n        isWhiteListOnly = !isWhiteListOnly;\r\n    }\r\n\r\n    function changePercentOfTax(uint percent) public onlyOwner {\r\n        taxPercent = percent;\r\n    }\r\n    function changePercentOfTaxSell(uint percent) public onlyOwner {\r\n        taxPercentSell = percent;\r\n    }\r\n    function changePercentOfTaxBuy(uint percent) public onlyOwner {\r\n        taxPercentBuy = percent;\r\n    }\r\n\r\n    // When change the reward wallet, tokens are sent from the old wallet to the new one.\r\n    // Thus, an extra balance is not possible when changing wallets.\r\n    function changeRewardsWallet(address addr) public onlyOwner {\r\n        if(rewardsWallet != address(0)){\r\n            _transfer(rewardsWallet, addr, _balances[rewardsWallet]);   \r\n        }\r\n        taxFree[rewardsWallet].isExist = false;\r\n        taxFree[addr].isExist = true;\r\n        rewardsWallet = addr;\r\n    }\r\n\r\n    // need after listing only\r\n    function blockSell(address _liqAddress) public onlyOwner {\r\n        changeLiqAddress(_liqAddress);\r\n        isWhiteListOnly = true;\r\n    }\r\n    function changeLiqAddress(address _liqAddress) public onlyOwner {\r\n        liqAddress = _liqAddress;\r\n        whiteList[liqAddress].isExist = true;\r\n    }\r\n    // Tokens of adresess which was blocked send to reward wallet\r\n    function sendBlockedTokensToRw(address addr) public onlyOwner {\r\n        require(blackList[addr].isExist, 'Address is not blocked');\r\n        _transfer(addr, rewardsWallet, _balances[addr]);\r\n    }\r\n}\r\n\r\ncontract Crowdsale {\r\n    using SafeMath for uint256;\r\n    address payable owner;\r\n    address me = address(this);\r\n    uint sat = 1e18;\r\n    struct IsExist {bool isExist;}\r\n    mapping(address => IsExist) public whiteList;\r\n    // \r\n    // *** Config ***\r\n    uint startIco = 1621260000;\r\n    // uint startIco = now;\r\n    uint stopIco = startIco + 48 hours;\r\n\r\n    uint countBy1EthIfWL = 25; // 1ETH -> 25 MSGT\r\n    uint countBy1EthIfNotWL = 24; // 1 ETH -> 24 MSGT\r\n    uint amountWL = 10500 * sat; // amount for WL users\r\n    uint amountNotWL = 10500 * sat; // amount for not WL users\r\n    uint maxTokensToOnceHandWl = 75 * sat;\r\n    uint maxTokensToOnceHandNoWl = 360 * sat;\r\n    // --- Config ---\r\n    ERC20 token = new ERC20();\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n\r\n        token.toggleWhiteList(address(this));\r\n        token.toggleTaxFeeList(address(this));\r\n\r\n        token.toggleWhiteList(owner);\r\n        token.toggleTaxFeeList(owner);\r\n\r\n        token.transfer(owner, token.totalSupply() - (amountWL + amountNotWL));\r\n        token.transferOwnership(owner);\r\n    }\r\n\r\n    function () external payable {\r\n        require(startIco < now && now < stopIco, \"Period error\");\r\n        uint amount = msg.value.mul(getPrice());\r\n        bool userIsWl = whiteList[msg.sender].isExist;\r\n        require(token.balanceOf(msg.sender) + amount <= (userIsWl ? maxTokensToOnceHandWl : maxTokensToOnceHandNoWl), \"The purchase limit of tokens has been exceeded\");\r\n        require(amount <= token.balanceOf(address(this)), \"Infucient token balance in ICO\");\r\n        uint leftTokens = userIsWl ? amountWL : amountNotWL;\r\n        require(amount <= leftTokens, \"Infucient token balance in ICO for group\");\r\n        token.transfer(msg.sender, amount);\r\n        if(userIsWl){ amountWL -= amount; } \r\n        else { amountNotWL -= amount; }\r\n    }\r\n\r\n    \r\n    modifier onlyOw() {\r\n        require(msg.sender == owner, \"You is not owner\");\r\n        _;\r\n    }\r\n    // OWNER ONLY\r\n    \r\n    function pushWhiteList(address[] memory addressess) public onlyOw {\r\n        for (uint i = 0; i < addressess.length; i++) {\r\n            whiteList[addressess[i]].isExist = true;\r\n        }\r\n    }\r\n    \r\n    function manualGetETH () public payable onlyOw {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    function getLeftTokens () public onlyOw {\r\n        token.transfer(owner, token.balanceOf(address(this)));\r\n    }\r\n    // run after 1h \r\n    function sendAmountWlToNoWL () public onlyOw {\r\n        amountNotWL += amountWL;\r\n        amountWL = 0;\r\n    }\r\n    \r\n\r\n    //--- end OWNER ONLY\r\n    \r\n\r\n    function getPrice() public view returns(uint) {\r\n        return (whiteList[msg.sender].isExist ? countBy1EthIfWL : countBy1EthIfNotWL);\r\n    }\r\n\r\n    // Utils\r\n    function getStartICO() public view returns(uint) {\r\n        return (startIco - now) / 60;\r\n    }\r\n    function getOwner() public view returns(address) {\r\n        return owner;\r\n    }\r\n    function getStopIco() public view returns(uint) {\r\n        return (stopIco - now) / 60;\r\n    }\r\n    function tokenAddress() public view returns(address) {\r\n        return address(token);\r\n    }\r\n    function IcoDeposit() public view returns(uint) {\r\n        return token.balanceOf(address(this)) / sat;\r\n    }\r\n    function myBalancex10() public view returns(uint) {\r\n        return token.balanceOf(msg.sender) / 1e17;\r\n    }\r\n    function myBalancex1000() public view returns(uint) {\r\n        return token.balanceOf(msg.sender) / 1e15;\r\n    }\r\n    function leftAmountForWL () public view returns(uint) {\r\n        return amountWL;\r\n    }\r\n    function leftAmountForNotWL () public view returns(uint) {\r\n        return amountNotWL;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"IcoDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getLeftTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStartICO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStopIco\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leftAmountForNotWL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leftAmountForWL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"manualGetETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myBalancex10\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myBalancex1000\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addressess\",\"type\":\"address[]\"}],\"name\":\"pushWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendAmountWlToNoWL\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Crowdsale","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://dc880ec326dd0d3fae7b07af9789f1843da07d081313ee00d015bb6959dc263a"}]}