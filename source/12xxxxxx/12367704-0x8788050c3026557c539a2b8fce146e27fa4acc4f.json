{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/bugman/Projects/idle/idle-contracts/contracts/interfaces/CERC20.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface CERC20 {\\n  function mint(uint256 mintAmount) external returns (uint256);\\n  function comptroller() external view returns (address);\\n  function redeem(uint256 redeemTokens) external returns (uint256);\\n  function exchangeRateStored() external view returns (uint256);\\n  function supplyRatePerBlock() external view returns (uint256);\\n\\n  function borrowRatePerBlock() external view returns (uint256);\\n  function totalReserves() external view returns (uint256);\\n  function getCash() external view returns (uint256);\\n  function totalBorrows() external view returns (uint256);\\n  function reserveFactorMantissa() external view returns (uint256);\\n  function interestRateModel() external view returns (address);\\n\\n  function underlying() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/home/bugman/Projects/idle/idle-contracts/contracts/interfaces/FuseCERC20.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface FuseCERC20 {\\n  function totalReserves() external view returns (uint256);\\n  function getCash() external view returns (uint256);\\n  function totalBorrows() external view returns (uint256);\\n  function reserveFactorMantissa() external view returns (uint256);\\n  function interestRateModel() external view returns (address);\\n  function underlying() external view returns (address);\\n  function totalFuseFees() external view returns(uint256);\\n  function totalAdminFees() external view returns(uint256);\\n  function fuseFeeMantissa() external view returns(uint256);\\n  function adminFeeMantissa() external view returns(uint256);\\n}\\n\"\r\n    },\r\n    \"/home/bugman/Projects/idle/idle-contracts/contracts/interfaces/ILendingProtocol.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface ILendingProtocol {\\n  function mint() external returns (uint256);\\n  function redeem(address account) external returns (uint256);\\n  function nextSupplyRate(uint256 amount) external view returns (uint256);\\n  function getAPR() external view returns (uint256);\\n  function getPriceInToken() external view returns (uint256);\\n  function token() external view returns (address);\\n  function underlying() external view returns (address);\\n  function availableLiquidity() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/home/bugman/Projects/idle/idle-contracts/contracts/interfaces/WhitePaperInterestRateModel.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\n\\ninterface WhitePaperInterestRateModel {\\n  function getBorrowRate(uint256 cash, uint256 borrows, uint256 _reserves) external view returns (uint256, uint256);\\n  function getSupplyRate(uint256 cash, uint256 borrows, uint256 reserves, uint256 reserveFactorMantissa) external view returns (uint256);\\n  function multiplier() external view returns (uint256);\\n  function baseRate() external view returns (uint256);\\n  function blocksPerYear() external view returns (uint256);\\n  function dsrPerBlock() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/home/bugman/Projects/idle/idle-contracts/contracts/wrappers/IdleCompoundLike.sol\": {\r\n      \"content\": \"/**\\n * @title: Cream DAI wrapper\\n * @summary: Used for interacting with Cream Finance. Has\\n *           a common interface with all other protocol wrappers.\\n *           This contract holds assets only during a tx, after tx it should be empty\\n * @author: Idle Labs Inc., idle.finance\\n */\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/ILendingProtocol.sol\\\";\\nimport \\\"../interfaces/CERC20.sol\\\";\\nimport \\\"../interfaces/WhitePaperInterestRateModel.sol\\\";\\n\\n// This strategy is a modified version of the strategy made by Sunny with few improvements.\\n// This contract should be deployed with a minimal proxy factory\\ncontract IdleCompoundLike is ILendingProtocol {\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n\\n  // protocol token (cTokenLike) address\\n  address public token;\\n  // underlying token (token eg DAI) address\\n  address public underlying;\\n  address public idleToken;\\n  uint256 public blocksPerYear;\\n  address public owner;\\n\\n  /**\\n   * @param _token : cTokenLike address\\n   * @param _idleToken : idleToken address\\n   * @param _owner : contract owner (for eventually setting blocksPerYear)\\n   */\\n  function initialize(address _token, address _idleToken, address _owner) public {\\n    require(token == address(0), 'cTokenLike: already initialized');\\n    require(_token != address(0), 'cTokenLike: addr is 0');\\n\\n    token = _token;\\n    owner = _owner;\\n    underlying = CERC20(_token).underlying();\\n    idleToken = _idleToken;\\n    blocksPerYear = 2371428;\\n    IERC20(underlying).safeApprove(_token, uint256(-1));\\n  }\\n\\n  /**\\n   * Throws if called by any account other than IdleToken contract.\\n   */\\n  modifier onlyIdle() {\\n    require(msg.sender == idleToken, \\\"Ownable: caller is not IdleToken\\\");\\n    _;\\n  }\\n\\n  /**\\n  * Throws if called by any account other than the owner.\\n  */\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"Ownable: caller is not IdleToken\\\");\\n    _;\\n  }\\n\\n  /**\\n   * sets blocksPerYear address\\n   *\\n   * @param _blocksPerYear : avg blocks per year\\n   */\\n  function setBlocksPerYear(uint256 _blocksPerYear)\\n    external onlyOwner {\\n      require((blocksPerYear = _blocksPerYear) != 0, \\\"_blocksPerYear is 0\\\");\\n  }\\n\\n  /**\\n   * Calculate next supply rate for Compound, given an `_amount` supplied\\n   *\\n   * @param _amount : new underlying amount supplied (eg DAI)\\n   * @return : yearly net rate\\n   */\\n  function nextSupplyRate(uint256 _amount)\\n    external view\\n    returns (uint256) {\\n      CERC20 cToken = CERC20(token);\\n      WhitePaperInterestRateModel white = WhitePaperInterestRateModel(CERC20(token).interestRateModel());\\n      uint256 ratePerBlock = white.getSupplyRate(\\n        cToken.getCash().add(_amount),\\n        cToken.totalBorrows(),\\n        cToken.totalReserves(),\\n        cToken.reserveFactorMantissa()\\n      );\\n      return ratePerBlock.mul(blocksPerYear).mul(100);\\n  }\\n\\n  /**\\n   * @return current price of cTokenLike token\\n   */\\n  function getPriceInToken()\\n    external view\\n    returns (uint256) {\\n      return CERC20(token).exchangeRateStored();\\n  }\\n\\n  /**\\n   * @return current apr\\n   */\\n  function getAPR()\\n    external view\\n    returns (uint256) {\\n      // return nextSupplyRate(0);\\n      // more efficient\\n      return CERC20(token).supplyRatePerBlock().mul(blocksPerYear).mul(100);\\n  }\\n\\n  /**\\n   * Gets all underlying tokens in this contract and mints cTokenLike Tokens\\n   * tokens are then transferred to msg.sender\\n   * NOTE: underlying tokens needs to be sent here before calling this\\n   *\\n   * @return cTokenLike Tokens minted\\n   */\\n  function mint()\\n    external onlyIdle\\n    returns (uint256 crTokens) {\\n      uint256 balance = IERC20(underlying).balanceOf(address(this));\\n      if (balance != 0) {\\n        IERC20 _token = IERC20(token);\\n        require(CERC20(token).mint(balance) == 0, \\\"Error minting crTokens\\\");\\n        crTokens = _token.balanceOf(address(this));\\n        _token.safeTransfer(msg.sender, crTokens);\\n      }\\n  }\\n\\n  /**\\n   * Gets all cTokenLike in this contract and redeems underlying tokens.\\n   * underlying tokens are then transferred to `_account`\\n   * NOTE: cTokenLike needs to be sent here before calling this\\n   *\\n   * @return underlying tokens redeemd\\n   */\\n  function redeem(address _account)\\n    external onlyIdle\\n    returns (uint256 tokens) {\\n      require(CERC20(token).redeem(IERC20(token).balanceOf(address(this))) == 0, \\\"Error redeeming crTokens\\\");\\n      IERC20 _underlying = IERC20(underlying);\\n      tokens = _underlying.balanceOf(address(this));\\n      _underlying.safeTransfer(_account, tokens);\\n  }\\n\\n  /**\\n   * Get the underlying balance on the lending protocol\\n   *\\n   * @return underlying tokens available\\n   */\\n  function availableLiquidity() external view returns (uint256) {\\n    return CERC20(token).getCash();\\n  }\\n}\\n\"\r\n    },\r\n    \"/home/bugman/Projects/idle/idle-contracts/contracts/wrappers/IdleFuse.sol\": {\r\n      \"content\": \"/**\\n * @title: FUSE RAI wrapper\\n * @summary: Used for interacting with the Fuse protocol.\\n *           This contract holds assets only during a tx, after tx it should be empty\\n * @author: Idle Labs Inc., idle.finance\\n */\\npragma solidity 0.5.16;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/ILendingProtocol.sol\\\";\\nimport \\\"../interfaces/FuseCERC20.sol\\\";\\nimport \\\"../interfaces/WhitePaperInterestRateModel.sol\\\";\\nimport \\\"./IdleCompoundLike.sol\\\";\\n\\n// This contract should be deployed with a minimal proxy factory\\ncontract IdleFuse is IdleCompoundLike {\\n  using SafeMath for uint256;\\n\\n  /**\\n   * Calculate next supply rate for Fuse, given an `_amount` supplied\\n   *\\n   * @param _amount : new underlying amount supplied\\n   * @return : yearly net rate\\n   */\\n  function nextSupplyRate(uint256 _amount)\\n    external view\\n    returns (uint256) {\\n      FuseCERC20 cToken = FuseCERC20(token);\\n      WhitePaperInterestRateModel white = WhitePaperInterestRateModel(FuseCERC20(token).interestRateModel());\\n      uint256 ratePerBlock = white.getSupplyRate(\\n        cToken.getCash().add(_amount),\\n        cToken.totalBorrows(),\\n        cToken.totalReserves().add(cToken.totalFuseFees()).add(cToken.totalAdminFees()),\\n        cToken.reserveFactorMantissa().add(cToken.fuseFeeMantissa()).add(cToken.adminFeeMantissa())\\n      );\\n      return ratePerBlock.mul(blocksPerYear).mul(100);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"availableLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"blocksPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPriceInToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"idleToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_idleToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"crTokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"nextSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocksPerYear\",\"type\":\"uint256\"}],\"name\":\"setBlocksPerYear\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"IdleFuse","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}