{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"src/factories/ERC20GemTokenFactory.sol:ERC20GemTokenFactory\": {\r\n        \"GovernanceLib\": \"0x8B4207A13a5a13bDb2bBf15c137820e61e3c4AAc\",\r\n        \"Strings\": \"0x98ccd9cb27398a6595f15cbc4b63ac525b942aad\",\r\n        \"SafeMath\": \"0xD34a551B4a262230a373D376dDf8aADb2B0D49FD\",\r\n        \"ProposalsLib\": \"0x54812b41409912bd065e9d3920ce196ff9bfc995\",\r\n        \"Create2\": \"0xa511e209a01e27d134b4f564263f7db8fcbdeba6\"\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"src/access/Controllable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IControllable.sol\\\";\\n\\nabstract contract Controllable is IControllable {\\n    mapping(address => bool) _controllers;\\n\\n    /**\\n     * @dev Throws if called by any account not in authorized list\\n     */\\n    modifier onlyController() {\\n        require(\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\n            \\\"Controllable: caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function _addController(address _controller) internal {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Add an address allowed to control this contract\\n     */\\n    function addController(address _controller) external override onlyController {\\n        _controllers[_controller] = true;\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function isController(address _address) external view override returns (bool allowed) {\\n        allowed = _controllers[_address];\\n    }\\n\\n    /**\\n     * @dev Check if this address is a controller\\n     */\\n    function relinquishControl() external view override onlyController {\\n        _controllers[msg.sender];\\n    }\\n}\\n\"\r\n    },\r\n    \"src/factories/ERC20GemTokenFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../access/Controllable.sol\\\";\\nimport \\\"../pool/NFTGemPool.sol\\\";\\nimport \\\"../libs/Create2.sol\\\";\\nimport \\\"../tokens/ERC20.sol\\\";\\nimport \\\"../tokens/ERC20WrappedGem.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC20GemTokenFactory.sol\\\";\\nimport \\\"../interfaces/IERC20WrappedGem.sol\\\";\\n\\ncontract ERC20GemTokenFactory is Controllable, IERC20GemTokenFactory {\\n    address private operator;\\n\\n    mapping(uint256 => address) private _getItem;\\n    address[] private _allItems;\\n\\n    constructor() {\\n        _addController(msg.sender);\\n    }\\n\\n    /**\\n     * @dev get the quantized token for this\\n     */\\n    function getItem(uint256 _symbolHash) external view override returns (address gemPool) {\\n        gemPool = _getItem[_symbolHash];\\n    }\\n\\n    /**\\n     * @dev get the quantized token for this\\n     */\\n    function allItems(uint256 idx) external view override returns (address gemPool) {\\n        gemPool = _allItems[idx];\\n    }\\n\\n    /**\\n     * @dev number of quantized addresses\\n     */\\n    function allItemsLength() external view override returns (uint256) {\\n        return _allItems.length;\\n    }\\n\\n    /**\\n     * @dev deploy a new erc20 token using create2\\n     */\\n    function createItem(\\n        string memory tokenSymbol,\\n        string memory tokenName,\\n        address poolAddress,\\n        address tokenAddress,\\n        uint8 decimals\\n    ) external override onlyController returns (address payable gemToken) {\\n        bytes32 salt = keccak256(abi.encodePacked(tokenSymbol));\\n        require(_getItem[uint256(salt)] == address(0), \\\"GEMTOKEN_EXISTS\\\"); // single check is sufficient\\n        require(poolAddress != address(0), \\\"INVALID_POOL\\\");\\n\\n        // create the quantized erc20 token using create2, which lets us determine the\\n        // quantized erc20 address of a token without interacting with the contract itself\\n        bytes memory bytecode = type(ERC20WrappedGem).creationCode;\\n\\n        // use create2 to deploy the quantized erc20 contract\\n        gemToken = payable(Create2.deploy(0, salt, bytecode));\\n\\n        // initialize the erc20 contract with the relevant addresses which it proxies\\n        IERC20WrappedGem(gemToken).initialize(tokenSymbol, tokenName, poolAddress, tokenAddress, decimals);\\n\\n        // insert the erc20 contract address into lists - one that maps source to quantized,\\n        _getItem[uint256(salt)] = gemToken;\\n        _allItems.push(gemToken);\\n\\n        // emit an event about the new pool being created\\n        emit ERC20GemTokenCreated(gemToken, poolAddress, tokenSymbol, ERC20(gemToken).symbol());\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IControllable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface IControllable {\\n    event ControllerAdded(address indexed contractAddress, address indexed controllerAddress);\\n    event ControllerRemoved(address indexed contractAddress, address indexed controllerAddress);\\n\\n    function addController(address controller) external;\\n\\n    function isController(address controller) external view returns (bool);\\n\\n    function relinquishControl() external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IERC20GemTokenFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface IERC20GemTokenFactory {\\n    /**\\n     * @dev emitted when a new gem pool has been added to the system\\n     */\\n    event ERC20GemTokenCreated(\\n        address tokenAddress,\\n        address poolAddress,\\n        string tokenSymbol,\\n        string poolSymbol\\n    );\\n\\n    function getItem(uint256 _symbolHash) external view returns (address);\\n\\n    function allItems(uint256 idx) external view returns (address);\\n\\n    function allItemsLength() external view returns (uint256);\\n\\n    function createItem(\\n        string memory tokenSymbol,\\n        string memory tokenName,\\n        address poolAddress,\\n        address tokenAddress,\\n        uint8 decimals\\n    ) external returns (address payable);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IERC20WrappedGem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20WrappedGem {\\n    function wrap(uint256 quantity) external;\\n\\n    function unwrap(uint256 quantity) external;\\n\\n    event Wrap(address indexed account, uint256 quantity);\\n    event Unwrap(address indexed account, uint256 quantity);\\n\\n    function initialize(\\n        string memory tokenSymbol,\\n        string memory tokenName,\\n        address poolAddress,\\n        address tokenAddress,\\n        uint8 decimals\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/INFTGemFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface INFTGemFeeManager {\\n\\n    event DefaultFeeDivisorChanged(address indexed operator, uint256 oldValue, uint256 value);\\n    event FeeDivisorChanged(address indexed operator, address indexed token, uint256 oldValue, uint256 value);\\n    event ETHReceived(address indexed manager, address sender, uint256 value);\\n    event LiquidityChanged(address indexed manager, uint256 oldValue, uint256 value);\\n\\n    function liquidity(address token) external view returns (uint256);\\n\\n    function defaultLiquidity() external view returns (uint256);\\n\\n    function setDefaultLiquidity(uint256 _liquidityMult) external returns (uint256);\\n\\n    function feeDivisor(address token) external view returns (uint256);\\n\\n    function defaultFeeDivisor() external view returns (uint256);\\n\\n    function setFeeDivisor(address token, uint256 _feeDivisor) external returns (uint256);\\n\\n    function setDefaultFeeDivisor(uint256 _feeDivisor) external returns (uint256);\\n\\n    function ethBalanceOf() external view returns (uint256);\\n\\n    function balanceOF(address token) external view returns (uint256);\\n\\n    function transferEth(address payable recipient, uint256 amount) external;\\n\\n    function transferToken(\\n        address token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n}\\n\"\r\n    },\r\n    \"src/interfaces/INFTGemGovernor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemGovernor {\\n    event GovernanceTokenIssued(address indexed receiver, uint256 amount);\\n    event FeeUpdated(address indexed proposal, address indexed token, uint256 newFee);\\n    event AllowList(address indexed proposal, address indexed token, bool isBanned);\\n    event ProjectFunded(address indexed proposal, address indexed receiver, uint256 received);\\n    event StakingPoolCreated(\\n        address indexed proposal,\\n        address indexed pool,\\n        string symbol,\\n        string name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffStep,\\n        uint256 maxClaims,\\n        address alllowedToken\\n    );\\n\\n    function initialize(\\n        address _multitoken,\\n        address _factory,\\n        address _feeTracker,\\n        address _proposalFactory,\\n        address _swapHelper\\n    ) external;\\n\\n    function createProposalVoteTokens(uint256 proposalHash) external;\\n\\n    function destroyProposalVoteTokens(uint256 proposalHash) external;\\n\\n    function executeProposal(address propAddress) external;\\n\\n    function issueInitialGovernanceTokens(address receiver) external returns (uint256);\\n\\n    function maybeIssueGovernanceToken(address receiver) external returns (uint256);\\n\\n    function issueFuelToken(address receiver, uint256 amount) external returns (uint256);\\n\\n    function createPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createSystemPool(\\n        string memory symbol,\\n        string memory name,\\n        uint256 ethPrice,\\n        uint256 minTime,\\n        uint256 maxTime,\\n        uint256 diffstep,\\n        uint256 maxClaims,\\n        address allowedToken\\n    ) external returns (address);\\n\\n    function createNewPoolProposal(\\n        address,\\n        string memory,\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external returns (address);\\n\\n    function createChangeFeeProposal(\\n        address,\\n        string memory,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (address);\\n\\n    function createFundProjectProposal(\\n        address,\\n        string memory,\\n        address,\\n        string memory,\\n        uint256\\n    ) external returns (address);\\n\\n    function createUpdateAllowlistProposal(\\n        address,\\n        string memory,\\n        address,\\n        address,\\n        bool\\n    ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/INFTGemMultiToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface INFTGemMultiToken {\\n    // called by controller to mint a claim or a gem\\n    function mint(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    // called by controller to burn a claim\\n    function burn(\\n        address account,\\n        uint256 tokenHash,\\n        uint256 amount\\n    ) external;\\n\\n    function allHeldTokens(address holder, uint256 _idx) external view returns (uint256);\\n\\n    function allHeldTokensLength(address holder) external view returns (uint256);\\n\\n    function allTokenHolders(uint256 _token, uint256 _idx) external view returns (address);\\n\\n    function allTokenHoldersLength(uint256 _token) external view returns (uint256);\\n\\n    function totalBalances(uint256 _id) external view returns (uint256);\\n\\n    function allProxyRegistries(uint256 _idx) external view returns (address);\\n\\n    function allProxyRegistriesLength() external view returns (uint256);\\n\\n    function addProxyRegistry(address registry) external;\\n\\n    function removeProxyRegistryAt(uint256 index) external;\\n\\n    function getRegistryManager() external view returns (address);\\n\\n    function setRegistryManager(address newManager) external;\\n\\n    function lock(uint256 token, uint256 timeframe) external;\\n\\n    function unlockTime(address account, uint256 token) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/INFTGemPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Interface for a Bitgem staking pool\\n */\\ninterface INFTGemPool {\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ETH\\n     */\\n    event NFTGemClaimCreated(address account, address pool, uint256 claimHash, uint256 length, uint256 quantity, uint256 amountPaid);\\n\\n    /**\\n     * @dev Event generated when an NFT claim is created using ERC20 tokens\\n     */\\n    event NFTGemERC20ClaimCreated(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 length,\\n        address token,\\n        uint256 quantity,\\n        uint256 conversionRate\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        uint256 amountPaid,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when an NFT claim is redeemed\\n     */\\n    event NFTGemERC20ClaimRedeemed(\\n        address account,\\n        address pool,\\n        uint256 claimHash,\\n        address token,\\n        uint256 ethPrice,\\n        uint256 tokenAmount,\\n        uint256 feeAssessed\\n    );\\n\\n    /**\\n     * @dev Event generated when a gem is created\\n     */\\n    event NFTGemCreated(address account, address pool, uint256 claimHash, uint256 gemHash, uint256 quantity);\\n\\n    function setMultiToken(address token) external;\\n\\n    function setGovernor(address addr) external;\\n\\n    function setFeeTracker(address addr) external;\\n\\n    function setSwapHelper(address addr) external;\\n\\n    function mintGenesisGems(address creator, address funder) external;\\n\\n    function createClaim(uint256 timeframe) external payable;\\n\\n    function createClaims(uint256 timeframe, uint256 count) external payable;\\n\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external;\\n\\n    function createERC20Claims(address erc20token, uint256 tokenAmount, uint256 count) external;\\n\\n    function collectClaim(uint256 claimHash) external;\\n\\n    function initialize(\\n        string memory,\\n        string memory,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/INFTGemPoolData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface INFTGemPoolData {\\n\\n    // pool is inited with these parameters. Once inited, all\\n    // but ethPrice are immutable. ethPrice only increases. ONLY UP\\n    function symbol() external view returns (string memory);\\n    function name() external view returns (string memory);\\n    function ethPrice() external view returns (uint256);\\n    function minTime() external view returns (uint256);\\n    function maxTime() external view returns (uint256);\\n    function difficultyStep() external view returns (uint256);\\n    function maxClaims() external view returns (uint256);\\n\\n    // these describe the pools created contents over time. This is where\\n    // you query to get information about a token that a pool created\\n    function claimedCount() external view returns (uint256);\\n    function claimAmount(uint256 claimId) external view returns (uint256);\\n    function claimQuantity(uint256 claimId) external view returns (uint256);\\n    function mintedCount() external view returns (uint256);\\n    function totalStakedEth() external view returns (uint256);\\n    function tokenId(uint256 tokenHash) external view returns (uint256);\\n    function tokenType(uint256 tokenHash) external view returns (uint8);\\n    function allTokenHashesLength() external view returns (uint256);\\n    function allTokenHashes(uint256 ndx) external view returns (uint256);\\n    function nextClaimHash() external view returns (uint256);\\n    function nextGemHash() external view returns (uint256);\\n    function nextGemId() external view returns (uint256);\\n    function nextClaimId() external view returns (uint256);\\n\\n    function claimUnlockTime(uint256 claimId) external view returns (uint256);\\n    function claimTokenAmount(uint256 claimId) external view returns (uint256);\\n    function stakedToken(uint256 claimId) external view returns (address);\\n\\n    function allowedTokensLength() external view returns (uint256);\\n    function allowedTokens(uint256 idx) external view returns (address);\\n    function isTokenAllowed(address token) external view returns (bool);\\n    function addAllowedToken(address token) external;\\n    function removeAllowedToken(address token) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ISwapQueryHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface ISwapQueryHelper {\\n\\n    function coinQuote(address token, uint256 tokenAmount)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function factory() external pure returns (address);\\n\\n    function COIN() external pure returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function hasPool(address token) external view returns (bool);\\n\\n    function getReserves(\\n        address pair\\n    ) external view returns (uint256, uint256);\\n\\n    function pairFor(\\n        address tokenA,\\n        address tokenB\\n    ) external pure returns (address);\\n\\n    function getPathForCoinToToken(address token) external pure returns (address[] memory);\\n\\n}\\n\"\r\n    },\r\n    \"src/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor() {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libs/Create2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libs/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/pool/NFTGemPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../utils/Initializable.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\nimport \\\"../interfaces/INFTGemFeeManager.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IERC1155.sol\\\";\\nimport \\\"../interfaces/INFTGemPool.sol\\\";\\nimport \\\"../interfaces/INFTGemGovernor.sol\\\";\\nimport \\\"../interfaces/ISwapQueryHelper.sol\\\";\\n\\nimport \\\"../libs/SafeMath.sol\\\";\\nimport \\\"./NFTGemPoolData.sol\\\";\\n\\ncontract NFTGemPool is Initializable, NFTGemPoolData, INFTGemPool {\\n    using SafeMath for uint256;\\n\\n    // governor and multitoken target\\n    address private _multitoken;\\n    address private _governor;\\n    address private _feeTracker;\\n    address private _swapHelper;\\n\\n    /**\\n     * @dev initializer called when contract is deployed\\n     */\\n    function initialize (\\n        string memory __symbol,\\n        string memory __name,\\n        uint256 __ethPrice,\\n        uint256 __minTime,\\n        uint256 __maxTime,\\n        uint256 __diffstep,\\n        uint256 __maxClaims,\\n        address __allowedToken\\n    ) external override initializer {\\n        _symbol = __symbol;\\n        _name = __name;\\n        _ethPrice = __ethPrice;\\n        _minTime = __minTime;\\n        _maxTime = __maxTime;\\n        _diffstep = __diffstep;\\n        _maxClaims = __maxClaims;\\n\\n        if(__allowedToken != address(0)) {\\n            _allowedTokens.push(__allowedToken);\\n            _isAllowedMap[__allowedToken] = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev set the governor. pool uses the governor to issue gov token issuance requests\\n     */\\n    function setGovernor(address addr) external override {\\n        require(_governor == address(0), \\\"IMMUTABLE\\\");\\n        _governor = addr;\\n    }\\n\\n    /**\\n     * @dev set the governor. pool uses the governor to issue gov token issuance requests\\n     */\\n    function setFeeTracker(address addr) external override {\\n        require(_feeTracker == address(0), \\\"IMMUTABLE\\\");\\n        _feeTracker = addr;\\n    }\\n\\n    /**\\n     * @dev set the multitoken that this pool will mint new tokens on. Must be a controller of the multitoken\\n     */\\n    function setMultiToken(address token) external override {\\n        require(_multitoken == address(0), \\\"IMMUTABLE\\\");\\n        _multitoken = token;\\n    }\\n\\n    /**\\n     * @dev set the multitoken that this pool will mint new tokens on. Must be a controller of the multitoken\\n     */\\n    function setSwapHelper(address helper) external override {\\n        require(_swapHelper == address(0), \\\"IMMUTABLE\\\");\\n        _swapHelper = helper;\\n    }\\n\\n    /**\\n     * @dev mint the genesis gems earned by the pools creator and funder\\n     */\\n    function mintGenesisGems(address creator, address funder) external override {\\n        require(_multitoken != address(0), \\\"NO_MULTITOKEN\\\");\\n        require(creator != address(0) && funder != address(0), \\\"ZERO_DESTINATION\\\");\\n        require(_nextGemId == 0, \\\"ALREADY_MINTED\\\");\\n\\n        uint256 gemHash = _nextGemHash();\\n        INFTGemMultiToken(_multitoken).mint(creator, gemHash, 1);\\n        _addToken(gemHash, 2);\\n\\n        gemHash = _nextGemHash();\\n        INFTGemMultiToken(_multitoken).mint(creator, gemHash, 1);\\n        _addToken(gemHash, 2);\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function createClaim(uint256 timeframe) external payable override {\\n        _createClaim(timeframe);\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function createClaims(uint256 timeframe, uint256 count) external payable override {\\n        _createClaims(timeframe, count);\\n    }\\n\\n    /**\\n     * @dev create a claim using a erc20 token\\n     */\\n    function createERC20Claim(address erc20token, uint256 tokenAmount) external override {\\n        _createERC20Claim(erc20token, tokenAmount);\\n    }\\n\\n    /**\\n     * @dev create a claim using a erc20 token\\n     */\\n    function createERC20Claims(address erc20token, uint256 tokenAmount, uint256 count) external override {\\n        _createERC20Claims(erc20token, tokenAmount, count);\\n    }\\n\\n\\n    /**\\n     * @dev default receive. tries to issue a claim given the received ETH or\\n     */\\n    receive() external payable {\\n        uint256 incomingEth = msg.value;\\n\\n        // compute the mimimum cost of a claim and revert if not enough sent\\n        uint256 minClaimCost = _ethPrice.div(_maxTime).mul(_minTime);\\n        require(incomingEth >= minClaimCost, \\\"INSUFFICIENT_ETH\\\");\\n\\n        // compute the minimum actual claim time\\n        uint256 actualClaimTime = _minTime;\\n\\n        // refund ETH above max claim cost\\n        if (incomingEth <= _ethPrice)  {\\n            actualClaimTime = _ethPrice.div(incomingEth).mul(_minTime);\\n        }\\n\\n        // create the claim using minimum possible claim time\\n        _createClaim(actualClaimTime);\\n    }\\n\\n    /**\\n     * @dev attempt to create a claim using the given timeframe\\n     */\\n    function _createClaim(uint256 timeframe) internal {\\n        // minimum timeframe\\n        require(timeframe >= _minTime, \\\"TIMEFRAME_TOO_SHORT\\\");\\n\\n        // maximum timeframe\\n        require((_maxTime != 0 && timeframe <= _maxTime) || _maxTime == 0, \\\"TIMEFRAME_TOO_LONG\\\");\\n\\n        // cost given this timeframe\\n        uint256 cost = _ethPrice.mul(_minTime).div(timeframe);\\n        require(msg.value > cost, \\\"INSUFFICIENT_ETH\\\");\\n\\n        // get the nest claim hash, revert if no more claims\\n        uint256 claimHash = _nextClaimHash();\\n        require(claimHash != 0, \\\"NO_MORE_CLAIMABLE\\\");\\n\\n        // mint the new claim to the caller's address\\n        INFTGemMultiToken(_multitoken).mint(msg.sender, claimHash, 1);\\n        _addToken(claimHash, 1);\\n\\n        // record the claim unlock time and cost paid for this claim\\n        uint256 _claimUnlockTime = block.timestamp.add(timeframe);\\n        claimLockTimestamps[claimHash] = _claimUnlockTime;\\n        claimAmountPaid[claimHash] = cost;\\n        claimQuant[claimHash] = 1;\\n\\n        // increase the staked eth balance\\n        _totalStakedEth = _totalStakedEth.add(cost);\\n\\n        // maybe mint a governance token for the claimant\\n        INFTGemGovernor(_governor).maybeIssueGovernanceToken(msg.sender);\\n        INFTGemGovernor(_governor).issueFuelToken(msg.sender, cost);\\n\\n        emit NFTGemClaimCreated(msg.sender, address(this), claimHash, timeframe, 1, cost);\\n\\n        if (msg.value > cost) {\\n            (bool success, ) = payable(msg.sender).call{value: msg.value.sub(cost)}(\\\"\\\");\\n            require(success, \\\"REFUND_FAILED\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev attempt to create a claim using the given timeframe\\n     */\\n    function _createClaims(uint256 timeframe, uint256 count) internal {\\n        // minimum timeframe\\n        require(timeframe >= _minTime, \\\"TIMEFRAME_TOO_SHORT\\\");\\n        // no ETH\\n        require(msg.value != 0, \\\"ZERO_BALANCE\\\");\\n        // zero qty\\n        require(count != 0, \\\"ZERO_QUANTITY\\\");\\n        // maximum timeframe\\n        require((_maxTime != 0 && timeframe <= _maxTime) || _maxTime == 0, \\\"TIMEFRAME_TOO_LONG\\\");\\n\\n        uint256 adjustedBalance = msg.value.div(count);\\n        // cost given this timeframe\\n\\n        uint256 cost = _ethPrice.mul(_minTime).div(timeframe);\\n        require(adjustedBalance >= cost, \\\"INSUFFICIENT_ETH\\\");\\n\\n        // get the nest claim hash, revert if no more claims\\n        uint256 claimHash = _nextClaimHash();\\n        require(claimHash != 0, \\\"NO_MORE_CLAIMABLE\\\");\\n\\n        // mint the new claim to the caller's address\\n        INFTGemMultiToken(_multitoken).mint(msg.sender, claimHash, 1);\\n        _addToken(claimHash, 1);\\n\\n        // record the claim unlock time and cost paid for this claim\\n        uint256 _claimUnlockTime = block.timestamp.add(timeframe);\\n        claimLockTimestamps[claimHash] = _claimUnlockTime;\\n        claimAmountPaid[claimHash] = cost.mul(count);\\n        claimQuant[claimHash] = count;\\n\\n        // maybe mint a governance token for the claimant\\n        INFTGemGovernor(_governor).maybeIssueGovernanceToken(msg.sender);\\n        INFTGemGovernor(_governor).issueFuelToken(msg.sender, cost);\\n\\n        emit NFTGemClaimCreated(msg.sender, address(this), claimHash, timeframe, count, cost);\\n\\n        // increase the staked eth balance\\n        _totalStakedEth = _totalStakedEth.add(cost.mul(count));\\n\\n        if (msg.value > cost.mul(count)) {\\n            (bool success, ) = payable(msg.sender).call{value: msg.value.sub(cost.mul(count))}(\\\"\\\");\\n            require(success, \\\"REFUND_FAILED\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev crate a gem claim using an erc20 token. this token must be tradeable in Uniswap or this call will fail\\n     */\\n    function _createERC20Claim(address erc20token, uint256 tokenAmount) internal {\\n        // must be a valid address\\n        require(erc20token != address(0), \\\"INVALID_ERC20_TOKEN\\\");\\n\\n        // token is allowed\\n        require((_allowedTokens.length > 0 && _isAllowedMap[erc20token]) || _allowedTokens.length == 0, \\\"TOKEN_DISALLOWED\\\");\\n\\n        // Uniswap pool must exist\\n        require(ISwapQueryHelper(_swapHelper).hasPool(erc20token) == true, \\\"NO_UNISWAP_POOL\\\");\\n\\n        // must have an amount specified\\n        require(tokenAmount >= 0, \\\"NO_PAYMENT_INCLUDED\\\");\\n\\n        // get a quote in ETH for the given token.\\n        (uint256 ethereum, uint256 tokenReserve, uint256 ethReserve) = ISwapQueryHelper(_swapHelper).coinQuote(erc20token, tokenAmount);\\n\\n        // get the min liquidity from fee tracker\\n        uint256 liquidity = INFTGemFeeManager(_feeTracker).liquidity(erc20token);\\n\\n        // make sure the convertible amount is has reserves > 100x the token\\n        require(ethReserve >= ethereum.mul(liquidity), \\\"INSUFFICIENT_ETH_LIQUIDITY\\\");\\n\\n        // make sure the convertible amount is has reserves > 100x the token\\n        require(tokenReserve >= tokenAmount.mul(liquidity), \\\"INSUFFICIENT_TOKEN_LIQUIDITY\\\");\\n\\n        // make sure the convertible amount is less than max price\\n        require(ethereum <= _ethPrice, \\\"OVERPAYMENT\\\");\\n\\n        // calculate the maturity time given the converted eth\\n        uint256 maturityTime = _ethPrice.mul(_minTime).div(ethereum);\\n\\n        // make sure the convertible amount is less than max price\\n        require(maturityTime >= _minTime, \\\"INSUFFICIENT_TIME\\\");\\n\\n        // get the next claim hash, revert if no more claims\\n        uint256 claimHash = _nextClaimHash();\\n        require(claimHash != 0, \\\"NO_MORE_CLAIMABLE\\\");\\n\\n        // transfer the caller's ERC20 tokens into the pool\\n        IERC20(erc20token).transferFrom(msg.sender, address(this), tokenAmount);\\n\\n        // mint the new claim to the caller's address\\n        INFTGemMultiToken(_multitoken).mint(msg.sender, claimHash, 1);\\n        _addToken(claimHash, 1);\\n\\n        // record the claim unlock time and cost paid for this claim\\n        uint256 _claimUnlockTime = block.timestamp.add(maturityTime);\\n        claimLockTimestamps[claimHash] = _claimUnlockTime;\\n        claimAmountPaid[claimHash] = ethereum;\\n        claimLockToken[claimHash] = erc20token;\\n        claimTokenAmountPaid[claimHash] = tokenAmount;\\n        claimQuant[claimHash] = 1;\\n\\n        _totalStakedEth = _totalStakedEth.add(ethereum);\\n\\n        // maybe mint a governance token for the claimant\\n        INFTGemGovernor(_governor).maybeIssueGovernanceToken(msg.sender);\\n        INFTGemGovernor(_governor).issueFuelToken(msg.sender, ethereum);\\n\\n        // emit a message indicating that an erc20 claim has been created\\n        emit NFTGemERC20ClaimCreated(msg.sender, address(this), claimHash, maturityTime, erc20token, 1, ethereum);\\n    }\\n\\n    /**\\n     * @dev crate multiple gem claim using an erc20 token. this token must be tradeable in Uniswap or this call will fail\\n     */\\n    function _createERC20Claims(address erc20token, uint256 tokenAmount, uint256 count) internal {\\n        // must be a valid address\\n        require(erc20token != address(0), \\\"INVALID_ERC20_TOKEN\\\");\\n\\n        // token is allowed\\n        require((_allowedTokens.length > 0 && _isAllowedMap[erc20token]) || _allowedTokens.length == 0, \\\"TOKEN_DISALLOWED\\\");\\n\\n        // zero qty\\n        require(count != 0, \\\"ZERO_QUANTITY\\\");\\n\\n        // Uniswap pool must exist\\n        require(ISwapQueryHelper(_swapHelper).hasPool(erc20token) == true, \\\"NO_UNISWAP_POOL\\\");\\n\\n        // must have an amount specified\\n        require(tokenAmount >= 0, \\\"NO_PAYMENT_INCLUDED\\\");\\n\\n        // get a quote in ETH for the given token.\\n        (uint256 ethereum, uint256 tokenReserve, uint256 ethReserve) = ISwapQueryHelper(_swapHelper).coinQuote(\\n            erc20token,\\n            tokenAmount.div(count)\\n        );\\n\\n        // make sure the convertible amount is has reserves > 100x the token\\n        require(ethReserve >= ethereum.mul(100).mul(count), \\\"INSUFFICIENT_ETH_LIQUIDITY\\\");\\n\\n        // make sure the convertible amount is has reserves > 100x the token\\n        require(tokenReserve >= tokenAmount.mul(100).mul(count), \\\"INSUFFICIENT_TOKEN_LIQUIDITY\\\");\\n\\n        // make sure the convertible amount is less than max price\\n        require(ethereum <= _ethPrice, \\\"OVERPAYMENT\\\");\\n\\n        // calculate the maturity time given the converted eth\\n        uint256 maturityTime = _ethPrice.mul(_minTime).div(ethereum);\\n\\n        // make sure the convertible amount is less than max price\\n        require(maturityTime >= _minTime, \\\"INSUFFICIENT_TIME\\\");\\n\\n        // get the next claim hash, revert if no more claims\\n        uint256 claimHash = _nextClaimHash();\\n        require(claimHash != 0, \\\"NO_MORE_CLAIMABLE\\\");\\n\\n        // mint the new claim to the caller's address\\n        INFTGemMultiToken(_multitoken).mint(msg.sender, claimHash, 1);\\n        _addToken(claimHash, 1);\\n\\n        // record the claim unlock time and cost paid for this claim\\n        uint256 _claimUnlockTime = block.timestamp.add(maturityTime);\\n        claimLockTimestamps[claimHash] = _claimUnlockTime;\\n        claimAmountPaid[claimHash] = ethereum;\\n        claimLockToken[claimHash] = erc20token;\\n        claimTokenAmountPaid[claimHash] = tokenAmount;\\n        claimQuant[claimHash] = count;\\n\\n        // increase staked eth amount\\n        _totalStakedEth = _totalStakedEth.add(ethereum);\\n\\n        // maybe mint a governance token for the claimant\\n        INFTGemGovernor(_governor).maybeIssueGovernanceToken(msg.sender);\\n        INFTGemGovernor(_governor).issueFuelToken(msg.sender, ethereum);\\n\\n        // emit a message indicating that an erc20 claim has been created\\n        emit NFTGemERC20ClaimCreated(msg.sender, address(this), claimHash, maturityTime, erc20token, count, ethereum);\\n\\n        // transfer the caller's ERC20 tokens into the pool\\n        IERC20(erc20token).transferFrom(msg.sender, address(this), tokenAmount);\\n    }\\n\\n    /**\\n     * @dev collect an open claim (take custody of the funds the claim is redeeemable for and maybe a gem too)\\n     */\\n    function collectClaim(uint256 claimHash) external override {\\n        // validation checks - disallow if not owner (holds coin with claimHash)\\n        // or if the unlockTime amd unlockPaid data is in an invalid state\\n        require(IERC1155(_multitoken).balanceOf(msg.sender, claimHash) == 1, \\\"NOT_CLAIM_OWNER\\\");\\n        uint256 unlockTime = claimLockTimestamps[claimHash];\\n        uint256 unlockPaid = claimAmountPaid[claimHash];\\n        require(unlockTime != 0 && unlockPaid > 0, \\\"INVALID_CLAIM\\\");\\n\\n        // grab the erc20 token info if there is any\\n        address tokenUsed = claimLockToken[claimHash];\\n        uint256 unlockTokenPaid = claimTokenAmountPaid[claimHash];\\n\\n        // check the maturity of the claim - only issue gem if mature\\n        bool isMature = unlockTime < block.timestamp;\\n\\n        //  burn claim and transfer money back to user\\n        INFTGemMultiToken(_multitoken).burn(msg.sender, claimHash, 1);\\n\\n        // if they used erc20 tokens stake their claim, return their tokens\\n        if (tokenUsed != address(0)) {\\n            // calculate fee portion using fee tracker\\n            uint256 feePortion = 0;\\n            if (isMature == true) {\\n                uint256 poolDiv = INFTGemFeeManager(_feeTracker).feeDivisor(address(this));\\n                uint256 divisor = INFTGemFeeManager(_feeTracker).feeDivisor(tokenUsed);\\n                uint256 feeNum = poolDiv != divisor ? divisor : poolDiv;\\n                feePortion = unlockTokenPaid.div(feeNum);\\n            }\\n            // assess a fee for minting the NFT. Fee is collectec in fee tracker\\n            IERC20(tokenUsed).transferFrom(address(this), _feeTracker, feePortion);\\n            // send the principal minus fees to the caller\\n            IERC20(tokenUsed).transferFrom(address(this), msg.sender, unlockTokenPaid.sub(feePortion));\\n\\n            // emit an event that the claim was redeemed for ERC20\\n            emit NFTGemERC20ClaimRedeemed(\\n                msg.sender,\\n                address(this),\\n                claimHash,\\n                tokenUsed,\\n                unlockPaid,\\n                unlockTokenPaid,\\n                feePortion\\n            );\\n        } else {\\n            // calculate fee portion using fee tracker\\n            uint256 feePortion = 0;\\n            if (isMature == true) {\\n                uint256 divisor = INFTGemFeeManager(_feeTracker).feeDivisor(address(0));\\n                feePortion = unlockPaid.div(divisor);\\n            }\\n            // transfer the ETH fee to fee tracker\\n            payable(_feeTracker).transfer(feePortion);\\n            // transfer the ETH back to user\\n            payable(msg.sender).transfer(unlockPaid.sub(feePortion));\\n\\n            // emit an event that the claim was redeemed for ETH\\n            emit NFTGemClaimRedeemed(msg.sender, address(this), claimHash, unlockPaid, feePortion);\\n        }\\n\\n        // deduct the total staked ETH balance of the pool\\n        _totalStakedEth = _totalStakedEth.sub(unlockPaid);\\n\\n        // if all this is happening before the unlocktime then we exit\\n        // without minting a gem because the user is withdrawing early\\n        if (!isMature) {\\n            return;\\n        }\\n\\n        // get the next gem hash, increase the staking sifficulty\\n        // for the pool, and mint a gem token back to account\\n        uint256 nextHash = this.nextGemHash();\\n\\n        // mint the gem\\n        INFTGemMultiToken(_multitoken).mint(msg.sender, nextHash, claimQuant[claimHash]);\\n        _addToken(nextHash, 2);\\n\\n        // maybe mint a governance token\\n        INFTGemGovernor(_governor).maybeIssueGovernanceToken(msg.sender);\\n        INFTGemGovernor(_governor).issueFuelToken(msg.sender, unlockPaid);\\n\\n        // emit an event about a gem getting created\\n        emit NFTGemCreated(msg.sender, address(this), claimHash, nextHash, claimQuant[claimHash]);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/pool/NFTGemPoolData.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"../libs/SafeMath.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\nimport \\\"../interfaces/INFTGemPoolData.sol\\\";\\n\\n\\ncontract NFTGemPoolData is INFTGemPoolData, Initializable {\\n    using SafeMath for uint256;\\n\\n    // it all starts with a symbol and a nams\\n    string internal _symbol;\\n    string internal _name;\\n\\n    // magic economy numbers\\n    uint256 internal _ethPrice;\\n    uint256 internal _minTime;\\n    uint256 internal _maxTime;\\n    uint256 internal _diffstep;\\n    uint256 internal _maxClaims;\\n\\n    mapping(uint256 => uint8) internal _tokenTypes;\\n    mapping(uint256 => uint256) internal _tokenIds;\\n    uint256[] internal _tokenHashes;\\n\\n    // next ids of things\\n    uint256 internal _nextGemId;\\n    uint256 internal _nextClaimId;\\n    uint256 internal _totalStakedEth;\\n\\n    // records claim timestamp / ETH value / ERC token and amount sent\\n    mapping(uint256 => uint256) internal claimLockTimestamps;\\n    mapping(uint256 => address) internal claimLockToken;\\n    mapping(uint256 => uint256) internal claimAmountPaid;\\n    mapping(uint256 => uint256) internal claimQuant;\\n    mapping(uint256 => uint256) internal claimTokenAmountPaid;\\n\\n    address[] internal _allowedTokens;\\n    mapping(address => bool) internal _isAllowedMap;\\n\\n    constructor() {}\\n\\n    /**\\n     * @dev The symbol for this pool / NFT\\n     */\\n    function symbol() external view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev The name for this pool / NFT\\n     */\\n    function name() external view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev The ether price for this pool / NFT\\n     */\\n    function ethPrice() external view override returns (uint256) {\\n        return _ethPrice;\\n    }\\n\\n    /**\\n     * @dev min time to stake in this pool to earn an NFT\\n     */\\n    function minTime() external view override returns (uint256) {\\n        return _minTime;\\n    }\\n\\n    /**\\n     * @dev max time to stake in this pool to earn an NFT\\n     */\\n    function maxTime() external view override returns (uint256) {\\n        return _maxTime;\\n    }\\n\\n    /**\\n     * @dev difficulty step increase for this pool.\\n     */\\n    function difficultyStep() external view override returns (uint256) {\\n        return _diffstep;\\n    }\\n\\n    /**\\n     * @dev max claims that can be made on this NFT\\n     */\\n    function maxClaims() external view override returns (uint256) {\\n        return _maxClaims;\\n    }\\n\\n    /**\\n     * @dev number of claims made thus far\\n     */\\n    function claimedCount() external view override returns (uint256) {\\n        return _nextClaimId;\\n    }\\n\\n    /**\\n     * @dev the number of gems minted in this\\n     */\\n    function mintedCount() external view override returns (uint256) {\\n        return _nextGemId;\\n    }\\n\\n    /**\\n     * @dev the number of gems minted in this\\n     */\\n    function totalStakedEth() external view override returns (uint256) {\\n        return _totalStakedEth;\\n    }\\n\\n    /**\\n     * @dev get token type of hash - 1 is for claim, 2 is for gem\\n     */\\n    function tokenType(uint256 tokenHash) external view override returns (uint8) {\\n        return _tokenTypes[tokenHash];\\n    }\\n\\n    /**\\n     * @dev get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\\n     */\\n    function tokenId(uint256 tokenHash) external view override returns (uint256) {\\n        return _tokenIds[tokenHash];\\n    }\\n\\n    /**\\n     * @dev get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\\n     */\\n    function allTokenHashesLength() external view override returns (uint256) {\\n        return _tokenHashes.length;\\n    }\\n\\n    /**\\n     * @dev get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\\n     */\\n    function allTokenHashes(uint256 ndx) external view override returns (uint256) {\\n        return _tokenHashes[ndx];\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function nextClaimHash() external view override returns (uint256) {\\n        return _nextClaimHash();\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function nextGemHash() external view override returns (uint256) {\\n        return _nextGemHash();\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function nextClaimId() external view override returns (uint256) {\\n        return _nextClaimId;\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function nextGemId() external view override returns (uint256) {\\n        return _nextGemId;\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function allowedTokensLength() external view override returns (uint256) {\\n        return _allowedTokens.length;\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function allowedTokens(uint256 idx) external view override returns (address) {\\n        return _allowedTokens[idx];\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function isTokenAllowed(address token) external view override returns (bool) {\\n        return _isAllowedMap[token];\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function addAllowedToken(address token) external override {\\n        if(!_isAllowedMap[token]) {\\n            _allowedTokens.push(token);\\n            _isAllowedMap[token] = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev the external version of the above\\n     */\\n    function removeAllowedToken(address token) external override {\\n        if(_isAllowedMap[token]) {\\n            for(uint256 i = 0; i < _allowedTokens.length; i++) {\\n                if(_allowedTokens[i] == token) {\\n                   _allowedTokens[i] = _allowedTokens[_allowedTokens.length - 1];\\n                    delete _allowedTokens[_allowedTokens.length - 1];\\n                    _isAllowedMap[token] = false;\\n                    return;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev the claim amount for the given claim id\\n     */\\n    function claimAmount(uint256 claimHash) external view override returns (uint256) {\\n        return claimAmountPaid[claimHash];\\n    }\\n\\n    /**\\n     * @dev the claim quantity (count of gems staked) for the given claim id\\n     */\\n    function claimQuantity(uint256 claimHash) external view override returns (uint256) {\\n        return claimQuant[claimHash];\\n    }\\n\\n    /**\\n     * @dev the lock time for this claim. once past lock time a gema is minted\\n     */\\n    function claimUnlockTime(uint256 claimHash) external view override returns (uint256) {\\n        return claimLockTimestamps[claimHash];\\n    }\\n\\n    /**\\n     * @dev claim token amount if paid using erc20\\n     */\\n    function claimTokenAmount(uint256 claimHash) external view override returns (uint256) {\\n        return claimTokenAmountPaid[claimHash];\\n    }\\n\\n    /**\\n     * @dev the staked token if staking with erc20\\n     */\\n    function stakedToken(uint256 claimHash) external view override returns (address) {\\n        return claimLockToken[claimHash];\\n    }\\n\\n    /**\\n     * @dev get token id (serial #) of the given token hash. 0 if not a token, 1 if claim, 2 if gem\\n     */\\n    function _addToken(uint256 tokenHash, uint8 tt) internal {\\n        require(tt == 1 || tt == 2, \\\"INVALID_TOKENTYPE\\\");\\n        _tokenHashes.push(tokenHash);\\n        _tokenTypes[tokenHash] = tt;\\n        _tokenIds[tokenHash] = tt == 1 ? __nextClaimId() : __nextGemId();\\n        if(tt == 2) {\\n            _increaseDifficulty();\\n        }\\n    }\\n\\n    /**\\n     * @dev get the next claim id\\n     */\\n    function __nextClaimId() private returns (uint256) {\\n        uint256 ncId = _nextClaimId;\\n        _nextClaimId = _nextClaimId.add(1);\\n        return ncId;\\n    }\\n\\n    /**\\n     * @dev get the next gem id\\n     */\\n    function __nextGemId() private returns (uint256) {\\n        uint256 ncId = _nextGemId;\\n        _nextGemId = _nextGemId.add(1);\\n        return ncId;\\n    }\\n\\n    /**\\n     * @dev increase the pool's difficulty by calculating the step increase portion and adding it to the eth price of the market\\n     */\\n    function _increaseDifficulty() private {\\n        uint256 diffIncrease = _ethPrice.div(_diffstep);\\n        _ethPrice = _ethPrice.add(diffIncrease);\\n    }\\n\\n    /**\\n     * @dev the hash of the next gem to be minted\\n     */\\n    function _nextGemHash() internal view returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(\\\"gem\\\", address(this), _nextGemId)));\\n    }\\n\\n    /**\\n     * @dev the hash of the next claim to be minted\\n     */\\n    function _nextClaimHash() internal view returns (uint256) {\\n        return\\n            (_maxClaims != 0 && _nextClaimId <= _maxClaims) || _maxClaims == 0\\n                ? uint256(keccak256(abi.encodePacked(\\\"claim\\\", address(this), _nextClaimId)))\\n                : 0;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"src/tokens/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tokens/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interfaces/IERC1155Receiver.sol\\\";\\nimport \\\"../introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    constructor() {\\n        _registerInterface(\\n            ERC1155Receiver(address(0)).onERC1155Received.selector ^\\n                ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../libs/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\")\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\")\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"src/tokens/ERC20Constructorless.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../libs/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Constructorless is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string internal _name;\\n    string internal _symbol;\\n    uint8 internal _decimals;\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\")\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\")\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"src/tokens/ERC20WrappedGem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../libs/SafeMath.sol\\\";\\nimport \\\"./ERC20Constructorless.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\nimport \\\"../interfaces/IERC1155.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/INFTGemPoolData.sol\\\";\\nimport \\\"../interfaces/IERC20WrappedGem.sol\\\";\\nimport \\\"../interfaces/INFTGemMultiToken.sol\\\";\\n\\nimport \\\"./ERC1155Holder.sol\\\";\\n\\ncontract ERC20WrappedGem is ERC20Constructorless, ERC1155Holder, IERC20WrappedGem, Initializable {\\n    using SafeMath for uint256;\\n\\n    address private token;\\n    address private pool;\\n    uint256 private rate;\\n\\n    uint256[] private ids;\\n    uint256[] private amounts;\\n\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        address gemPool,\\n        address gemToken,\\n        uint8 decimals\\n    ) external override initializer {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n        token = gemToken;\\n        pool = gemPool;\\n    }\\n\\n    function _transferERC1155(\\n        address from,\\n        address to,\\n        uint256 quantity\\n    ) internal {\\n        uint256 tq = quantity;\\n        delete ids;\\n        delete amounts;\\n\\n        uint256 i = INFTGemMultiToken(token).allHeldTokensLength(from);\\n        require(i > 0, \\\"INSUFFICIENT_GEMS\\\");\\n\\n        for (; i >= 0 && tq > 0; i = i.sub(1)) {\\n            uint256 tokenHash = INFTGemMultiToken(token).allHeldTokens(from, i);\\n            if (INFTGemPoolData(pool).tokenType(tokenHash) == 2) {\\n                uint256 oq = IERC1155(token).balanceOf(from, tokenHash);\\n                uint256 toTransfer = oq > tq ? tq : oq;\\n                ids.push(tokenHash);\\n                amounts.push(toTransfer);\\n                tq = tq.sub(toTransfer);\\n            }\\n            if (i == 0) break;\\n        }\\n\\n        require(tq == 0, \\\"INSUFFICIENT_GEMS\\\");\\n\\n        IERC1155(token).safeBatchTransferFrom(from, to, ids, amounts, \\\"\\\");\\n    }\\n\\n    function wrap(uint256 quantity) external override {\\n        require(quantity != 0, \\\"ZERO_QUANTITY\\\");\\n\\n        _transferERC1155(msg.sender, address(this), quantity);\\n        _mint(msg.sender, quantity.mul(10**decimals()));\\n        emit Wrap(msg.sender, quantity);\\n    }\\n\\n    function unwrap(uint256 quantity) external override {\\n        require(quantity != 0, \\\"ZERO_QUANTITY\\\");\\n        require(balanceOf(msg.sender).mul(10**decimals()) >= quantity, \\\"INSUFFICIENT_QUANTITY\\\");\\n\\n        _transferERC1155(address(this), msg.sender, quantity);\\n        _burn(msg.sender, quantity.mul(10**decimals()));\\n        emit Unwrap(msg.sender, quantity);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"poolSymbol\",\"type\":\"string\"}],\"name\":\"ERC20GemTokenCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"allItems\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gemPool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allItemsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"createItem\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"gemToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_symbolHash\",\"type\":\"uint256\"}],\"name\":\"getItem\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"gemPool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ERC20GemTokenFactory","CompilerVersion":"v0.7.3+commit.9bfce1f6","OptimizationUsed":"1","Runs":"9999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}