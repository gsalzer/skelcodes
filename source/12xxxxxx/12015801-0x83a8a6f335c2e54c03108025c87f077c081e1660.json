{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/storage/InviteStorage.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\nlibrary InviteStorage {\r\n\r\n    bytes32 public constant sSlot = keccak256(\"InviteStorage.storage.location\");\r\n\r\n    struct Storage{\r\n        address owner;\r\n        uint256 lastId;\r\n        mapping(uint256 => address)  indexs;\r\n        mapping(address => address)  inviter;\r\n        mapping(address => address[])  inviterList;\r\n        mapping(address => bool)  whiteListed;\r\n        mapping(address => uint256)  userIndex;\r\n    }\r\n\r\n    function load() internal pure returns (Storage storage s) {\r\n        bytes32 loc = sSlot;\r\n        assembly {\r\n        s_slot := loc\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/market/Invite.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\ncontract Invite {\r\n\r\n\r\n    constructor(uint256 index)public{\r\n        init(index);\r\n    }\r\n    modifier onlyOwner() {\r\n        require(InviteStorage.load().owner == msg.sender, \"Invite.onlyOwner: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function init(uint256 index)public{\r\n        require(InviteStorage.load().owner==address(0),'Invite.init: already initialised');\r\n        InviteStorage.load().owner=msg.sender;\r\n        InviteStorage.load().lastId = index;\r\n    }\r\n\r\n    function owner()public view returns(address){\r\n        return InviteStorage.load().owner;\r\n    }\r\n\r\n    function setWhiteList(address[] memory users) public onlyOwner{\r\n        InviteStorage.Storage storage inviteData=InviteStorage.load();\r\n        for(uint256 i=0;i<users.length;i++){\r\n            address user=users[i];\r\n            inviteData.whiteListed[user] = true;\r\n            if(inviteData.userIndex[user] == 0){\r\n                inviteData.userIndex[user] = inviteData.lastId;\r\n                inviteData.indexs[inviteData.lastId] = user;\r\n                inviteData.lastId = inviteData.lastId + 1;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function setInviteUser(address inviteUser) public{\r\n        InviteStorage.Storage storage inviteData=InviteStorage.load();\r\n        require(!inviteData.whiteListed[msg.sender], 'whiteList user cannot be invited');\r\n        if(inviteData.userIndex[msg.sender] == 0){\r\n            inviteData.userIndex[msg.sender] = inviteData.lastId;\r\n            inviteData.indexs[inviteData.lastId] = msg.sender;\r\n            inviteData.lastId = inviteData.lastId + 1;\r\n        }\r\n\r\n        if(inviteData.whiteListed[inviteUser] || inviteData.inviter[inviteUser] != address(0)){\r\n            inviteData.inviter[msg.sender] = inviteUser;\r\n            inviteData.inviterList[inviteUser].push(msg.sender);\r\n        }\r\n    }\r\n\r\n    function getInviteCount(address user) external view returns (uint256) {\r\n        return InviteStorage.load().inviterList[user].length;\r\n    }\r\n\r\n    function lastId()public view returns(uint256){\r\n        return InviteStorage.load().lastId;\r\n    }\r\n\r\n    function indexs(uint256 id)public view returns(address){\r\n        return InviteStorage.load().indexs[id];\r\n    }\r\n\r\n    function inviter(address user)public view returns(address){\r\n        return InviteStorage.load().inviter[user];\r\n    }\r\n\r\n    function inviterList(address user)public view returns(address[] memory){\r\n        return InviteStorage.load().inviterList[user];\r\n    }\r\n\r\n    function whiteListed(address user)public view returns(bool){\r\n        return InviteStorage.load().whiteListed[user];\r\n    }\r\n\r\n    function userIndex(address user)public view returns(uint256){\r\n        return InviteStorage.load().userIndex[user];\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getInviteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"indexs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"inviterList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inviteUser\",\"type\":\"address\"}],\"name\":\"setInviteUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"whiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Invite","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000a","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d4f8a53f00b127c94cb239a003d7076f81191f04e6a5e8fe26a2a77cd4b871df"}]}