{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Coding/lfBTC-Seigniorage/contracts/Boardroom.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0;\\r\\n//Contract deployed by LK Tech Club Incubator 2021 dba Lift.Kitchen - 4/24/2021\\r\\n\\r\\n// --------------------------------------------------------------------------------------\\r\\n// At expansion Stakers (LIFT & CTRL) collect 20% (variable below) in CTRL\\r\\n// CTRL is distributed as a % of value staked\\r\\n//      LIFT Value = LIFT Amount * LIFT Price\\r\\n//      CTRL Value = CTRL Amount * CTRL Price\\r\\n\\r\\n// Staking LIFT is timelocked 60 days; removal prior to end of timelock = 60 - days staked reduction as a percent\\r\\n// abandoned LIFT is migrated to IdeaFund\\r\\n\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\r\\n\\r\\nimport './utils/Operator.sol';\\r\\nimport './utils/ContractGuard.sol';\\r\\nimport './utils/ShareWrapper.sol';\\r\\n\\r\\n//import './interfaces/IBasisAsset.sol';\\r\\nimport './interfaces/IOracle.sol';\\r\\n\\r\\n//import 'hardhat/console.sol';\\r\\n\\r\\ncontract Boardroom is ShareWrapper, ContractGuard, Operator {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /* ========== DATA STRUCTURES ========== */\\r\\n\\r\\n    //uint256[2][] is an array of [amount][timestamp]\\r\\n    //used to handle the timelock of LIFT tokens\\r\\n    struct StakingSeatShare {        \\r\\n        uint256 lastSnapshotIndex;\\r\\n        uint256 rewardEarned; \\r\\n        uint256[2][] stakingWhenQuatity;\\r\\n        bool isEntity;\\r\\n    }\\r\\n\\r\\n    //used to handle the staking of CTRL tokens\\r\\n    struct StakingSeatControl {        \\r\\n        uint256 lastSnapshotIndex;\\r\\n        uint256 rewardEarned;\\r\\n        bool isEntity;\\r\\n    }\\r\\n\\r\\n    struct BoardSnapshotShare {\\r\\n        uint256 time;\\r\\n        uint256 rewardReceived;\\r\\n        uint256 rewardPerShare;\\r\\n    }\\r\\n\\r\\n    struct BoardSnapshotControl {\\r\\n        uint256 time;\\r\\n        uint256 rewardReceived;\\r\\n        uint256 rewardPerControl;\\r\\n    }\\r\\n\\r\\n    /* ========== STATE VARIABLES ========== */\\r\\n\\r\\n    mapping(address => StakingSeatShare) private stakersShare;\\r\\n    mapping(address => StakingSeatControl) private stakersControl;\\r\\n\\r\\n    BoardSnapshotShare[] private boardShareHistory;\\r\\n    BoardSnapshotControl[] private boardControlHistory;\\r\\n\\r\\n    uint daysRequiredStaked = 90; // staking less than X days = X - Y reduction in withdrawl, Y = days staked\\r\\n    address ideaFund; //Where the forfeited shares end up\\r\\n    address theOracle;\\r\\n\\r\\n    /* ========== CONSTRUCTOR ========== */\\r\\n\\r\\n    constructor(address _share, address _control, address _ideafund, address _theOracle) {\\r\\n        share = _share;\\r\\n        control = _control;\\r\\n        ideaFund = _ideafund;\\r\\n        theOracle = _theOracle;\\r\\n\\r\\n        BoardSnapshotShare memory genesisSSnapshot = BoardSnapshotShare({\\r\\n            time: block.number,\\r\\n            rewardReceived: 0,\\r\\n            rewardPerShare: 0\\r\\n        });\\r\\n        boardShareHistory.push(genesisSSnapshot);\\r\\n\\r\\n        BoardSnapshotControl memory genesisCSnapshot = BoardSnapshotControl({\\r\\n            time: block.number,\\r\\n            rewardReceived: 0,\\r\\n            rewardPerControl: 0\\r\\n        });\\r\\n        boardControlHistory.push(genesisCSnapshot);\\r\\n    }\\r\\n\\r\\n    /* ========== Modifiers =============== */\\r\\n    modifier stakerExists {\\r\\n        require(\\r\\n            getbalanceOfControl(msg.sender) > 0 ||\\r\\n            getbalanceOfShare(msg.sender) > 0,\\r\\n            'Boardroom: The director does not exist'\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier updateRewardShare(address staker, uint256 amount) {\\r\\n        if (staker != address(0)) {\\r\\n            StakingSeatShare storage seatS = stakersShare[staker];\\r\\n            (seatS.rewardEarned, ) = earned(staker);\\r\\n            seatS.lastSnapshotIndex = latestShareSnapshotIndex();\\r\\n            seatS.isEntity = true;\\r\\n            \\r\\n            //validate this is getting stored in the struct correctly\\r\\n            if(amount > 0) {\\r\\n                seatS.stakingWhenQuatity.push([amount, block.timestamp]);\\r\\n            }      \\r\\n            stakersShare[staker] = seatS;\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier updateRewardControl(address staker, uint256 amount) {\\r\\n        if (staker != address(0)) {\\r\\n            StakingSeatControl memory seatC = stakersControl[staker];\\r\\n            (, seatC.rewardEarned) = earned(staker);\\r\\n            seatC.lastSnapshotIndex= latestControlSnapshotIndex();\\r\\n            seatC.isEntity = true;            \\r\\n            stakersControl[staker] = seatC;\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier updateRewardWithdraw(address staker) {\\r\\n        if (staker != address(0)) {\\r\\n            StakingSeatShare memory seatS = stakersShare[staker];\\r\\n            StakingSeatControl memory seatC = stakersControl[staker];\\r\\n            (seatS.rewardEarned, seatC.rewardEarned) = earned(staker);\\r\\n            seatS.lastSnapshotIndex = latestShareSnapshotIndex();\\r\\n            seatC.lastSnapshotIndex= latestControlSnapshotIndex();\\r\\n            seatS.isEntity = true;\\r\\n            seatC.isEntity = true;\\r\\n            stakersShare[staker] = seatS;\\r\\n            stakersControl[staker] = seatC;\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== VIEW FUNCTIONS ========== */\\r\\n\\r\\n    // =========== Snapshot getters\\r\\n\\r\\n    function latestShareSnapshotIndex() public view returns (uint256) {\\r\\n        return boardShareHistory.length.sub(1);\\r\\n    }\\r\\n\\r\\n    function getLatestShareSnapshot() internal view returns (BoardSnapshotShare memory) {\\r\\n        return boardShareHistory[latestShareSnapshotIndex()];\\r\\n    }\\r\\n\\r\\n    function getLastShareSnapshotIndexOf(address staker)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return stakersShare[staker].lastSnapshotIndex;\\r\\n    }\\r\\n\\r\\n    function getLastShareSnapshotOf(address staker)\\r\\n        internal\\r\\n        view\\r\\n        returns (BoardSnapshotShare memory)\\r\\n    {\\r\\n        return boardShareHistory[getLastShareSnapshotIndexOf(staker)];\\r\\n    }\\r\\n\\r\\n    // control getters\\r\\n    function latestControlSnapshotIndex() internal view returns (uint256) {\\r\\n        return boardControlHistory.length.sub(1);\\r\\n    }\\r\\n\\r\\n    function getLatestControlSnapshot() internal view returns (BoardSnapshotControl memory) {\\r\\n        return boardControlHistory[latestControlSnapshotIndex()];\\r\\n    }\\r\\n\\r\\n    function getLastControlSnapshotIndexOf(address staker)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return stakersControl[staker].lastSnapshotIndex;\\r\\n    }\\r\\n\\r\\n    function getLastControlSnapshotOf(address staker)\\r\\n        internal\\r\\n        view\\r\\n        returns (BoardSnapshotControl memory)\\r\\n    {\\r\\n        return boardControlHistory[getLastControlSnapshotIndexOf(staker)];\\r\\n    }\\r\\n\\r\\n    // =========== Director getters\\r\\n\\r\\n    function rewardPerShare() public view returns (uint256) {\\r\\n        return getLatestShareSnapshot().rewardPerShare;\\r\\n    }\\r\\n\\r\\n    function rewardPerControl() public view returns (uint256) {\\r\\n        return getLatestControlSnapshot().rewardPerControl;\\r\\n    }\\r\\n\\r\\n    \\r\\n    // Staking and the dates staked calculate the percentage they would forfeit if they withdraw now\\r\\n    // be the warning\\r\\n    function getStakedAmountsShare() public view returns (uint256[2][] memory earned) {\\r\\n            StakingSeatShare memory seatS = stakersShare[msg.sender];\\r\\n            return seatS.stakingWhenQuatity;\\r\\n    }\\r\\n\\r\\n    function earned(address staker) public view returns (uint256, uint256) {\\r\\n        uint256 latestRPS = getLatestShareSnapshot().rewardPerShare;\\r\\n        uint256 storedRPS = getLastShareSnapshotOf(staker).rewardPerShare;\\r\\n\\r\\n        uint256 latestRPC = getLatestControlSnapshot().rewardPerControl;\\r\\n        uint256 storedRPC = getLastControlSnapshotOf(staker).rewardPerControl;\\r\\n\\r\\n        return\\r\\n            (getbalanceOfShare(staker).mul(latestRPS.sub(storedRPS)).div(1e18).add(stakersShare[staker].rewardEarned),\\r\\n            getbalanceOfControl(staker).mul(latestRPC.sub(storedRPC)).div(1e18).add(stakersControl[staker].rewardEarned));\\r\\n    }\\r\\n\\r\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\r\\n\\r\\n    function stakeShare(uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        onlyOneBlock\\r\\n    {\\r\\n        require(amount > 0, 'Boardroom: Cannot stake 0');\\r\\n        stakeShareForThirdParty(msg.sender, msg.sender,amount);\\r\\n        emit Staked(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function stakeShareForThirdParty(address staker, address from,uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        onlyOneBlock\\r\\n        updateRewardShare(staker, amount)\\r\\n        {\\r\\n            require(amount > 0, 'Boardroom: Cannot stake 0');\\r\\n            super.stakeShareForThirdParty(staker, from, amount);\\r\\n            emit Staked(from, amount);\\r\\n        }\\r\\n\\r\\n    function stakeControl(uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        onlyOneBlock\\r\\n    {\\r\\n        require(amount > 0, 'Boardroom: Cannot stake 0');\\r\\n        stakeControlForThirdParty(msg.sender, msg.sender, amount);\\r\\n        emit Staked(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function stakeControlForThirdParty(address staker, address from, uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        onlyOneBlock\\r\\n        updateRewardControl(staker, amount)\\r\\n    {\\r\\n        require(amount > 0, 'Boardroom: Cannot stake 0');\\r\\n        super.stakeControlForThirdParty(staker, from, amount);\\r\\n        emit Staked(staker, amount);\\r\\n    }\\r\\n\\r\\n    // this function withdraws all of your LIFT tokens regardless of timestamp \\r\\n    // using this function could lead to significant reductions if claimed LIFT\\r\\n    function withdrawShareDontCallMeUnlessYouAreCertain()\\r\\n        public\\r\\n        onlyOneBlock\\r\\n        stakerExists\\r\\n        updateRewardWithdraw(msg.sender)\\r\\n    {\\r\\n        uint256 actualAmount = 0;\\r\\n        require(getbalanceOfShare(msg.sender) > 0, 'Boardroom: Cannot withdraw 0');\\r\\n\\r\\n        StakingSeatShare storage seatS = stakersShare[msg.sender];\\r\\n        //forloop that iterates on the stakings and determines the reduction if any before creating a final amount for withdrawl\\r\\n         for (uint256 i = 0; i < seatS.stakingWhenQuatity.length; i++) {\\r\\n             uint256[2] storage arrStaked = seatS.stakingWhenQuatity[i];\\r\\n             uint daysStaked = (block.timestamp - arrStaked[1]) / 60 / 60 / 24; // = Y Days\\r\\n             if (daysStaked >= daysRequiredStaked){\\r\\n                   settotalSupplyShare(gettotalSupplyShare().sub(arrStaked[0])); \\r\\n                   setbalanceOfShare(msg.sender, getbalanceOfShare(msg.sender).sub(arrStaked[0]));\\r\\n                   IERC20(share).safeTransfer(msg.sender, arrStaked[0]);\\r\\n                   actualAmount += arrStaked[0];\\r\\n             } else {\\r\\n                //calculate reduction percentage  \\r\\n                // EX only staked 35 days of 60 \\r\\n                // 60 - 35 = 25% reduction\\r\\n                // 100 - 25% = 75% remaining (multiply by that / div 100)\\r\\n                uint256 reducedAmount = arrStaked[0].mul(uint256(100).sub(daysRequiredStaked.sub(daysStaked))).div(100);\\r\\n                settotalSupplyShare(gettotalSupplyShare().sub(arrStaked[0])); \\r\\n                setbalanceOfShare(msg.sender, getbalanceOfShare(msg.sender).sub(arrStaked[0]));\\r\\n                IERC20(share).safeTransfer(msg.sender, reducedAmount);\\r\\n                IERC20(share).safeTransfer(address(ideaFund), arrStaked[0].sub(reducedAmount));\\r\\n                actualAmount += reducedAmount;\\r\\n             }\\r\\n            //Make sure this is actually 0ing out and saving to the struct\\r\\n            arrStaked[0] = 0;\\r\\n            arrStaked[1] = 0;\\r\\n         }\\r\\n\\r\\n        emit WithdrawnWithReductionShare(msg.sender, actualAmount);\\r\\n    }\\r\\n\\r\\n    // The withdrawShare function with a timestamp input should take that data right out of the below \\r\\n    // and feed it back to withdraw\\r\\n    function withdrawShare(uint256 stakedTimeStamp)\\r\\n        public\\r\\n        onlyOneBlock\\r\\n        stakerExists\\r\\n        updateRewardWithdraw(msg.sender)\\r\\n    {\\r\\n        uint256 amount = 0;\\r\\n        uint256 actualAmount = 0;\\r\\n\\r\\n        StakingSeatShare storage seatS = stakersShare[msg.sender];\\r\\n        //forloop that iterates on the stakings and determines the reduction if any before creating a final amount for withdrawl\\r\\n         for (uint256 i = 0; i < seatS.stakingWhenQuatity.length; i++) {\\r\\n             uint256[2] storage arrStaked = seatS.stakingWhenQuatity[i];\\r\\n             if(arrStaked[1] == stakedTimeStamp) {\\r\\n                amount = arrStaked[0];\\r\\n                uint daysStaked = (block.timestamp - arrStaked[1]) / 60 / 60 / 24; // = Y Days\\r\\n                //console.log(\\\"days staked\\\", daysStaked);\\r\\n                if (daysStaked >= daysRequiredStaked){\\r\\n                    settotalSupplyShare(gettotalSupplyShare().sub(arrStaked[0])); \\r\\n                    setbalanceOfShare(msg.sender, getbalanceOfShare(msg.sender).sub(arrStaked[0]));\\r\\n                    IERC20(share).safeTransfer(msg.sender, arrStaked[0]);\\r\\n                    actualAmount += arrStaked[0];\\r\\n                } else {\\r\\n                    //calculate reduction percentage  \\r\\n                    // EX only staked 35 days of 60 \\r\\n                    // 60 - 35 = 25% reduction\\r\\n                    // 100 - 25% = 75% remaining (multiply by that / div 100)\\r\\n                    uint256 reducedAmount = arrStaked[0].mul(uint256(100).sub(daysRequiredStaked.sub(daysStaked))).div(100);\\r\\n\\r\\n                    settotalSupplyShare(gettotalSupplyShare().sub(arrStaked[0])); \\r\\n                    setbalanceOfShare(msg.sender, getbalanceOfShare(msg.sender).sub(arrStaked[0]));\\r\\n                    IERC20(share).safeTransfer(msg.sender, reducedAmount);\\r\\n                    IERC20(share).safeTransfer(address(ideaFund), arrStaked[0].sub(reducedAmount));\\r\\n                    actualAmount += reducedAmount;\\r\\n                }\\r\\n                \\r\\n                //Make sure this is actually 0ing out and saving to the struct\\r\\n                arrStaked[0] = 0;\\r\\n                arrStaked[1] = 0;\\r\\n             }          \\r\\n         }\\r\\n\\r\\n        emit WithdrawnWithReductionShare(msg.sender, actualAmount);\\r\\n    }\\r\\n\\r\\n    function withdrawControl(uint256 amount)\\r\\n        public\\r\\n        override\\r\\n        onlyOneBlock\\r\\n        stakerExists\\r\\n        updateRewardWithdraw(msg.sender)\\r\\n    {\\r\\n        require(amount > 0, 'Boardroom: Cannot withdraw 0');\\r\\n        super.withdrawControl(amount);\\r\\n        emit WithdrawControl(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function claimReward()\\r\\n        public\\r\\n        updateRewardWithdraw(msg.sender)\\r\\n    {\\r\\n        uint256 reward = stakersShare[msg.sender].rewardEarned;\\r\\n        reward += stakersControl[msg.sender].rewardEarned;\\r\\n\\r\\n        if (reward > 0) {\\r\\n            stakersShare[msg.sender].rewardEarned = 0;\\r\\n            stakersControl[msg.sender].rewardEarned = 0;\\r\\n            IERC20(control).safeTransfer(msg.sender, reward);\\r\\n            emit RewardPaid(msg.sender, reward);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function allocateSeigniorage(uint256 amount)\\r\\n        external\\r\\n        onlyOneBlock\\r\\n        onlyOperator\\r\\n    {\\r\\n        if(amount == 0)\\r\\n            return;\\r\\n\\r\\n        if(gettotalSupplyShare() == 0 && gettotalSupplyControl() == 0)\\r\\n            return;\\r\\n\\r\\n        uint256 shareValue = gettotalSupplyShare().mul(IOracle(theOracle).priceOf(share));\\r\\n        uint256 controlValue = gettotalSupplyControl().mul(IOracle(theOracle).priceOf(control));\\r\\n\\r\\n        uint256 totalStakedValue = shareValue + controlValue;\\r\\n\\r\\n        uint percision = 9;\\r\\n\\r\\n        uint256 rewardPerShareValue = amount.mul(shareValue.mul(10**percision).div(totalStakedValue)).div(10**percision);\\r\\n        uint256 rewardPerControlValue = amount.mul(controlValue.mul(10**percision).div(totalStakedValue)).div(10**percision);\\r\\n\\r\\n        if (rewardPerShareValue > 0) {\\r\\n            uint256 prevRPS = getLatestShareSnapshot().rewardPerShare;\\r\\n\\r\\n            uint256 nextRPS = prevRPS.add(rewardPerShareValue.mul(1e18).div(gettotalSupplyShare()));\\r\\n\\r\\n            BoardSnapshotShare memory newSSnapshot = BoardSnapshotShare({\\r\\n                time: block.number,\\r\\n                rewardReceived: amount,\\r\\n                rewardPerShare: nextRPS\\r\\n            });\\r\\n            boardShareHistory.push(newSSnapshot);\\r\\n        }\\r\\n\\r\\n        if (rewardPerControlValue > 0 ) {\\r\\n            uint256 prevRPC = getLatestControlSnapshot().rewardPerControl;\\r\\n\\r\\n            uint256 nextRPC = prevRPC.add(rewardPerControlValue.mul(1e18).div(gettotalSupplyControl()));\\r\\n\\r\\n            BoardSnapshotControl memory newCSnapshot = BoardSnapshotControl({\\r\\n                time: block.number,\\r\\n                rewardReceived: amount,\\r\\n                rewardPerControl: nextRPC\\r\\n            });\\r\\n            boardControlHistory.push(newCSnapshot);\\r\\n        }\\r\\n\\r\\n        IERC20(control).safeTransferFrom(msg.sender, address(this), amount);\\r\\n        emit RewardAdded(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    function updateOracle(address newOracle) public onlyOwner {\\r\\n        theOracle = newOracle;\\r\\n    }\\r\\n\\r\\n    function setIdeaFund(address newFund) public onlyOwner {\\r\\n        ideaFund = newFund;\\r\\n    }\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    event Staked(address indexed user, uint256 amount);\\r\\n    event WithdrawControl(address indexed user, uint256 amount); \\r\\n    event WithdrawnWithReductionShare(address indexed user, uint256 actualAmount);\\r\\n    event RewardPaid(address indexed user, uint256 reward);\\r\\n    event RewardAdded(address indexed user, uint256 reward);\\r\\n}\"\r\n    },\r\n    \"/C/Coding/lfBTC-Seigniorage/contracts/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface IOracle {\\n    function priceOf(address token) external view returns (uint256 priceOfToken);\\n    function wbtcPriceOne() external view returns (uint256 priceOfwBTC);\\n    function pairFor(address _factor, address _token1, address _token2) external view returns (address pairaddy);\\n}\"\r\n    },\r\n    \"/C/Coding/lfBTC-Seigniorage/contracts/utils/ContractGuard.sol\": {\r\n      \"content\": \"\\npragma solidity >=0.6.0;\\n\\ncontract ContractGuard {\\n    mapping(uint256 => mapping(address => bool)) private _status;\\n\\n    function checkSameOriginReentranted() internal view returns (bool) {\\n        return _status[block.number][tx.origin];\\n    }\\n\\n    function checkSameSenderReentranted() internal view returns (bool) {\\n        return _status[block.number][msg.sender];\\n    }\\n\\n    modifier onlyOneBlock() {\\n        require(\\n            !checkSameOriginReentranted(),\\n            'ContractGuard: one block, one function'\\n        );\\n        require(\\n            !checkSameSenderReentranted(),\\n            'ContractGuard: one block, one function'\\n        );\\n\\n        _;\\n\\n        _status[block.number][tx.origin] = true;\\n        _status[block.number][msg.sender] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"/C/Coding/lfBTC-Seigniorage/contracts/utils/Operator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/GSN/Context.sol';\\r\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\r\\n\\r\\ncontract Operator is Context, Ownable {\\r\\n    address private _operator;\\r\\n\\r\\n    event OperatorTransferred(\\r\\n        address indexed previousOperator,\\r\\n        address indexed newOperator\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        _operator = _msgSender();\\r\\n        emit OperatorTransferred(address(0), _operator);\\r\\n    }\\r\\n\\r\\n    function operator() public view returns (address) {\\r\\n        return _operator;\\r\\n    }\\r\\n\\r\\n    modifier onlyOperator() {\\r\\n        require(\\r\\n            _operator == msg.sender,\\r\\n            'operator: caller is not the operator'\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isOperator() public view returns (bool) {\\r\\n        return _msgSender() == _operator;\\r\\n    }\\r\\n\\r\\n    function transferOperator(address newOperator_) public onlyOwner {\\r\\n        _transferOperator(newOperator_);\\r\\n    }\\r\\n\\r\\n    function _transferOperator(address newOperator_) internal {\\r\\n        require(\\r\\n            newOperator_ != address(0),\\r\\n            'operator: zero address given for new operator'\\r\\n        );\\r\\n        emit OperatorTransferred(address(0), newOperator_);\\r\\n        _operator = newOperator_;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Coding/lfBTC-Seigniorage/contracts/utils/ShareWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.6.0;\\r\\n\\r\\nimport '@openzeppelin/contracts/math/Math.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\r\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\r\\n\\r\\nabstract contract ShareWrapper {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    address public share; //LIFT\\r\\n    address public control; //CTRL\\r\\n\\r\\n    uint256 private _totalSupplyShare;\\r\\n    uint256 private _totalSupplyControl;\\r\\n\\r\\n    mapping(address => uint256) private _shareBalances;\\r\\n    mapping(address => uint256) private _controlBalances;\\r\\n\\r\\n    function gettotalSupplyShare() public view returns (uint256) {\\r\\n        return _totalSupplyShare;\\r\\n    }\\r\\n\\r\\n    function gettotalSupplyControl() public view returns (uint256) {\\r\\n        return _totalSupplyControl;\\r\\n    }\\r\\n\\r\\n    function getbalanceOfShare(address account) public view returns (uint256) {\\r\\n        return _shareBalances[account];\\r\\n    }\\r\\n\\r\\n    function getbalanceOfControl(address account) public view returns (uint256) {\\r\\n        return _controlBalances[account];\\r\\n    }\\r\\n\\r\\n    function settotalSupplyShare(uint256 amount) internal {\\r\\n        _totalSupplyShare = amount;\\r\\n    }\\r\\n\\r\\n    function setbalanceOfShare(address account, uint256 amount) internal {\\r\\n        _shareBalances[account] = amount;\\r\\n    }\\r\\n\\r\\n    function stakeShare(uint256 amount) public virtual {        \\r\\n        stakeShareForThirdParty(msg.sender, msg.sender, amount);\\r\\n    }\\r\\n \\r\\n    function stakeShareForThirdParty(address staker, address from, uint256 amount) public virtual {\\r\\n        _totalSupplyShare = _totalSupplyShare.add(amount);\\r\\n        _shareBalances[staker] = _shareBalances[staker].add(amount);\\r\\n        IERC20(share).safeTransferFrom(from, address(this), amount);\\r\\n    }\\r\\n\\r\\n    function stakeControl(uint256 amount) public virtual {\\r\\n        stakeControlForThirdParty(msg.sender, msg.sender, amount);\\r\\n    }    \\r\\n\\r\\n    function stakeControlForThirdParty(address staker, address from, uint256 amount) public virtual {\\r\\n        _totalSupplyControl = _totalSupplyControl.add(amount);\\r\\n        _controlBalances[staker] = _controlBalances[staker].add(amount);\\r\\n        IERC20(control).safeTransferFrom(from, address(this), amount);\\r\\n    }\\r\\n\\r\\n    function withdrawControl(uint256 amount) public virtual {\\r\\n        uint256 stakerBalance = _controlBalances[msg.sender];\\r\\n        require(\\r\\n            stakerBalance >= amount,\\r\\n            'Boardroom: withdraw request greater than staked amount'\\r\\n        );\\r\\n        _totalSupplyControl = _totalSupplyControl.sub(amount);\\r\\n        _controlBalances[msg.sender] = stakerBalance.sub(amount);\\r\\n        IERC20(control).safeTransfer(msg.sender, amount);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_share\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_control\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ideafund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_theOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOperator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawControl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnWithReductionShare\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocateSeigniorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"control\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getLastControlSnapshotIndexOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getLastShareSnapshotIndexOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedAmountsShare\",\"outputs\":[{\"internalType\":\"uint256[2][]\",\"name\":\"earned\",\"type\":\"uint256[2][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getbalanceOfControl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getbalanceOfShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gettotalSupplyControl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gettotalSupplyShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestShareSnapshotIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerControl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFund\",\"type\":\"address\"}],\"name\":\"setIdeaFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"share\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeControlForThirdParty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeShareForThirdParty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator_\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedTimeStamp\",\"type\":\"uint256\"}],\"name\":\"withdrawShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawShareDontCallMeUnlessYouAreCertain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Boardroom","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f9209d900f7ad1dc45376a2caa61c78f6dea53b6000000000000000000000000a31fdbaa772745d11843efeda9922dcbf5460672000000000000000000000000918b4fdbc30b628564e07fd2120009b0078f434300000000000000000000000030216adbbf2958a73c5930721fd96fec3030edeb","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}