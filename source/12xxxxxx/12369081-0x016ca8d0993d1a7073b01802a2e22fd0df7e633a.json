{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ManagerLike {\r\n    function collateralTypes(uint) external view returns (bytes32);\r\n    function ownsSAFE(uint) external view returns (address);\r\n    function safes(uint) external view returns (address);\r\n    function safeEngine() external view returns (address);\r\n}\r\n\r\ninterface GetSafesLike {\r\n    function getSafesAsc(address, address) external view returns (uint[] memory, address[] memory, bytes32[] memory);\r\n}\r\n\r\ninterface SAFEEngineLike {\r\n    function collateralTypes(bytes32) external view returns (uint, uint, uint, uint, uint);\r\n    function coinBalance(address) external view returns (uint);\r\n    function safes(bytes32, address) external view returns (uint, uint);\r\n    function tokenCollateral(bytes32, address) external view returns (uint);\r\n}\r\n\r\ninterface TaxCollectorLike {\r\n    function collateralTypes(bytes32) external view returns (uint, uint);\r\n    function globalStabilityFee() external view returns (uint);\r\n}\r\n\r\ninterface OracleRelayerLike {\r\n    function collateralTypes(bytes32) external view returns (OracleLike, uint, uint);\r\n    function redemptionRate() external view returns (uint);\r\n\r\n}\r\n\r\ninterface OracleLike {\r\n    function getResultWithValidity() external view returns (bytes32, bool);\r\n}\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        z = x - y <= x ? x - y : 0;\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n\r\n    struct SafeData {\r\n        uint id;\r\n        address owner;\r\n        string colType;\r\n        uint collateral;\r\n        uint debt;\r\n        uint adjustedDebt;\r\n        uint liquidatedCol;\r\n        uint borrowRate;\r\n        uint colPrice;\r\n        uint liquidationRatio;\r\n        address safeAddress;\r\n    }\r\n\r\n    struct ColInfo {\r\n        uint borrowRate;\r\n        uint price;\r\n        uint liquidationRatio;\r\n        uint debtCeiling;\r\n        uint debtFloor;\r\n        uint totalDebt;\r\n    }\r\n\r\n    struct ReflexerAddresses {\r\n        address manager;\r\n        address safeEngine;\r\n        address taxCollector;\r\n        address oracleRelayer;\r\n        address getSafes;\r\n    }\r\n\r\n    /**\r\n     * @dev get Reflexer Address contract\r\n     */\r\n    function getReflexerAddresses() public pure returns (ReflexerAddresses memory) {\r\n        return ReflexerAddresses(\r\n            0xEfe0B4cA532769a3AE758fD82E1426a03A94F185, // manager\r\n            0xCC88a9d330da1133Df3A7bD823B95e52511A6962, // safeEngine\r\n            0xcDB05aEda142a1B0D6044C09C64e4226c1a281EB, // taxCollector\r\n            0x4ed9C0dCa0479bC64d8f4EB3007126D5791f7851, // oracleRelayer\r\n            0xdf4BC9aA98cC8eCd90Ba2BEe73aD4a1a9C8d202B  // getSafes\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Convert String to bytes32.\r\n    */\r\n    function stringToBytes32(string memory str) internal pure returns (bytes32 result) {\r\n        require(bytes(str).length != 0, \"String-Empty\");\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            result := mload(add(str, 32))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Convert bytes32 to String.\r\n    */\r\n    function bytes32ToString(bytes32 _bytes32) internal pure returns (string memory) {\r\n        bytes32  _temp;\r\n        uint count;\r\n        for (uint256 i; i < 32; i++) {\r\n            _temp = _bytes32[i];\r\n            if( _temp != bytes32(0)) {\r\n                count += 1;\r\n            }\r\n        }\r\n        bytes memory bytesArray = new bytes(count);\r\n        for (uint256 i; i < count; i++) {\r\n                bytesArray[i] = (_bytes32[i]);\r\n        }\r\n        return (string(bytesArray));\r\n    }\r\n\r\n\r\n    function getFee(bytes32 collateralType) internal view returns (uint fee) {\r\n        address taxCollector = getReflexerAddresses().taxCollector;\r\n        (uint stabilityFee,) = TaxCollectorLike(taxCollector).collateralTypes(collateralType);\r\n        uint globalStabilityFee = TaxCollectorLike(taxCollector).globalStabilityFee();\r\n        fee = add(stabilityFee, globalStabilityFee);\r\n    }\r\n\r\n    function getColPrice(bytes32 collateralType) internal view returns (uint price) {\r\n        address oracleRelayer = getReflexerAddresses().oracleRelayer;\r\n        address safeEngine = getReflexerAddresses().safeEngine;\r\n        (, uint safetyCRatio,) = OracleRelayerLike(oracleRelayer).collateralTypes(collateralType);\r\n        (,,uint spotPrice,,) = SAFEEngineLike(safeEngine).collateralTypes(collateralType);\r\n        price = rmul(safetyCRatio, spotPrice);\r\n    }\r\n\r\n    function getColRatio(bytes32 collateralType) internal view returns (uint ratio) {\r\n        address oracleRelayer = getReflexerAddresses().oracleRelayer;\r\n        (, ratio,) = OracleRelayerLike(oracleRelayer).collateralTypes(collateralType);\r\n    }\r\n\r\n    function getDebtState(bytes32 collateralType) internal view returns (uint debtCeiling, uint debtFloor, uint totalDebt) {\r\n        address safeEngine = getReflexerAddresses().safeEngine;\r\n        (uint globalDebt,uint rate,,uint debtCeilingRad, uint debtFloorRad) = SAFEEngineLike(safeEngine).collateralTypes(collateralType);\r\n        debtCeiling = debtCeilingRad / 10 ** 45;\r\n        debtFloor = debtFloorRad / 10 ** 45;\r\n        totalDebt = rmul(globalDebt, rate);\r\n    }\r\n}\r\n\r\n\r\ncontract SafeResolver is Helpers {\r\n     function getSafes(address owner) external view returns (SafeData[] memory) {\r\n        address manager = getReflexerAddresses().manager;\r\n        address safeManger = getReflexerAddresses().getSafes;\r\n\r\n        (uint[] memory ids, address[] memory handlers, bytes32[] memory collateralTypes) = GetSafesLike(safeManger).getSafesAsc(manager, owner);\r\n        SafeData[] memory safes = new SafeData[](ids.length);\r\n\r\n        for (uint i = 0; i < ids.length; i++) {\r\n            (uint collateral, uint debt) = SAFEEngineLike(ManagerLike(manager).safeEngine()).safes(collateralTypes[i], handlers[i]);\r\n            (,uint rate, uint priceMargin,,) = SAFEEngineLike(ManagerLike(manager).safeEngine()).collateralTypes(collateralTypes[i]);\r\n            uint safetyCRatio = getColRatio(collateralTypes[i]);\r\n\r\n            safes[i] = SafeData(\r\n                ids[i],\r\n                owner,\r\n                bytes32ToString(collateralTypes[i]),\r\n                collateral,\r\n                debt,\r\n                rmul(debt,rate),\r\n                SAFEEngineLike(ManagerLike(manager).safeEngine()).tokenCollateral(collateralTypes[i], handlers[i]),\r\n                getFee(collateralTypes[i]),\r\n                rmul(priceMargin, safetyCRatio),\r\n                safetyCRatio,\r\n                handlers[i]\r\n            );\r\n        }\r\n        return safes;\r\n    }\r\n\r\n    function getSafeById(uint id) external view returns (SafeData memory) {\r\n        address manager = getReflexerAddresses().manager;\r\n        address handler = ManagerLike(manager).safes(id);\r\n        bytes32 collateralType = ManagerLike(manager).collateralTypes(id);\r\n\r\n        (uint collateral, uint debt) = SAFEEngineLike(ManagerLike(manager).safeEngine()).safes(collateralType, handler);\r\n        (,uint rate, uint priceMargin,,) = SAFEEngineLike(ManagerLike(manager).safeEngine()).collateralTypes(collateralType);\r\n\r\n        uint safetyCRatio = getColRatio(collateralType);\r\n\r\n        uint feeRate = getFee(collateralType);\r\n        SafeData memory safe = SafeData(\r\n            id,\r\n            ManagerLike(manager).ownsSAFE(id),\r\n            bytes32ToString(collateralType),\r\n            collateral,\r\n            debt,\r\n            rmul(debt,rate),\r\n            SAFEEngineLike(ManagerLike(manager).safeEngine()).tokenCollateral(collateralType, handler),\r\n            feeRate,\r\n            rmul(priceMargin, safetyCRatio),\r\n            safetyCRatio,\r\n            handler\r\n        );\r\n        return safe;\r\n    }\r\n\r\n    function getColInfo(string[] memory name) public view returns (ColInfo[] memory) {\r\n        ColInfo[] memory colInfo = new ColInfo[](name.length);\r\n\r\n        for (uint i = 0; i < name.length; i++) {\r\n            bytes32 collateralType = stringToBytes32(name[i]);\r\n            (uint debtCeiling, uint debtFloor, uint totalDebt) = getDebtState(collateralType);\r\n            colInfo[i] = ColInfo(\r\n                getFee(collateralType),\r\n                getColPrice(collateralType),\r\n                getColRatio(collateralType),\r\n                debtCeiling,\r\n                debtFloor,\r\n                totalDebt\r\n            );\r\n        }\r\n        return colInfo;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract RedemptionRateResolver is SafeResolver {\r\n    function getRedemptionRate() external view returns (uint redemptionRate) {\r\n        address oracleRelayer = getReflexerAddresses().oracleRelayer;\r\n        redemptionRate = OracleRelayerLike(oracleRelayer).redemptionRate();\r\n    }\r\n}\r\n\r\n\r\ncontract InstaReflexerResolver is RedemptionRateResolver {\r\n    string public constant name = \"Reflexer-Resolver-v1\";\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"name\",\"type\":\"string[]\"}],\"name\":\"getColInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtCeiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtFloor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.ColInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redemptionRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReflexerAddresses\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"safeEngine\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"taxCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleRelayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"getSafes\",\"type\":\"address\"}],\"internalType\":\"struct Helpers.ReflexerAddresses\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getSafeById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"colType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adjustedDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidatedCol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"safeAddress\",\"type\":\"address\"}],\"internalType\":\"struct Helpers.SafeData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getSafes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"colType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adjustedDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidatedCol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"safeAddress\",\"type\":\"address\"}],\"internalType\":\"struct Helpers.SafeData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"InstaReflexerResolver","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0b8c3994752352e4a96c63bbf939a24c7963e536163d68060a486429c4e0debd"}]}