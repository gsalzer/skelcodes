{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/v076/Token/Handlers/post_first_rebasing/OVLTransferHandler.sol\": {\r\n      \"content\": \"// DELTA-BUG-BOUNTY\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../../../libs/Address.sol\\\";\\nimport \\\"../../../libs/SafeMath.sol\\\";\\n\\nimport \\\"../../Common/OVLBase.sol\\\";\\nimport \\\"../../../../common/OVLTokenTypes.sol\\\";\\nimport \\\"../../Common/OVLVestingCalculator.sol\\\";\\n\\nimport \\\"../../../../interfaces/IOVLTransferHandler.sol\\\";\\nimport \\\"../../../../interfaces/IDeltaDistributor.sol\\\";\\nimport \\\"../../../../interfaces/IDeltaToken.sol\\\";\\n\\ncontract OVLTransferHandler is OVLBase, OVLVestingCalculator, IOVLTransferHandler {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    address public constant UNI_DELTA_WETH_PAIR = 0x9EA3b5b4EC044b70375236A281986106457b20EF;\\n    address public constant DEEP_FARMING_VAULT = 0x9fE9Bb6B66958f2271C4B0aD23F6E8DDA8C221BE;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    constructor(address, address) { // ignored props\\n\\n    }\\n\\n    function _removeBalanceFromSender(UserInformation storage senderInfo, address sender, bool immatureReceiverWhitelisted, uint256 amount) internal returns (uint256 totalRemoved) {\\n        uint256 mostMatureTxIndex = senderInfo.mostMatureTxIndex;\\n        uint256 lastInTxIndex = senderInfo.lastInTxIndex;\\n\\n        // We check if recipent can get immature tokens, if so we go from the most imature first to be most fair to the user\\n        if (immatureReceiverWhitelisted) {\\n\\n            //////\\n            ////\\n            // we go from the least mature balance to the msot mature meaning --\\n            ////\\n            /////\\n            uint256 accumulatedBalance;\\n            while (true) {\\n\\n                uint256 leastMatureTxAmount = vestingTransactions[sender][lastInTxIndex].amount;\\n                // Can never underflow due to if conditional\\n                uint256 remainingBalanceNeeded = amount - accumulatedBalance;\\n                if (leastMatureTxAmount >= remainingBalanceNeeded) {\\n                    // We got enough in this bucket to cover the amount\\n                    // We remove it from total and dont adjust the fully vesting timestamp\\n                    // Because there might be tokens left still in it\\n                    totalRemoved += remainingBalanceNeeded;\\n                    vestingTransactions[sender][lastInTxIndex].amount = leastMatureTxAmount - remainingBalanceNeeded; // safe math already checked\\n                    // We got what we wanted we leave the loop\\n                    break;\\n                } else {\\n                    //we add the whole amount of this bucket to the accumulated balance\\n                    accumulatedBalance = accumulatedBalance.add(leastMatureTxAmount);\\n                    totalRemoved += leastMatureTxAmount;\\n                    delete vestingTransactions[sender][lastInTxIndex];\\n                    // And go to the more mature tx\\n\\n                    // If we can't get enough in this tx and this is the last one, then we bail\\n                    if (lastInTxIndex == mostMatureTxIndex) {\\n                        // If we still have enough to cover in the mature balance we use that\\n                        uint256 maturedBalanceNeeded = amount - accumulatedBalance;\\n                        // Exhaustive underflow check\\n                    \\n                        senderInfo.maturedBalance = senderInfo.maturedBalance.sub(maturedBalanceNeeded, \\\"OVLTransferHandler: Insufficient funds\\\");\\n                        totalRemoved += maturedBalanceNeeded;\\n                        break;\\n                    }\\n\\n                    // Loop over to the previous one\\n                    if (lastInTxIndex == 0) {\\n                        lastInTxIndex = QTY_EPOCHS;\\n                    }\\n                    lastInTxIndex--;\\n                }\\n\\n            }\\n             // We write to storage the lastTx Index, which was in memory and we looped over it (or not)\\n            senderInfo.lastInTxIndex = lastInTxIndex;\\n            return totalRemoved; \\n            // End of logic in case reciever is whitelisted ( return assures)\\n        }\\n\\n        uint256 maturedBalance = senderInfo.maturedBalance;\\n\\n        //////\\n        ////\\n        // we go from the most mature balance up\\n        ////\\n        /////\\n\\n        if (maturedBalance >= amount) {\\n            senderInfo.maturedBalance = maturedBalance - amount; // safemath safe\\n            totalRemoved = amount;\\n        } else {\\n            // Possibly using a partially vested transaction\\n            uint256 accumulatedBalance = maturedBalance;\\n            totalRemoved = maturedBalance;\\n\\n            // Use the entire balance to start\\n            senderInfo.maturedBalance = 0;\\n\\n            while (amount > accumulatedBalance) {\\n                VestingTransaction memory mostMatureTx = vestingTransactions[sender][mostMatureTxIndex];\\n                // Guaranteed by `while` condition\\n                uint256 remainingBalanceNeeded = amount - accumulatedBalance;\\n\\n                // Reduce this transaction as the final one\\n                VestingTransactionDetailed memory dtx = getTransactionDetails(mostMatureTx, block.timestamp);\\n                // credit is how much i got from this bucket\\n                // So if i didnt get enough from this bucket here we zero it and move to the next one\\n                if (remainingBalanceNeeded >= dtx.mature) {\\n                    totalRemoved += dtx.amount;\\n                    accumulatedBalance = accumulatedBalance.add(dtx.mature);\\n                    \\n                    delete vestingTransactions[sender][mostMatureTxIndex]; // refund gas\\n                } else {\\n                    // Remove the only needed amount\\n                    // Calculating debt based on the actual clamped credit eliminates\\n                    // the need for debit/credit ratio checks we initially had.\\n                    // Big gas savings using this one weird trick. Vitalik HATES it.\\n                    uint256 outputDebit = calculateTransactionDebit(dtx, remainingBalanceNeeded, block.timestamp);\\n                    remainingBalanceNeeded = outputDebit.add(remainingBalanceNeeded);\\n                    totalRemoved += remainingBalanceNeeded;\\n\\n                    // We dont need to adjust timestamp\\n                    vestingTransactions[sender][mostMatureTxIndex].amount = mostMatureTx.amount.sub(remainingBalanceNeeded, \\\"Removing too much from bucket\\\");\\n                    break;\\n                }\\n\\n                // If we just went throught he lasttx bucket, and we did not get enough then we bail\\n                // Note if its the lastTransaction it already had a break;\\n                if (mostMatureTxIndex == lastInTxIndex && accumulatedBalance < amount) { // accumulatedBalance < amount because of the case its exactly equal with first if\\n                    // Avoid ever looping around a second time because that would be bad\\n                    revert(\\\"OVLTransferHandler: Insufficient funds\\\");\\n                }\\n\\n                // We just emptied this so most mature one must be the next one\\n                mostMatureTxIndex++;\\n\\n                if(mostMatureTxIndex == QTY_EPOCHS) {\\n                    mostMatureTxIndex = 0;\\n                }\\n            }\\n            // We remove the entire amount removed \\n            // We already added amount\\n            senderInfo.mostMatureTxIndex = mostMatureTxIndex;\\n        }\\n    }\\n\\n\\n    // function _transferTokensToRecipient(address recipient, UserInformation memory senderInfo, UserInformation memory recipientInfo, uint256 amount) internal {\\n    function _transferTokensToRecipient(UserInformation storage recipientInfo, bool isSenderWhitelisted, address recipient, uint256 amount) internal {\\n        // If the sender can send fully or this recipent is whitelisted to not get vesting we just add it to matured balance\\n        (bool noVestingWhitelisted, uint256 maturedBalance, uint256 lastTransactionIndex) = (recipientInfo.noVestingWhitelisted, recipientInfo.maturedBalance, recipientInfo.lastInTxIndex);\\n\\n        if(isSenderWhitelisted || noVestingWhitelisted) {\\n            recipientInfo.maturedBalance = maturedBalance.add(amount);\\n            return;\\n        }\\n\\n        VestingTransaction storage lastTransaction = vestingTransactions[recipient][lastTransactionIndex];\\n  \\n        // Do i fit in this bucket?\\n        // conditions for fitting inside a bucket are\\n        // 1 ) Either its less than 2 days old\\n        // 2 ) Or its more than 14 days old\\n        // 3 ) Or we move to the next one - which is empty or already matured\\n        // Note that only the first bucket checked can logically be less than 2 days old, this is a important optimization\\n        // So lets take care of that case now, so its not checked in the loop.\\n\\n        uint256 timestampNow = block.timestamp;\\n        uint256 fullVestingTimestamp = lastTransaction.fullVestingTimestamp;\\n\\n        if (timestampNow >= fullVestingTimestamp) {// Its mature we move it to mature and override or we move to the next one, which is always either 0 or matured\\n            recipientInfo.maturedBalance = maturedBalance.add(lastTransaction.amount);\\n\\n            lastTransaction.amount = amount;\\n            lastTransaction.fullVestingTimestamp = timestampNow + FULL_EPOCH_TIME;\\n        } else if (fullVestingTimestamp >= timestampNow + SECONDS_PER_EPOCH * (QTY_EPOCHS - 1)) {// we add 12 days\\n            // we avoid overflows from 0 fullyvestedtimestamp\\n            // if fullyVestingTimestamp is bigger than that we should increment\\n            // but not bigger than fullyVesting\\n            // This check is exhaustive\\n            // If this is the case we just put it in this bucket.\\n            lastTransaction.amount = lastTransaction.amount.add(amount);\\n            /// No need to adjust timestamp`\\n        } else { \\n\\n            // We move into the next one\\n            lastTransactionIndex++; \\n\\n            if (lastTransactionIndex == QTY_EPOCHS) { lastTransactionIndex = 0; } // Loop over\\n\\n            recipientInfo.lastInTxIndex = lastTransactionIndex;\\n\\n            // To figure out if this is a empty bucket or a stale one\\n            // Its either the most mature one \\n            // Or its 0\\n            // There is no other logical options\\n            // If this is the most mature one then we go > with most mature\\n            uint256 mostMature = recipientInfo.mostMatureTxIndex;\\n            \\n            if (mostMature == lastTransactionIndex) {\\n                // It was the most mature one, so we have to increment the most mature index\\n                mostMature++;\\n\\n                if (mostMature == QTY_EPOCHS) { mostMature = 0; }\\n\\n                recipientInfo.mostMatureTxIndex = mostMature;\\n            }\\n\\n            VestingTransaction storage evenLatestTransaction = vestingTransactions[recipient][lastTransactionIndex];\\n\\n            // Its mature we move it to mature and override or we move to the next one, which is always either 0 or matured\\n            recipientInfo.maturedBalance = maturedBalance.add(evenLatestTransaction.amount);\\n\\n            evenLatestTransaction.amount = amount;\\n            evenLatestTransaction.fullVestingTimestamp = timestampNow + FULL_EPOCH_TIME;\\n        }\\n    }\\n\\n    function addAllowanceToDFV(address sender) internal {\\n        // If you transferFrom from anyone even 1 gwei unit\\n        // This will force dfv to have infinite allowance\\n        // But this is not abug because DFV has defacto infinite allowance becaose of this function\\n        // So there is no change\\n        _allowances[sender][DEEP_FARMING_VAULT] = uint(-1);\\n    }\\n\\n\\n\\n    function handleUniswapAdjustmenets() internal{\\n        uint256 newLPSupply = IERC20(UNI_DELTA_WETH_PAIR).balanceOf(UNI_DELTA_WETH_PAIR);\\n        require(newLPSupply >= lpTokensInPair, \\\"DELTAToken: Liquidity removals are forbidden\\\");\\n        // We allow people to bump the number of LP tokens inside the pair, but we dont allow them to go lower\\n        // Making liquidity withdrawals impossible\\n        // Because uniswap queries banaceOf before doing a burn, that means we can detect a inflow of LP tokens\\n        // But someone could send them and then reset with this function\\n        // This is why we \\\"lock\\\" the bigger amount here and dont allow a lower amount than the last time\\n        // Making it impossible to anyone who sent the liquidity tokens to the pair (which is nessesary to burn) not be able to burn them\\n        lpTokensInPair = newLPSupply;\\n\\n    }\\n\\n    // This function does not need authentication, because this is EXCLUSIVELY\\n    // ever meant to be called using delegatecall() from the main token.\\n    // The memory it modifies in DELTAToken is what effects user balances.\\n    function handleTransfer(address sender, address recipient, uint256 amount) external override {\\n            require(sender != recipient, \\\"DELTAToken: Can not send DELTA to yourself\\\");\\n            require(sender != address(0), \\\"ERC20: transfer from the zero address\\\"); \\n            require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n            \\n            /// Liquidity removal protection\\n            if (!liquidityRebasingPermitted && (sender == UNI_DELTA_WETH_PAIR || recipient == UNI_DELTA_WETH_PAIR)) {\\n                handleUniswapAdjustmenets();\\n            }\\n\\n            if(recipient == DEEP_FARMING_VAULT) {\\n                addAllowanceToDFV(sender);\\n            }\\n\\n            UserInformation storage recipientInfo = _userInformation[recipient];\\n            UserInformation storage senderInfo = _userInformation[sender];\\n            uint256 totalRemoved = _removeBalanceFromSender(senderInfo, sender, recipientInfo.immatureReceiverWhitelisted, amount);\\n            uint256 toDistributor = totalRemoved.sub(amount, \\\"OVLTransferHandler: Insufficient funds\\\");\\n\\n            // We remove from max balance totals\\n            senderInfo.maxBalance = senderInfo.maxBalance.sub(totalRemoved, \\\"OVLTransferHandler: Insufficient funds\\\");\\n\\n            // Sanity check\\n            require(totalRemoved >= amount, \\\"OVLTransferHandler: Insufficient funds\\\");\\n            // Max is 90% of total removed\\n            require(amount.mul(9) >= toDistributor, \\\"DELTAToken: Burned too many tokens\\\"); \\n            \\n            if(toDistributor > 0) {\\n                _creditDistributor(sender, toDistributor);\\n            }\\n            //////\\n            /// We add tokens to the recipient\\n            //////\\n            _transferTokensToRecipient(recipientInfo, senderInfo.fullSenderWhitelisted, recipient, amount);\\n            // We add to total balance for sanity checks and uniswap router\\n            recipientInfo.maxBalance = recipientInfo.maxBalance.add(amount);\\n\\n            emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _creditDistributor(address creditedBy, uint256 amount) internal {\\n        address _distributor = distributor; // gas savings for storage reads\\n        UserInformation storage distributorInfo = _userInformation[distributor];\\n        distributorInfo.maturedBalance = distributorInfo.maturedBalance.add(amount); // Should trigger an event here\\n        distributorInfo.maxBalance = distributorInfo.maxBalance.add(amount); \\n\\n        IDeltaDistributor(_distributor).creditUser(creditedBy, amount);\\n        emit Transfer(creditedBy, _distributor, amount);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/v076/libs/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v076/libs/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/v076/Token/Common/OVLBase.sol\": {\r\n      \"content\": \"// DELTA-BUG-BOUNTY\\npragma abicoder v2;\\npragma solidity ^0.7.6;\\n\\nimport \\\"./../../../common/OVLTokenTypes.sol\\\";\\n\\ncontract OVLBase {\\n    // Shared state begin v0\\n    mapping (address => VestingTransaction[QTY_EPOCHS]) public vestingTransactions;\\n    mapping (address => UserInformation) internal _userInformation;\\n    \\n    mapping (address => uint256) internal _maxPossibleBalances;\\n    mapping (address => mapping (address => uint256)) internal _allowances;\\n\\n    address public distributor;\\n    uint256 public lpTokensInPair;\\n    bool public liquidityRebasingPermitted;\\n\\n    uint256 [72] private _gap;\\n    // Shared state end of v0\\n}\"\r\n    },\r\n    \"contracts/common/OVLTokenTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// DELTA-BUG-BOUNTY\\n\\npragma solidity ^0.7.6;\\n\\nstruct VestingTransaction {\\n    uint256 amount;\\n    uint256 fullVestingTimestamp;\\n}\\n\\nstruct WalletTotals {\\n    uint256 mature;\\n    uint256 immature;\\n    uint256 total;\\n}\\n\\nstruct UserInformation {\\n    // This is going to be read from only [0]\\n    uint256 mostMatureTxIndex;\\n    uint256 lastInTxIndex;\\n    uint256 maturedBalance;\\n    uint256 maxBalance;\\n    bool fullSenderWhitelisted;\\n    // Note that recieving immature balances doesnt mean they recieve them fully vested just that senders can do it\\n    bool immatureReceiverWhitelisted;\\n    bool noVestingWhitelisted;\\n}\\n\\nstruct UserInformationLite {\\n    uint256 maturedBalance;\\n    uint256 maxBalance;\\n    uint256 mostMatureTxIndex;\\n    uint256 lastInTxIndex;\\n}\\n\\nstruct VestingTransactionDetailed {\\n    uint256 amount;\\n    uint256 fullVestingTimestamp;\\n    // uint256 percentVestedE4;\\n    uint256 mature;\\n    uint256 immature;\\n}\\n\\n\\nuint256 constant QTY_EPOCHS = 7;\\n\\nuint256 constant SECONDS_PER_EPOCH = 172800; // About 2days\\n\\nuint256 constant FULL_EPOCH_TIME = SECONDS_PER_EPOCH * QTY_EPOCHS;\\n\\n// Precision Multiplier -- this many zeros (23) seems to get all the precision needed for all 18 decimals to be only off by a max of 1 unit\\nuint256 constant PM = 1e23;\\n\"\r\n    },\r\n    \"contracts/v076/Token/Common/OVLVestingCalculator.sol\": {\r\n      \"content\": \"// DELTA-BUG-BOUNTY\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./../../../common/OVLTokenTypes.sol\\\";\\nimport \\\"../../../interfaces/IOVLVestingCalculator.sol\\\";\\nimport \\\"../../libs/SafeMath.sol\\\";\\n\\ncontract OVLVestingCalculator is IOVLVestingCalculator {\\n    using SafeMath for uint256;\\n\\n    function getTransactionDetails(VestingTransaction memory _tx) public view override returns (VestingTransactionDetailed memory dtx) {\\n        return getTransactionDetails(_tx, block.timestamp);\\n    }\\n\\n    function getTransactionDetails(VestingTransaction memory _tx, uint256 _blockTimestamp) public pure override returns (VestingTransactionDetailed memory dtx) {\\n        if(_tx.fullVestingTimestamp == 0) {\\n            return dtx;\\n        }\\n\\n        dtx.amount = _tx.amount;\\n        dtx.fullVestingTimestamp = _tx.fullVestingTimestamp;\\n\\n        // at precision E4, 1000 is 10%\\n        uint256 timeRemaining;\\n        if(_blockTimestamp >= dtx.fullVestingTimestamp) {\\n            // Fully vested\\n            dtx.mature = _tx.amount;\\n            return dtx;\\n        } else {\\n            timeRemaining = dtx.fullVestingTimestamp - _blockTimestamp;\\n        }\\n\\n        uint256 percentWaitingToVestE4 = timeRemaining.mul(1e4) / FULL_EPOCH_TIME;\\n        uint256 percentWaitingToVestE4Scaled = percentWaitingToVestE4.mul(90) / 100;\\n\\n        dtx.immature = _tx.amount.mul(percentWaitingToVestE4Scaled) / 1e4;\\n        dtx.mature = _tx.amount.sub(dtx.immature);\\n    }\\n\\n    function getMatureBalance(VestingTransaction memory _tx, uint256 _blockTimestamp) public pure override returns (uint256 mature) {\\n        if(_tx.fullVestingTimestamp == 0) {\\n            return 0;\\n        }\\n        \\n        uint256 timeRemaining;\\n        if(_blockTimestamp >= _tx.fullVestingTimestamp) {\\n            // Fully vested\\n            return _tx.amount;\\n        } else {\\n            timeRemaining = _tx.fullVestingTimestamp - _blockTimestamp;\\n        }\\n\\n        uint256 percentWaitingToVestE4 = timeRemaining.mul(1e4) / FULL_EPOCH_TIME;\\n        uint256 percentWaitingToVestE4Scaled = percentWaitingToVestE4.mul(90) / 100;\\n\\n        mature = _tx.amount.mul(percentWaitingToVestE4Scaled) / 1e4;\\n        mature = _tx.amount.sub(mature); // the subtracted value represents the immature balance at this point\\n    }\\n\\n    function calculateTransactionDebit(VestingTransactionDetailed memory dtx, uint256 matureAmountNeeded, uint256 currentTimestamp) public pure override returns (uint256 outputDebit) {\\n        if(dtx.fullVestingTimestamp > currentTimestamp) {\\n            // This will be between 0 and 100*pm representing how much of the mature pool is needed\\n            uint256 percentageOfMatureCoinsConsumed = matureAmountNeeded.mul(PM).div(dtx.mature);\\n            require(percentageOfMatureCoinsConsumed <= PM, \\\"OVLTransferHandler: Insufficient funds\\\");\\n\\n            // Calculate the number of immature coins that need to be debited based on this ratio\\n            outputDebit = dtx.immature.mul(percentageOfMatureCoinsConsumed) / PM;\\n        }\\n\\n        // shouldnt this use outputDebit\\n        require(dtx.amount <= dtx.mature.add(dtx.immature), \\\"DELTAToken: Balance maximum problem\\\"); // Just in case\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOVLTransferHandler.sol\": {\r\n      \"content\": \"pragma experimental ABIEncoderV2;\\npragma solidity ^0.7.6;\\n\\ninterface IOVLTransferHandler {\\n    function handleTransfer(address sender, address recipient, uint256 amount) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDeltaDistributor.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.6;\\n\\ninterface IDeltaDistributor {\\n    function creditUser(address,uint256) external;\\n    function addDevested(address, uint256) external;\\n    function distribute() external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDeltaToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.7.6;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\"; \\n\\nimport \\\"../common/OVLTokenTypes.sol\\\";\\n\\ninterface IDeltaToken is IERC20 {\\n    function vestingTransactions(address, uint256) external view returns (VestingTransaction memory);\\n    function getUserInfo(address) external view returns (UserInformationLite memory);\\n    function getMatureBalance(address, uint256) external view returns (uint256);\\n    function liquidityRebasingPermitted() external view returns (bool);\\n    function lpTokensInPair() external view returns (uint256);\\n    function governance() external view returns (address);\\n    function performLiquidityRebasing() external;\\n    function distributor() external view returns (address);\\n    function totalsForWallet(address ) external view returns (WalletTotals memory totals);\\n    function adjustBalanceOfNoVestingAccount(address, uint256,bool) external;\\n    function userInformation(address user) external view returns (UserInformation memory);\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IOVLVestingCalculator.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../common/OVLTokenTypes.sol\\\";\\n\\ninterface IOVLVestingCalculator {\\n    function getTransactionDetails(VestingTransaction memory _tx) external view returns (VestingTransactionDetailed memory dtx);\\n\\n    function getTransactionDetails(VestingTransaction memory _tx, uint256 _blockTimestamp) external pure returns (VestingTransactionDetailed memory dtx);\\n\\n    function getMatureBalance(VestingTransaction memory _tx, uint256 _blockTimestamp) external pure returns (uint256 mature);\\n\\n    function calculateTransactionDebit(VestingTransactionDetailed memory dtx, uint256 matureAmountNeeded, uint256 currentTimestamp) external pure returns (uint256 outputDebit);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEEP_FARMING_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNI_DELTA_WETH_PAIR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fullVestingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mature\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"immature\",\"type\":\"uint256\"}],\"internalType\":\"struct VestingTransactionDetailed\",\"name\":\"dtx\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"matureAmountNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"}],\"name\":\"calculateTransactionDebit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"outputDebit\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fullVestingTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct VestingTransaction\",\"name\":\"_tx\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"getMatureBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mature\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fullVestingTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct VestingTransaction\",\"name\":\"_tx\",\"type\":\"tuple\"}],\"name\":\"getTransactionDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fullVestingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mature\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"immature\",\"type\":\"uint256\"}],\"internalType\":\"struct VestingTransactionDetailed\",\"name\":\"dtx\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fullVestingTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct VestingTransaction\",\"name\":\"_tx\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"getTransactionDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fullVestingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mature\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"immature\",\"type\":\"uint256\"}],\"internalType\":\"struct VestingTransactionDetailed\",\"name\":\"dtx\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"handleTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityRebasingPermitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTokensInPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestingTransactions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fullVestingTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OVLTransferHandler","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000deadbeef00000000000000000000000000000000000000000000000000000000deadbeef","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}