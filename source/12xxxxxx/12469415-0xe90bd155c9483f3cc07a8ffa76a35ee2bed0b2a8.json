{"status":"1","message":"OK","result":[{"SourceCode":"// \"SPDX-License-Identifier: UNLICENSED\"\r\npragma solidity 0.7.4;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public admin;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() {\r\n    admin = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == admin);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newAdmin The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newAdmin) external onlyOwner {\r\n    require(newAdmin != address(0));\r\n    emit OwnershipTransferred(admin, newAdmin);\r\n    admin = newAdmin;\r\n  }\r\n}\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ninterface ERC721Basic {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n  function balanceOf(address _owner) external view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) external view returns (address _owner);\r\n\r\n  function approve(address _to, uint256 _tokenId) external;\r\n  function getApproved(uint256 _tokenId) external view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) external;\r\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) external;\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ninterface ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() external view returns (uint256);\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 _tokenId);\r\n  function tokenByIndex(uint256 _index) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ninterface ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string memory _name);\r\n  function symbol() external view returns (string memory _symbol);\r\n  function tokenURI(uint256 _tokenId) external view returns (string memory);\r\n}\r\n\r\n/**\r\n * @title ERC-165 Standard Interface Detection\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface ERC165 {\r\n  /// @notice Query if a contract implements an interface\r\n  /// @param interfaceID The interface identifier, as specified in ERC-165\r\n  /// @dev Interface identification is specified in ERC-165. This function\r\n  ///  uses less than 30,000 gas.\r\n  /// @return `true` if the contract implements `interfaceID` and\r\n  ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n  function supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ninterface ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata, ERC165 {}\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n *  from ERC721 asset contracts.\r\n */\r\ninterface ERC721Receiver {\r\n  function onERC721Received(address _from, uint256 _tokenId, bytes memory _data) external returns(bytes4);\r\n}\r\n\r\ninterface ERC20 {\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\nlibrary String {\r\n  // From https://ethereum.stackexchange.com/questions/10811/solidity-concatenate-uint-into-a-string\r\n\r\n  function appendUintToString(string memory inStr, uint v) internal pure returns (string memory str) {\r\n    uint maxlength = 100;\r\n    bytes memory reversed = new bytes(maxlength);\r\n    uint i = 0;\r\n    while (v != 0) {\r\n      uint remainder = v % 10;\r\n      v = v / 10;\r\n      reversed[i++] = byte(uint8(48 + remainder));\r\n    }\r\n    bytes memory inStrb = bytes(inStr);\r\n    bytes memory s = new bytes(inStrb.length + i);\r\n    uint j;\r\n    for (j = 0; j < inStrb.length; j++) {\r\n      s[j] = inStrb[j];\r\n    }\r\n    for (j = 0; j < i; j++) {\r\n      s[j + inStrb.length] = reversed[i - 1 - j];\r\n    }\r\n    str = string(s);\r\n  }\r\n}\r\n\r\ncontract Main is ERC721, Ownable {\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Token name\r\n  string constant private _name = \"OSS BUIDL Token\";\r\n\r\n  // Token symbol\r\n  string constant private _symbol = \"BUIDL\";\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 constant private ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  // Public URL\r\n  string public publicURL = \"https://hackerlink.io/buidl/\";\r\n\r\n  // Mapping from token ID to owner\r\n  mapping(uint256 => address) internal _tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping(uint256 => address) internal _tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping(address => uint256) internal _ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping(address => mapping(address => bool)) internal _operatorApprovals;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal _allTokens;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal _ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal _ownedTokensIndex;\r\n\r\n  struct Buidl {\r\n    uint256 cid;\r\n    uint256 originalPrice;\r\n    uint256 currentPrice;\r\n    uint256 txs;\r\n    address miner;\r\n    string remarks;\r\n  }\r\n  mapping(uint256 => Buidl) internal _buidls;\r\n\r\n  // ERC20 token used in NFT transaction\r\n  ERC20 public currency;\r\n\r\n  bool public miningTax = true;\r\n\r\n  uint256 constant public UNIT = 1000;\r\n  uint256 constant public MINER_TAX = 20; // 2%\r\n  uint256 constant public PLATFORM_TAX = 10; // 1%\r\n  uint256 constant public OWNER_INCOME = 700; // 70%\r\n  uint256 constant public MINER_INCOME = 200; // 20%\r\n  // uint256 constant public PLATFORM_INCOME = 100; // 1 - OWNER_INCOME - MINER_INCOME = 10%\r\n\r\n/////////////////////////////////////////// ERC165 //////////////////////////////////////////////\r\n\r\n  bytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\r\n  bytes4 constant private INTERFACE_SIGNATURE_ERC721 = 0x80ac58cd;\r\n  bytes4 constant private INTERFACE_SIGNATURE_ERC721METADATA = 0x5b5e139f;\r\n  bytes4 constant private INTERFACE_SIGNATURE_ERC721ENUMERABLE = 0x780e9d63;\r\n\r\n  function supportsInterface(bytes4 _interfaceId) override external pure returns (bool) {\r\n    if (\r\n      _interfaceId == INTERFACE_SIGNATURE_ERC165 ||\r\n      _interfaceId == INTERFACE_SIGNATURE_ERC721 ||\r\n      _interfaceId == INTERFACE_SIGNATURE_ERC721METADATA ||\r\n      _interfaceId == INTERFACE_SIGNATURE_ERC721ENUMERABLE\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n/////////////////////////////////////////// ERC165 //////////////////////////////////////////////\r\n\r\n  event PublicURL(string _url);\r\n  event MiningTax(bool _state);\r\n  event HarbergeBuy(uint256 indexed _tokenId, address indexed _buyer, uint256 _price, uint256 _txs);\r\n\r\n  constructor(ERC20 _currency) {\r\n    currency = _currency;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n   * @param _tokenId uint256 ID of the token to validate\r\n   */\r\n  modifier canTransfer(uint256 _tokenId) {\r\n    require(_isApprovedOrOwner(msg.sender, _tokenId));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() override external pure returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() override external pure returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token url\r\n   * @param _tokenId uint256 ID of the token to validate\r\n   * @return string representing the token url\r\n   */\r\n  function tokenURI(uint256 _tokenId) override public view returns (string memory) {\r\n    Buidl storage buidl = _buidls[_tokenId];\r\n    require(buidl.miner != address(0));\r\n    return (String.appendUintToString(publicURL, buidl.cid));\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) override public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return _ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) override public view returns (address) {\r\n    address owner = _tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) override external view returns (uint256) {\r\n    require(_index < balanceOf(_owner));\r\n    return _ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() override public view returns (uint256) {\r\n    return _allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * @dev Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) override external view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return _allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets the public URL by administrator\r\n   * @param _url new public URL\r\n   */\r\n  function setPublicURL(string memory _url) external onlyOwner {\r\n    publicURL = _url;\r\n    emit PublicURL(_url);\r\n  }\r\n\r\n  /**\r\n   * @dev Sets whether to charge mining tax or not by administrator\r\n   * @param _state mining tax state\r\n   */\r\n  function setMiningTax(bool _state) external onlyOwner {\r\n    miningTax = _state;\r\n    emit MiningTax(_state);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * @dev The zero address indicates there is no approved address.\r\n   * @dev There can only be one approved address per token at a given time.\r\n   * @dev Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) override external {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\r\n      _tokenApprovals[_tokenId] = _to;\r\n      emit Approval(owner, _to, _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for a the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) override public view returns (address) {\r\n    return _tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * @dev An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) override external {\r\n    require(_to != msg.sender);\r\n    _operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(address _owner, address _operator) override public view returns (bool) {\r\n    return _operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * @dev Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) override public canTransfer(_tokenId) {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    _clearApproval(_from, _tokenId);\r\n    _removeTokenFrom(_from, _tokenId);\r\n    _addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n   *  which is called upon a safe transfer, and return the magic value\r\n   *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n   *  the transfer is reverted.\r\n   * @dev Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) override public canTransfer(_tokenId) {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n   *  which is called upon a safe transfer, and return the magic value\r\n   *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n   *  the transfer is reverted.\r\n   * @dev Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) override public canTransfer(_tokenId) {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(_checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n////////////////////////////////////////////// MAIN //////////////////////////////////////////////\r\n\r\n  function mint(uint256 _initPrice, uint256 _cId, string memory _remarks) external {\r\n    uint256 tokenId = uint256(keccak256(abi.encodePacked(msg.sender, _cId)));\r\n    if (miningTax) {\r\n      uint256 tax = _initPrice.mul(PLATFORM_TAX) / UNIT;\r\n      require(currency.transferFrom(msg.sender, address(this), tax));\r\n    }\r\n    _mint(msg.sender, tokenId);\r\n    _buidls[tokenId] = Buidl(_cId, _initPrice, _initPrice, 0, msg.sender, _remarks);\r\n  }\r\n\r\n  function harbergeBuy(uint256 _tokenId, uint256 _newPrice) external {\r\n    address owner = ownerOf(_tokenId);\r\n\r\n    Buidl storage buidl = _buidls[_tokenId];\r\n    uint256 currentPrice = buidl.currentPrice;\r\n    require(_newPrice > currentPrice);\r\n\r\n    // |<------------------ newPrice ------------------>|\r\n    // |<-------- currentPrice -------->|<-- growing -->|<- tax ->|\r\n    // |<----------------------- totalSpend --------------------->|\r\n\r\n    // |<---------------- growing ---------------->|\r\n    // |<--------- 7 --------->|<--- 2 --->|<- 1 ->|\r\n    // |          OWNER        |   MINER   | PLATF |\r\n  \r\n    // |<------ tax ------>|\r\n    // |<--- 2 --->|<- 1 ->|\r\n    // |   MINER   | PLATF |\r\n\r\n    uint256 growing = _newPrice - currentPrice;\r\n    uint256 ownerIncome = growing.mul(OWNER_INCOME) / UNIT;\r\n    uint256 minerIncome = growing.mul(MINER_INCOME) / UNIT;\r\n  \r\n    uint256 minerTax = _newPrice.mul(MINER_TAX) / UNIT;\r\n    uint256 platformTax = _newPrice.mul(PLATFORM_TAX) / UNIT;\r\n\r\n    uint256 totalSpend = _newPrice.add(platformTax).add(minerTax);\r\n\r\n    require(currency.transferFrom(msg.sender, address(this), totalSpend));\r\n    require(currency.transfer(owner, ownerIncome.add(currentPrice)));\r\n    require(currency.transfer(buidl.miner, minerIncome.add(minerTax)));\r\n\r\n    uint256 txs = buidl.txs.add(1);\r\n    buidl.currentPrice = _newPrice;\r\n    buidl.txs = txs;\r\n\r\n    _clearApproval(owner, _tokenId);\r\n    _removeTokenFrom(owner, _tokenId);\r\n    _addTokenTo(msg.sender, _tokenId);\r\n\r\n    require(_checkAndCallSafeTransfer(owner, msg.sender, _tokenId, \"BUY\"));\r\n\r\n    emit Transfer(owner, msg.sender, _tokenId);\r\n    emit HarbergeBuy(_tokenId, msg.sender, _newPrice, txs);\r\n  }\r\n\r\n  function withdraw(uint256 _amount) external onlyOwner {\r\n    require(currency.transfer(admin, _amount));\r\n  }\r\n\r\n  function metadataOf(uint256 _tokenId) external view returns (\r\n    address owner,\r\n    uint256 cid,\r\n    uint256 originalPrice,\r\n    uint256 currentPrice,\r\n    uint256 txs,\r\n    address miner,\r\n    string memory url,\r\n    string memory remarks\r\n  ) {\r\n    owner = ownerOf(_tokenId);\r\n    Buidl storage buidl = _buidls[_tokenId];\r\n    cid = buidl.cid;\r\n    originalPrice = buidl.originalPrice;\r\n    currentPrice = buidl.currentPrice;\r\n    txs = buidl.txs;\r\n    miner = buidl.miner;\r\n    url = tokenURI(_tokenId);\r\n    remarks = buidl.remarks;\r\n  }\r\n\r\n////////////////////////////////////////////// MAIN //////////////////////////////////////////////\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function _isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\r\n    address owner = ownerOf(_tokenId);\r\n    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * @dev Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_tokenOwner[_tokenId] == address(0));\r\n    require(_to != address(0));\r\n    _addTokenTo(_to, _tokenId);\r\n    _allTokens.push(_tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * @dev Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function _clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (_tokenApprovals[_tokenId] != address(0)) {\r\n      _tokenApprovals[_tokenId] = address(0);\r\n      emit Approval(_owner, address(0), _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function _addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(_tokenOwner[_tokenId] == address(0));\r\n    _tokenOwner[_tokenId] = _to;\r\n    _ownedTokensCount[_to] = _ownedTokensCount[_to].add(1);\r\n  \r\n    uint256 length = _ownedTokens[_to].length;\r\n    _ownedTokens[_to].push(_tokenId);\r\n    _ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function _removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    _ownedTokensCount[_from] = _ownedTokensCount[_from].sub(1);\r\n    _tokenOwner[_tokenId] = address(0);\r\n\r\n    uint256 tokenIndex = _ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = _ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = _ownedTokens[_from][lastTokenIndex];\r\n\r\n    _ownedTokens[_from][tokenIndex] = lastToken;\r\n    _ownedTokensIndex[lastToken] = tokenIndex;\r\n\r\n    _ownedTokens[_from].pop();\r\n    _ownedTokensIndex[_tokenId] = 0;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * @dev The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function _checkAndCallSafeTransfer(address _from, address _to, uint256 _tokenId, bytes memory _data) internal returns (bool) {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_currency\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_txs\",\"type\":\"uint256\"}],\"name\":\"HarbergeBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"MiningTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"PublicURL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINER_INCOME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINER_TAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_INCOME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLATFORM_TAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"harbergeBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"metadataOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txs\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"miner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"remarks\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_remarks\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicURL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setMiningTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"}],\"name\":\"setPublicURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Main","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000bc4171f45ef0ef66e76f979df021a34b46dcc81d","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a1ac0c077679e000f530dbbf8ad6505ea19146d1e9157d08cff267341073051b"}]}