{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20 {\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The defaut value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overloaded;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract MyToken is ERC20 {\r\n  uint256 constant INIT_SUPPLY_POC = 1000000000;\r\n  uint256 constant MAX_MINT_POC = 2000000000;\r\n    \r\n address constant _approver1 = 0x2C76A35B071b9299b538c93686903c8Ab9F06e5e;\r\n address constant _approver2 = 0x65d6D8353566Be8866a03B41d21173C647DBa0dD;\r\n address constant _approver3 = 0x116EE03B66e0AbF4098B86f8C666cbc919fb7A8D;\r\n address constant _approver4 = 0xb03aB8c62b6119248720f3E0B1E1404493a25980;\r\n  \r\n//  address constant _approver1 = 0x4B20993Bc481177ec7E8f571ceCaE8A9e22C02db;\r\n//  address constant _approver2 = 0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB;\r\n//  address constant _approver3 = 0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB;\r\n//  address constant _approver4 = 0x78731D3Ca6b7E34aC0F824c42a7cC18A495cabaB;\r\n  \r\n  address _owner; \r\n  \r\n  uint8 private _seconds_per_block;\r\n  uint256 private _schedule_term;\r\n  uint256 private _mint_term;\r\n  \r\n  uint256 private _addedSupplyToken;\r\n  uint256 private _listingDate;\r\n  uint256 private _burnApproved1 = 0;\r\n  uint256 private _burnApproved2 = 0;\r\n  uint256 private _burnApproved3 = 0;\r\n  uint256 private _burnApproved4 = 0;\r\n  uint256 private _mintApproved1 = 0;\r\n  uint256 private _mintApproved2 = 0;\r\n  uint256 private _mintApproved3 = 0;\r\n  uint256 private _mintApproved4 = 0;\r\n  uint256 private _rescheduleApproved1 = 0;\r\n  uint256 private _rescheduleApproved2 = 0;\r\n  uint256 private _rescheduleApproved3 = 0;\r\n  uint256 private _rescheduleApproved4 = 0;\r\n  \r\n  struct Schedule{\r\n    uint256 day;\r\n    uint256 POC;\r\n  }\r\n  Schedule[] private schedule;\r\n  \r\n  constructor() ERC20(\"PocketArena\", \"POC\") {\r\n    _seconds_per_block = 15;\r\n    _schedule_term = (60 * 60 * 24 * 30) / _seconds_per_block;  // during 30 days\r\n    _mint_term = (60 * 60 * 24 * 730) / _seconds_per_block;     // during 730 days\r\n//    _schedule_term = 30 / _seconds_per_block;  // during 30 seconds\r\n//    _mint_term = 730 / _seconds_per_block;     // during 730 seconds\r\n       \r\n    _listingDate = block.number;\r\n    _owner = msg.sender;\r\n    _mint(_owner, (INIT_SUPPLY_POC * (10 ** uint256(decimals()))));\r\n    _addedSupplyToken = 0;  \r\n    \r\n    schedule.push(Schedule(_listingDate, 501666667));  \r\n    schedule.push(Schedule((_listingDate + _schedule_term), 503333334));\r\n    schedule.push(Schedule((_listingDate + (_schedule_term * 2)), 505000001));\r\n    schedule.push(Schedule((_listingDate + (_schedule_term * 3)), 506666668));\r\n    schedule.push(Schedule((_listingDate + (_schedule_term * 4)), 508333335));\r\n    schedule.push(Schedule((_listingDate + (_schedule_term * 5)), 510000002));\r\n    schedule.push(Schedule((_listingDate + (_schedule_term * 6)), 526666669));\r\n    schedule.push(Schedule((_listingDate + (_schedule_term * 7)), 528333336));\r\n    schedule.push(Schedule((_listingDate + (_schedule_term * 8)), 552500003));\r\n    schedule.push(Schedule((_listingDate + (_schedule_term * 9)), 554166670));\r\n    schedule.push(Schedule((_listingDate + (_schedule_term * 10)), 578333337));\r\n    schedule.push(Schedule((_listingDate + (_schedule_term * 11)), 580000004));\r\n    schedule.push(Schedule((_listingDate + (_schedule_term * 12)), 754166671));\r\n    schedule.push(Schedule((_listingDate + (_schedule_term * 13)), 755833338));\r\n    schedule.push(Schedule((_listingDate + (_schedule_term * 14)), 780000005));\r\n    schedule.push(Schedule((_listingDate + (_schedule_term * 15)), 781666672));\r\n    schedule.push(Schedule((_listingDate + (_schedule_term * 16)), 805833339));\r\n    schedule.push(Schedule((_listingDate + (_schedule_term * 17)), 807500006));\r\n    schedule.push(Schedule((_listingDate + (_schedule_term * 18)), 831666673));  \r\n    schedule.push(Schedule((_listingDate + (_schedule_term * 19)), 1666667));\r\n    schedule.push(Schedule((_listingDate + (_schedule_term * 119)), INIT_SUPPLY_POC));\r\n  }\r\n  function scheduleGet(uint16 round) external view returns (Schedule memory) {\r\n    return schedule[round];\r\n  }\r\n  function lockedPOC(uint256 currentDate) public view returns (uint256) {\r\n    if (schedule[(schedule.length - 1)].day <= currentDate) {\r\n      //return (INIT_SUPPLY_POC - schedule[(schedule.length - 1)].POC);\r\n      return 0;\r\n    }\r\n    else if (schedule[(schedule.length - 2)].day <= currentDate) { \r\n      uint dateDiff = ((currentDate - schedule[(schedule.length - 2)].day) / _schedule_term);\r\n      uint256 newUnlockPOC = (schedule[(schedule.length - 2)].POC * (dateDiff + 1));\r\n      return (INIT_SUPPLY_POC - (schedule[(schedule.length - 3)].POC + newUnlockPOC));\r\n    }\r\n    else {\r\n      for (uint i=(schedule.length - 1); i>0; i--) {\r\n        if (schedule[i-1].day <= currentDate) {\r\n          return (INIT_SUPPLY_POC - schedule[i-1].POC);\r\n        }\r\n      }\r\n      return INIT_SUPPLY_POC;\r\n    }\r\n  }\r\n  function transferable() public view returns (uint256) {\r\n    uint256 locked = (lockedPOC(block.number) * (10 ** uint256(decimals())));\r\n    if (balanceOf(_owner) > locked) {\r\n\t  return (balanceOf(_owner) - locked);\r\n    }\r\n    else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  modifier listingDT() {\r\n    require(_listingDate <= block.number, \"listing is not yet\");\r\n    _;\r\n  }\r\n  modifier onlyApprover() {\r\n    require((msg.sender == _approver1 || msg.sender == _approver2 || msg.sender == _approver3 || msg.sender == _approver4), \"only approver is possible\");\r\n    _;\r\n  }\r\n  modifier onlyOwner() {\r\n    require(msg.sender == _owner, \"only owner is possible\");\r\n    _;\r\n  }\r\n  modifier unlocking(uint256 amount) {\r\n    if (msg.sender != _owner){\r\n       _;\r\n    }\r\n    else {\r\n      require(transferable() >= amount, \"lack of transferable token\");\r\n      _;\r\n    }\r\n  }\r\n  \r\n  function burn_approve_up(uint256 approveToken) onlyApprover external returns (bool) {\r\n    if (msg.sender == _approver1) {\r\n      _burnApproved1 = approveToken;\r\n    }\r\n    else if (msg.sender == _approver2) {\r\n      _burnApproved2 = approveToken;\r\n    }\r\n    else if (msg.sender == _approver3) {\r\n      _burnApproved3 = approveToken;\r\n    }\r\n    else if (msg.sender == _approver4) {\r\n      _burnApproved4 = approveToken;\r\n    }\r\n    return true;\r\n  }\r\n  function burn_approve_down() onlyApprover external returns (bool) {\r\n    if (msg.sender == _approver1) {\r\n      _burnApproved1 = 0;\r\n    }\r\n    else if (msg.sender == _approver2) {\r\n      _burnApproved2 = 0;\r\n    }\r\n    else if (msg.sender == _approver3) {\r\n      _burnApproved3 = 0;\r\n    }\r\n    else if (msg.sender == _approver4) {\r\n      _burnApproved4 = 0;\r\n    }\r\n    return true;\r\n  }\r\n  function burn(uint256 burnToken) listingDT onlyOwner external returns (bool) {\r\n    require(_addedSupplyToken >= burnToken, \"you can burn newly added token only\");\r\n    require(balanceOf(msg.sender) >= burnToken, \"you can burn in your balance only\");\r\n    uint8 sum_approval = 0;\r\n    if (_burnApproved1 > 0) {\r\n      require(_burnApproved1 == burnToken, \"you must get the right approval from approver1\");\r\n      sum_approval++;\r\n    }\r\n    if (_burnApproved2 > 0) {\r\n      require(_burnApproved2 == burnToken, \"you must get the right approval from approver2\");\r\n      sum_approval++;\r\n    }\r\n    if (_burnApproved3 > 0) {\r\n      require(_burnApproved3 == burnToken, \"you must get the right approval from approver3\");\r\n      sum_approval++;\r\n    }\r\n    if (_burnApproved4 > 0) {\r\n      require(_burnApproved4 == burnToken, \"you must get the right approval from approver4\");\r\n      sum_approval++;\r\n    }\r\n    require((sum_approval >= 2), \"you must get the 2 approvals at least\");\r\n    _burn(msg.sender, burnToken);\r\n    _addedSupplyToken = (_addedSupplyToken - burnToken);\r\n    _burnApproved1 = 0;\r\n    _burnApproved2 = 0;\r\n    _burnApproved3 = 0;\r\n    _burnApproved4 = 0;\r\n    return true;\r\n  }\r\n  \r\n  function mint_approve_up(uint256 approveToken) onlyApprover external returns (bool) {\r\n    if (msg.sender == _approver1) {\r\n      _mintApproved1 = approveToken;\r\n    }\r\n    else if (msg.sender == _approver2) {\r\n      _mintApproved2 = approveToken;\r\n    }\r\n    else if (msg.sender == _approver3) {\r\n      _mintApproved3 = approveToken;\r\n    }\r\n    else if (msg.sender == _approver4) {\r\n      _mintApproved4 = approveToken;\r\n    }\r\n    return true;\r\n  }\r\n  function mint_approve_down() onlyApprover external returns (bool) {\r\n    if (msg.sender == _approver1) {\r\n      _mintApproved1 = 0;\r\n    }\r\n    else if (msg.sender == _approver2) {\r\n      _mintApproved2 = 0;\r\n    }\r\n    else if (msg.sender == _approver3) {\r\n      _mintApproved3 = 0;\r\n    }\r\n    else if (msg.sender == _approver4) {\r\n      _mintApproved4 = 0;\r\n    }\r\n    return true;\r\n  }\r\n  function mint(uint256 addedToken) listingDT onlyOwner external returns (bool) {\r\n    require((_listingDate + _mint_term) <= block.number, \"creating new token is not yet\");\r\n    require(MAX_MINT_POC >= (_addedSupplyToken + addedToken), \"mint is reached on max\");\r\n    uint8 sum_approval = 0;\r\n    if (_mintApproved1 > 0) {\r\n      require(_mintApproved1 == addedToken, \"you must get the right approval from approver1\");\r\n      sum_approval++;\r\n    }\r\n    if (_mintApproved2 > 0) {\r\n      require(_mintApproved2 == addedToken, \"you must get the right approval from approver2\");\r\n      sum_approval++;\r\n    }\r\n    if (_mintApproved3 > 0) {\r\n      require(_mintApproved3 == addedToken, \"you must get the right approval from approver3\");\r\n      sum_approval++;\r\n    }\r\n    if (_mintApproved4 > 0) {\r\n      require(_mintApproved4 == addedToken, \"you must get the right approval from approver4\");\r\n      sum_approval++;\r\n    }\r\n    require((sum_approval >= 2), \"you must get the 2 approvals at least\");\r\n    _mint(_owner, addedToken);\r\n    _addedSupplyToken = (_addedSupplyToken + addedToken);\r\n    _mintApproved1 = 0;\r\n    _mintApproved2 = 0;\r\n    _mintApproved3 = 0;\r\n    _mintApproved4 = 0;\r\n    return true;\r\n  }\r\n  \r\n  function reschedule_approve_up(uint256 approveBlock) onlyApprover external returns (bool) {\r\n    if (msg.sender == _approver1) {\r\n      _rescheduleApproved1 = approveBlock;\r\n    }\r\n    else if (msg.sender == _approver2) {\r\n      _rescheduleApproved2 = approveBlock;\r\n    }\r\n    else if (msg.sender == _approver3) {\r\n      _rescheduleApproved3 = approveBlock;\r\n    }\r\n    else if (msg.sender == _approver4) {\r\n      _rescheduleApproved4 = approveBlock;\r\n    }\r\n    return true;\r\n  }\r\n  function reschedule_approve_down() onlyApprover external returns (bool) {\r\n    if (msg.sender == _approver1) {\r\n      _rescheduleApproved1 = 0;\r\n    }\r\n    else if (msg.sender == _approver2) {\r\n      _rescheduleApproved2 = 0;\r\n    }\r\n    else if (msg.sender == _approver3) {\r\n      _rescheduleApproved3 = 0;\r\n    }\r\n    else if (msg.sender == _approver4) {\r\n      _rescheduleApproved4 = 0;\r\n    }\r\n    return true;\r\n  }\r\n  function reschedule(uint256 term_hour_changeDate, uint8 new_seconds_per_block) onlyOwner external {\r\n    uint8 sum_approval = 0;\r\n    if (_rescheduleApproved1 > 0) {\r\n      require(_rescheduleApproved1 == new_seconds_per_block, \"you must get the right approval from approver1\");\r\n      sum_approval++;\r\n    }\r\n    if (_rescheduleApproved2 > 0) {\r\n      require(_rescheduleApproved2 == new_seconds_per_block, \"you must get the right approval from approver2\");\r\n      sum_approval++;\r\n    }\r\n    if (_rescheduleApproved3 > 0) {\r\n      require(_rescheduleApproved3 == new_seconds_per_block, \"you must get the right approval from approver3\");\r\n      sum_approval++;\r\n    }\r\n    if (_rescheduleApproved4 > 0) {\r\n      require(_rescheduleApproved4 == new_seconds_per_block, \"you must get the right approval from approver4\");\r\n      sum_approval++;\r\n    }\r\n    require((sum_approval >= 2), \"you must get the 2 approvals at least\");\r\n    // changeDate means the date(block.number) of when ETH2.0 chagnes the rule to 6s\r\n    uint256 changeDate = block.number;\r\n    if (term_hour_changeDate > 0) {\r\n      changeDate = changeDate - (term_hour_changeDate * 60 * 60 / new_seconds_per_block);\r\n    }\r\n    // recalculate some schedules only which it's not used(reached) yet\r\n    uint256 recalculate_target;\r\n    for (uint i=(schedule.length - 1); i>0; i--) {\r\n      if (changeDate <= schedule[i-1].day) {\r\n        recalculate_target = (schedule[i-1].day - changeDate) * _seconds_per_block;\r\n        schedule[i-1].day = changeDate + (recalculate_target / new_seconds_per_block);\r\n      } \r\n      else {\r\n        break;\r\n      }\r\n    }\r\n    _seconds_per_block = new_seconds_per_block;\r\n  }\r\n  \r\n    function approve_clear(uint8 target) onlyOwner external returns (bool) {\r\n      if (target == 1) {\r\n        _burnApproved1 = 0;\r\n        _burnApproved2 = 0;\r\n        _burnApproved3 = 0;\r\n        _burnApproved4 = 0;\r\n        return true;\r\n      }\r\n      else if (target == 2) {\r\n        _mintApproved1 = 0;\r\n        _mintApproved2 = 0;\r\n        _mintApproved3 = 0;\r\n        _mintApproved4 = 0;\r\n        return true;\r\n      }\r\n      else if (target == 3) {\r\n        _rescheduleApproved1 = 0;\r\n        _rescheduleApproved2 = 0;\r\n        _rescheduleApproved3 = 0;\r\n        _rescheduleApproved4 = 0;\r\n        return true;\r\n      }\r\n      else {\r\n       return false;   \r\n      }\r\n  }\r\n\r\n  function transfer(address recipient, uint256 amount) listingDT unlocking(amount) public override returns (bool) {\r\n    _transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n  }\r\n  function transferFrom(address sender, address recipient, uint256 amount) listingDT public virtual override returns (bool) {\r\n    if (msg.sender == _owner){\r\n      require(transferable() >= amount, \"lack of transferable token\");\r\n    }\r\n    if (super.transferFrom(sender, recipient, amount)) {\r\n      return true;\r\n    }\r\n    else \r\n    {\r\n      return false;\r\n    }\r\n  }\r\n  \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"target\",\"type\":\"uint8\"}],\"name\":\"approve_clear\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"burnToken\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn_approve_down\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"approveToken\",\"type\":\"uint256\"}],\"name\":\"burn_approve_up\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentDate\",\"type\":\"uint256\"}],\"name\":\"lockedPOC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"addedToken\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint_approve_down\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"approveToken\",\"type\":\"uint256\"}],\"name\":\"mint_approve_up\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"term_hour_changeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"new_seconds_per_block\",\"type\":\"uint8\"}],\"name\":\"reschedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reschedule_approve_down\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"approveBlock\",\"type\":\"uint256\"}],\"name\":\"reschedule_approve_up\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"}],\"name\":\"scheduleGet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"POC\",\"type\":\"uint256\"}],\"internalType\":\"struct MyToken.Schedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MyToken","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c1ad2e21196f493494154792b2ff1ee373df4f78bbc4d7e7f50e74dce40333fb"}]}