{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n//\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    \r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe Math Library\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) public pure returns (uint c) {\r\n        require(b <= a); c = a - b; \r\n    } \r\n    function safeMul(uint a, uint b) public pure returns (uint c) { \r\n        c = a * b; require(a == 0 || c / a == b); \r\n    }\r\n    function safeDiv(uint a, uint b) public pure returns (uint c) { \r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// AddOns: Minting, Burning, DisableBurning, DisableMinting, Roles, Token Retrieval\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract Extras { \r\n    \r\n    function Mint(address to, uint _mintage) public returns (bool success);\r\n    function Burn(address from, uint _burnage) public returns (bool success);\r\n    function DisableMinting() public returns (bool success);\r\n    function DisableBurning() public returns (bool success);\r\n    function SetSafety(uint8 position, address from) public returns (bool success);\r\n    function GetSafetyStatus() public view returns (uint _safety);\r\n    function GetMintingStatus() public view returns (bool _mintingstatus);\r\n    function GetBurningStatus() public view returns (bool _burningstatus);\r\n    \r\n    function addAdmin(address manager) public returns (bool success);\r\n    function RemoveAdmin(address newadmin) public returns (bool success);\r\n    function GetRole(address user) public view returns(string memory);\r\n    \r\n// To retrieve native tokens accidentally sent to the contract and send them somewhere. \r\n    function RetrieveTokens(address to, uint amount) public returns (bool success);\r\n    function GetTokenBalance() public view returns (uint balance);\r\n    \r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n//Ether Transfers, for managing Ether sent to the contract directly or accidentally\r\n// ----------------------------------------------------------------------------\r\n   \r\ncontract EtherTransactions {\r\n     function () payable external {} \r\n     function sendEther(address payable recipient, uint256 amount) public returns (bool success);\r\n     function getBalance() public view returns (uint);\r\n}\r\n\r\n\r\ncontract SailtheStars is ERC20Interface, SafeMath, Extras, EtherTransactions {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals; \r\n    bool MintingAllowed = true;\r\n    bool BurningAllowed = true;\r\n    uint SafetyKey = 1;\r\n    uint256 public _totalSupply;\r\n    \r\n    address public _sailthestars;\r\n\r\n    mapping(address => uint) balances;\r\n    mapping(address => mapping(address => uint)) allowed;\r\n    mapping(address => bool) admins;\r\n     \r\n    constructor() public {\r\n        name = \"SAIL\";\r\n        symbol = \"SAIL\";\r\n        decimals = 18;\r\n        _totalSupply = 8888888000000000000000000;\r\n        _sailthestars = msg.sender;\r\n        balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = safeSub(balances[from], tokens);\r\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\r\n        balances[to] = safeAdd(balances[to], tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n    \r\n \r\n// ----------------------------------------------------------------------------\r\n// Minting and Burning additional tokens, \r\n// only operable while MintingAllowed and BurningAllowed are true\r\n// ----------------------------------------------------------------------------   \r\n    \r\n    \r\n    function Mint(address to, uint _mintage) public returns (bool success)\r\n    {\r\n        require(MintingAllowed == true);\r\n        require(msg.sender == _sailthestars || admins[msg.sender] == true);\r\n        _totalSupply = safeAdd(_totalSupply, _mintage);\r\n        balances[to] = safeAdd(balances[to], _mintage);\r\n        emit Transfer(address(0), to, _mintage);\r\n        return true;\r\n     }\r\n     \r\n     function Burn(address from, uint _burnage) public returns (bool success)\r\n    {\r\n        require(BurningAllowed == true);\r\n        require(msg.sender == _sailthestars || admins[msg.sender] == true);\r\n        _totalSupply = safeSub(_totalSupply, _burnage);\r\n        balances[from] = safeSub(balances[from], _burnage);\r\n        emit Transfer(from, address(0), _burnage);\r\n        return true;\r\n    }\r\n   \r\n// ----------------------------------------------------------------------------\r\n// Permnanantly disable minting or burning\r\n// operations cannot be reversed\r\n// ----------------------------------------------------------------------------   \r\n\r\n     function DisableMinting() public returns (bool success)\r\n    {\r\n        require(SafetyKey == 0);\r\n        require(msg.sender == _sailthestars || admins[msg.sender] == true);\r\n        \r\n        MintingAllowed = false;\r\n        SafetyKey=1;\r\n        return true;\r\n    }\r\n    \r\n    function DisableBurning() public returns (bool success)\r\n    {\r\n        require(SafetyKey == 0);\r\n        require(msg.sender == _sailthestars || admins[msg.sender] == true);\r\n        BurningAllowed = false;\r\n        SafetyKey=1;\r\n        return true;\r\n    }\r\n    \r\n   \r\n// ----------------------------------------------------------------------------\r\n// Enables/Disables/Reports Safety Key which allows access to DisableMinting()/DisableBurning()\r\n// This is to prevent the accidental calling of these functions with major consequences.\r\n// ----------------------------------------------------------------------------   \r\n    \r\n     function SetSafety(uint8 position, address from) public returns (bool success)\r\n    {\r\n        require(msg.sender == from);\r\n        require(msg.sender == _sailthestars || admins[msg.sender] == true);\r\n        \r\n        SafetyKey = position;\r\n        return true;\r\n        \r\n    }\r\n    \r\n// ----------------------------------------------------------------------------\r\n// Functins for Get Minting / Burning Status\r\n// ----------------------------------------------------------------------------   \r\n\r\n     function GetSafetyStatus() public view returns (uint _safety)\r\n    {\r\n        return SafetyKey;\r\n    }\r\n    \r\n     function GetMintingStatus() public view returns (bool _mintingstatus)\r\n    {\r\n        return MintingAllowed;\r\n    }\r\n    \r\n    function GetBurningStatus() public view returns (bool _burningstatus)\r\n    {\r\n        return BurningAllowed;\r\n    }\r\n    \r\n// ----------------------------------------------------------------------------\r\n// Functions for adding admins and managers\r\n// ----------------------------------------------------------------------------       \r\n    \r\n    \r\n     function addAdmin(address newadmin) public returns (bool success) {\r\n       require(msg.sender == _sailthestars || admins[msg.sender] == true);\r\n       admins[newadmin] = true;\r\n       return true;\r\n    }\r\n    \r\n     function RemoveAdmin(address newadmin) public returns (bool success) {\r\n       require(msg.sender == _sailthestars || admins[msg.sender] == true);\r\n       admins[newadmin] = false;\r\n       return true; \r\n    }\r\n    \r\n    function GetRole(address user) public view returns(string memory) { \r\n       if(user == _sailthestars) { return \"User is Sail the Stars\"; }\r\n       if(admins[user]==true) { return \"User is an admin.\"; }\r\n       if(admins[user]==false) { return \"User has no permissions.\"; }\r\n    }\r\n    \r\n// ----------------------------------------------------------------------------\r\n// For sending Ether accidentally sent to the contract\r\n// ----------------------------------------------------------------------------          \r\n    \r\n    function getBalance() public view returns (uint)\r\n     {\r\n        return address(this).balance;\r\n     }\r\n     \r\n    function sendEther(address payable recipient, uint256 amount) public returns (bool success) {\r\n        require(msg.sender == _sailthestars || admins[msg.sender] == true);\r\n        recipient.transfer(amount);\r\n        return true;\r\n    }\r\n    \r\n// ----------------------------------------------------------------------------\r\n// For retrieving Tokens accidentally sent to the contract\r\n// ----------------------------------------------------------------------------    \r\n    \r\n    function GetTokenBalance() public view returns (uint balance) {\r\n        return balances[address(this)];\r\n    }\r\n    \r\n    function RetrieveTokens(address to, uint amount) public returns (bool success) {\r\n        require(msg.sender == _sailthestars || admins[msg.sender] == true); \r\n        require(to != address(this));\r\n        balances[address(this)] = safeSub(balances[address(this)], amount);\r\n        balances[to] = safeAdd(balances[to], amount);\r\n        return true; \r\n    }\r\n\r\n    \r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"position\",\"type\":\"uint8\"},{\"name\":\"from\",\"type\":\"address\"}],\"name\":\"SetSafety\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"_mintage\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"DisableMinting\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"DisableBurning\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetTokenBalance\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"name\":\"GetRole\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetBurningStatus\",\"outputs\":[{\"name\":\"_burningstatus\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newadmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newadmin\",\"type\":\"address\"}],\"name\":\"RemoveAdmin\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetSafetyStatus\",\"outputs\":[{\"name\":\"_safety\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RetrieveTokens\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_sailthestars\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GetMintingStatus\",\"outputs\":[{\"name\":\"_mintingstatus\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeSub\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeDiv\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendEther\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"_burnage\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeMul\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"uint256\"},{\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"safeAdd\",\"outputs\":[{\"name\":\"c\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"SailtheStars","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://263e661cbfd9fcb038058fe718e4dd66bbe6cdd7d715679445c35e49df040c49"}]}