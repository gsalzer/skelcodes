{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\npragma solidity ^0.5.0;\r\ninterface IUnifiFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function feeTo() external returns(address);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n    \r\n    function feeController() external view returns (address);\r\n    function router() external view returns (address);\r\n}\r\n\r\n// File: openzeppelin-contracts-2.5.1/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\npragma solidity ^0.5.0;\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function withdraw(uint) external;\r\n    \r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n}\r\n// File: openzeppelin-contracts-2.5.1/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: openzeppelin-contracts-2.5.1/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: openzeppelin-contracts-2.5.1/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface UnifiRouter {\r\n  function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n  function addLiquidity(\r\n      address tokenA,\r\n      address tokenB,\r\n      uint amountADesired,\r\n      uint amountBDesired,\r\n      uint amountAMin,\r\n      uint amountBMin,\r\n      address to,\r\n      uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n     function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);   \r\n  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ncontract SingleAsssetAddLiquidity {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    using Math for uint256;\r\n    address  public  owner ;\r\n    address public  router ;\r\n    address public wETH ;\r\n    address payable owners;\r\n    address public pancakeRouter ;\r\n    address public unifiRouter;\r\n    IUnifiFactory public otherFactory;\r\n\r\n    constructor(address _pancakeRouter,address _unifiRouter,address _routerAdd, address _weth, address _otherFactory) public {\r\n        owner = msg.sender;\r\n        router = _routerAdd;\r\n        pancakeRouter = _pancakeRouter;\r\n        unifiRouter = _unifiRouter;\r\n        wETH = _weth;\r\n  \r\n        otherFactory = IUnifiFactory(_otherFactory);\r\n    }\r\n    function updateRouter (address _newRouter) public {\r\n        require(msg.sender == owner);\r\n        router = _newRouter;\r\n    }\r\n    \r\n    function updatePancakeRouter (address _tradeRouter) public {\r\n        require(msg.sender == owner);\r\n        pancakeRouter = _tradeRouter;\r\n    }\r\n\r\n    function updateOtherFactory (address _factory) public {\r\n        require(msg.sender == owner);\r\n        otherFactory = IUnifiFactory(_factory);\r\n    }\r\n    function updateUnifiRouter (address _tradeRouter) public {\r\n        require(msg.sender == owner);\r\n        unifiRouter = _tradeRouter;\r\n    }\r\n    function updateWETH (address _newWETH) public {\r\n        require(msg.sender ==  owner);\r\n        wETH = _newWETH;\r\n    }\r\n    function getName() external pure returns (string memory) {\r\n        return \"singleAssetDepositor\";\r\n    }\r\n    \r\n function withdrawSupplyAsSingleAsset( address receiveToken , address liquidityToken ,address tokenA,address tokenB, address payable to,uint amount, bool toReceiveWNative,uint minOut) external {\r\n      IERC20(liquidityToken).safeTransferFrom(msg.sender,address(this), amount);\r\n      IERC20(liquidityToken).safeApprove(router, 0);    \r\n      IERC20(liquidityToken).safeApprove(router, amount);      \r\n      UnifiRouter(router).removeLiquidity(\r\n          tokenA, \r\n          tokenB, \r\n          amount, \r\n          1, \r\n          1, \r\n          address(this), \r\n          now.add(1800)\r\n        );\r\n        if(address(tokenA) == address(receiveToken)){\r\n            //sell tokenB to wETH\r\n            uint tokenBBalance = IERC20(tokenB).balanceOf(address(this));\r\n             _convertToken(tokenBBalance, tokenB, receiveToken, minOut) ;\r\n        }else if (address(tokenB) == address(receiveToken)){\r\n            uint tokenABalance = IERC20(tokenA).balanceOf(address(this));\r\n             _convertToken(tokenABalance, tokenA,receiveToken , minOut) ;\r\n        }\r\n        uint receivingTokenBalance = IERC20(receiveToken).balanceOf(address(this));\r\n        if(toReceiveWNative){\r\n            IERC20(wETH).safeApprove(router, 0); \r\n            IERC20(wETH).safeApprove(router,receivingTokenBalance );\r\n            IWETH(wETH).withdraw(receivingTokenBalance);\r\n            address(to).transfer(receivingTokenBalance);                  \r\n        }else{\r\n            IERC20(receiveToken).safeTransfer(to,receivingTokenBalance);\r\n        }\r\n     \r\n     \r\n    }\r\n\r\n\r\nfunction withdrawSupplyAsOtherSingleAsset( address receiveToken , address liquidityToken ,address tokenA,address tokenB, address payable to,uint amount, address[] calldata path1, address[] calldata path2, bool toReceiveWNative,uint minOut) external {\r\n      require(path1[path1.length - 1] == path2[path2.length -1] , 'Needs to be same token ');\r\n      IERC20(liquidityToken).safeTransferFrom(msg.sender,address(this), amount);\r\n      IERC20(liquidityToken).safeApprove(router, 0);  \r\n      IERC20(liquidityToken).safeApprove(router, amount);      \r\n      UnifiRouter(router).removeLiquidity(\r\n          tokenA, \r\n          tokenB, \r\n          amount, \r\n          1, \r\n          1, \r\n          address(this), \r\n          now.add(1800)\r\n        );\r\n        _convertOtherToken(IERC20(tokenA).balanceOf(address(this)),path1, minOut);\r\n        _convertOtherToken(IERC20(tokenB).balanceOf(address(this)),path2, minOut);           \r\n\r\n        uint receivingTokenBalance = IERC20(receiveToken).balanceOf(address(this));\r\n        if(address(receiveToken) == address(wETH) && toReceiveWNative == true){\r\n            IERC20(wETH).safeApprove(router,0 );\r\n            IERC20(wETH).safeApprove(router,receivingTokenBalance );\r\n              IWETH(wETH).withdraw(receivingTokenBalance);\r\n                address(to).transfer(receivingTokenBalance);              \r\n        }else{\r\n            \r\n        }\r\n        IERC20(receiveToken).safeTransfer(address(to),receivingTokenBalance);       \r\n     \r\n    }\r\n  function convertSingleAssetToLiquidityEth( address requireToken , address to,uint minOut)payable external {\r\n      require(msg.value > 0);\r\n      IWETH(wETH).deposit.value( msg.value)();\r\n      uint256 tokenABalance = IERC20(wETH).balanceOf(address(this));\r\n      if(tokenABalance > 0 ) {\r\n        _convertToken(tokenABalance.div(2),wETH,requireToken,minOut);\r\n        \r\n        uint256 tokenBBalance = IERC20(requireToken).balanceOf(address(this));\r\n\r\n        tokenABalance = IERC20(wETH).balanceOf(address(this));\r\n        IERC20(wETH).safeApprove(router,0 );\r\n        IERC20(wETH).safeApprove(router,tokenABalance );\r\n        IERC20(requireToken).safeApprove(router, 0);\r\n        IERC20(requireToken).safeApprove(router, tokenBBalance);\r\n\r\n        UnifiRouter(router).addLiquidity(\r\n          wETH, \r\n          requireToken, \r\n          tokenABalance, \r\n          tokenBBalance, \r\n          0, \r\n          0, \r\n          to, \r\n          now.add(1800)\r\n        );\r\n      }\r\n      \r\n        tokenABalance = IERC20(wETH).balanceOf(address(this));\r\n       uint256 requireTokenBalance = IERC20(requireToken).balanceOf(address(this));\r\n\r\n      if(tokenABalance > 0 ){\r\n        IERC20(wETH).safeTransfer(to,tokenABalance);\r\n      }\r\n      if(requireTokenBalance > 0 ){\r\n        IERC20(requireToken).safeTransfer(to,requireTokenBalance);\r\n      }\r\n    }\r\n\r\n    function convertSingleAssetToLiquidity(address tokenA, address requireToken , uint amount , address to,uint minOut) external {\r\n      IERC20(tokenA).safeTransferFrom(msg.sender,address(this), amount);\r\n      uint256 tokenABalance = IERC20(tokenA).balanceOf(address(this));\r\n      if(tokenABalance > 0 ) {\r\n        _convertToken(tokenABalance.div(2),tokenA,requireToken,minOut);\r\n        \r\n        uint256 tokenBBalance = IERC20(requireToken).balanceOf(address(this));\r\n\r\n        tokenABalance = IERC20(tokenA).balanceOf(address(this));\r\n\r\n        IERC20(tokenA).safeApprove(router,0 );\r\n        IERC20(requireToken).safeApprove(router, 0);\r\n\r\n        IERC20(tokenA).safeApprove(router,tokenABalance );\r\n        IERC20(requireToken).safeApprove(router, tokenBBalance);\r\n\r\n        UnifiRouter(router).addLiquidity(\r\n          tokenA, \r\n          requireToken,\r\n          tokenABalance,\r\n          tokenBBalance, \r\n          0, \r\n          0, \r\n          to, \r\n          now.add(1800)\r\n        );\r\n      }\r\n       tokenABalance = IERC20(tokenA).balanceOf(address(this));\r\n       uint256 requireTokenBalance = IERC20(requireToken).balanceOf(address(this));\r\n\r\n      if(tokenABalance > 0 ){\r\n        IERC20(tokenA).safeTransfer(to,tokenABalance);\r\n      }\r\n      if(requireTokenBalance > 0 ){\r\n        IERC20(requireToken).safeTransfer(to,requireTokenBalance);\r\n      }\r\n\r\n    }\r\n\r\n    function convertSingleAssetToOtherLiquidity(address depositToken, address requireTokenA,address requireTokenB , uint amount , address to, address[] calldata path1, address[] calldata path2,uint minOut) external {\r\n      IERC20(depositToken).safeTransferFrom(msg.sender,address(this), amount);\r\n           uint256 tokenABalance = 0 ;\r\n           uint256 tokenBBalance = 0 ;\r\n      if(amount > 0 ) {\r\n        _convertOtherToken(amount.div(2),path1,minOut);\r\n        _convertOtherToken(amount.div(2),path2,minOut);    \r\n         tokenABalance = IERC20(requireTokenA).balanceOf(address(this));\r\n         tokenBBalance = IERC20(requireTokenB).balanceOf(address(this));\r\n\r\n        IERC20(requireTokenA).safeApprove(router,0 );\r\n        IERC20(requireTokenB).safeApprove(router,0 );\r\n        IERC20(requireTokenA).safeApprove(router,tokenABalance );\r\n        IERC20(requireTokenB).safeApprove(router,tokenBBalance );\r\n        UnifiRouter(router).addLiquidity(\r\n          requireTokenA, \r\n          requireTokenB, \r\n          tokenABalance, \r\n          tokenBBalance, \r\n          0, \r\n          0, \r\n          to, \r\n          now.add(1800)\r\n        );\r\n      }\r\n        tokenABalance = IERC20(requireTokenA).balanceOf(address(this));\r\n        tokenBBalance = IERC20(requireTokenB).balanceOf(address(this));\r\n       uint256 baseBalance = IERC20(depositToken).balanceOf(address(this));  \r\n      if(tokenABalance > 0 ){\r\n        IERC20(requireTokenA).safeTransfer(to,tokenABalance);\r\n      }\r\n      if(tokenBBalance > 0 ){\r\n        IERC20(requireTokenB).safeTransfer(to,tokenBBalance);\r\n      }\r\n      if(baseBalance > 0 ){\r\n        IERC20(depositToken).safeTransfer(to,baseBalance);\r\n      }\r\n    }\r\n\r\n   \r\n    function convertSingleAssetToOtherLiquidityETH( address requireTokenA,address requireTokenB  , address to, address[] calldata path1, address[] calldata path2,uint minOut) payable external {\r\n      require(msg.value > 0);\r\n      IWETH(wETH).deposit.value( msg.value)();\r\n       uint256 tokenABalance = 0;\r\n       uint256 tokenBBalance = 0;\r\n      if( msg.value > 0 ) {\r\n        _convertOtherToken( msg.value.div(2),path1,minOut);\r\n        _convertOtherToken( msg.value.div(2),path2,minOut);    \r\n         tokenABalance = IERC20(requireTokenA).balanceOf(address(this));\r\n         tokenBBalance = IERC20(requireTokenB).balanceOf(address(this));\r\n\r\n        IERC20(requireTokenA).safeApprove(router,0 );\r\n        IERC20(requireTokenB).safeApprove(router,0 );\r\n        IERC20(requireTokenA).safeApprove(router,tokenABalance );\r\n        IERC20(requireTokenB).safeApprove(router,tokenBBalance );\r\n        UnifiRouter(router).addLiquidity(\r\n          requireTokenA, \r\n          requireTokenB,\r\n          tokenABalance,\r\n          tokenBBalance, \r\n          0,\r\n          0, \r\n          to, \r\n          now.add(10000)\r\n        );\r\n      }\r\n        tokenABalance = IERC20(requireTokenA).balanceOf(address(this));\r\n        tokenBBalance = IERC20(requireTokenB).balanceOf(address(this));\r\n       uint256 baseBalance = IERC20(wETH).balanceOf(address(this));  \r\n      if(tokenABalance > 0 ){\r\n        IERC20(requireTokenA).safeTransfer(to,tokenABalance);\r\n      }\r\n      if(tokenBBalance > 0 ){\r\n        IERC20(requireTokenB).safeTransfer(to,tokenBBalance);\r\n      }\r\n      if(baseBalance > 0 ){\r\n        IERC20(wETH).safeTransfer(to,baseBalance);\r\n      }\r\n    }\r\n    function _convertToken(uint _amount, address _tokenIn, address _tokenOut,uint minOut) internal {\r\n        \r\n        address[] memory path = new address[](2);\r\n        path[0] = _tokenIn;\r\n        path[1] = _tokenOut;\r\n        if(otherFactory.getPair(_tokenIn,_tokenOut) == address(0)){\r\n                IERC20(_tokenIn).safeApprove(unifiRouter, 0);\r\n                IERC20(_tokenIn).safeApprove(unifiRouter, _amount);\r\n                UnifiRouter(unifiRouter).swapExactTokensForTokens(_amount, uint256(minOut), path, address(this), now.add(10000));                      \r\n        }else{\r\n            uint[] memory  pancakeOutput = UnifiRouter(pancakeRouter).getAmountsOut(_amount, path);\r\n            uint[] memory  unifiOutput = UnifiRouter(unifiRouter).getAmountsOut(_amount, path);\r\n            if(pancakeOutput[pancakeOutput.length -1 ] > unifiOutput[unifiOutput.length - 1] ){\r\n       \r\n                IERC20(_tokenIn).safeApprove(pancakeRouter, 0);\r\n                IERC20(_tokenIn).safeApprove(pancakeRouter, _amount);\r\n                UnifiRouter(pancakeRouter).swapExactTokensForTokens(_amount, uint256(minOut), path, address(this), now.add(10000));         \r\n            }else{\r\n          \r\n                IERC20(_tokenIn).safeApprove(unifiRouter, 0);\r\n                IERC20(_tokenIn).safeApprove(unifiRouter, _amount);\r\n                UnifiRouter(unifiRouter).swapExactTokensForTokens(_amount, uint256(minOut), path, address(this), now.add(10000));               \r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function _convertOtherToken(uint _amount, address [] memory path,uint minOut) internal {\r\n         uint[]memory pancakeOutput = UnifiRouter(pancakeRouter).getAmountsOut(_amount, path);\r\n         uint[]memory unifiOutput = UnifiRouter(unifiRouter).getAmountsOut(_amount, path);\r\n         \r\n        if(otherFactory.getPair(path[0],path[1]) == address(0)){\r\n            IERC20(path[0]).safeApprove(unifiRouter, 0);\r\n            IERC20(path[0]).safeApprove(unifiRouter, _amount);\r\n            UnifiRouter(unifiRouter).swapExactTokensForTokens(_amount, uint256(minOut), path, address(this), now.add(10000));               \r\n        }else{\r\n         if(pancakeOutput[pancakeOutput.length -1 ] > unifiOutput[unifiOutput.length - 1] ){\r\n                IERC20(path[0]).safeApprove(pancakeRouter, 0);\r\n                IERC20(path[0]).safeApprove(pancakeRouter, _amount);\r\n                UnifiRouter(pancakeRouter).swapExactTokensForTokens(_amount, uint256(minOut), path, address(this), now.add(10000));         \r\n            }else{\r\n                IERC20(path[0]).safeApprove(unifiRouter, 0);\r\n                IERC20(path[0]).safeApprove(unifiRouter, _amount);\r\n                UnifiRouter(unifiRouter).swapExactTokensForTokens(_amount, uint256(minOut), path, address(this), now.add(10000));               \r\n            }           \r\n        }\r\n\r\n    }\r\n    \r\n    function pancakeOutput(uint _amount, address[] memory path) public view returns (uint){\r\n        uint[] memory estimated =    UnifiRouter(pancakeRouter).getAmountsOut(_amount, path) ;\r\n              return estimated[estimated.length-1];\r\n        \r\n    }\r\n    \r\n    function unifiOutput(uint _amount, address[] memory path) public view returns (uint){\r\n        uint[] memory estimated =    UnifiRouter(unifiRouter).getAmountsOut(_amount, path) ;\r\n        return estimated[estimated.length-1];\r\n    }\r\n\r\n\r\n    \r\n    function transferAccidentalTokens(IERC20 token ) external {\r\n\r\n        require(owner != address(0),\"UnifiRouter: Not found\");\r\n        uint balance = IERC20(token).balanceOf(address(this));\r\n        if(balance > 0 ){\r\n            IERC20(token).transfer(owner ,balance);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"depositToken\",\"type\":\"address\"},{\"name\":\"requireTokenA\",\"type\":\"address\"},{\"name\":\"requireTokenB\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"path1\",\"type\":\"address[]\"},{\"name\":\"path2\",\"type\":\"address[]\"},{\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"convertSingleAssetToOtherLiquidity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiveToken\",\"type\":\"address\"},{\"name\":\"liquidityToken\",\"type\":\"address\"},{\"name\":\"tokenA\",\"type\":\"address\"},{\"name\":\"tokenB\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"path1\",\"type\":\"address[]\"},{\"name\":\"path2\",\"type\":\"address[]\"},{\"name\":\"toReceiveWNative\",\"type\":\"bool\"},{\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"withdrawSupplyAsOtherSingleAsset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiveToken\",\"type\":\"address\"},{\"name\":\"liquidityToken\",\"type\":\"address\"},{\"name\":\"tokenA\",\"type\":\"address\"},{\"name\":\"tokenB\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"toReceiveWNative\",\"type\":\"bool\"},{\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"withdrawSupplyAsSingleAsset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unifiRouter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"transferAccidentalTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenA\",\"type\":\"address\"},{\"name\":\"requireToken\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"convertSingleAssetToLiquidity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"updateOtherFactory\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requireToken\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"convertSingleAssetToLiquidityEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"otherFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"requireTokenA\",\"type\":\"address\"},{\"name\":\"requireTokenB\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"path1\",\"type\":\"address[]\"},{\"name\":\"path2\",\"type\":\"address[]\"},{\"name\":\"minOut\",\"type\":\"uint256\"}],\"name\":\"convertSingleAssetToOtherLiquidityETH\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRouter\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"pancakeOutput\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradeRouter\",\"type\":\"address\"}],\"name\":\"updateUnifiRouter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"unifiOutput\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tradeRouter\",\"type\":\"address\"}],\"name\":\"updatePancakeRouter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newWETH\",\"type\":\"address\"}],\"name\":\"updateWETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_pancakeRouter\",\"type\":\"address\"},{\"name\":\"_unifiRouter\",\"type\":\"address\"},{\"name\":\"_routerAdd\",\"type\":\"address\"},{\"name\":\"_weth\",\"type\":\"address\"},{\"name\":\"_otherFactory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"SingleAsssetAddLiquidity","CompilerVersion":"v0.5.5+commit.47a71e8f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d00000000000000000000000079f12d68631ec6396aab3cdf31f07c90d0023c9a00000000000000000000000079f12d68631ec6396aab3cdf31f07c90d0023c9a000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://611857737e6014b583b79adeeb75c8265f637fd207aa079ab66b785ac7d48a1b"}]}