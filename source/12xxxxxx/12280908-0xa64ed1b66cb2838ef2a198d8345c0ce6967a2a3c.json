{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\ninterface IOwnable {\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function renounceOwnership() external;\r\n  \r\n    function transferOwnership( address newOwner_ ) external;\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n    \r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred( address(0), _owner );\r\n    }\r\n\r\n    function owner() public view override returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require( _owner == msg.sender, \"Ownable: caller is not the owner\" );\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual override onlyOwner() {\r\n        emit OwnershipTransferred( _owner, address(0) );\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership( address newOwner_ ) public virtual override onlyOwner() {\r\n        require( newOwner_ != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred( _owner, newOwner_ );\r\n        _owner = newOwner_;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function sqrrt(uint256 a) internal pure returns (uint c) {\r\n        if (a > 3) {\r\n            c = a;\r\n            uint b = add( div( a, 2), 1 );\r\n            while (b < c) {\r\n                c = b;\r\n                b = div( add( div( a, b ), b), 2 );\r\n            }\r\n        } else if (a != 0) {\r\n            c = 1;\r\n        }\r\n    }\r\n\r\n    function percentageAmount( uint256 total_, uint8 percentage_ ) internal pure returns ( uint256 percentAmount_ ) {\r\n        return div( mul( total_, percentage_ ), 1000 );\r\n    }\r\n\r\n    function substractPercentage( uint256 total_, uint8 percentageToSub_ ) internal pure returns ( uint256 result_ ) {\r\n        return sub( total_, div( mul( total_, percentageToSub_ ), 1000 ) );\r\n    }\r\n\r\n    function percentageOfTotal( uint256 part_, uint256 total_ ) internal pure returns ( uint256 percent_ ) {\r\n        return div( mul(part_, 100) , total_ );\r\n    }\r\n\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n\r\n    function quadraticPricing( uint256 payment_, uint256 multiplier_ ) internal pure returns (uint256) {\r\n        return sqrrt( mul( multiplier_, payment_ ) );\r\n    }\r\n\r\n  function bondingCurve( uint256 supply_, uint256 multiplier_ ) internal pure returns (uint256) {\r\n      return mul( multiplier_, supply_ );\r\n  }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addressToString(address _address) internal pure returns(string memory) {\r\n        bytes32 _bytes = bytes32(uint256(_address));\r\n        bytes memory HEX = \"0123456789abcdef\";\r\n        bytes memory _addr = new bytes(42);\r\n\r\n        _addr[0] = '0';\r\n        _addr[1] = 'x';\r\n\r\n        for(uint256 i = 0; i < 20; i++) {\r\n            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\r\n            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\r\n        }\r\n\r\n        return string(_addr);\r\n\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract ERC20 is IERC20 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // TODO comment actual hash value.\r\n    bytes32 constant private ERC20TOKEN_ERC1820_INTERFACE_ID = keccak256( \"ERC20Token\" );\r\n    \r\n    mapping (address => uint256) internal _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    string internal _name;\r\n    \r\n    string internal _symbol;\r\n    \r\n    uint8 internal _decimals;\r\n\r\n    constructor (string memory name_, string memory symbol_, uint8 decimals_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account_, uint256 ammount_) internal virtual {\r\n        require(account_ != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address( this ), account_, ammount_);\r\n        _totalSupply = _totalSupply.add(ammount_);\r\n        _balances[account_] = _balances[account_].add(ammount_);\r\n        emit Transfer(address( this ), account_, ammount_);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n  function _beforeTokenTransfer( address from_, address to_, uint256 amount_ ) internal virtual { }\r\n}\r\n\r\ninterface IERC2612Permit {\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n}\r\n\r\nlibrary Counters {\r\n    using SafeMath for uint256;\r\n\r\n    struct Counter {\r\n\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n}\r\n\r\nabstract contract ERC20Permit is ERC20, IERC2612Permit {\r\n    using Counters for Counters.Counter;\r\n\r\n    mapping(address => Counters.Counter) private _nonces;\r\n\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n\r\n    constructor() {\r\n        uint256 chainID;\r\n        assembly {\r\n            chainID := chainid()\r\n        }\r\n\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                keccak256(bytes(name())),\r\n                keccak256(bytes(\"1\")), // Version\r\n                chainID,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual override {\r\n        require(block.timestamp <= deadline, \"Permit: expired deadline\");\r\n\r\n        bytes32 hashStruct =\r\n            keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, _nonces[owner].current(), deadline));\r\n\r\n        bytes32 _hash = keccak256(abi.encodePacked(uint16(0x1901), DOMAIN_SEPARATOR, hashStruct));\r\n\r\n        address signer = ecrecover(_hash, v, r, s);\r\n        require(signer != address(0) && signer == owner, \"ZeroSwapPermit: Invalid signature\");\r\n\r\n        _nonces[owner].increment();\r\n        _approve(owner, spender, amount);\r\n    }\r\n\r\n    function nonces(address owner) public view override returns (uint256) {\r\n        return _nonces[owner].current();\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary FullMath {\r\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {\r\n        uint256 mm = mulmod(x, y, uint256(-1));\r\n        l = x * y;\r\n        h = mm - l;\r\n        if (mm < l) h -= 1;\r\n    }\r\n\r\n    function fullDiv(\r\n        uint256 l,\r\n        uint256 h,\r\n        uint256 d\r\n    ) private pure returns (uint256) {\r\n        uint256 pow2 = d & -d;\r\n        d /= pow2;\r\n        l /= pow2;\r\n        l += h * ((-pow2) / pow2 + 1);\r\n        uint256 r = 1;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        return l * r;\r\n    }\r\n\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 d\r\n    ) internal pure returns (uint256) {\r\n        (uint256 l, uint256 h) = fullMul(x, y);\r\n        uint256 mm = mulmod(x, y, d);\r\n        if (mm > l) h -= 1;\r\n        l -= mm;\r\n        require(h < d, 'FullMath::mulDiv: overflow');\r\n        return fullDiv(l, h, d);\r\n    }\r\n}\r\n\r\nlibrary FixedPoint {\r\n\r\n    struct uq112x112 {\r\n        uint224 _x;\r\n    }\r\n\r\n    struct uq144x112 {\r\n        uint256 _x;\r\n    }\r\n\r\n    uint8 private constant RESOLUTION = 112;\r\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\r\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\r\n\r\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\r\n        return uint112(self._x >> RESOLUTION);\r\n    }\r\n\r\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\r\n\r\n        return uint(self._x) / 5192296858534827;\r\n    }\r\n\r\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\r\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\r\n        if (numerator == 0) return FixedPoint.uq112x112(0);\r\n\r\n        if (numerator <= uint144(-1)) {\r\n            uint256 result = (numerator << RESOLUTION) / denominator;\r\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\r\n            return uq112x112(uint224(result));\r\n        } else {\r\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\r\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\r\n            return uq112x112(uint224(result));\r\n        }\r\n    }\r\n}\r\n\r\ninterface ITreasury {\r\n    function depositReserves( uint depositAmount_ ) external returns ( bool );\r\n}\r\n\r\ninterface ICirculatingOHM {\r\n    function OHMCirculatingSupply() external view returns ( uint );\r\n}\r\n\r\ninterface IBondDepo {\r\n\r\n    function getDepositorInfo( address _depositorAddress_ ) external view returns ( uint principleValue_, uint paidOut_, uint maxPayout, uint vestingPeriod_ );\r\n    \r\n    function deposit( uint256 amount_, uint maxPremium_, address depositor_ ) external returns ( bool );\r\n\r\n    function depositWithPermit( uint256 amount_, uint maxPremium_, address depositor_, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external returns ( bool );\r\n\r\n    function redeem() external returns ( bool );\r\n\r\n    function calculatePercentVested( address depositor_ ) external view returns ( uint _percentVested );\r\n    \r\n    function calculatePendingPayout( address depositor_ ) external view returns ( uint _pendingPayout );\r\n      \r\n    function calculateBondInterest( uint value_ ) external view returns ( uint _interestDue );\r\n        \r\n    function calculatePremium() external view returns ( uint _premium );\r\n}\r\n\r\n\r\n\r\ncontract OlympusDAIDepository is IBondDepo, Ownable {\r\n\r\n    using FixedPoint for *;\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    struct DepositInfo {\r\n        uint value; // Value\r\n        uint payoutRemaining; // OHM remaining to be paid\r\n        uint lastBlock; // Last interaction\r\n        uint vestingPeriod; // Blocks left to vest\r\n    }\r\n\r\n    mapping( address => DepositInfo ) public depositorInfo; \r\n\r\n    uint public DAOShare; // % = 1 / DAOShare\r\n    uint public bondControlVariable; // Premium scaling variable\r\n    uint public vestingPeriodInBlocks; \r\n    uint public minPremium; // Floor for the premium\r\n\r\n    //  Max a payout can be compared to the circulating supply, in hundreths. i.e. 50 = 0.5%\r\n    uint public maxPayoutPercent;\r\n\r\n    address public treasury;\r\n    address public DAI;\r\n    address public OHM;\r\n\r\n    uint256 public totalDebt; // Total value of outstanding bonds\r\n\r\n    address public stakingContract;\r\n    address public DAOWallet;\r\n    address public circulatingOHMContract; // calculates circulating supply\r\n\r\n    bool public useCircForDebtRatio; // Use circulating or total supply to calc total debt\r\n\r\n    constructor ( \r\n        address DAI_, \r\n        address OHM_,\r\n        address treasury_, \r\n        address stakingContract_, \r\n        address DAOWallet_, \r\n        address circulatingOHMContract_\r\n    ) {\r\n        DAI = DAI_;\r\n        OHM = OHM_;\r\n        treasury = treasury_;\r\n        stakingContract = stakingContract_;\r\n        DAOWallet = DAOWallet_;\r\n        circulatingOHMContract = circulatingOHMContract_;\r\n    }\r\n\r\n    /**\r\n        @notice set parameters of new bonds\r\n        @param bondControlVariable_ uint\r\n        @param vestingPeriodInBlocks_ uint\r\n        @param minPremium_ uint\r\n        @param maxPayout_ uint\r\n        @param DAOShare_ uint\r\n        @return bool\r\n     */\r\n    function setBondTerms( \r\n        uint bondControlVariable_, \r\n        uint vestingPeriodInBlocks_, \r\n        uint minPremium_, \r\n        uint maxPayout_,\r\n        uint DAOShare_ ) \r\n    external onlyOwner() returns ( bool ) {\r\n        bondControlVariable = bondControlVariable_;\r\n        vestingPeriodInBlocks = vestingPeriodInBlocks_;\r\n        minPremium = minPremium_;\r\n        maxPayoutPercent = maxPayout_;\r\n        DAOShare = DAOShare_;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice deposit bond\r\n        @param amount_ uint\r\n        @param maxPremium_ uint\r\n        @param depositor_ address\r\n        @return bool\r\n     */\r\n    function deposit( \r\n        uint amount_, \r\n        uint maxPremium_,\r\n        address depositor_ ) \r\n    external override returns ( bool ) {\r\n        _deposit( amount_, maxPremium_, depositor_ ) ;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice deposit bond with permit\r\n        @param amount_ uint\r\n        @param maxPremium_ uint\r\n        @param depositor_ address\r\n        @param v uint8\r\n        @param r bytes32\r\n        @param s bytes32\r\n        @return bool\r\n     */\r\n    function depositWithPermit( \r\n        uint amount_, \r\n        uint maxPremium_,\r\n        address depositor_, \r\n        uint deadline, \r\n        uint8 v, \r\n        bytes32 r, \r\n        bytes32 s ) \r\n    external override returns ( bool ) {\r\n        ERC20Permit( DAI ).permit( msg.sender, address(this), amount_, deadline, v, r, s );\r\n        _deposit( amount_, maxPremium_, depositor_ ) ;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice deposit function like mint\r\n        @param amount_ uint\r\n        @param maxPremium_ uint\r\n        @param depositor_ address\r\n        @return bool\r\n     */\r\n    function _deposit( \r\n        uint amount_, \r\n        uint maxPremium_, \r\n        address depositor_ ) \r\n    internal returns ( bool ) {\r\n        // slippage protection\r\n        require( maxPremium_ >= _calcPremium(), \"Slippage protection: more than max premium\" );\r\n\r\n        IERC20( DAI ).safeTransferFrom( msg.sender, address(this), amount_ );\r\n\r\n        uint value_ = amount_.div( 1e9 );\r\n        uint payout_ = calculateBondInterest( value_ );\r\n\r\n        require( payout_ >= 10000000, \"Bond too small\" ); // must be > 0.01 OHM\r\n        require( payout_ <= getMaxPayoutAmount(), \"Bond too large\");\r\n\r\n        totalDebt = totalDebt.add( value_ );\r\n\r\n        // Deposit token to mint OHM\r\n        IERC20( DAI ).approve( address( treasury ), amount_ );\r\n        ITreasury( treasury ).depositReserves( amount_ ); // Returns OHM\r\n\r\n        uint profit_ = value_.sub( payout_ );\r\n        uint DAOProfit_ = FixedPoint.fraction( profit_, DAOShare ).decode();\r\n        // Transfer profits to staking distributor and dao\r\n        IERC20( OHM ).safeTransfer( stakingContract, profit_.sub( DAOProfit_ ) );\r\n        IERC20( OHM ).safeTransfer( DAOWallet, DAOProfit_ );\r\n\r\n        // Store depositor info\r\n        depositorInfo[ depositor_ ] = DepositInfo({\r\n            value: depositorInfo[ depositor_ ].value.add( value_ ),\r\n            payoutRemaining: depositorInfo[ depositor_ ].payoutRemaining.add( payout_ ),\r\n            lastBlock: block.number,\r\n            vestingPeriod: vestingPeriodInBlocks\r\n        });\r\n        return true;\r\n    }\r\n\r\n    /** \r\n        @notice redeem bond\r\n        @return bool\r\n     */ \r\n    function redeem() external override returns ( bool ) {\r\n        uint payoutRemaining_ = depositorInfo[ msg.sender ].payoutRemaining;\r\n\r\n        require( payoutRemaining_ > 0, \"Sender is not due any interest.\" );\r\n\r\n        uint value_ = depositorInfo[ msg.sender ].value;\r\n        uint percentVested_ = _calculatePercentVested( msg.sender );\r\n\r\n        if ( percentVested_ >= 10000 ) { // if fully vested\r\n            delete depositorInfo[msg.sender];\r\n            IERC20( OHM ).safeTransfer( msg.sender, payoutRemaining_ );\r\n            totalDebt = totalDebt.sub( value_ );\r\n            return true;\r\n        }\r\n\r\n        // calculate and send vested OHM\r\n        uint payout_ = payoutRemaining_.mul( percentVested_ ).div( 10000 );\r\n        IERC20( OHM ).safeTransfer( msg.sender, payout_ );\r\n\r\n        // reduce total debt by vested amount\r\n        uint valueUsed_ = value_.mul( percentVested_ ).div( 10000 );\r\n        totalDebt = totalDebt.sub( valueUsed_ );\r\n\r\n        uint vestingPeriod_ = depositorInfo[msg.sender].vestingPeriod;\r\n        uint blocksSinceLast_ = block.number.sub( depositorInfo[ msg.sender ].lastBlock );\r\n\r\n        // store updated deposit info\r\n        depositorInfo[msg.sender] = DepositInfo({\r\n            value: value_.sub( valueUsed_ ),\r\n            payoutRemaining: payoutRemaining_.sub( payout_ ),\r\n            lastBlock: block.number,\r\n            vestingPeriod: vestingPeriod_.sub( blocksSinceLast_ )\r\n        });\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice get info of depositor\r\n        @param address_ info\r\n     */\r\n    function getDepositorInfo( address address_ ) external view override returns ( \r\n        uint _value, \r\n        uint _payoutRemaining, \r\n        uint _lastBlock, \r\n        uint _vestingPeriod ) \r\n    {\r\n        DepositInfo memory info = depositorInfo[ address_ ];\r\n        _value = info.value;\r\n        _payoutRemaining = info.payoutRemaining;\r\n        _lastBlock = info.lastBlock;\r\n        _vestingPeriod = info.vestingPeriod;\r\n    }\r\n\r\n    /**\r\n        @notice set contract to use circulating or total supply to calc debt\r\n     */\r\n    function toggleUseCircForDebtRatio() external onlyOwner() returns ( bool ) {\r\n        useCircForDebtRatio = !useCircForDebtRatio;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice use maxPayoutPercent to determine maximum bond available\r\n        @return uint\r\n     */\r\n    function getMaxPayoutAmount() public view returns ( uint ) {\r\n        uint circulatingOHM = ICirculatingOHM( circulatingOHMContract ).OHMCirculatingSupply();\r\n\r\n        uint maxPayout = circulatingOHM.mul( maxPayoutPercent ).div( 10000 );\r\n\r\n        return maxPayout;\r\n    }\r\n\r\n    /**\r\n        @notice view function for _calculatePercentVested\r\n        @param depositor_ address\r\n        @return _percentVested uint\r\n     */\r\n    function calculatePercentVested( address depositor_ ) external view override returns ( uint _percentVested ) {\r\n        _percentVested = _calculatePercentVested( depositor_ );\r\n    }\r\n\r\n    /**\r\n        @notice calculate how far into vesting period depositor is\r\n        @param depositor_ address\r\n        @return _percentVested uint ( in hundreths - i.e. 10 = 0.1% )\r\n     */\r\n    function _calculatePercentVested( address depositor_ ) internal view returns ( uint _percentVested ) {\r\n        uint vestingPeriod_ = depositorInfo[ depositor_ ].vestingPeriod;\r\n        if ( vestingPeriod_ > 0 ) {\r\n            uint blocksSinceLast_ = block.number.sub( depositorInfo[ depositor_ ].lastBlock );\r\n            _percentVested = blocksSinceLast_.mul( 10000 ).div( vestingPeriod_ );\r\n        } else {\r\n            _percentVested = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n        @notice calculate amount of OHM available for claim by depositor\r\n        @param depositor_ address\r\n        @return uint\r\n     */\r\n    function calculatePendingPayout( address depositor_ ) external view override returns ( uint ) {\r\n        uint percentVested_ = _calculatePercentVested( depositor_ );\r\n        uint payoutRemaining_ = depositorInfo[ depositor_ ].payoutRemaining;\r\n        \r\n        uint pendingPayout = payoutRemaining_.mul( percentVested_ ).div( 10000 );\r\n\r\n        if ( percentVested_ >= 10000 ) {\r\n            pendingPayout = payoutRemaining_;\r\n        } \r\n        return pendingPayout;\r\n    }\r\n\r\n    /**\r\n        @notice calculate interest due to new bonder\r\n        @param value_ uint\r\n        @return _interestDue uint\r\n     */\r\n    function calculateBondInterest( uint value_ ) public view override returns ( uint _interestDue ) {\r\n        _interestDue = FixedPoint.fraction( value_, _calcPremium() ).decode112with18().div( 1e16 );\r\n    }\r\n\r\n    /**\r\n        @notice view function for _calcPremium()\r\n        @return _premium uint\r\n     */\r\n    function calculatePremium() external view override returns ( uint _premium ) {\r\n        _premium = _calcPremium();\r\n    }\r\n\r\n    /**\r\n        @notice calculate current bond premium\r\n        @return _premium uint\r\n     */\r\n    function _calcPremium() internal view returns ( uint _premium ) {\r\n        _premium = bondControlVariable.mul( _calcDebtRatio() ).add( uint(1000000000) ).div( 1e7 );\r\n        if ( _premium < minPremium ) {\r\n            _premium = minPremium;\r\n        }\r\n    }\r\n\r\n    /**\r\n        @notice calculate current debt ratio\r\n        @return _debtRatio uint\r\n     */\r\n    function _calcDebtRatio() internal view returns ( uint _debtRatio ) {   \r\n        uint supply;\r\n\r\n        if( useCircForDebtRatio ) {\r\n            supply = ICirculatingOHM( circulatingOHMContract ).OHMCirculatingSupply();\r\n        } else {\r\n            supply = IERC20( OHM ).totalSupply();\r\n        }\r\n\r\n        _debtRatio = FixedPoint.fraction( \r\n            // Must move the decimal to the right by 9 places to avoid math underflow error\r\n            totalDebt.mul( 1e9 ), \r\n            supply\r\n        ).decode112with18().div( 1e18 );\r\n        // Must move the decimal to the left 18 places to account for the 9 places added above and the 19 signnificant digits added by FixedPoint.\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"DAI_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"OHM_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"DAOWallet_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"circulatingOHMContract_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAOShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAOWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OHM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondControlVariable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"calculateBondInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_interestDue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor_\",\"type\":\"address\"}],\"name\":\"calculatePendingPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor_\",\"type\":\"address\"}],\"name\":\"calculatePercentVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentVested\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculatePremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_premium\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingOHMContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPremium_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositor_\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPremium_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositor_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositorInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutRemaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"getDepositorInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payoutRemaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxPayoutAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPayoutPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bondControlVariable_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPeriodInBlocks_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPremium_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DAOShare_\",\"type\":\"uint256\"}],\"name\":\"setBondTerms\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleUseCircForDebtRatio\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useCircForDebtRatio\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingPeriodInBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OlympusDAIDepository","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000383518188c0c6d7730d91b2c03a03c837814a899000000000000000000000000886ce997aa9ee4f8c2282e182ab72a705762399d000000000000000000000000be731507810c8747c3e01e62c676b1ca6f93242f000000000000000000000000245cc372c84b3645bf0ffe6538620b04a217988b0000000000000000000000000efff9199aa1ac3c3e34e957567c1be8bf295034","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://db9dd9a1ee9f3b8523f981fb94d38881f2d98e34b29468471bcfa491e8a853ee"}]}