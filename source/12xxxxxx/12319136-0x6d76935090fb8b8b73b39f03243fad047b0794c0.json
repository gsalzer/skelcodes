{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\interface\\INestMapping.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.3;\r\n\r\n/// @dev The interface defines methods for nest builtin contract address mapping\r\ninterface INestMapping {\r\n\r\n    /// @dev Set the built-in contract address of the system\r\n    /// @param nestTokenAddress Address of nest token contract\r\n    /// @param nestNodeAddress Address of nest node contract\r\n    /// @param nestLedgerAddress INestLedger implementation contract address\r\n    /// @param nestMiningAddress INestMining implementation contract address for nest\r\n    /// @param ntokenMiningAddress INestMining implementation contract address for ntoken\r\n    /// @param nestPriceFacadeAddress INestPriceFacade implementation contract address\r\n    /// @param nestVoteAddress INestVote implementation contract address\r\n    /// @param nestQueryAddress INestQuery implementation contract address\r\n    /// @param nnIncomeAddress NNIncome contract address\r\n    /// @param nTokenControllerAddress INTokenController implementation contract address\r\n    function setBuiltinAddress(\r\n        address nestTokenAddress,\r\n        address nestNodeAddress,\r\n        address nestLedgerAddress,\r\n        address nestMiningAddress,\r\n        address ntokenMiningAddress,\r\n        address nestPriceFacadeAddress,\r\n        address nestVoteAddress,\r\n        address nestQueryAddress,\r\n        address nnIncomeAddress,\r\n        address nTokenControllerAddress\r\n    ) external;\r\n\r\n    /// @dev Get the built-in contract address of the system\r\n    /// @return nestTokenAddress Address of nest token contract\r\n    /// @return nestNodeAddress Address of nest node contract\r\n    /// @return nestLedgerAddress INestLedger implementation contract address\r\n    /// @return nestMiningAddress INestMining implementation contract address for nest\r\n    /// @return ntokenMiningAddress INestMining implementation contract address for ntoken\r\n    /// @return nestPriceFacadeAddress INestPriceFacade implementation contract address\r\n    /// @return nestVoteAddress INestVote implementation contract address\r\n    /// @return nestQueryAddress INestQuery implementation contract address\r\n    /// @return nnIncomeAddress NNIncome contract address\r\n    /// @return nTokenControllerAddress INTokenController implementation contract address\r\n    function getBuiltinAddress() external view returns (\r\n        address nestTokenAddress,\r\n        address nestNodeAddress,\r\n        address nestLedgerAddress,\r\n        address nestMiningAddress,\r\n        address ntokenMiningAddress,\r\n        address nestPriceFacadeAddress,\r\n        address nestVoteAddress,\r\n        address nestQueryAddress,\r\n        address nnIncomeAddress,\r\n        address nTokenControllerAddress\r\n    );\r\n\r\n    /// @dev Get address of nest token contract\r\n    /// @return Address of nest token contract\r\n    function getNestTokenAddress() external view returns (address);\r\n\r\n    /// @dev Get address of nest node contract\r\n    /// @return Address of nest node contract\r\n    function getNestNodeAddress() external view returns (address);\r\n\r\n    /// @dev Get INestLedger implementation contract address\r\n    /// @return INestLedger implementation contract address\r\n    function getNestLedgerAddress() external view returns (address);\r\n\r\n    /// @dev Get INestMining implementation contract address for nest\r\n    /// @return INestMining implementation contract address for nest\r\n    function getNestMiningAddress() external view returns (address);\r\n\r\n    /// @dev Get INestMining implementation contract address for ntoken\r\n    /// @return INestMining implementation contract address for ntoken\r\n    function getNTokenMiningAddress() external view returns (address);\r\n\r\n    /// @dev Get INestPriceFacade implementation contract address\r\n    /// @return INestPriceFacade implementation contract address\r\n    function getNestPriceFacadeAddress() external view returns (address);\r\n\r\n    /// @dev Get INestVote implementation contract address\r\n    /// @return INestVote implementation contract address\r\n    function getNestVoteAddress() external view returns (address);\r\n\r\n    /// @dev Get INestQuery implementation contract address\r\n    /// @return INestQuery implementation contract address\r\n    function getNestQueryAddress() external view returns (address);\r\n\r\n    /// @dev Get NNIncome contract address\r\n    /// @return NNIncome contract address\r\n    function getNnIncomeAddress() external view returns (address);\r\n\r\n    /// @dev Get INTokenController implementation contract address\r\n    /// @return INTokenController implementation contract address\r\n    function getNTokenControllerAddress() external view returns (address);\r\n\r\n    /// @dev Registered address. The address registered here is the address accepted by nest system\r\n    /// @param key The key\r\n    /// @param addr Destination address. 0 means to delete the registration information\r\n    function registerAddress(string memory key, address addr) external;\r\n\r\n    /// @dev Get registered address\r\n    /// @param key The key\r\n    /// @return Destination address. 0 means empty\r\n    function checkAddress(string memory key) external view returns (address);\r\n}\r\n\r\n// File: contracts\\interface\\INestGovernance.sol\r\n\r\n/// @dev This interface defines the governance methods\r\ninterface INestGovernance is INestMapping {\r\n\r\n    /// @dev Set governance authority\r\n    /// @param addr Destination address\r\n    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function setGovernance(address addr, uint flag) external;\r\n\r\n    /// @dev Get governance rights\r\n    /// @param addr Destination address\r\n    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function getGovernance(address addr) external view returns (uint);\r\n\r\n    /// @dev Check whether the target address has governance rights for the given target\r\n    /// @param addr Destination address\r\n    /// @param flag Permission weight. The permission of the target address must be greater than this weight to pass the check\r\n    /// @return True indicates permission\r\n    function checkGovernance(address addr, uint flag) external view returns (bool);\r\n}\r\n\r\n// File: contracts\\lib\\IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\interface\\INestQuery.sol\r\n\r\n/// @dev This interface defines the methods for price query\r\ninterface INestQuery {\r\n    \r\n    /// @dev Get the latest trigger price\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function triggeredPrice(address tokenAddress) external view returns (uint blockNumber, uint price);\r\n\r\n    /// @dev Get the full information of latest trigger price\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return avgPrice Average price\r\n    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    function triggeredPriceInfo(address tokenAddress) external view returns (\r\n        uint blockNumber,\r\n        uint price,\r\n        uint avgPrice,\r\n        uint sigmaSQ\r\n    );\r\n\r\n    /// @dev Find the price at block number\r\n    /// @param tokenAddress Destination token address\r\n    /// @param height Destination block number\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function findPrice(\r\n        address tokenAddress,\r\n        uint height\r\n    ) external view returns (uint blockNumber, uint price);\r\n\r\n    /// @dev Get the latest effective price\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function latestPrice(address tokenAddress) external view returns (uint blockNumber, uint price);\r\n\r\n    /// @dev Get the last (num) effective price\r\n    /// @param tokenAddress Destination token address\r\n    /// @param count The number of prices that want to return\r\n    /// @return An array which length is num * 2, each two element expresses one price like blockNumber｜price\r\n    function lastPriceList(address tokenAddress, uint count) external view returns (uint[] memory);\r\n\r\n    /// @dev Returns the results of latestPrice() and triggeredPriceInfo()\r\n    /// @param tokenAddress Destination token address\r\n    /// @return latestPriceBlockNumber The block number of latest price\r\n    /// @return latestPriceValue The token latest price. (1eth equivalent to (price) token)\r\n    /// @return triggeredPriceBlockNumber The block number of triggered price\r\n    /// @return triggeredPriceValue The token triggered price. (1eth equivalent to (price) token)\r\n    /// @return triggeredAvgPrice Average price\r\n    /// @return triggeredSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    function latestPriceAndTriggeredPriceInfo(address tokenAddress) external view \r\n    returns (\r\n        uint latestPriceBlockNumber,\r\n        uint latestPriceValue,\r\n        uint triggeredPriceBlockNumber,\r\n        uint triggeredPriceValue,\r\n        uint triggeredAvgPrice,\r\n        uint triggeredSigmaSQ\r\n    );\r\n\r\n    /// @dev Get the latest trigger price. (token and ntoken)\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return ntokenBlockNumber The block number of ntoken price\r\n    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    function triggeredPrice2(address tokenAddress) external view returns (\r\n        uint blockNumber,\r\n        uint price,\r\n        uint ntokenBlockNumber,\r\n        uint ntokenPrice\r\n    );\r\n\r\n    /// @dev Get the full information of latest trigger price. (token and ntoken)\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return avgPrice Average price\r\n    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447, \r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    /// @return ntokenBlockNumber The block number of ntoken price\r\n    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    /// @return ntokenAvgPrice Average price of ntoken\r\n    /// @return ntokenSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that\r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    function triggeredPriceInfo2(address tokenAddress) external view returns (\r\n        uint blockNumber,\r\n        uint price,\r\n        uint avgPrice,\r\n        uint sigmaSQ,\r\n        uint ntokenBlockNumber,\r\n        uint ntokenPrice,\r\n        uint ntokenAvgPrice,\r\n        uint ntokenSigmaSQ\r\n    );\r\n\r\n    /// @dev Get the latest effective price. (token and ntoken)\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return ntokenBlockNumber The block number of ntoken price\r\n    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    function latestPrice2(address tokenAddress) external view returns (\r\n        uint blockNumber,\r\n        uint price,\r\n        uint ntokenBlockNumber,\r\n        uint ntokenPrice\r\n    );\r\n}\r\n\r\n// File: contracts\\lib\\TransferHelper.sol\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n// File: contracts\\interface\\INestLedger.sol\r\n\r\n/// @dev This interface defines the nest ledger methods\r\ninterface INestLedger {\r\n\r\n    /// @dev Application Flag Changed event\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    event ApplicationChanged(address addr, uint flag);\r\n    \r\n    /// @dev Configuration structure of nest ledger contract\r\n    struct Config {\r\n        \r\n        // nest reward scale(10000 based). 2000\r\n        uint16 nestRewardScale;\r\n\r\n        // // ntoken reward scale(10000 based). 8000\r\n        // uint16 ntokenRewardScale;\r\n    }\r\n    \r\n    /// @dev Modify configuration\r\n    /// @param config Configuration object\r\n    function setConfig(Config memory config) external;\r\n\r\n    /// @dev Get configuration\r\n    /// @return Configuration object\r\n    function getConfig() external view returns (Config memory);\r\n\r\n    /// @dev Set DAO application\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function setApplication(address addr, uint flag) external;\r\n\r\n    /// @dev Check DAO application flag\r\n    /// @param addr DAO application contract address\r\n    /// @return Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function checkApplication(address addr) external view returns (uint);\r\n\r\n    /// @dev Carve reward\r\n    /// @param ntokenAddress Destination ntoken address\r\n    function carveETHReward(address ntokenAddress) external payable;\r\n\r\n    /// @dev Add reward\r\n    /// @param ntokenAddress Destination ntoken address\r\n    function addETHReward(address ntokenAddress) external payable;\r\n\r\n    /// @dev The function returns eth rewards of specified ntoken\r\n    /// @param ntokenAddress The ntoken address\r\n    function totalETHRewards(address ntokenAddress) external view returns (uint);\r\n\r\n    /// @dev Pay\r\n    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to pay with\r\n    /// @param tokenAddress Token address of receiving funds (0 means ETH)\r\n    /// @param to Address to receive\r\n    /// @param value Amount to receive\r\n    function pay(address ntokenAddress, address tokenAddress, address to, uint value) external;\r\n\r\n    /// @dev Settlement\r\n    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to settle with\r\n    /// @param tokenAddress Token address of receiving funds (0 means ETH)\r\n    /// @param to Address to receive\r\n    /// @param value Amount to receive\r\n    function settle(address ntokenAddress, address tokenAddress, address to, uint value) external payable;\r\n}\r\n\r\n// File: contracts\\NestBase.sol\r\n\r\n/// @dev Base contract of nest\r\ncontract NestBase {\r\n\r\n    // Address of nest token contract\r\n    address constant NEST_TOKEN_ADDRESS = 0x04abEdA201850aC0124161F037Efd70c74ddC74C;\r\n\r\n    // Genesis block number of nest\r\n    // NEST token contract is created at block height 6913517. However, because the mining algorithm of nest1.0\r\n    // is different from that at present, a new mining algorithm is adopted from nest2.0. The new algorithm\r\n    // includes the attenuation logic according to the block. Therefore, it is necessary to trace the block\r\n    // where the nest begins to decay. According to the circulation when nest2.0 is online, the new mining\r\n    // algorithm is used to deduce and convert the nest, and the new algorithm is used to mine the nest2.0\r\n    // on-line flow, the actual block is 5120000\r\n    uint constant NEST_GENESIS_BLOCK = 5120000;\r\n\r\n    /// @dev To support open-zeppelin/upgrades\r\n    /// @param nestGovernanceAddress INestGovernance implementation contract address\r\n    function initialize(address nestGovernanceAddress) virtual public {\r\n        require(_governance == address(0), 'NEST:!initialize');\r\n        _governance = nestGovernanceAddress;\r\n    }\r\n\r\n    /// @dev INestGovernance implementation contract address\r\n    address public _governance;\r\n\r\n    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \r\n    ///      super.update(nestGovernanceAddress) when overriding, and override method without onlyGovernance\r\n    /// @param nestGovernanceAddress INestGovernance implementation contract address\r\n    function update(address nestGovernanceAddress) virtual public {\r\n\r\n        address governance = _governance;\r\n        require(governance == msg.sender || INestGovernance(governance).checkGovernance(msg.sender, 0), \"NEST:!gov\");\r\n        _governance = nestGovernanceAddress;\r\n    }\r\n\r\n    /// @dev Migrate funds from current contract to NestLedger\r\n    /// @param tokenAddress Destination token address.(0 means eth)\r\n    /// @param value Migrate amount\r\n    function migrate(address tokenAddress, uint value) external onlyGovernance {\r\n\r\n        address to = INestGovernance(_governance).getNestLedgerAddress();\r\n        if (tokenAddress == address(0)) {\r\n            INestLedger(to).addETHReward { value: value } (address(0));\r\n        } else {\r\n            TransferHelper.safeTransfer(tokenAddress, to, value);\r\n        }\r\n    }\r\n\r\n    //---------modifier------------\r\n\r\n    modifier onlyGovernance() {\r\n        require(INestGovernance(_governance).checkGovernance(msg.sender, 0), \"NEST:!gov\");\r\n        _;\r\n    }\r\n\r\n    modifier noContract() {\r\n        require(msg.sender == tx.origin, \"NEST:!contract\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts\\NestMapping.sol\r\n\r\n/// @dev The contract is for nest builtin contract address mapping\r\nabstract contract NestMapping is NestBase, INestMapping {\r\n\r\n    // constructor() { }\r\n\r\n    /// @dev Address of nest token contract\r\n    address _nestTokenAddress;\r\n\r\n    /// @dev Address of nest node contract\r\n    address _nestNodeAddress;\r\n\r\n    /// @dev INestLedger implementation contract address\r\n    address _nestLedgerAddress;\r\n\r\n    /// @dev INestMining implementation contract address for nest\r\n    address _nestMiningAddress;\r\n\r\n    /// @dev INestMining implementation contract address for ntoken\r\n    address _ntokenMiningAddress;\r\n\r\n    /// @dev INestPriceFacade implementation contract address\r\n    address _nestPriceFacadeAddress;\r\n\r\n    /// @dev INestVote implementation contract address\r\n    address _nestVoteAddress;\r\n\r\n    /// @dev INestQuery implementation contract address\r\n    address _nestQueryAddress;\r\n\r\n    /// @dev NNIncome contract address\r\n    address _nnIncomeAddress;\r\n\r\n    /// @dev INTokenController implementation contract address\r\n    address _nTokenControllerAddress;\r\n    \r\n    /// @dev Address registered in the system\r\n    mapping(string=>address) _registeredAddress;\r\n\r\n    /// @dev Set the built-in contract address of the system\r\n    /// @param nestTokenAddress Address of nest token contract\r\n    /// @param nestNodeAddress Address of nest node contract\r\n    /// @param nestLedgerAddress INestLedger implementation contract address\r\n    /// @param nestMiningAddress INestMining implementation contract address for nest\r\n    /// @param ntokenMiningAddress INestMining implementation contract address for ntoken\r\n    /// @param nestPriceFacadeAddress INestPriceFacade implementation contract address\r\n    /// @param nestVoteAddress INestVote implementation contract address\r\n    /// @param nestQueryAddress INestQuery implementation contract address\r\n    /// @param nnIncomeAddress NNIncome contract address\r\n    /// @param nTokenControllerAddress INTokenController implementation contract address\r\n    function setBuiltinAddress(\r\n        address nestTokenAddress,\r\n        address nestNodeAddress,\r\n        address nestLedgerAddress,\r\n        address nestMiningAddress,\r\n        address ntokenMiningAddress,\r\n        address nestPriceFacadeAddress,\r\n        address nestVoteAddress,\r\n        address nestQueryAddress,\r\n        address nnIncomeAddress,\r\n        address nTokenControllerAddress\r\n    ) override external onlyGovernance {\r\n        \r\n        if (nestTokenAddress != address(0)) {\r\n            _nestTokenAddress = nestTokenAddress;\r\n        }\r\n        if (nestNodeAddress != address(0)) {\r\n            _nestNodeAddress = nestNodeAddress;\r\n        }\r\n        if (nestLedgerAddress != address(0)) {\r\n            _nestLedgerAddress = nestLedgerAddress;\r\n        }\r\n        if (nestMiningAddress != address(0)) {\r\n            _nestMiningAddress = nestMiningAddress;\r\n        }\r\n        if (ntokenMiningAddress != address(0)) {\r\n            _ntokenMiningAddress = ntokenMiningAddress;\r\n        }\r\n        if (nestPriceFacadeAddress != address(0)) {\r\n            _nestPriceFacadeAddress = nestPriceFacadeAddress;\r\n        }\r\n        if (nestVoteAddress != address(0)) {\r\n            _nestVoteAddress = nestVoteAddress;\r\n        }\r\n        if (nestQueryAddress != address(0)) {\r\n            _nestQueryAddress = nestQueryAddress;\r\n        }\r\n        if (nnIncomeAddress != address(0)) {\r\n            _nnIncomeAddress = nnIncomeAddress;\r\n        }\r\n        if (nTokenControllerAddress != address(0)) {\r\n            _nTokenControllerAddress = nTokenControllerAddress;\r\n        }\r\n    }\r\n\r\n    /// @dev Get the built-in contract address of the system\r\n    /// @return nestTokenAddress Address of nest token contract\r\n    /// @return nestNodeAddress Address of nest node contract\r\n    /// @return nestLedgerAddress INestLedger implementation contract address\r\n    /// @return nestMiningAddress INestMining implementation contract address for nest\r\n    /// @return ntokenMiningAddress INestMining implementation contract address for ntoken\r\n    /// @return nestPriceFacadeAddress INestPriceFacade implementation contract address\r\n    /// @return nestVoteAddress INestVote implementation contract address\r\n    /// @return nestQueryAddress INestQuery implementation contract address\r\n    /// @return nnIncomeAddress NNIncome contract address\r\n    /// @return nTokenControllerAddress INTokenController implementation contract address\r\n    function getBuiltinAddress() override external view returns (\r\n        address nestTokenAddress,\r\n        address nestNodeAddress,\r\n        address nestLedgerAddress,\r\n        address nestMiningAddress,\r\n        address ntokenMiningAddress,\r\n        address nestPriceFacadeAddress,\r\n        address nestVoteAddress,\r\n        address nestQueryAddress,\r\n        address nnIncomeAddress,\r\n        address nTokenControllerAddress\r\n    ) {\r\n        return (\r\n            _nestTokenAddress,\r\n            _nestNodeAddress,\r\n            _nestLedgerAddress,\r\n            _nestMiningAddress,\r\n            _ntokenMiningAddress,\r\n            _nestPriceFacadeAddress,\r\n            _nestVoteAddress,\r\n            _nestQueryAddress,\r\n            _nnIncomeAddress,\r\n            _nTokenControllerAddress\r\n        );\r\n    }\r\n\r\n    /// @dev Get address of nest token contract\r\n    /// @return Address of nest token contract\r\n    function getNestTokenAddress() override external view returns (address) { return _nestTokenAddress; }\r\n\r\n    /// @dev Get address of nest node contract\r\n    /// @return Address of nest node contract\r\n    function getNestNodeAddress() override external view returns (address) { return _nestNodeAddress; }\r\n\r\n    /// @dev Get INestLedger implementation contract address\r\n    /// @return INestLedger implementation contract address\r\n    function getNestLedgerAddress() override external view returns (address) { return _nestLedgerAddress; }\r\n\r\n    /// @dev Get INestMining implementation contract address for nest\r\n    /// @return INestMining implementation contract address for nest\r\n    function getNestMiningAddress() override external view returns (address) { return _nestMiningAddress; }\r\n\r\n    /// @dev Get INestMining implementation contract address for ntoken\r\n    /// @return INestMining implementation contract address for ntoken\r\n    function getNTokenMiningAddress() override external view returns (address) { return _ntokenMiningAddress; }\r\n\r\n    /// @dev Get INestPriceFacade implementation contract address\r\n    /// @return INestPriceFacade implementation contract address\r\n    function getNestPriceFacadeAddress() override external view returns (address) { return _nestPriceFacadeAddress; }\r\n\r\n    /// @dev Get INestVote implementation contract address\r\n    /// @return INestVote implementation contract address\r\n    function getNestVoteAddress() override external view returns (address) { return _nestVoteAddress; }\r\n\r\n    /// @dev Get INestQuery implementation contract address\r\n    /// @return INestQuery implementation contract address\r\n    function getNestQueryAddress() override external view returns (address) { return _nestQueryAddress; }\r\n\r\n    /// @dev Get NNIncome contract address\r\n    /// @return NNIncome contract address\r\n    function getNnIncomeAddress() override external view returns (address) { return _nnIncomeAddress; }\r\n\r\n    /// @dev Get INTokenController implementation contract address\r\n    /// @return INTokenController implementation contract address\r\n    function getNTokenControllerAddress() override external view returns (address) { return _nTokenControllerAddress; }\r\n\r\n    /// @dev Registered address. The address registered here is the address accepted by nest system\r\n    /// @param key The key\r\n    /// @param addr Destination address. 0 means to delete the registration information\r\n    function registerAddress(string memory key, address addr) override external onlyGovernance {\r\n        _registeredAddress[key] = addr;\r\n    }\r\n\r\n    /// @dev Get registered address\r\n    /// @param key The key\r\n    /// @return Destination address. 0 means empty\r\n    function checkAddress(string memory key) override external view returns (address) {\r\n        return _registeredAddress[key];\r\n    }\r\n}\r\n\r\n// File: contracts\\NestGovernance.sol\r\n\r\n/// @dev Nest governance contract\r\ncontract NestGovernance is NestMapping, INestGovernance {\r\n\r\n    // constructor() {\r\n    //     _governance = address(this);\r\n    //     _governanceMapping[msg.sender] = GovernanceInfo(msg.sender, uint96(0xFFFFFFFFFFFFFFFFFFFFFFFF));\r\n    // }\r\n\r\n    /// @dev To support open-zeppelin/upgrades\r\n    /// @param nestGovernanceAddress INestGovernance implementation contract address\r\n    function initialize(address nestGovernanceAddress) override public {\r\n\r\n        // While initialize NestGovernance, nestGovernanceAddress is address(this),\r\n        // So must let nestGovernanceAddress to 0\r\n        require(nestGovernanceAddress == address(0), \"NestGovernance:!address\");\r\n\r\n        // nestGovernanceAddress is address(this)\r\n        super.initialize(address(this));\r\n\r\n        // Add msg.sender to governance\r\n        _governanceMapping[msg.sender] = GovernanceInfo(msg.sender, uint96(0xFFFFFFFFFFFFFFFFFFFFFFFF));\r\n    }\r\n\r\n    /// @dev Structure of governance address information\r\n    struct GovernanceInfo {\r\n        address addr;\r\n        uint96 flag;\r\n    }\r\n\r\n    /// @dev Governance address information\r\n    mapping(address=>GovernanceInfo) _governanceMapping;\r\n\r\n    /// @dev Set governance authority\r\n    /// @param addr Destination address\r\n    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function setGovernance(address addr, uint flag) override external onlyGovernance {\r\n        \r\n        if (flag > 0) {\r\n            _governanceMapping[addr] = GovernanceInfo(addr, uint96(flag));\r\n        } else {\r\n            _governanceMapping[addr] = GovernanceInfo(address(0), uint96(0));\r\n        }\r\n    }\r\n\r\n    /// @dev Get governance rights\r\n    /// @param addr Destination address\r\n    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function getGovernance(address addr) override external view returns (uint) {\r\n        return _governanceMapping[addr].flag;\r\n    }\r\n\r\n    /// @dev Check whether the target address has governance rights for the given target\r\n    /// @param addr Destination address\r\n    /// @param flag Permission weight. The permission of the target address must be greater than this weight to pass the check\r\n    /// @return True indicates permission\r\n    function checkGovernance(address addr, uint flag) override public view returns (bool) {\r\n        return _governanceMapping[addr].flag > flag;\r\n    }\r\n\r\n    /// @dev This method is for ntoken in created in nest3.0\r\n    /// @param addr Destination address\r\n    /// @return True indicates permission\r\n    function checkOwners(address addr) external view returns (bool) {\r\n        return checkGovernance(addr, 0);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"checkAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"checkGovernance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"checkOwners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuiltinAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nestTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nestNodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nestLedgerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nestMiningAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ntokenMiningAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nestPriceFacadeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nestVoteAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nestQueryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nnIncomeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nTokenControllerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNTokenControllerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNTokenMiningAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNestLedgerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNestMiningAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNestNodeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNestPriceFacadeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNestQueryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNestTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNestVoteAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNnIncomeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nestGovernanceAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"registerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nestTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nestNodeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nestLedgerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nestMiningAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ntokenMiningAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nestPriceFacadeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nestVoteAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nestQueryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nnIncomeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nTokenControllerAddress\",\"type\":\"address\"}],\"name\":\"setBuiltinAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nestGovernanceAddress\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NestGovernance","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"256","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://128fe762fb4fe89a60bba12ae67057aa38a0bb29052b74ea3803c94e7e9edf5a"}]}