{"status":"1","message":"OK","result":[{"SourceCode":"{\"1_Storage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\r\\n\\r\\n/**\\r\\n * @title Storage\\r\\n * @dev Store \\u0026 retrieve value in a variable\\r\\n */\\r\\ncontract Storage {\\r\\n\\r\\n    uint256 number;\\r\\n\\r\\n    /**\\r\\n     * @dev Store value in variable\\r\\n     * @param num value to store\\r\\n     */\\r\\n    function store(uint256 num) public {\\r\\n        number = num;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return value \\r\\n     * @return value of \\u0027number\\u0027\\r\\n     */\\r\\n    function retrieve() public view returns (uint256){\\r\\n        return number;\\r\\n    }\\r\\n}\"},\"2_Owner.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity \\u003e=0.7.0 \\u003c0.9.0;\\r\\n\\r\\n/**\\r\\n * @title Owner\\r\\n * @dev Set \\u0026 change owner\\r\\n */\\r\\ncontract Owner {\\r\\n\\r\\n    address private owner;\\r\\n    \\r\\n    // event for EVM logging\\r\\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\\r\\n    \\r\\n    // modifier to check if caller is owner\\r\\n    modifier isOwner() {\\r\\n        // If the first argument of \\u0027require\\u0027 evaluates to \\u0027false\\u0027, execution terminates and all\\r\\n        // changes to the state and to Ether balances are reverted.\\r\\n        // This used to consume all gas in old EVM versions, but not anymore.\\r\\n        // It is often a good idea to use \\u0027require\\u0027 to check if functions are called correctly.\\r\\n        // As a second argument, you can also provide an explanation about what went wrong.\\r\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Set contract deployer as owner\\r\\n     */\\r\\n    constructor() {\\r\\n        owner = msg.sender; // \\u0027msg.sender\\u0027 is sender of current call, contract deployer for a constructor\\r\\n        emit OwnerSet(address(0), owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Change owner\\r\\n     * @param newOwner address of new owner\\r\\n     */\\r\\n    function changeOwner(address newOwner) public isOwner {\\r\\n        emit OwnerSet(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return owner address \\r\\n     * @return address of owner\\r\\n     */\\r\\n    function getOwner() external view returns (address) {\\r\\n        return owner;\\r\\n    }\\r\\n}\"},\"3_Ballot.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity  \\u003e=0.7.0 \\u003c0.9.0;\\r\\n\\r\\ncontract MonsterCoin {\\r\\n    // 关键字“public”让这些变量可以从外部读取\\r\\n    address public minter;\\r\\n    mapping (address =\\u003e uint) public balances;\\r\\n\\r\\n    // 轻客户端可以通过事件针对变化作出高效的反应\\r\\n    event Sent(address from, address to, uint amount);\\r\\n\\r\\n    // 这是构造函数，只有当合约创建时运行\\r\\n    constructor() {\\r\\n        minter = msg.sender;\\r\\n    }\\r\\n\\r\\n    function mint(address receiver, uint amount) public {\\r\\n        require(msg.sender == minter);\\r\\n        require(amount \\u003c 1e60);\\r\\n        balances[receiver] += amount;\\r\\n    }\\r\\n\\r\\n    function send(address receiver, uint amount) public {\\r\\n        require(amount \\u003c= balances[msg.sender], \\\"Insufficient balance.\\\");\\r\\n        balances[msg.sender] -= amount;\\r\\n        balances[receiver] += amount;\\r\\n        emit Sent(msg.sender, receiver, amount);\\r\\n    }\\r\\n}\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MonsterCoin","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://87ce1afe73ce2c6ba0f302d2bdf885e3d72f5102d998b92dc52773241b1d73f5"}]}