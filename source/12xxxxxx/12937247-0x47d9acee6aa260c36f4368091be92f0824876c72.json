{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.4.3 https://hardhat.org\r\n\r\n// File contracts/solidity/contracts-v1/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.8;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/contracts-v1/Initializable.sol\r\n\r\n\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n    /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n    bool private initialized;\r\n\r\n    /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n    bool private initializing;\r\n\r\n    /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n    modifier initializer() {\r\n        require(\r\n            initializing || isConstructor() || !initialized,\r\n            \"Contract instance has already been initialized\"\r\n        );\r\n\r\n        bool isTopLevelCall = !initializing;\r\n        if (isTopLevelCall) {\r\n            initializing = true;\r\n            initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        assembly {\r\n            cs := extcodesize(self)\r\n        }\r\n        return cs == 0;\r\n    }\r\n\r\n    // Reserved storage space to allow for layout changes in the future.\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n\r\n// File contracts/solidity/contracts-v1/Ownable.sol\r\n\r\n\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context, Initializable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initOwnable() internal virtual initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/contracts-v1/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/contracts-v1/Pausable.sol\r\n\r\n\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\ncontract Pausable is Ownable {\r\n    mapping(uint256 => bool) isPaused;\r\n    // 0 : createVault\r\n    // 1 : mint\r\n    // 2 : redeem\r\n    // 3 : mintAndRedeem\r\n    // 4 : migrateV1Tokens\r\n\r\n    function onlyOwnerIfPaused(uint256 pauserId) public view virtual {\r\n        require(!isPaused[pauserId] || msg.sender == owner(), \"Paused\");\r\n    }\r\n\r\n    function setPaused(uint256 pauserId, bool _isPaused)\r\n        public\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        isPaused[pauserId] = _isPaused;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/contracts-v1/IERC20.sol\r\n\r\n\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\n// File contracts/solidity/contracts-v1/IXToken.sol\r\n\r\n\r\n\r\npragma solidity 0.6.8;\r\n\r\ninterface IXToken is IERC20 {\r\n    function owner() external returns (address);\r\n\r\n    function burn(uint256 amount) external;\r\n\r\n    function burnFrom(address account, uint256 amount) external;\r\n\r\n    function mint(address to, uint256 amount) external;\r\n\r\n    function changeName(string calldata name) external;\r\n\r\n    function changeSymbol(string calldata symbol) external;\r\n\r\n    function setVaultAddress(address vaultAddress) external;\r\n\r\n    function transferOwnership(address newOwner) external;\r\n}\r\n\r\n\r\n// File contracts/solidity/contracts-v1/IERC165.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/solidity/contracts-v1/IERC721.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed approved,\r\n        uint256 indexed tokenId\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(\r\n        address indexed owner,\r\n        address indexed operator,\r\n        bool approved\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId)\r\n        external\r\n        view\r\n        returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/solidity/contracts-v1/ReentrancyGuard.sol\r\n\r\n\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard is Initializable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the revault on every call to nonReentrant will be lower in\r\n    // amount. Since revaults are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full revault coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function initReentrancyGuard() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a revault is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/contracts-v1/IERC721Receiver.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File contracts/solidity/contracts-v1/ERC721Holder.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC721Receiver} interface.\r\n *\r\n * Accepts all token transfers.\r\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\r\n */\r\ncontract ERC721Holder is IERC721Receiver {\r\n    /**\r\n     * @dev See {IERC721Receiver-onERC721Received}.\r\n     *\r\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/contracts-v1/EnumerableSet.sol\r\n\r\n\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value)\r\n        private\r\n        view\r\n        returns (bool)\r\n    {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index)\r\n        private\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        require(\r\n            set._values.length > index,\r\n            \"EnumerableSet: index out of bounds\"\r\n        );\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value)\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/contracts-v1/IXStore.sol\r\n\r\n\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IXStore {\r\n    struct FeeParams {\r\n        uint256 ethBase;\r\n        uint256 ethStep;\r\n    }\r\n\r\n    struct BountyParams {\r\n        uint256 ethMax;\r\n        uint256 length;\r\n    }\r\n\r\n    struct Vault {\r\n        address xTokenAddress;\r\n        address nftAddress;\r\n        address manager;\r\n        IXToken xToken;\r\n        IERC721 nft;\r\n        EnumerableSet.UintSet holdings;\r\n        EnumerableSet.UintSet reserves;\r\n        mapping(uint256 => address) requester;\r\n        mapping(uint256 => bool) isEligible;\r\n        mapping(uint256 => bool) shouldReserve;\r\n        bool allowMintRequests;\r\n        bool flipEligOnRedeem;\r\n        bool negateEligibility;\r\n        bool isFinalized;\r\n        bool isClosed;\r\n        FeeParams mintFees;\r\n        FeeParams burnFees;\r\n        FeeParams dualFees;\r\n        BountyParams supplierBounty;\r\n        uint256 ethBalance;\r\n        uint256 tokenBalance;\r\n        bool isD2Vault;\r\n        address d2AssetAddress;\r\n        IERC20 d2Asset;\r\n        uint256 d2Holdings;\r\n    }\r\n\r\n    function isExtension(address addr) external view returns (bool);\r\n\r\n    function randNonce() external view returns (uint256);\r\n\r\n    function vaultsLength() external view returns (uint256);\r\n\r\n    function xTokenAddress(uint256 vaultId) external view returns (address);\r\n\r\n    function nftAddress(uint256 vaultId) external view returns (address);\r\n\r\n    function manager(uint256 vaultId) external view returns (address);\r\n\r\n    function xToken(uint256 vaultId) external view returns (IXToken);\r\n\r\n    function nft(uint256 vaultId) external view returns (IERC721);\r\n\r\n    function holdingsLength(uint256 vaultId) external view returns (uint256);\r\n\r\n    function holdingsContains(uint256 vaultId, uint256 elem)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function holdingsAt(uint256 vaultId, uint256 index)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function reservesLength(uint256 vaultId) external view returns (uint256);\r\n\r\n    function reservesContains(uint256 vaultId, uint256 elem)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function reservesAt(uint256 vaultId, uint256 index)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function requester(uint256 vaultId, uint256 id)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function isEligible(uint256 vaultId, uint256 id)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function shouldReserve(uint256 vaultId, uint256 id)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function allowMintRequests(uint256 vaultId) external view returns (bool);\r\n\r\n    function flipEligOnRedeem(uint256 vaultId) external view returns (bool);\r\n\r\n    function negateEligibility(uint256 vaultId) external view returns (bool);\r\n\r\n    function isFinalized(uint256 vaultId) external view returns (bool);\r\n\r\n    function isClosed(uint256 vaultId) external view returns (bool);\r\n\r\n    function mintFees(uint256 vaultId) external view returns (uint256, uint256);\r\n\r\n    function burnFees(uint256 vaultId) external view returns (uint256, uint256);\r\n\r\n    function dualFees(uint256 vaultId) external view returns (uint256, uint256);\r\n\r\n    function supplierBounty(uint256 vaultId)\r\n        external\r\n        view\r\n        returns (uint256, uint256);\r\n\r\n    function ethBalance(uint256 vaultId) external view returns (uint256);\r\n\r\n    function tokenBalance(uint256 vaultId) external view returns (uint256);\r\n\r\n    function isD2Vault(uint256 vaultId) external view returns (bool);\r\n\r\n    function d2AssetAddress(uint256 vaultId) external view returns (address);\r\n\r\n    function d2Asset(uint256 vaultId) external view returns (IERC20);\r\n\r\n    function d2Holdings(uint256 vaultId) external view returns (uint256);\r\n\r\n    function setXTokenAddress(uint256 vaultId, address _xTokenAddress) external;\r\n\r\n    function setNftAddress(uint256 vaultId, address _assetAddress) external;\r\n\r\n    function setManager(uint256 vaultId, address _manager) external;\r\n\r\n    function setXToken(uint256 vaultId) external;\r\n\r\n    function setNft(uint256 vaultId) external;\r\n\r\n    function holdingsAdd(uint256 vaultId, uint256 elem) external;\r\n\r\n    function holdingsRemove(uint256 vaultId, uint256 elem) external;\r\n\r\n    function reservesAdd(uint256 vaultId, uint256 elem) external;\r\n\r\n    function reservesRemove(uint256 vaultId, uint256 elem) external;\r\n\r\n    function setRequester(uint256 vaultId, uint256 id, address _requester)\r\n        external;\r\n\r\n    function setIsEligible(uint256 vaultId, uint256 id, bool _bool) external;\r\n\r\n    function setShouldReserve(uint256 vaultId, uint256 id, bool _shouldReserve)\r\n        external;\r\n\r\n    function setAllowMintRequests(uint256 vaultId, bool isAllowed) external;\r\n\r\n    function setFlipEligOnRedeem(uint256 vaultId, bool flipElig) external;\r\n\r\n    function setNegateEligibility(uint256 vaultId, bool negateElig) external;\r\n\r\n    function setIsFinalized(uint256 vaultId, bool _isFinalized) external;\r\n\r\n    function setIsClosed(uint256 vaultId, bool _isClosed) external;\r\n\r\n    function setMintFees(uint256 vaultId, uint256 ethBase, uint256 ethStep)\r\n        external;\r\n\r\n    function setBurnFees(uint256 vaultId, uint256 ethBase, uint256 ethStep)\r\n        external;\r\n\r\n    function setDualFees(uint256 vaultId, uint256 ethBase, uint256 ethStep)\r\n        external;\r\n\r\n    function setSupplierBounty(uint256 vaultId, uint256 ethMax, uint256 length)\r\n        external;\r\n\r\n    function setEthBalance(uint256 vaultId, uint256 _ethBalance) external;\r\n\r\n    function setTokenBalance(uint256 vaultId, uint256 _tokenBalance) external;\r\n\r\n    function setIsD2Vault(uint256 vaultId, bool _isD2Vault) external;\r\n\r\n    function setD2AssetAddress(uint256 vaultId, address _assetAddress) external;\r\n\r\n    function setD2Asset(uint256 vaultId) external;\r\n\r\n    function setD2Holdings(uint256 vaultId, uint256 _d2Holdings) external;\r\n\r\n    ////////////////////////////////////////////////////////////\r\n\r\n    function setIsExtension(address addr, bool _isExtension) external;\r\n\r\n    function setRandNonce(uint256 _randNonce) external;\r\n\r\n    function addNewVault() external returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/solidity/contracts-v1/Address.sol\r\n\r\n\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive vaults via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/contracts-v1/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value)\r\n        internal\r\n    {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value)\r\n        internal\r\n    {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(\r\n            value\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value)\r\n        internal\r\n    {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(\r\n                token.approve.selector,\r\n                spender,\r\n                newAllowance\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\ninterface IXTokenFactory {\r\n  function createXToken(string calldata name, string calldata symbol) external returns (address);\r\n  event NewXToken(address _xTokenAddress);\r\n}\r\n\r\ninterface IERC1155 is IERC165 {\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n    event URI(string value, uint256 indexed id);\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\r\n}\r\n\r\ninterface IERC1155Receiver is IERC165 {\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n}\r\n\r\ninterface KittyCore {\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n}\r\n\r\ninterface KittyCoreAlt {\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    ) external;\r\n}\r\n\r\npragma solidity 0.6.8;\r\n\r\ncontract NFTX is Pausable, ReentrancyGuard, ERC721Holder, IERC1155Receiver {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    event NewVault(uint256 indexed vaultId, address sender);\r\n    event Mint(\r\n        uint256 indexed vaultId,\r\n        uint256[] nftIds,\r\n        uint256 d2Amount,\r\n        address sender\r\n    );\r\n    event Redeem(\r\n        uint256 indexed vaultId,\r\n        uint256[] nftIds,\r\n        uint256 d2Amount,\r\n        address sender\r\n    );\r\n    event MintRequested(\r\n        uint256 indexed vaultId,\r\n        uint256[] nftIds,\r\n        address sender\r\n    );\r\n\r\n    IXStore public store;\r\n\r\n    mapping(uint256 => bool) public isVault1155;\r\n\r\n    mapping(uint256 => uint256) public rangeStart;\r\n    mapping(uint256 => uint256) public rangeEnd;\r\n\r\n    // v1 ID -> v2 Vault\r\n    mapping(uint256 => address) public migrationPair;\r\n    mapping(uint256 => bool) public isFullyMigrated;\r\n\r\n    function initialize(address storeAddress) public initializer {\r\n        initOwnable();\r\n        initReentrancyGuard();\r\n        store = IXStore(storeAddress);\r\n    }\r\n\r\n    /* function onlyManager(uint256 vaultId) internal view {\r\n        \r\n    } */\r\n\r\n    function onlyPrivileged(uint256 vaultId) internal view {\r\n        if (store.isFinalized(vaultId)) {\r\n            require(msg.sender == owner(), \"Not owner\");\r\n        } else {\r\n            require(msg.sender == store.manager(vaultId), \"Not manager\");\r\n        }\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] memory,\r\n        uint256[] memory,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC1155BatchReceived.selector;\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        external\r\n        override\r\n        view\r\n        returns (bool)\r\n    {}\r\n\r\n    function isEligible(uint256 vaultId, uint256 nftId)\r\n        public\r\n        view\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        if (rangeEnd[vaultId] > 0) {\r\n            if (nftId >= rangeStart[vaultId] && nftId <= rangeEnd[vaultId]) {\r\n                return true;\r\n            }\r\n        }\r\n        return\r\n            store.negateEligibility(vaultId)\r\n                ? !store.isEligible(vaultId, nftId)\r\n                : store.isEligible(vaultId, nftId);\r\n    }\r\n\r\n    function vaultSize(uint256 vaultId) public view virtual returns (uint256) {\r\n        return\r\n            store.isD2Vault(vaultId)\r\n                ? store.d2Holdings(vaultId)\r\n                : store.holdingsLength(vaultId);\r\n                // Updated here to fix length bug.\r\n    }\r\n\r\n    function _getPseudoRand(uint256 modulus)\r\n        internal\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        store.setRandNonce(store.randNonce().add(1));\r\n        return\r\n            uint256(\r\n                keccak256(abi.encodePacked(now, msg.sender, store.randNonce()))\r\n            ) %\r\n            modulus;\r\n    }\r\n\r\n    // function createVault(\r\n    //     string memory name,\r\n    //     string memory symbol,\r\n    //     address _assetAddress,\r\n    //     bool _isD2Vault\r\n    // ) public virtual nonReentrant returns (uint256) {\r\n    //     onlyOwnerIfPaused(0);\r\n    //     IXTokenFactory xTokenFactory = IXTokenFactory(\r\n    //         0xE7ac17cE2550f3a0B4fE3616515975eb093CEfea\r\n    //     );\r\n    //     address xTokenAddress = xTokenFactory.createXToken(name, symbol);\r\n    //     uint256 vaultId = store.addNewVault();\r\n    //     store.setXTokenAddress(vaultId, xTokenAddress);\r\n    //     store.setXToken(vaultId);\r\n    //     if (!_isD2Vault) {\r\n    //         store.setNftAddress(vaultId, _assetAddress);\r\n    //         store.setNft(vaultId);\r\n    //         store.setNegateEligibility(vaultId, true);\r\n    //     } else {\r\n    //         store.setD2AssetAddress(vaultId, _assetAddress);\r\n    //         store.setD2Asset(vaultId);\r\n    //         store.setIsD2Vault(vaultId, true);\r\n    //     }\r\n    //     store.setManager(vaultId, msg.sender);\r\n    //     emit NewVault(vaultId, msg.sender);\r\n    //     return vaultId;\r\n    // }\r\n\r\n    // function depositETH(uint256 vaultId) public payable virtual {\r\n    //     store.setEthBalance(vaultId, store.ethBalance(vaultId).add(msg.value));\r\n    // }\r\n\r\n    // function requestMint(uint256 vaultId, uint256[] memory nftIds)\r\n    //     public\r\n    //     payable\r\n    //     virtual\r\n    //     nonReentrant\r\n    // {\r\n    //     onlyOwnerIfPaused(1);\r\n    //     require(store.allowMintRequests(vaultId), \"1\");\r\n    //     for (uint256 i = 0; i < nftIds.length; i = i.add(1)) {\r\n    //         if (vaultId > 6 && vaultId < 10) {\r\n    //             KittyCoreAlt kittyCoreAlt =\r\n    //                 KittyCoreAlt(store.nftAddress(vaultId));\r\n    //             kittyCoreAlt.transferFrom(msg.sender, address(this), nftIds[i]);\r\n    //         } else {\r\n    //             store.nft(vaultId).safeTransferFrom(\r\n    //                 msg.sender,\r\n    //                 address(this),\r\n    //                 nftIds[i]\r\n    //             );\r\n    //         }\r\n    //         store.setRequester(vaultId, nftIds[i], msg.sender);\r\n    //     }\r\n    //     emit MintRequested(vaultId, nftIds, msg.sender);\r\n    // }\r\n\r\n    function revokeMintRequests(uint256 vaultId, uint256[] memory nftIds)\r\n        public\r\n        virtual\r\n        nonReentrant\r\n    {\r\n        for (uint256 i = 0; i < nftIds.length; i = i.add(1)) {\r\n            require(\r\n                store.requester(vaultId, nftIds[i]) == msg.sender,\r\n                \"Not requester\"\r\n            );\r\n            store.setRequester(vaultId, nftIds[i], address(0));\r\n            if (vaultId > 6 && vaultId < 10) {\r\n                KittyCore kittyCore = KittyCore(store.nftAddress(vaultId));\r\n                kittyCore.transfer(msg.sender, nftIds[i]);\r\n            } else {\r\n                store.nft(vaultId).safeTransferFrom(\r\n                    address(this),\r\n                    msg.sender,\r\n                    nftIds[i]\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function approveMintRequest(uint256 vaultId, uint256[] memory nftIds)\r\n        public\r\n        virtual\r\n    {\r\n        onlyPrivileged(vaultId);\r\n        for (uint256 i = 0; i < nftIds.length; i = i.add(1)) {\r\n            address requester = store.requester(vaultId, nftIds[i]);\r\n            require(requester != address(0), \"No request\");\r\n            require(\r\n                store.nft(vaultId).ownerOf(nftIds[i]) == address(this),\r\n                \"Not owner\"\r\n            );\r\n            store.setRequester(vaultId, nftIds[i], address(0));\r\n            store.setIsEligible(vaultId, nftIds[i], true);\r\n            store.holdingsAdd(vaultId, nftIds[i]);\r\n            store.xToken(vaultId).mint(requester, 10**18);\r\n        }\r\n    }\r\n\r\n   function _mint(uint256 vaultId, uint256[] memory nftIds, bool isDualOp)\r\n        internal\r\n        virtual\r\n    {\r\n        for (uint256 i = 0; i < nftIds.length; i = i.add(1)) {\r\n            uint256 nftId = nftIds[i];\r\n            require(isEligible(vaultId, nftId), \"1\");\r\n            \r\n            if (isVault1155[vaultId]) {\r\n                IERC1155 nft = IERC1155(store.nftAddress(vaultId));\r\n                nft.safeTransferFrom(msg.sender, address(this), nftId, 1, \"\");\r\n            } else {\r\n                require(\r\n                    store.nft(vaultId).ownerOf(nftId) != address(this),\r\n                    \"2\"\r\n                );\r\n                store.nft(vaultId).transferFrom(msg.sender, address(this), nftId);\r\n                require(\r\n                    store.nft(vaultId).ownerOf(nftId) == address(this),\r\n                    \"3\"\r\n                );\r\n            }\r\n            \r\n            store.holdingsAdd(vaultId, nftId);\r\n        }\r\n        store.xToken(vaultId).mint(msg.sender, nftIds.length.mul(10**18));\r\n    }\r\n\r\n    function _mintD2(uint256 vaultId, uint256 amount)\r\n        internal\r\n        virtual\r\n    {\r\n        store.d2Asset(vaultId).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            amount.mul(1000)\r\n        );\r\n        store.xToken(vaultId).mint(msg.sender, amount);\r\n        store.setD2Holdings(\r\n            vaultId,\r\n            store.d2Holdings(vaultId).add(amount.mul(1000))\r\n        );\r\n    }\r\n\r\n    function _redeem(uint256 vaultId, uint256 numNFTs, bool isDualOp)\r\n        internal\r\n        virtual\r\n    {\r\n        for (uint256 i = 0; i < numNFTs; i = i.add(1)) {\r\n            uint256[] memory nftIds = new uint256[](1);\r\n            uint256 rand = _getPseudoRand(store.holdingsLength(vaultId));\r\n            nftIds[0] = store.holdingsAt(vaultId, rand);\r\n            _redeemHelper(vaultId, nftIds, isDualOp);\r\n            emit Redeem(vaultId, nftIds, 0, msg.sender);\r\n        }\r\n    }\r\n\r\n    function _redeemD2(uint256 vaultId, uint256 amount)\r\n        internal\r\n        virtual\r\n    {\r\n        store.xToken(vaultId).burnFrom(msg.sender, amount);\r\n        store.d2Asset(vaultId).safeTransfer(msg.sender, amount.mul(1000));\r\n        store.setD2Holdings(\r\n            vaultId,\r\n            store.d2Holdings(vaultId).sub(amount.mul(1000))\r\n        );\r\n    }\r\n\r\n    function _redeemHelper(\r\n        uint256 vaultId,\r\n        uint256[] memory nftIds,\r\n        bool isDualOp\r\n    ) internal virtual {\r\n        store.xToken(vaultId).burnFrom(msg.sender, nftIds.length.mul(10**18));\r\n        for (uint256 i = 0; i < nftIds.length; i = i.add(1)) {\r\n            uint256 nftId = nftIds[i];\r\n            require(store.holdingsContains(vaultId, nftId), \"1\");\r\n            if (store.holdingsContains(vaultId, nftId)) {\r\n                store.holdingsRemove(vaultId, nftId);\r\n            }\r\n            if (store.flipEligOnRedeem(vaultId)) {\r\n                bool isElig = store.isEligible(vaultId, nftId);\r\n                store.setIsEligible(vaultId, nftId, !isElig);\r\n            }\r\n            if (isVault1155[vaultId]) {\r\n                IERC1155 nft = IERC1155(store.nftAddress(vaultId));\r\n                nft.safeTransferFrom(address(this), msg.sender, nftId, 1, \"\");\r\n            } else if (vaultId > 6 && vaultId < 10) {\r\n                KittyCore kittyCore = KittyCore(store.nftAddress(vaultId));\r\n                kittyCore.transfer(msg.sender, nftId);\r\n            } else {\r\n                store.nft(vaultId).safeTransferFrom(\r\n                    address(this),\r\n                    msg.sender,\r\n                    nftId\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function mint(uint256 vaultId, uint256[] memory nftIds, uint256 d2Amount)\r\n        public\r\n        payable\r\n        virtual\r\n        nonReentrant\r\n    {\r\n        onlyOwnerIfPaused(1);\r\n        require(!isFullyMigrated[vaultId], \"This vault has been migrated\");\r\n        if (store.isD2Vault(vaultId)) {\r\n            _mintD2(vaultId, d2Amount);\r\n        } else {\r\n            _mint(vaultId, nftIds, false);\r\n        }\r\n        emit Mint(vaultId, nftIds, d2Amount, msg.sender);\r\n    }\r\n\r\n    function redeem(uint256 vaultId, uint256 amount)\r\n        public\r\n        payable\r\n        virtual\r\n        nonReentrant\r\n    {\r\n        onlyOwnerIfPaused(2);\r\n        require(!isFullyMigrated[vaultId], \"This vault has been migrated\");\r\n        if (!store.isD2Vault(vaultId)) {\r\n            _redeem(vaultId, amount, false);\r\n        } else {\r\n            _redeemD2(vaultId, amount);\r\n        }\r\n    }\r\n    \r\n    function setIsEligible(\r\n        uint256 vaultId,\r\n        uint256[] memory nftIds,\r\n        bool _boolean\r\n    ) public virtual {\r\n        onlyPrivileged(vaultId);\r\n        for (uint256 i = 0; i < nftIds.length; i = i.add(1)) {\r\n            store.setIsEligible(vaultId, nftIds[i], _boolean);\r\n        }\r\n    }\r\n\r\n    // function setNegateEligibility(uint256 vaultId, bool shouldNegate)\r\n    //     public\r\n    //     virtual\r\n    // {\r\n    //     onlyPrivileged(vaultId);\r\n    //     require(\r\n    //         store\r\n    //             .holdingsLength(vaultId)\r\n    //             .add(store.d2Holdings(vaultId)) ==\r\n    //             0,\r\n    //         \"1\"\r\n    //     );\r\n    //     store.setNegateEligibility(vaultId, shouldNegate);\r\n    // }\r\n    \r\n    function setIs1155(\r\n        uint256 vaultId,\r\n        bool _boolean\r\n    ) public virtual {\r\n        onlyPrivileged(vaultId);\r\n        isVault1155[vaultId] = _boolean;\r\n    }\r\n\r\n    // function setAllowMintRequests(uint256 vaultId, bool isAllowed)\r\n    //     public\r\n    //     virtual\r\n    // {\r\n    //     onlyPrivileged(vaultId);\r\n    //     store.setAllowMintRequests(vaultId, isAllowed);\r\n    // }\r\n\r\n    function setFlipEligOnRedeem(uint256 vaultId, bool flipElig)\r\n        public\r\n        virtual\r\n    {\r\n        onlyPrivileged(vaultId);\r\n        store.setFlipEligOnRedeem(vaultId, flipElig);\r\n    }\r\n\r\n    function setManager(uint256 vaultId, address newManager) public virtual {\r\n        onlyPrivileged(vaultId);\r\n        store.setManager(vaultId, newManager);\r\n    }\r\n\r\n    function finalizeVault(uint256 vaultId) public virtual {\r\n        onlyPrivileged(vaultId);\r\n        if (!store.isFinalized(vaultId)) {\r\n            store.setIsFinalized(vaultId, true);\r\n        }\r\n    }\r\n\r\n    function closeVault(uint256 vaultId) public virtual {\r\n        onlyPrivileged(vaultId);\r\n        if (!store.isFinalized(vaultId)) {\r\n            store.setIsFinalized(vaultId, true);\r\n        }\r\n        store.setIsClosed(vaultId, true);\r\n    }\r\n}\r\n\r\ninterface INFTXVaultFactory {\r\n  // Read functions.\r\n  function numVaults() external view returns (uint256);\r\n  function zapContract() external view returns (address);\r\n  function feeDistributor() external view returns (address);\r\n  function eligibilityManager() external view returns (address);\r\n  function vault(uint256 vaultId) external view returns (address);\r\n  function vaultsForAsset(address asset) external view returns (address[] memory);\r\n}\r\n\r\ninterface INFTXVault {\r\n    function assetAddress() external returns (address);\r\n    function vaultFactory() external returns (address);\r\n    function eligibilityStorage() external returns (address);\r\n\r\n    function is1155() external returns (bool);\r\n    function allowAllItems() external returns (bool);\r\n\r\n    function vaultId() external returns (uint256);\r\n    function mintFee() external returns (uint256);\r\n    function randomRedeemFee() external returns (uint256);\r\n    function targetRedeemFee() external returns (uint256);\r\n\r\n    function setFees(\r\n        uint256 _mintFee,\r\n        uint256 _randomRedeemFee,\r\n        uint256 _targetRedeemFee\r\n    ) external;\r\n\r\n    function mint(\r\n        uint256[] calldata tokenIds,\r\n        uint256[] calldata amounts /* ignored for ERC721 vaults */\r\n    ) external returns (uint256);\r\n\r\n    function redeem(uint256 amount, uint256[] calldata specificIds)\r\n        external\r\n        returns (uint256[] memory);\r\n}\r\n\r\ninterface WrappedPunks {\r\n    function burn(uint256 punkIndex) external;\r\n}\r\n\r\ncontract NFTXv12Migration is NFTX {\r\n\r\n    function migrateVaultToV2(uint256 v1VaultId, uint256 v2VaultId, uint256 count) external onlyOwner {\r\n        // Safeguards.\r\n        if (v1VaultId == 3) {\r\n            revert(\"Migration not allowed\");\r\n        }\r\n        uint256 totalHoldings = store.holdingsLength(v1VaultId);\r\n        require(totalHoldings > 0, \"Empty vault\");\r\n        require(count != 0, \"Count cannot be 0\");\r\n        if (count > totalHoldings) {\r\n            count = totalHoldings;\r\n        }\r\n\r\n        // Make sure we're not overriding an existing migration.\r\n        address v2Vault = INFTXVaultFactory(0xBE86f647b167567525cCAAfcd6f881F1Ee558216).vault(v2VaultId);\r\n        address v2Addr = migrationPair[v1VaultId];\r\n        require(v2Addr == address(0) || v2Addr == v2Vault, \"Cannot overwrite migration pair\");\r\n\r\n        // Approveand migrate the assets.\r\n        address assetAddr = INFTXVault(v2Vault).assetAddress();\r\n        uint256[] memory ids = new uint256[](count);\r\n        uint256[] memory amounts = new uint256[](count);\r\n        for (uint256 i = 0; i < count; i++) {\r\n            uint256 tokenId = store.holdingsAt(v1VaultId, i);\r\n            ids[i] = tokenId;\r\n            amounts[i] = 1;\r\n            approveERC721(assetAddr, v2Vault, tokenId);\r\n        }\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n            store.holdingsRemove(v1VaultId, ids[i]);\r\n        }\r\n        uint256 v2BalBefore = IERC20(v2Vault).balanceOf(address(this));\r\n        INFTXVault(v2Vault).mint(ids, amounts);\r\n\r\n        // Ensure we got the right amount back.\r\n        uint256 v2BalAfter = IERC20(v2Vault).balanceOf(address(this));\r\n        require(v2BalAfter-v2BalBefore == count * 10**18, \"Received less than expected v2\");\r\n        migrationPair[v1VaultId] = v2Vault;\r\n        if (store.holdingsLength(v1VaultId) == 0) {\r\n            isFullyMigrated[v1VaultId] = true;\r\n        }\r\n    }\r\n\r\n    function targetRedeem(uint256 v1VaultId, uint256[] calldata specificIds) external onlyOwner {\r\n        _redeemHelper(v1VaultId, specificIds, false);\r\n        emit Redeem(v1VaultId, specificIds, 0, msg.sender);\r\n    }\r\n\r\n    function targetWithdraw(uint256 v1VaultId, uint256[] calldata specificIds, address to) external onlyOwner {\r\n        for (uint256 i = 0; i < specificIds.length; i = i.add(1)) {\r\n            uint256 nftId = specificIds[i];\r\n            require(store.holdingsContains(v1VaultId, nftId), \"1\");\r\n            if (store.holdingsContains(v1VaultId, nftId)) {\r\n                store.holdingsRemove(v1VaultId, nftId);\r\n            }\r\n            if (v1VaultId > 6 && v1VaultId < 10) {\r\n                KittyCore kittyCore = KittyCore(store.nftAddress(v1VaultId));\r\n                kittyCore.transfer(msg.sender, nftId);\r\n            } else {\r\n                store.nft(v1VaultId).safeTransferFrom(\r\n                    address(this),\r\n                    to,\r\n                    nftId\r\n                );\r\n            }\r\n        }\r\n        if (store.holdingsLength(v1VaultId) == 0) {\r\n            isFullyMigrated[v1VaultId] = true;\r\n        }\r\n    }\r\n\r\n    function forceMigrationComplete(uint256 v1VaultId) external onlyOwner {\r\n        isFullyMigrated[v1VaultId] = true;\r\n    }\r\n\r\n    function migrateV1Tokens(uint256 v1VaultId) external {\r\n        onlyOwnerIfPaused(4);\r\n        require(isFullyMigrated[v1VaultId], \"This vault has not been migrated\");\r\n        IXToken xToken = store.xToken(v1VaultId);\r\n        uint256 bal = xToken.balanceOf(msg.sender);\r\n        require(bal > 0, \"0\");\r\n        xToken.burnFrom(msg.sender, bal);\r\n        IERC20 v2Token = IERC20(migrationPair[v1VaultId]);\r\n        v2Token.transfer(msg.sender, bal);\r\n    }\r\n\r\n    function approveERC721(address assetAddr, address to, uint256 tokenId) internal virtual {\r\n        address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\r\n        address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\r\n        // unwrap punks\r\n        bytes memory data;\r\n        if (assetAddr == kitties) {\r\n            // Cryptokitties.\r\n            data = abi.encodeWithSignature(\"approve(address,uint256)\", to, tokenId);\r\n        } else if (assetAddr == punks) {\r\n            // Burn the wrapped punk.\r\n            WrappedPunks(0xb7F7F6C52F2e2fdb1963Eab30438024864c313F6).burn(tokenId);\r\n            // CryptoPunks.\r\n            data = abi.encodeWithSignature(\"offerPunkForSaleToAddress(uint256,uint256,address)\", tokenId, 0, to);\r\n        } else {\r\n            if (IERC721(assetAddr).isApprovedForAll(address(this), to)) {\r\n                return;\r\n            }\r\n            // Default.\r\n            data = abi.encodeWithSignature(\"setApprovalForAll(address,bool)\", to, true);\r\n        }\r\n        (bool success, bytes memory resultData) = address(assetAddr).call(data);\r\n        require(success, string(resultData));\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"d2Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"MintRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NewVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"d2Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"}],\"name\":\"approveMintRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"closeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"finalizeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"v1VaultId\",\"type\":\"uint256\"}],\"name\":\"forceMigrationComplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storeAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"isEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isFullyMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isVault1155\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"v1VaultId\",\"type\":\"uint256\"}],\"name\":\"migrateV1Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"v1VaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"v2VaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"migrateVaultToV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"migrationPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"d2Amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pauserId\",\"type\":\"uint256\"}],\"name\":\"onlyOwnerIfPaused\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rangeEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rangeStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"}],\"name\":\"revokeMintRequests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"flipElig\",\"type\":\"bool\"}],\"name\":\"setFlipEligOnRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_boolean\",\"type\":\"bool\"}],\"name\":\"setIs1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_boolean\",\"type\":\"bool\"}],\"name\":\"setIsEligible\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pauserId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isPaused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract IXStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"v1VaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"}],\"name\":\"targetRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"v1VaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"specificIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"targetWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"vaultSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"NFTXv12Migration","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2d391bafc48ff6036ec59e629882a54dfa837fc7b00f761e4db1b3d54075150e"}]}