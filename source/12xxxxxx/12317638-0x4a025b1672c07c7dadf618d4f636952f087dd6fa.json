{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.0;\r\n\r\n/**\r\n * @title Multi Sender, support ETH and ERC20 Tokens\r\n */\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        require(a == b * c + (a % b));\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Multi Sender, support ETH and ERC20 Tokens\r\n */\r\n\r\ncontract ERC20Basic {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address who) public constant returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) public;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender)\r\n        public\r\n        constant\r\n        returns (uint256);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) public;\r\n\r\n    function approve(address spender, uint256 value) public;\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/**\r\n * @title Multi Sender, support ETH and ERC20 Tokens\r\n */\r\n\r\ncontract BasicToken is ERC20Basic {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) balances;\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function balanceOf(address _owner)\r\n        public\r\n        constant\r\n        returns (uint256 balance)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n/**\r\n * @title Multi Sender, support ETH and ERC20 Tokens\r\n */\r\n\r\ncontract StandardToken is BasicToken, ERC20 {\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public {\r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        constant\r\n        returns (uint256 remaining)\r\n    {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n/**\r\n * @title Multi Sender, support ETH and ERC20 Tokens\r\n */\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Multi Sender, support ETH and ERC20 Tokens\r\n */\r\n\r\ncontract MultiSender is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event LogTokenMultiSent(address token, uint256 total);\r\n    event LogGetToken(address token, address receiver, uint256 balance);\r\n    address public receiverAddress;\r\n    uint256 public txFee = 0.01 ether;\r\n    uint256 public VIPFee = 1 ether;\r\n\r\n    /* VIP List */\r\n    mapping(address => bool) public vipList;\r\n\r\n    /*\r\n     *  get balance\r\n     */\r\n    function getBalance(address _tokenAddress) public onlyOwner {\r\n        address _receiverAddress = getReceiverAddress();\r\n        if (_tokenAddress == address(0)) {\r\n            require(_receiverAddress.send(address(this).balance));\r\n            return;\r\n        }\r\n        StandardToken token = StandardToken(_tokenAddress);\r\n        uint256 balance = token.balanceOf(this);\r\n        token.transfer(_receiverAddress, balance);\r\n        emit LogGetToken(_tokenAddress, _receiverAddress, balance);\r\n    }\r\n\r\n    /*\r\n     *  Register VIP\r\n     */\r\n    function registerVIP() public payable {\r\n        require(msg.value >= VIPFee);\r\n        address _receiverAddress = getReceiverAddress();\r\n        require(_receiverAddress.send(msg.value));\r\n        vipList[msg.sender] = true;\r\n    }\r\n\r\n    /*\r\n     *  Register VIP\r\n     */\r\n    function registerFreeVIP(address _vip) public onlyOwner {\r\n        vipList[_vip] = true;\r\n    }\r\n\r\n    /*\r\n     *  VIP list\r\n     */\r\n    function addToVIPList(address[] _vipList) public onlyOwner {\r\n        for (uint256 i = 0; i < _vipList.length; i++) {\r\n            vipList[_vipList[i]] = true;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Remove address from VIP List by Owner\r\n     */\r\n    function removeFromVIPList(address[] _vipList) public onlyOwner {\r\n        for (uint256 i = 0; i < _vipList.length; i++) {\r\n            vipList[_vipList[i]] = false;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Check isVIP\r\n     */\r\n    function isVIP(address _addr) public view returns (bool) {\r\n        return _addr == owner || vipList[_addr];\r\n    }\r\n\r\n    /*\r\n     * set receiver address\r\n     */\r\n    function setReceiverAddress(address _addr) public onlyOwner {\r\n        require(_addr != address(0));\r\n        receiverAddress = _addr;\r\n    }\r\n\r\n    /*\r\n     * get receiver address\r\n     */\r\n    function getReceiverAddress() public view onlyOwner returns (address) {\r\n        if (receiverAddress == address(0)) {\r\n            return owner;\r\n        }\r\n\r\n        return receiverAddress;\r\n    }\r\n\r\n    /*\r\n     * set vip fee\r\n     */\r\n    function setVIPFee(uint256 _fee) public onlyOwner {\r\n        VIPFee = _fee;\r\n    }\r\n\r\n    /*\r\n     * set tx fee\r\n     */\r\n    function setTxFee(uint256 _fee) public onlyOwner {\r\n        txFee = _fee;\r\n    }\r\n\r\n    function ethSendSameValue(address[] _to, uint256 _value) internal {\r\n        uint256 sendAmount = _to.length.mul(_value);\r\n        uint256 remainingValue = msg.value;\r\n\r\n        bool vip = isVIP(msg.sender);\r\n        if (vip) {\r\n            require(remainingValue >= sendAmount);\r\n        } else {\r\n            require(remainingValue >= sendAmount.add(txFee));\r\n        }\r\n        require(_to.length <= 255);\r\n\r\n        for (uint8 i = 0; i < _to.length; i++) {\r\n            remainingValue = remainingValue.sub(_value);\r\n            require(_to[i].send(_value));\r\n        }\r\n\r\n        emit LogTokenMultiSent(\r\n            0x000000000000000000000000000000000000bEEF,\r\n            msg.value\r\n        );\r\n    }\r\n\r\n    function ethSendDifferentValue(address[] _to, uint256[] _value) internal {\r\n        uint256 sendAmount = 0;\r\n        for (uint8 i = 0; i < _value.length; i++) {\r\n            sendAmount = sendAmount.add(_value[i]);\r\n        }\r\n        uint256 remainingValue = msg.value;\r\n\r\n        require(remainingValue >= sendAmount);\r\n\r\n        require(_to.length == _value.length);\r\n        require(_to.length <= 255);\r\n\r\n        for (i = 0; i < _to.length; i++) {\r\n            remainingValue = remainingValue.sub(_value[i]);\r\n            require(_to[i].send(_value[i]));\r\n        }\r\n        emit LogTokenMultiSent(\r\n            0x000000000000000000000000000000000000bEEF,\r\n            msg.value\r\n        );\r\n    }\r\n\r\n    function coinSendSameValue(\r\n        address _tokenAddress,\r\n        address[] _to,\r\n        uint256 _value\r\n    ) internal {\r\n        uint256 sendValue = msg.value;\r\n        bool vip = isVIP(msg.sender);\r\n        if (!vip) {\r\n            require(sendValue >= txFee);\r\n        }\r\n        require(_to.length <= 255);\r\n\r\n        address from = msg.sender;\r\n        uint256 sendAmount = _to.length.mul(_value);\r\n\r\n        StandardToken token = StandardToken(_tokenAddress);\r\n        for (uint8 i = 0; i < _to.length; i++) {\r\n            token.transferFrom(from, _to[i], _value);\r\n        }\r\n\r\n        emit LogTokenMultiSent(_tokenAddress, sendAmount);\r\n    }\r\n\r\n    function coinSendDifferentValue(\r\n        address _tokenAddress,\r\n        address[] _to,\r\n        uint256[] _value\r\n    ) internal {\r\n        uint256 sendValue = msg.value;\r\n        bool vip = isVIP(msg.sender);\r\n        if (!vip) {\r\n            require(sendValue >= txFee);\r\n        }\r\n\r\n        require(_to.length == _value.length);\r\n        require(_to.length <= 255);\r\n\r\n        uint256 sendAmount = 0;\r\n        for (uint8 i = 0; i < _value.length; i++) {\r\n            sendAmount = sendAmount.add(_value[i]);\r\n        }\r\n        StandardToken token = StandardToken(_tokenAddress);\r\n\r\n        for (i = 0; i < _to.length; i++) {\r\n            token.transferFrom(msg.sender, _to[i], _value[i]);\r\n        }\r\n        emit LogTokenMultiSent(_tokenAddress, sendAmount);\r\n    }\r\n\r\n    /*\r\n        Send ether with the same value by a explicit call method\r\n    */\r\n\r\n    function sendEth(address[] _to, uint256 _value) public payable {\r\n        ethSendSameValue(_to, _value);\r\n    }\r\n\r\n    /*\r\n        Send ether with the different value by a explicit call method\r\n    */\r\n    function multisend(address[] _to, uint256[] _value) public payable {\r\n        ethSendDifferentValue(_to, _value);\r\n    }\r\n\r\n    /*\r\n        Send ether with the different value by a implicit call method\r\n    */\r\n\r\n    function mutiSendETHWithDifferentValue(address[] _to, uint256[] _value)\r\n        public\r\n        payable\r\n    {\r\n        ethSendDifferentValue(_to, _value);\r\n    }\r\n\r\n    /*\r\n        Send ether with the same value by a implicit call method\r\n    */\r\n\r\n    function mutiSendETHWithSameValue(address[] _to, uint256 _value)\r\n        public\r\n        payable\r\n    {\r\n        ethSendSameValue(_to, _value);\r\n    }\r\n\r\n    /*\r\n        Send coin with the same value by a implicit call method\r\n    */\r\n\r\n    function mutiSendCoinWithSameValue(\r\n        address _tokenAddress,\r\n        address[] _to,\r\n        uint256 _value\r\n    ) public payable {\r\n        coinSendSameValue(_tokenAddress, _to, _value);\r\n    }\r\n\r\n    /*\r\n        Send coin with the different value by a implicit call method, this method can save some fee.\r\n    */\r\n    function mutiSendCoinWithDifferentValue(\r\n        address _tokenAddress,\r\n        address[] _to,\r\n        uint256[] _value\r\n    ) public payable {\r\n        coinSendDifferentValue(_tokenAddress, _to, _value);\r\n    }\r\n\r\n    /*\r\n        Send coin with the different value by a explicit call method\r\n    */\r\n    function multisendToken(\r\n        address _tokenAddress,\r\n        address[] _to,\r\n        uint256[] _value\r\n    ) public payable {\r\n        coinSendDifferentValue(_tokenAddress, _to, _value);\r\n    }\r\n\r\n    /*\r\n        Send coin with the same value by a explicit call method\r\n    */\r\n    function drop(\r\n        address _tokenAddress,\r\n        address[] _to,\r\n        uint256 _value\r\n    ) public payable {\r\n        coinSendSameValue(_tokenAddress, _to, _value);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"multisendToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"receiverAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"drop\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"mutiSendETHWithDifferentValue\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mutiSendCoinWithSameValue\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mutiSendETHWithSameValue\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setVIPFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReceiverAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"mutiSendCoinWithDifferentValue\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setReceiverAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"registerVIP\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vipList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"multisend\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vipList\",\"type\":\"address[]\"}],\"name\":\"addToVIPList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"txFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vip\",\"type\":\"address\"}],\"name\":\"registerFreeVIP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setTxFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VIPFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isVIP\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vipList\",\"type\":\"address[]\"}],\"name\":\"removeFromVIPList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address[]\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sendEth\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"LogTokenMultiSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"LogGetToken\",\"type\":\"event\"}]","ContractName":"MultiSender","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://72d9bdbc036483082c1f10fd2c894642b1420bcb161596495752a7587c7a27cc"}]}