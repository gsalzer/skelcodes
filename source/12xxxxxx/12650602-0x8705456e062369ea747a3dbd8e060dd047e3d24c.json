{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"sources\": {\r\n    \"IGnosisAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.7.5;\\n\\ninterface IGnosisAuction {\\n    function settleAuction(uint256 auctionId) external returns (bytes32 clearingOrder);\\n}\\n\"\r\n    },\r\n    \"IIntegralToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.7.5;\\n\\ninterface IIntegralToken {\\n    function setOwner(address _owner) external;\\n\\n    function setBlacklisted(address account, bool _isBlacklisted) external;\\n}\\n\"\r\n    },\r\n    \"SettleGnosisAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.7.5;\\n\\nimport 'IGnosisAuction.sol';\\nimport 'IIntegralToken.sol';\\n\\ncontract SettleGnosisAuction {\\n    address owner;\\n    address integralTokenAddress;\\n    address gnosisAuctionAddress;\\n    uint256 auctionId;\\n\\n    constructor(\\n        address _integralTokenAddress,\\n        address _gnosisAuctionAddress,\\n        uint256 _auctionId\\n    ) {\\n        require(_integralTokenAddress != address(0), 'SA_ZERO_ADDRESS');\\n        require(_gnosisAuctionAddress != address(0), 'SA_ZERO_ADDRESS');\\n        owner = msg.sender;\\n        integralTokenAddress = _integralTokenAddress;\\n        gnosisAuctionAddress = _gnosisAuctionAddress;\\n        auctionId = _auctionId;\\n    }\\n\\n    function settle() external {\\n        require(owner == msg.sender, 'SA_FORBIDDEN');\\n        setBlacklisted(gnosisAuctionAddress, false);\\n        IGnosisAuction(gnosisAuctionAddress).settleAuction(auctionId);\\n        setBlacklisted(gnosisAuctionAddress, true);\\n    }\\n\\n    function setBlacklisted(address _address, bool _isBlacklisted) internal {\\n        IIntegralToken(integralTokenAddress).setBlacklisted(_address, _isBlacklisted);\\n    }\\n\\n    function setTokenOwner(address tokenOwner) external {\\n        require(owner == msg.sender, 'SA_FORBIDDEN');\\n        require(tokenOwner != address(0), 'SA_ZERO_ADDRESS');\\n        IIntegralToken(integralTokenAddress).setOwner(tokenOwner);\\n    }\\n\\n    function destroy() external {\\n        require(owner == msg.sender, 'SA_FORBIDDEN');\\n        selfdestruct(msg.sender);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"libraries\": {\r\n      \"IGnosisAuction.sol\": {},\r\n      \"IIntegralToken.sol\": {},\r\n      \"SettleGnosisAuction.sol\": {}\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"language\": \"Solidity\"\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integralTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gnosisAuctionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"destroy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"setTokenOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SettleGnosisAuction","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005bc96017dccaca53601d92125c5c6db81d000da50000000000000000000000000b7ffc1f4ad541a4ed16b40d8c37f0929158d101000000000000000000000000000000000000000000000000000000000000001c","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}