{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Users/razgriz/Desktop/Fund-Manager/contracts/Connector.sol\": {\r\n      \"content\": \"/**\\r\\n *Submitted for verification at Etherscan.io on 2021-02-06\\r\\n*/\\r\\n\\r\\n// File: browser/NyanFundInterface.sol\\r\\n\\r\\npragma solidity ^0.6.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface NFund {\\r\\n    function approveSpendERC20(address, uint256) external;\\r\\n    \\r\\n    function approveSpendETH(address, uint256) external;\\r\\n    \\r\\n    function newVotingRound() external;\\r\\n    \\r\\n    function setVotingAddress(address) external;\\r\\n    \\r\\n    function setConnectorAddress(address) external;\\r\\n    \\r\\n    function setNewFundAddress(address) external;\\r\\n    \\r\\n    function setNyanAddress(address) external;\\r\\n    \\r\\n    function setCatnipAddress(address) external;\\r\\n    \\r\\n    function setDNyanAddress(address) external;\\r\\n    \\r\\n    function setBalanceLimit(uint256) external;\\r\\n    \\r\\n    function sendToNewContract(address) external;\\r\\n}\\r\\n\\r\\ninterface NVoting {\\r\\n    function setConnector(address) external;\\r\\n    \\r\\n    function setFundAddress(address) external;\\r\\n    \\r\\n    function setRewardsContract(address) external;\\r\\n    \\r\\n    function setIsRewardingCatnip(bool) external;\\r\\n    \\r\\n    function setVotingPeriodBlockLength(uint256) external;\\r\\n    \\r\\n    function setNyanAddress(address) external;\\r\\n    \\r\\n    function setCatnipAddress(address) external;\\r\\n    \\r\\n    function setDNyanAddress(address) external;\\r\\n    \\r\\n    function distributeFunds(address, uint256) external;\\r\\n    \\r\\n    function burnCatnip() external;\\r\\n}\\r\\n\\r\\ninterface NConnector {\\r\\n    function executeBid(\\r\\n        string calldata, \\r\\n        string calldata, \\r\\n        address[] calldata , \\r\\n        uint256[] calldata, \\r\\n        string[] calldata, \\r\\n        bytes[] calldata) external;\\r\\n}\\r\\n\\r\\ninterface NyanV2 {\\r\\n    \\r\\n    function swapNyanV1(uint256) external;\\r\\n    \\r\\n    function stakeNyanV2LP(uint256) external;\\r\\n    \\r\\n    function unstakeNyanV2LP(uint256) external;\\r\\n    \\r\\n    function stakeDNyanV2LP(uint256) external;\\r\\n    \\r\\n    function unstakeDNyanV2LP(uint256) external;\\r\\n    \\r\\n    function addNyanAndETH(uint256) payable external;\\r\\n    \\r\\n    function claimETHLP() external;\\r\\n    \\r\\n    function initializeV2ETHPool() external;\\r\\n}\\r\\n\\r\\n\\r\\n// File: browser/UniswapV2Interface.sol\\r\\n\\r\\npragma solidity ^0.6.6;\\r\\n\\r\\n\\r\\n// File: browser/ERC20Interface.sol\\r\\n\\r\\npragma solidity ^0.6.6;\\r\\n\\r\\ncontract ERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256) {}\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256) {}\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool) {}\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256) {}\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool) {}\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {}\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n// File: browser/Connector.sol\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.6.6;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ncontract Proxiable {\\r\\n    // Code position in storage is keccak256(\\\"PROXIABLE\\\") = \\\"0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7\\\"\\r\\n\\r\\n    function updateCodeAddress(address newAddress) internal {\\r\\n        require(\\r\\n            bytes32(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7) == Proxiable(newAddress).proxiableUUID(),\\r\\n            \\\"Not compatible\\\"\\r\\n        );\\r\\n        assembly { // solium-disable-line\\r\\n            sstore(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7, newAddress)\\r\\n        }\\r\\n    }\\r\\n    function proxiableUUID() public pure returns (bytes32) {\\r\\n        return 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract LibraryLockDataLayout {\\r\\n  bool public initialized = false;\\r\\n}\\r\\n\\r\\ncontract LibraryLock is LibraryLockDataLayout {\\r\\n    // Ensures no one can manipulate the Logic Contract once it is deployed.\\r\\n    // PARITY WALLET HACK PREVENTION\\r\\n\\r\\n    modifier delegatedOnly() {\\r\\n        require(initialized == true, \\\"The library is locked. No direct 'call' is allowed\\\");\\r\\n        _;\\r\\n    }\\r\\n    function initialize() internal {\\r\\n        initialized = true;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract DataLayout is LibraryLock {\\r\\n    struct bid {\\r\\n        address bidder;\\r\\n        uint256 votes;\\r\\n        address[] addresses;\\r\\n        uint256[] integers;\\r\\n        string[] strings;\\r\\n        bytes[] bytesArr;\\r\\n    }\\r\\n    \\r\\n    address public votingAddress;\\r\\n    address public fundAddress;\\r\\n    address public nyanV2;\\r\\n    address public owner;\\r\\n    // address public uniswapRouterAddress;\\r\\n    // IUniswapV2Router02 public uniswapRouter;\\r\\n    \\r\\n    \\r\\n    address[] public tokenList;\\r\\n    mapping(address => bool) public whitelist;\\r\\n    \\r\\n    \\r\\n    modifier _onlyOwner() {\\r\\n        require((msg.sender == votingAddress) || (msg.sender == owner)  || (msg.sender == address(this)));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    address public easyBid;\\r\\n    address public registry;\\r\\n    address public contractManager;\\r\\n    uint256[] public fundHistory;\\r\\n    address[] public historyManager;\\r\\n    string[] public historyReason;\\r\\n    address[] public historyRecipient;\\r\\n    \\r\\n}\\r\\n\\r\\ncontract Connector is DataLayout, Proxiable  {\\r\\n\\r\\n    function connectorConstructor(address _votingAddress, address _nyan2) public {\\r\\n        require(!initialized, \\\"Contract is already initialized\\\");\\r\\n        owner = msg.sender;\\r\\n        votingAddress = _votingAddress;\\r\\n        nyanV2 = _nyan2;\\r\\n        initialize();\\r\\n    }\\r\\n    \\r\\n    receive() external payable {\\r\\n        \\r\\n    }\\r\\n    \\r\\n    function relinquishOwnership()public _onlyOwner delegatedOnly {\\r\\n        require(contractManager != address(0));\\r\\n        owner = address(0);\\r\\n    } \\r\\n    \\r\\n    /** @notice Updates the logic contract.\\r\\n      * @param newCode  Address of the new logic contract.\\r\\n      */\\r\\n    function updateCode(address newCode) public delegatedOnly  {\\r\\n        if (owner == address(0)) {\\r\\n            require(msg.sender == contractManager);\\r\\n        } else {\\r\\n            require(msg.sender == owner);\\r\\n        }\\r\\n        updateCodeAddress(newCode);\\r\\n        \\r\\n    }\\r\\n    \\r\\n    function setVotingAddress(address _addr) public _onlyOwner delegatedOnly {\\r\\n        votingAddress = _addr;\\r\\n    }\\r\\n    \\r\\n    function setRegistry(address _registry) public _onlyOwner delegatedOnly {\\r\\n        registry = _registry;\\r\\n    }\\r\\n    \\r\\n    function setContractManager(address _contract) public _onlyOwner delegatedOnly {\\r\\n        contractManager = _contract;\\r\\n    }\\r\\n    \\r\\n    function setOwner(address _owner) public _onlyOwner delegatedOnly {\\r\\n        owner = _owner;\\r\\n    }\\r\\n    \\r\\n    function transferToFund() public delegatedOnly {\\r\\n        for (uint256 i = 0; i < tokenList.length; i++) {\\r\\n            ERC20 erc20 = ERC20(tokenList[0]);\\r\\n            uint256 balance = erc20.balanceOf(address(this));\\r\\n            erc20.transfer(fundAddress, balance);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function fundLog(address manager, string memory reason, address recipient) public delegatedOnly payable {\\r\\n        //must be from registered contract\\r\\n        Registry(registry).checkRegistry(msg.sender);\\r\\n        fundHistory.push(fundAddress.balance);\\r\\n        historyManager.push(manager);\\r\\n        historyReason.push(reason);\\r\\n        historyRecipient.push(recipient);\\r\\n    }\\r\\n    \\r\\n    function getFundHistory() public view returns(uint256[] memory, address[] memory, string[] memory, address[] memory) {\\r\\n        return (\\r\\n            fundHistory,\\r\\n            historyManager,\\r\\n            historyReason,\\r\\n            historyRecipient\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    function getFundETH(uint256 amount) public delegatedOnly {\\r\\n        NFund fund = NFund(fundAddress);\\r\\n        require(msg.sender == registry);\\r\\n        fund.approveSpendETH(registry, amount);\\r\\n    }\\r\\n\\r\\n    \\r\\n    function returnFundETH() public payable delegatedOnly {\\r\\n        require(msg.sender == registry);\\r\\n        fundAddress.call{value: msg.value}(\\\"\\\");\\r\\n    }\\r\\n     \\r\\n    function withdrawDeposit(uint256 amount, address depositor) public delegatedOnly {\\r\\n        NFund fund = NFund(fundAddress);\\r\\n        require(msg.sender == registry);\\r\\n        fund.approveSpendETH(depositor, amount);\\r\\n    }\\r\\n     \\r\\n    function setEasyBidAddress(address _easyBid) public _onlyOwner delegatedOnly {\\r\\n        easyBid = _easyBid;\\r\\n    }\\r\\n\\r\\n    function getEasyBidETH(uint256 amount) public delegatedOnly {\\r\\n        NFund fund = NFund(fundAddress);\\r\\n        require(msg.sender == easyBid);\\r\\n        fund.approveSpendETH(easyBid, amount);\\r\\n\\r\\n    }\\r\\n\\r\\n    function sendMISCETH(address _address, uint256 _amount, string memory reason) public delegatedOnly {\\r\\n        NFund fund = NFund(fundAddress);\\r\\n        require(msg.sender == owner);\\r\\n        fund.approveSpendETH(_address, _amount);\\r\\n        fundLog(owner, reason, owner);\\r\\n    }\\r\\n\\r\\n    function sendMISCERC20(address _address, uint256 _amount, string memory reason) public delegatedOnly {\\r\\n        NFund fund = NFund(fundAddress);\\r\\n        require(msg.sender == owner);\\r\\n        fund.approveSpendERC20(_address, _amount);\\r\\n        ERC20 erc20 = ERC20(_address);\\r\\n        erc20.transfer(msg.sender, _amount);\\r\\n        fundLog(owner, reason, owner);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\ninterface Registry {\\r\\n    function checkRegistry(address _contract) external view returns(bool);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_votingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nyan2\",\"type\":\"address\"}],\"name\":\"connectorConstructor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"easyBid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fundHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"fundLog\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getEasyBidETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getFundETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundHistory\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historyReason\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"historyRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nyanV2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnFundETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"sendMISCERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"sendMISCETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"}],\"name\":\"setContractManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_easyBid\",\"type\":\"address\"}],\"name\":\"setEasyBidAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setVotingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferToFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCode\",\"type\":\"address\"}],\"name\":\"updateCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"withdrawDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Connector","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}