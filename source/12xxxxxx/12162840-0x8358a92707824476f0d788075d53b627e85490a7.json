{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/v2-migrations/aave/v1/main.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport { TokenInterface, AccountInterface } from \\\"../../common/interfaces.sol\\\";\\nimport { AaveInterface, ATokenInterface, AaveCoreInterface } from \\\"./interfaces.sol\\\";\\nimport { Helpers } from \\\"./helpers.sol\\\";\\nimport { Events } from \\\"./events.sol\\\";\\n\\nabstract contract AaveResolver is Helpers, Events {\\n    function _transferAtoken(\\n        uint _length,\\n        AaveInterface aave,\\n        ATokenInterface[] memory atokenContracts,\\n        address[] memory tokens,\\n        uint[] memory amts,\\n        address userAccount\\n    ) internal {\\n        for (uint i = 0; i < _length; i++) {\\n            if (amts[i] > 0) {\\n                require(atokenContracts[i].transferFrom(userAccount, address(this), amts[i]), \\\"allowance?\\\");\\n\\n                if (!getIsColl(aave, tokens[i])) {\\n                    aave.setUserUseReserveAsCollateral(tokens[i], true);\\n                }\\n            }\\n        }\\n    }\\n\\n    function _paybackOne(AaveInterface aave, address token, uint amt, address user) internal {\\n        if (amt > 0) {\\n            uint ethAmt;\\n\\n            if (token == ethAddr) {\\n                ethAmt = amt;\\n            }\\n\\n            aave.repay{value: ethAmt}(token, amt, payable(user));\\n        }\\n    }\\n\\n    function _borrow(\\n        uint _length,\\n        AaveInterface aave,\\n        address[] memory tokens,\\n        uint[] memory amts\\n    ) internal {\\n        for (uint i = 0; i < _length; i++) {\\n            if (amts[i] > 0) {\\n                bool isSmallAmt = amts[i] < minBorrowAmt;\\n                uint borrowAmt = isSmallAmt ? minBorrowAmt : amts[i];\\n                uint paybackAmt = isSmallAmt ? sub(minBorrowAmt, amts[i]) : 0;\\n\\n                aave.borrow(tokens[i], borrowAmt, 2, referalCode);\\n                _paybackOne(aave, tokens[i], paybackAmt, address(this));\\n            }\\n        }\\n    }\\n\\n    function _payback(\\n        uint _length,\\n        AaveInterface aave,\\n        address[] memory tokens,\\n        uint[] memory amts,\\n        address user\\n    ) internal {\\n        for (uint i = 0; i < _length; i++) {\\n            _paybackOne(aave, tokens[i], amts[i], user);\\n        }\\n    }\\n}\\n\\ncontract AaveImportResolver is AaveResolver {\\n    struct ImportData {\\n        uint[] supplyAmts;\\n        uint[] borrowAmts;\\n        ATokenInterface[] aTokens;\\n    }\\n\\n    function importAave(\\n        address userAccount,\\n        address[] calldata supplyTokens,\\n        address[] calldata borrowTokens\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        require(AccountInterface(address(this)).isAuth(userAccount), \\\"user-account-not-auth\\\");\\n\\n        require(supplyTokens.length > 0, \\\"0-length-not-allowed\\\");\\n\\n        ImportData memory data;\\n\\n        AaveInterface aave = AaveInterface(aaveProvider.getLendingPool());\\n        AaveCoreInterface aaveCore = AaveCoreInterface(aaveProvider.getLendingPoolCore());\\n\\n        data.supplyAmts = new uint[](supplyTokens.length);\\n        data.aTokens = new ATokenInterface[](supplyTokens.length);\\n\\n        for (uint i = 0; i < supplyTokens.length; i++) {\\n            data.aTokens[i] = ATokenInterface(aaveCore.getReserveATokenAddress(supplyTokens[i]));\\n            data.supplyAmts[i] = data.aTokens[i].balanceOf(userAccount);\\n        }\\n\\n        if (borrowTokens.length > 0) {\\n            data.borrowAmts = new uint[](borrowTokens.length);\\n\\n            for (uint i = 0; i < borrowTokens.length; i++) {\\n                data.borrowAmts[i] = getPaybackBalance(aave, borrowTokens[i], userAccount);\\n\\n                if (borrowTokens[i] != ethAddr && data.borrowAmts[i] > 0) {\\n                    uint allowance = data.borrowAmts[i] < minBorrowAmt ? minBorrowAmt : data.borrowAmts[i]; \\n                    TokenInterface(borrowTokens[i]).approve(address(aaveCore), allowance);\\n                }\\n            }\\n\\n            _borrow(borrowTokens.length, aave, borrowTokens, data.borrowAmts);\\n            _payback(borrowTokens.length, aave, borrowTokens, data.borrowAmts, userAccount);\\n        }\\n\\n        _transferAtoken(supplyTokens.length, aave, data.aTokens, supplyTokens, data.supplyAmts, userAccount);\\n\\n        _eventName = \\\"LogAaveV1Import(address,address[],address[],uint256[],uint256[])\\\";\\n        _eventParam = abi.encode(userAccount, supplyTokens, borrowTokens, data.supplyAmts, data.borrowAmts);\\n    }\\n}\\n\\ncontract ConnectV2AaveImport is AaveImportResolver {\\n    string public constant name = \\\"V2-AaveV1-Import-v1\\\";\\n}\"\r\n    },\r\n    \"contracts/v2-migrations/common/interfaces.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface TokenInterface {\\n    function approve(address, uint256) external;\\n    function transfer(address, uint) external;\\n    function transferFrom(address, address, uint) external;\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n    function balanceOf(address) external view returns (uint);\\n    function decimals() external view returns (uint);\\n}\\n\\ninterface MemoryInterface {\\n    function getUint(uint id) external returns (uint num);\\n    function setUint(uint id, uint val) external;\\n}\\n\\ninterface InstaMapping {\\n    function cTokenMapping(address) external view returns (address);\\n    function gemJoinMapping(bytes32) external view returns (address);\\n}\\n\\ninterface AccountInterface {\\n    function enable(address) external;\\n    function disable(address) external;\\n    function isAuth(address) external view returns (bool);\\n    function cast(\\n        string[] calldata _targets,\\n        bytes[] calldata _datas,\\n        address _origin\\n    ) external payable returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/v2-migrations/aave/v1/interfaces.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ninterface AaveInterface {\\n    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) external payable;\\n    function redeemUnderlying(\\n        address _reserve,\\n        address payable _user,\\n        uint256 _amount,\\n        uint256 _aTokenBalanceAfterRedeem\\n    ) external;\\n    function setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external;\\n    function getUserReserveData(address _reserve, address _user) external view returns (\\n        uint256 currentATokenBalance,\\n        uint256 currentBorrowBalance,\\n        uint256 principalBorrowBalance,\\n        uint256 borrowRateMode,\\n        uint256 borrowRate,\\n        uint256 liquidityRate,\\n        uint256 originationFee,\\n        uint256 variableBorrowIndex,\\n        uint256 lastUpdateTimestamp,\\n        bool usageAsCollateralEnabled\\n    );\\n    function borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode) external;\\n    function repay(address _reserve, uint256 _amount, address payable _onBehalfOf) external payable;\\n}\\n\\ninterface AaveProviderInterface {\\n    function getLendingPool() external view returns (address);\\n    function getLendingPoolCore() external view returns (address);\\n}\\n\\ninterface AaveCoreInterface {\\n    function getReserveATokenAddress(address _reserve) external view returns (address);\\n}\\n\\ninterface ATokenInterface {\\n    function redeem(uint256 _amount) external;\\n    function balanceOf(address _user) external view returns(uint256);\\n    function principalBalanceOf(address _user) external view returns(uint256);\\n    function transferFrom(address, address, uint) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/v2-migrations/aave/v1/helpers.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { DSMath } from \\\"../../common/math.sol\\\";\\nimport { Stores } from \\\"../../common/stores.sol\\\";\\nimport { AaveProviderInterface, AaveInterface } from \\\"./interfaces.sol\\\";\\n\\nabstract contract Helpers is DSMath, Stores {\\n    /**\\n     * @dev Aave referal code\\n     */\\n    uint16 constant internal referalCode = 3228;\\n\\n    /**\\n     * @dev Minimum borrowable amount in Aave v1\\n     */\\n    uint constant internal minBorrowAmt = 5000000; // 5e6\\n\\n    /**\\n     * @dev Aave Provider\\n     */\\n    AaveProviderInterface constant internal aaveProvider = AaveProviderInterface(0x24a42fD28C976A61Df5D00D0599C34c4f90748c8);\\n\\n    function getIsColl(AaveInterface aave, address token) internal view returns (bool isCol) {\\n        (, , , , , , , , , isCol) = aave.getUserReserveData(token, address(this));\\n    }\\n\\n    function getPaybackBalance(AaveInterface aave, address token, address user) internal view returns (uint amt) {\\n        (, uint bal, , , , , uint fee, , , ) = aave.getUserReserveData(token, user);\\n        amt = add(bal, fee);\\n    }\\n}\"\r\n    },\r\n    \"contracts/v2-migrations/aave/v1/events.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ncontract Events {\\n    event LogAaveV1Import(\\n        address indexed user,\\n        address[] supplyTokens,\\n        address[] borrowTokens,\\n        uint[] supplyAmts,\\n        uint[] borrowAmts\\n    );\\n}\"\r\n    },\r\n    \"contracts/v2-migrations/common/math.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract DSMath {\\n  uint constant WAD = 10 ** 18;\\n  uint constant RAY = 10 ** 27;\\n\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(x, y);\\n  }\\n\\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\\n    z = SafeMath.sub(x, y);\\n  }\\n\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.mul(x, y);\\n  }\\n\\n  function div(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.div(x, y);\\n  }\\n\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\\n  }\\n\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\\n  }\\n\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\\n  }\\n\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\\n  }\\n\\n  function toInt(uint x) internal pure returns (int y) {\\n    y = int(x);\\n    require(y >= 0, \\\"int-overflow\\\");\\n  }\\n\\n  function toRad(uint wad) internal pure returns (uint rad) {\\n    rad = mul(wad, 10 ** 27);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/v2-migrations/common/stores.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { MemoryInterface, InstaMapping } from \\\"./interfaces.sol\\\";\\n\\n\\nabstract contract Stores {\\n\\n  /**\\n   * @dev Return ethereum address\\n   */\\n  address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  /**\\n   * @dev Return Wrapped ETH address\\n   */\\n  address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  /**\\n   * @dev Return memory variable address\\n   */\\n  MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\\n\\n  /**\\n   * @dev Return InstaDApp Mapping Addresses\\n   */\\n  InstaMapping constant internal instaMapping = InstaMapping(0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88);\\n\\n  /**\\n   * @dev Get Uint value from InstaMemory Contract.\\n   */\\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\\n    returnVal = getId == 0 ? val : instaMemory.getUint(getId);\\n  }\\n\\n  /**\\n  * @dev Set Uint value in InstaMemory Contract.\\n  */\\n  function setUint(uint setId, uint val) virtual internal {\\n    if (setId != 0) instaMemory.setUint(setId, val);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"supplyTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"borrowTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"supplyAmts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"borrowAmts\",\"type\":\"uint256[]\"}],\"name\":\"LogAaveV1Import\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAccount\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"supplyTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"borrowTokens\",\"type\":\"address[]\"}],\"name\":\"importAave\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ConnectV2AaveImport","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}