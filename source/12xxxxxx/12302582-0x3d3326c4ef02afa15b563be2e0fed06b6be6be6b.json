{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address) external returns (uint256);\r\n\r\n    // some tokens (like USDT) are not returning bool as ERC20 standard require\r\n    function transfer(address, uint256) external;\r\n\r\n    // we will not check for return value because lots of non-erc20 complaints (like USDT)\r\n    function transferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) external;\r\n\r\n    function allowance(address, address) external returns (uint256);\r\n}\r\n\r\ncontract UniqStaking {\r\n    // Info of each user in pool\r\n    struct UserInfo {\r\n        uint256 depositTime;\r\n        bool bonus;\r\n    }\r\n\r\n    // Info about staking pool\r\n    struct PoolInfo {\r\n        uint256 slots;\r\n        uint256 stakeValue;\r\n        uint256 closeTime; // last call to stake\r\n        uint256 usedSlots;\r\n        uint256 lockPeriod; // stake length\r\n        address token;\r\n        string image;\r\n        string name;\r\n    }\r\n\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    // Info of each pool.\r\n    PoolInfo[] private _poolInfo;\r\n\r\n    // Info of each user that stakes.\r\n    // [stake no][user]=UserInfo\r\n    mapping(uint256 => mapping(address => UserInfo)) private _userInfo;\r\n\r\n    // how many tokens users stake\r\n    mapping(address => uint256) private _userStake;\r\n\r\n    event Deposit(\r\n        address indexed user,\r\n        uint256 indexed pid,\r\n        uint256 amount,\r\n        uint256 timeout\r\n    );\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n\r\n    string private _baseURI;\r\n\r\n    constructor(string memory baseURI) {\r\n        _baseURI = baseURI;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    @dev Return the length of pool array.\r\n    */\r\n    function getPoolCount() external view returns (uint256) {\r\n        return _poolInfo.length;\r\n    }\r\n\r\n    /**\r\n    @dev Return current number of holders in a pool\r\n     */\r\n    function getSlotsCount(uint256 _pid) external view returns (uint256) {\r\n        return _poolInfo[_pid].usedSlots;\r\n    }\r\n\r\n    function poolInfo(uint256 _pid) external view returns (PoolInfo memory) {\r\n        return _poolInfo[_pid];\r\n    }\r\n\r\n    function userInfo(uint256 _pid, address user)\r\n        external\r\n        view\r\n        returns (UserInfo memory)\r\n    {\r\n        return _userInfo[_pid][user];\r\n    }\r\n\r\n    // how long until user can withdraw from stake\r\n    function getCountdown(address user, uint256 id)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 ts = _userInfo[id][user].depositTime + _poolInfo[id].lockPeriod;\r\n        if (block.timestamp > ts) {\r\n            return 0;\r\n        } else {\r\n            return ts - block.timestamp;\r\n        }\r\n    }\r\n\r\n    // return full pool gift URL\r\n    function stakingGift(uint256 id) external view returns (string memory) {\r\n        return string(abi.encodePacked(_baseURI, _poolInfo[id].image));\r\n    }\r\n\r\n    /**\r\n    Open a new staking pool, starting now.\r\n    @param _slots: max number of stake users\r\n    @param _stake: min token required\r\n    @param _duration: lifetime of a pool in seconds\r\n    @param _lockPeriod: time to stake (in seconds)\r\n    @param _image: URL of image gift\r\n    @param _name: staking name\r\n   */\r\n    function addStakePool(\r\n        uint256 _slots,\r\n        uint256 _stake,\r\n        address _token,\r\n        uint256 _duration,\r\n        uint256 _lockPeriod,\r\n        string calldata _image,\r\n        string calldata _name\r\n    ) external onlyOwner {\r\n        _poolInfo.push(\r\n            PoolInfo({\r\n                slots: _slots,\r\n                stakeValue: _stake,\r\n                closeTime: block.timestamp + _duration,\r\n                usedSlots: 0,\r\n                lockPeriod: _lockPeriod,\r\n                token: _token,\r\n                image: _image,\r\n                name: _name\r\n            })\r\n        );\r\n    }\r\n\r\n    /**\r\n    Transfer ERC-20 token from sender's account to staking contract. \r\n   */\r\n    function deposit(uint256 _pid, uint256 _amount) external {\r\n        PoolInfo storage pool = _poolInfo[_pid];\r\n        UserInfo storage user = _userInfo[_pid][msg.sender];\r\n\r\n        // check if selected Pool restrictions are met\r\n        require(block.timestamp < pool.closeTime, \"Already closed\");\r\n        require(pool.usedSlots < pool.slots, \"Pool is already full\");\r\n        require(user.depositTime == 0, \"User already in staking pool\");\r\n        require(_amount == pool.stakeValue, \"Needs exact stake\");\r\n\r\n        user.depositTime = block.timestamp;\r\n        pool.usedSlots += 1;\r\n\r\n        // move fund and update records\r\n        IERC20(pool.token).transferFrom(\r\n            address(msg.sender),\r\n            address(this),\r\n            _amount\r\n        );\r\n\r\n        // store amount\r\n        _userStake[pool.token] += _amount;\r\n\r\n        // emit event\r\n        emit Deposit(\r\n            msg.sender,\r\n            _pid,\r\n            _amount,\r\n            pool.lockPeriod + block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n    Returns full funded amount of ERC-20 token to requester if lock period is over\r\n   */\r\n    function withdraw(uint256 _pid) external {\r\n        PoolInfo storage pool = _poolInfo[_pid];\r\n        UserInfo storage user = _userInfo[_pid][msg.sender];\r\n\r\n        // check if caller is a stakeholder of the current pool\r\n        require(user.depositTime > 0, \"Not stakeholder\");\r\n\r\n        // check if lock period is over\r\n        require(\r\n            block.timestamp > user.depositTime + pool.lockPeriod,\r\n            \"Still locked\"\r\n        );\r\n\r\n        // no double withdrawal\r\n        require(user.bonus == false, \"Already withdrawn\");\r\n\r\n        // make user happy\r\n        user.bonus = true;\r\n\r\n        // return fund\r\n        IERC20(pool.token).transfer(address(msg.sender), pool.stakeValue);\r\n\r\n        // reduce stored amount\r\n        _userStake[pool.token] -= pool.stakeValue;\r\n\r\n        // emit proper event\r\n        emit Withdraw(msg.sender, _pid, pool.stakeValue);\r\n    }\r\n\r\n    function pastStakes(address user) external view returns (uint256[] memory) {\r\n        uint256 max = _poolInfo.length;\r\n        if (max == 0) {\r\n            return new uint256[](0);\r\n        }\r\n        // need temporary storage\r\n        // solidity disallow size changes\r\n        uint256[] memory tmp = new uint256[](max);\r\n        uint256 found;\r\n        for (uint256 i = 0; i < max; i++) {\r\n            if (_userInfo[i][user].bonus) {\r\n                tmp[found] = i;\r\n                found += 1;\r\n            }\r\n        }\r\n        // copy to output\r\n        uint256[] memory stakes = new uint256[](found);\r\n        for (uint256 i = 0; i < found; i++) {\r\n            stakes[i] = tmp[i];\r\n        }\r\n        return stakes;\r\n    }\r\n\r\n    function currentStakes(address user)\r\n        external\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256 max = _poolInfo.length;\r\n        if (max == 0) {\r\n            return new uint256[](0);\r\n        }\r\n        uint256[] memory tmp = new uint256[](max);\r\n        uint256 found;\r\n        for (uint256 i = 0; i < max; i++) {\r\n            if (\r\n                _userInfo[i][user].depositTime > 0 &&\r\n                _userInfo[i][user].bonus == false\r\n            ) {\r\n                tmp[found] = i;\r\n                found += 1;\r\n            }\r\n        }\r\n        // copy to output\r\n        uint256[] memory stakes = new uint256[](found);\r\n        for (uint256 i = 0; i < found; i++) {\r\n            stakes[i] = tmp[i];\r\n        }\r\n        return stakes;\r\n    }\r\n\r\n    function acceptOwnership() external {\r\n        require(\r\n            msg.sender != address(0) && msg.sender == newOwner,\r\n            \"Only NewOwner\"\r\n        );\r\n        newOwner = address(0);\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only for contract Owner\");\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _newOwner) external onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    // Update baseURI for pool gifts\r\n    function updateUri(string calldata uri) external onlyOwner {\r\n        _baseURI = uri;\r\n    }\r\n\r\n    /**\r\n    @dev Function to recover accidentally send ERC20 tokens\r\n    @param _token ERC20 token address\r\n    */\r\n    function rescueERC20(address _token) external onlyOwner {\r\n        uint256 amt = IERC20(_token).balanceOf(address(this));\r\n        // leave users stake\r\n        amt -= _userStake[_token];\r\n        require(amt > 0, \"Nothing to rescue\");\r\n        IERC20(_token).transfer(owner, amt);\r\n    }\r\n\r\n    /**\r\n    @dev Function to recover any ETH send to contract\r\n    */\r\n    function rescueETH() external onlyOwner {\r\n        payable(owner).transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"addStakePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"currentStakes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getCountdown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getSlotsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pastStakes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"slots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usedSlots\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct UniqStaking.PoolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"stakingGift\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"updateUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bonus\",\"type\":\"bool\"}],\"internalType\":\"struct UniqStaking.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UniqStaking","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002268747470733a2f2f676174657761792e70696e6174612e636c6f75642f697066732f000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://af79acd7f314cc86d080bf4f1e0941bc716e2182401d2781787e318134cb7469"}]}