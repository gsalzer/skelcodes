{"status":"1","message":"OK","result":[{"SourceCode":"{\"Holdefi.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./HoldefiPausableOwnable.sol\\\";\\r\\nimport \\\"./HoldefiCollaterals.sol\\\";\\r\\n\\r\\n\\r\\n/// @notice File: contracts/HoldefiPrices.sol\\r\\ninterface HoldefiPricesInterface {\\r\\n\\tfunction getAssetValueFromAmount(address asset, uint256 amount) external view returns(uint256 value);\\r\\n\\tfunction getAssetAmountFromValue(address asset, uint256 value) external view returns(uint256 amount);\\t\\r\\n}\\r\\n\\r\\n/// @notice File: contracts/HoldefiSettings.sol\\r\\ninterface HoldefiSettingsInterface {\\r\\n\\r\\n\\t/// @notice Markets Features\\r\\n\\tstruct MarketSettings {\\r\\n\\t\\tbool isExist;\\r\\n\\t\\tbool isActive;      \\r\\n\\r\\n\\t\\tuint256 borrowRate;\\r\\n\\t\\tuint256 borrowRateUpdateTime;\\r\\n\\r\\n\\t\\tuint256 suppliersShareRate;\\r\\n\\t\\tuint256 suppliersShareRateUpdateTime;\\r\\n\\r\\n\\t\\tuint256 promotionRate;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Collateral Features\\r\\n\\tstruct CollateralSettings {\\r\\n\\t\\tbool isExist;\\r\\n\\t\\tbool isActive;    \\r\\n\\r\\n\\t\\tuint256 valueToLoanRate; \\r\\n\\t\\tuint256 VTLUpdateTime;\\r\\n\\r\\n\\t\\tuint256 penaltyRate;\\r\\n\\t\\tuint256 penaltyUpdateTime;\\r\\n\\r\\n\\t\\tuint256 bonusRate;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getInterests(address market)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (uint256 borrowRate, uint256 supplyRateBase, uint256 promotionRate);\\r\\n\\tfunction resetPromotionRate (address market) external;\\r\\n\\tfunction getMarketsList() external view returns(address[] memory marketsList);\\r\\n\\tfunction marketAssets(address market) external view returns(MarketSettings memory);\\r\\n\\tfunction collateralAssets(address collateral) external view returns(CollateralSettings memory);\\r\\n}\\r\\n\\r\\n/// @title Main Holdefi contract\\r\\n/// @author Holdefi Team\\r\\n/// @dev The address of ETH considered as 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\r\\n/// @dev All indexes are scaled by (secondsPerYear * rateDecimals)\\r\\n/// @dev All values are based ETH price considered 1 and all values decimals considered 30\\r\\ncontract Holdefi is HoldefiPausableOwnable {\\r\\n\\r\\n\\tusing SafeMath for uint256;\\r\\n\\r\\n\\t/// @notice Markets are assets can be supplied and borrowed\\r\\n\\tstruct Market {\\r\\n\\t\\tuint256 totalSupply;\\r\\n\\r\\n\\t\\tuint256 supplyIndex;      \\t\\t\\t\\t// Scaled by: secondsPerYear * rateDecimals\\r\\n\\t\\tuint256 supplyIndexUpdateTime;\\r\\n\\r\\n\\t\\tuint256 totalBorrow;\\r\\n\\r\\n\\t\\tuint256 borrowIndex;      \\t\\t\\t\\t// Scaled by: secondsPerYear * rateDecimals\\r\\n\\t\\tuint256 borrowIndexUpdateTime;\\r\\n\\r\\n\\t\\tuint256 promotionReserveScaled;      \\t// Scaled by: secondsPerYear * rateDecimals\\r\\n\\t\\tuint256 promotionReserveLastUpdateTime;\\r\\n\\r\\n\\t\\tuint256 promotionDebtScaled;      \\t\\t// Scaled by: secondsPerYear * rateDecimals\\r\\n\\t\\tuint256 promotionDebtLastUpdateTime;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Collaterals are assets can be used only as collateral for borrowing with no interest\\r\\n\\tstruct Collateral {\\r\\n\\t\\tuint256 totalCollateral;\\r\\n\\t\\tuint256 totalLiquidatedCollateral;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Users profile for each market\\r\\n\\tstruct MarketAccount {\\r\\n\\t\\tmapping (address =\\u003e uint) allowance;\\r\\n\\t\\tuint256 balance;\\r\\n\\t\\tuint256 accumulatedInterest;\\r\\n\\r\\n\\t\\tuint256 lastInterestIndex;      \\t\\t// Scaled by: secondsPerYear * rateDecimals\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Users profile for each collateral\\r\\n\\tstruct CollateralAccount {\\r\\n\\t\\tmapping (address =\\u003e uint) allowance;\\r\\n\\t\\tuint256 balance;\\r\\n\\t\\tuint256 lastUpdateTime;\\r\\n\\t}\\r\\n\\r\\n\\tstruct MarketData {\\r\\n\\t\\tuint256 balance;\\r\\n\\t\\tuint256 interest;\\r\\n\\t\\tuint256 currentIndex; \\r\\n\\t}\\r\\n\\r\\n\\taddress constant public ethAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n\\r\\n\\t/// @notice All rates in this contract are scaled by rateDecimals\\r\\n\\tuint256 constant public rateDecimals = 10 ** 4;\\r\\n\\r\\n\\tuint256 constant public secondsPerYear = 31536000;\\r\\n\\r\\n\\t/// @dev For round up borrow interests\\r\\n\\tuint256 constant private oneUnit = 1;\\r\\n\\r\\n\\t/// @dev Used for calculating liquidation threshold \\r\\n\\t/// @dev There is 5% gap between value to loan rate and liquidation rate\\r\\n\\tuint256 constant private fivePercentLiquidationGap = 500;\\r\\n\\r\\n\\t/// @notice Contract for getting protocol settings\\r\\n\\tHoldefiSettingsInterface public holdefiSettings;\\r\\n\\r\\n\\t/// @notice Contract for getting asset prices\\r\\n\\tHoldefiPricesInterface public holdefiPrices;\\r\\n\\r\\n\\t/// @notice Contract for holding collaterals\\r\\n\\tHoldefiCollaterals public holdefiCollaterals;\\r\\n\\r\\n\\t/// @dev Markets: marketAddress =\\u003e marketDetails\\r\\n\\tmapping (address =\\u003e Market) public marketAssets;\\r\\n\\r\\n\\t/// @dev Collaterals: collateralAddress =\\u003e collateralDetails\\r\\n\\tmapping (address =\\u003e Collateral) public collateralAssets;\\r\\n\\r\\n\\t/// @dev Markets Debt after liquidation: collateralAddress =\\u003e marketAddress =\\u003e marketDebtBalance\\r\\n\\tmapping (address =\\u003e mapping (address =\\u003e uint)) public marketDebt;\\r\\n\\r\\n\\t/// @dev Users Supplies: userAddress =\\u003e marketAddress =\\u003e supplyDetails\\r\\n\\tmapping (address =\\u003e mapping (address =\\u003e MarketAccount)) private supplies;\\r\\n\\r\\n\\t/// @dev Users Borrows: userAddress =\\u003e collateralAddress =\\u003e marketAddress =\\u003e borrowDetails\\r\\n\\tmapping (address =\\u003e mapping (address =\\u003e mapping (address =\\u003e MarketAccount))) private borrows;\\r\\n\\r\\n\\t/// @dev Users Collaterals: userAddress =\\u003e collateralAddress =\\u003e collateralDetails\\r\\n\\tmapping (address =\\u003e mapping (address =\\u003e CollateralAccount)) private collaterals;\\r\\n\\t\\r\\n\\t// ----------- Events -----------\\r\\n\\r\\n\\t/// @notice Event emitted when a market asset is supplied\\r\\n\\tevent Supply(\\r\\n\\t\\taddress sender,\\r\\n\\t\\taddress indexed supplier,\\r\\n\\t\\taddress indexed market,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\tuint256 balance,\\r\\n\\t\\tuint256 interest,\\r\\n\\t\\tuint256 index,\\r\\n\\t\\tuint16 referralCode\\r\\n\\t);\\r\\n\\r\\n\\t/// @notice Event emitted when a supply is withdrawn\\r\\n\\tevent WithdrawSupply(\\r\\n\\t\\taddress sender,\\r\\n\\t\\taddress indexed supplier,\\r\\n\\t\\taddress indexed market,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\tuint256 balance,\\r\\n\\t\\tuint256 interest,\\r\\n\\t\\tuint256 index\\r\\n\\t);\\r\\n\\r\\n\\t/// @notice Event emitted when a collateral asset is deposited\\r\\n\\tevent Collateralize(\\r\\n\\t\\taddress sender,\\r\\n\\t\\taddress indexed collateralizer,\\r\\n\\t\\taddress indexed collateral,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\tuint256 balance\\r\\n\\t);\\r\\n\\r\\n\\t/// @notice Event emitted when a collateral is withdrawn\\r\\n\\tevent WithdrawCollateral(\\r\\n\\t\\taddress sender,\\r\\n\\t\\taddress indexed collateralizer,\\r\\n\\t\\taddress indexed collateral,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\tuint256 balance\\r\\n\\t);\\r\\n\\r\\n\\t/// @notice Event emitted when a market asset is borrowed\\r\\n\\tevent Borrow(\\r\\n\\t\\taddress sender,\\r\\n\\t\\taddress indexed borrower,\\r\\n\\t\\taddress indexed market,\\r\\n\\t\\taddress indexed collateral,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\tuint256 balance,\\r\\n\\t\\tuint256 interest,\\r\\n\\t\\tuint256 index,\\r\\n\\t\\tuint16 referralCode\\r\\n\\t);\\r\\n\\r\\n\\t/// @notice Event emitted when a borrow is repaid\\r\\n\\tevent RepayBorrow(\\r\\n\\t\\taddress sender,\\r\\n\\t\\taddress indexed borrower,\\r\\n\\t\\taddress indexed market,\\r\\n\\t\\taddress indexed collateral,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\tuint256 balance,\\r\\n\\t\\tuint256 interest,\\r\\n\\t\\tuint256 index\\r\\n\\t);\\r\\n\\r\\n\\t/// @notice Event emitted when the supply index is updated for a market asset\\r\\n\\tevent UpdateSupplyIndex(address indexed market, uint256 newSupplyIndex, uint256 supplyRate);\\r\\n\\r\\n\\t/// @notice Event emitted when the borrow index is updated for a market asset\\r\\n\\tevent UpdateBorrowIndex(address indexed market, uint256 newBorrowIndex);\\r\\n\\r\\n\\t/// @notice Event emitted when a collateral is liquidated\\r\\n\\tevent CollateralLiquidated(\\r\\n\\t\\taddress indexed borrower,\\r\\n\\t\\taddress indexed market,\\r\\n\\t\\taddress indexed collateral,\\r\\n\\t\\tuint256 marketDebt,\\r\\n\\t\\tuint256 liquidatedCollateral\\r\\n\\t);\\r\\n\\r\\n\\t/// @notice Event emitted when a liquidated collateral is purchased in exchange for the specified market\\r\\n\\tevent BuyLiquidatedCollateral(\\r\\n\\t\\taddress indexed market,\\r\\n\\t\\taddress indexed collateral,\\r\\n\\t\\tuint256 marketAmount,\\r\\n\\t\\tuint256 collateralAmount\\r\\n\\t);\\r\\n\\r\\n\\t/// @notice Event emitted when HoldefiPrices contract is changed\\r\\n\\tevent HoldefiPricesContractChanged(address newAddress, address oldAddress);\\r\\n\\r\\n\\t/// @notice Event emitted when a liquidation reserve is withdrawn by the owner\\r\\n\\tevent LiquidationReserveWithdrawn(address indexed collateral, uint256 amount);\\r\\n\\r\\n\\t/// @notice Event emitted when a liquidation reserve is deposited\\r\\n\\tevent LiquidationReserveDeposited(address indexed collateral, uint256 amount);\\r\\n\\r\\n\\t/// @notice Event emitted when a promotion reserve is withdrawn by the owner\\r\\n\\tevent PromotionReserveWithdrawn(address indexed market, uint256 amount);\\r\\n\\r\\n\\t/// @notice Event emitted when a promotion reserve is deposited\\r\\n\\tevent PromotionReserveDeposited(address indexed market, uint256 amount);\\r\\n\\r\\n\\t/// @notice Event emitted when a promotion reserve is updated\\r\\n\\tevent PromotionReserveUpdated(address indexed market, uint256 promotionReserve);\\r\\n\\r\\n\\t/// @notice Event emitted when a promotion debt is updated\\r\\n\\tevent PromotionDebtUpdated(address indexed market, uint256 promotionDebt);\\r\\n\\r\\n\\t/// @notice Initializes the Holdefi contract\\r\\n    /// @param holdefiSettingsAddress Holdefi settings contract address\\r\\n    /// @param holdefiPricesAddress Holdefi prices contract address\\r\\n\\tconstructor(\\r\\n\\t\\tHoldefiSettingsInterface holdefiSettingsAddress,\\r\\n\\t\\tHoldefiPricesInterface holdefiPricesAddress\\r\\n\\t)\\r\\n\\t\\tpublic\\r\\n\\t{\\r\\n\\t\\tholdefiSettings = holdefiSettingsAddress;\\r\\n\\t\\tholdefiPrices = holdefiPricesAddress;\\r\\n\\t\\tholdefiCollaterals = new HoldefiCollaterals();\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t/// @dev Modifier to check if the asset is ETH or not\\r\\n\\t/// @param asset Address of the given asset\\r\\n    modifier isNotETHAddress(address asset) {\\r\\n        require (asset != ethAddress, \\\"Asset should not be ETH address\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\t/// @dev Modifier to check if the market is active or not\\r\\n\\t/// @param market Address of the given market\\r\\n    modifier marketIsActive(address market) {\\r\\n\\t\\trequire (holdefiSettings.marketAssets(market).isActive, \\\"Market is not active\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\t/// @dev Modifier to check if the collateral is active or not\\r\\n\\t/// @param collateral Address of the given collateral\\r\\n    modifier collateralIsActive(address collateral) {\\r\\n\\t\\trequire (holdefiSettings.collateralAssets(collateral).isActive, \\\"Collateral is not active\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\t/// @dev Modifier to check if the account address is equal to the msg.sender or not\\r\\n    /// @param account The given account address\\r\\n    modifier accountIsValid(address account) {\\r\\n\\t\\trequire (msg.sender != account, \\\"Account is not valid\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        revert();\\r\\n    }\\r\\n\\r\\n\\t/// @notice Returns balance and interest of an account for a given market\\r\\n    /// @dev supplyInterest = accumulatedInterest + (balance * (marketSupplyIndex - userLastSupplyInterestIndex))\\r\\n    /// @param account Supplier address to get supply information\\r\\n    /// @param market Address of the given market\\r\\n    /// @return balance Supplied amount on the specified market\\r\\n    /// @return interest Profit earned\\r\\n    /// @return currentSupplyIndex Supply index for the given market at current time\\r\\n\\tfunction getAccountSupply(address account, address market)\\r\\n\\t\\tpublic\\r\\n\\t\\tview\\r\\n\\t\\treturns (uint256 balance, uint256 interest, uint256 currentSupplyIndex)\\r\\n\\t{\\r\\n\\t\\tbalance = supplies[account][market].balance;\\r\\n\\r\\n\\t\\t(currentSupplyIndex,,) = getCurrentSupplyIndex(market);\\r\\n\\r\\n\\t\\tuint256 deltaInterestIndex = currentSupplyIndex.sub(supplies[account][market].lastInterestIndex);\\r\\n\\t\\tuint256 deltaInterestScaled = deltaInterestIndex.mul(balance);\\r\\n\\t\\tuint256 deltaInterest = deltaInterestScaled.div(secondsPerYear).div(rateDecimals);\\r\\n\\t\\t\\r\\n\\t\\tinterest = supplies[account][market].accumulatedInterest.add(deltaInterest);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Returns balance and interest of an account for a given market on a given collateral\\r\\n    /// @dev borrowInterest = accumulatedInterest + (balance * (marketBorrowIndex - userLastBorrowInterestIndex))\\r\\n    /// @param account Borrower address to get Borrow information\\r\\n    /// @param market Address of the given market\\r\\n    /// @param collateral Address of the given collateral\\r\\n    /// @return balance Borrowed amount on the specified market\\r\\n    /// @return interest The amount of interest the borrower should pay\\r\\n    /// @return currentBorrowIndex Borrow index for the given market at current time\\r\\n\\tfunction getAccountBorrow(address account, address market, address collateral)\\r\\n\\t\\tpublic\\r\\n\\t\\tview\\r\\n\\t\\treturns (uint256 balance, uint256 interest, uint256 currentBorrowIndex)\\r\\n\\t{\\r\\n\\t\\tbalance = borrows[account][collateral][market].balance;\\r\\n\\r\\n\\t\\t(currentBorrowIndex,,) = getCurrentBorrowIndex(market);\\r\\n\\r\\n\\t\\tuint256 deltaInterestIndex =\\r\\n\\t\\t\\tcurrentBorrowIndex.sub(borrows[account][collateral][market].lastInterestIndex);\\r\\n\\r\\n\\t\\tuint256 deltaInterestScaled = deltaInterestIndex.mul(balance);\\r\\n\\t\\tuint256 deltaInterest = deltaInterestScaled.div(secondsPerYear).div(rateDecimals);\\r\\n\\t\\tif (balance \\u003e 0) {\\r\\n\\t\\t\\tdeltaInterest = deltaInterest.add(oneUnit);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tinterest = borrows[account][collateral][market].accumulatedInterest.add(deltaInterest);\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t/// @notice Returns collateral balance, time since last activity, borrow power, total borrow value, and liquidation status for a given collateral\\r\\n    /// @dev borrowPower = (collateralValue / collateralValueToLoanRate) - totalBorrowValue\\r\\n    /// @dev liquidationThreshold = collateralValueToLoanRate - 5%\\r\\n    /// @dev User will be in liquidation state if (collateralValue / totalBorrowValue) \\u003c liquidationThreshold\\r\\n    /// @param account Account address to get collateral information\\r\\n    /// @param collateral Address of the given collateral\\r\\n    /// @return balance Amount of the specified collateral\\r\\n    /// @return timeSinceLastActivity Time since last activity performed by the account\\r\\n    /// @return borrowPowerValue The borrowing power for the account of the given collateral\\r\\n    /// @return totalBorrowValue Accumulative borrowed values on the given collateral\\r\\n    /// @return underCollateral A boolean value indicates whether the user is in the liquidation state or not\\r\\n\\tfunction getAccountCollateral(address account, address collateral)\\r\\n\\t\\tpublic\\r\\n\\t\\tview\\r\\n\\t\\treturns (\\r\\n\\t\\t\\tuint256 balance,\\r\\n\\t\\t\\tuint256 timeSinceLastActivity,\\r\\n\\t\\t\\tuint256 borrowPowerValue,\\r\\n\\t\\t\\tuint256 totalBorrowValue,\\r\\n\\t\\t\\tbool underCollateral\\r\\n\\t\\t)\\r\\n\\t{\\r\\n\\t\\tuint256 valueToLoanRate = holdefiSettings.collateralAssets(collateral).valueToLoanRate;\\r\\n\\t\\tif (valueToLoanRate == 0) {\\r\\n\\t\\t\\treturn (0, 0, 0, 0, false);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tbalance = collaterals[account][collateral].balance;\\r\\n\\r\\n\\t\\tuint256 collateralValue = holdefiPrices.getAssetValueFromAmount(collateral, balance);\\r\\n\\t\\tuint256 liquidationThresholdRate = valueToLoanRate.sub(fivePercentLiquidationGap);\\r\\n\\r\\n\\t\\tuint256 totalBorrowPowerValue = collateralValue.mul(rateDecimals).div(valueToLoanRate);\\r\\n\\t\\tuint256 liquidationThresholdValue = collateralValue.mul(rateDecimals).div(liquidationThresholdRate);\\r\\n\\r\\n\\t\\ttotalBorrowValue = getAccountTotalBorrowValue(account, collateral);\\r\\n\\t\\tif (totalBorrowValue \\u003e 0) {\\r\\n\\t\\t\\ttimeSinceLastActivity = block.timestamp.sub(collaterals[account][collateral].lastUpdateTime);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tborrowPowerValue = 0;\\r\\n\\t\\tif (totalBorrowValue \\u003c totalBorrowPowerValue) {\\r\\n\\t\\t\\tborrowPowerValue = totalBorrowPowerValue.sub(totalBorrowValue);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tunderCollateral = false;\\t\\r\\n\\t\\tif (totalBorrowValue \\u003e liquidationThresholdValue) {\\r\\n\\t\\t\\tunderCollateral = true;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Returns maximum amount spender can withdraw from account supplies on a given market\\r\\n\\t/// @param account Supplier address\\r\\n\\t/// @param spender Spender address\\r\\n\\t/// @param market Address of the given market\\r\\n\\t/// @return res Maximum amount spender can withdraw from account supplies on a given market\\r\\n\\tfunction getAccountWithdrawSupplyAllowance (address account, address spender, address market)\\r\\n\\t\\texternal \\r\\n\\t\\tview\\r\\n\\t\\treturns (uint256 res)\\r\\n\\t{\\r\\n\\t\\tres = supplies[account][market].allowance[spender];\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Returns maximum amount spender can withdraw from account balance on a given collateral\\r\\n\\t/// @param account Account address\\r\\n\\t/// @param spender Spender address\\r\\n\\t/// @param collateral Address of the given collateral\\r\\n\\t/// @return res Maximum amount spender can withdraw from account balance on a given collateral\\r\\n\\tfunction getAccountWithdrawCollateralAllowance (\\r\\n\\t\\taddress account, \\r\\n\\t\\taddress spender, \\r\\n\\t\\taddress collateral\\r\\n\\t)\\r\\n\\t\\texternal \\r\\n\\t\\tview\\r\\n\\t\\treturns (uint256 res)\\r\\n\\t{\\r\\n\\t\\tres = collaterals[account][collateral].allowance[spender];\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Returns maximum amount spender can withdraw from account borrows on a given market based on a given collteral\\r\\n\\t/// @param account Borrower address\\r\\n\\t/// @param spender Spender address\\r\\n\\t/// @param market Address of the given market\\r\\n\\t/// @param collateral Address of the given collateral\\r\\n\\t/// @return res Maximum amount spender can withdraw from account borrows on a given market based on a given collteral\\r\\n\\tfunction getAccountBorrowAllowance (\\r\\n\\t\\taddress account, \\r\\n\\t\\taddress spender, \\r\\n\\t\\taddress market, \\r\\n\\t\\taddress collateral\\r\\n\\t)\\r\\n\\t\\texternal \\r\\n\\t\\tview\\r\\n\\t\\treturns (uint256 res)\\r\\n\\t{\\r\\n\\t\\tres = borrows[account][collateral][market].allowance[spender];\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Returns total borrow value of an account based on a given collateral \\r\\n\\t/// @param account Account address\\r\\n    /// @param collateral Address of the given collateral\\r\\n    /// @return totalBorrowValue Accumulative borrowed values on the given collateral\\r\\n\\tfunction getAccountTotalBorrowValue (address account, address collateral)\\r\\n\\t\\tpublic\\r\\n\\t\\tview\\r\\n\\t\\treturns (uint256 totalBorrowValue)\\r\\n\\t{\\r\\n\\t\\tMarketData memory borrowData;\\r\\n\\t\\taddress market;\\r\\n\\t\\tuint256 totalDebt;\\r\\n\\t\\tuint256 assetValue;\\r\\n\\t\\t\\r\\n\\t\\ttotalBorrowValue = 0;\\r\\n\\t\\taddress[] memory marketsList = holdefiSettings.getMarketsList();\\r\\n\\t\\tfor (uint256 i = 0 ; i \\u003c marketsList.length ; i++) {\\r\\n\\t\\t\\tmarket = marketsList[i];\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t(borrowData.balance, borrowData.interest,) = getAccountBorrow(account, market, collateral);\\r\\n\\t\\t\\ttotalDebt = borrowData.balance.add(borrowData.interest);\\r\\n\\r\\n\\t\\t\\tassetValue = holdefiPrices.getAssetValueFromAmount(market, totalDebt);\\r\\n\\t\\t\\ttotalBorrowValue = totalBorrowValue.add(assetValue);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice The collateral reserve amount for buying liquidated collateral\\r\\n    /// @param collateral Address of the given collateral\\r\\n    /// @return reserve Liquidation reserves for the given collateral\\r\\n\\tfunction getLiquidationReserve (address collateral) public view returns(uint256 reserve) {\\r\\n\\t\\taddress market;\\r\\n\\t\\tuint256 assetValue;\\r\\n\\t\\tuint256 totalDebtValue = 0;\\r\\n\\r\\n\\t\\taddress[] memory marketsList = holdefiSettings.getMarketsList();\\r\\n\\t\\tfor (uint256 i = 0 ; i \\u003c marketsList.length ; i++) {\\r\\n\\t\\t\\tmarket = marketsList[i];\\r\\n\\t\\t\\tassetValue = holdefiPrices.getAssetValueFromAmount(market, marketDebt[collateral][market]);\\r\\n\\t\\t\\ttotalDebtValue = totalDebtValue.add(assetValue); \\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 bonusRate = holdefiSettings.collateralAssets(collateral).bonusRate;\\r\\n\\t\\tuint256 totalDebtCollateralValue = totalDebtValue.mul(bonusRate).div(rateDecimals);\\r\\n\\t\\tuint256 liquidatedCollateralNeeded = holdefiPrices.getAssetAmountFromValue(\\r\\n\\t\\t\\tcollateral,\\r\\n\\t\\t\\ttotalDebtCollateralValue\\r\\n\\t\\t);\\r\\n\\t\\t\\r\\n\\t\\treserve = 0;\\r\\n\\t\\tuint256 totalLiquidatedCollateral = collateralAssets[collateral].totalLiquidatedCollateral;\\r\\n\\t\\tif (totalLiquidatedCollateral \\u003e liquidatedCollateralNeeded) {\\r\\n\\t\\t\\treserve = totalLiquidatedCollateral.sub(liquidatedCollateralNeeded);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Returns the amount of discounted collateral can be bought in exchange for the amount of a given market\\r\\n    /// @param market Address of the given market\\r\\n    /// @param collateral Address of the given collateral\\r\\n    /// @param marketAmount The amount of market should be paid\\r\\n    /// @return collateralAmountWithDiscount Amount of discounted collateral can be bought\\r\\n\\tfunction getDiscountedCollateralAmount (address market, address collateral, uint256 marketAmount)\\r\\n\\t\\tpublic\\r\\n\\t\\tview\\r\\n\\t\\treturns (uint256 collateralAmountWithDiscount)\\r\\n\\t{\\r\\n\\t\\tuint256 marketValue = holdefiPrices.getAssetValueFromAmount(market, marketAmount);\\r\\n\\t\\tuint256 bonusRate = holdefiSettings.collateralAssets(collateral).bonusRate;\\r\\n\\t\\tuint256 collateralValue = marketValue.mul(bonusRate).div(rateDecimals);\\r\\n\\r\\n\\t\\tcollateralAmountWithDiscount = holdefiPrices.getAssetAmountFromValue(collateral, collateralValue);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Returns supply index and supply rate for a given market at current time\\r\\n\\t/// @dev newSupplyIndex = oldSupplyIndex + (deltaTime * supplyRate)\\r\\n    /// @param market Address of the given market\\r\\n    /// @return supplyIndex Supply index of the given market\\r\\n    /// @return supplyRate Supply rate of the given market\\r\\n    /// @return currentTime Current block timestamp\\r\\n\\tfunction getCurrentSupplyIndex (address market)\\r\\n\\t\\tpublic\\r\\n\\t\\tview\\r\\n\\t\\treturns (\\r\\n\\t\\t\\tuint256 supplyIndex,\\r\\n\\t\\t\\tuint256 supplyRate,\\r\\n\\t\\t\\tuint256 currentTime\\r\\n\\t\\t)\\r\\n\\t{\\r\\n\\t\\t(, uint256 supplyRateBase, uint256 promotionRate) = holdefiSettings.getInterests(market);\\r\\n\\t\\t\\r\\n\\t\\tcurrentTime = block.timestamp;\\r\\n\\t\\tuint256 deltaTimeSupply = currentTime.sub(marketAssets[market].supplyIndexUpdateTime);\\r\\n\\r\\n\\t\\tsupplyRate = supplyRateBase.add(promotionRate);\\r\\n\\t\\tuint256 deltaTimeInterest = deltaTimeSupply.mul(supplyRate);\\r\\n\\t\\tsupplyIndex = marketAssets[market].supplyIndex.add(deltaTimeInterest);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Returns borrow index and borrow rate for the given market at current time\\r\\n\\t/// @dev newBorrowIndex = oldBorrowIndex + (deltaTime * borrowRate)\\r\\n    /// @param market Address of the given market\\r\\n    /// @return borrowIndex Borrow index of the given market\\r\\n    /// @return borrowRate Borrow rate of the given market\\r\\n    /// @return currentTime Current block timestamp\\r\\n\\tfunction getCurrentBorrowIndex (address market)\\r\\n\\t\\tpublic\\r\\n\\t\\tview\\r\\n\\t\\treturns (\\r\\n\\t\\t\\tuint256 borrowIndex,\\r\\n\\t\\t\\tuint256 borrowRate,\\r\\n\\t\\t\\tuint256 currentTime\\r\\n\\t\\t)\\r\\n\\t{\\r\\n\\t\\tborrowRate = holdefiSettings.marketAssets(market).borrowRate;\\r\\n\\t\\t\\r\\n\\t\\tcurrentTime = block.timestamp;\\r\\n\\t\\tuint256 deltaTimeBorrow = currentTime.sub(marketAssets[market].borrowIndexUpdateTime);\\r\\n\\r\\n\\t\\tuint256 deltaTimeInterest = deltaTimeBorrow.mul(borrowRate);\\r\\n\\t\\tborrowIndex = marketAssets[market].borrowIndex.add(deltaTimeInterest);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Returns promotion reserve for a given market at current time\\r\\n\\t/// @dev promotionReserveScaled is scaled by (secondsPerYear * rateDecimals)\\r\\n\\t/// @param market Address of the given market\\r\\n    /// @return promotionReserveScaled Promotion reserve of the given market\\r\\n    /// @return currentTime Current block timestamp\\r\\n\\tfunction getPromotionReserve (address market)\\r\\n\\t\\tpublic\\r\\n\\t\\tview\\r\\n\\t\\treturns (uint256 promotionReserveScaled, uint256 currentTime)\\r\\n\\t{\\r\\n\\t\\t(uint256 borrowRate, uint256 supplyRateBase,) = holdefiSettings.getInterests(market);\\r\\n\\t\\tcurrentTime = block.timestamp;\\r\\n\\t\\r\\n\\t\\tuint256 allSupplyInterest = marketAssets[market].totalSupply.mul(supplyRateBase);\\r\\n\\t\\tuint256 allBorrowInterest = marketAssets[market].totalBorrow.mul(borrowRate);\\r\\n\\r\\n\\t\\tuint256 deltaTime = currentTime.sub(marketAssets[market].promotionReserveLastUpdateTime);\\r\\n\\t\\tuint256 currentInterest = allBorrowInterest.sub(allSupplyInterest);\\r\\n\\t\\tuint256 deltaTimeInterest = currentInterest.mul(deltaTime);\\r\\n\\t\\tpromotionReserveScaled = marketAssets[market].promotionReserveScaled.add(deltaTimeInterest);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Returns promotion debt for a given market at current time\\r\\n\\t/// @dev promotionDebtScaled is scaled by secondsPerYear * rateDecimals\\r\\n\\t/// @param market Address of the given market\\r\\n    /// @return promotionDebtScaled Promotion debt of the given market\\r\\n    /// @return currentTime Current block timestamp\\r\\n\\tfunction getPromotionDebt (address market)\\r\\n\\t\\tpublic\\r\\n\\t\\tview\\r\\n\\t\\treturns (uint256 promotionDebtScaled, uint256 currentTime)\\r\\n\\t{\\r\\n\\t\\tuint256 promotionRate = holdefiSettings.marketAssets(market).promotionRate;\\r\\n\\r\\n\\t\\tcurrentTime = block.timestamp;\\r\\n\\t\\tpromotionDebtScaled = marketAssets[market].promotionDebtScaled;\\r\\n\\r\\n\\t\\tif (promotionRate != 0) {\\r\\n\\t\\t\\tuint256 deltaTime = block.timestamp.sub(marketAssets[market].promotionDebtLastUpdateTime);\\r\\n\\t\\t\\tuint256 currentInterest = marketAssets[market].totalSupply.mul(promotionRate);\\r\\n\\t\\t\\tuint256 deltaTimeInterest = currentInterest.mul(deltaTime);\\r\\n\\t\\t\\tpromotionDebtScaled = promotionDebtScaled.add(deltaTimeInterest);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Update a market supply index, promotion reserve, and promotion debt\\r\\n\\t/// @param market Address of the given market\\r\\n\\tfunction beforeChangeSupplyRate (address market) public {\\r\\n\\t\\tupdateSupplyIndex(market);\\r\\n\\t\\tupdatePromotionReserve(market);\\r\\n\\t\\tupdatePromotionDebt(market);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Update a market borrow index, supply index, promotion reserve, and promotion debt \\r\\n\\t/// @param market Address of the given market\\r\\n\\tfunction beforeChangeBorrowRate (address market) external {\\r\\n\\t\\tupdateBorrowIndex(market);\\r\\n\\t\\tbeforeChangeSupplyRate(market);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Deposit ERC20 asset for supplying\\r\\n\\t/// @param market Address of the given market\\r\\n\\t/// @param amount The amount of asset supplier supplies\\r\\n\\t/// @param referralCode A unique code used as an identifier of referrer\\r\\n\\tfunction supply(address market, uint256 amount, uint16 referralCode)\\r\\n\\t\\texternal\\r\\n\\t\\tisNotETHAddress(market)\\r\\n\\t{\\r\\n\\t\\tsupplyInternal(msg.sender, market, amount, referralCode);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Deposit ETH for supplying\\r\\n\\t/// @notice msg.value The amount of asset supplier supplies\\r\\n\\t/// @param referralCode A unique code used as an identifier of referrer\\r\\n\\tfunction supply(uint16 referralCode) external payable {\\t\\t\\r\\n\\t\\tsupplyInternal(msg.sender, ethAddress, msg.value, referralCode);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Sender deposits ERC20 asset belonging to the supplier\\r\\n\\t/// @param account Address of the supplier\\r\\n\\t/// @param market Address of the given market\\r\\n\\t/// @param amount The amount of asset supplier supplies\\r\\n\\t/// @param referralCode A unique code used as an identifier of referrer\\r\\n\\tfunction supplyBehalf(address account, address market, uint256 amount, uint16 referralCode)\\r\\n\\t\\texternal\\r\\n\\t\\tisNotETHAddress(market)\\r\\n\\t{\\r\\n\\t\\tsupplyInternal(account, market, amount, referralCode);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Sender deposits ETH belonging to the supplier\\r\\n\\t/// @notice msg.value The amount of ETH sender deposits belonging to the supplier\\r\\n\\t/// @param account Address of the supplier\\r\\n\\t/// @param referralCode A unique code used as an identifier of referrer\\r\\n\\tfunction supplyBehalf(address account, uint16 referralCode) \\r\\n\\t\\texternal\\r\\n\\t\\tpayable\\r\\n\\t{\\r\\n\\t\\tsupplyInternal(account, ethAddress, msg.value, referralCode);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Sender approves of the withdarawl for the account in the market asset\\r\\n\\t/// @param account Address of the account allowed to withdrawn\\r\\n\\t/// @param market Address of the given market\\r\\n\\t/// @param amount The amount is allowed to withdrawn\\r\\n\\tfunction approveWithdrawSupply(address account, address market, uint256 amount)\\r\\n\\t\\texternal\\r\\n\\t\\taccountIsValid(account)\\r\\n\\t\\tmarketIsActive(market)\\r\\n\\t{\\r\\n\\t\\tsupplies[msg.sender][market].allowance[account] = amount;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Withdraw supply of a given market\\r\\n\\t/// @param market Address of the given market\\r\\n\\t/// @param amount The amount will be withdrawn from the market\\r\\n\\tfunction withdrawSupply(address market, uint256 amount)\\r\\n\\t\\texternal\\r\\n\\t{\\r\\n\\t\\twithdrawSupplyInternal(msg.sender, market, amount);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Sender withdraws supply belonging to the supplier\\r\\n\\t/// @param account Address of the supplier\\r\\n\\t/// @param market Address of the given market\\r\\n\\t/// @param amount The amount will be withdrawn from the market\\r\\n\\tfunction withdrawSupplyBehalf(address account, address market, uint256 amount) external {\\r\\n\\t\\tuint256 allowance = supplies[account][market].allowance[msg.sender];\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tamount \\u003c= allowance, \\r\\n\\t\\t\\t\\\"Withdraw not allowed\\\"\\r\\n\\t\\t);\\r\\n\\t\\tsupplies[account][market].allowance[msg.sender] = allowance.sub(amount);\\r\\n\\t\\twithdrawSupplyInternal(account, market, amount);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Deposit ERC20 asset as a collateral\\r\\n\\t/// @param collateral Address of the given collateral\\r\\n\\t/// @param amount The amount will be collateralized\\r\\n\\tfunction collateralize (address collateral, uint256 amount)\\r\\n\\t\\texternal\\r\\n\\t\\tisNotETHAddress(collateral)\\r\\n\\t{\\r\\n\\t\\tcollateralizeInternal(msg.sender, collateral, amount);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Deposit ETH as a collateral\\r\\n\\t/// @notice msg.value The amount of ETH will be collateralized\\r\\n\\tfunction collateralize () external payable {\\r\\n\\t\\tcollateralizeInternal(msg.sender, ethAddress, msg.value);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Sender deposits ERC20 asset as a collateral belonging to the user\\r\\n\\t/// @param account Address of the user\\r\\n\\t/// @param collateral Address of the given collateral\\r\\n\\t/// @param amount The amount will be collateralized\\r\\n\\tfunction collateralizeBehalf (address account, address collateral, uint256 amount)\\r\\n\\t\\texternal\\r\\n\\t\\tisNotETHAddress(collateral)\\r\\n\\t{\\r\\n\\t\\tcollateralizeInternal(account, collateral, amount);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Sender deposits ETH as a collateral belonging to the user\\r\\n\\t/// @notice msg.value The amount of ETH Sender deposits as a collateral belonging to the user\\r\\n\\t/// @param account Address of the user\\r\\n\\tfunction collateralizeBehalf (address account) external payable {\\r\\n\\t\\tcollateralizeInternal(account, ethAddress, msg.value);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Sender approves the account to withdraw the collateral\\r\\n\\t/// @param account Address is allowed to withdraw the collateral\\r\\n\\t/// @param collateral Address of the given collateral\\r\\n\\t/// @param amount The amount is allowed to withdrawn\\r\\n\\tfunction approveWithdrawCollateral (address account, address collateral, uint256 amount)\\r\\n\\t\\texternal\\r\\n\\t\\taccountIsValid(account)\\r\\n\\t\\tcollateralIsActive(collateral)\\r\\n\\t{\\r\\n\\t\\tcollaterals[msg.sender][collateral].allowance[account] = amount;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Withdraw a collateral\\r\\n\\t/// @param collateral Address of the given collateral\\r\\n\\t/// @param amount The amount will be withdrawn from the collateral\\r\\n\\tfunction withdrawCollateral (address collateral, uint256 amount)\\r\\n\\t\\texternal\\r\\n\\t{\\r\\n\\t\\twithdrawCollateralInternal(msg.sender, collateral, amount);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Sender withdraws a collateral belonging to the user\\r\\n\\t/// @param account Address of the user\\r\\n\\t/// @param collateral Address of the given collateral\\r\\n\\t/// @param amount The amount will be withdrawn from the collateral\\r\\n\\tfunction withdrawCollateralBehalf (address account, address collateral, uint256 amount)\\r\\n\\t\\texternal\\r\\n\\t{\\r\\n\\t\\tuint256 allowance = collaterals[account][collateral].allowance[msg.sender];\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tamount \\u003c= allowance,\\r\\n\\t\\t\\t\\\"Withdraw not allowed\\\"\\r\\n\\t\\t);\\r\\n\\t\\tcollaterals[account][collateral].allowance[msg.sender] = allowance.sub(amount);\\r\\n\\t\\twithdrawCollateralInternal(account, collateral, amount);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Sender approves the account to borrow a given market based on given collateral\\r\\n\\t/// @param account Address that is allowed to borrow the given market\\r\\n\\t/// @param market Address of the given market\\r\\n\\t/// @param collateral Address of the given collateral\\r\\n\\t/// @param amount The amount is allowed to withdrawn\\r\\n\\tfunction approveBorrow (address account, address market, address collateral, uint256 amount)\\r\\n\\t\\texternal\\r\\n\\t\\taccountIsValid(account)\\r\\n\\t\\tmarketIsActive(market)\\r\\n\\t{\\r\\n\\t\\tborrows[msg.sender][collateral][market].allowance[account] = amount;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Borrow an asset\\r\\n\\t/// @param market Address of the given market\\r\\n\\t/// @param collateral Address of the given collateral\\r\\n\\t/// @param amount The amount of the given market will be borrowed\\r\\n\\t/// @param referralCode A unique code used as an identifier of referrer\\r\\n\\tfunction borrow (address market, address collateral, uint256 amount, uint16 referralCode)\\r\\n\\t\\texternal\\r\\n\\t{\\r\\n\\t\\tborrowInternal(msg.sender, market, collateral, amount, referralCode);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Sender borrows an asset belonging to the borrower\\r\\n\\t/// @param account Address of the borrower\\r\\n\\t/// @param market Address of the given market\\r\\n\\t/// @param collateral Address of the given collateral\\r\\n\\t/// @param amount The amount will be borrowed\\r\\n\\t/// @param referralCode A unique code used as an identifier of referrer\\r\\n\\tfunction borrowBehalf (address account, address market, address collateral, uint256 amount, uint16 referralCode)\\r\\n\\t\\texternal\\r\\n\\t{\\r\\n\\t\\tuint256 allowance = borrows[account][collateral][market].allowance[msg.sender];\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tamount \\u003c= allowance,\\r\\n\\t\\t\\t\\\"Withdraw not allowed\\\"\\r\\n\\t\\t);\\r\\n\\t\\tborrows[account][collateral][market].allowance[msg.sender] = allowance.sub(amount);\\r\\n\\t\\tborrowInternal(account, market, collateral, amount, referralCode);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Repay an ERC20 asset based on a given collateral\\r\\n\\t/// @param market Address of the given market\\r\\n\\t/// @param collateral Address of the given collateral\\r\\n\\t/// @param amount The amount of the market will be Repaid\\r\\n\\tfunction repayBorrow (address market, address collateral, uint256 amount)\\r\\n\\t\\texternal\\r\\n\\t\\tisNotETHAddress(market)\\r\\n\\t{\\r\\n\\t\\trepayBorrowInternal(msg.sender, market, collateral, amount);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Repay an ETH based on a given collateral\\r\\n\\t/// @notice msg.value The amount of ETH will be repaid\\r\\n\\t/// @param collateral Address of the given collateral\\r\\n\\tfunction repayBorrow (address collateral) external payable {\\t\\t\\r\\n\\t\\trepayBorrowInternal(msg.sender, ethAddress, collateral, msg.value);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Sender repays an ERC20 asset based on a given collateral belonging to the borrower\\r\\n\\t/// @param account Address of the borrower\\r\\n\\t/// @param market Address of the given market\\r\\n\\t/// @param collateral Address of the given collateral\\r\\n\\t/// @param amount The amount of the market will be repaid\\r\\n\\tfunction repayBorrowBehalf (address account, address market, address collateral, uint256 amount)\\r\\n\\t\\texternal\\r\\n\\t\\tisNotETHAddress(market)\\r\\n\\t{\\r\\n\\t\\trepayBorrowInternal(account, market, collateral, amount);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Sender repays an ETH based on a given collateral belonging to the borrower\\r\\n\\t/// @notice msg.value The amount of ETH sender repays belonging to the borrower\\r\\n\\t/// @param account Address of the borrower\\r\\n\\t/// @param collateral Address of the given collateral\\r\\n\\tfunction repayBorrowBehalf (address account, address collateral)\\r\\n\\t\\texternal\\r\\n\\t\\tpayable\\r\\n\\t{\\t\\t\\r\\n\\t\\trepayBorrowInternal(account, ethAddress, collateral, msg.value);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Liquidate borrower\\u0027s collateral\\r\\n\\t/// @param borrower Address of the borrower who should be liquidated\\r\\n\\t/// @param market Address of the given market\\r\\n\\t/// @param collateral Address of the given collateral\\r\\n\\tfunction liquidateBorrowerCollateral (address borrower, address market, address collateral)\\r\\n\\t\\texternal\\r\\n\\t\\twhenNotPaused(\\\"liquidateBorrowerCollateral\\\")\\r\\n\\t{\\r\\n\\t\\tMarketData memory borrowData;\\r\\n\\t\\t(borrowData.balance, borrowData.interest,) = getAccountBorrow(borrower, market, collateral);\\r\\n\\t\\trequire(borrowData.balance \\u003e 0, \\\"User should have debt\\\");\\r\\n\\r\\n\\t\\t(uint256 collateralBalance, uint256 timeSinceLastActivity,,, bool underCollateral) = \\r\\n\\t\\t\\tgetAccountCollateral(borrower, collateral);\\r\\n\\t\\trequire (underCollateral || (timeSinceLastActivity \\u003e secondsPerYear),\\r\\n\\t\\t\\t\\\"User should be under collateral or time is over\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tuint256 totalBorrowedBalance = borrowData.balance.add(borrowData.interest);\\r\\n\\t\\tuint256 totalBorrowedBalanceValue = holdefiPrices.getAssetValueFromAmount(market, totalBorrowedBalance);\\r\\n\\t\\t\\r\\n\\t\\tuint256 liquidatedCollateralValue = totalBorrowedBalanceValue\\r\\n\\t\\t.mul(holdefiSettings.collateralAssets(collateral).penaltyRate)\\r\\n\\t\\t.div(rateDecimals);\\r\\n\\r\\n\\t\\tuint256 liquidatedCollateral =\\r\\n\\t\\t\\tholdefiPrices.getAssetAmountFromValue(collateral, liquidatedCollateralValue);\\r\\n\\r\\n\\t\\tif (liquidatedCollateral \\u003e collateralBalance) {\\r\\n\\t\\t\\tliquidatedCollateral = collateralBalance;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tcollaterals[borrower][collateral].balance = collateralBalance.sub(liquidatedCollateral);\\r\\n\\t\\tcollateralAssets[collateral].totalCollateral =\\r\\n\\t\\t\\tcollateralAssets[collateral].totalCollateral.sub(liquidatedCollateral);\\r\\n\\t\\tcollateralAssets[collateral].totalLiquidatedCollateral =\\r\\n\\t\\t\\tcollateralAssets[collateral].totalLiquidatedCollateral.add(liquidatedCollateral);\\r\\n\\r\\n\\t\\tdelete borrows[borrower][collateral][market];\\r\\n\\t\\tbeforeChangeSupplyRate(market);\\r\\n\\t\\tmarketAssets[market].totalBorrow = marketAssets[market].totalBorrow.sub(borrowData.balance);\\r\\n\\t\\tmarketDebt[collateral][market] = marketDebt[collateral][market].add(totalBorrowedBalance);\\r\\n\\r\\n\\t\\temit CollateralLiquidated(borrower, market, collateral, totalBorrowedBalance, liquidatedCollateral);\\t\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Buy collateral in exchange for ERC20 asset\\r\\n\\t/// @param market Address of the market asset should be paid to buy collateral\\r\\n\\t/// @param collateral Address of the liquidated collateral\\r\\n\\t/// @param marketAmount The amount of the given market will be paid\\r\\n\\tfunction buyLiquidatedCollateral (address market, address collateral, uint256 marketAmount)\\r\\n\\t\\texternal\\r\\n\\t\\tisNotETHAddress(market)\\r\\n\\t{\\r\\n\\t\\tbuyLiquidatedCollateralInternal(market, collateral, marketAmount);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Buy collateral in exchange for ETH\\r\\n\\t/// @notice msg.value The amount of the given market that will be paid\\r\\n\\t/// @param collateral Address of the liquidated collateral\\r\\n\\tfunction buyLiquidatedCollateral (address collateral) external payable {\\r\\n\\t\\tbuyLiquidatedCollateralInternal(ethAddress, collateral, msg.value);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Deposit ERC20 asset as liquidation reserve\\r\\n\\t/// @param collateral Address of the given collateral\\r\\n\\t/// @param amount The amount that will be deposited\\r\\n\\tfunction depositLiquidationReserve(address collateral, uint256 amount)\\r\\n\\t\\texternal\\r\\n\\t\\tisNotETHAddress(collateral)\\r\\n\\t{\\r\\n\\t\\tdepositLiquidationReserveInternal(collateral, amount);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Deposit ETH asset as liquidation reserve\\r\\n\\t/// @notice msg.value The amount of ETH that will be deposited\\r\\n\\tfunction depositLiquidationReserve() external payable {\\r\\n\\t\\tdepositLiquidationReserveInternal(ethAddress, msg.value);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Withdraw liquidation reserve only by the owner\\r\\n\\t/// @param collateral Address of the given collateral\\r\\n\\t/// @param amount The amount that will be withdrawn\\r\\n\\tfunction withdrawLiquidationReserve (address collateral, uint256 amount) external onlyOwner {\\r\\n\\t\\tuint256 maxWithdraw = getLiquidationReserve(collateral);\\r\\n\\t\\tuint256 transferAmount = amount;\\r\\n\\t\\t\\r\\n\\t\\tif (transferAmount \\u003e maxWithdraw){\\r\\n\\t\\t\\ttransferAmount = maxWithdraw;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tcollateralAssets[collateral].totalLiquidatedCollateral =\\r\\n\\t\\t\\tcollateralAssets[collateral].totalLiquidatedCollateral.sub(transferAmount);\\r\\n\\t\\tholdefiCollaterals.withdraw(collateral, msg.sender, transferAmount);\\r\\n\\r\\n\\t\\temit LiquidationReserveWithdrawn(collateral, amount);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Deposit ERC20 asset as promotion reserve\\r\\n\\t/// @param market Address of the given market\\r\\n\\t/// @param amount The amount that will be deposited\\r\\n\\tfunction depositPromotionReserve (address market, uint256 amount)\\r\\n\\t\\texternal\\r\\n\\t\\tisNotETHAddress(market)\\r\\n\\t{\\r\\n\\t\\tdepositPromotionReserveInternal(market, amount);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Deposit ETH as promotion reserve\\r\\n\\t/// @notice msg.value The amount of ETH that will be deposited\\r\\n\\tfunction depositPromotionReserve () external payable {\\r\\n\\t\\tdepositPromotionReserveInternal(ethAddress, msg.value);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Withdraw promotion reserve only by the owner\\r\\n\\t/// @param market Address of the given market\\r\\n\\t/// @param amount The amount that will be withdrawn\\r\\n\\tfunction withdrawPromotionReserve (address market, uint256 amount) external onlyOwner {\\r\\n\\t    (uint256 reserveScaled,) = getPromotionReserve(market);\\r\\n\\t    (uint256 debtScaled,) = getPromotionDebt(market);\\r\\n\\r\\n\\t    uint256 amountScaled = amount.mul(secondsPerYear).mul(rateDecimals);\\r\\n\\t    uint256 increasedDebtScaled = amountScaled.add(debtScaled);\\r\\n\\t    require (reserveScaled \\u003e increasedDebtScaled, \\\"Amount should be less than max\\\");\\r\\n\\r\\n\\t    marketAssets[market].promotionReserveScaled = reserveScaled.sub(amountScaled);\\r\\n\\r\\n\\t    transferFromHoldefi(msg.sender, market, amount);\\r\\n\\r\\n\\t    emit PromotionReserveWithdrawn(market, amount);\\r\\n\\t }\\r\\n\\r\\n\\r\\n\\t/// @notice Set Holdefi prices contract only by the owner\\r\\n\\t/// @param newHoldefiPrices Address of the new Holdefi prices contract\\r\\n\\tfunction setHoldefiPricesContract (HoldefiPricesInterface newHoldefiPrices) external onlyOwner {\\r\\n\\t\\temit HoldefiPricesContractChanged(address(newHoldefiPrices), address(holdefiPrices));\\r\\n\\t\\tholdefiPrices = newHoldefiPrices;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Promotion reserve and debt settlement\\r\\n\\t/// @param market Address of the given market\\r\\n\\tfunction reserveSettlement (address market) external {\\r\\n\\t\\trequire(msg.sender == address(holdefiSettings), \\\"Sender should be Holdefi Settings contract\\\");\\r\\n\\r\\n\\t\\tuint256 promotionReserve = marketAssets[market].promotionReserveScaled;\\r\\n\\t\\tuint256 promotionDebt = marketAssets[market].promotionDebtScaled;\\r\\n\\t\\trequire(promotionReserve \\u003e promotionDebt, \\\"Not enough promotion reserve\\\");\\r\\n\\t\\t\\r\\n\\t\\tpromotionReserve = promotionReserve.sub(promotionDebt);\\r\\n\\t\\tmarketAssets[market].promotionReserveScaled = promotionReserve;\\r\\n\\t\\tmarketAssets[market].promotionDebtScaled = 0;\\r\\n\\r\\n\\t\\tmarketAssets[market].promotionReserveLastUpdateTime = block.timestamp;\\r\\n\\t\\tmarketAssets[market].promotionDebtLastUpdateTime = block.timestamp;\\r\\n\\r\\n\\t\\temit PromotionReserveUpdated(market, promotionReserve);\\r\\n\\t\\temit PromotionDebtUpdated(market, 0);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Update supply index of a market\\r\\n\\t/// @param market Address of the given market\\r\\n\\tfunction updateSupplyIndex (address market) internal {\\r\\n\\t\\t(uint256 currentSupplyIndex, uint256 supplyRate, uint256 currentTime) =\\r\\n\\t\\t\\tgetCurrentSupplyIndex(market);\\r\\n\\r\\n\\t\\tmarketAssets[market].supplyIndex = currentSupplyIndex;\\r\\n\\t\\tmarketAssets[market].supplyIndexUpdateTime = currentTime;\\r\\n\\r\\n\\t\\temit UpdateSupplyIndex(market, currentSupplyIndex, supplyRate);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Update borrow index of a market\\r\\n\\t/// @param market Address of the given market\\r\\n\\tfunction updateBorrowIndex (address market) internal {\\r\\n\\t\\t(uint256 currentBorrowIndex,, uint256 currentTime) = getCurrentBorrowIndex(market);\\r\\n\\r\\n\\t\\tmarketAssets[market].borrowIndex = currentBorrowIndex;\\r\\n\\t\\tmarketAssets[market].borrowIndexUpdateTime = currentTime;\\r\\n\\r\\n\\t\\temit UpdateBorrowIndex(market, currentBorrowIndex);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Update promotion reserve of a market\\r\\n\\t/// @param market Address of the given market\\r\\n\\tfunction updatePromotionReserve(address market) internal {\\r\\n\\t\\t(uint256 reserveScaled,) = getPromotionReserve(market);\\r\\n\\r\\n\\t\\tmarketAssets[market].promotionReserveScaled = reserveScaled;\\r\\n\\t\\tmarketAssets[market].promotionReserveLastUpdateTime = block.timestamp;\\r\\n\\r\\n\\t\\temit PromotionReserveUpdated(market, reserveScaled);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Update promotion debt of a market\\r\\n\\t/// @dev Promotion rate will be set to 0 if (promotionDebt \\u003e= promotionReserve)\\r\\n\\t/// @param market Address of the given market\\r\\n\\tfunction updatePromotionDebt(address market) internal {\\r\\n    \\t(uint256 debtScaled,) = getPromotionDebt(market);\\r\\n    \\tif (marketAssets[market].promotionDebtScaled != debtScaled){\\r\\n      \\t\\tmarketAssets[market].promotionDebtScaled = debtScaled;\\r\\n      \\t\\tmarketAssets[market].promotionDebtLastUpdateTime = block.timestamp;\\r\\n\\r\\n      \\t\\temit PromotionDebtUpdated(market, debtScaled);\\r\\n    \\t}\\r\\n    \\tif (marketAssets[market].promotionReserveScaled \\u003c= debtScaled) {\\r\\n      \\t\\tholdefiSettings.resetPromotionRate(market);\\r\\n    \\t}\\r\\n  \\t}\\r\\n\\r\\n\\t/// @notice transfer ETH or ERC20 asset from this contract\\r\\n\\tfunction transferFromHoldefi(address receiver, address asset, uint256 amount) internal {\\r\\n\\t\\tbool success = false;\\r\\n\\t\\tif (asset == ethAddress){\\r\\n\\t\\t\\t(success, ) = receiver.call{value:amount}(\\\"\\\");\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tIERC20 token = IERC20(asset);\\r\\n\\t\\t\\tsuccess = token.transfer(receiver, amount);\\r\\n\\t\\t}\\r\\n\\t\\trequire (success, \\\"Cannot Transfer\\\");\\r\\n\\t}\\r\\n\\t/// @notice transfer ERC20 asset to this contract\\r\\n\\tfunction transferToHoldefi(address receiver, address asset, uint256 amount) internal {\\r\\n\\t\\tIERC20 token = IERC20(asset);\\r\\n\\t\\tbool success = token.transferFrom(msg.sender, receiver, amount);\\r\\n\\t\\trequire (success, \\\"Cannot Transfer\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Perform supply operation\\r\\n\\tfunction supplyInternal(address account, address market, uint256 amount, uint16 referralCode)\\r\\n\\t\\tinternal\\r\\n\\t\\twhenNotPaused(\\\"supply\\\")\\r\\n\\t\\tmarketIsActive(market)\\r\\n\\t{\\r\\n\\t\\tif (market != ethAddress) {\\r\\n\\t\\t\\ttransferToHoldefi(address(this), market, amount);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tMarketData memory supplyData;\\r\\n\\t\\t(supplyData.balance, supplyData.interest, supplyData.currentIndex) = getAccountSupply(account, market);\\r\\n\\t\\t\\r\\n\\t\\tsupplyData.balance = supplyData.balance.add(amount);\\r\\n\\t\\tsupplies[account][market].balance = supplyData.balance;\\r\\n\\t\\tsupplies[account][market].accumulatedInterest = supplyData.interest;\\r\\n\\t\\tsupplies[account][market].lastInterestIndex = supplyData.currentIndex;\\r\\n\\r\\n\\t\\tbeforeChangeSupplyRate(market);\\r\\n\\t\\t\\r\\n\\t\\tmarketAssets[market].totalSupply = marketAssets[market].totalSupply.add(amount);\\r\\n\\r\\n\\t\\temit Supply(\\r\\n\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\taccount,\\r\\n\\t\\t\\tmarket,\\r\\n\\t\\t\\tamount,\\r\\n\\t\\t\\tsupplyData.balance,\\r\\n\\t\\t\\tsupplyData.interest,\\r\\n\\t\\t\\tsupplyData.currentIndex,\\r\\n\\t\\t\\treferralCode\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Perform withdraw supply operation\\r\\n\\tfunction withdrawSupplyInternal (address account, address market, uint256 amount) \\r\\n\\t\\tinternal\\r\\n\\t\\twhenNotPaused(\\\"withdrawSupply\\\")\\r\\n\\t{\\r\\n\\t\\tMarketData memory supplyData;\\r\\n\\t\\t(supplyData.balance, supplyData.interest, supplyData.currentIndex) = getAccountSupply(account, market);\\r\\n\\t\\tuint256 totalSuppliedBalance = supplyData.balance.add(supplyData.interest);\\r\\n\\t\\trequire (totalSuppliedBalance != 0, \\\"Total balance should not be zero\\\");\\r\\n\\r\\n\\t\\tuint256 transferAmount = amount;\\r\\n\\t\\tif (transferAmount \\u003e totalSuppliedBalance){\\r\\n\\t\\t\\ttransferAmount = totalSuppliedBalance;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 remaining = 0;\\r\\n\\t\\tif (transferAmount \\u003c= supplyData.interest) {\\r\\n\\t\\t\\tsupplyData.interest = supplyData.interest.sub(transferAmount);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tremaining = transferAmount.sub(supplyData.interest);\\r\\n\\t\\t\\tsupplyData.interest = 0;\\r\\n\\t\\t\\tsupplyData.balance = supplyData.balance.sub(remaining);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tsupplies[account][market].balance = supplyData.balance;\\r\\n\\t\\tsupplies[account][market].accumulatedInterest = supplyData.interest;\\r\\n\\t\\tsupplies[account][market].lastInterestIndex = supplyData.currentIndex;\\r\\n\\r\\n\\t\\tbeforeChangeSupplyRate(market);\\r\\n\\t\\t\\r\\n\\t\\tmarketAssets[market].totalSupply = marketAssets[market].totalSupply.sub(remaining);\\t\\r\\n\\t\\t\\r\\n\\t\\ttransferFromHoldefi(msg.sender, market, transferAmount);\\r\\n\\t\\r\\n\\t\\temit WithdrawSupply(\\r\\n\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\taccount,\\r\\n\\t\\t\\tmarket,\\r\\n\\t\\t\\ttransferAmount,\\r\\n\\t\\t\\tsupplyData.balance,\\r\\n\\t\\t\\tsupplyData.interest,\\r\\n\\t\\t\\tsupplyData.currentIndex\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Perform collateralize operation\\r\\n\\tfunction collateralizeInternal (address account, address collateral, uint256 amount)\\r\\n\\t\\tinternal\\r\\n\\t\\twhenNotPaused(\\\"collateralize\\\")\\r\\n\\t\\tcollateralIsActive(collateral)\\r\\n\\t{\\r\\n\\t\\tif (collateral != ethAddress) {\\r\\n\\t\\t\\ttransferToHoldefi(address(holdefiCollaterals), collateral, amount);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\ttransferFromHoldefi(address(holdefiCollaterals), collateral, amount);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 balance = collaterals[account][collateral].balance.add(amount);\\r\\n\\t\\tcollaterals[account][collateral].balance = balance;\\r\\n\\t\\tcollaterals[account][collateral].lastUpdateTime = block.timestamp;\\r\\n\\r\\n\\t\\tcollateralAssets[collateral].totalCollateral = collateralAssets[collateral].totalCollateral.add(amount);\\t\\r\\n\\t\\t\\r\\n\\t\\temit Collateralize(msg.sender, account, collateral, amount, balance);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Perform withdraw collateral operation\\r\\n\\tfunction withdrawCollateralInternal (address account, address collateral, uint256 amount) \\r\\n\\t\\tinternal\\r\\n\\t\\twhenNotPaused(\\\"withdrawCollateral\\\")\\r\\n\\t{\\r\\n\\t\\t(uint256 balance,, uint256 borrowPowerValue, uint256 totalBorrowValue,) =\\r\\n\\t\\t\\tgetAccountCollateral(account, collateral);\\r\\n\\r\\n\\t\\trequire (borrowPowerValue != 0, \\\"Borrow power should not be zero\\\");\\r\\n\\r\\n\\t\\tuint256 collateralNedeed = 0;\\r\\n\\t\\tif (totalBorrowValue != 0) {\\r\\n\\t\\t\\tuint256 valueToLoanRate = holdefiSettings.collateralAssets(collateral).valueToLoanRate;\\r\\n\\t\\t\\tuint256 totalCollateralValue = totalBorrowValue.mul(valueToLoanRate).div(rateDecimals);\\r\\n\\t\\t\\tcollateralNedeed = holdefiPrices.getAssetAmountFromValue(collateral, totalCollateralValue);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 maxWithdraw = balance.sub(collateralNedeed);\\r\\n\\t\\tuint256 transferAmount = amount;\\r\\n\\t\\tif (transferAmount \\u003e maxWithdraw){\\r\\n\\t\\t\\ttransferAmount = maxWithdraw;\\r\\n\\t\\t}\\r\\n\\t\\tbalance = balance.sub(transferAmount);\\r\\n\\t\\tcollaterals[account][collateral].balance = balance;\\r\\n\\t\\tcollaterals[account][collateral].lastUpdateTime = block.timestamp;\\r\\n\\r\\n\\t\\tcollateralAssets[collateral].totalCollateral =\\r\\n\\t\\t\\tcollateralAssets[collateral].totalCollateral.sub(transferAmount);\\r\\n\\r\\n\\t\\tholdefiCollaterals.withdraw(collateral, msg.sender, transferAmount);\\r\\n\\r\\n\\t\\temit WithdrawCollateral(msg.sender, account, collateral, transferAmount, balance);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Perform borrow operation\\r\\n\\tfunction borrowInternal (address account, address market, address collateral, uint256 amount, uint16 referralCode)\\r\\n\\t\\tinternal\\r\\n\\t\\twhenNotPaused(\\\"borrow\\\")\\r\\n\\t\\tmarketIsActive(market)\\r\\n\\t\\tcollateralIsActive(collateral)\\r\\n\\t{\\r\\n\\t\\trequire (\\r\\n\\t\\t\\tamount \\u003c= (marketAssets[market].totalSupply.sub(marketAssets[market].totalBorrow)),\\r\\n\\t\\t\\t\\\"Amount should be less than cash\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t(,, uint256 borrowPowerValue,,) = getAccountCollateral(account, collateral);\\r\\n\\t\\tuint256 assetToBorrowValue = holdefiPrices.getAssetValueFromAmount(market, amount);\\r\\n\\t\\trequire (\\r\\n\\t\\t\\tborrowPowerValue \\u003e= assetToBorrowValue,\\r\\n\\t\\t\\t\\\"Borrow power should be more than new borrow value\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tMarketData memory borrowData;\\r\\n\\t\\t(borrowData.balance, borrowData.interest, borrowData.currentIndex) = getAccountBorrow(account, market, collateral);\\r\\n\\t\\t\\r\\n\\t\\tborrowData.balance = borrowData.balance.add(amount);\\r\\n\\t\\tborrows[account][collateral][market].balance = borrowData.balance;\\r\\n\\t\\tborrows[account][collateral][market].accumulatedInterest = borrowData.interest;\\r\\n\\t\\tborrows[account][collateral][market].lastInterestIndex = borrowData.currentIndex;\\r\\n\\t\\tcollaterals[account][collateral].lastUpdateTime = block.timestamp;\\r\\n\\r\\n\\t\\tbeforeChangeSupplyRate(market);\\r\\n\\r\\n\\t\\tmarketAssets[market].totalBorrow = marketAssets[market].totalBorrow.add(amount);\\r\\n\\r\\n\\t\\ttransferFromHoldefi(msg.sender, market, amount);\\r\\n\\r\\n\\t\\temit Borrow(\\r\\n\\t\\t\\tmsg.sender, \\r\\n\\t\\t\\taccount,\\r\\n\\t\\t\\tmarket,\\r\\n\\t\\t\\tcollateral,\\r\\n\\t\\t\\tamount,\\r\\n\\t\\t\\tborrowData.balance,\\r\\n\\t\\t\\tborrowData.interest,\\r\\n\\t\\t\\tborrowData.currentIndex,\\r\\n\\t\\t\\treferralCode\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Perform repay borrow operation\\r\\n\\tfunction repayBorrowInternal (address account, address market, address collateral, uint256 amount)\\r\\n\\t\\tinternal\\r\\n\\t\\twhenNotPaused(\\\"repayBorrow\\\")\\r\\n\\t{\\r\\n\\t\\tMarketData memory borrowData;\\r\\n\\t\\t(borrowData.balance, borrowData.interest, borrowData.currentIndex) =\\r\\n\\t\\t\\tgetAccountBorrow(account, market, collateral);\\r\\n\\r\\n\\t\\tuint256 totalBorrowedBalance = borrowData.balance.add(borrowData.interest);\\r\\n\\t\\trequire (totalBorrowedBalance != 0, \\\"Total balance should not be zero\\\");\\r\\n\\r\\n\\t\\tuint256 transferAmount = amount;\\r\\n\\t\\tif (transferAmount \\u003e totalBorrowedBalance) {\\r\\n\\t\\t\\ttransferAmount = totalBorrowedBalance;\\r\\n\\t\\t\\tif (market == ethAddress) {\\r\\n\\t\\t\\t\\tuint256 extra = amount.sub(transferAmount);\\r\\n\\t\\t\\t\\ttransferFromHoldefi(msg.sender, ethAddress, extra);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tif (market != ethAddress) {\\r\\n\\t\\t\\ttransferToHoldefi(address(this), market, transferAmount);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 remaining = 0;\\r\\n\\t\\tif (transferAmount \\u003c= borrowData.interest) {\\r\\n\\t\\t\\tborrowData.interest = borrowData.interest.sub(transferAmount);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tremaining = transferAmount.sub(borrowData.interest);\\r\\n\\t\\t\\tborrowData.interest = 0;\\r\\n\\t\\t\\tborrowData.balance = borrowData.balance.sub(remaining);\\r\\n\\t\\t}\\r\\n\\t\\tborrows[account][collateral][market].balance = borrowData.balance;\\r\\n\\t\\tborrows[account][collateral][market].accumulatedInterest = borrowData.interest;\\r\\n\\t\\tborrows[account][collateral][market].lastInterestIndex = borrowData.currentIndex;\\r\\n\\t\\tcollaterals[account][collateral].lastUpdateTime = block.timestamp;\\r\\n\\r\\n\\t\\tbeforeChangeSupplyRate(market);\\r\\n\\t\\t\\r\\n\\t\\tmarketAssets[market].totalBorrow = marketAssets[market].totalBorrow.sub(remaining);\\t\\r\\n\\r\\n\\t\\temit RepayBorrow (\\r\\n\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\taccount,\\r\\n\\t\\t\\tmarket,\\r\\n\\t\\t\\tcollateral,\\r\\n\\t\\t\\ttransferAmount,\\r\\n\\t\\t\\tborrowData.balance,\\r\\n\\t\\t\\tborrowData.interest,\\r\\n\\t\\t\\tborrowData.currentIndex\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Perform buy liquidated collateral operation\\r\\n\\tfunction buyLiquidatedCollateralInternal (address market, address collateral, uint256 marketAmount)\\r\\n\\t\\tinternal\\r\\n\\t\\twhenNotPaused(\\\"buyLiquidatedCollateral\\\")\\r\\n\\t{\\r\\n\\t\\tuint256 debt = marketDebt[collateral][market];\\r\\n\\t\\trequire (marketAmount \\u003c= debt,\\r\\n\\t\\t\\t\\\"Amount should be less than total liquidated assets\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tuint256 collateralAmountWithDiscount =\\r\\n\\t\\t\\tgetDiscountedCollateralAmount(market, collateral, marketAmount);\\r\\n\\r\\n\\t\\tuint256 totalLiquidatedCollateral = collateralAssets[collateral].totalLiquidatedCollateral;\\r\\n\\t\\trequire (\\r\\n\\t\\t\\tcollateralAmountWithDiscount \\u003c= totalLiquidatedCollateral,\\r\\n\\t\\t\\t\\\"Collateral amount with discount should be less than total liquidated assets\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\tif (market != ethAddress) {\\r\\n\\t\\t\\ttransferToHoldefi(address(this), market, marketAmount);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tcollateralAssets[collateral].totalLiquidatedCollateral = totalLiquidatedCollateral.sub(collateralAmountWithDiscount);\\r\\n\\t\\tmarketDebt[collateral][market] = debt.sub(marketAmount);\\r\\n\\r\\n\\t\\tholdefiCollaterals.withdraw(collateral, msg.sender, collateralAmountWithDiscount);\\r\\n\\r\\n\\t\\temit BuyLiquidatedCollateral(market, collateral, marketAmount, collateralAmountWithDiscount);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Perform deposit promotion reserve operation\\r\\n\\tfunction depositPromotionReserveInternal (address market, uint256 amount)\\r\\n\\t\\tinternal\\r\\n\\t\\tmarketIsActive(market)\\r\\n\\t{\\r\\n\\t\\tif (market != ethAddress) {\\r\\n\\t\\t\\ttransferToHoldefi(address(this), market, amount);\\r\\n\\t\\t}\\r\\n\\t\\tuint256 amountScaled = amount.mul(secondsPerYear).mul(rateDecimals);\\r\\n\\r\\n\\t\\tmarketAssets[market].promotionReserveScaled = \\r\\n\\t\\t\\tmarketAssets[market].promotionReserveScaled.add(amountScaled);\\r\\n\\r\\n\\t\\temit PromotionReserveDeposited(market, amount);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Perform deposit liquidation reserve operation\\r\\n\\tfunction depositLiquidationReserveInternal (address collateral, uint256 amount)\\r\\n\\t\\tinternal\\r\\n\\t\\tcollateralIsActive(ethAddress)\\r\\n\\t{\\r\\n\\t\\tif (collateral != ethAddress) {\\r\\n\\t\\t\\ttransferToHoldefi(address(holdefiCollaterals), collateral, amount);\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\ttransferFromHoldefi(address(holdefiCollaterals), collateral, amount);\\r\\n\\t\\t}\\r\\n\\t\\tcollateralAssets[ethAddress].totalLiquidatedCollateral =\\r\\n\\t\\t\\tcollateralAssets[ethAddress].totalLiquidatedCollateral.add(msg.value);\\r\\n\\t\\t\\r\\n\\t\\temit LiquidationReserveDeposited(ethAddress, msg.value);\\r\\n\\t}\\r\\n}\"},\"HoldefiCollaterals.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.12;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n\\n/// @title HoldefiCollaterals\\n/// @author Holdefi Team\\n/// @notice Collaterals is held by this contract\\n/// @dev The address of ETH asset considered as 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\ncontract HoldefiCollaterals {\\n\\n\\taddress constant public ethAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n\\taddress public holdefiContract;\\n\\n\\t/// @dev Initializes the main Holdefi contract address\\n\\tconstructor() public {\\n\\t\\tholdefiContract = msg.sender;\\n\\t}\\n\\n\\t/// @notice Modifier to check that only Holdefi contract interacts with the function\\n    modifier onlyHoldefiContract() {\\n        require (msg.sender == holdefiContract, \\\"Sender should be holdefi contract\\\");\\n        _;\\n    }\\n\\n\\t/// @notice Only Holdefi contract can send ETH to this contract\\n    receive() external payable onlyHoldefiContract {\\n\\t}\\n\\n\\t/// @notice Holdefi contract withdraws collateral from this contract to recipient account\\n\\t/// @param collateral Address of the given collateral\\n\\t/// @param recipient Address of the recipient\\n\\t/// @param amount Amount to be withdrawn\\n\\tfunction withdraw (address collateral, address recipient, uint256 amount)\\n\\t\\texternal\\n\\t\\tonlyHoldefiContract\\n\\t{\\n\\t\\tbool success = false;\\n\\t\\tif (collateral == ethAddress){\\n\\t\\t\\t(success, ) = recipient.call{value:amount}(\\\"\\\");\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tIERC20 token = IERC20(collateral);\\n\\t\\t\\tsuccess = token.transfer(recipient, amount);\\n\\t\\t}\\n\\t\\trequire (success, \\\"Cannot Transfer\\\");\\n\\t}\\n\\n}\"},\"HoldefiOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.12;\\n\\n/// @title HoldefiOwnable\\n/// @author Holdefi Team\\n/// @notice Taking ideas from Open Zeppelin\\u0027s Ownable contract\\n/// @dev Contract module which provides a basic access control mechanism, where\\n/// there is an account (an owner) that can be granted exclusive access to\\n/// specific functions.\\n///\\n/// By default, the owner account will be the one that deploys the contract. This\\n/// can later be changed with {transferOwnership}.\\n///\\n/// This module is used through inheritance. It will make available the modifier\\n/// `onlyOwner`, which can be applied to your functions to restrict their use to\\n/// the owner.\\ncontract HoldefiOwnable {\\n    address public owner;\\n    address public pendingOwner;\\n\\n    /// @notice Event emitted when an ownership transfer request is recieved\\n    event OwnershipTransferRequested(address newPendingOwner);\\n\\n    /// @notice Event emitted when an ownership transfer request is accepted by the pending owner\\n    event OwnershipTransferred(address newOwner, address oldOwner);\\n\\n    /// @notice Initializes the contract owner\\n    constructor () public {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(owner, address(0));\\n    }\\n\\n    /// @notice Throws if called by any account other than the owner\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Sender should be owner\\\");\\n        _;\\n    }\\n\\n    /// @notice Transfers ownership of the contract to a new owner\\n    /// @dev Can only be called by the current owner\\n    /// @param newOwner Address of new owner\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"New owner can not be zero address\\\");\\n        pendingOwner = newOwner;\\n\\n        emit OwnershipTransferRequested(newOwner);\\n    }\\n\\n    /// @notice Pending owner accepts ownership of the contract\\n    /// @dev Only Pending owner can call this function\\n    function acceptTransferOwnership () external {\\n        require (pendingOwner != address(0), \\\"Pending owner is empty\\\");\\n        require (pendingOwner == msg.sender, \\\"Pending owner is not same as sender\\\");\\n        \\n        emit OwnershipTransferred(pendingOwner, owner);\\n        owner = pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n}\"},\"HoldefiPausableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./HoldefiOwnable.sol\\\";\\n\\n/// @title HoldefiPausableOwnable\\n/// @author Holdefi Team\\n/// @notice Taking ideas from Open Zeppelin\\u0027s Pausable contract\\n/// @dev Base contract which allows children to implement an emergency stop mechanism.\\ncontract HoldefiPausableOwnable is HoldefiOwnable {\\n\\n    uint256 constant public maxPauseDuration = 2592000;     //seconds per month\\n\\n    struct Operation {\\n        bool isValid;\\n        uint256 pauseEndTime;\\n    }\\n\\n    /// @notice Pauser can pause operations but can\\u0027t unpause them\\n    address public pauser;\\n\\n    mapping(string =\\u003e Operation) public paused;\\n\\n    /// @notice Event emitted when the pauser is changed by the owner\\n    event PauserChanged(address newPauser, address oldPauser);\\n\\n    /// @notice Event emitted when an operation is paused by the pauser\\n    event OperationPaused(string operation, uint256 pauseDuration);\\n\\n    /// @notice Event emitted when an operation is unpaused by the owner\\n    event OperationUnpaused(string operation);\\n    \\n    /// @notice Define valid operations that can be paused\\n    constructor () public {\\n        paused[\\\"supply\\\"].isValid = true;\\n        paused[\\\"withdrawSupply\\\"].isValid = true;\\n        paused[\\\"collateralize\\\"].isValid = true;\\n        paused[\\\"withdrawCollateral\\\"].isValid = true;\\n        paused[\\\"borrow\\\"].isValid = true;\\n        paused[\\\"repayBorrow\\\"].isValid = true;\\n        paused[\\\"liquidateBorrowerCollateral\\\"].isValid = true;\\n        paused[\\\"buyLiquidatedCollateral\\\"].isValid = true;\\n    }\\n\\n    /// @dev Modifier to make a function callable only by owner or pauser\\n    modifier onlyPausers() {\\n        require(msg.sender == owner || msg.sender == pauser , \\\"Sender should be owner or pauser\\\");\\n        _;\\n    }\\n    \\n    /// @dev Modifier to make a function callable only when an operation is not paused\\n    /// @param operation Name of the operation\\n    modifier whenNotPaused(string memory operation) {\\n        require(!isPaused(operation), \\\"Operation is paused\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to make a function callable only when an operation is paused\\n    /// @param operation Name of the operation\\n    modifier whenPaused(string memory operation) {\\n        require(isPaused(operation), \\\"Operation is unpaused\\\");\\n        _;\\n    }\\n\\n    /// @dev Modifier to make a function callable only when an operation is valid\\n    /// @param operation Name of the operation\\n    modifier operationIsValid(string memory operation) {\\n        require(paused[operation].isValid ,\\\"Operation is not valid\\\");\\n        _;\\n    }\\n\\n    /// @notice Returns the pause status of a given operation\\n    /// @param operation Name of the operation\\n    /// @return res Pause status of a given operation\\n    function isPaused(string memory operation) public view returns (bool res) {\\n        if (block.timestamp \\u003e paused[operation].pauseEndTime) {\\n            res = false;\\n        }\\n        else {\\n            res = true;\\n        }\\n    }\\n\\n    /// @notice Called by pausers to pause an operation, triggers stopped state\\n    /// @param operation Name of the operation\\n    /// @param pauseDuration The length of time the operation must be paused\\n    function pause(string memory operation, uint256 pauseDuration)\\n        public\\n        onlyPausers\\n        operationIsValid(operation)\\n        whenNotPaused(operation)\\n    {\\n        require (pauseDuration \\u003c= maxPauseDuration, \\\"Duration not in range\\\");\\n        paused[operation].pauseEndTime = block.timestamp + pauseDuration;\\n        emit OperationPaused(operation, pauseDuration);\\n    }\\n\\n    /// @notice Called by owner to unpause an operation, returns to normal state\\n    /// @param operation Name of the operation\\n    function unpause(string memory operation)\\n        public\\n        onlyOwner\\n        operationIsValid(operation)\\n        whenPaused(operation)\\n    {\\n        paused[operation].pauseEndTime = 0;\\n        emit OperationUnpaused(operation);\\n    }\\n\\n    /// @notice Called by pausers to pause operations, triggers stopped state for selected operations\\n    /// @param operations List of operation names\\n    /// @param pauseDurations List of durations specifying the pause time of each operation\\n    function batchPause(string[] memory operations, uint256[] memory pauseDurations) external {\\n        require (operations.length == pauseDurations.length, \\\"Lists are not equal in length\\\");\\n        for (uint256 i = 0 ; i \\u003c operations.length ; i++) {\\n            pause(operations[i], pauseDurations[i]);\\n        }\\n    }\\n\\n    /// @notice Called by pausers to pause operations, returns to normal state for selected operations\\n    /// @param operations List of operation names\\n    function batchUnpause(string[] memory operations) external {\\n        for (uint256 i = 0 ; i \\u003c operations.length ; i++) {\\n            unpause(operations[i]);\\n        }\\n    }\\n\\n    /// @notice Called by owner to set a new pauser\\n    /// @param newPauser Address of new pauser\\n    function setPauser(address newPauser) external onlyOwner {\\n        emit PauserChanged(newPauser, pauser);\\n        pauser = newPauser;\\n        \\n    }\\n\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c \\u003c a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b \\u003e a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003e 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract HoldefiSettingsInterface\",\"name\":\"holdefiSettingsAddress\",\"type\":\"address\"},{\"internalType\":\"contract HoldefiPricesInterface\",\"name\":\"holdefiPricesAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"BuyLiquidatedCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidatedCollateral\",\"type\":\"uint256\"}],\"name\":\"CollateralLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Collateralize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"HoldefiPricesContractChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidationReserveDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidationReserveWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pauseDuration\",\"type\":\"uint256\"}],\"name\":\"OperationPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"}],\"name\":\"OperationUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPauser\",\"type\":\"address\"}],\"name\":\"PauserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"promotionDebt\",\"type\":\"uint256\"}],\"name\":\"PromotionDebtUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PromotionReserveDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"promotionReserve\",\"type\":\"uint256\"}],\"name\":\"PromotionReserveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PromotionReserveWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"RepayBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"UpdateBorrowIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupplyIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supplyRate\",\"type\":\"uint256\"}],\"name\":\"UpdateSupplyIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"WithdrawCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"WithdrawSupply\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptTransferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveWithdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveWithdrawSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"operations\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pauseDurations\",\"type\":\"uint256[]\"}],\"name\":\"batchPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"operations\",\"type\":\"string[]\"}],\"name\":\"batchUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"beforeChangeBorrowRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"beforeChangeSupplyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"borrowBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"buyLiquidatedCollateral\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketAmount\",\"type\":\"uint256\"}],\"name\":\"buyLiquidatedCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateralAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquidatedCollateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"collateralize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"collateralizeBehalf\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"collateralizeBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositLiquidationReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLiquidationReserve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositPromotionReserve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositPromotionReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"getAccountBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBorrowIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"getAccountBorrowAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"getAccountCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeSinceLastActivity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowPowerValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowValue\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"underCollateral\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getAccountSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentSupplyIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"getAccountTotalBorrowValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBorrowValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"getAccountWithdrawCollateralAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getAccountWithdrawSupplyAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getCurrentBorrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getCurrentSupplyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supplyIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketAmount\",\"type\":\"uint256\"}],\"name\":\"getDiscountedCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmountWithDiscount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"getLiquidationReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getPromotionDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"promotionDebtScaled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getPromotionReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"promotionReserveScaled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdefiCollaterals\",\"outputs\":[{\"internalType\":\"contract HoldefiCollaterals\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdefiPrices\",\"outputs\":[{\"internalType\":\"contract HoldefiPricesInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdefiSettings\",\"outputs\":[{\"internalType\":\"contract HoldefiSettingsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"}],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"res\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"liquidateBorrowerCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyIndexUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowIndexUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"promotionReserveScaled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"promotionReserveLastUpdateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"promotionDebtScaled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"promotionDebtLastUpdateTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPauseDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pauseDuration\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pauseEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"repayBorrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"repayBorrowBehalf\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"reserveSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract HoldefiPricesInterface\",\"name\":\"newHoldefiPrices\",\"type\":\"address\"}],\"name\":\"setHoldefiPricesContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"}],\"name\":\"setPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"supplyBehalf\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"supplyBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateralBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLiquidationReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPromotionReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawSupplyBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Holdefi","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000008aa43bd095716303708a05bdc3ca90360116d67000000000000000000000000a690abb15a45f38acd10600ae82f9f238b1e589c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b6cbe82749db69776f550cba4eed5638d03f72bb1aef5d86cddb6887eda8358b"}]}