{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StakingAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport {Clones} from '@openzeppelin/contracts/proxy/Clones.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';\\nimport {ReentrancyGuard} from '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport {AuctionBase} from './misc/AuctionBase.sol';\\nimport {IStakedAave} from './interfaces/IStakedAave.sol';\\nimport {IERC20Permit} from './interfaces/IERC20Permit.sol';\\nimport {IVault} from './interfaces/IVault.sol';\\nimport {DataTypes} from './libraries/DataTypes.sol';\\nimport {Errors} from './libraries/Errors.sol';\\nimport {VersionedInitializable} from './aave-upgradeability/VersionedInitializable.sol';\\n\\n/**\\n * @title StakingAuction Contract\\n * @author Aito\\n *\\n * @dev Contract that manages staking auctions using stkAAVE.\\n */\\ncontract StakingAuction is VersionedInitializable, AuctionBase, ReentrancyGuard {\\n    using SafeERC20 for IERC20Permit;\\n    using SafeERC20 for IStakedAave;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant STAKINGAUCTION_REVISION = 0x1;\\n    IERC20Permit public constant AAVE = IERC20Permit(0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9);\\n    IStakedAave public constant STKAAVE = IStakedAave(0x4da27a545c0c5B758a6BA100e3a049001de870f5);\\n\\n    mapping(address => mapping(uint256 => DataTypes.StakingAuctionFullData)) internal _nftData;\\n\\n    uint256 internal _auctionCounter;\\n    address internal _vaultLogic;\\n    uint16 internal _burnPenaltyBps;\\n\\n    /**\\n     * @notice Emitted upon contract initialization.\\n     *\\n     * @param treasury The treasury address set.\\n     * @param treasuryFeeBps The treasury fee basis points set.\\n     * @param burnPenaltyBps The burn penalty basis points set.\\n     * @param overtimeWindow The overtime window set.\\n     * @param minimumAuctionDuration The minimum auction duration set.\\n     * @param distributionCap The maximum amount of distributions set.\\n     */\\n    event Initialized(\\n        address treasury,\\n        uint16 treasuryFeeBps,\\n        uint16 burnPenaltyBps,\\n        uint40 overtimeWindow,\\n        uint40 minimumAuctionDuration,\\n        uint8 distributionCap\\n    );\\n\\n    /**\\n     * @notice Emitted when a new auction is scheduled on a given NFT.\\n     *\\n     * @param auctionId The auction identifier.\\n     * @param nft The NFT address of the token to auction.\\n     * @param nftId The NFT ID of the token to auction.\\n     * @param auctionId The auction identifier.\\n     * @param auctioner The address starting the auction.\\n     * @param startTimestamp The auction's starting timestamp.\\n     * @param endTimestamp The auction's ending timestamp.\\n     * @param startPrice The auction's starting price.\\n     */\\n    event AuctionCreated(\\n        address indexed nft,\\n        uint256 indexed nftId,\\n        uint256 auctionId,\\n        address auctioner,\\n        uint40 startTimestamp,\\n        uint40 endTimestamp,\\n        uint256 startPrice\\n    );\\n\\n    /**\\n     * @notice Emitted when a new bid or outbid is created on a given NFT.\\n     *\\n     * @param auctionId The auction identifier.\\n     * @param bidder The bidder address.\\n     * @param spender The address spending currency.\\n     * @param amount The amount used to bid.\\n     */\\n    event BidSubmitted(\\n        uint256 indexed auctionId,\\n        address bidder,\\n        address spender,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Emitted when an auction is extended via overtime window.\\n     *\\n     * @param auctionId The auction identifier.\\n     * @param newEndTimestamp The new auction end timestamp.\\n     */\\n    event AuctionExtended(\\n        uint256 indexed auctionId,\\n        uint40 newEndTimestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when an NFT is won and claimed.\\n     *\\n     * @param auctionId The auction identifier.\\n     * @param nft The NFT address of the token claimed.\\n     * @param nftId The NFT ID of the token claimed.\\n     * @param winner The winner of the NFT.\\n     */\\n    event WonNftClaimed(\\n        address indexed nft,\\n        uint256 indexed nftId,\\n        uint256 auctionId,\\n        address winner\\n    );\\n\\n    /**\\n     * @notice Emitted when an NFT is redeemed for the underlying stake in it's corresponding vault.\\n     *\\n     * @param auctionId The auction identifier.\\n     * @param nft The NFT address redeemed.\\n     * @param nftId The NFT ID redeemed.\\n     */\\n    event Redeemed(address indexed nft, uint256 indexed nftId, uint256 auctionId);\\n\\n    /**\\n     * @notice Emitted when an NFT's staking rewards are claimed.\\n     *\\n     * @param nft The NFT address claimed for.\\n     * @param nftId The NFT ID claimed for.\\n     * @param auctionId The auction identifier.\\n     */\\n    event RewardsClaimed(address indexed nft, uint256 indexed nftId, uint256 auctionId);\\n\\n    /**\\n     * @notice Emitted when an NFT is reclaimed from an expired auction with no bids.\\n     *\\n     * @param auctionId The auction identifier.\\n     * @param nft The NFT address reclaimed.\\n     * @param nftId The NFT ID reclaimed.\\n     */\\n    event Reclaimed(uint256 indexed auctionId, address indexed nft, uint256 indexed nftId);\\n\\n    /**\\n     * @notice Emitted when the burn penalty is updated.\\n     *\\n     * @param newBurnPenaltyBps The new burn penalty in basis points.\\n     */\\n    event BurnPenaltyChanged(uint16 newBurnPenaltyBps);\\n\\n    /**\\n     * @notice Emitted when the vault implementation is updated.\\n     *\\n     * @param newVaultLogic The new vault implementation\\n     */\\n    event VaultImplementationChanged(address newVaultLogic);\\n\\n    /**\\n     * @dev Initializes the contract.\\n     *\\n     * @param vaultLogic The vault logic implementation address to clone.\\n     * @param treasury The treasury to send fees to.\\n     * @param treasuryFeeBps The treasury fee basis points sent upon claiming and burning.\\n     * @param burnPenaltyBps The amount of stkAAVE to distribute upon burning.\\n     * @param overtimeWindow The overtime window, triggers when a bid is sent within endTimestamp - overtimeWindow.\\n     * @param minimumAuctionDuration The minimum auction duration.\\n     * @param admin The administrator address to set, allows pausing.\\n     * @param distributionCap The maximum amount of distributions to allow auctions to have.\\n     */\\n    function initialize(\\n        address vaultLogic,\\n        address treasury,\\n        uint16 treasuryFeeBps,\\n        uint16 burnPenaltyBps,\\n        uint40 overtimeWindow,\\n        uint40 minimumAuctionDuration,\\n        address admin,\\n        uint8 distributionCap\\n    ) external initializer {\\n        require(\\n            admin != address(0) &&\\n                treasury != address(0) &&\\n                vaultLogic != address(0) &&\\n                treasuryFeeBps < BPS_MAX &&\\n                burnPenaltyBps < BPS_MAX &&\\n                overtimeWindow < minimumAuctionDuration &&\\n                overtimeWindow < 2 days &&\\n                distributionCap > 0 &&\\n                distributionCap < 6,\\n            Errors.INVALID_INIT_PARAMS\\n        );\\n\\n        _vaultLogic = vaultLogic;\\n        _treasury = treasury;\\n        _treasuryFeeBps = treasuryFeeBps;\\n        _burnPenaltyBps = burnPenaltyBps;\\n        _overtimeWindow = overtimeWindow;\\n        _minimumAuctionDuration = minimumAuctionDuration;\\n        _admin = admin;\\n        _distributionCap = distributionCap;\\n        _paused = false;\\n        AAVE.safeApprove(address(STKAAVE), type(uint256).max);\\n\\n        emit Initialized(\\n            treasury,\\n            treasuryFeeBps,\\n            burnPenaltyBps,\\n            overtimeWindow,\\n            minimumAuctionDuration,\\n            distributionCap\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates an auction on a given NFT with specified parameters. Initiator must be the owner of the NFT.\\n     *\\n     * @param nft The NFT address to auction.\\n     * @param nftId The NFT ID to auction.\\n     * @param startTimestamp The starting auction timestamp.\\n     * @param endTimestamp The ending auction timestamp.\\n     * @param startPrice The starting price for the auction.\\n     * @param distribution The distribution to follow upon completion\\n     */\\n    function createAuction(\\n        address nft,\\n        uint256 nftId,\\n        uint40 startTimestamp,\\n        uint40 endTimestamp,\\n        uint256 startPrice,\\n        DataTypes.DistributionData[] calldata distribution\\n    ) external nonReentrant onlyAdmin whenNotPaused {\\n        DataTypes.StakingAuctionFullData storage nftData = _nftData[nft][nftId];\\n        require(nftData.auctioner == address(0), Errors.AUCTION_EXISTS);\\n        require(\\n            distribution.length <= _distributionCap && distribution.length >= 1,\\n            Errors.INVALID_DISTRIBUTION_COUNT\\n        );\\n        require(\\n            startTimestamp > block.timestamp && endTimestamp > startTimestamp,\\n            Errors.INVALID_AUCTION_TIMESTAMPS\\n        );\\n        require(\\n            endTimestamp - startTimestamp >= _minimumAuctionDuration,\\n            Errors.INVALID_AUCTION_DURATION\\n        );\\n\\n        uint256 neededBps = uint256(BPS_MAX).sub(_treasuryFeeBps);\\n        uint256 totalBps;\\n        for (uint256 i = 0; i < distribution.length; i++) {\\n            totalBps = totalBps.add(distribution[i].bps);\\n        }\\n        require(totalBps == neededBps, Errors.INVALID_DISTRIBUTION_BPS);\\n\\n        DataTypes.StakingAuctionData memory auctionData =\\n            DataTypes.StakingAuctionData(startPrice, address(0), startTimestamp, endTimestamp);\\n\\n        _nftData[nft][nftId].auction = auctionData;\\n        _nftData[nft][nftId].auctionId = _auctionCounter;\\n        _nftData[nft][nftId].auctioner = msg.sender;\\n\\n        for (uint256 i = 0; i < distribution.length; i++) {\\n            require(distribution[i].recipient != address(0), Errors.ZERO_RECIPIENT);\\n            _nftData[nft][nftId].distribution.push(distribution[i]);\\n        }\\n\\n        IERC721(nft).transferFrom(msg.sender, address(this), nftId);\\n        emit AuctionCreated(\\n            nft,\\n            nftId,\\n            _auctionCounter++,\\n            msg.sender,\\n            startTimestamp,\\n            endTimestamp,\\n            startPrice\\n        );\\n    }\\n\\n    /**\\n     * @notice Bids using EIP-2612 permit to approve within the same function call.\\n     *\\n     * @param params The BidWithPermitParams struct containing the necessary information.\\n     */\\n    function bidWithPermit(DataTypes.BidWithPermitParams calldata params)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        AAVE.permit(\\n            msg.sender,\\n            address(this),\\n            params.amount,\\n            params.deadline,\\n            params.v,\\n            params.r,\\n            params.s\\n        );\\n        _bid(msg.sender, params.onBehalfOf, params.nft, params.nftId, params.amount);\\n    }\\n\\n    /**\\n     * @notice Claims a won NFT after an auction. Can be called by anyone.\\n     * This function initializes the vault and staking mechanism.\\n     *\\n     * @param nft The NFT address of the token to claim.\\n     * @param nftId The NFT ID of the token to claim.\\n     */\\n    function claimWonNFT(address nft, uint256 nftId) external nonReentrant whenNotPaused {\\n        DataTypes.StakingAuctionData storage auction = _nftData[nft][nftId].auction;\\n\\n        address winner = auction.currentBidder;\\n\\n        require(block.timestamp > auction.endTimestamp, Errors.AUCTION_ONGOING);\\n        require(winner != address(0), Errors.INVALID_BIDDER);\\n\\n        address clone = Clones.clone(_vaultLogic);\\n        _nftData[nft][nftId].vault = clone;\\n\\n        STKAAVE.stake(clone, auction.currentBid);\\n\\n        delete (_nftData[nft][nftId].auction);\\n        IERC721(nft).safeTransferFrom(address(this), winner, nftId);\\n\\n        emit WonNftClaimed(nft, nftId, _nftData[nft][nftId].auctionId, winner);\\n    }\\n\\n    /**\\n     * @notice Reclaims an NFT in the unlikely event that an auction did not result in any bids.\\n     *\\n     * @param nft The NFT address of the token to reclaim.\\n     * @param nftId The NFT ID of the token to reclaim.\\n     */\\n    function reclaimEndedAuction(address nft, uint256 nftId) external nonReentrant whenNotPaused {\\n        DataTypes.StakingAuctionData storage auction = _nftData[nft][nftId].auction;\\n        address auctioner = _nftData[nft][nftId].auctioner;\\n        address currentBidder = auction.currentBidder;\\n\\n        require(block.timestamp > auction.endTimestamp, Errors.AUCTION_ONGOING);\\n        require(currentBidder == address(0), Errors.VALID_BIDDER);\\n\\n        uint256 auctionIdCached = _nftData[nft][nftId].auctionId;\\n\\n        delete (_nftData[nft][nftId]);\\n        IERC721(nft).safeTransferFrom(address(this), auctioner, nftId);\\n\\n        emit Reclaimed(auctionIdCached, nft, nftId);\\n    }\\n\\n    /**\\n     * @notice Redeems an NFT to unlock the stake less penalty.\\n     *\\n     * @param nft The NFT address of the token to redeem.\\n     * @param nftId The NFT ID of the token to redeem.\\n     */\\n    function redeem(address nft, uint256 nftId) external nonReentrant whenNotPaused {\\n        IERC721 nftContract = IERC721(nft);\\n        DataTypes.StakingAuctionFullData storage nftData = _nftData[nft][nftId];\\n        address vault = nftData.vault;\\n        address auctioner = nftData.auctioner;\\n        DataTypes.DistributionData[] memory distribution = nftData.distribution;\\n\\n        require(vault != address(0), Errors.NONEXISTANT_VAULT);\\n\\n        uint256 rewardsBalance = STKAAVE.getTotalRewardsBalance(vault);\\n        uint256 stkAaveVaultBalance = STKAAVE.balanceOf(vault);\\n        uint256 auctionIdCached = nftData.auctionId;\\n        delete (_nftData[nft][nftId]);\\n\\n        _claimAndRedeem(vault, stkAaveVaultBalance);\\n\\n        uint256 penaltyAmount = uint256(_burnPenaltyBps).mul(stkAaveVaultBalance).div(BPS_MAX);\\n        STKAAVE.safeTransfer(msg.sender, stkAaveVaultBalance.sub(penaltyAmount));\\n\\n        _distribute(address(AAVE), rewardsBalance, distribution);\\n        _distribute(address(STKAAVE), penaltyAmount, distribution);\\n\\n        require(nftContract.ownerOf(nftId) == msg.sender, Errors.NOT_NFT_OWNER);\\n        nftContract.safeTransferFrom(msg.sender, auctioner, nftId);\\n\\n        emit Redeemed(nft, nftId, auctionIdCached);\\n    }\\n\\n    /**\\n     * @notice Claims rewards associated with a given NFT.\\n     *\\n     * @param nft The NFT address to claim for.\\n     * @param nftId The NFT Id to claim for.\\n     */\\n    function claimRewards(address nft, uint256 nftId) external nonReentrant whenNotPaused {\\n        DataTypes.StakingAuctionFullData storage nftData = _nftData[nft][nftId];\\n        DataTypes.DistributionData[] storage distribution = _nftData[nft][nftId].distribution;\\n        address vault = nftData.vault;\\n        require(vault != address(0), Errors.NONEXISTANT_VAULT);\\n\\n        uint256 rewardsBalance = STKAAVE.getTotalRewardsBalance(vault);\\n        bytes memory rewardFunctionData = _buildClaimRewardsParams(address(this));\\n        address[] memory targets = new address[](1);\\n        bytes[] memory params = new bytes[](1);\\n        DataTypes.CallType[] memory callTypes = new DataTypes.CallType[](1);\\n\\n        targets[0] = address(STKAAVE);\\n        params[0] = rewardFunctionData;\\n        callTypes[0] = DataTypes.CallType.Call;\\n        IVault(vault).execute(targets, params, callTypes);\\n\\n        _distribute(address(AAVE), rewardsBalance, distribution);\\n\\n        emit RewardsClaimed(nft, nftId, nftData.auctionId);\\n    }\\n\\n    /**\\n     * @dev Admin function to set the burn penalty BPS.\\n     *\\n     * @param newBurnPenaltyBps The new burn penalty BPS to use.\\n     */\\n    function setBurnPenaltyBps(uint16 newBurnPenaltyBps) external onlyAdmin {\\n        require(newBurnPenaltyBps < BPS_MAX, Errors.INVALID_INIT_PARAMS);\\n        _burnPenaltyBps = newBurnPenaltyBps;\\n\\n        emit BurnPenaltyChanged(newBurnPenaltyBps);\\n    }\\n\\n    /**\\n     * @dev Admin function to set the vault logic address.\\n     *\\n     * @param newVaultLogic The new vault logic address.\\n     */\\n    function setNewVaultLogic(address newVaultLogic) external onlyAdmin {\\n        require(newVaultLogic != address(0), Errors.INVALID_INIT_PARAMS);\\n        _vaultLogic = newVaultLogic;\\n\\n        emit VaultImplementationChanged(newVaultLogic);\\n    }\\n\\n    /**\\n     * @notice Returns the current configuration of the auction's internal parameters.\\n     *\\n     * @return An StakingAuctionConfiguration struct containing the configuration.\\n     */\\n    function getConfiguration()\\n        external\\n        view\\n        returns (DataTypes.StakingAuctionConfiguration memory)\\n    {\\n        return\\n            DataTypes.StakingAuctionConfiguration(\\n                _vaultLogic,\\n                _treasury,\\n                _minimumAuctionDuration,\\n                _overtimeWindow,\\n                _treasuryFeeBps,\\n                _burnPenaltyBps\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the auction data for a given NFT.\\n     *\\n     * @param nft The NFT address to query.\\n     * @param nftId The NFT ID to query.\\n     *\\n     * @return The StakingAuctionFullData containing all data related to a given NFT.\\n     */\\n    function getNftData(address nft, uint256 nftId)\\n        external\\n        view\\n        returns (DataTypes.StakingAuctionFullData memory)\\n    {\\n        return _nftData[nft][nftId];\\n    }\\n\\n    function _bid(\\n        address spender,\\n        address onBehalfOf,\\n        address nft,\\n        uint256 nftId,\\n        uint256 amount\\n    ) internal override {\\n        require(onBehalfOf != address(0), Errors.INVALID_BIDDER);\\n        DataTypes.StakingAuctionData storage auction = _nftData[nft][nftId].auction;\\n        uint256 currentBid = auction.currentBid;\\n        address currentBidder = auction.currentBidder;\\n        uint40 endTimestamp = auction.endTimestamp;\\n        uint40 startTimestamp = auction.startTimestamp;\\n\\n        require(\\n            block.timestamp > startTimestamp && block.timestamp < endTimestamp,\\n            Errors.INVALID_BID_TIMESTAMPS\\n        );\\n        require(amount > currentBid, Errors.INVALID_BID_AMOUNT);\\n\\n        if (_overtimeWindow > 0 && block.timestamp > endTimestamp - _overtimeWindow) {\\n            uint40 newEndTimestamp = endTimestamp + _overtimeWindow;\\n            auction.endTimestamp = newEndTimestamp;\\n\\n            emit AuctionExtended(_nftData[nft][nftId].auctionId, newEndTimestamp);\\n        }\\n\\n        auction.currentBidder = onBehalfOf;\\n        auction.currentBid = amount;\\n\\n        if (currentBidder != address(0)) {\\n            AAVE.safeTransfer(currentBidder, currentBid);\\n        }\\n\\n        AAVE.safeTransferFrom(spender, address(this), amount);\\n\\n        emit BidSubmitted(_nftData[nft][nftId].auctionId, onBehalfOf, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Internal function that handles the vault call upon NFT redemption. Does not distribute.\\n     *\\n     * @param vault The vault address to call.\\n     * @param stkAaveAmount The amount (equivalent to the stkAAVE balance of the vault) to transfer in.\\n     */\\n    function _claimAndRedeem(address vault, uint256 stkAaveAmount) internal {\\n        bytes memory rewardFunctionData = _buildClaimRewardsParams(address(this));\\n        bytes memory transferFunctionData = _buildTransferParams(address(this), stkAaveAmount);\\n\\n        address[] memory targets = new address[](2);\\n        bytes[] memory params = new bytes[](2);\\n        DataTypes.CallType[] memory callTypes = new DataTypes.CallType[](2);\\n\\n        targets[0] = address(STKAAVE);\\n        targets[1] = address(STKAAVE);\\n        params[0] = rewardFunctionData;\\n        params[1] = transferFunctionData;\\n        callTypes[0] = DataTypes.CallType.Call;\\n        callTypes[1] = DataTypes.CallType.Call;\\n\\n        IVault(vault).execute(targets, params, callTypes);\\n    }\\n\\n    /**\\n     * @dev Internal function that builds stkAAVE claim reward params.\\n     *\\n     * @param to The address to claim rewards to.\\n     *\\n     * @return Bytes containing the claimRewards data needed.\\n     */\\n    function _buildClaimRewardsParams(address to) internal pure returns (bytes memory) {\\n        bytes4 claimRewardsSelector = IStakedAave.claimRewards.selector;\\n        bytes memory rewardFunctionData =\\n            abi.encodeWithSelector(claimRewardsSelector, to, type(uint256).max);\\n        return rewardFunctionData;\\n    }\\n\\n    /**\\n     * @dev Internal function that builds ERC20 transfer params.\\n     *\\n     * @param to The address to transfer to.\\n     * @param amount The amount to transfer.\\n     *\\n     * @return Bytes containing the transfer data needed.\\n     */\\n    function _buildTransferParams(address to, uint256 amount) internal pure returns (bytes memory) {\\n        bytes4 transferSelector = IERC20.transfer.selector;\\n        bytes memory transferFunctionData = abi.encodeWithSelector(transferSelector, to, amount);\\n        return transferFunctionData;\\n    }\\n\\n    function getRevision() internal pure override returns (uint256) {\\n        return STAKINGAUCTION_REVISION;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address master) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `master` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address master, bytes32 salt) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt, address deployer) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt) internal view returns (address predicted) {\\n        return predictDeterministicAddress(master, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/misc/AuctionBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';\\nimport {IERC20Permit} from '../interfaces/IERC20Permit.sol';\\nimport {Errors} from '../libraries/Errors.sol';\\nimport {DataTypes} from '../libraries/DataTypes.sol';\\nimport {AdminPausableUpgradeSafe} from './AdminPausableUpgradeSafe.sol';\\n\\n/**\\n * @title AdminPausableAuctionBaseUpgradeSafe\\n *\\n * @author Aito\\n *\\n * @dev A simple implementation that holds basic auction parameter functionality, common to both Aave staking and\\n * generic auction types.\\n */\\nabstract contract AuctionBase is AdminPausableUpgradeSafe {\\n    using SafeERC20 for IERC20Permit;\\n    using SafeMath for uint256;\\n\\n    uint16 public constant BPS_MAX = 10000;\\n\\n    address internal _treasury;\\n    uint40 internal _minimumAuctionDuration;\\n    uint40 internal _overtimeWindow;\\n    uint16 internal _treasuryFeeBps;\\n    uint8 internal _distributionCap;\\n\\n    event TreasuryFeeChanged(uint16 newTreasuryFeeBps);\\n    event TreasuryAddressChanged(address newTreasury);\\n    event MinimumAuctionDurationChanged(uint40 newMinimumDuration);\\n    event OvertimeWindowChanged(uint40 newOvertimeWindow);\\n    event DistributionCapChanged(uint8 newDistributionCap);\\n\\n    /**\\n     * @dev Admin function to change the treasury fee BPS.\\n     *\\n     * @param newTreasuryFeeBps The new treasury fee to use.\\n     */\\n    function setTreasuryFeeBps(uint16 newTreasuryFeeBps) external onlyAdmin {\\n        require(newTreasuryFeeBps < BPS_MAX, Errors.INVALID_INIT_PARAMS);\\n        _treasuryFeeBps = newTreasuryFeeBps;\\n        emit TreasuryFeeChanged(newTreasuryFeeBps);\\n    }\\n\\n    /**\\n     * @dev Admin function to change the treasury address.\\n     *\\n     * @param newTreasury The new treasury address to use.\\n     */\\n    function setTreasuryAddress(address newTreasury) external onlyAdmin {\\n        require(newTreasury != address(0), Errors.INVALID_INIT_PARAMS);\\n        _treasury = newTreasury;\\n        emit TreasuryAddressChanged(newTreasury);\\n    }\\n\\n    /**\\n     * @dev Admin function to change the minimum auction duration.\\n     *\\n     * @param newMinimumDuration The new minimum auction duration to set.\\n     */\\n    function setMinimumAuctionDuration(uint40 newMinimumDuration) external onlyAdmin {\\n        require(newMinimumDuration > _overtimeWindow, Errors.INVALID_INIT_PARAMS);\\n        _minimumAuctionDuration = newMinimumDuration;\\n        emit MinimumAuctionDurationChanged(newMinimumDuration);\\n    }\\n\\n    /**\\n     * @dev Admin function to set the auction overtime window.\\n     *\\n     * @param newOvertimeWindow The new overtime window to set.\\n     */\\n    function setOvertimeWindow(uint40 newOvertimeWindow) external onlyAdmin {\\n        require(\\n            newOvertimeWindow < _minimumAuctionDuration && newOvertimeWindow < 2 days,\\n            Errors.INVALID_INIT_PARAMS\\n        );\\n        _overtimeWindow = newOvertimeWindow;\\n        emit OvertimeWindowChanged(newOvertimeWindow);\\n    }\\n\\n    /**\\n     * @dev Admin function to change the distribution cap.\\n     *\\n     * @param newDistributionCap The new distribution cap to set.\\n     */\\n    function setDistributionCap(uint8 newDistributionCap) external onlyAdmin {\\n        require(newDistributionCap > 0, Errors.INVALID_INIT_PARAMS);\\n        _distributionCap = newDistributionCap;\\n        emit DistributionCapChanged(newDistributionCap);\\n    }\\n\\n    /**\\n     * @notice Bids on a given NFT with a given amount.\\n     *\\n     * @param onBehalfOf The address to bid on behalf of.\\n     * @param nft The NFT address to bid on.\\n     * @param nftId The NFT ID to bid on.\\n     * @param amount The amount to bid with.\\n     */\\n    function bid(\\n        address onBehalfOf,\\n        address nft,\\n        uint256 nftId,\\n        uint256 amount\\n    ) external virtual whenNotPaused {\\n        _bid(msg.sender, onBehalfOf, nft, nftId, amount);\\n    }\\n\\n    /**\\n     * @dev Internal function that distributes a given ERC20 token and token amount according to a given\\n     * distribution array.\\n     *\\n     * @param currency The currency address to distribute.\\n     * @param amount The total amount to distribute.\\n     * @param distribution The distribution array.\\n     */\\n    function _distribute(\\n        address currency,\\n        uint256 amount,\\n        DataTypes.DistributionData[] memory distribution\\n    ) internal {\\n        require(distribution.length > 0, Errors.INVALID_DISTRIBUTION_COUNT);\\n        IERC20Permit token = IERC20Permit(currency);\\n        uint256 leftover = amount;\\n        uint256 distributionAmount;\\n        for (uint256 i = 0; i < distribution.length; i++) {\\n            distributionAmount = amount.mul(distribution[i].bps).div(BPS_MAX);\\n            leftover = leftover.sub(distributionAmount);\\n            token.safeTransfer(distribution[i].recipient, distributionAmount);\\n        }\\n\\n        // Treasury gets the leftovers, equal to amount.mul(_treasuryFeeBps).div(BPS_MAX) for rounding errors.\\n        if (leftover > 0) {\\n            token.safeTransfer(_treasury, leftover);\\n        }\\n    }\\n\\n    function _bid(\\n        address spender,\\n        address onBehalfOf,\\n        address nft,\\n        uint256 nftId,\\n        uint256 amount\\n    ) internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakedAave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev This interface allows the auction contract to interact with staked AAVE.\\n */\\ninterface IStakedAave is IERC20 {\\n    function stake(address onBehalfOf, uint256 amount) external;\\n\\n    function claimRewards(address to, uint256 amount) external;\\n\\n    function getTotalRewardsBalance(address staker)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IERC20Permit is IERC20 {\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport {DataTypes} from \\\"../libraries/DataTypes.sol\\\";\\n\\ninterface IVault {\\n    function execute(\\n        address[] calldata targets,\\n        bytes[] calldata datas,\\n        DataTypes.CallType[] calldata callTypes\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\n/// Library containing data types needed for the NFT controller & vaults\\nlibrary DataTypes {\\n    struct DistributionData {\\n        address recipient;\\n        uint256 bps;\\n    }\\n\\n    struct StakingAuctionFullData {\\n        StakingAuctionData auction;\\n        DistributionData[] distribution;\\n        uint256 auctionId;\\n        address auctioner;\\n        address vault;\\n    }\\n\\n    struct StakingAuctionData {\\n        uint256 currentBid;\\n        address currentBidder;\\n        uint40 startTimestamp;\\n        uint40 endTimestamp;\\n    }\\n\\n    struct StakingAuctionConfiguration {\\n        address vaultLogic;\\n        address treasury;\\n        uint40 minimumAuctionDuration;\\n        uint40 overtimeWindow;\\n        uint16 treasuryFeeBps;\\n        uint16 burnPenaltyBps;\\n    }\\n\\n    struct GenericAuctionFullData {\\n        GenericAuctionData auction;\\n        DistributionData[] distribution;\\n        uint256 auctionId;\\n        address auctioner;\\n    }\\n\\n    struct GenericAuctionData {\\n        uint256 currentBid;\\n        address currency;\\n        address currentBidder;\\n        uint40 startTimestamp;\\n        uint40 endTimestamp;\\n    }\\n\\n    struct GenericAuctionConfiguration {\\n        address treasury;\\n        uint40 minimumAuctionDuration;\\n        uint40 overtimeWindow;\\n        uint16 treasuryFeeBps;\\n    }\\n\\n    struct RankedAuctionData {\\n        uint256 minPrice;\\n        address recipient;\\n        address currency;\\n        uint40 startTimestamp;\\n        uint40 endTimestamp;\\n    }\\n\\n    struct ReserveAuctionFullData {\\n        ReserveAuctionData auction;\\n        DistributionData[] distribution;\\n        uint256 auctionId;\\n        address auctioner;\\n    }\\n\\n    struct ReserveAuctionData {\\n        uint256 currentBid;\\n        uint256 buyNow;\\n        address currency;\\n        address currentBidder;\\n        uint40 duration;\\n        uint40 firstBidTimestamp;\\n        uint40 endTimestamp;\\n    }\\n\\n    struct OpenEditionFullData {\\n        DistributionData[] distribution;\\n        OpenEditionSaleData saleData;\\n    }\\n\\n    struct OpenEditionSaleData {\\n        uint256 price;\\n        address currency;\\n        address nft;\\n        uint40 startTimestamp;\\n        uint40 endTimestamp;\\n    }\\n\\n    struct OpenEditionConfiguration {\\n        address treasury;\\n        uint40 minimumAuctionDuration;\\n        uint16 treasuryFeeBps;\\n    }\\n\\n    struct OpenEditionBuyWithPermitParams {\\n        uint256 id;\\n        uint256 amount;\\n        uint256 permitAmount;\\n        uint256 deadline;\\n        address onBehalfOf;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct BidWithPermitParams {\\n        uint256 amount;\\n        uint256 deadline;\\n        uint256 nftId;\\n        address onBehalfOf;\\n        address nft;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct SimpleBidWithPermitParams {\\n        uint256 amount;\\n        uint256 deadline;\\n        address onBehalfOf;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    enum CallType {Call, DelegateCall}\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\n/// Contains error code strings\\nlibrary Errors {\\n  string public constant INVALID_AUCTION_TIMESTAMPS = '1';\\n  string public constant INVALID_BID_TIMESTAMPS = '2';\\n  string public constant INVALID_BID_AMOUNT = '3';\\n  string public constant AUCTION_ONGOING = '4';\\n  string public constant VALID_BIDDER = '5';\\n  string public constant NONEXISTANT_VAULT = '6';\\n  string public constant INVALID_DISTRIBUTION_BPS = '7';\\n  string public constant AUCTION_EXISTS = '8';\\n  string public constant NOT_STAKING_AUCTION = '9';\\n  string public constant INVALID_CALL_TYPE = '10';\\n  string public constant INVALID_AUCTION_DURATION = '11';\\n  string public constant INVALID_BIDDER = '12';\\n  string public constant PAUSED = '13';\\n  string public constant NOT_ADMIN = '14';\\n  string public constant INVALID_INIT_PARAMS = '15';\\n  string public constant INVALID_DISTRIBUTION_COUNT = '16';\\n  string public constant ZERO_RECIPIENT = '17';\\n  string public constant ZERO_CURRENCY = '18';\\n  string public constant RA_NOT_OUTBID = '19';\\n  string public constant RA_OUTBID = '20';\\n  string public constant NO_DISTRIBUTIONS = '21';\\n  string public constant VAULT_ARRAY_MISMATCH = '22';\\n  string public constant CURRENCY_NOT_WHITELSITED = '23';\\n  string public constant NOT_NFT_OWNER = '24';\\n  string public constant ZERO_NFT = '25';\\n  string public constant NOT_COLLECTION_CREATOR = '26';\\n  string public constant INVALID_BUY_NOW = '27';\\n  string public constant INVALID_RESERVE_PRICE = '28';\\n}\\n\"\r\n    },\r\n    \"contracts/aave-upgradeability/VersionedInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to implement initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 private lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(\\n      initializing || isConstructor() || revision > lastInitializedRevision,\\n      'Contract instance has already been initialized'\\n    );\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      lastInitializedRevision = revision;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the revision number of the contract\\n   * Needs to be defined in the inherited class as a constant.\\n   **/\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns true if and only if the function is running in the constructor\\n   **/\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    uint256 cs;\\n    //solium-disable-next-line\\n    assembly {\\n      cs := extcodesize(address())\\n    }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/misc/AdminPausableUpgradeSafe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport {Errors} from '../libraries/Errors.sol';\\n\\n/**\\n * @title AdminPausableUpgradeSafe\\n *\\n * @author Aito\\n * \\n * @dev Contract to be inherited from that adds simple administrator pausable functionality. This does not\\n * implement any changes on its own as there is no constructor or initializer. Both _admin and _paused must\\n * be initialized in the inheriting contract.\\n */\\ncontract AdminPausableUpgradeSafe {\\n    address internal _admin;\\n    bool internal _paused;\\n    \\n    /**\\n     * @notice Emitted when the contract is paused.\\n     * \\n     * @param admin The current administrator address.\\n     */\\n    event Paused(address admin);\\n\\n    /**\\n     * @notice Emitted when the contract is unpaused.\\n     *\\n     * @param admin The current administrator address.\\n     */\\n    event Unpaused(address admin);\\n\\n    /**\\n     * @notice Emitted when the admin is set to a different address.\\n     * \\n     * @param to The address of the new administrator. \\n     */\\n    event AdminChanged(address to);\\n\\n    constructor() {\\n        _paused = true;\\n    }\\n\\n    /**\\n     * @dev Modifier to only allow functions to be called when not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, Errors.PAUSED);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to only allow the admin as the caller.\\n     */\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, Errors.NOT_ADMIN);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Admin function pauses the contract.\\n     */\\n    function pause() external onlyAdmin {\\n        _paused = true;\\n        emit Paused(_admin);\\n    }\\n\\n    /**\\n     * @dev Admin function unpauses the contract.\\n     */\\n    function unpause() external onlyAdmin {\\n        _paused = false;\\n        emit Unpaused(_admin);\\n    }\\n\\n    /**\\n     * @dev Admin function that changes the administrator.\\n     */\\n    function changeAdmin(address to) external onlyAdmin {\\n        _admin = to;\\n        emit AdminChanged(to);\\n    }\\n\\n    /**\\n     * @dev View function that returns the current admin.\\n     */\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auctioner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"startTimestamp\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"endTimestamp\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"newEndTimestamp\",\"type\":\"uint40\"}],\"name\":\"AuctionExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newBurnPenaltyBps\",\"type\":\"uint16\"}],\"name\":\"BurnPenaltyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newDistributionCap\",\"type\":\"uint8\"}],\"name\":\"DistributionCapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"treasuryFeeBps\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"burnPenaltyBps\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"overtimeWindow\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"minimumAuctionDuration\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"distributionCap\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"newMinimumDuration\",\"type\":\"uint40\"}],\"name\":\"MinimumAuctionDurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"newOvertimeWindow\",\"type\":\"uint40\"}],\"name\":\"OvertimeWindowChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"Reclaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newTreasuryFeeBps\",\"type\":\"uint16\"}],\"name\":\"TreasuryFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVaultLogic\",\"type\":\"address\"}],\"name\":\"VaultImplementationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WonNftClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AAVE\",\"outputs\":[{\"internalType\":\"contract IERC20Permit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BPS_MAX\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKINGAUCTION_REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STKAAVE\",\"outputs\":[{\"internalType\":\"contract IStakedAave\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct DataTypes.BidWithPermitParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"bidWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"claimWonNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"startTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.DistributionData[]\",\"name\":\"distribution\",\"type\":\"tuple[]\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vaultLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"minimumAuctionDuration\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"overtimeWindow\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"treasuryFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"burnPenaltyBps\",\"type\":\"uint16\"}],\"internalType\":\"struct DataTypes.StakingAuctionConfiguration\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"getNftData\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentBid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currentBidder\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"startTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endTimestamp\",\"type\":\"uint40\"}],\"internalType\":\"struct DataTypes.StakingAuctionData\",\"name\":\"auction\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bps\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.DistributionData[]\",\"name\":\"distribution\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"auctioner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.StakingAuctionFullData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultLogic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"treasuryFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"burnPenaltyBps\",\"type\":\"uint16\"},{\"internalType\":\"uint40\",\"name\":\"overtimeWindow\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"minimumAuctionDuration\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"distributionCap\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"reclaimEndedAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newBurnPenaltyBps\",\"type\":\"uint16\"}],\"name\":\"setBurnPenaltyBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newDistributionCap\",\"type\":\"uint8\"}],\"name\":\"setDistributionCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"newMinimumDuration\",\"type\":\"uint40\"}],\"name\":\"setMinimumAuctionDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVaultLogic\",\"type\":\"address\"}],\"name\":\"setNewVaultLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"newOvertimeWindow\",\"type\":\"uint40\"}],\"name\":\"setOvertimeWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newTreasuryFeeBps\",\"type\":\"uint16\"}],\"name\":\"setTreasuryFeeBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StakingAuction","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}