{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\ninterface IERC20{\r\n     function totalSupply() external view returns (uint256);\r\n     function balanceOf(address account) external view returns (uint256);\r\n     function transfer(address recipient, uint256 amount) external returns (bool);\r\n     function allowance(address owner, address spender) external view returns (uint256);\r\n     function approve(address spender, uint256 amount) external returns (bool);\r\n     function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n     event Transfer(address indexed from, address indexed to, uint256 value);\r\n     event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract PlethoriEscrow {\r\n\r\n    address public oldToken;\r\n    address public newToken;\r\n    address public admin;\r\n    \r\n    mapping(address => uint256) public balances;\r\n\r\n\r\n    event Enter(address userAddress,uint256 amount);\r\n    event Claim(address userAddress,uint256 amount);\r\n    event WithdrawOldToken(address pleWallet, uint256 amount);\r\n    event WithdrawNewToken(address pleWallet, uint256 amount);\r\n\r\n    modifier checkAddress(address _oldToken,address _newToken,address _admin) {\r\n      require(_oldToken != address(0) || \r\n      _newToken != address(0) || _admin != address(0),\r\n      'The token address can not be zero.');\r\n      _;\r\n   }\r\n\r\n   modifier onlyOwner{\r\n       require(msg.sender == admin,'The owner is not admin');\r\n       _;\r\n   }\r\n\r\n    \r\n    constructor(address _oldToken,address _newToken,address _admin) \r\n       checkAddress(_oldToken,_newToken,_admin) \r\n    {\r\n        oldToken = _oldToken;\r\n        newToken = _newToken;\r\n        admin = _admin;\r\n    }\r\n\r\n\r\n\r\n    function getOldTokenBalance(address account) internal view returns(uint256){\r\n        return IERC20(oldToken).balanceOf(account);\r\n    }\r\n    \r\n\r\n   \r\n    function enter(uint256 amount) external {\r\n        require(amount > 0,\"The amount can not be zero\");\r\n        uint256 oldTokenBalance = getOldTokenBalance(msg.sender);\r\n        require(amount <= oldTokenBalance,\"Insufficient token amount.\");\r\n        require(IERC20(oldToken).transferFrom(msg.sender, address(this), amount),\r\n        \"Insufficient token allowance\");\r\n        balances[msg.sender] = balances[msg.sender] + amount;\r\n        emit Enter(msg.sender,amount);\r\n \r\n    }\r\n    \r\n    function claim() external {\r\n        require(balances[msg.sender] > 0,\"Insufficient token amount\");\r\n        uint256 amount = balances[msg.sender];\r\n        balances[msg.sender] = 0;\r\n        require(IERC20(newToken).transfer(msg.sender, amount),\r\n        \"Could not transfer amount.\");\r\n        emit Claim(msg.sender,amount);\r\n    }\r\n\r\n\r\n   function withdrawOldToken(uint256 amount,address pleWallet) external onlyOwner{\r\n       require(amount > 0,\"The amount can not be zero.\");\r\n       require(pleWallet != address(0),\"This address can not be zero.\"); \r\n       require(IERC20(oldToken).transfer(pleWallet, amount),\r\n       \"Insufficient token amount.\");\r\n       emit WithdrawOldToken(pleWallet,amount);\r\n   }\r\n   \r\n   function withdrawNewToken(uint256 amount,address pleWallet) external onlyOwner{\r\n       require(amount >0,\"The amount can not be zero.\");\r\n       require(pleWallet != address(0),\"This address can not be zero.\");\r\n       require(IERC20(newToken).transfer(pleWallet, amount),\r\n       \"Insufficient token amount.\");\r\n       emit WithdrawNewToken(pleWallet,amount);\r\n   }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Enter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pleWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawNewToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pleWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawOldToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pleWallet\",\"type\":\"address\"}],\"name\":\"withdrawNewToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pleWallet\",\"type\":\"address\"}],\"name\":\"withdrawOldToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PlethoriEscrow","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000aeeaa9c0ecd8d50ab7fcd159bddad0f52ce360c20000000000000000000000003873965e73d9a21f88e645ce40b7db187fde4931000000000000000000000000553c1060f97b1c95e5950b9574ef472ada595c6b","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://360df653b902152b68a34dc5ba057a2954038a223f80a4e7a8c7c7553a90fae3"}]}