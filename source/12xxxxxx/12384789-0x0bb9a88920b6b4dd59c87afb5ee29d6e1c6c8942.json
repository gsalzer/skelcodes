{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.2.1 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v3.4.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v3.4.0\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/GSN/Context.sol@v3.4.0\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n// File @openzeppelin/contracts/introspection/IERC165.sol@v3.4.0\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.4.0\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v3.4.0\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-erc20_base-5.1.0/contracts/token/ERC20/IERC20.sol@v5.1.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @title ERC20 Token Standard, basic interface\r\n * @dev See https://eips.ethereum.org/EIPS/eip-20\r\n * Note: The ERC-165 identifier for this interface is 0x36372b07.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when tokens are transferred, including zero value transfers.\r\n     * @param _from The account where the transferred tokens are withdrawn from.\r\n     * @param _to The account where the transferred tokens are deposited to.\r\n     * @param _value The amount of tokens being transferred.\r\n     */\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    /**\r\n     * @dev Emitted when a successful call to {IERC20-approve(address,uint256)} is made.\r\n     * @param _owner The account granting an allowance to `_spender`.\r\n     * @param _spender The account being granted an allowance from `_owner`.\r\n     * @param _value The allowance amount being granted.\r\n     */\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    /**\r\n     * @notice Returns the total token supply.\r\n     * @return The total token supply.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns the account balance of another account with address `owner`.\r\n     * @param owner The account whose balance will be returned.\r\n     * @return The account balance of another account with address `owner`.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Transfers `value` amount of tokens to address `to`.\r\n     * @dev Reverts if the message caller's account balance does not have enough tokens to spend.\r\n     * @dev Emits an {IERC20-Transfer} event.\r\n     * @dev Transfers of 0 values are treated as normal transfers and fire the {IERC20-Transfer} event.\r\n     * @param to The account where the transferred tokens will be deposited to.\r\n     * @param value The amount of tokens to transfer.\r\n     * @return True if the transfer succeeds, false otherwise.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @notice Transfers `value` amount of tokens from address `from` to address `to` via the approval mechanism.\r\n     * @dev Reverts if the caller has not been approved by `from` for at least `value`.\r\n     * @dev Reverts if `from` does not have at least `value` of balance.\r\n     * @dev Emits an {IERC20-Transfer} event.\r\n     * @dev Transfers of 0 values are treated as normal transfers and fire the {IERC20-Transfer} event.\r\n     * @param from The account where the transferred tokens will be withdrawn from.\r\n     * @param to The account where the transferred tokens will be deposited to.\r\n     * @param value The amount of tokens to transfer.\r\n     * @return True if the transfer succeeds, false otherwise.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * Sets `value` as the allowance from the caller to `spender`.\r\n     *  IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     *  that someone may use both the old and the new allowance by unfortunate\r\n     *  transaction ordering. One possible solution to mitigate this race\r\n     *  condition is to first reduce the spender's allowance to 0 and set the\r\n     *  desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @dev Reverts if `spender` is the zero address.\r\n     * @dev Emits the {IERC20-Approval} event.\r\n     * @param spender The account being granted the allowance by the message caller.\r\n     * @param value The allowance amount to grant.\r\n     * @return True if the approval succeeds, false otherwise.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * Returns the amount which `spender` is allowed to spend on behalf of `owner`.\r\n     * @param owner The account that has granted an allowance to `spender`.\r\n     * @param spender The account that was granted an allowance by `owner`.\r\n     * @return The amount which `spender` is allowed to spend on behalf of `owner`.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-erc20_base-5.1.0/contracts/token/ERC20/IERC20Detailed.sol@v5.1.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @title ERC20 Token Standard, optional extension: Detailed\r\n * See https://eips.ethereum.org/EIPS/eip-20\r\n * Note: the ERC-165 identifier for this interface is 0xa219a025.\r\n */\r\ninterface IERC20Detailed {\r\n    /**\r\n     * Returns the name of the token. E.g. \"My Token\".\r\n     * Note: the ERC-165 identifier for this interface is 0x06fdde03.\r\n     * @return The name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * Returns the symbol of the token. E.g. \"HIX\".\r\n     * Note: the ERC-165 identifier for this interface is 0x95d89b41.\r\n     * @return The symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * Returns the number of decimals used to display the balances.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract.\r\n     * Note: the ERC-165 identifier for this interface is 0x313ce567.\r\n     * @return The number of decimals used to display the balances.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-erc20_base-5.1.0/contracts/token/ERC20/IERC20Allowance.sol@v5.1.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @title ERC20 Token Standard, optional extension: Allowance\r\n * See https://eips.ethereum.org/EIPS/eip-20\r\n * Note: the ERC-165 identifier for this interface is 0xd5b86388.\r\n */\r\ninterface IERC20Allowance {\r\n    /**\r\n     * Increases the allowance granted by the sender to `spender` by `value`.\r\n     *  This is an alternative to {approve} that can be used as a mitigation for\r\n     *  problems described in {IERC20-approve}.\r\n     * @dev Reverts if `spender` is the zero address.\r\n     * @dev Reverts if `spender`'s allowance overflows.\r\n     * @dev Emits an {IERC20-Approval} event with an updated allowance for `spender`.\r\n     * @param spender The account whose allowance is being increased by the message caller.\r\n     * @param value The allowance amount increase.\r\n     * @return True if the allowance increase succeeds, false otherwise.\r\n     */\r\n    function increaseAllowance(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * Decreases the allowance granted by the sender to `spender` by `value`.\r\n     *  This is an alternative to {approve} that can be used as a mitigation for\r\n     *  problems described in {IERC20-approve}.\r\n     * @dev Reverts if `spender` is the zero address.\r\n     * @dev Reverts if `spender` has an allowance with the message caller for less than `value`.\r\n     * @dev Emits an {IERC20-Approval} event with an updated allowance for `spender`.\r\n     * @param spender The account whose allowance is being decreased by the message caller.\r\n     * @param value The allowance amount decrease.\r\n     * @return True if the allowance decrease succeeds, false otherwise.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-erc20_base-5.1.0/contracts/token/ERC20/IERC20SafeTransfers.sol@v5.1.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @title ERC20 Token Standard, optional extension: Safe Transfers\r\n * Note: the ERC-165 identifier for this interface is 0x53f41a97.\r\n */\r\ninterface IERC20SafeTransfers {\r\n    /**\r\n     * Transfers tokens from the caller to `to`. If this address is a contract, then calls `onERC20Received(address,address,uint256,bytes)` on it.\r\n     * @dev Reverts if `to` is the zero address.\r\n     * @dev Reverts if `value` is greater than the sender's balance.\r\n     * @dev Reverts if `to` is a contract which does not implement `onERC20Received(address,address,uint256,bytes)`.\r\n     * @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` returns a wrong value.\r\n     * @dev Emits an {IERC20-Transfer} event.\r\n     * @param to The address for the tokens to be transferred to.\r\n     * @param amount The amount of tokens to be transferred.\r\n     * @param data Optional additional data with no specified format, to be passed to the receiver contract.\r\n     * @return true.\r\n     */\r\n    function safeTransfer(\r\n        address to,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * Transfers tokens from `from` to another address, using the allowance mechanism.\r\n     *  If this address is a contract, then calls `onERC20Received(address,address,uint256,bytes)` on it.\r\n     * @dev Reverts if `to` is the zero address.\r\n     * @dev Reverts if `value` is greater than `from`'s balance.\r\n     * @dev Reverts if the sender does not have at least `value` allowance by `from`.\r\n     * @dev Reverts if `to` is a contract which does not implement `onERC20Received(address,address,uint256,bytes)`.\r\n     * @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` returns a wrong value.\r\n     * @dev Emits an {IERC20-Transfer} event.\r\n     * @param from The address which owns the tokens to be transferred.\r\n     * @param to The address for the tokens to be transferred to.\r\n     * @param amount The amount of tokens to be transferred.\r\n     * @param data Optional additional data with no specified format, to be passed to the receiver contract.\r\n     * @return true.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-erc20_base-5.1.0/contracts/token/ERC20/IERC20MultiTransfers.sol@v5.1.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @title ERC20 Token Standard, optional extension: Multi Transfers\r\n * Note: the ERC-165 identifier for this interface is 0xd5b86388.\r\n */\r\ninterface IERC20MultiTransfers {\r\n    /**\r\n     * Moves multiple `amounts` tokens from the caller's account to each of `recipients`.\r\n     * @dev Reverts if `recipients` and `amounts` have different lengths.\r\n     * @dev Reverts if one of `recipients` is the zero address.\r\n     * @dev Reverts if the caller has an insufficient balance.\r\n     * @dev Emits an {IERC20-Transfer} event for each individual transfer.\r\n     * @param recipients the list of recipients to transfer the tokens to.\r\n     * @param amounts the amounts of tokens to transfer to each of `recipients`.\r\n     * @return a boolean value indicating whether the operation succeeded.\r\n     */\r\n    function multiTransfer(address[] calldata recipients, uint256[] calldata amounts) external returns (bool);\r\n\r\n    /**\r\n     * Moves multiple `amounts` tokens from an account to each of `recipients`, using the approval mechanism.\r\n     * @dev Reverts if `recipients` and `amounts` have different lengths.\r\n     * @dev Reverts if one of `recipients` is the zero address.\r\n     * @dev Reverts if `from` has an insufficient balance.\r\n     * @dev Reverts if the sender does not have at least the sum of all `amounts` as allowance by `from`.\r\n     * @dev Emits an {IERC20-Transfer} event for each individual transfer.\r\n     * @dev Emits an {IERC20-Approval} event.\r\n     * @param from The address which owns the tokens to be transferred.\r\n     * @param recipients the list of recipients to transfer the tokens to.\r\n     * @param amounts the amounts of tokens to transfer to each of `recipients`.\r\n     * @return a boolean value indicating whether the operation succeeded.\r\n     */\r\n    function multiTransferFrom(\r\n        address from,\r\n        address[] calldata recipients,\r\n        uint256[] calldata amounts\r\n    ) external returns (bool);\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-erc20_base-5.1.0/contracts/token/ERC20/IERC20Metadata.sol@v5.1.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @title ERC20 Token Standard, ERC1046 optional extension: Metadata\r\n * See https://eips.ethereum.org/EIPS/eip-1046\r\n * Note: the ERC-165 identifier for this interface is 0x3c130d90.\r\n */\r\ninterface IERC20Metadata {\r\n    /**\r\n     * Returns a distinct Uniform Resource Identifier (URI) for the token metadata.\r\n     * @return a distinct Uniform Resource Identifier (URI) for the token metadata.\r\n     */\r\n    function tokenURI() external view returns (string memory);\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-erc20_base-5.1.0/contracts/token/ERC20/IERC20Permit.sol@v5.1.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @title ERC20 Token Standard, ERC2612 optional extension: permit – 712-signed approvals\r\n * @dev Interface for allowing ERC20 approvals to be made via ECDSA `secp256k1` signatures.\r\n * See https://eips.ethereum.org/EIPS/eip-2612\r\n * Note: the ERC-165 identifier for this interface is 0x9d8ff7da.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * Sets `value` as the allowance of `spender` over the tokens of `owner`, given `owner` account's signed permit.\r\n     * @dev WARNING: The standard ERC-20 race condition for approvals applies to `permit()` as well: https://swcregistry.io/docs/SWC-114\r\n     * @dev Reverts if `owner` is the zero address.\r\n     * @dev Reverts if the current blocktime is > `deadline`.\r\n     * @dev Reverts if `r`, `s`, and `v` is not a valid `secp256k1` signature from `owner`.\r\n     * @dev Emits an {IERC20-Approval} event.\r\n     * @param owner The token owner granting the allowance to `spender`.\r\n     * @param spender The token spender being granted the allowance by `owner`.\r\n     * @param value The token amount of the allowance.\r\n     * @param deadline The deadline from which the permit signature is no longer valid.\r\n     * @param v Permit signature v parameter\r\n     * @param r Permit signature r parameter.\r\n     * @param s Permis signature s parameter.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * Returns the current permit nonce of `owner`.\r\n     * @param owner the address to check the nonce of.\r\n     * @return the current permit nonce of `owner`.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\r\n     *\r\n     * @dev A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:\r\n     *\r\n     *  keccak256(\r\n     *      abi.encode(\r\n     *          keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n     *          keccak256(bytes(name)),\r\n     *          keccak256(bytes(version)),\r\n     *          chainId,\r\n     *          address(this)))\r\n     *\r\n     *  where\r\n     *   - `name` (string) is the ERC-20 token name.\r\n     *   - `version` (string) refers to the ERC-20 token contract version.\r\n     *   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.\r\n     *   - `verifyingContract` (address) is the ERC-20 token contract address.\r\n     *\r\n     * @return the EIP-712 encoded hash struct of the domain-specific information for permits.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-erc20_base-5.1.0/contracts/token/ERC20/IERC20Receiver.sol@v5.1.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @title ERC20 Token Standard, Receiver\r\n * See https://eips.ethereum.org/EIPS/eip-20\r\n * Note: the ERC-165 identifier for this interface is 0x4fc35859.\r\n */\r\ninterface IERC20Receiver {\r\n    /**\r\n     * Handles the receipt of ERC20 tokens.\r\n     * @param sender The initiator of the transfer.\r\n     * @param from The address which transferred the tokens.\r\n     * @param value The amount of tokens transferred.\r\n     * @param data Optional additional data with no specified format.\r\n     * @return bytes4 `bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))`\r\n     */\r\n    function onERC20Received(\r\n        address sender,\r\n        address from,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-erc20_base-5.1.0/contracts/token/ERC20/ERC20.sol@v5.1.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n */\r\ncontract ERC20 is IERC165, Context, IERC20, IERC20Detailed, IERC20Metadata, IERC20Allowance, IERC20MultiTransfers, IERC20SafeTransfers, IERC20Permit {\r\n    using Address for address;\r\n\r\n    // bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))\r\n    bytes4 internal constant _ERC20_RECEIVED = 0x4fc35859;\r\n\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\")\r\n    bytes32 internal constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n\r\n    // solhint-disable-next-line var-name-mixedcase\r\n    bytes32 public immutable override DOMAIN_SEPARATOR;\r\n\r\n    mapping(address => uint256) public override nonces;\r\n\r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8 internal immutable _decimals;\r\n    string internal _tokenURI;\r\n\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n    uint256 internal _totalSupply;\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals,\r\n        string memory version,\r\n        string memory tokenURI\r\n    ) internal {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n        _tokenURI = tokenURI;\r\n\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes(version)),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    /////////////////////////////////////////// ERC165 ///////////////////////////////////////\r\n\r\n    /// @dev See {IERC165-supportsInterface}.\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return\r\n            interfaceId == type(IERC165).interfaceId ||\r\n            interfaceId == type(IERC20).interfaceId ||\r\n            interfaceId == type(IERC20Detailed).interfaceId ||\r\n            interfaceId == 0x06fdde03 || // bytes4(keccak256(\"name()\"))\r\n            interfaceId == 0x95d89b41 || // bytes4(keccak256(\"symbol()\"))\r\n            interfaceId == 0x313ce567 || // bytes4(keccak256(\"decimals()\"))\r\n            interfaceId == type(IERC20Metadata).interfaceId ||\r\n            interfaceId == type(IERC20Allowance).interfaceId ||\r\n            interfaceId == type(IERC20MultiTransfers).interfaceId ||\r\n            interfaceId == type(IERC20SafeTransfers).interfaceId ||\r\n            interfaceId == type(IERC20Permit).interfaceId;\r\n    }\r\n\r\n    /////////////////////////////////////////// ERC20Detailed ///////////////////////////////////////\r\n\r\n    /// @dev See {IERC20Detailed-name}.\r\n    function name() public view override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /// @dev See {IERC20Detailed-symbol}.\r\n    function symbol() public view override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /// @dev See {IERC20Detailed-decimals}.\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /////////////////////////////////////////// ERC20Metadata ///////////////////////////////////////\r\n\r\n    /// @dev See {IERC20Metadata-tokenURI}.\r\n    function tokenURI() public view override returns (string memory) {\r\n        return _tokenURI;\r\n    }\r\n\r\n    /////////////////////////////////////////// ERC20 ///////////////////////////////////////\r\n\r\n    /// @dev See {IERC20-totalSupply}.\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /// @dev See {IERC20-balanceOf}.\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /// @dev See {IERC20-allowance}.\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        if (owner == spender) {\r\n            return type(uint256).max;\r\n        }\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /// @dev See {IERC20-approve}.\r\n    function approve(address spender, uint256 value) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, value);\r\n        return true;\r\n    }\r\n\r\n    /////////////////////////////////////////// ERC20 Allowance ///////////////////////////////////////\r\n\r\n    /// @dev See {IERC20Allowance-increaseAllowance}.\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual override returns (bool) {\r\n        require(spender != address(0), \"ERC20: zero address\");\r\n        address owner = _msgSender();\r\n        uint256 allowance_ = _allowances[owner][spender];\r\n        uint256 newAllowance = allowance_ + addedValue;\r\n        require(newAllowance >= allowance_, \"ERC20: allowance overflow\");\r\n        _allowances[owner][spender] = newAllowance;\r\n        emit Approval(owner, spender, newAllowance);\r\n        return true;\r\n    }\r\n\r\n    /// @dev See {IERC20Allowance-decreaseAllowance}.\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual override returns (bool) {\r\n        require(spender != address(0), \"ERC20: zero address\");\r\n        _decreaseAllowance(_msgSender(), spender, subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    /// @dev See {IERC20-transfer}.\r\n    function transfer(address to, uint256 value) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), to, value);\r\n        return true;\r\n    }\r\n\r\n    /// @dev See {IERC20-transferFrom}.\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) public virtual override returns (bool) {\r\n        _transferFrom(_msgSender(), from, to, value);\r\n        return true;\r\n    }\r\n\r\n    /////////////////////////////////////////// ERC20MultiTransfer ///////////////////////////////////////\r\n\r\n    /// @dev See {IERC20MultiTransfer-multiTransfer(address[],uint256[])}.\r\n    function multiTransfer(address[] calldata recipients, uint256[] calldata amounts) external virtual override returns (bool) {\r\n        uint256 length = recipients.length;\r\n        require(length == amounts.length, \"ERC20: inconsistent arrays\");\r\n        address sender = _msgSender();\r\n        for (uint256 i = 0; i != length; ++i) {\r\n            _transfer(sender, recipients[i], amounts[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev See {IERC20MultiTransfer-multiTransferFrom(address,address[],uint256[])}.\r\n    function multiTransferFrom(\r\n        address from,\r\n        address[] calldata recipients,\r\n        uint256[] calldata values\r\n    ) external virtual override returns (bool) {\r\n        uint256 length = recipients.length;\r\n        require(length == values.length, \"ERC20: inconsistent arrays\");\r\n        uint256 total;\r\n        for (uint256 i = 0; i != length; ++i) {\r\n            uint256 value = values[i];\r\n            _transfer(from, recipients[i], value);\r\n            total += value; // cannot overflow, else it would mean thann from's balance underflowed first\r\n        }\r\n\r\n        _decreaseAllowance(from, _msgSender(), total);\r\n\r\n        return true;\r\n    }\r\n\r\n    /////////////////////////////////////////// ERC20SafeTransfers ///////////////////////////////////////\r\n\r\n    /// @dev See {IERC20Safe-safeTransfer(address,uint256,bytes)}.\r\n    function safeTransfer(\r\n        address to,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external virtual override returns (bool) {\r\n        address sender = _msgSender();\r\n        _transfer(sender, to, amount);\r\n        if (to.isContract()) {\r\n            require(IERC20Receiver(to).onERC20Received(sender, sender, amount, data) == _ERC20_RECEIVED, \"ERC20: transfer refused\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @dev See {IERC20Safe-safeTransferFrom(address,address,uint256,bytes)}.\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external virtual override returns (bool) {\r\n        address sender = _msgSender();\r\n        _transferFrom(sender, from, to, amount);\r\n        if (to.isContract()) {\r\n            require(IERC20Receiver(to).onERC20Received(sender, from, amount, data) == _ERC20_RECEIVED, \"ERC20: transfer refused\");\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /////////////////////////////////////////// ERC20Permit ///////////////////////////////////////\r\n\r\n    /// @dev See {IERC2612-permit(address,address,uint256,uint256,uint8,bytes32,bytes32)}.\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external virtual override {\r\n        require(owner != address(0), \"ERC20: zero address owner\");\r\n        require(block.timestamp <= deadline, \"ERC20: expired permit\");\r\n        bytes32 hashStruct = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\r\n        bytes32 hash = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, hashStruct));\r\n        address signer = ecrecover(hash, v, r, s);\r\n        require(signer != address(0) && signer == owner, \"ERC20: invalid permit\");\r\n        _approve(owner, spender, value);\r\n    }\r\n\r\n    /////////////////////////////////////////// Internal Functions ///////////////////////////////////////\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        require(spender != address(0), \"ERC20: zero address\");\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _decreaseAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) internal {\r\n        if (owner == spender) return;\r\n\r\n        uint256 allowance_ = _allowances[owner][spender];\r\n        if (allowance_ != type(uint256).max && subtractedValue != 0) {\r\n            // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\r\n            uint256 newAllowance = allowance_ - subtractedValue;\r\n            require(newAllowance <= allowance_, \"ERC20: insufficient allowance\");\r\n            _allowances[owner][spender] = newAllowance;\r\n            allowance_ = newAllowance;\r\n        }\r\n        emit Approval(owner, spender, allowance_);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC20: zero address\");\r\n        uint256 balance = _balances[from];\r\n        require(balance >= value, \"ERC20: insufficient balance\");\r\n        _balances[from] = balance - value;\r\n        _balances[to] += value;\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function _transferFrom(\r\n        address sender,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _decreaseAllowance(from, sender, value);\r\n        _transfer(from, to, value);\r\n    }\r\n\r\n    function _mint(address to, uint256 value) internal virtual {\r\n        require(to != address(0), \"ERC20: zero address\");\r\n        uint256 supply = _totalSupply;\r\n        uint256 newSupply = supply + value;\r\n        require(newSupply >= supply, \"ERC20: supply overflow\");\r\n        _totalSupply = newSupply;\r\n        _balances[to] += value; // balance cannot overflow if supply does not\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _batchMint(address[] memory recipients, uint256[] memory values) internal virtual {\r\n        uint256 length = recipients.length;\r\n        require(length == values.length, \"ERC20: inconsistent arrays\");\r\n        uint256 supply = _totalSupply;\r\n        for (uint256 i = 0; i != length; ++i) {\r\n            address to = recipients[i];\r\n            require(to != address(0), \"ERC20: zero address\");\r\n            uint256 value = values[i];\r\n            uint256 newSupply = supply + value;\r\n            require(newSupply >= supply, \"ERC20: supply overflow\");\r\n            supply = newSupply;\r\n            _balances[to] += value; // balance cannot overflow if supply does not\r\n            emit Transfer(address(0), to, value);\r\n        }\r\n        _totalSupply = supply;\r\n    }\r\n\r\n    function _burn(address from, uint256 value) internal virtual {\r\n        uint256 balance = _balances[from];\r\n        require(balance >= value, \"ERC20: insufficient balance\");\r\n        _balances[from] = balance - value;\r\n        _totalSupply -= value; // will not underflow if balance does not\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _burnFrom(address from, uint256 value) internal virtual {\r\n        _decreaseAllowance(from, _msgSender(), value);\r\n        _burn(from, value);\r\n    }\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-erc20_base-5.1.0/contracts/token/ERC20/IERC20Burnable.sol@v5.1.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n/**\r\n * @title ERC20 Token Standard, optional extension: Burnable\r\n * Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\r\n */\r\ninterface IERC20Burnable {\r\n    /**\r\n     * Burns `value` tokens from the message sender, decreasing the total supply.\r\n     * @dev Reverts if the sender owns less than `value` tokens.\r\n     * @dev Emits a {IERC20-Transfer} event with `_to` set to the zero address.\r\n     * @param value the amount of tokens to burn.\r\n     * @return a boolean value indicating whether the operation succeeded.\r\n     */\r\n    function burn(uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * Burns `value` tokens from `from`, using the allowance mechanism and decreasing the total supply.\r\n     * @dev Reverts if `from` owns less than `value` tokens.\r\n     * @dev Reverts if the message sender is not approved by `from` for at least `value` tokens.\r\n     * @dev Emits a {IERC20-Transfer} event with `_to` set to the zero address.\r\n     * @dev Emits a {IERC20-Approval} event (non-standard).\r\n     * @param from the account to burn the tokens from.\r\n     * @param value the amount of tokens to burn.\r\n     * @return a boolean value indicating whether the operation succeeded.\r\n     */\r\n    function burnFrom(address from, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\n// File @animoca/ethereum-contracts-erc20_base-5.1.0/contracts/token/ERC20/ERC20Burnable.sol@v5.1.0\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\n/**\r\n * @title ERC20 Fungible Token Contract, burnable version.\r\n */\r\ncontract ERC20Burnable is ERC20, IERC20Burnable {\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals,\r\n        string memory version,\r\n        string memory tokenURI\r\n    ) public ERC20(name, symbol, decimals, version, tokenURI) {}\r\n\r\n    /// @dev See {IERC165-supportsInterface}.\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC20Burnable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /// @dev See {IERC20Burnable-burn(uint256)}.\r\n    function burn(uint256 amount) public virtual override returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev See {IERC20Burnable-burnFrom(address,uint256)}.\r\n    function burnFrom(address from, uint256 value) public virtual override returns (bool) {\r\n        _burnFrom(from, value);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solc-0.6/token/ERC20/TOWERChest.sol\r\n\r\npragma solidity 0.6.8;\r\n\r\n\r\n/**\r\n * @title TOWERChest\r\n * A burnable ERC-20 token contract for Crazy Defense Heroes (CDH). TOWER Chests are tokens that can be burned to obtain CDH NFTs.\r\n * @dev TWR.BRNZ for Bronze chests.\r\n * @dev TWR.SLVR for Silver chests.\r\n * @dev TWR.GOLD for Gold chests.\r\n */\r\ncontract TOWERChest is ERC20Burnable, Ownable {\r\n    /**\r\n     * Constructor.\r\n     * @param name Name of the token.\r\n     * @param symbol Symbol of the token.\r\n     * @param decimals Number of decimals the token uses.\r\n     * @param version Signing domain version used for IERC2612 permit signatures.\r\n     * @param tokenURI The URI for the token metadata.\r\n     * @param holder Account to mint the initial total supply to.\r\n     * @param totalSupply Total supply amount to mint to the message caller.\r\n     */\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals,\r\n        string memory version,\r\n        string memory tokenURI,\r\n        address holder,\r\n        uint256 totalSupply\r\n    ) public ERC20Burnable(name, symbol, decimals, version, tokenURI) {\r\n        _mint(holder, totalSupply);\r\n    }\r\n\r\n    /**\r\n     * Updates the token metadata URI.\r\n     * @dev Reverts if the sender is not the contract owner.\r\n     * @param tokenURI_ the new token metdata URI.\r\n     */\r\n    function updateTokenURI(string calldata tokenURI_) external {\r\n        require(_msgSender() == owner(), \"TOWERChest: not the owner\");\r\n        _tokenURI = tokenURI_;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"multiTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI_\",\"type\":\"string\"}],\"name\":\"updateTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TOWERChest","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000861c2f7a406ccb81b49501f5559d9f77b0bd3b9a0000000000000000000000000000000000000000000000bdbc41e0348b300000000000000000000000000000000000000000000000000000000000000000001242726f6e7a6520544f574552204368657374000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000085457522e42524e5a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005168747470733a2f2f6173736574732e6372617a79646566656e73656865726f65732e636f6d2f6f70656e7365612f6d657461646174612f62726f6e7a655f63686573745f6d657461646174612e6a736f6e000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://18243b3c949babba113da7c87b053c857382feced213b67bc1c169328424db92"}]}