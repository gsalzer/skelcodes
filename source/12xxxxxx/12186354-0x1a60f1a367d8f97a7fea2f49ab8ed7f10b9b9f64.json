{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.6.6;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface UpgradedPriceAble {\r\n    function getAmountsOutToken(uint value, uint8 rate) external view returns (uint balance);\r\n    function getAmountsOutEth(uint value, uint8 rate) external view returns (uint balance);\r\n}\r\n\r\n\r\ninterface ERC20 {\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external;\r\n//    function approve(address spender, uint256 value) public;\r\n//    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external;\r\n//    event Transfer(address indexed from, address indexed to, uint256 value);\r\n//    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract UsdgMarket is Ownable{\r\n    using SafeMath for uint;\r\n\r\n    uint oneEth = 1000000000000000000;\r\n    uint8  public buyTokenRate = 100;\r\n    uint8  public saleTokenRate = 100;\r\n\r\n    IUniswapV2Router01 public uniswapRouter;\r\n    ERC20 public usdg;\r\n\r\n    address[] pathEth2Usdg;\r\n    address public upgradedAddress;\r\n    bool public upgraded = false;\r\n\r\n    event BuyToken(address indexed from,uint inValue, uint outValue);\r\n    event SaleToken(address indexed from,uint inValue, uint outValue);\r\n    event GovWithdrawEth(address indexed to, uint256 value);\r\n    event GovWithdrawToken(address indexed to, uint256 value);\r\n\r\n    modifier ensure(uint deadline) {\r\n        require(deadline >= block.timestamp, 'Market: EXPIRED');\r\n        _;\r\n    }\r\n\r\n    constructor(address _usdg, address _usdt, address _uniswap)public {\r\n        _setPath(_usdg,_usdt,_uniswap);\r\n    }\r\n\r\n    function _setPath(address _usdg, address _usdt,address _uniswap)private {\r\n        uniswapRouter = IUniswapV2Router01(_uniswap);\r\n        address _weth = uniswapRouter.WETH();\r\n        usdg = ERC20(_usdg);\r\n        pathEth2Usdg.push(_weth);\r\n        pathEth2Usdg.push(_usdt);\r\n    }\r\n\r\n    function getEthPrice()public view returns (uint balance) {\r\n        uint[] memory amounts = uniswapRouter.getAmountsOut( oneEth, pathEth2Usdg);\r\n        return amounts[1];\r\n    }\r\n    function _getAmountsOutToken(uint value, uint8 rate) private view returns (uint balance) {\r\n        uint rs = getEthPrice();  \r\n        rs = rs.mul(value).div(oneEth);\r\n        if(rate > 0){\r\n            rs = rs.mul(rate).div(100);\r\n        }\r\n        rs = rs.mul(1000); \r\n        return rs;\r\n    }\r\n\r\n    function _getAmountsOutEth(uint value, uint8 rate) private view returns (uint balance) {\r\n        uint ePrice = getEthPrice();   \r\n        uint uPrice = oneEth.div(ePrice);  \r\n        uint rs = uPrice.mul(value);\r\n        if(rate > 0){\r\n            rs = rs.mul(rate).div(100);\r\n        }\r\n        rs = rs.div(1000); \r\n        return rs;\r\n    }\r\n\r\n    function getAmountsOutToken(uint _value) public view returns (uint balance) {\r\n        uint amount;\r\n        if (upgraded) {\r\n            amount = UpgradedPriceAble(upgradedAddress).getAmountsOutToken(_value,buyTokenRate);\r\n        } else {\r\n            amount = _getAmountsOutToken(_value,buyTokenRate);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function getAmountsOutEth(uint _value) public view returns (uint balance) {\r\n        uint amount;\r\n        if (upgraded) {\r\n            amount = UpgradedPriceAble(upgradedAddress).getAmountsOutToken(_value,saleTokenRate);\r\n        } else {\r\n            amount = _getAmountsOutEth(_value,saleTokenRate);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function buyTokenSafe(uint amountOutMin,  uint deadline)payable ensure(deadline) public {\r\n        require(msg.value > 0, \"!value\");\r\n        uint amount = getAmountsOutToken(msg.value);\r\n        require(amount >= amountOutMin, 'INSUFFICIENT_OUTPUT_AMOUNT');\r\n        uint balanced = usdg.balanceOf(address(this));\r\n        require(balanced >= amount, \"!contract balanced\");\r\n        usdg.transfer(msg.sender, amount);\r\n        BuyToken(msg.sender,msg.value, amount);\r\n    }\r\n\r\n    function saleTokenSafe(uint256 _value,uint amountOutMin,  uint deadline) ensure(deadline) public {\r\n        require(_value > 0, \"!value\");\r\n        uint amount = getAmountsOutEth(_value);\r\n        require(amount >= amountOutMin, 'INSUFFICIENT_OUTPUT_AMOUNT');\r\n        msg.sender.transfer(amount);\r\n        uint allowed = usdg.allowance(msg.sender,address(this));\r\n        uint balanced = usdg.balanceOf(msg.sender);\r\n        require(allowed >= _value, \"!allowed\");\r\n        require(balanced >= _value, \"!balanced\");\r\n        usdg.transferFrom( msg.sender,address(this), _value);\r\n        SaleToken(msg.sender,_value, amount);\r\n    }\r\n\r\n    function buyToken()payable  public {\r\n        require(msg.value > 0, \"!value\");\r\n        uint amount = getAmountsOutToken(msg.value);\r\n        uint balanced = usdg.balanceOf(address(this));\r\n        require(balanced >= amount, \"!contract balanced\");\r\n        usdg.transfer(msg.sender, amount);\r\n        BuyToken(msg.sender,msg.value, amount);\r\n    }\r\n\r\n    function saleToken(uint256 _value) public {\r\n        require(_value > 0, \"!value\");\r\n        uint amount = getAmountsOutEth(_value);\r\n        msg.sender.transfer(amount);\r\n        uint allowed = usdg.allowance(msg.sender,address(this));\r\n        uint balanced = usdg.balanceOf(msg.sender);\r\n        require(allowed >= _value, \"!allowed\");\r\n        require(balanced >= _value, \"!balanced\");\r\n        usdg.transferFrom( msg.sender,address(this), _value);\r\n        SaleToken(msg.sender,_value, amount);\r\n    }\r\n\r\n    function govWithdrawToken(uint256 _amount)onlyOwner public {\r\n        require(_amount > 0, \"!zero input\");\r\n\r\n        usdg.transfer( msg.sender, _amount);\r\n        emit GovWithdrawToken(msg.sender, _amount);\r\n    }\r\n\r\n    function govWithdrawEth(uint256 _amount)onlyOwner public {\r\n        require(_amount > 0, \"!zero input\");\r\n        msg.sender.transfer(_amount);\r\n        emit GovWithdrawEth(msg.sender, _amount);\r\n    }\r\n\r\n    function changeRates(uint8 _buyTokenRate, uint8 _saleTokenRate)onlyOwner public {\r\n        require(201 > buyTokenRate, \"_buyTokenRate big than 200\");\r\n        require(201 > _saleTokenRate, \"_saleTokenRate big than 200\");\r\n        buyTokenRate = _buyTokenRate;\r\n        saleTokenRate = _saleTokenRate;\r\n    }\r\n\r\n    fallback() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswap\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outValue\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GovWithdrawEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GovWithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outValue\",\"type\":\"uint256\"}],\"name\":\"SaleToken\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokenRate\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"buyTokenSafe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_buyTokenRate\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_saleTokenRate\",\"type\":\"uint8\"}],\"name\":\"changeRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getAmountsOutEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getAmountsOutToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"govWithdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"govWithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"saleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleTokenRate\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"saleTokenSafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgraded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdg\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UsdgMarket","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000bd62253c8033f3907c0800780662eab7378a4b96000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://edb33c59c4d0b5c31c194786373b17932929909c2b6daea6c2d019cf7455bcf9"}]}