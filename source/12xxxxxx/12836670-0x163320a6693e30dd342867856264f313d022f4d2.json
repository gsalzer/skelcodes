{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n                                                    ......''''......\r\n                                            .',:cldxxkOOO0kddk0OOOkxxdlc:;'.\r\n                                       .,:lxkO00000000000k, .;k00000000000Okxl:,.\r\n                                   .;ldO0000000000000000O;    :O0000000000000000Odl;.\r\n                                ':dk00000000000000000000Ol.  .o000000000000000000000kd:'\r\n                             .:dO0000000000000000000000000o;:d0000000000000000000000000Od:.\r\n                           ,ok000000000000000000000000000000000000000000000000000000000000ko,\r\n                        .;dO0000000000000000000000000000000000000000000000000000000000000000Od;.\r\n                       ;d0000000000000000000000000000000000000000000000000000000000000000000000d;\r\n                     'dO000000000000000000000000000000000000000000000000000000000000000000000000Od'\r\n                   .cO0000000000000000000000000000000000000000000000000000000000000000000000000000Oc.\r\n                  'd00000000000000000000000000000000000000000000000000000000000000000000000000000000d'\r\n                 ;k0000000000000000000000000000000000000000000000000000000000000000000000000000000000k;\r\n                cO000000000000000000000000000000000000000000000000000000000000000000000000000000000000Oc\r\n               cO00000000000000000000000000000000000000000000000000000000000000000000000000000000000000Oc\r\n              :O0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000O:\r\n             ;k000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000k;\r\n            .x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000x.\r\n            l0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000l\r\n           'k0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000k'\r\n           c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c\r\n          .x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000x.\r\n          ,k00000000000000000000000000000000000OOOO000000000000000000000000000000000000000000000000000000000k,\r\n          ;O000OO00000000000000000000000000000x,...'',,;;;:::cccclloooddxxkkkOOOO000000000000000000000000000O;\r\n          :0ko:'.,ldO0000000000000000000000000d.                         ........'',,;;;::ccccllooodddxxkkkOO:\r\n          cOd;.   .:k0000000000000000000000000d.                                        .......'',,;:cclodxxk:\r\n          :000kocok000000000000000000000000000d.                ...'',,;;;::cccclloodddxxkkkOOOO0000000000000:\r\n          ;O0000000000000000000000000000000000koccllood;       .o0O00000000000000000000000000000000000000000O;\r\n          'k0000000000000000000000000000000000000000000d.      .x0000000000000000000000000000000000000000000k'\r\n          .o0000000000000000000000000000000000000000000x.      ,k0000000000000000000000000000000000000000000o.\r\n           ;O000000000000000000000000000000000000000000k,      ;O000000000000000000000000000000000000000000O;\r\n           .d000000000000000000000000000000000000000000O;      c0000000000000000000000000000000000000000000d.\r\n            ;O000000000000000000000000000000000000000000c     .o000000000000000000000000000000000000000000O;\r\n            .l000000000000000000000000000000000000000000o.    .x000000000000000000000000000000000000000000l.\r\n             .d00000000000000000000000000000000000000000x.    'k00000000000000000000000000000000000000000d.\r\n              .x0000000000000000000000000000000000000000k'    ;O0000000000000000000000000000000000000000x.\r\n               'x000000000000000000000000000000000000000O;    c0000000000000000000000000000000000000000x'\r\n                .d000000000000000000000000000000000000000c   .o000000000000000000000000000000000000000d.\r\n                 .lO0000000000000000000000000000000000000o.  .d0000000000000000000000000000000000000Ol.\r\n                   ;k000000000000000000000000000000000000d.  'k000000000000000000000000000000000000k;\r\n                    .oO0000000000000000000000000000000000k'  ;O0000000000000000000000000000000000Oo.\r\n                      ,d000000000000000000000000000000000O,  :0000000000000000000000000000000000d,\r\n                       .;x00000000000000000000000000000000:..l00000000000000000000000000000000x;.\r\n                         .;dO00000000000000000000000000000l.,d00000000000000000000000000000Od;.\r\n                            'lk000000000000000000000000000d;cx000000000000000000000000000kl'\r\n                              .,lk000000000000000000000000xodk000000000000000000000000kl,.\r\n                                 .,cdO00000000000000000000OkOO00000000000000000000Odc,.\r\n                                     .;cdkO0000000000000000000000000000000000Okdc;.\r\n                                         .';cldkO0000000000000000000000Okdlc;'.\r\n                                               ..',;:cclllloollllcc:;,'..\r\n                           ':ccc,\r\n                         .l0KKKK0d.\r\n                         'kK0KK0K0;\r\n     ..'.'.'.            .o0KKKKKx.\r\n     :000000O,             ,cllc;.\r\n     :0K000KO,\r\n     c0K0K0KO,                                        .....              .....                        ......\r\n.cdddk000KKK0kdddddc.     :ddddddc.     .ldddddl. ,coxkOOOkdol;.     'coxkOOOkdl;.               .;loxkOOOkkxoc,.\r\n.xK0KK00KKKKKK0KK0Kd.    .oK0KK0Kx.     'OK0K0K0dx0KK0000000KKKOc. ,x0KK0000000KKOl.          .:dOKKK00000000KK0Oo,\r\n.kKKKKK0KKKKKKKKKKKd.    .oK0KK0Kx.     'OK0KK0KK00KKKKKK00KKK0K0xdOK0KKKKKK000K00Kx'       .:kKK0K0KKKKKKKK00K00K0d'\r\n.;cccx0K0K0K0dccccc;     .oK0KK0Kx.     'OK0KKK0K0xl;,,:oOK0KK000KKK0kl;,,:oOKK00K0Kd.     .o0K0K0K0xl:,,,:lk0K0KK0KO;\r\n     :0K0K0KO,           .oK0KK0Kx.     'OK0KK0K0l.      'xK00KKK0K0l.      .dK0000K0;    .l000KK0x,.       .:kK0KK0KO,\r\n     :0K0K0KO,           .oK0KK0Kx.     'OK0KK0Kd.        ,OKK0KK0Kd.        ,OK0KK0Kl    ,OK000Kk,...........:OK0KK0Ko.\r\n     :0K0K0KO,           .oK0KK0Kx.     'OK0KKKKc         'kXK0000Kl         .xK0KK0Ko.   :0K000K0kkkkkkkkkkkkO0K0000Kx.\r\n     :0K0K0KO,           .oK0KK0Kx.     'OK0KKKKc         'kXK0KK0Kl         .xK0KK0Ko.   :0K0K0K000000000000000000000x.\r\n     :0K000KO,           .oK0KK0Kx.     'OK0KKK0c         'kXK00K0Kl         .xK0KK0Ko.   'OK0K0KOc....................\r\n     :0K0K0K0l.          .oK0KK0Kx.     'OK0KKKKc         'kXK00K0Kl         .xK0KK0Ko.    l0K0K0Kk:.          'cl'\r\n     ,OK0KK0K0xc;,,:.    .oK0KK0Kx.     'OK0KKKKc         'kXK0KK0Kl         .xK0KK0Ko.    .l0K0K0K0ko:,,',;:lx0KKOc.\r\n      c0K0KKK0KKKKKKc    .oK0KK0Kx.     'OK0KKK0c         'kXK0KK0Kl         .xK0KK0Ko.      ;x0K0000KKK000KKK00K000x,\r\n       ;k0KK0000000Kc    .oK0KK0Kx.     'OK00000c         'kXK0K00Kl         .xK0000Ko.       .;oO0KK000000000KKK0Oo:.\r\n        .,cdxkOOOkxo'     :ddddddc.     .ldddddd,         .lxdddddd;         .cdddddd:           .,codxkOOOkkxol:,.\r\n            ..''...                                                                                   ...''...\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.1;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n    * @dev Returns the token name.\r\n    */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the erc token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        // extcodesize checks the size of the code stored in an address, and\r\n        // address returns the current address. Since the code is still not\r\n        // deployed when running a constructor, any checks on its code size will\r\n        // yield zero, making it an effective way to detect if a contract is\r\n        // under construction or not.\r\n        address self = address(this);\r\n        uint256 cs;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {cs := extcodesize(self)}\r\n        return cs == 0;\r\n    }\r\n}\r\n\r\ncontract ERC20TokenImplementation is Context, IERC20, Initializable {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address => uint256) internal _balances;\r\n    mapping(address => mapping(address => uint256)) internal _allowances;\r\n    uint256 internal _totalSupply;\r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8 internal _decimals;\r\n\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    bool internal _mintable;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Leaves the contract without owner. It will not be possible to call\r\n    * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n    *\r\n    * NOTE: Renouncing ownership will leave the contract without an owner,\r\n    * thereby removing any functionality that is only available to the owner.\r\n    */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns if the token is mintable or not\r\n     */\r\n    function mintable() external view returns (bool) {\r\n        return _mintable;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the erc token owner.\r\n     */\r\n    function getOwner() external override view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external override view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external override view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the token name.\r\n    */\r\n    function name() external override view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-totalSupply}.\r\n     */\r\n    function totalSupply() external override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) external override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) external override view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {ERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {ERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\r\n     * the total supply.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `msg.sender` must be the token owner\r\n     * - `_mintable` must be true\r\n     */\r\n    function mint(uint256 amount) public onlyOwner returns (bool) {\r\n        require(_mintable, \"this token is not mintable\");\r\n        _mint(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n   * @dev Burn `amount` tokens and decreasing the total supply.\r\n   */\r\n    function burn(uint256 amount) public returns (bool) {\r\n        _burn(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\ncontract Time is ERC20TokenImplementation {\r\n\r\n    /**\r\n     * @dev TimeZones are candidates possible to be yield farmed\r\n     */\r\n\r\n    function _maxInt() private pure returns (uint256) {\r\n        return 2 ** 256 - 1;\r\n    }\r\n\r\n    function _secondsInDay() private pure returns (uint256) {\r\n        return 86400;\r\n    }\r\n\r\n    struct TimeZone {\r\n        uint256 index;\r\n        string id;\r\n        string description;\r\n        address contractAddress;\r\n    }\r\n\r\n    mapping(string => TimeZone) private _timeZoneMap;\r\n    string[] private _timeZoneKeys;\r\n\r\n\r\n    function _upsertTimeZone(string calldata id, string calldata description, address contractAddress) private onlyOwner returns (bool) {\r\n        TimeZone storage timeZoneToUpsert = _timeZoneMap[id];\r\n        timeZoneToUpsert.id = id;\r\n        timeZoneToUpsert.description = description;\r\n        timeZoneToUpsert.contractAddress = contractAddress;\r\n        if (timeZoneToUpsert.index > 0) {// entry exists\r\n            // do nothing\r\n            return true;\r\n        } else {// new entry\r\n            _timeZoneKeys.push(id);\r\n            uint256 keyListIndex = _timeZoneKeys.length - 1;\r\n            timeZoneToUpsert.index = keyListIndex + 1;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _removeTimeZone(string calldata id) private onlyOwner returns (bool) {\r\n        TimeZone storage timeZoneToRemove = _timeZoneMap[id];\r\n        // entry not exist\r\n        require(timeZoneToRemove.index != 0, \"Provided TimeZone does not exist!\");\r\n        // invalid index value\r\n        require(timeZoneToRemove.index <= _timeZoneKeys.length, \"Provided TimeZone index is invalid!\");\r\n\r\n        // Move an last element of array into the vacated key slot.\r\n        uint256 keyListIndex = timeZoneToRemove.index - 1;\r\n        uint256 keyListLastIndex = _timeZoneKeys.length - 1;\r\n        _timeZoneMap[_timeZoneKeys[keyListLastIndex]].index = keyListIndex + 1;\r\n        _timeZoneKeys[keyListIndex] = _timeZoneKeys[keyListLastIndex];\r\n        _timeZoneKeys.pop();\r\n        delete _timeZoneMap[id];\r\n        return true;\r\n    }\r\n\r\n    function _timeZonesSize() private view returns (uint256) {\r\n        return uint256(_timeZoneKeys.length);\r\n    }\r\n\r\n    function _timeZoneExists(string calldata id) private view returns (bool) {\r\n        return _timeZoneMap[id].index > 0;\r\n    }\r\n\r\n    function _timeZoneById(string calldata id) private view returns (TimeZone memory) {\r\n        return _timeZoneMap[id];\r\n    }\r\n\r\n    /**\r\n     * @dev Voting proportion of an account for which time zone to farm from\r\n     */\r\n    struct VotingProportion {\r\n        uint256 index;\r\n        string[] zoneIds;\r\n        uint256[] proportions;\r\n    }\r\n\r\n    mapping(address => VotingProportion) private _votingProportionMap;\r\n    address[] private _votingProportionKeys;\r\n\r\n    function _upsertVotingProportion(address key, string[] memory zoneIds, uint256[] memory proportions) private returns (bool) {\r\n        VotingProportion storage votingProportionToUpsert = _votingProportionMap[key];\r\n        votingProportionToUpsert.zoneIds = zoneIds;\r\n        votingProportionToUpsert.proportions = proportions;\r\n        if (votingProportionToUpsert.index > 0) {// entry exists\r\n            // do nothing\r\n            return true;\r\n        } else {// new entry\r\n            _votingProportionKeys.push(key);\r\n            uint256 keyListIndex = _votingProportionKeys.length - 1;\r\n            votingProportionToUpsert.index = keyListIndex + 1;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _removeVotingProportion(address key) private returns (bool) {\r\n        VotingProportion storage votingProportionToRemove = _votingProportionMap[key];\r\n        // entry not exist\r\n        require(votingProportionToRemove.index != 0, \"Provided voting proportion does not exist!\");\r\n        // invalid index value\r\n        require(votingProportionToRemove.index <= _votingProportionKeys.length, \"Provided voting proportion index is invalid!\");\r\n\r\n        // Move an last element of array into the vacated key slot.\r\n        uint256 keyListIndex = votingProportionToRemove.index - 1;\r\n        uint256 keyListLastIndex = _votingProportionKeys.length - 1;\r\n        _votingProportionMap[_votingProportionKeys[keyListLastIndex]].index = keyListIndex + 1;\r\n        _votingProportionKeys[keyListIndex] = _votingProportionKeys[keyListLastIndex];\r\n        _votingProportionKeys.pop();\r\n        delete _votingProportionMap[key];\r\n        return true;\r\n    }\r\n\r\n    function _votingProportionSize() private view returns (uint256) {\r\n        return uint256(_votingProportionKeys.length);\r\n    }\r\n\r\n    function _votingProportionByKey(address key) private view returns (VotingProportion memory) {\r\n        return _votingProportionMap[key];\r\n    }\r\n\r\n\r\n    struct PriceInfo {\r\n        uint256 timeStampFrom;\r\n        uint256 timeStampTo;\r\n        uint256 priceFrom;\r\n        uint256 priceTo;\r\n        uint256 computedPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev Admin private variables\r\n     */\r\n    address private _liquidity;\r\n    address private _baseCurrency;\r\n    uint256 private _expense;\r\n\r\n    /**\r\n     * @dev Time pricing related private variables\r\n     */\r\n    uint256 private _minTimeStamp;\r\n    uint256 private _maxTimeStamp;\r\n    mapping(uint256 => uint256) private _timeStampToPrice;\r\n\r\n    // Voting Events\r\n    event TimeZoneUpdated(string id, string description, address contractAddress);\r\n    event TimeZoneRemoved(string id);\r\n    event Voted(address votingAccount, string[] zoneIds, uint256[] proportions);\r\n    event Unvoted(address votingAccount);\r\n    event TimeZonesCleaned();\r\n    event VotingProportionCleaned();\r\n\r\n    // Admin Events\r\n    event LiquidityChanged(address previousLiquidity, address newLiquidity);\r\n    event BaseCurrencyChanged(address previousBaseCurrency, address newBaseCurrency, uint256 rate);\r\n\r\n    // Time Events\r\n    event TimeBought(uint256 timeAmount, uint256 baseCurrencyAmount, address buyer);\r\n    event TimeSold(uint256 timeAmount, uint256 baseCurrencyAmount, address seller);\r\n    event LapseProved(uint256 newPrice, uint256 newTimeStamp, uint256 expense);\r\n    event Reimbursed(uint256 expense);\r\n\r\n    constructor() {\r\n        _timeZoneKeys = new string[](0);\r\n        _votingProportionKeys = new address[](0);\r\n        _maxTimeStamp = 0;\r\n        _minTimeStamp = _maxInt();\r\n        _expense = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev sets initials supply and the owner\r\n     */\r\n    function initialize(string memory name, string memory symbol, uint8 decimals, uint256 amount, bool mintable, address owner, address liquidityIn, address baseCurrencyIn) external initializer {\r\n        require(owner != address(0), \"Address(owner) cannot be zero!\");\r\n        require(liquidityIn != address(0), \"Address(liquidityIn) cannot be zero!\");\r\n        require(baseCurrencyIn != address(0), \"Address(baseCurrencyIn) cannot be zero!\");\r\n        _owner = owner;\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n        _mintable = mintable;\r\n        _liquidity = liquidityIn;\r\n        _baseCurrency = baseCurrencyIn;\r\n        _mint(owner, amount);\r\n    }\r\n\r\n    function addOrUpdateTimeZone(string calldata id, string calldata description, address contractAddress) external onlyOwner returns (bool) {\r\n        require(_upsertTimeZone(id, description, contractAddress), \"Failed to upsert new time zone!\");\r\n        emit TimeZoneUpdated(id, description, contractAddress);\r\n        return true;\r\n    }\r\n\r\n    function removeTimeZone(string calldata id) external onlyOwner returns (bool) {\r\n        require(_removeTimeZone(id), \"Failed to remove time zone!\");\r\n        emit TimeZoneRemoved(id);\r\n        return true;\r\n    }\r\n\r\n    function timeZone(string calldata id) external view returns (TimeZone memory) {\r\n        return _timeZoneById(id);\r\n    }\r\n\r\n    function timeZoneIds() external view returns (string[] memory) {\r\n        return _timeZoneKeys;\r\n    }\r\n\r\n    function vote(string[] calldata zoneIds, uint256[] calldata proportions) external returns (bool) {\r\n        require(zoneIds.length == proportions.length, \"Voting zone length and proportion length does not match!\");\r\n        bool allKeyExists = true;\r\n        uint256 proportionSum = 0;\r\n        uint256 zoneIdsLength = zoneIds.length;\r\n        for (uint256 i = 0; i < zoneIdsLength; i++) {\r\n            allKeyExists = allKeyExists && _timeZoneExists(zoneIds[i]);\r\n            proportionSum += proportions[i];\r\n        }\r\n        require(allKeyExists, \"Input contains wrong candidate id(s)!\");\r\n        require(proportionSum == 1 ether, \"Voting proportion must add up to 1 ether\");\r\n        require(_upsertVotingProportion(msg.sender, zoneIds, proportions), \"Failed to update voting proportions!\");\r\n        emit Voted(msg.sender, zoneIds, proportions);\r\n        return true;\r\n    }\r\n\r\n    function unvote() external returns (bool) {\r\n        require(_removeVotingProportion(msg.sender), \"Failed to remove voting proportion!\");\r\n        emit Unvoted(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function votingProportion(address account) external view returns (VotingProportion memory) {\r\n        return _votingProportionByKey(account);\r\n    }\r\n\r\n    function votingResult() external view returns (uint256[] memory) {\r\n        uint256[] memory votingResultToReturn = new uint256[](_timeZonesSize());\r\n        for (uint256 i = 0; i < _votingProportionSize(); i++) {\r\n            address account = _votingProportionKeys[i];\r\n            uint256 accountBalance = _balances[account];\r\n            string[] storage zoneIds = _votingProportionMap[account].zoneIds;\r\n            uint256 zoneIdsLength = zoneIds.length;\r\n            for (uint256 j = 0; j < zoneIdsLength; j++) {\r\n                uint256 zoneIndex = _timeZoneMap[zoneIds[j]].index - 1;\r\n                uint256 accountVotingProportion = _votingProportionMap[account].proportions[j];\r\n                votingResultToReturn[zoneIndex] += (accountBalance * accountVotingProportion) / 1 ether;\r\n            }\r\n        }\r\n        return votingResultToReturn;\r\n    }\r\n\r\n    function cleanVotingProportion() external onlyOwner returns (bool) {\r\n        uint256 votingProportionSize = _votingProportionSize();\r\n        for (uint256 i = 0; i < votingProportionSize; i++) {\r\n            delete _votingProportionMap[_votingProportionKeys[i]];\r\n        }\r\n        delete _votingProportionKeys;\r\n        emit VotingProportionCleaned();\r\n        return true;\r\n    }\r\n\r\n    function cleanTimeZones() external onlyOwner returns (bool) {\r\n        uint256 timeZonesSize = _timeZonesSize();\r\n        for (uint256 i = 0; i < timeZonesSize; i++) {\r\n            delete _timeZoneMap[_timeZoneKeys[i]];\r\n        }\r\n        delete _timeZoneKeys;\r\n        emit TimeZonesCleaned();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev changes the liquidity account\r\n     */\r\n    function setLiquidity(address liquidity) external onlyOwner returns (bool) {\r\n        require(liquidity != address(0), \"Address(liquidity) cannot be zero!\");\r\n        address previousLiquidity = _liquidity;\r\n        _liquidity = liquidity;\r\n        emit LiquidityChanged(previousLiquidity, _liquidity);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev main currency that time is backed - most likely one of the fiat base stablecoin\r\n     */\r\n    function baseCurrency() external view returns (address) {\r\n        return _baseCurrency;\r\n    }\r\n\r\n    /**\r\n     * @dev changes base currency contract, need to provide rate which is newBaseCurrency/currentBaseCurrency\r\n     */\r\n    function setBaseCurrency(address newBaseCurrency, uint256 rate) external onlyOwner returns (bool) {\r\n        require(newBaseCurrency != address(0), \"Address(newBaseCurrency) cannot be zero!\");\r\n        address previousBaseCurrency = _baseCurrency;\r\n        _baseCurrency = newBaseCurrency;\r\n        for (uint256 timeStamp = _minTimeStamp; timeStamp <= _maxTimeStamp; timeStamp = timeStamp + _secondsInDay()) {\r\n            if (_timeStampToPrice[timeStamp] != 0) {\r\n                _timeStampToPrice[timeStamp] = _applyRate(_timeStampToPrice[timeStamp], rate);\r\n            }\r\n        }\r\n        emit BaseCurrencyChanged(previousBaseCurrency, _baseCurrency, rate);\r\n        return true;\r\n    }\r\n\r\n    function _applyRate(uint256 value, uint256 rate) internal pure returns (uint256) {\r\n        require(value * rate > 1 ether, \"Provided rate is too small!\");\r\n        return (value * rate) / 1 ether;\r\n    }\r\n\r\n    function _baseLiquidityAmount() internal view returns (uint256) {\r\n        return IERC20(_baseCurrency).balanceOf(address(_liquidity));\r\n    }\r\n\r\n    /**\r\n     * @dev maximum amount time can be sold back at the moment\r\n     * if this value is small, time service will refill liquidity with base currency\r\n     */\r\n    function maxTimeSellAmount() public view returns (uint256) {\r\n        return (_baseLiquidityAmount() * 1 ether) / currentPrice();\r\n    }\r\n\r\n    /**\r\n     * @dev the actual live price - this price is used in maxTimeSellAmount and sellForBase\r\n     */\r\n    function currentPrice() public view returns (uint256) {\r\n        uint256 currentTimeStamp = block.timestamp;\r\n        return _computePriceInfo(currentTimeStamp).computedPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev start price of the current timeframe\r\n     */\r\n    function currentStartPrice() public view returns (uint256) {\r\n        uint256 currentTimeStamp = block.timestamp;\r\n        return _computePriceInfo(currentTimeStamp).priceFrom;\r\n    }\r\n\r\n    /**\r\n     * @dev end price of the current timeframe\r\n     * when buying time, it can be only bought with this price\r\n     */\r\n    function currentEndPrice() public view returns (uint256) {\r\n        uint256 currentTimeStamp = block.timestamp;\r\n        return _computePriceInfo(currentTimeStamp).priceTo;\r\n    }\r\n\r\n    /**\r\n     * @dev start timestamp of the current timeframe\r\n     */\r\n    function currentStartTimeStamp() public view returns (uint256) {\r\n        uint256 currentTimeStamp = block.timestamp;\r\n        return _computePriceInfo(currentTimeStamp).timeStampFrom;\r\n    }\r\n\r\n    /**\r\n     * @dev end timestamp of the current timeframe\r\n     */\r\n    function currentEndTimeStamp() public view returns (uint256) {\r\n        uint256 currentTimeStamp = block.timestamp;\r\n        return _computePriceInfo(currentTimeStamp).timeStampTo;\r\n    }\r\n\r\n    /**\r\n     * @dev full priceinfo object of the current timeframe\r\n     */\r\n    function currentPriceInfo() public view returns (PriceInfo memory) {\r\n        uint256 currentTimeStamp = block.timestamp;\r\n        return _computePriceInfo(currentTimeStamp);\r\n    }\r\n\r\n    /**\r\n     * @dev price of a given historical time\r\n     */\r\n    function historicalPrice(uint256 timeStamp) public view returns (uint256) {\r\n        return _computePriceInfo(timeStamp).computedPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev full priceinfo object of a given historical time\r\n     */\r\n    function historicalPriceInfo(uint256 timeStamp) public view returns (PriceInfo memory) {\r\n        return _computePriceInfo(timeStamp);\r\n    }\r\n\r\n    function _computePriceInfo(uint256 timeStamp) internal view returns (PriceInfo memory) {\r\n        if (timeStamp <= _minTimeStamp) {\r\n            uint256 minPrice = _timeStampToPrice[_minTimeStamp];\r\n            return PriceInfo(_minTimeStamp, _minTimeStamp, minPrice, minPrice, minPrice);\r\n        }\r\n        if (_maxTimeStamp <= timeStamp) {\r\n            uint256 maxPrice = _timeStampToPrice[_maxTimeStamp];\r\n            return PriceInfo(_maxTimeStamp, _maxTimeStamp, maxPrice, maxPrice, maxPrice);\r\n        }\r\n\r\n        uint256 secondInDay = timeStamp % _secondsInDay();\r\n\r\n        uint256 timeStampFrom = timeStamp - secondInDay;\r\n        uint256 timeStampTo = timeStampFrom + _secondsInDay();\r\n        uint256 priceFrom = _timeStampToPrice[timeStampFrom];\r\n        uint256 priceTo = _timeStampToPrice[timeStampTo];\r\n\r\n        if (secondInDay == 0) {\r\n            return PriceInfo(timeStampFrom, timeStampTo, priceFrom, priceTo, priceFrom);\r\n        }\r\n        if (priceTo <= priceFrom) {\r\n            return PriceInfo(timeStampFrom, timeStampTo, priceFrom, priceTo, priceTo);\r\n        }\r\n\r\n        uint256 priceRange = priceTo - priceFrom;\r\n        uint256 timeRange = timeStampTo - timeStampFrom;\r\n        uint256 timePassed = timeStamp - timeStampFrom;\r\n        uint256 price = ((priceRange * timePassed) / timeRange) + priceFrom;\r\n        return PriceInfo(timeStampFrom, timeStampTo, priceFrom, priceTo, price);\r\n    }\r\n\r\n    /**\r\n     * @dev buy time coin with base currency end price\r\n     */\r\n    function buyForBase(uint256 timeAmount) external returns (bool) {\r\n        require(timeAmount * currentEndPrice() > 1 ether, \"Provided timeAmount is too small!\");\r\n        uint256 baseAmount = (timeAmount * currentEndPrice()) / 1 ether;\r\n        IERC20(_baseCurrency).transferFrom(msg.sender, _liquidity, baseAmount);\r\n        _mint(msg.sender, timeAmount);\r\n        emit TimeBought(timeAmount, baseAmount, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev sell time coin with base currency current price\r\n     */\r\n    function sellForBase(uint256 timeAmount) external returns (bool) {\r\n        require(timeAmount * currentPrice() > 1 ether, \"Provided timeAmount is too small!\");\r\n        require(maxTimeSellAmount() > timeAmount, \"Time amount to sell should be lower than maxTimeSellAmount()!\");\r\n        uint256 baseAmount = (timeAmount * currentPrice()) / 1 ether;\r\n        IERC20(_baseCurrency).transferFrom(_liquidity, msg.sender, baseAmount);\r\n        _burn(msg.sender, timeAmount);\r\n        emit TimeSold(timeAmount, baseAmount, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev reimburse expense\r\n     */\r\n    function reimburse() external onlyOwner returns (bool) {\r\n        require(_baseLiquidityAmount() > _expense, \"Not enough base liquidity amount!\");\r\n        IERC20(_baseCurrency).transferFrom(_liquidity, msg.sender, _expense);\r\n        emit Reimbursed(_expense);\r\n        _expense = 0;\r\n        return true;\r\n    }\r\n\r\n    function expenseAmount() external view returns (uint256) {\r\n        return _expense;\r\n    }\r\n\r\n    /**\r\n     * @dev run proof of lapse process using interest gained and amount of released coin (excluding owned by time itself)\r\n     */\r\n    function proofOfLapse(uint256 capitalGain, uint256 releasedCoins, uint256 newTimeStamp, uint256 expense) external onlyOwner returns (bool) {\r\n        require(newTimeStamp % _secondsInDay() == 0, \"TimeStamp should be divisible by 86400!\");\r\n        uint256 previousPrice = historicalPrice(newTimeStamp - _secondsInDay());\r\n        uint256 newPrice = previousPrice + (((capitalGain - expense - _expense) * 1 ether) / releasedCoins);\r\n        return proofOfLapse(newPrice, newTimeStamp, expense);\r\n    }\r\n\r\n    /**\r\n     * @dev run proof of lapse process using new end price\r\n     */\r\n    function proofOfLapse(uint256 newPrice, uint256 newTimeStamp, uint256 expense) public onlyOwner returns (bool) {\r\n        require(newTimeStamp % _secondsInDay() == 0, \"TimeStamp should be divisible by 86400!\");\r\n        _expense = _expense + expense;\r\n        _timeStampToPrice[newTimeStamp] = newPrice;\r\n        if (newTimeStamp < _minTimeStamp) {\r\n            _minTimeStamp = newTimeStamp;\r\n        }\r\n        if (_maxTimeStamp < newTimeStamp) {\r\n            _maxTimeStamp = newTimeStamp;\r\n        }\r\n        emit LapseProved(newPrice, newTimeStamp, expense);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousBaseCurrency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBaseCurrency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"BaseCurrencyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimeStamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expense\",\"type\":\"uint256\"}],\"name\":\"LapseProved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousLiquidity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLiquidity\",\"type\":\"address\"}],\"name\":\"LiquidityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expense\",\"type\":\"uint256\"}],\"name\":\"Reimbursed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseCurrencyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"TimeBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseCurrencyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"TimeSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"TimeZoneRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"TimeZoneUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TimeZonesCleaned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"votingAccount\",\"type\":\"address\"}],\"name\":\"Unvoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"votingAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"zoneIds\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"proportions\",\"type\":\"uint256[]\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"VotingProportionCleaned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"addOrUpdateTimeZone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseCurrency\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeAmount\",\"type\":\"uint256\"}],\"name\":\"buyForBase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cleanTimeZones\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cleanVotingProportion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEndPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEndTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPriceInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeStampFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStampTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"computedPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct Time.PriceInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStartPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStartTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expenseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"historicalPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"name\":\"historicalPriceInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeStampFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStampTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"computedPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct Time.PriceInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"mintable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseCurrencyIn\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTimeSellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"capitalGain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedCoins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expense\",\"type\":\"uint256\"}],\"name\":\"proofOfLapse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expense\",\"type\":\"uint256\"}],\"name\":\"proofOfLapse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reimburse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"removeTimeZone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeAmount\",\"type\":\"uint256\"}],\"name\":\"sellForBase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBaseCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setBaseCurrency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"}],\"name\":\"setLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"timeZone\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct Time.TimeZone\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeZoneIds\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unvote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"zoneIds\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"proportions\",\"type\":\"uint256[]\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"votingProportion\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"zoneIds\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"proportions\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Time.VotingProportion\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingResult\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Time","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://537fae10a625839f3e86051b32ed513b73927ca8f7fab8e3d0329b371b1385c8"}]}