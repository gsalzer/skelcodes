{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\nlibrary Math {\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\ninterface erc20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address) external view returns (uint);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint value) external returns (bool);\r\n}\r\n\r\ncontract faucet {\r\n    address constant _ibff = 0xb347132eFf18a3f63426f4988ef626d2CbE274F5;\r\n    address constant _ibeurlp = 0xa2D81bEdf22201A77044CDF3Ab4d9dC1FfBc391B;\r\n    \r\n    uint constant DURATION = 7 days;\r\n    uint constant PRECISION = 10 ** 18;\r\n    \r\n    uint rewardRate;\r\n    uint periodFinish;\r\n    uint lastUpdateTime;\r\n    uint rewardPerTokenStored;\r\n    \r\n    mapping(address => uint256) public userRewardPerTokenPaid;\r\n    mapping(address => uint256) public rewards;\r\n    \r\n    uint public totalSupply;\r\n    mapping(address => uint) public balanceOf;\r\n\r\n    function lastTimeRewardApplicable() public view returns (uint) {\r\n        return Math.min(block.timestamp, periodFinish);\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint) {\r\n        if (totalSupply == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n        return rewardPerTokenStored + ((lastTimeRewardApplicable() - lastUpdateTime) * rewardRate * PRECISION / totalSupply);\r\n    }\r\n\r\n    function earned(address account) public view returns (uint) {\r\n        return (balanceOf[account] * (rewardPerToken() - userRewardPerTokenPaid[account]) / PRECISION) + rewards[account];\r\n    }\r\n\r\n    function getRewardForDuration() external view returns (uint) {\r\n        return rewardRate * DURATION;\r\n    }\r\n\r\n    function deposit(uint amount) external update(msg.sender) {\r\n        totalSupply += amount;\r\n        balanceOf[msg.sender] += amount;\r\n        safeTransferFrom(_ibeurlp, amount);\r\n    }\r\n\r\n    function withdraw(uint amount) public update(msg.sender) {\r\n        totalSupply -= amount;\r\n        balanceOf[msg.sender] -= amount;\r\n        safeTransfer(_ibeurlp, msg.sender, amount);\r\n    }\r\n\r\n    function getReward() public update(msg.sender) {\r\n        uint _reward = rewards[msg.sender];\r\n        if (_reward > 0) {\r\n            rewards[msg.sender] = 0;\r\n            safeTransfer(_ibff, msg.sender, _reward);\r\n        }\r\n    }\r\n\r\n    function exit() external {\r\n        withdraw(balanceOf[msg.sender]);\r\n        getReward();\r\n    }\r\n    \r\n    function notify(uint amount) external update(address(0)) {\r\n        safeTransferFrom(_ibff, amount);\r\n        if (block.timestamp >= periodFinish) {\r\n            rewardRate = amount / DURATION;\r\n        } else {\r\n            uint _remaining = periodFinish - block.timestamp;\r\n            uint _leftover = _remaining * rewardRate;\r\n            rewardRate = (amount + _leftover) / DURATION;\r\n        }\r\n        \r\n        lastUpdateTime = block.timestamp;\r\n        periodFinish = block.timestamp + DURATION;\r\n    }\r\n\r\n    modifier update(address account) {\r\n        rewardPerTokenStored = rewardPerToken();\r\n        lastUpdateTime = lastTimeRewardApplicable();\r\n        if (account != address(0)) {\r\n            rewards[account] = earned(account);\r\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\r\n        }\r\n        _;\r\n    }\r\n    \r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(erc20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n    \r\n    function safeTransferFrom(address token, uint256 value) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(erc20.transferFrom.selector, msg.sender, address(this), value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"notify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"faucet","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c878da5bada5e3f43bc87a34fe560cee5bd322e3d1de89870829887abc10f295"}]}