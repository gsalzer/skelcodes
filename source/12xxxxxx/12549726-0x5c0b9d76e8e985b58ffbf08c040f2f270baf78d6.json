{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/Claimer.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Reclaimer\r\n * @author Protofire\r\n * @dev Allows owner to claim ERC20 tokens ot ETH sent to this contract.\r\n */\r\nabstract contract Claimer is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /**\r\n     * @dev send all token balance of an arbitrary erc20 token\r\n     * in the contract to another address\r\n     * @param token token to reclaim\r\n     * @param _to address to send eth balance to\r\n     */\r\n    function claimToken(IERC20 token, address _to) external onlyOwner {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        token.safeTransfer(_to, balance);\r\n    }\r\n\r\n    /**\r\n     * @dev send all eth balance in the contract to another address\r\n     * @param _to address to send eth balance to\r\n     */\r\n    function claimEther(address payable _to) external onlyOwner {\r\n        (bool sent, ) = _to.call{value: address(this).balance}(\"\");\r\n        require(sent, \"Failed to send Ether\");\r\n    }\r\n}\r\n\r\n// File: contracts/Registry.sol\r\n\r\npragma solidity 0.6.10;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\nabstract contract Registry is Claimer {\r\n    struct AttributeData {\r\n        uint256 value;\r\n        address updatedBy;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    mapping(address => mapping(bytes32 => AttributeData)) public attributes;\r\n\r\n    event SetAttribute(\r\n        address indexed who,\r\n        bytes32 attribute,\r\n        uint256 value,\r\n        address indexed updatedBy\r\n    );\r\n\r\n    function setAttribute(\r\n        address _who,\r\n        bytes32 _attribute,\r\n        uint256 _value\r\n    ) public onlyOwner {\r\n        attributes[_who][_attribute] = AttributeData(\r\n            _value,\r\n            msg.sender,\r\n            block.timestamp\r\n        );\r\n        emit SetAttribute(_who, _attribute, _value, msg.sender);\r\n    }\r\n\r\n    function hasAttribute(address _who, bytes32 _attribute)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return attributes[_who][_attribute].value != 0;\r\n    }\r\n\r\n    function getAttribute(address _who, bytes32 _attribute)\r\n        public\r\n        view\r\n        returns (AttributeData memory data)\r\n    {\r\n        data = attributes[_who][_attribute];\r\n    }\r\n\r\n    function getAttributeValue(address _who, bytes32 _attribute)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return attributes[_who][_attribute].value;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IUserRegistry.sol\r\n\r\n\r\npragma solidity 0.6.10;\r\n\r\n/**\r\n * @dev Interface of the Registry contract.\r\n */\r\ninterface IUserRegistry {\r\n    function canTransfer(address _from, address _to) external view;\r\n\r\n    function canTransferFrom(\r\n        address _spender,\r\n        address _from,\r\n        address _to\r\n    ) external view;\r\n\r\n    function canMint(address _to) external view;\r\n\r\n    function canBurn(address _from, uint256 _amount) external view;\r\n\r\n    function canWipe(address _account) external view;\r\n\r\n    function isRedeem(address _sender, address _recipient)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function isRedeemFrom(\r\n        address _caller,\r\n        address _sender,\r\n        address _recipient\r\n    ) external view returns (bool);\r\n}\r\n\r\n// File: contracts/UserRegistry.sol\r\n\r\npragma solidity 0.6.10;\r\n\r\n\r\n\r\n\r\ncontract UserRegistry is Registry, IUserRegistry {\r\n    uint256 public constant REDEMPTION_ADDRESS_COUNT = 0x100000;\r\n    bytes32 public constant IS_BLOCKLISTED = \"IS_BLOCKLISTED\";\r\n    bytes32 public constant KYC_AML_VERIFIED = \"KYC_AML_VERIFIED\";\r\n    bytes32 public constant CAN_BURN = \"CAN_BURN\";\r\n    bytes32 public constant USER_REDEEM_ADDRESS = \"USER_REDEEM_ADDRESS\";\r\n    bytes32 public constant REDEEM_ADDRESS_USER = \"REDEEM_ADDRESS_USER\";\r\n\r\n    address public token;\r\n\r\n    mapping(address => string) private usersId;\r\n    mapping(string => address) private usersById;\r\n\r\n    uint256 private redemptionAddressCount;\r\n\r\n    uint256 public minBurnBound;\r\n    uint256 public maxBurnBound;\r\n\r\n    struct User {\r\n        address account;\r\n        string id;\r\n        address redeemAddress;\r\n        bool blocked;\r\n        bool KYC; // solhint-disable-line var-name-mixedcase\r\n        bool canBurn;\r\n    }\r\n\r\n    event RegisterNewUser(\r\n        address indexed account,\r\n        address indexed redeemAddress\r\n    );\r\n\r\n    event UserKycVerified(address indexed account);\r\n\r\n    event UserKycUnverified(address indexed account);\r\n\r\n    event EnableRedeemAddress(address indexed account);\r\n\r\n    event DisableRedeemAddress(address indexed account);\r\n\r\n    event BlockAccount(address indexed account);\r\n\r\n    event UnblockAccount(address indexed account);\r\n\r\n    event MinBurnBound(uint256 minBurn);\r\n\r\n    event MaxBurnBound(uint256 minBurn);\r\n\r\n    constructor(\r\n        address _token,\r\n        uint256 _minBurnBound,\r\n        uint256 _maxBurnBound\r\n    ) public {\r\n        require(_minBurnBound <= _maxBurnBound, \"min bigger than max\");\r\n        token = _token;\r\n        minBurnBound = _minBurnBound;\r\n        maxBurnBound = _maxBurnBound;\r\n    }\r\n\r\n    function setToken(address _token) public onlyOwner {\r\n        token = _token;\r\n    }\r\n\r\n    function setMinBurnBound(uint256 _minBurnBound) public onlyOwner {\r\n        require(_minBurnBound <= maxBurnBound, \"min bigger than max\");\r\n        minBurnBound = _minBurnBound;\r\n\r\n        emit MinBurnBound(_minBurnBound);\r\n    }\r\n\r\n    function setMaxBurnBound(uint256 _maxBurnBound) public onlyOwner {\r\n        require(minBurnBound <= _maxBurnBound, \"min bigger than max\");\r\n        maxBurnBound = _maxBurnBound;\r\n\r\n        emit MaxBurnBound(_maxBurnBound);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a new user in the registry.\r\n     *      Sets {REDEEM_ADDRESS_USER} attribute for redeemAddress as `_account`.\r\n     *      Sets {USER_REDEEM_ADDRESS} attribute for `_account` as redeemAddress.\r\n     *\r\n     * Emits a {RegisterNewUser} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_account` should not be a registered as user.\r\n     * - number of redeem address should not be greater than max availables.\r\n     */\r\n    function registerNewUser(address _account, string calldata _id)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(!_isUser(_account), \"user exist\");\r\n        require(usersById[_id] == address(0), \"id already taken\");\r\n\r\n        redemptionAddressCount++;\r\n        require(\r\n            REDEMPTION_ADDRESS_COUNT > redemptionAddressCount,\r\n            \"max allowed users\"\r\n        );\r\n\r\n        setAttribute(\r\n            address(redemptionAddressCount),\r\n            REDEEM_ADDRESS_USER,\r\n            uint256(_account)\r\n        );\r\n\r\n        setAttribute(_account, USER_REDEEM_ADDRESS, redemptionAddressCount);\r\n\r\n        usersId[_account] = _id;\r\n        usersById[_id] = _account;\r\n\r\n        emit RegisterNewUser(_account, address(redemptionAddressCount));\r\n    }\r\n\r\n    /**\r\n     * @dev Gets user's data.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller should be the owner.\r\n     */\r\n    function getUser(address _account)\r\n        public\r\n        view\r\n        onlyOwner\r\n        returns (User memory user)\r\n    {\r\n        user.account = _account;\r\n        user.id = usersId[_account];\r\n        user.redeemAddress = getRedeemAddress(_account);\r\n        user.blocked = _isBlocked(_account);\r\n        user.KYC = _isKyced(_account);\r\n        user.canBurn =\r\n            getAttributeValue(getRedeemAddress(_account), CAN_BURN) == 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets user by its id.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller should be the owner.\r\n     */\r\n    function getUserById(string calldata _id)\r\n        public\r\n        view\r\n        onlyOwner\r\n        returns (User memory user)\r\n    {\r\n        return getUser(usersById[_id]);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets user id.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller should be the owner.\r\n     * - `_account` should be a registered as user.\r\n     * - `_id` should not be taken.\r\n     */\r\n    function setUserId(address _account, string calldata _id) public onlyOwner {\r\n        require(_isUser(_account), \"not a user\");\r\n        require(usersById[_id] == address(0), \"id already taken\");\r\n        string memory prevId = usersId[_account];\r\n        usersId[_account] = _id;\r\n        usersById[_id] = _account;\r\n        delete usersById[prevId];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets user as KYC verified.\r\n     *\r\n     * Emits a {UserKycVerified} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_account` should be a registered as user.\r\n     */\r\n    function userKycVerified(address _account) public onlyOwner {\r\n        require(_isUser(_account), \"not a user\");\r\n\r\n        setAttribute(_account, KYC_AML_VERIFIED, 1);\r\n\r\n        emit UserKycVerified(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets user as KYC un-verified.\r\n     *\r\n     * Emits a {UserKycVerified} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_account` should be a registered as user.\r\n     */\r\n    function userKycUnverified(address _account) public onlyOwner {\r\n        require(_isUser(_account), \"not a user\");\r\n\r\n        setAttribute(_account, KYC_AML_VERIFIED, 0);\r\n\r\n        emit UserKycUnverified(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Enables `_account` redeem address to burn.\r\n     *\r\n     * Emits a {EnableUserRedeemAddress} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_account` should be a registered as user.\r\n     * - `_account` should be KYC verified.\r\n     */\r\n    function enableRedeemAddress(address _account) public onlyOwner {\r\n        require(_isUser(_account), \"not a user\");\r\n        require(_isKyced(_account), \"user has not KYC\");\r\n\r\n        setAttribute(getRedeemAddress(_account), CAN_BURN, 1);\r\n\r\n        emit EnableRedeemAddress(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Disables `_account` redeem address to burn.\r\n     *\r\n     * Emits a {DisableRedeemAddress} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_account` should be a registered as user.\r\n     */\r\n    function disableRedeemAddress(address _account) public onlyOwner {\r\n        require(_isUser(_account), \"not a user\");\r\n\r\n        setAttribute(getRedeemAddress(_account), CAN_BURN, 0);\r\n\r\n        emit DisableRedeemAddress(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets user as KYC verified.\r\n     *      Enables `_account` redeem address to burn.\r\n     *\r\n     * Emits a {UserKycVerified} event.\r\n     * Emits a {EnableUserRedeemAddress} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_account` should be a registered as user.\r\n     */\r\n    function verifyKycEnableRedeem(address _account) public onlyOwner {\r\n        require(_isUser(_account), \"not a user\");\r\n\r\n        setAttribute(_account, KYC_AML_VERIFIED, 1);\r\n        setAttribute(getRedeemAddress(_account), CAN_BURN, 1);\r\n\r\n        emit UserKycVerified(_account);\r\n        emit EnableRedeemAddress(getRedeemAddress(_account));\r\n    }\r\n\r\n    /**\r\n     * @dev Sets user as KYC un-verified.\r\n     *      Disables `_account` redeem address to burn.\r\n     *\r\n     * Emits a {UserKycVerified} event.\r\n     * Emits a {v} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_account` should be a registered as user.\r\n     */\r\n    function unverifyKycDisableRedeem(address _account) public onlyOwner {\r\n        require(_isUser(_account), \"not a user\");\r\n\r\n        setAttribute(_account, KYC_AML_VERIFIED, 0);\r\n        setAttribute(getRedeemAddress(_account), CAN_BURN, 0);\r\n\r\n        emit UserKycUnverified(_account);\r\n        emit DisableRedeemAddress(getRedeemAddress(_account));\r\n    }\r\n\r\n    /**\r\n     * @dev Registers `_account` as blocked.\r\n     *\r\n     * Emits a {BlockAccount} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_account` should not be already blocked.\r\n     */\r\n    function blockAccount(address _account) public onlyOwner {\r\n        require(!_isBlocked(_account), \"user already blocked\");\r\n        setAttribute(_account, IS_BLOCKLISTED, 1);\r\n\r\n        emit BlockAccount(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Registers `_account` as un-blocked.\r\n     *\r\n     * Emits a {UnblockAccount} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `_account` should be blocked.\r\n     */\r\n    function unblockAccount(address _account) public onlyOwner {\r\n        require(_isBlocked(_account), \"user not blocked\");\r\n        setAttribute(_account, IS_BLOCKLISTED, 0);\r\n\r\n        emit UnblockAccount(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets user's account associated to a given `_redeemAddress`.\r\n     */\r\n    function getUserByRedeemAddress(address _redeemAddress)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        return address(getAttributeValue(_redeemAddress, REDEEM_ADDRESS_USER));\r\n    }\r\n\r\n    /**\r\n     * @dev Gets redeem address associated to a given `_account`\r\n     */\r\n    function getRedeemAddress(address _account) public view returns (address) {\r\n        return address(getAttributeValue(_account, USER_REDEEM_ADDRESS));\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the given `_account` is a registered user.\r\n     */\r\n    function _isUser(address _account) internal view returns (bool) {\r\n        return getAttributeValue(_account, USER_REDEEM_ADDRESS) != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the given `_account` is blocked.\r\n     */\r\n    function _isBlocked(address _account) internal view returns (bool) {\r\n        return getAttributeValue(_account, IS_BLOCKLISTED) == 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the given `_account` is KYC verified.\r\n     */\r\n    function _isKyced(address _account) internal view returns (bool) {\r\n        return getAttributeValue(_account, KYC_AML_VERIFIED) != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if the given `_account` is a redeeming address.\r\n     */\r\n    function _isRedemptionAddress(address _account)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return uint256(_account) < REDEMPTION_ADDRESS_COUNT;\r\n    }\r\n\r\n    /**\r\n     * @dev Determines if it is redeeming.\r\n     */\r\n    function isRedeem(address, address _recipient)\r\n        external\r\n        view\r\n        override\r\n        onlyToken\r\n        returns (bool)\r\n    {\r\n        return _isRedemptionAddress(_recipient);\r\n    }\r\n\r\n    /**\r\n     * @dev Determines if it is redeeming from.\r\n     */\r\n    function isRedeemFrom(\r\n        address,\r\n        address,\r\n        address _recipient\r\n    ) external view override onlyToken returns (bool) {\r\n        return _isRedemptionAddress(_recipient);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if any of `_from` or `_to` is blocklisted.\r\n     */\r\n    function canTransfer(address _from, address _to)\r\n        external\r\n        view\r\n        override\r\n        onlyToken\r\n    {\r\n        require(!_isBlocked(_from), \"blocklisted\");\r\n        require(!_isBlocked(_to), \"blocklisted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if any of `_spender`, `_from` or `_to` is blocklisted.\r\n     */\r\n    function canTransferFrom(\r\n        address _spender,\r\n        address _from,\r\n        address _to\r\n    ) external view override onlyToken {\r\n        require(!_isBlocked(_spender), \"blocklisted\");\r\n        require(!_isBlocked(_from), \"blocklisted\");\r\n        require(!_isBlocked(_to), \"blocklisted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if any of `_to` is not KYC verified or blocklisted.\r\n     */\r\n    function canMint(address _to) external view override onlyToken {\r\n        require(_isKyced(_to), \"user has not KYC\");\r\n        require(!_isBlocked(_to), \"blocklisted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if any of `_from` is not enabled to burn or `_amount` lower than minBurnBound.\r\n     */\r\n    function canBurn(address _from, uint256 _amount)\r\n        external\r\n        view\r\n        override\r\n        onlyToken\r\n    {\r\n        require(getAttributeValue(_from, CAN_BURN) != 0, \"can not burn\");\r\n        require(_amount >= minBurnBound, \"below min bound\");\r\n        require(_amount <= maxBurnBound, \"above max bound\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if any of `_account` is not blocked.\r\n     */\r\n    function canWipe(address _account) external view override onlyToken {\r\n        require(_isBlocked(_account), \"can not wipe\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any address other than the token.\r\n     */\r\n    modifier onlyToken() {\r\n        require(msg.sender == token, \"only Token\");\r\n        _;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minBurnBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBurnBound\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"BlockAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"DisableRedeemAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"EnableRedeemAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBurn\",\"type\":\"uint256\"}],\"name\":\"MaxBurnBound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBurn\",\"type\":\"uint256\"}],\"name\":\"MinBurnBound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemAddress\",\"type\":\"address\"}],\"name\":\"RegisterNewUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"attribute\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"}],\"name\":\"SetAttribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnblockAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UserKycUnverified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UserKycVerified\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CAN_BURN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_BLOCKLISTED\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KYC_AML_VERIFIED\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEEM_ADDRESS_USER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEMPTION_ADDRESS_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USER_REDEEM_ADDRESS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"attributes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"blockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"canBurn\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"canMint\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"canTransfer\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"canTransferFrom\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"canWipe\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"disableRedeemAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"enableRedeemAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_attribute\",\"type\":\"bytes32\"}],\"name\":\"getAttribute\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"updatedBy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct Registry.AttributeData\",\"name\":\"data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_attribute\",\"type\":\"bytes32\"}],\"name\":\"getAttributeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getRedeemAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"redeemAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"blocked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"KYC\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canBurn\",\"type\":\"bool\"}],\"internalType\":\"struct UserRegistry.User\",\"name\":\"user\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"getUserById\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"redeemAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"blocked\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"KYC\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canBurn\",\"type\":\"bool\"}],\"internalType\":\"struct UserRegistry.User\",\"name\":\"user\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_redeemAddress\",\"type\":\"address\"}],\"name\":\"getUserByRedeemAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_attribute\",\"type\":\"bytes32\"}],\"name\":\"hasAttribute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"isRedeem\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"isRedeemFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBurnBound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBurnBound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"registerNewUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_attribute\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setAttribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBurnBound\",\"type\":\"uint256\"}],\"name\":\"setMaxBurnBound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBurnBound\",\"type\":\"uint256\"}],\"name\":\"setMinBurnBound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_id\",\"type\":\"string\"}],\"name\":\"setUserId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unblockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unverifyKycDisableRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"userKycUnverified\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"userKycVerified\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"verifyKycEnableRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UserRegistry","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4691880bc73a3a5b5299ccfb8b2ad51049b4b3890c3bd5de4ea19f3f4cbb1237"}]}