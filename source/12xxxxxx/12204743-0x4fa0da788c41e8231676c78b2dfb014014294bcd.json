{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n * \r\n *  BitStash (STASH) airdrop smart contract\r\n *  Learn more at https://bitstash.co/\r\n * \r\n */\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal returns (uint256) {\r\n        uint256 c = a * b;\r\n        require(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal returns (uint256) {\r\n        //   require(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        //   require(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n    * account.\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface Token {\r\n    function transfer(address _to, uint _amount) public returns (bool success);\r\n    function balanceOf(address _owner) public constant returns (uint balance);\r\n}\r\n\r\n\r\ncontract Airdrop is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    address public tokenAddr;\r\n\r\n    event EtherTransfer(address beneficiary, uint amount);\r\n\r\n    constructor(address _tokenAddr) public {\r\n        tokenAddr = _tokenAddr;\r\n    }\r\n\r\n    function dropTokens(address[] _recipients, uint256[] _amount) public onlyOwner returns (bool) {\r\n        require(_recipients.length == _amount.length);\r\n\r\n        for (uint i = 0; i < _recipients.length; i++) {\r\n            require(_recipients[i] != address(0));\r\n            require(Token(tokenAddr).transfer(_recipients[i], _amount[i]));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function dropEther(address[] _recipients, uint256[] _amount) public payable onlyOwner returns (bool) {\r\n        uint total = 0;\r\n\r\n        for(uint j = 0; j < _amount.length; j++) {\r\n            total = total.add(_amount[j]);\r\n        }\r\n\r\n        require(total <= msg.value);\r\n        require(_recipients.length == _amount.length);\r\n\r\n\r\n        for (uint i = 0; i < _recipients.length; i++) {\r\n            require(_recipients[i] != address(0));\r\n\r\n            _recipients[i].transfer(_amount[i]);\r\n\r\n            emit EtherTransfer(_recipients[i], _amount[i]);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function updateTokenAddress(address newTokenAddr) public onlyOwner {\r\n        tokenAddr = newTokenAddr;\r\n    }\r\n\r\n    function withdrawTokens(address beneficiary) public onlyOwner {\r\n        require(Token(tokenAddr).transfer(beneficiary, Token(tokenAddr).balanceOf(this)));\r\n    }\r\n\r\n    function withdrawEther(address beneficiary) public onlyOwner {\r\n        beneficiary.transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"dropEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_recipients\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"dropTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenAddr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenAddr\",\"type\":\"address\"}],\"name\":\"updateTokenAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Airdrop","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e4f356ecce6fbda81ecdea2e38527e59422861c2","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://90adb951552bd3aca2414168b541d53a40eeff03a869f8d3aa614fbf76d7609b"}]}