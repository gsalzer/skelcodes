{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.7;\r\n\r\n\r\ninterface PauseLike {\r\n    function delay() external returns (uint);\r\n    function exec(address, bytes32, bytes calldata, uint256) external;\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n}\r\n\r\n\r\n\r\ninterface JugLike {\r\n    function drip(bytes32 ilk) external returns (uint rate);\r\n    function file(bytes32 ilk, bytes32 what, uint data) external;\r\n}\r\n\r\n\r\ninterface ChainlogAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function keys() external view returns (bytes32[] memory);\r\n    function version() external view returns (string memory);\r\n    function ipfs() external view returns (string memory);\r\n    function setVersion(string calldata) external;\r\n    function setSha256sum(string calldata) external;\r\n    function setIPFS(string calldata) external;\r\n    function setAddress(bytes32,address) external;\r\n    function removeAddress(bytes32) external;\r\n    function count() external view returns (uint256);\r\n    function get(uint256) external view returns (bytes32,address);\r\n    function list() external view returns (bytes32[] memory);\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\n\r\n\r\n\r\ncontract SpellActionCommon {\r\n\r\n    uint256 constant ZERO_PERCENT_RATE            = 1000000000000000000000000000;\r\n    uint256 constant ONE_PERCENT_RATE             = 1000000000315522921573372069;\r\n    uint256 constant TWO_PERCENT_RATE             = 1000000000627937192491029810;\r\n    uint256 constant TWO_POINT_FIVE_PERCENT_RATE  = 1000000000782997609082909351;\r\n    uint256 constant THREE_PERCENT_RATE           = 1000000000937303470807876289;\r\n    uint256 constant FOUR_POINT_FIVE_PERCENT_RATE = 1000000001395766281313196627;\r\n    uint256 constant FIVE_PERCENT_RATE            = 1000000001547125957863212448;\r\n    uint256 constant SIX_PERCENT_RATE             = 1000000001847694957439350562;\r\n    uint256 constant EIGHT_PERCENT_RATE           = 1000000002440418608258400030;\r\n    uint256 constant NINE_PERCENT_RATE            = 1000000002732676825177582095;\r\n    uint256 constant TEN_PERCENT_RATE             = 1000000003022265980097387650;\r\n\r\n    function setupDuty(bytes32 ilk, address jug) internal {\r\n\r\n        JugLike(jug).drip(ilk);\r\n\r\n        JugLike(jug).file(ilk, \"duty\", TWO_PERCENT_RATE);\r\n    }\r\n\r\n    function executeCommon(address changeLogAddr) internal {\r\n\r\n        address MCD_JUG = ChainlogAbstract(changeLogAddr).getAddress(\"MCD_JUG\");\r\n\r\n        setupDuty(\"USDTUSDC-A\", MCD_JUG);\r\n        setupDuty(\"USDTDAI-A\", MCD_JUG);\r\n        setupDuty(\"USDTUSDN-A\", MCD_JUG);\r\n\r\n        setupDuty(\"USDCDAI-A\", MCD_JUG);\r\n        setupDuty(\"CRV_3POOL-A\", MCD_JUG);\r\n        setupDuty(\"CRV_3POOL-B\", MCD_JUG);\r\n\r\n\r\n        ChainlogAbstract(changeLogAddr).setVersion(\"1.4.0\");\r\n    }\r\n}\r\n\r\ncontract SpellActionMainnet is SpellActionCommon {\r\n    function execute() external {\r\n        executeCommon(0xE0fb0a1B0F1db37D803bad3F6d55158291Bb7bAc);\r\n    }\r\n}\r\n    \r\n\r\n\r\ncontract SpellActionKovan is SpellActionCommon {\r\n    function execute() external {\r\n        executeCommon(0x873396d69b017e3Ed499406892E1cd2f3EE1CFA7);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract ActionSpell {\r\n    bool      public done;\r\n    address   public pause;\r\n    uint256   public expiration;\r\n\r\n\r\n    address   public action;\r\n    bytes32   public tag;\r\n    uint256   public eta;\r\n    bytes     public sig;\r\n\r\n\r\n    function setup(address deployer) internal {\r\n        expiration = block.timestamp + 30 days;\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        bytes32 _tag; assembly { _tag := extcodehash(deployer) }\r\n        action = deployer;\r\n        tag = _tag;\r\n    }\r\n\r\n    function schedule() external {\r\n        require(block.timestamp <= expiration, \"DSSSpell/spell-has-expired\");\r\n        require(eta == 0, \"spell-already-scheduled\");\r\n        eta = now + PauseLike(pause).delay();\r\n        PauseLike(pause).plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        PauseLike(pause).exec(action, tag, sig, eta);\r\n    }\r\n}\r\n\r\n\r\ncontract ActionSpellMainnet is ActionSpell {\r\n    constructor() public {\r\n        pause = 0x146921eF7A94C50b96cb53Eb9C2CA4EB25D4Bfa8;\r\n        setup(address(new SpellActionMainnet()));\r\n    }\r\n}\r\n\r\n\r\ncontract ActionSpellKovan is ActionSpell {\r\n    constructor() public {\r\n        pause = 0x95D6fBdD8bE0FfBEB62b3B3eB2A7dFD19cFae8F5;\r\n        setup(address(new SpellActionKovan()));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SpellActionMainnet","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1ce6d430bd69273d78dc418c40b3ad2aaa059b6f206d803a065a48b19060afc9"}]}