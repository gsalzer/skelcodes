{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/Globals.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nuint256 constant SECONDS_IN_THE_YEAR = 365 * 24 * 60 * 60; // 365 days * 24 hours * 60 minutes * 60 seconds\\nuint256 constant MAX_INT = type(uint256).max;\\n\\nuint256 constant DECIMALS = 10**18;\\n\\nuint256 constant PRECISION = 10**25;\\nuint256 constant PERCENTAGE_100 = 100 * PRECISION;\\n\\nuint256 constant BLOCKS_PER_DAY = 6450;\\nuint256 constant BLOCKS_PER_YEAR = BLOCKS_PER_DAY * 365;\\n\\nuint256 constant APY_TOKENS = DECIMALS;\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/LiquidityMining.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol\\\";\\n\\nimport \\\"./interfaces/IPolicyBook.sol\\\";\\nimport \\\"./interfaces/IContractsRegistry.sol\\\";\\nimport \\\"./interfaces/ILiquidityMining.sol\\\";\\nimport \\\"./interfaces/IPolicyBookRegistry.sol\\\";\\n\\nimport \\\"./abstract/AbstractDependant.sol\\\";\\n\\nimport \\\"./Globals.sol\\\";\\n\\ncontract LiquidityMining is\\n    ILiquidityMining,\\n    OwnableUpgradeable,\\n    ERC1155Receiver,\\n    AbstractDependant\\n{\\n    using Math for uint256;\\n    using SafeMath for uint256;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address[] public leaderboard;\\n    address[] public topUsers;\\n\\n    EnumerableSet.AddressSet internal allUsers;\\n    EnumerableSet.AddressSet internal teamsArr;\\n\\n    uint256 public override startLiquidityMiningTime;\\n\\n    uint256 public constant PLATINUM_NFT_ID = 1;\\n    uint256 public constant GOLD_NFT_ID = 2;\\n    uint256 public constant SILVER_NFT_ID = 3;\\n    uint256 public constant BRONZE_NFT_ID = 4;\\n\\n    uint256 public constant TOP_1_REWARD = 150000 * DECIMALS;\\n    uint256 public constant TOP_2_5_REWARD = 50000 * DECIMALS;\\n    uint256 public constant TOP_6_10_REWARD = 20000 * DECIMALS;\\n    uint256 public constant MAX_MONTH_TO_GET_REWARD = 5;\\n\\n    uint256 public constant MAX_GROUP_LEADERS_SIZE = 10;\\n    uint256 public constant MAX_LEADERBOARD_SIZE = 10;\\n    uint256 public constant MAX_TOP_USERS_SIZE = 5;\\n    uint256 public constant LM_DURATION = 2 weeks;\\n\\n    uint256 public constant FIRST_MAX_SLASHING_FEE = 50 * PRECISION;\\n    uint256 public constant SECOND_MAX_SLASHING_FEE = 99 * PRECISION;\\n    uint256 public constant SECOND_SLASHING_DURATION = 10 minutes;\\n\\n    uint256 public constant ONE_MONTH = 30 days;\\n\\n    IERC20 public bmiToken;\\n    IERC1155 public liquidityMiningNFT;\\n    IPolicyBookRegistry public policyBookRegistry;\\n\\n    // Referral link => team info\\n    mapping(address => TeamInfo) public teamInfos;\\n\\n    // User addr => Info\\n    mapping(address => UserTeamInfo) public usersTeamInfo;\\n\\n    mapping(string => bool) public existingNames;\\n\\n    // Referral link => members\\n    mapping(address => EnumerableSet.AddressSet) private teamsMembers;\\n\\n    event TeamCreated(address _referralLink, string _name);\\n    event TeamDeleted(address _referralLink, string _name);\\n    event MemberAdded(address _referralLink, address _newMember, uint256 _membersNumber);\\n    event TeamInvested(address _referralLink, address _daiInvestor, uint256 _tokensAmount);\\n    event LeaderboardUpdated(uint256 _index, address _prevLink, address _newReferralLink);\\n    event TopUsersUpdated(uint256 _index, address _prevAddr, address _newAddr);\\n    event RewardSent(address _referralLink, address _address, uint256 _reward);\\n    event NFTSent(address _address, uint256 _nftIndex);\\n\\n    function __LiquidityMining_init() external initializer {\\n        __Ownable_init();\\n    }\\n\\n    function setDependencies(IContractsRegistry _contractsRegistry)\\n        external\\n        override\\n        onlyInjectorOrZero\\n    {\\n        bmiToken = IERC20(_contractsRegistry.getBMIContract());\\n        liquidityMiningNFT = IERC1155(_contractsRegistry.getBMIUtilityNFTContract());\\n        policyBookRegistry = IPolicyBookRegistry(\\n            _contractsRegistry.getPolicyBookRegistryContract()\\n        );\\n    }\\n\\n    function startLiquidityMining() external onlyOwner {\\n        require(startLiquidityMiningTime == 0, \\\"LM: start liquidity mining is already set\\\");\\n\\n        startLiquidityMiningTime = block.timestamp;\\n    }\\n\\n    function getTopTeams() external view override returns (TeamDetails[] memory teams) {\\n        uint256 leaderboradSize = leaderboard.length;\\n\\n        teams = new TeamDetails[](leaderboradSize);\\n\\n        for (uint256 i = 0; i < leaderboradSize; i++) {\\n            teams[i] = _getTeamDetails(leaderboard[i]);\\n        }\\n    }\\n\\n    function getTopUsers() external view override returns (UserInfo[] memory users) {\\n        uint256 topUsersSize = topUsers.length;\\n\\n        users = new UserInfo[](topUsersSize);\\n\\n        for (uint256 i = 0; i < topUsersSize; i++) {\\n            address _currentUserAddr = topUsers[i];\\n\\n            users[i] = UserInfo(\\n                _currentUserAddr,\\n                teamInfos[usersTeamInfo[_currentUserAddr].teamAddr].name,\\n                usersTeamInfo[_currentUserAddr].stakedAmount,\\n                checkMainNFTReward(_currentUserAddr),\\n                checkPlatinumNFTReward(_currentUserAddr)\\n            );\\n        }\\n    }\\n\\n    function getAllTeamsLength() external view override returns (uint256) {\\n        return teamsArr.length();\\n    }\\n\\n    function getAllTeamsDetails(uint256 _offset, uint256 _limit)\\n        external\\n        view\\n        override\\n        returns (TeamDetails[] memory _teamDetailsArr)\\n    {\\n        uint256 _to = (_offset.add(_limit)).min(teamsArr.length()).max(_offset);\\n\\n        _teamDetailsArr = new TeamDetails[](_to - _offset);\\n\\n        for (uint256 i = _offset; i < _to; i++) {\\n            _teamDetailsArr[i - _offset] = _getTeamDetails(teamsArr.at(i));\\n        }\\n    }\\n\\n    function getMyTeamsLength() external view override returns (uint256) {\\n        return teamsMembers[usersTeamInfo[msg.sender].teamAddr].length();\\n    }\\n\\n    function getMyTeamMembers(uint256 _offset, uint256 _limit)\\n        external\\n        view\\n        override\\n        returns (address[] memory _teamMembers, uint256[] memory _memberStakedAmount)\\n    {\\n        EnumerableSet.AddressSet storage _members =\\n            teamsMembers[usersTeamInfo[msg.sender].teamAddr];\\n\\n        uint256 _to = (_offset.add(_limit)).min(_members.length()).max(_offset);\\n        uint256 _size = _to - _offset;\\n\\n        _teamMembers = new address[](_size);\\n        _memberStakedAmount = new uint256[](_size);\\n\\n        for (uint256 i = _offset; i < _to; i++) {\\n            address _currentMember = _members.at(i);\\n            _teamMembers[i - _offset] = _currentMember;\\n            _memberStakedAmount[i - _offset] = usersTeamInfo[_currentMember].stakedAmount;\\n        }\\n    }\\n\\n    function getAllUsersLength() external view override returns (uint256) {\\n        return allUsers.length();\\n    }\\n\\n    function getAllUsersInfo(uint256 _offset, uint256 _limit)\\n        external\\n        view\\n        override\\n        returns (UserInfo[] memory _userInfos)\\n    {\\n        uint256 _to = (_offset.add(_limit)).min(allUsers.length()).max(_offset);\\n\\n        _userInfos = new UserInfo[](_to - _offset);\\n\\n        for (uint256 i = _offset; i < _to; i++) {\\n            address _currentUserAddr = allUsers.at(i);\\n\\n            _userInfos[i - _offset] = UserInfo(\\n                _currentUserAddr,\\n                teamInfos[usersTeamInfo[_currentUserAddr].teamAddr].name,\\n                usersTeamInfo[_currentUserAddr].stakedAmount,\\n                checkMainNFTReward(_currentUserAddr),\\n                checkPlatinumNFTReward(_currentUserAddr)\\n            );\\n        }\\n    }\\n\\n    function getMyTeamInfo() external view override returns (MyTeamInfo memory _myTeamInfo) {\\n        UserTeamInfo storage userTeamInfo = usersTeamInfo[msg.sender];\\n\\n        _myTeamInfo.teamDetails = _getTeamDetails(userTeamInfo.teamAddr);\\n        _myTeamInfo.myStakedAmount = userTeamInfo.stakedAmount;\\n        _myTeamInfo.teamPlace = _getIndexInTheLeaderboard(_myTeamInfo.teamDetails.referralLink);\\n    }\\n\\n    function _getTeamDetails(address _teamAddr)\\n        internal\\n        view\\n        returns (TeamDetails memory _teamDetails)\\n    {\\n        _teamDetails = TeamDetails(\\n            teamInfos[_teamAddr].name,\\n            _teamAddr,\\n            teamsMembers[_teamAddr].length(),\\n            teamInfos[_teamAddr].totalAmount,\\n            _getTeamReward(_getIndexInTheLeaderboard(_teamAddr))\\n        );\\n    }\\n\\n    function getRewardsInfo(address user)\\n        external\\n        view\\n        override\\n        returns (UserRewardsInfo memory userRewardInfo)\\n    {\\n        if (!isLMEnded()) {\\n            return userRewardInfo; // empty\\n        }\\n\\n        userRewardInfo.teamName = teamInfos[usersTeamInfo[user].teamAddr].name;\\n\\n        userRewardInfo.totalBMIReward = getTotalUserBMIReward(user);\\n        userRewardInfo.availableBMIReward = checkAvailableBMIReward(user);\\n\\n        uint256 elapsedSeconds = block.timestamp.sub(getEndLMTime());\\n        uint256 elapsedMonths = elapsedSeconds.div(ONE_MONTH).add(1);\\n\\n        userRewardInfo.incomingPeriods = MAX_MONTH_TO_GET_REWARD > elapsedMonths\\n            ? MAX_MONTH_TO_GET_REWARD - elapsedMonths\\n            : 0;\\n\\n        userRewardInfo.timeToNextDistribution = userRewardInfo.incomingPeriods > 0\\n            ? ONE_MONTH - elapsedSeconds.mod(ONE_MONTH)\\n            : 0;\\n\\n        userRewardInfo.claimedBMI = usersTeamInfo[user]\\n            .countOfRewardedMonth\\n            .mul(userRewardInfo.totalBMIReward)\\n            .div(MAX_MONTH_TO_GET_REWARD);\\n\\n        userRewardInfo.mainNFTAvailability = checkMainNFTReward(user);\\n        userRewardInfo.platinumNFTAvailability = checkPlatinumNFTReward(user);\\n\\n        userRewardInfo.claimedNFTs = usersTeamInfo[user].isNFTDistributed;\\n    }\\n\\n    function createTeam(string calldata _teamName) external override {\\n        require(isLMLasting(), \\\"LM: LME didn't start or finished\\\");\\n        require(\\n            bytes(_teamName).length != 0 && bytes(_teamName).length <= 50,\\n            \\\"LM: Team name is too long/short\\\"\\n        );\\n        require(\\n            usersTeamInfo[msg.sender].teamAddr == address(0),\\n            \\\"LM: The user is already in the team\\\"\\n        );\\n        require(!existingNames[_teamName], \\\"LM: Team name already exists\\\");\\n\\n        teamInfos[msg.sender].name = _teamName;\\n        usersTeamInfo[msg.sender].teamAddr = msg.sender;\\n\\n        teamsArr.add(msg.sender);\\n        teamsMembers[msg.sender].add(msg.sender);\\n        existingNames[_teamName] = true;\\n\\n        allUsers.add(msg.sender);\\n\\n        emit TeamCreated(msg.sender, _teamName);\\n    }\\n\\n    function deleteTeam() external override {\\n        require(teamsMembers[msg.sender].length() == 1, \\\"LM: Unable to delete a team\\\");\\n        require(usersTeamInfo[msg.sender].stakedAmount == 0, \\\"LM: Unable to remove a team\\\");\\n\\n        string memory _teamName = teamInfos[msg.sender].name;\\n\\n        teamsArr.remove(msg.sender);\\n        delete usersTeamInfo[msg.sender];\\n        delete teamsMembers[msg.sender];\\n        delete teamInfos[msg.sender].name;\\n        delete existingNames[_teamName];\\n\\n        allUsers.remove(msg.sender);\\n\\n        emit TeamDeleted(msg.sender, _teamName);\\n    }\\n\\n    function joinTheTeam(address _referralLink) external override {\\n        require(_referralLink != address(0), \\\"LM: Invalid referral link\\\");\\n        require(teamsArr.contains(_referralLink), \\\"LM: There is no such team\\\");\\n        require(\\n            usersTeamInfo[msg.sender].teamAddr == address(0),\\n            \\\"LM: The user is already in the team\\\"\\n        );\\n\\n        teamsMembers[_referralLink].add(msg.sender);\\n\\n        usersTeamInfo[msg.sender].teamAddr = _referralLink;\\n\\n        allUsers.add(msg.sender);\\n\\n        emit MemberAdded(_referralLink, msg.sender, teamsMembers[_referralLink].length());\\n    }\\n\\n    function getSlashingPercentage() public view override returns (uint256) {\\n        uint256 endLMTime = getEndLMTime();\\n\\n        if (block.timestamp + SECOND_SLASHING_DURATION < endLMTime) {\\n            uint256 elapsed = block.timestamp.sub(startLiquidityMiningTime);\\n            uint256 feePerSecond =\\n                FIRST_MAX_SLASHING_FEE.div(LM_DURATION.sub(SECOND_SLASHING_DURATION));\\n\\n            return elapsed.mul(feePerSecond);\\n        } else {\\n            uint256 elapsed = block.timestamp.sub(endLMTime.sub(SECOND_SLASHING_DURATION));\\n            uint256 feePerSecond =\\n                SECOND_MAX_SLASHING_FEE.sub(FIRST_MAX_SLASHING_FEE).div(SECOND_SLASHING_DURATION);\\n\\n            return\\n                Math.min(\\n                    elapsed.mul(feePerSecond).add(FIRST_MAX_SLASHING_FEE),\\n                    SECOND_MAX_SLASHING_FEE\\n                );\\n        }\\n    }\\n\\n    function investDAI(uint256 _tokensAmount, address _policyBookAddr) external override {\\n        require(_tokensAmount > 0, \\\"LM: Tokens amount is zero\\\");\\n        require(isLMLasting(), \\\"LM: LME didn't start or finished\\\");\\n        require(\\n            policyBookRegistry.isPolicyBook(_policyBookAddr),\\n            \\\"LM: Can't invest to not a PolicyBook\\\"\\n        );\\n\\n        address _userTeamAddr = usersTeamInfo[msg.sender].teamAddr;\\n        uint256 _userStakedAmount = usersTeamInfo[msg.sender].stakedAmount;\\n\\n        require(_userTeamAddr != address(0), \\\"LM: User is without a team\\\");\\n\\n        uint256 _finalTokensAmount =\\n            _tokensAmount.sub(_tokensAmount.mul(getSlashingPercentage()).div(PERCENTAGE_100));\\n\\n        require(_finalTokensAmount > 0, \\\"LM: Final tokens amount is zero\\\");\\n\\n        teamInfos[_userTeamAddr].totalAmount = teamInfos[_userTeamAddr].totalAmount.add(\\n            _finalTokensAmount\\n        );\\n\\n        usersTeamInfo[msg.sender].stakedAmount = _userStakedAmount.add(_finalTokensAmount);\\n\\n        _updateTopUsers();\\n        _updateLeaderboard(_userTeamAddr);\\n        _updateGroupLeaders(_userTeamAddr);\\n\\n        emit TeamInvested(_userTeamAddr, msg.sender, _finalTokensAmount);\\n\\n        IPolicyBook(_policyBookAddr).addLiquidityFor(msg.sender, _tokensAmount);\\n    }\\n\\n    function distributeNFT() external override {\\n        require(isLMEnded(), \\\"LM: LME didn't start or still going\\\");\\n\\n        UserTeamInfo storage _userTeamInfo = usersTeamInfo[msg.sender];\\n\\n        require(!_userTeamInfo.isNFTDistributed, \\\"LM: NFT is already distributed\\\");\\n\\n        _userTeamInfo.isNFTDistributed = true;\\n\\n        uint256 _indexInTheTeam = _getIndexInTheGroupLeaders(msg.sender);\\n\\n        if (\\n            _indexInTheTeam != MAX_GROUP_LEADERS_SIZE &&\\n            _getIndexInTheLeaderboard(_userTeamInfo.teamAddr) != MAX_LEADERBOARD_SIZE\\n        ) {\\n            _sendMainNFT(_indexInTheTeam, msg.sender);\\n        }\\n\\n        _sendPlatinumNFT(msg.sender);\\n    }\\n\\n    function checkPlatinumNFTReward(address _userAddr) public view override returns (uint256) {\\n        if (isLMEnded() && _getIndexInTopUsers(_userAddr) != MAX_TOP_USERS_SIZE) {\\n            return PLATINUM_NFT_ID;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function checkMainNFTReward(address _userAddr) public view override returns (uint256) {\\n        uint256 placeInsideTeam = _getIndexInTheGroupLeaders(_userAddr);\\n\\n        if (\\n            isLMEnded() &&\\n            placeInsideTeam != MAX_GROUP_LEADERS_SIZE &&\\n            _getIndexInTheLeaderboard(usersTeamInfo[_userAddr].teamAddr) != MAX_LEADERBOARD_SIZE\\n        ) {\\n            return _getMainNFTReward(placeInsideTeam);\\n        }\\n\\n        return 0;\\n    }\\n\\n    function distributeBMIReward() external override {\\n        require(isLMEnded(), \\\"LM: LME didn't start or still going\\\");\\n\\n        address _teamAddr = usersTeamInfo[msg.sender].teamAddr;\\n        uint256 _userReward = checkAvailableBMIReward(msg.sender);\\n\\n        if (_userReward == 0) {\\n            revert(\\\"LM: No BMI reward available\\\");\\n        }\\n\\n        bmiToken.transfer(msg.sender, _userReward);\\n        emit RewardSent(_teamAddr, msg.sender, _userReward);\\n\\n        usersTeamInfo[msg.sender].countOfRewardedMonth += _getAvailableMonthForReward(msg.sender);\\n    }\\n\\n    function getTotalUserBMIReward(address _userAddr) public view override returns (uint256) {\\n        if (!isLMEnded()) {\\n            return 0;\\n        }\\n\\n        address _teamAddr = usersTeamInfo[_userAddr].teamAddr;\\n        uint256 _staked = usersTeamInfo[_userAddr].stakedAmount;\\n        uint256 _currentGroupIndex = _getIndexInTheLeaderboard(_teamAddr);\\n\\n        if (_currentGroupIndex == MAX_LEADERBOARD_SIZE || _staked == 0) {\\n            return 0;\\n        }\\n\\n        uint256 _userRewardPercent =\\n            _calculatePercentage(_staked, teamInfos[_teamAddr].totalAmount);\\n        uint256 _userReward =\\n            _getTeamReward(_currentGroupIndex).mul(_userRewardPercent).div(PERCENTAGE_100);\\n\\n        return _userReward;\\n    }\\n\\n    function checkAvailableBMIReward(address _userAddr) public view override returns (uint256) {\\n        uint256 _availableMonthCount = _getAvailableMonthForReward(_userAddr);\\n\\n        if (_availableMonthCount == 0) {\\n            return 0;\\n        }\\n\\n        return\\n            getTotalUserBMIReward(_userAddr).mul(_availableMonthCount).div(\\n                MAX_MONTH_TO_GET_REWARD\\n            );\\n    }\\n\\n    function isLMLasting() public view override returns (bool) {\\n        return startLiquidityMiningTime != 0 && getEndLMTime() >= block.timestamp;\\n    }\\n\\n    function isLMEnded() public view override returns (bool) {\\n        return startLiquidityMiningTime != 0 && getEndLMTime() < block.timestamp;\\n    }\\n\\n    function getEndLMTime() public view override returns (uint256) {\\n        return startLiquidityMiningTime.add(LM_DURATION);\\n    }\\n\\n    function _getMainNFTReward(uint256 place) internal view returns (uint256) {\\n        if (!isLMEnded() || place == MAX_GROUP_LEADERS_SIZE) {\\n            return 0;\\n        }\\n\\n        if (place == 0) {\\n            return GOLD_NFT_ID;\\n        } else if (place < 4) {\\n            return SILVER_NFT_ID;\\n        } else {\\n            return BRONZE_NFT_ID;\\n        }\\n    }\\n\\n    /// @dev NFT indices have to change when external ERC1155 is used\\n    function _sendMainNFT(uint256 _index, address _userAddr) internal {\\n        uint256 _nftIndex = _getMainNFTReward(_index);\\n\\n        liquidityMiningNFT.safeTransferFrom(address(this), _userAddr, _nftIndex, 1, \\\"\\\");\\n\\n        emit NFTSent(_userAddr, _nftIndex);\\n    }\\n\\n    function _sendPlatinumNFT(address _userAddr) internal {\\n        uint256 _topUsersLength = topUsers.length;\\n\\n        for (uint256 i = 0; i < _topUsersLength; i++) {\\n            if (_userAddr == topUsers[i]) {\\n                liquidityMiningNFT.safeTransferFrom(\\n                    address(this),\\n                    _userAddr,\\n                    PLATINUM_NFT_ID,\\n                    1,\\n                    \\\"\\\"\\n                );\\n                emit NFTSent(_userAddr, PLATINUM_NFT_ID);\\n\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _calculatePercentage(uint256 _part, uint256 _amount) internal pure returns (uint256) {\\n        if (_amount == 0) {\\n            return 0;\\n        }\\n\\n        return _part.mul(PERCENTAGE_100).div(_amount);\\n    }\\n\\n    function _getTeamReward(uint256 place) internal view returns (uint256) {\\n        if (!isLMEnded() || place == MAX_LEADERBOARD_SIZE) {\\n            return 0;\\n        }\\n\\n        if (place == 0) {\\n            return TOP_1_REWARD;\\n        } else if (place > 0 && place < 5) {\\n            return TOP_2_5_REWARD;\\n        } else {\\n            return TOP_6_10_REWARD;\\n        }\\n    }\\n\\n    function _getAvailableMonthForReward(address _userAddr) internal view returns (uint256) {\\n        return\\n            Math\\n                .min(\\n                (block.timestamp.sub(getEndLMTime())).div(ONE_MONTH).add(1),\\n                MAX_MONTH_TO_GET_REWARD\\n            )\\n                .sub(usersTeamInfo[_userAddr].countOfRewardedMonth);\\n    }\\n\\n    function _getIndexInTopUsers(address _userAddr) internal view returns (uint256) {\\n        uint256 _topUsersLength = topUsers.length;\\n\\n        for (uint256 i = 0; i < _topUsersLength; i++) {\\n            if (_userAddr == topUsers[i]) {\\n                return i;\\n            }\\n        }\\n\\n        return MAX_TOP_USERS_SIZE;\\n    }\\n\\n    function _getIndexInTheGroupLeaders(address _userAddr) internal view returns (uint256) {\\n        address _referralLink = usersTeamInfo[_userAddr].teamAddr;\\n        uint256 _size = teamInfos[_referralLink].teamLeaders.length;\\n\\n        for (uint256 i = 0; i < _size; i++) {\\n            if (_userAddr == teamInfos[_referralLink].teamLeaders[i]) {\\n                return i;\\n            }\\n        }\\n\\n        return MAX_GROUP_LEADERS_SIZE;\\n    }\\n\\n    function _getIndexInTheLeaderboard(address _referralLink) internal view returns (uint256) {\\n        uint256 _leaderBoardLength = leaderboard.length;\\n\\n        for (uint256 i = 0; i < _leaderBoardLength; i++) {\\n            if (_referralLink == leaderboard[i]) {\\n                return i;\\n            }\\n        }\\n\\n        return MAX_LEADERBOARD_SIZE;\\n    }\\n\\n    function _updateLeaderboard(address _referralLink) internal {\\n        uint256 _leaderBoardLength = leaderboard.length;\\n\\n        if (_leaderBoardLength == 0) {\\n            leaderboard.push(_referralLink);\\n            emit LeaderboardUpdated(0, address(0), _referralLink);\\n            return;\\n        }\\n\\n        uint256 _currentGroupIndex = _getIndexInTheLeaderboard(_referralLink);\\n\\n        if (_currentGroupIndex == MAX_LEADERBOARD_SIZE) {\\n            _currentGroupIndex = _leaderBoardLength++;\\n            leaderboard.push(_referralLink);\\n        }\\n\\n        if (_currentGroupIndex == 0) {\\n            return;\\n        }\\n\\n        address[] memory _addresses = leaderboard;\\n        uint256 _currentIndex = _currentGroupIndex - 1;\\n        uint256 _currentTeamAmount = teamInfos[_referralLink].totalAmount;\\n\\n        if (_currentTeamAmount > teamInfos[_addresses[_currentIndex]].totalAmount) {\\n            while (_currentTeamAmount > teamInfos[_addresses[_currentIndex]].totalAmount) {\\n                address _tmpLink = _addresses[_currentIndex];\\n                _addresses[_currentIndex] = _referralLink;\\n                _addresses[_currentIndex + 1] = _tmpLink;\\n\\n                if (_currentIndex == 0) {\\n                    break;\\n                }\\n\\n                _currentIndex--;\\n            }\\n\\n            leaderboard = _addresses;\\n\\n            emit LeaderboardUpdated(_currentIndex, _addresses[_currentIndex + 1], _referralLink);\\n        }\\n\\n        if (_leaderBoardLength > MAX_LEADERBOARD_SIZE) {\\n            leaderboard.pop();\\n        }\\n    }\\n\\n    function _updateTopUsers() internal {\\n        uint256 _topUsersLength = topUsers.length;\\n\\n        if (_topUsersLength == 0) {\\n            topUsers.push(msg.sender);\\n            emit TopUsersUpdated(0, address(0), msg.sender);\\n            return;\\n        }\\n\\n        uint256 _currentIndex = _getIndexInTopUsers(msg.sender);\\n\\n        if (_currentIndex == MAX_TOP_USERS_SIZE) {\\n            _currentIndex = _topUsersLength++;\\n            topUsers.push(msg.sender);\\n        }\\n\\n        if (_currentIndex == 0) {\\n            return;\\n        }\\n\\n        address[] memory _addresses = topUsers;\\n        uint256 _tmpIndex = _currentIndex - 1;\\n        uint256 _currentUserAmount = usersTeamInfo[msg.sender].stakedAmount;\\n\\n        if (_currentUserAmount > usersTeamInfo[_addresses[_tmpIndex]].stakedAmount) {\\n            while (_currentUserAmount > usersTeamInfo[_addresses[_tmpIndex]].stakedAmount) {\\n                address _tmpAddr = _addresses[_tmpIndex];\\n                _addresses[_tmpIndex] = msg.sender;\\n                _addresses[_tmpIndex + 1] = _tmpAddr;\\n\\n                if (_tmpIndex == 0) {\\n                    break;\\n                }\\n\\n                _tmpIndex--;\\n            }\\n\\n            topUsers = _addresses;\\n\\n            emit TopUsersUpdated(_tmpIndex, _addresses[_tmpIndex + 1], msg.sender);\\n        }\\n\\n        if (_topUsersLength > MAX_TOP_USERS_SIZE) {\\n            topUsers.pop();\\n        }\\n    }\\n\\n    function _updateGroupLeaders(address _referralLink) internal {\\n        uint256 _groupLeadersSize = teamInfos[_referralLink].teamLeaders.length;\\n\\n        if (_groupLeadersSize == 0) {\\n            teamInfos[_referralLink].teamLeaders.push(msg.sender);\\n            return;\\n        }\\n\\n        uint256 _currentIndex = _getIndexInTheGroupLeaders(msg.sender);\\n\\n        if (_currentIndex == MAX_GROUP_LEADERS_SIZE) {\\n            _currentIndex = _groupLeadersSize++;\\n            teamInfos[_referralLink].teamLeaders.push(msg.sender);\\n        }\\n\\n        if (_currentIndex == 0) {\\n            return;\\n        }\\n\\n        address[] memory _addresses = teamInfos[_referralLink].teamLeaders;\\n        uint256 _tmpIndex = _currentIndex - 1;\\n        uint256 _currentUserAmount = usersTeamInfo[msg.sender].stakedAmount;\\n\\n        if (_currentUserAmount > usersTeamInfo[_addresses[_tmpIndex]].stakedAmount) {\\n            while (_currentUserAmount > usersTeamInfo[_addresses[_tmpIndex]].stakedAmount) {\\n                address _tmpAddr = _addresses[_tmpIndex];\\n                _addresses[_tmpIndex] = msg.sender;\\n                _addresses[_tmpIndex + 1] = _tmpAddr;\\n\\n                if (_tmpIndex == 0) {\\n                    break;\\n                }\\n\\n                _tmpIndex--;\\n            }\\n\\n            teamInfos[_referralLink].teamLeaders = _addresses;\\n        }\\n\\n        if (_groupLeadersSize > MAX_GROUP_LEADERS_SIZE) {\\n            teamInfos[_referralLink].teamLeaders.pop();\\n        }\\n    }\\n\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external pure override returns (bytes4) {\\n        return 0xf23a6e61;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external pure override returns (bytes4) {\\n        return 0xbc197c81;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/abstract/AbstractDependant.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\nimport \\\"../interfaces/IContractsRegistry.sol\\\";\\n\\nabstract contract AbstractDependant {\\n    /// @dev keccak256(AbstractDependant.setInjector(address)) - 1\\n    bytes32 private constant _INJECTOR_SLOT =\\n        0xd6b8f2e074594ceb05d47c27386969754b6ad0c15e5eb8f691399cd0be980e76;\\n\\n    modifier onlyInjectorOrZero() {\\n        address _injector = injector();\\n\\n        require(_injector == address(0) || _injector == msg.sender, \\\"Dependant: Not an injector\\\");\\n        _;\\n    }\\n\\n    function setInjector(address _injector) external onlyInjectorOrZero {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            sstore(slot, _injector)\\n        }\\n    }\\n\\n    /// @dev has to apply onlyInjectorOrZero() modifier\\n    function setDependencies(IContractsRegistry) external virtual;\\n\\n    function injector() public view returns (address _injector) {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            _injector := sload(slot)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/interfaces/IClaimingRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\n\\ninterface IClaimingRegistry {\\n    enum ClaimStatus {\\n        CAN_CLAIM,\\n        UNCLAIMABLE,\\n        PENDING,\\n        AWAITING_CALCULATION,\\n        REJECTED_CAN_APPEAL,\\n        REJECTED,\\n        ACCEPTED\\n    }\\n\\n    struct ClaimInfo {\\n        address claimer;\\n        address policyBookAddress;\\n        string evidenceURI;\\n        uint256 dateSubmitted;\\n        uint256 dateEnded;\\n        bool appeal;\\n        ClaimStatus status;\\n        uint256 claimAmount;\\n    }\\n\\n    /// @notice returns anonymous voting duration\\n    function anonymousVotingDuration(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns the whole voting duration\\n    function votingDuration(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns how many time should pass before anyone could calculate a claim result\\n    function anyoneCanCalculateClaimResultAfter(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns true if a user can buy new policy of specified PolicyBook\\n    function canBuyNewPolicy(address buyer, address policyBookAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @notice submits new PolicyBook claim for the user\\n    function submitClaim(\\n        address user,\\n        address policyBookAddress,\\n        string calldata evidenceURI,\\n        uint256 cover,\\n        bool appeal\\n    ) external returns (uint256);\\n\\n    /// @notice returns true if the claim with this index exists\\n    function claimExists(uint256 index) external view returns (bool);\\n\\n    /// @notice returns claim submition time\\n    function claimSubmittedTime(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns claim end time or zero in case it is pending\\n    function claimEndTime(uint256 index) external view returns (uint256);\\n\\n    /// @notice returns true if the claim is anonymously votable\\n    function isClaimAnonymouslyVotable(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if the claim is exposably votable\\n    function isClaimExposablyVotable(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if claim is anonymously votable or exposably votable\\n    function isClaimVotable(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if a claim can be calculated by anyone\\n    function canClaimBeCalculatedByAnyone(uint256 index) external view returns (bool);\\n\\n    /// @notice returns true if this claim is pending or awaiting\\n    function isClaimPending(uint256 index) external view returns (bool);\\n\\n    /// @notice returns how many claims the holder has\\n    function countPolicyClaimerClaims(address user) external view returns (uint256);\\n\\n    /// @notice returns how many pending claims are there\\n    function countPendingClaims() external view returns (uint256);\\n\\n    /// @notice returns how many claims are there\\n    function countClaims() external view returns (uint256);\\n\\n    /// @notice returns a claim index of it's claimer and an ordinal number\\n    function claimOfOwnerIndexAt(address claimer, uint256 orderIndex)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice returns pending claim index by its ordinal index\\n    function pendingClaimIndexAt(uint256 orderIndex) external view returns (uint256);\\n\\n    /// @notice returns claim index by its ordinal index\\n    function claimIndexAt(uint256 orderIndex) external view returns (uint256);\\n\\n    /// @notice returns current active claim index by policybook and claimer\\n    function claimIndex(address claimer, address policyBookAddress)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice returns true if the claim is appealed\\n    function isClaimAppeal(uint256 index) external view returns (bool);\\n\\n    /// @notice returns current status of a claim\\n    function policyStatus(address claimer, address policyBookAddress)\\n        external\\n        view\\n        returns (ClaimStatus);\\n\\n    /// @notice returns current status of a claim\\n    function claimStatus(uint256 index) external view returns (ClaimStatus);\\n\\n    /// @notice returns the claim owner (claimer)\\n    function claimOwner(uint256 index) external view returns (address);\\n\\n    /// @notice returns the claim PolicyBook\\n    function claimPolicyBook(uint256 index) external view returns (address);\\n\\n    /// @notice returns claim info by its index\\n    function claimInfo(uint256 index) external view returns (ClaimInfo memory _claimInfo);\\n\\n    /// @notice marks the user's claim as Accepted\\n    function acceptClaim(uint256 index) external;\\n\\n    /// @notice marks the user's claim as Rejected\\n    function rejectClaim(uint256 index) external;\\n}\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/interfaces/IContractsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface IContractsRegistry {\\n    function getUniswapRouterContract() external view returns (address);\\n\\n    function getUniswapBMIToETHPairContract() external view returns (address);\\n\\n    function getWETHContract() external view returns (address);\\n\\n    function getDAIContract() external view returns (address);\\n\\n    function getBMIContract() external view returns (address);\\n\\n    function getPriceFeedContract() external view returns (address);\\n\\n    function getPolicyBookRegistryContract() external view returns (address);\\n\\n    function getPolicyBookFabricContract() external view returns (address);\\n\\n    function getBMIDAIStakingContract() external view returns (address);\\n\\n    function getRewardsGeneratorContract() external view returns (address);\\n\\n    function getBMIUtilityNFTContract() external view returns (address);\\n\\n    function getLiquidityMiningContract() external view returns (address);\\n\\n    function getClaimingRegistryContract() external view returns (address);\\n\\n    function getPolicyRegistryContract() external view returns (address);\\n\\n    function getLiquidityRegistryContract() external view returns (address);\\n\\n    function getClaimVotingContract() external view returns (address);\\n\\n    function getReinsurancePoolContract() external view returns (address);\\n\\n    function getPolicyBookAdminContract() external view returns (address);\\n\\n    function getPolicyQuoteContract() external view returns (address);\\n\\n    function getLegacyBMIStakingContract() external view returns (address);\\n\\n    function getBMIStakingContract() external view returns (address);\\n\\n    function getSTKBMIContract() external view returns (address);\\n\\n    function getVBMIContract() external view returns (address);\\n\\n    function getLegacyLiquidityMiningStakingContract() external view returns (address);\\n\\n    function getLiquidityMiningStakingContract() external view returns (address);\\n\\n    function getReputationSystemContract() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/interfaces/ILiquidityMining.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILiquidityMining {\\n    struct TeamDetails {\\n        string teamName;\\n        address referralLink;\\n        uint256 membersNumber;\\n        uint256 totalStakedAmount;\\n        uint256 totalReward;\\n    }\\n\\n    struct UserInfo {\\n        address userAddr;\\n        string teamName;\\n        uint256 stakedAmount;\\n        uint256 mainNFT; // 0 or NFT index if available\\n        uint256 platinumNFT; // 0 or NFT index if available\\n    }\\n\\n    struct UserRewardsInfo {\\n        string teamName;\\n        uint256 totalBMIReward; // total BMI reward\\n        uint256 availableBMIReward; // current claimable BMI reward\\n        uint256 incomingPeriods; // how many month are incoming\\n        uint256 timeToNextDistribution; // exact time left to next distribution\\n        uint256 claimedBMI; // actual number of claimed BMI\\n        uint256 mainNFTAvailability; // 0 or NFT index if available\\n        uint256 platinumNFTAvailability; // 0 or NFT index if available\\n        bool claimedNFTs; // true if user claimed NFTs\\n    }\\n\\n    struct MyTeamInfo {\\n        TeamDetails teamDetails;\\n        uint256 myStakedAmount;\\n        uint256 teamPlace;\\n    }\\n\\n    struct UserTeamInfo {\\n        address teamAddr;\\n        uint256 stakedAmount;\\n        uint256 countOfRewardedMonth;\\n        bool isNFTDistributed;\\n    }\\n\\n    struct TeamInfo {\\n        string name;\\n        uint256 totalAmount;\\n        address[] teamLeaders;\\n    }\\n\\n    function startLiquidityMiningTime() external view returns (uint256);\\n\\n    function getTopTeams() external view returns (TeamDetails[] memory teams);\\n\\n    function getTopUsers() external view returns (UserInfo[] memory users);\\n\\n    function getAllTeamsLength() external view returns (uint256);\\n\\n    function getAllTeamsDetails(uint256 _offset, uint256 _limit)\\n        external\\n        view\\n        returns (TeamDetails[] memory _teamDetailsArr);\\n\\n    function getMyTeamsLength() external view returns (uint256);\\n\\n    function getMyTeamMembers(uint256 _offset, uint256 _limit)\\n        external\\n        view\\n        returns (address[] memory _teamMembers, uint256[] memory _memberStakedAmount);\\n\\n    function getAllUsersLength() external view returns (uint256);\\n\\n    function getAllUsersInfo(uint256 _offset, uint256 _limit)\\n        external\\n        view\\n        returns (UserInfo[] memory _userInfos);\\n\\n    function getMyTeamInfo() external view returns (MyTeamInfo memory _myTeamInfo);\\n\\n    function getRewardsInfo(address user)\\n        external\\n        view\\n        returns (UserRewardsInfo memory userRewardInfo);\\n\\n    function createTeam(string calldata _teamName) external;\\n\\n    function deleteTeam() external;\\n\\n    function joinTheTeam(address _referralLink) external;\\n\\n    function getSlashingPercentage() external view returns (uint256);\\n\\n    function investDAI(uint256 _tokensAmount, address _policyBookAddr) external;\\n\\n    function distributeNFT() external;\\n\\n    function checkPlatinumNFTReward(address _userAddr) external view returns (uint256);\\n\\n    function checkMainNFTReward(address _userAddr) external view returns (uint256);\\n\\n    function distributeBMIReward() external;\\n\\n    function getTotalUserBMIReward(address _userAddr) external view returns (uint256);\\n\\n    function checkAvailableBMIReward(address _userAddr) external view returns (uint256);\\n\\n    /// @notice checks if liquidity mining event is lasting (startLiquidityMining() has been called)\\n    /// @return true if LM is started and not ended, false otherwise\\n    function isLMLasting() external view returns (bool);\\n\\n    /// @notice checks if liquidity mining event is finished. In order to be finished, it has to be started\\n    /// @return true if LM is finished, false if event is still going or not started\\n    function isLMEnded() external view returns (bool);\\n\\n    function getEndLMTime() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/interfaces/IPolicyBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\nimport \\\"./IClaimingRegistry.sol\\\";\\n\\ninterface IPolicyBook {\\n    enum WithdrawalStatus {NONE, PENDING, READY, EXPIRED}\\n\\n    struct PolicyHolder {\\n        uint256 coverTokens;\\n        uint256 startEpochNumber;\\n        uint256 endEpochNumber;\\n        uint256 paid;\\n    }\\n\\n    struct WithdrawalInfo {\\n        uint256 withdrawalAmount;\\n        uint256 readyToWithdrawDate;\\n        bool withdrawalAllowed;\\n    }\\n\\n    function EPOCH_DURATION() external view returns (uint256);\\n\\n    function READY_TO_WITHDRAW_PERIOD() external view returns (uint256);\\n\\n    function whitelisted() external view returns (bool);\\n\\n    function epochStartTime() external view returns (uint256);\\n\\n    // @TODO: should we let DAO to change contract address?\\n    /// @notice Returns address of contract this PolicyBook covers, access: ANY\\n    /// @return _contract is address of covered contract\\n    function insuranceContractAddress() external view returns (address _contract);\\n\\n    /// @notice Returns type of contract this PolicyBook covers, access: ANY\\n    /// @return _type is type of contract\\n    function contractType() external view returns (IPolicyBookFabric.ContractType _type);\\n\\n    function totalLiquidity() external view returns (uint256);\\n\\n    function totalCoverTokens() external view returns (uint256);\\n\\n    function withdrawalsInfo(address _userAddr)\\n        external\\n        view\\n        returns (\\n            uint256 _withdrawalAmount,\\n            uint256 _readyToWithdrawDate,\\n            bool _withdrawalAllowed\\n        );\\n\\n    function __PolicyBook_init(\\n        address _insuranceContract,\\n        IPolicyBookFabric.ContractType _contractType,\\n        string calldata _description,\\n        string calldata _projectSymbol\\n    ) external;\\n\\n    function whitelist(bool _whitelisted) external;\\n\\n    function getEpoch(uint256 time) external view returns (uint256);\\n\\n    /// @notice get DAI equivalent\\n    function convertDAIXToDAI(uint256 _amount) external view returns (uint256);\\n\\n    /// @notice get DAIx equivalent\\n    function convertDAIToDAIX(uint256 _amount) external view returns (uint256);\\n\\n    /// @notice returns how many BMI tokens needs to approve in order to submit a claim\\n    function getClaimApprovalAmount(address user) external view returns (uint256);\\n\\n    /// @notice submits new claim of the policy book\\n    function submitClaimAndInitializeVoting(string calldata evidenceURI) external;\\n\\n    /// @notice submits new appeal claim of the policy book\\n    function submitAppealAndInitializeVoting(string calldata evidenceURI) external;\\n\\n    /// @notice updates info on claim acceptance\\n    function commitClaim(\\n        address claimer,\\n        uint256 claimAmount,\\n        uint256 claimEndTime,\\n        IClaimingRegistry.ClaimStatus status\\n    ) external;\\n\\n    /// @notice function to get precise current cover and liquidity\\n    function getNewCoverAndLiquidity()\\n        external\\n        view\\n        returns (uint256 newTotalCoverTokens, uint256 newTotalLiquidity);\\n\\n    /// @notice view function to get precise policy price\\n    function getPolicyPrice(uint256 _epochsNumber, uint256 _coverTokens)\\n        external\\n        view\\n        returns (uint256 totalSeconds, uint256 totalPrice);\\n\\n    function buyPolicyFor(\\n        address _buyer,\\n        uint256 _epochsNumber,\\n        uint256 _coverTokens\\n    ) external;\\n\\n    /// @notice Let user to buy policy by supplying DAI, access: ANY\\n    /// @param _durationSeconds is number of seconds to cover\\n    /// @param _coverTokens is number of tokens to cover\\n    function buyPolicy(uint256 _durationSeconds, uint256 _coverTokens) external;\\n\\n    function updateEpochsInfo() external;\\n\\n    function secondsToEndCurrentEpoch() external view returns (uint256);\\n\\n    /// @notice Let user to add liquidity by supplying DAI, access: ANY\\n    /// @param _liqudityAmount is amount of DAI tokens to secure\\n    function addLiquidity(uint256 _liqudityAmount) external;\\n\\n    /// @notice Let eligible contracts add liqiudity for another user by supplying DAI\\n    /// @param _liquidityHolderAddr is address of address to assign cover\\n    /// @param _liqudityAmount is amount of DAI tokens to secure\\n    function addLiquidityFor(address _liquidityHolderAddr, uint256 _liqudityAmount) external;\\n\\n    function addLiquidityAndStake(uint256 _liquidityAmount, uint256 _bmiDAIxAmount) external;\\n\\n    function getAvailableDAIXWithdrawableAmount(address _userAddr) external view returns (uint256);\\n\\n    function getWithdrawalStatus(address _userAddr) external view returns (WithdrawalStatus);\\n\\n    function requestWithdrawal(uint256 _tokensToWithdraw) external;\\n\\n    function requestWithdrawalWithPermit(\\n        uint256 _tokensToWithdraw,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    function unlockTokens() external;\\n\\n    /// @notice Let user to withdraw deposited liqiudity, access: ANY\\n    function withdrawLiquidity() external;\\n\\n    function getAPY() external view returns (uint256);\\n\\n    /// @notice Getting user stats, access: ANY\\n    function userStats(address _user) external view returns (PolicyHolder memory);\\n\\n    /// @notice Getting number stats, access: ANY\\n    /// @return _maxCapacities is a max token amount that a user can buy\\n    /// @return _totalDaiLiquidity is PolicyBook's liquidity\\n    /// @return _stakedDAI is how much DAI are staked on this PolicyBook\\n    /// @return _annualProfitYields is its APY\\n    /// @return _annualInsuranceCost is percentage of cover tokens that is required to be paid for 1 year of insurance\\n    function numberStats()\\n        external\\n        view\\n        returns (\\n            uint256 _maxCapacities,\\n            uint256 _totalDaiLiquidity,\\n            uint256 _stakedDAI,\\n            uint256 _annualProfitYields,\\n            uint256 _annualInsuranceCost,\\n            uint256 _bmiDaiRatio\\n        );\\n\\n    /// @notice Getting info, access: ANY\\n    /// @return _symbol is the symbol of PolicyBook (bmiDaiX)\\n    /// @return _insuredContract is an addres of insured contract\\n    /// @return _contractType is a type of insured contract\\n    /// @return _whitelisted is a state of whitelisting\\n    function info()\\n        external\\n        view\\n        returns (\\n            string memory _symbol,\\n            address _insuredContract,\\n            IPolicyBookFabric.ContractType _contractType,\\n            bool _whitelisted\\n        );\\n}\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/interfaces/IPolicyBookFabric.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\ninterface IPolicyBookFabric {\\n    enum ContractType {CONTRACT, STABLECOIN, SERVICE, EXCHANGE}\\n\\n    /// @notice Create new Policy Book contract, access: ANY\\n    /// @param _contract is Contract to create policy book for\\n    /// @param _contractType is Contract to create policy book for\\n    /// @param _description is bmiDAIx token desription for this policy book\\n    /// @param _projectSymbol replaces x in bmiDAIx token symbol\\n    /// @param _initialDeposit is an amount user deposits on creation (addLiquidity())\\n    /// @return _policyBook is address of created contract\\n    function create(\\n        address _contract,\\n        ContractType _contractType,\\n        string calldata _description,\\n        string calldata _projectSymbol,\\n        uint256 _initialDeposit\\n    ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"/Users/home/BMI/bridgemutual-core/contracts/interfaces/IPolicyBookRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IPolicyBookFabric.sol\\\";\\n\\ninterface IPolicyBookRegistry {\\n    struct PolicyBookStats {\\n        string symbol;\\n        address insuredContract;\\n        IPolicyBookFabric.ContractType contractType;\\n        uint256 maxCapacity;\\n        uint256 totalDaiLiquidity;\\n        uint256 stakedDAI;\\n        uint256 APY;\\n        uint256 annualInsuranceCost;\\n        uint256 bmiDaiRatio;\\n        bool whitelisted;\\n    }\\n\\n    /// @notice Adds PolicyBook to registry, access: PolicyFabric\\n    function add(\\n        address insuredContract,\\n        IPolicyBookFabric.ContractType contractType,\\n        address policyBook\\n    ) external;\\n\\n    function whitelist(address policyBookAddress, bool whitelisted) external;\\n\\n    /// @notice returns required allowances for the policybooks\\n    function getPoliciesPrices(\\n        address[] calldata policyBooks,\\n        uint256[] calldata epochsNumbers,\\n        uint256[] calldata coversTokens\\n    ) external view returns (uint256[] memory _durations, uint256[] memory _allowances);\\n\\n    /// @notice Buys a batch of policies\\n    function buyPolicyBatch(\\n        address[] calldata policyBooks,\\n        uint256[] calldata epochsNumbers,\\n        uint256[] calldata coversTokens\\n    ) external;\\n\\n    /// @notice Checks if provided address is a PolicyBook\\n    function isPolicyBook(address policyBook) external view returns (bool);\\n\\n    /// @notice Returns number of registered PolicyBooks with certain contract type\\n    function countByType(IPolicyBookFabric.ContractType contractType)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Returns number of registered PolicyBooks, access: ANY\\n    function count() external view returns (uint256);\\n\\n    function countByTypeWhitelisted(IPolicyBookFabric.ContractType contractType)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function countWhitelisted() external view returns (uint256);\\n\\n    /// @notice Listing registered PolicyBooks with certain contract type, access: ANY\\n    /// @return _policyBooksArr is array of registered PolicyBook addresses with certain contract type\\n    function listByType(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr);\\n\\n    /// @notice Listing registered PolicyBooks, access: ANY\\n    /// @return _policyBooksArr is array of registered PolicyBook addresses\\n    function list(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr);\\n\\n    function listByTypeWhitelisted(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr);\\n\\n    function listWhitelisted(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr);\\n\\n    /// @notice Listing registered PolicyBooks with stats and certain contract type, access: ANY\\n    function listWithStatsByType(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    /// @notice Listing registered PolicyBooks with stats, access: ANY\\n    function listWithStats(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    function listWithStatsByTypeWhitelisted(\\n        IPolicyBookFabric.ContractType contractType,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    function listWithStatsWhitelisted(uint256 offset, uint256 limit)\\n        external\\n        view\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\n\\n    /// @notice Getting stats from policy books, access: ANY\\n    /// @param policyBooks is list of PolicyBooks addresses\\n    function stats(address[] calldata policyBooks)\\n        external\\n        view\\n        returns (PolicyBookStats[] memory _stats);\\n\\n    /// @notice Return existing Policy Book contract, access: ANY\\n    /// @param insuredContract is contract address to lookup for created IPolicyBook\\n    function policyBookFor(address insuredContract) external view returns (address);\\n\\n    /// @notice Getting stats from policy books, access: ANY\\n    /// @param insuredContracts is list of insuredContracts in registry\\n    function statsByInsuredContracts(address[] calldata insuredContracts)\\n        external\\n        view\\n        returns (PolicyBookStats[] memory _stats);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    constructor() internal {\\n        _registerInterface(\\n            ERC1155Receiver(0).onERC1155Received.selector ^\\n            ERC1155Receiver(0).onERC1155BatchReceived.selector\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_prevLink\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newReferralLink\",\"type\":\"address\"}],\"name\":\"LeaderboardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_referralLink\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newMember\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_membersNumber\",\"type\":\"uint256\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nftIndex\",\"type\":\"uint256\"}],\"name\":\"NFTSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_referralLink\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"RewardSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_referralLink\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"TeamCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_referralLink\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"TeamDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_referralLink\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_daiInvestor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokensAmount\",\"type\":\"uint256\"}],\"name\":\"TeamInvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_prevAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAddr\",\"type\":\"address\"}],\"name\":\"TopUsersUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BRONZE_NFT_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FIRST_MAX_SLASHING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOLD_NFT_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LM_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_GROUP_LEADERS_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LEADERBOARD_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_MONTH_TO_GET_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOP_USERS_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLATINUM_NFT_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECOND_MAX_SLASHING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECOND_SLASHING_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SILVER_NFT_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOP_1_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOP_2_5_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOP_6_10_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__LiquidityMining_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bmiToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"checkAvailableBMIReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"checkMainNFTReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"checkPlatinumNFTReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"}],\"name\":\"createTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeBMIReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"existingNames\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getAllTeamsDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"teamName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referralLink\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"membersNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiquidityMining.TeamDetails[]\",\"name\":\"_teamDetailsArr\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTeamsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getAllUsersInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"teamName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mainNFT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platinumNFT\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiquidityMining.UserInfo[]\",\"name\":\"_userInfos\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUsersLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndLMTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyTeamInfo\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"teamName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referralLink\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"membersNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiquidityMining.TeamDetails\",\"name\":\"teamDetails\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"myStakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamPlace\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiquidityMining.MyTeamInfo\",\"name\":\"_myTeamInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getMyTeamMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_teamMembers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_memberStakedAmount\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyTeamsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRewardsInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"teamName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalBMIReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableBMIReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incomingPeriods\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeToNextDistribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedBMI\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mainNFTAvailability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platinumNFTAvailability\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimedNFTs\",\"type\":\"bool\"}],\"internalType\":\"struct ILiquidityMining.UserRewardsInfo\",\"name\":\"userRewardInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlashingPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTopTeams\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"teamName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"referralLink\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"membersNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiquidityMining.TeamDetails[]\",\"name\":\"teams\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTopUsers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"teamName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mainNFT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"platinumNFT\",\"type\":\"uint256\"}],\"internalType\":\"struct ILiquidityMining.UserInfo[]\",\"name\":\"users\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getTotalUserBMIReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"injector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_policyBookAddr\",\"type\":\"address\"}],\"name\":\"investDAI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLMEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLMLasting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referralLink\",\"type\":\"address\"}],\"name\":\"joinTheTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"leaderboard\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityMiningNFT\",\"outputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyBookRegistry\",\"outputs\":[{\"internalType\":\"contract IPolicyBookRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IContractsRegistry\",\"name\":\"_contractsRegistry\",\"type\":\"address\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"name\":\"setInjector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startLiquidityMining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startLiquidityMiningTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamInfos\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"topUsers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersTeamInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"teamAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countOfRewardedMonth\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isNFTDistributed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LiquidityMining","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}