{"status":"1","message":"OK","result":[{"SourceCode":"from vyper.interfaces import ERC20\r\n\r\nimplements: ERC20\r\n\r\nevent Transfer:\r\n    sender: indexed(address)\r\n    receiver: indexed(address)\r\n    value: uint256\r\n\r\n\r\nevent Approval:\r\n    owner: indexed(address)\r\n    spender: indexed(address)\r\n    value: uint256\r\n\r\n\r\nallowance: public(HashMap[address, HashMap[address, uint256]])\r\nbalanceOf: public(HashMap[address, uint256])\r\ntotalSupply: public(uint256)\r\nnonces: public(HashMap[address, uint256])\r\nDOMAIN_SEPARATOR: public(bytes32)\r\nDOMAIN_TYPE_HASH: constant(bytes32) = keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)')\r\nPERMIT_TYPE_HASH: constant(bytes32) = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\")\r\n\r\nrenDOGE: constant(address) = 0x3832d2F059E55934220881F831bE501D180671A7\r\nWDOGE: constant(address) = 0x35a532d376FFd9a705d0Bb319532837337A398E7\r\nSHIB: constant(address) = 0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE\r\nAKITA: constant(address) = 0x3301Ee63Fb29F863f2333Bd4466acb46CD8323E6\r\nWOOFY: constant(address) = 0xD0660cD418a64a1d44E9214ad8e459324D8157f1\r\n\r\n@external\r\ndef __init__():\r\n    self.DOMAIN_SEPARATOR = keccak256(\r\n        concat(\r\n            DOMAIN_TYPE_HASH,\r\n            keccak256(convert(\"Dog5\", Bytes[4])),\r\n            keccak256(convert(\"1\", Bytes[1])),\r\n            convert(chain.id, bytes32),\r\n            convert(self, bytes32)\r\n        )\r\n    )\r\n\r\n\r\n@view\r\n@external\r\ndef name() -> String[4]:\r\n    return \"Dog5\"\r\n\r\n\r\n@view\r\n@external\r\ndef symbol() -> String[4]:\r\n    return \"DOG5\"\r\n\r\n\r\n@view\r\n@external\r\ndef decimals() -> uint256:\r\n    return 18\r\n\r\n\r\n@internal\r\ndef _mint(receiver: address, amount: uint256):\r\n    assert not receiver in [self, ZERO_ADDRESS]\r\n\r\n    self.balanceOf[receiver] += amount\r\n    self.totalSupply += amount\r\n\r\n    log Transfer(ZERO_ADDRESS, receiver, amount)\r\n\r\n\r\n@internal\r\ndef _burn(sender: address, amount: uint256):\r\n    self.balanceOf[sender] -= amount\r\n    self.totalSupply -= amount\r\n\r\n    log Transfer(sender, ZERO_ADDRESS, amount)\r\n\r\n\r\n@internal\r\ndef _transfer(sender: address, receiver: address, amount: uint256):\r\n    assert not receiver in [self, ZERO_ADDRESS]\r\n\r\n    self.balanceOf[sender] -= amount\r\n    self.balanceOf[receiver] += amount\r\n\r\n    log Transfer(sender, receiver, amount)\r\n\r\n\r\n@external\r\ndef transfer(receiver: address, amount: uint256) -> bool:\r\n    self._transfer(msg.sender, receiver, amount)\r\n    return True\r\n\r\n\r\n@external\r\ndef transferFrom(sender: address, receiver: address, amount: uint256) -> bool:\r\n    self.allowance[sender][msg.sender] -= amount\r\n    self._transfer(sender, receiver, amount)\r\n    return True\r\n\r\n\r\n@external\r\ndef approve(spender: address, amount: uint256) -> bool:\r\n    self.allowance[msg.sender][spender] = amount\r\n    log Approval(msg.sender, spender, amount)\r\n    return True\r\n\r\n\r\n@external\r\ndef woof(amount: uint256 = MAX_UINT256, receiver: address = msg.sender) -> bool:\r\n    mint_amount: uint256 = min(amount, ERC20(renDOGE).balanceOf(msg.sender))\r\n    assert ERC20(SHIB).transferFrom(msg.sender, self, mint_amount*(10**10)*50000)\r\n    assert ERC20(AKITA).transferFrom(msg.sender, self, mint_amount*(10**10)*200000)\r\n    assert ERC20(WDOGE).transferFrom(msg.sender, self, mint_amount*(10**10))\r\n    assert ERC20(renDOGE).transferFrom(msg.sender, self, mint_amount)\r\n    assert ERC20(WOOFY).transferFrom(msg.sender, self, mint_amount*(10**4)*10)\r\n    self._mint(receiver, mint_amount*(10**10))\r\n    return True\r\n\r\n\r\n@external\r\ndef unwoof(amount: uint256 = MAX_UINT256, receiver: address = msg.sender) -> bool:\r\n    burn_amount: uint256 = min(amount, self.balanceOf[msg.sender])\r\n    self._burn(msg.sender, burn_amount)\r\n    assert ERC20(SHIB).transfer(receiver, burn_amount*50000)\r\n    assert ERC20(AKITA).transfer(receiver, burn_amount*200000)\r\n    assert ERC20(WDOGE).transfer(receiver, burn_amount)\r\n    assert ERC20(renDOGE).transfer(receiver, burn_amount/(10**10))\t\r\n    assert ERC20(WOOFY).transfer(receiver, burn_amount*10/(10**6))\t\t\r\n    return True\r\n\r\n\r\n@external\r\ndef permit(owner: address, spender: address, amount: uint256, expiry: uint256, signature: Bytes[65]) -> bool:\r\n    assert owner != ZERO_ADDRESS  # dev: invalid owner\r\n    assert expiry == 0 or expiry >= block.timestamp  # dev: permit expired\r\n    nonce: uint256 = self.nonces[owner]\r\n    digest: bytes32 = keccak256(\r\n        concat(\r\n            b'\\x19\\x01',\r\n            self.DOMAIN_SEPARATOR,\r\n            keccak256(\r\n                concat(\r\n                    PERMIT_TYPE_HASH,\r\n                    convert(owner, bytes32),\r\n                    convert(spender, bytes32),\r\n                    convert(amount, bytes32),\r\n                    convert(nonce, bytes32),\r\n                    convert(expiry, bytes32),\r\n                )\r\n            )\r\n        )\r\n    )\r\n    # NOTE: signature is packed as r, s, v\r\n    r: uint256 = convert(slice(signature, 0, 32), uint256)\r\n    s: uint256 = convert(slice(signature, 32, 32), uint256)\r\n    v: uint256 = convert(slice(signature, 64, 1), uint256)\r\n    assert ecrecover(digest, v, r, s) == owner  # dev: invalid signature\r\n    self.allowance[owner][spender] = amount\r\n    self.nonces[owner] = nonce + 1\r\n    log Approval(owner, spender, amount)\r\n    return True","ABI":"[{\"name\":\"Transfer\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"receiver\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"gas\":5916},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"gas\":5946},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":348},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":78588},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":116239},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":37881},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"woof\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"woof\",\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"woof\",\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"unwoof\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"unwoof\",\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"unwoof\",\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"receiver\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"permit\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"expiry\",\"type\":\"uint256\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":91134},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"},{\"name\":\"arg1\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":3088},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2903},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2718},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"nonces\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2963},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"DOMAIN_SEPARATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"gas\":2778}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.12","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}