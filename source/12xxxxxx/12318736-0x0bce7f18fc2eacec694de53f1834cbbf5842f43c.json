{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.3;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/// @title Contains 512-bit math functions\r\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\r\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\r\nlibrary FullMath {\r\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n    /// @param a The multiplicand\r\n    /// @param b The multiplier\r\n    /// @param denominator The divisor\r\n    /// @return result The 256-bit result\r\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\r\n    function mulDiv(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        // 512-bit multiply [prod1 prod0] = a * b\r\n        // Compute the product mod 2**256 and mod 2**256 - 1\r\n        // then use the Chinese Remainder Theorem to reconstruct\r\n        // the 512 bit result. The result is stored in two 256\r\n        // variables such that product = prod1 * 2**256 + prod0\r\n        uint256 prod0; // Least significant 256 bits of the product\r\n        uint256 prod1; // Most significant 256 bits of the product\r\n        assembly {\r\n            let mm := mulmod(a, b, not(0))\r\n            prod0 := mul(a, b)\r\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n        }\r\n\r\n        // Handle non-overflow cases, 256 by 256 division\r\n        if (prod1 == 0) {\r\n            require(denominator > 0);\r\n            assembly {\r\n                result := div(prod0, denominator)\r\n            }\r\n            return result;\r\n        }\r\n\r\n        // Make sure the result is less than 2**256.\r\n        // Also prevents denominator == 0\r\n        require(denominator > prod1);\r\n\r\n        ///////////////////////////////////////////////\r\n        // 512 by 256 division.\r\n        ///////////////////////////////////////////////\r\n\r\n        // Make division exact by subtracting the remainder from [prod1 prod0]\r\n        // Compute remainder using mulmod\r\n        uint256 remainder;\r\n        assembly {\r\n            remainder := mulmod(a, b, denominator)\r\n        }\r\n        // Subtract 256 bit number from 512 bit number\r\n        assembly {\r\n            prod1 := sub(prod1, gt(remainder, prod0))\r\n            prod0 := sub(prod0, remainder)\r\n        }\r\n\r\n        // Factor powers of two out of denominator\r\n        // Compute largest power of two divisor of denominator.\r\n        // Always >= 1.\r\n        uint256 twos = (type(uint256).max - denominator + 1) & denominator;\r\n        // Divide denominator by power of two\r\n        assembly {\r\n            denominator := div(denominator, twos)\r\n        }\r\n\r\n        // Divide [prod1 prod0] by the factors of two\r\n        assembly {\r\n            prod0 := div(prod0, twos)\r\n        }\r\n        // Shift in bits from prod1 into prod0. For this we need\r\n        // to flip `twos` such that it is 2**256 / twos.\r\n        // If twos is zero, then it becomes one\r\n        assembly {\r\n            twos := add(div(sub(0, twos), twos), 1)\r\n        }\r\n        prod0 |= prod1 * twos;\r\n\r\n        // Invert denominator mod 2**256\r\n        // Now that denominator is an odd number, it has an inverse\r\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\r\n        // Compute the inverse by starting with a seed that is correct\r\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\r\n        uint256 inv = (3 * denominator) ^ 2;\r\n        // Now use Newton-Raphson iteration to improve the precision.\r\n        // Thanks to Hensel's lifting lemma, this also works in modular\r\n        // arithmetic, doubling the correct bits in each step.\r\n        inv *= 2 - denominator * inv; // inverse mod 2**8\r\n        inv *= 2 - denominator * inv; // inverse mod 2**16\r\n        inv *= 2 - denominator * inv; // inverse mod 2**32\r\n        inv *= 2 - denominator * inv; // inverse mod 2**64\r\n        inv *= 2 - denominator * inv; // inverse mod 2**128\r\n        inv *= 2 - denominator * inv; // inverse mod 2**256\r\n\r\n        // Because the division is now exact we can divide by multiplying\r\n        // with the modular inverse of denominator. This will give us the\r\n        // correct result modulo 2**256. Since the precoditions guarantee\r\n        // that the outcome is less than 2**256, this is the final result.\r\n        // We don't need to compute the high bits of the result and prod1\r\n        // is no longer required.\r\n        result = prod0 * inv;\r\n        return result;\r\n    }\r\n\r\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n    /// @param a The multiplicand\r\n    /// @param b The multiplier\r\n    /// @param denominator The divisor\r\n    /// @return result The 256-bit result\r\n    function mulDivRoundingUp(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        result = mulDiv(a, b, denominator);\r\n        if (mulmod(a, b, denominator) > 0) {\r\n            require(result < type(uint256).max);\r\n            result++;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\nabstract contract MinterReceiver is ERC165 {\r\n    function onSharesMinted(\r\n        uint40 stakeId,\r\n        address supplier,\r\n        uint72 stakedHearts,\r\n        uint72 stakeShares\r\n    ) external virtual;\r\n\r\n    function onEarningsMinted(uint40 stakeId, uint72 heartsEarned)\r\n        external\r\n        virtual;\r\n\r\n    function supportsInterface(bytes4 interfaceId)\r\n        public\r\n        view\r\n        virtual\r\n        override\r\n        returns (bool)\r\n    {\r\n        return\r\n            interfaceId == type(MinterReceiver).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n\r\ncontract ShareMarket is Ownable, MinterReceiver {\r\n    IERC20 public immutable hexContract;\r\n    address public immutable minterContract;\r\n    uint256 public buyerFee = 10;\r\n\r\n    uint256 private constant FEE_SCALE = 1000;\r\n\r\n    struct ShareOrder {\r\n        uint40 stakeId;\r\n        uint72 sharesPurchased;\r\n        address shareReceiver;\r\n    }\r\n    struct ShareListing {\r\n        uint8 buyerFee;\r\n        uint72 heartsStaked;\r\n        uint72 sharesTotal;\r\n        uint72 sharesAvailable;\r\n        uint72 heartsEarned;\r\n        uint72 supplierHeartsOwed;\r\n        address supplier;\r\n        mapping(address => uint72) shareOwners;\r\n    }\r\n    mapping(uint40 => ShareListing) public shareListings;\r\n\r\n    event BuyerFeeUpdate(uint8 oldFee, uint8 newFee);\r\n    event AddListing(\r\n        uint40 indexed stakeId,\r\n        address indexed supplier,\r\n        uint72 shares\r\n    );\r\n    event SharesUpdate(\r\n        uint40 indexed stakeId,\r\n        address indexed updater,\r\n        uint72 sharesAvailable\r\n    );\r\n    event AddEarnings(uint40 indexed stakeId, uint72 heartsEarned);\r\n    event BuyShares(\r\n        uint40 indexed stakeId,\r\n        address indexed owner,\r\n        uint72 sharesPurchased,\r\n        uint72 sharesOwned\r\n    );\r\n    event ClaimEarnings(\r\n        uint40 indexed stakeId,\r\n        address indexed claimer,\r\n        uint256 heartsClaimed\r\n    );\r\n    event SupplierWithdraw(\r\n        uint40 indexed stakeId,\r\n        address indexed supplier,\r\n        uint72 heartsWithdrawn\r\n    );\r\n\r\n    uint256 private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, \"LOCKED\");\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    constructor(IERC20 _hex, address _minter) {\r\n        hexContract = _hex;\r\n        minterContract = _minter;\r\n    }\r\n\r\n    function updateBuyerFee(uint8 newBuyerFee) external onlyOwner {\r\n        emit BuyerFeeUpdate(uint8(buyerFee), newBuyerFee);\r\n        buyerFee = uint256(newBuyerFee);\r\n    }\r\n\r\n    function listingDetails(uint40 stakeId)\r\n        public\r\n        view\r\n        returns (\r\n            uint72 hearts,\r\n            uint72 shares,\r\n            uint72 sharesAvailable\r\n        )\r\n    {\r\n        ShareListing storage listing = shareListings[stakeId];\r\n        hearts = listing.heartsStaked;\r\n        shares = _marketShares(listing.sharesTotal, listing.buyerFee);\r\n        sharesAvailable = listing.sharesAvailable;\r\n    }\r\n\r\n    function sharesOwned(uint40 stakeId, address owner)\r\n        public\r\n        view\r\n        returns (uint72)\r\n    {\r\n        return shareListings[stakeId].shareOwners[owner];\r\n    }\r\n\r\n    function _supplierShares(uint72 sharesTotal, uint256 fee)\r\n        private\r\n        pure\r\n        returns (uint72)\r\n    {\r\n        return uint72(FullMath.mulDiv(sharesTotal, fee, FEE_SCALE));\r\n    }\r\n\r\n    function _marketShares(uint72 sharesTotal, uint256 fee)\r\n        private\r\n        pure\r\n        returns (uint72)\r\n    {\r\n        return sharesTotal - _supplierShares(sharesTotal, fee);\r\n    }\r\n\r\n    function onSharesMinted(\r\n        uint40 stakeId,\r\n        address supplier,\r\n        uint72 stakedHearts,\r\n        uint72 stakeShares\r\n    ) external override {\r\n        require(msg.sender == minterContract, \"CALLER_NOT_MINTER\");\r\n\r\n        uint72 supplierShares = _supplierShares(stakeShares, buyerFee);\r\n        uint72 marketShares = _marketShares(stakeShares, buyerFee);\r\n\r\n        ShareListing storage listing = shareListings[stakeId];\r\n        listing.buyerFee = uint8(buyerFee);\r\n        listing.heartsStaked = stakedHearts;\r\n        listing.sharesTotal = stakeShares;\r\n        listing.sharesAvailable = marketShares;\r\n        listing.supplier = supplier;\r\n        emit AddListing(stakeId, supplier, marketShares);\r\n\r\n        listing.shareOwners[supplier] = supplierShares;\r\n        emit BuyShares(stakeId, supplier, 0, supplierShares);\r\n    }\r\n\r\n    function onEarningsMinted(uint40 stakeId, uint72 heartsEarned)\r\n        external\r\n        override\r\n    {\r\n        require(msg.sender == minterContract, \"CALLER_NOT_MINTER\");\r\n\r\n        shareListings[stakeId].heartsEarned = heartsEarned;\r\n\r\n        emit AddEarnings(stakeId, heartsEarned);\r\n    }\r\n\r\n    function _buyShares(\r\n        uint40 stakeId,\r\n        address shareReceiver,\r\n        uint72 sharesPurchased\r\n    ) private returns (uint72 heartsOwed) {\r\n        require(sharesPurchased != 0, \"INSUFFICIENT_SHARES_PURCHASED\");\r\n\r\n        ShareListing storage listing = shareListings[stakeId];\r\n\r\n        require(\r\n            sharesPurchased <= listing.sharesAvailable,\r\n            \"INSUFFICIENT_SHARES_AVAILABLE\"\r\n        );\r\n\r\n        heartsOwed = uint72(\r\n            FullMath.mulDivRoundingUp(\r\n                sharesPurchased,\r\n                listing.heartsStaked,\r\n                _marketShares(listing.sharesTotal, listing.buyerFee)\r\n            )\r\n        );\r\n        require(heartsOwed != 0, \"INSUFFICIENT_HEARTS_INPUT\");\r\n\r\n        listing.sharesAvailable -= sharesPurchased;\r\n        emit SharesUpdate(stakeId, msg.sender, listing.sharesAvailable);\r\n\r\n        uint72 newSharesOwned =\r\n            listing.shareOwners[shareReceiver] + sharesPurchased;\r\n        listing.shareOwners[shareReceiver] = newSharesOwned;\r\n        listing.supplierHeartsOwed += heartsOwed;\r\n        emit BuyShares(stakeId, shareReceiver, sharesPurchased, newSharesOwned);\r\n\r\n        return heartsOwed;\r\n    }\r\n\r\n    function multiBuyShares(ShareOrder[] memory orders) external lock {\r\n        uint256 orderCount = orders.length;\r\n        require(orderCount <= 30, \"EXCEEDED_ORDER_LIMIT\");\r\n\r\n        uint256 totalHeartsOwed;\r\n        for (uint256 i = 0; i < orderCount; i++) {\r\n            ShareOrder memory order = orders[i];\r\n            totalHeartsOwed += _buyShares(\r\n                order.stakeId,\r\n                order.shareReceiver,\r\n                order.sharesPurchased\r\n            );\r\n        }\r\n\r\n        hexContract.transferFrom(msg.sender, address(this), totalHeartsOwed);\r\n    }\r\n\r\n    function buyShares(\r\n        uint40 stakeId,\r\n        address shareReceiver,\r\n        uint72 sharesPurchased\r\n    ) external lock {\r\n        uint72 heartsOwed = _buyShares(stakeId, shareReceiver, sharesPurchased);\r\n        hexContract.transferFrom(msg.sender, address(this), heartsOwed);\r\n    }\r\n\r\n    function claimEarnings(uint40 stakeId) external lock {\r\n        ShareListing storage listing = shareListings[stakeId];\r\n        require(listing.heartsEarned != 0, \"SHARES_NOT_MATURE\");\r\n\r\n        uint72 ownedShares = listing.shareOwners[msg.sender];\r\n\r\n        if (msg.sender == listing.supplier) {\r\n            ownedShares += listing.sharesAvailable;\r\n            listing.sharesAvailable = 0;\r\n            emit SharesUpdate(stakeId, msg.sender, 0);\r\n        }\r\n\r\n        uint256 heartsOwed =\r\n            FullMath.mulDiv(\r\n                listing.heartsEarned,\r\n                ownedShares,\r\n                listing.sharesTotal\r\n            );\r\n        require(heartsOwed != 0, \"NO_HEARTS_CLAIMABLE\");\r\n\r\n        listing.shareOwners[msg.sender] = 0;\r\n        hexContract.transfer(msg.sender, heartsOwed);\r\n\r\n        emit ClaimEarnings(stakeId, msg.sender, heartsOwed);\r\n    }\r\n\r\n    function supplierWithdraw(uint40 stakeId) external lock {\r\n        ShareListing storage listing = shareListings[stakeId];\r\n        require(msg.sender == listing.supplier, \"SENDER_NOT_SUPPLIER\");\r\n\r\n        uint72 heartsOwed = listing.supplierHeartsOwed;\r\n        require(heartsOwed != 0, \"NO_HEARTS_OWED\");\r\n\r\n        listing.supplierHeartsOwed = 0;\r\n        hexContract.transfer(msg.sender, heartsOwed);\r\n\r\n        emit SupplierWithdraw(stakeId, msg.sender, heartsOwed);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_hex\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint72\",\"name\":\"heartsEarned\",\"type\":\"uint72\"}],\"name\":\"AddEarnings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint72\",\"name\":\"shares\",\"type\":\"uint72\"}],\"name\":\"AddListing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint72\",\"name\":\"sharesPurchased\",\"type\":\"uint72\"},{\"indexed\":false,\"internalType\":\"uint72\",\"name\":\"sharesOwned\",\"type\":\"uint72\"}],\"name\":\"BuyShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"oldFee\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newFee\",\"type\":\"uint8\"}],\"name\":\"BuyerFeeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"heartsClaimed\",\"type\":\"uint256\"}],\"name\":\"ClaimEarnings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint72\",\"name\":\"sharesAvailable\",\"type\":\"uint72\"}],\"name\":\"SharesUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint72\",\"name\":\"heartsWithdrawn\",\"type\":\"uint72\"}],\"name\":\"SupplierWithdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"shareReceiver\",\"type\":\"address\"},{\"internalType\":\"uint72\",\"name\":\"sharesPurchased\",\"type\":\"uint72\"}],\"name\":\"buyShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"}],\"name\":\"claimEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hexContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"}],\"name\":\"listingDetails\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"hearts\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"shares\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"sharesAvailable\",\"type\":\"uint72\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"internalType\":\"uint72\",\"name\":\"sharesPurchased\",\"type\":\"uint72\"},{\"internalType\":\"address\",\"name\":\"shareReceiver\",\"type\":\"address\"}],\"internalType\":\"struct ShareMarket.ShareOrder[]\",\"name\":\"orders\",\"type\":\"tuple[]\"}],\"name\":\"multiBuyShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"internalType\":\"uint72\",\"name\":\"heartsEarned\",\"type\":\"uint72\"}],\"name\":\"onEarningsMinted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"},{\"internalType\":\"uint72\",\"name\":\"stakedHearts\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"stakeShares\",\"type\":\"uint72\"}],\"name\":\"onSharesMinted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"name\":\"shareListings\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"buyerFee\",\"type\":\"uint8\"},{\"internalType\":\"uint72\",\"name\":\"heartsStaked\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"sharesTotal\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"sharesAvailable\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"heartsEarned\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"supplierHeartsOwed\",\"type\":\"uint72\"},{\"internalType\":\"address\",\"name\":\"supplier\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"sharesOwned\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"\",\"type\":\"uint72\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"}],\"name\":\"supplierWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newBuyerFee\",\"type\":\"uint8\"}],\"name\":\"updateBuyerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ShareMarket","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"0000000000000000000000002b591e99afe9f32eaa6214f7b7629768c40eeb3900000000000000000000000047d62c3a4e96a7d45e9cf9fe6d4969c9ca1c9077","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b3132542711aa4d8a75f5b1b5def52a424b06e3e23075905ea828454e1dd7248"}]}