{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./GCAC/GCACToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\r\\n/*\\r\\n * https://cannappscorp.com/ -- Global Cannabis Applications Corporation (GCAC)\\r\\n *\\r\\n * Address: Suite 830, 1100 Melville Street, Vancouver, British Columbia, V6E 4A6 Canada\\r\\n * Email: info@cannappscorp.com\\r\\n *\\r\\n * As at 31-March-2021, GCAC is a publicly traded company on the Canadian Stock Exchange.\\r\\n *\\r\\n * Official GCAC Listing\\r\\n * https://www.thecse.com/en/listings/technology/global-cannabis-applications-corp\\r\\n *\\r\\n * Official GCAC Regulatory Filings \\r\\n * https://www.sedar.com/DisplayCompanyDocuments.do?lang=EN&issuerNo=00036309\\r\\n *\\r\\n * This is an ERC-20 smart contract for the GCAC token that will be used as one side\\r\\n * of a Uniswap liquidity pool trading pair. This GCAC token has the following properties:\\r\\n *\\r\\n * 1. The number of GCAC tokens from this contract that will be initially added to the \\r\\n *    Uniswap liquidity pool shall be 100,000. The amount of WETH added to the other side of\\r\\n *    the initial Uniswap liquidity pool shall be 5.\\r\\n * 2. GCAC hereby commits to swap an amount of WETH currency with the Uniswap GCAC<>WETH \\r\\n *    trading pair every 3 months for no fewer than 8 quarters, i.e., 2 years, commencing \\r\\n *    for the quarterly report as filed by GCAC for the quarter ending 31-March-2021.\\r\\n * 3. The value of the WETH currency swapped by GCAC shall be equal to 1% of GCAC's official\\r\\n *    'revenue', as disclosed in each of its quarterly regulatory filings. Each WETH\\r\\n *    swap shall be performed no later than 10 working days after the regulatory filing is\\r\\n *    available on the System for Electronic Document Analysis and Retrieval (SEDAR). SEDAR \\r\\n *    is a mandatory document filing system for Canadian public companies.\\r\\n * 4. GCAC tokens returned by Uniswap from the quarterly swap of WETH shall be burned \\r\\n *    by this smart contract, thereby reducing GCAC token circulating supply over time.\\r\\n * 5. This contract shall not be allowed mint any new GCAC tokens, i.e., no dilution.\\r\\n * 6. GCAC, the company, shall initially hold 100,000 GCAC tokens on its corporate\\r\\n *    balance sheet, i.e., the GCAC treasury tokens.\\r\\n * 7. GCAC's treasury tokens may only ever be swapped for WETH in Uniswap and are prevented\\r\\n *    from being transferred out of this contract to another exchange or wallet, i.e., no rug-pull.\\r\\n * 8. GCAC hereby commits to notify the DeFi community of its intent to withdraw liquidity from \\r\\n *    Uniswap at least 3 months in advance. This contact enforces the liquidity-time-lock.\\r\\n * 9. GCAC hereby commits to notify the DeFi community of its intent to swap GCAC treasury tokens \\r\\n *    on Uniswap at least 3 months in advance. This contact enforces the treasury-time-lock.\\r\\n *\\r\\n *\\r\\n * https://abbey.ch/         -- Abbey Technology GmbH, Zug, Switzerland\\r\\n * \\r\\n * ABBEY DEFI\\r\\n * ========== \\r\\n * 1. Decentralized Finance 'DeFi' is designed to be globally inclusive. \\r\\n * 2. Centralized finance is based around national stock markets that have high barriers to entry. \\r\\n * 3. The Abbey DeFi methodology offers companies listed on national stock exchanges exposure to DeFi.\\r\\n *\\r\\n * Abbey is a Uniswap-based DeFi service provider that allows public companies to offer people a novel \\r\\n * way to speculate on the success of their business in a decentralized manner.\\r\\n * \\r\\n * The premise is both elegant and simple, the public company commits to a marketing spend equal to 1% \\r\\n * of its quarterly sales revenue. And, since it’s a public company, the exact value of this 1% is \\r\\n * published in their public accounts, as filed quarterly with a national securities regulator.\\r\\n * \\r\\n * Using Abbey as a Uniswap DeFi marketing agency, the public company spends 1% of its quarterly cash \\r\\n * sales revenue on one side of a bespoke Uniswap trading contract. The other side of the Uniswap trade \\r\\n * is the public company’s proprietary token that’s representing 1% of its future sales revenue.\\r\\n * \\r\\n * DeFi traders wishing to speculate on the revenue growth of the public company deposit crypto-USD \\r\\n * in return for “PUBCO-1%” Uniswap tokens. The Uniswap Automated Market Maker ensures DeFi market \\r\\n * liquidity and legitimate price discovery. The more USD that the company deposits over time, the \\r\\n * higher the value of the PUBCO-1% token, as held by DeFi speculators.\\r\\n *\\r\\n*/\\r\\npragma solidity 0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Global Cannabis Applications Corporation (GCAC) contract for Uniswap.\\r\\n * @author Abbey Technology GmbH\\r\\n * @notice Token contract for use with Uniswap.  Enforces restrictions outlined in the prospectus.\\r\\n */\\r\\ncontract GCACToken is ERC20 {\\r\\n\\r\\n    enum TokenType { Unknown, GCAC, LiquidityPool }\\r\\n\\r\\n    /**\\r\\n     * @notice The details of a future company cashout.\\r\\n     */\\r\\n    struct Notice {\\r\\n        // The maximum number of tokens proposed for sale.\\r\\n        uint256 amount;\\r\\n\\r\\n        // The date after which company tokens can be swapped.\\r\\n        uint256 releaseDate;\\r\\n\\r\\n        // Whether the notice given is for this contract's tokens (GCAC) or the\\r\\n        // liquidity pool tokens created by Uniswap where fees are periodically\\r\\n        // cashed in.\\r\\n        TokenType tokenType;\\r\\n    }\\r\\n\\r\\n    // Event fired when a restricted wallet gives notice of a potential future trade.\\r\\n    event NoticeGiven(address indexed who, uint256 amount, uint256 releaseDate, TokenType tokenType);\\r\\n\\r\\n    /**\\r\\n     * @notice Notice must be given to the public before treasury tokens can be swapped.\\r\\n     */\\r\\n    Notice public noticeTreasury;\\r\\n\\r\\n    /**\\r\\n     * @notice Notice must be given to the public before Liquidity Tokens can be removed from the pool.\\r\\n     */\\r\\n    Notice public noticeLiquidity;\\r\\n\\r\\n    /**\\r\\n    * @notice The account that created this contract, also functions as the liquidity provider.\\r\\n    */\\r\\n    address public owner;\\r\\n\\r\\n    /**\\r\\n     * @notice Holder of the company's 50% share of all Uniswap tokens.  Can only interact with the\\r\\n     * Uniswap pair/router, is forbidden from trading tokens elsewhere.\\r\\n     */\\r\\n    address public treasury;\\r\\n\\r\\n    /**\\r\\n     * @notice The account that performs the 1% of sales buyback of tokens, all bought tokens are burned.\\r\\n     * @dev They cannot be autoburned during transfer as the Uniswap client prevents the transaction.\\r\\n     */\\r\\n    address public buyback;\\r\\n\\r\\n    /**\\r\\n     * @notice The address of the Uniswap router, the liquidity provider and treasury can only interact with this\\r\\n     * address.  This prevents trading outside of Uniswap for these accounts.\\r\\n     */\\r\\n    address public router;\\r\\n\\r\\n    /**\\r\\n     * @notice The address of the Uniswap Pair/ERC20 contract holding the Liquidity Pool tokens.\\r\\n     */\\r\\n    address public pairAddress;\\r\\n\\r\\n    /**\\r\\n     * @notice Restrict functionaly to the contract owner.\\r\\n     */\\r\\n    modifier onlyOwner {\\r\\n        require(_msgSender() == owner, \\\"You are not Owner.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Restrict functionaly to the buyback account.\\r\\n     */\\r\\n    modifier onlyBuyback {\\r\\n        require(_msgSender() == buyback, \\\"You are not Buyback.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(uint256 initialSupply, string memory name, string memory symbol) ERC20(name, symbol) {\\r\\n        owner = _msgSender();\\r\\n        _mint(_msgSender(), initialSupply);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set the account that burns GCAC tokens periodically.\\r\\n     */\\r\\n    function setBuyback(address who) public onlyOwner {\\r\\n        require(buyback == address(0), \\\"The Buyback address can only be set once.\\\");\\r\\n        buyback = who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set the address of the account holding GCAC tokens on behalf of the company.\\r\\n     */\\r\\n    function setTreasury(address who) public onlyOwner {\\r\\n        require(treasury == address(0), \\\"The Treasury address can only be set once.\\\");\\r\\n        treasury = who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set the address of the Uniswap router, only this address is allowed to move Treasury tokens.\\r\\n     */\\r\\n    function setRouter(address who) public onlyOwner {\\r\\n        require(router == address(0), \\\"The Router address can only be set once.\\\");\\r\\n        router = who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Set the address of the Uniswap Pair/Pool contract.\\r\\n     */\\r\\n    function setPairAddress(address who) public onlyOwner {\\r\\n        require(pairAddress == address(0), \\\"The Pair address can only be set once.\\\");\\r\\n        pairAddress = who;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Treasury and Liquidity tokens must give advanced notice to the public before they can\\r\\n     * be used.  The token type is determined by the address giving notice.\\r\\n     *\\r\\n     * @param who The address giving notice of a sale in the future.\\r\\n     * @param amount The maximum number of tokens (in wei).\\r\\n     * @param numSeconds The number of seconds the tokens cannot be sold for.\\r\\n     */\\r\\n    function giveNotice(address who, uint256 amount, uint256 numSeconds) public onlyOwner {\\r\\n        require(pairAddress != address(0), \\\"The Uniswap Pair contract address must be set.\\\");\\r\\n        require(who == treasury || who == address(this), \\\"Only Treasury and Liquidity must give notice.\\\");\\r\\n\\r\\n        uint256 when = block.timestamp + (numSeconds * 1 seconds);\\r\\n\\r\\n        TokenType tokenType;\\r\\n\\r\\n        if(who == treasury) {\\r\\n            require(noticeTreasury.releaseDate == 0 || block.timestamp >= noticeTreasury.releaseDate, \\\"Cannot overwrite an active existing notice.\\\");\\r\\n            require(amount <= balanceOf(who), \\\"Can't give notice for more GCAC tokens than owned.\\\");\\r\\n            tokenType = TokenType.GCAC;\\r\\n            noticeTreasury = Notice(amount, when, tokenType);\\r\\n        }\\r\\n        else {\\r\\n            require(noticeLiquidity.releaseDate == 0 || block.timestamp >= noticeLiquidity.releaseDate, \\\"Cannot overwrite an active existing notice.\\\");\\r\\n            ERC20 pair = ERC20(pairAddress);\\r\\n            require(amount <= pair.balanceOf(who), \\\"Can't give notice for more Liquidity Tokens than owned.\\\");\\r\\n            tokenType = TokenType.LiquidityPool;\\r\\n            noticeLiquidity = Notice(amount, when, tokenType);\\r\\n        }\\r\\n\\r\\n        emit NoticeGiven(who, amount, when, tokenType);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Enforce rules around the company accounts:\\r\\n     * - Liquidity Pool Creator (owner) can never receive tokens back from Uniswap.\\r\\n     * - Treasury can only send tokens to Uniswap.\\r\\n     * - Tokens bought back by the company are immediateley burned.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal override {\\r\\n        require(recipient != owner, \\\"Liquidity Pool Creator cannot receive tokens.\\\");\\r\\n        require(sender != buyback, \\\"Buyback cannot transfer tokens, it can only burn.\\\");\\r\\n        if(sender == treasury) {\\r\\n            require(_msgSender() == router, \\\"Treasury account tokens can only be moved by the Uniswap Router.\\\");\\r\\n            require(noticeTreasury.releaseDate != 0 && block.timestamp >= noticeTreasury.releaseDate, \\\"Notice period has not been set or has not expired.\\\");\\r\\n            require(amount <= noticeTreasury.amount, \\\"Treasury can't transfer more tokens than given notice for.\\\");\\r\\n            require(noticeTreasury.tokenType == TokenType.GCAC, \\\"The notice given for this user is the wrong token type.\\\");\\r\\n\\r\\n            // Clear the remaining notice balance, this prevents giving notice on all tokens and\\r\\n            // trickling them out.\\r\\n            noticeTreasury = Notice(0, 0, TokenType.Unknown);\\r\\n        }\\r\\n\\r\\n        super._transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Periodically draw down any fee entitlement from the Liquidity Pool after giving notice.\\r\\n     * @param to The account to send the tokens to.\\r\\n     * @param amount The number of tokens, in wei.\\r\\n     */\\r\\n    function transferLiquidityTokens(address to, uint256 amount) public onlyOwner {\\r\\n        require(pairAddress != address(0), \\\"The Uniswap Pair contract address must be set.\\\");\\r\\n\\r\\n        require(noticeLiquidity.releaseDate != 0 && block.timestamp >= noticeLiquidity.releaseDate, \\\"Notice period has not been set or has not expired.\\\");\\r\\n        require(amount <= noticeLiquidity.amount, \\\"Insufficient Liquidity Token balance.\\\");\\r\\n        require(noticeLiquidity.tokenType == TokenType.LiquidityPool, \\\"The notice given for this user is the wrong token type.\\\");\\r\\n\\r\\n        ERC20 pair = ERC20(pairAddress);\\r\\n        pair.transfer(to, amount);\\r\\n\\r\\n        // Clear the notice even if only partially used.\\r\\n        noticeLiquidity = Notice(0, 0, TokenType.Unknown);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The buyback account periodically buys tokens and then burns them to reduce the\\r\\n     * total supply pushing up the price of the remaining tokens.\\r\\n     */\\r\\n    function burn() public onlyBuyback {\\r\\n        _burn(buyback, balanceOf(buyback));\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"releaseDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum GCACToken.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"name\":\"NoticeGiven\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyback\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numSeconds\",\"type\":\"uint256\"}],\"name\":\"giveNotice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noticeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseDate\",\"type\":\"uint256\"},{\"internalType\":\"enum GCACToken.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noticeTreasury\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseDate\",\"type\":\"uint256\"},{\"internalType\":\"enum GCACToken.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferLiquidityTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"GCACToken","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000002a5a058fc295ed000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000021476c6f62616c2043616e6e61626973204170706c69636174696f6e7320436f72700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044743414300000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d9bdb1ccdec115cc121dd4554014d5de69e64003189a4df6c93fb423f4d25188"}]}