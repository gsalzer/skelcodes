{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/utils/ChainlinkOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.2 <0.8.0;\\r\\n\\r\\nimport '../math/MixedSafeMathWithUnit.sol';\\r\\n\\r\\ncontract ChainlinkOracle {\\r\\n\\r\\n    using MixedSafeMathWithUnit for uint256;\\r\\n    using MixedSafeMathWithUnit for int256;\\r\\n\\r\\n    string  public symbol;\\r\\n    address public immutable oracle;\\r\\n    uint256 public immutable decimals;\\r\\n\\r\\n    constructor (string memory symbol_, address oracle_) {\\r\\n        symbol = symbol_;\\r\\n        oracle = oracle_;\\r\\n        decimals = IChainlink(oracle_).decimals();\\r\\n    }\\r\\n\\r\\n    function getPrice() external view returns (uint256) {\\r\\n        uint256 price = IChainlink(oracle).latestAnswer().itou().mul(uint256(10**18)).div(uint256(10**decimals));\\r\\n        return price;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\ninterface IChainlink {\\r\\n    function decimals() external view returns (uint8);\\r\\n    function latestAnswer() external view returns (int256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/math/MixedSafeMathWithUnit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Mixed safe math with base unit of 10**18\\r\\n */\\r\\nlibrary MixedSafeMathWithUnit {\\r\\n\\r\\n    uint256 constant UONE = 10**18;\\r\\n    uint256 constant UMAX = 2**255 - 1;\\r\\n\\r\\n    int256 constant IONE = 10**18;\\r\\n    int256 constant IMIN = -2**255;\\r\\n\\r\\n    //================================================================================\\r\\n    // Conversions\\r\\n    //================================================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Convert uint256 to int256\\r\\n     */\\r\\n    function utoi(uint256 a) internal pure returns (int256) {\\r\\n        require(a <= UMAX, \\\"MixedSafeMathWithUnit: convert uint256 to int256 overflow\\\");\\r\\n        int256 b = int256(a);\\r\\n        return b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Convert int256 to uint256\\r\\n     */\\r\\n    function itou(int256 a) internal pure returns (uint256) {\\r\\n        require(a >= 0, \\\"MixedSafeMathWithUnit: convert int256 to uint256 overflow\\\");\\r\\n        uint256 b = uint256(a);\\r\\n        return b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Take abs of int256\\r\\n     */\\r\\n    function abs(int256 a) internal pure returns (int256) {\\r\\n        require(a != IMIN, \\\"MixedSafeMathWithUnit: int256 abs overflow\\\");\\r\\n        if (a >= 0) {\\r\\n            return a;\\r\\n        } else {\\r\\n            return -a;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Take negation of int256\\r\\n     */\\r\\n    function neg(int256 a) internal pure returns (int256) {\\r\\n        require(a != IMIN, \\\"MixedSafeMathWithUnit: int256 negate overflow\\\");\\r\\n        return -a;\\r\\n    }\\r\\n\\r\\n    //================================================================================\\r\\n    // Rescale and reformat\\r\\n    //================================================================================\\r\\n\\r\\n    function _rescale(uint256 a, uint256 decimals1, uint256 decimals2)\\r\\n        internal pure returns (uint256)\\r\\n    {\\r\\n        uint256 scale1 = 10 ** decimals1;\\r\\n        uint256 scale2 = 10 ** decimals2;\\r\\n        uint256 b = a * scale2;\\r\\n        require(b / scale2 == a, \\\"MixedSafeMathWithUnit: rescale uint256 overflow\\\");\\r\\n        uint256 c = b / scale1;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function _rescale(int256 a, uint256 decimals1, uint256 decimals2)\\r\\n        internal pure returns (int256)\\r\\n    {\\r\\n        int256 scale1 = utoi(10 ** decimals1);\\r\\n        int256 scale2 = utoi(10 ** decimals2);\\r\\n        int256 b = a * scale2;\\r\\n        require(b / scale2 == a, \\\"MixedSafeMathWithUnit: rescale int256 overflow\\\");\\r\\n        int256 c = b / scale1;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Rescales a value from 10**18 base to 10**decimals base\\r\\n     */\\r\\n    function rescale(uint256 a, uint256 decimals) internal pure returns (uint256) {\\r\\n        return _rescale(a, 18, decimals);\\r\\n    }\\r\\n\\r\\n    function rescale(int256 a, uint256 decimals) internal pure returns (int256) {\\r\\n        return _rescale(a, 18, decimals);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reformat a value to be a valid 10**decimals base value\\r\\n     * The formatted value is still in 10**18 base\\r\\n     */\\r\\n    function reformat(uint256 a, uint256 decimals) internal pure returns (uint256) {\\r\\n        return _rescale(_rescale(a, 18, decimals), decimals, 18);\\r\\n    }\\r\\n\\r\\n    function reformat(int256 a, uint256 decimals) internal pure returns (int256) {\\r\\n        return _rescale(_rescale(a, 18, decimals), decimals, 18);\\r\\n    }\\r\\n\\r\\n\\r\\n    //================================================================================\\r\\n    // Addition\\r\\n    //================================================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Addition: uint256 + uint256\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"MixedSafeMathWithUnit: uint256 addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Addition: int256 + int256\\r\\n     */\\r\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a + b;\\r\\n        require(\\r\\n            (b >= 0 && c >= a) || (b < 0 && c < a),\\r\\n            \\\"MixedSafeMathWithUnit: int256 addition overflow\\\"\\r\\n        );\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Addition: uint256 + int256\\r\\n     * uint256(-b) will not overflow when b is IMIN\\r\\n     */\\r\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\r\\n        if (b >= 0) {\\r\\n            return add(a, uint256(b));\\r\\n        } else {\\r\\n            return sub(a, uint256(-b));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Addition: int256 + uint256\\r\\n     */\\r\\n    function add(int256 a, uint256 b) internal pure returns (int256) {\\r\\n        return add(a, utoi(b));\\r\\n    }\\r\\n\\r\\n    //================================================================================\\r\\n    // Subtraction\\r\\n    //================================================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Subtraction: uint256 - uint256\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(a >= b, \\\"MixedSafeMathWithUnit: uint256 subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtraction: int256 - int256\\r\\n     */\\r\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\r\\n        int256 c = a - b;\\r\\n        require(\\r\\n            (b >= 0 && c <= a) || (b < 0 && c > a),\\r\\n            \\\"MixedSafeMathWithUnit: int256 subtraction overflow\\\"\\r\\n        );\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtraction: uint256 - int256\\r\\n     * uint256(-b) will not overflow when b is IMIN\\r\\n     */\\r\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\r\\n        if (b >= 0) {\\r\\n            return sub(a, uint256(b));\\r\\n        } else {\\r\\n            return add(a, uint256(-b));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Subtraction: int256 - uint256\\r\\n     */\\r\\n    function sub(int256 a, uint256 b) internal pure returns (int256) {\\r\\n        return sub(a, utoi(b));\\r\\n    }\\r\\n\\r\\n    //================================================================================\\r\\n    // Multiplication\\r\\n    //================================================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplication: uint256 * uint256\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero,\\r\\n        // but the benefit is lost if 'b' is also tested\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"MixedSafeMathWithUnit: uint256 multiplication overflow\\\");\\r\\n        return c / UONE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplication: int256 * int256\\r\\n     */\\r\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero,\\r\\n        // but the benefit is lost if 'b' is also tested\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        require(!(a == -1 && b == IMIN), \\\"MixedSafeMathWithUnit: int256 multiplication overflow\\\");\\r\\n        int256 c = a * b;\\r\\n        require(c / a == b, \\\"MixedSafeMathWithUnit: int256 multiplication overflow\\\");\\r\\n        return c / IONE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplication: uint256 * int256\\r\\n     */\\r\\n    function mul(uint256 a, int256 b) internal pure returns (uint256) {\\r\\n        return mul(a, itou(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Multiplication: int256 * uint256\\r\\n     */\\r\\n    function mul(int256 a, uint256 b) internal pure returns (int256) {\\r\\n        return mul(a, utoi(b));\\r\\n    }\\r\\n\\r\\n    //================================================================================\\r\\n    // Division\\r\\n    //================================================================================\\r\\n\\r\\n    /**\\r\\n     * @dev Division: uint256 / uint256\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"MixedSafeMathWithUnit: uint256 division by zero\\\");\\r\\n        uint256 c = a * UONE;\\r\\n        require(\\r\\n            c / UONE == a,\\r\\n            \\\"MixedSafeMathWithUnit: uint256 division internal multiplication overflow\\\"\\r\\n        );\\r\\n        uint256 d = c / b;\\r\\n        return d;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Division: int256 / int256\\r\\n     */\\r\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\r\\n        require(b != 0, \\\"MixedSafeMathWithUnit: int256 division by zero\\\");\\r\\n        int256 c = a * IONE;\\r\\n        require(\\r\\n            c / IONE == a,\\r\\n            \\\"MixedSafeMathWithUnit: int256 division internal multiplication overflow\\\"\\r\\n        );\\r\\n        require(!(c == IMIN && b == -1), \\\"MixedSafeMathWithUnit: int256 division overflow\\\");\\r\\n        int256 d = c / b;\\r\\n        return d;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Division: uint256 / int256\\r\\n     */\\r\\n    function div(uint256 a, int256 b) internal pure returns (uint256) {\\r\\n        return div(a, itou(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Division: int256 / uint256\\r\\n     */\\r\\n    function div(int256 a, uint256 b) internal pure returns (int256) {\\r\\n        return div(a, utoi(b));\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oracle_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ChainlinkOracle","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000f4030086522a5beea4988f8ca5b36dbc97bee88c00000000000000000000000000000000000000000000000000000000000000064254435553440000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}