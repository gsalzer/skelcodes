{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\ncontract Ownable {\r\n    \r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () public {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, _newOwner);\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function safeAdd(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function safeSub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function safeMul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function safeDiv(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\ninterface ERC20{\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address _tokenOwner) external view returns (uint256);\r\n    function allowance(address _tokenOwner, address _spender) external view returns (uint256);\r\n    function transfer(address _to, uint256 _tokens) external returns (bool);\r\n    function approve(address _spender, uint256 _tokens)  external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _tokens) external returns (bool);\r\n    \r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    \r\n}\r\n\r\n\r\n\r\n\r\ncontract AufToken is Ownable, ERC20{\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    string _name;\r\n    string  _symbol;\r\n    uint256 _totalSupply;\r\n    uint256 _decimal;\r\n    \r\n    mapping(address => uint256) _balances;\r\n    mapping(address => mapping (address => uint256)) _allowances;\r\n    \r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    \r\n    constructor() public {\r\n        _name = \"Amongus.finance\";\r\n        _symbol = \"AMONG\";\r\n        _decimal = 18;\r\n        _totalSupply = 21000000 * 10 ** _decimal;\r\n        _balances[0xf2596513BccbCbF318d5A18AF9A8A24EA589D0C7] = _totalSupply;\r\n        emit Transfer(address(0), 0xf2596513BccbCbF318d5A18AF9A8A24EA589D0C7, _totalSupply);\r\n    }\r\n    \r\n    \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    \r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    \r\n    function decimals() public view returns (uint256) {\r\n        return _decimal;\r\n    }\r\n    \r\n    function totalSupply() external view  override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address _tokenOwner) external view override returns (uint256) {\r\n        return _balances[_tokenOwner];\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _tokens) external override returns (bool) {\r\n        _transfer(msg.sender, _to, _tokens);\r\n        return true;\r\n    }\r\n    \r\n    function _transfer(address _sender, address _recipient, uint256 _amount) internal {\r\n        require(_sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[_sender] = _balances[_sender].safeSub(_amount);\r\n        _balances[_recipient] = _balances[_recipient].safeAdd(_amount);\r\n        emit Transfer(_sender, _recipient, _amount);\r\n    }\r\n    \r\n    function allowance(address _tokenOwner, address _spender) external view override returns (uint256) {\r\n        return _allowances[_tokenOwner][_spender];\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _tokens) external override returns (bool) {\r\n        _approve(msg.sender, _spender, _tokens);\r\n        return true;\r\n    }\r\n    \r\n    function _approve(address _owner, address _spender, uint256 _value) internal {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[_owner][_spender] = _value;\r\n        emit Approval(_owner, _spender, _value);\r\n    }\r\n    \r\n    \r\n    function transferFrom(address _from, address _to, uint256 _tokens) external override returns (bool) {\r\n        _transfer(_from, _to, _tokens);\r\n        _approve(_from, msg.sender, _allowances[_from][msg.sender].safeSub(_tokens));\r\n        return true;\r\n    }\r\n    receive () external payable {\r\n        revert();\r\n    }\r\n\r\n}\r\n\r\ncontract AufStaking {\r\n    string public name = \"Stake AMONG\";\r\n    address public owner;\r\n    AufToken public aufToken;\r\n\r\n    address[] public stakers;\r\n    mapping(address => uint) public stakingBalance;\r\n    mapping(address => bool) public hasStaked;\r\n    mapping(address => bool) public isStaking;\r\n\r\n    constructor(AufToken _aufToken) public {\r\n        aufToken = _aufToken;\r\n        \r\n        owner = msg.sender;\r\n    }\r\n\r\n    function stakeTokens(uint _amount) public {\r\n        // Require amount greater than 0\r\n        require(_amount > 0, \"amount cannot be 0\");\r\n\r\n        // Trasnfer Auf tokens to this contract for staking\r\n        aufToken.transferFrom(msg.sender, address(this), _amount);\r\n\r\n        // Update staking balance\r\n        stakingBalance[msg.sender] = stakingBalance[msg.sender] + _amount;\r\n\r\n        // Add user to stakers array *only* if they haven't staked already\r\n        if(!hasStaked[msg.sender]) {\r\n            stakers.push(msg.sender);\r\n        }\r\n\r\n        // Update staking status\r\n        isStaking[msg.sender] = true;\r\n        hasStaked[msg.sender] = true;\r\n    }\r\n\r\n    // Unstaking Tokens (Withdraw)\r\n    function unstakeTokens() public {\r\n        // Fetch staking balance\r\n        uint balance = stakingBalance[msg.sender];\r\n\r\n        // Require amount greater than 0\r\n        require(balance > 0, \"staking balance cannot be 0\");\r\n\r\n        // Transfer Auf tokens to this contract for staking\r\n        aufToken.transfer(msg.sender, balance);\r\n\r\n        // Reset staking balance\r\n        stakingBalance[msg.sender] = 0;\r\n\r\n        // Update staking status\r\n        isStaking[msg.sender] = false;\r\n    }\r\n\r\n    // Issuing Tokens\r\n    function issueTokens_10() public {\r\n        // Only owner can call this function\r\n        require(msg.sender == owner, \"caller must be the owner\");\r\n\r\n        // Issue tokens to all stakers\r\n        for (uint i=0; i<stakers.length; i++) {\r\n            address recipient = stakers[i];\r\n            uint balance = stakingBalance[recipient];\r\n            if(balance > 0) {\r\n                aufToken.transfer(recipient, balance * 10 / 100);\r\n            }\r\n        }\r\n    }\r\n    function issueTokens_5() public {\r\n        // Only owner can call this function\r\n        require(msg.sender == owner, \"caller must be the owner\");\r\n\r\n        // Issue tokens to all stakers\r\n        for (uint i=0; i<stakers.length; i++) {\r\n            address recipient = stakers[i];\r\n            uint balance = stakingBalance[recipient];\r\n            if(balance > 0) {\r\n                aufToken.transfer(recipient, balance * 5 / 100);\r\n            }\r\n        }\r\n    }\r\n     function issueTokens_1() public {\r\n        // Only owner can call this function\r\n        require(msg.sender == owner, \"caller must be the owner\");\r\n\r\n        // Issue tokens to all stakers\r\n        for (uint i=0; i<stakers.length; i++) {\r\n            address recipient = stakers[i];\r\n            uint balance = stakingBalance[recipient];\r\n            if(balance > 0) {\r\n                aufToken.transfer(recipient, balance * 1 / 100);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract AufToken\",\"name\":\"_aufToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"aufToken\",\"outputs\":[{\"internalType\":\"contract AufToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStaking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issueTokens_1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issueTokens_10\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issueTokens_5\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AufStaking","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f841d292c1141cbf1460a1e2010916565a010cc8","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2862ea6999ea1f4ff5cb6b10d17f81939d40737c3f12acc5d62431d24fc160e3"}]}