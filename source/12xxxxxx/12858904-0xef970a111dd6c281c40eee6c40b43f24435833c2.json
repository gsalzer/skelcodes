{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overloaded;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        require(hasRole(getRoleAdmin(role), _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt, address deployer) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Arrays.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n   /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (array[mid] > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && array[low - 1] == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AllPairVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"contracts/OndoRegistryClient.sol\\\";\\nimport \\\"contracts/TrancheToken.sol\\\";\\nimport \\\"contracts/interfaces/IStrategy.sol\\\";\\nimport \\\"contracts/interfaces/ITrancheToken.sol\\\";\\nimport \\\"contracts/interfaces/IStrategy.sol\\\";\\nimport \\\"contracts/interfaces/IPairVault.sol\\\";\\nimport \\\"contracts/interfaces/IFeeCollector.sol\\\";\\n\\n/**\\n * @title A container for all Vaults\\n * @notice Vaults are created and managed here\\n * @dev Because Ethereum transactions are so expensive,\\n * we reinvent an OO system in this code. There are 4 primary\\n * functions:\\n *\\n * deposit, withdraw: investors can add remove funds into a\\n *     particular tranche in a Vault.\\n * invest, redeem: a strategist pushes the Vault to buy/sell LP tokens in\\n *     an underlying AMM\\n */\\ncontract AllPairVault is OndoRegistryClient, IPairVault {\\n  using OLib for OLib.Investor;\\n  using SafeERC20 for IERC20;\\n  using Address for address;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n\\n  // A Vault object is parameterized by these values.\\n  struct Vault {\\n    mapping(OLib.Tranche => Asset) assets; // Assets corresponding to each tranche\\n    IStrategy strategy; // Shared contract that interacts with AMMs\\n    address creator; // Account that calls createVault\\n    address strategist; // Has the right to call invest() and redeem(), and harvest() if strategy supports it\\n    address rollover; // Manager of investment auto-rollover, if any\\n    uint256 rolloverId;\\n    uint256 hurdleRate; // Return offered to senior tranche\\n    OLib.State state; // Current state of Vault\\n    uint256 startAt; // Time when the Vault is unpaused to begin accepting deposits\\n    uint256 investAt; // Time when investors can't move funds, strategist can invest\\n    uint256 redeemAt; // Time when strategist can redeem LP tokens, investors can withdraw\\n    uint256 performanceFee; // Optional fee on junior tranche goes to strategist\\n  }\\n\\n  // (TrancheToken address => (investor address => OLib.Investor)\\n  mapping(address => mapping(address => OLib.Investor)) investors;\\n\\n  // An instance of TrancheToken from which all other tokens are cloned\\n  address public immutable trancheTokenImpl;\\n\\n  // Address that collects performance fees\\n  IFeeCollector public performanceFeeCollector;\\n\\n  // Locate Vault by hashing metadata about the product\\n  mapping(uint256 => Vault) private Vaults;\\n\\n  // Locate Vault by starting from the TrancheToken address\\n  mapping(address => uint256) public VaultsByTokens;\\n\\n  // All Vault IDs\\n  EnumerableSet.UintSet private vaultIDs;\\n\\n  // Access restriction to registered strategist\\n  modifier onlyStrategist(uint256 _vaultId) {\\n    require(msg.sender == Vaults[_vaultId].strategist, \\\"Invalid caller\\\");\\n    _;\\n  }\\n\\n  // Access restriction to registered rollover\\n  modifier onlyRollover(uint256 _vaultId, uint256 _rolloverId) {\\n    Vault storage vault_ = Vaults[_vaultId];\\n    require(\\n      msg.sender == vault_.rollover && _rolloverId == vault_.rolloverId,\\n      \\\"Invalid caller\\\"\\n    );\\n    _;\\n  }\\n\\n  // Access is only rollover if rollover addr nonzero, else strategist\\n  modifier onlyRolloverOrStrategist(uint256 _vaultId) {\\n    Vault storage vault_ = Vaults[_vaultId];\\n    address rollover = vault_.rollover;\\n    require(\\n      (rollover == address(0) && msg.sender == vault_.strategist) ||\\n        (msg.sender == rollover),\\n      \\\"Invalid caller\\\"\\n    );\\n    _;\\n  }\\n\\n  // Guard functions with state machine\\n  modifier atState(uint256 _vaultId, OLib.State _state) {\\n    require(getState(_vaultId) == _state, \\\"Invalid operation\\\");\\n    _;\\n  }\\n\\n  // Determine if one can move to a new state. For now the transitions\\n  // are strictly linear. No state machines, really.\\n  function transition(uint256 _vaultId, OLib.State _nextState) private {\\n    Vault storage vault_ = Vaults[_vaultId];\\n    OLib.State curState = vault_.state;\\n    if (_nextState == OLib.State.Live) {\\n      require(curState == OLib.State.Deposit, \\\"Invalid operation\\\");\\n      require(vault_.investAt <= block.timestamp, \\\"Not time yet\\\");\\n    } else {\\n      require(\\n        curState == OLib.State.Live && _nextState == OLib.State.Withdraw,\\n        \\\"Invalid operation\\\"\\n      );\\n      require(vault_.redeemAt <= block.timestamp, \\\"Not time yet\\\");\\n    }\\n    vault_.state = _nextState;\\n  }\\n\\n  // Determine if a Vault can shift to an open state. A Vault is started\\n  // in an inactive state. It can only move forward when time has\\n  // moved past the starttime.\\n  function maybeOpenDeposit(uint256 _vaultId) private {\\n    Vault storage vault_ = Vaults[_vaultId];\\n    if (vault_.state == OLib.State.Inactive) {\\n      require(\\n        vault_.startAt > 0 && vault_.startAt <= block.timestamp,\\n        \\\"Not time yet\\\"\\n      );\\n      vault_.state = OLib.State.Deposit;\\n    } else if (vault_.state != OLib.State.Deposit) {\\n      revert(\\\"Invalid operation\\\");\\n    }\\n  }\\n\\n  // modifier onlyETH(uint256 _vaultId, OLib.Tranche _tranche) {\\n  //   require(\\n  //     address((getVaultById(_vaultId)).assets[uint256(_tranche)].token) ==\\n  //       address(registry.weth()),\\n  //     \\\"Not an ETH vault\\\"\\n  //   );\\n  //   _;\\n  // }\\n\\n  function onlyETH(uint256 _vaultId, OLib.Tranche _tranche) private view {\\n    require(\\n      address((getVaultById(_vaultId)).assets[uint256(_tranche)].token) ==\\n        address(registry.weth()),\\n      \\\"Not an ETH vault\\\"\\n    );\\n  }\\n\\n  /**\\n   * Event declarations\\n   */\\n  event CreatedPair(\\n    uint256 indexed vaultId,\\n    IERC20 indexed seniorAsset,\\n    IERC20 indexed juniorAsset,\\n    ITrancheToken seniorToken,\\n    ITrancheToken juniorToken\\n  );\\n\\n  event SetRollover(\\n    address indexed rollover,\\n    uint256 indexed rolloverId,\\n    uint256 indexed vaultId\\n  );\\n\\n  event Deposited(\\n    address indexed depositor,\\n    uint256 indexed vaultId,\\n    uint256 indexed trancheId,\\n    uint256 amount\\n  );\\n\\n  event Invested(\\n    uint256 indexed vaultId,\\n    uint256 seniorAmount,\\n    uint256 juniorAmount\\n  );\\n\\n  event DepositedLP(\\n    address indexed depositor,\\n    uint256 indexed vaultId,\\n    uint256 amount,\\n    uint256 senior,\\n    uint256 junior\\n  );\\n\\n  event RolloverDeposited(\\n    address indexed rollover,\\n    uint256 indexed rolloverId,\\n    uint256 indexed vaultId,\\n    uint256 seniorAmount,\\n    uint256 juniorAmount\\n  );\\n\\n  event Claimed(\\n    address indexed depositor,\\n    uint256 indexed vaultId,\\n    uint256 indexed trancheId,\\n    uint256 shares,\\n    uint256 excess\\n  );\\n\\n  event RolloverClaimed(\\n    address indexed rollover,\\n    uint256 indexed rolloverId,\\n    uint256 indexed vaultId,\\n    uint256 seniorAmount,\\n    uint256 juniorAmount\\n  );\\n\\n  event Redeemed(\\n    uint256 indexed vaultId,\\n    uint256 seniorReceived,\\n    uint256 juniorReceived\\n  );\\n\\n  event Withdrew(\\n    address indexed depositor,\\n    uint256 indexed vaultId,\\n    uint256 indexed trancheId,\\n    uint256 amount\\n  );\\n\\n  event WithdrewLP(address indexed depositor, uint256 amount);\\n\\n  event PerformanceFeeSet(uint256 indexed vaultId, uint256 fee);\\n\\n  event PerformanceFeeCollectorSet(address indexed collector);\\n\\n  /**\\n   * @notice Container points back to registry\\n   * @dev Hook up this contract to the global registry.\\n   */\\n  constructor(address _registry, address _trancheTokenImpl)\\n    OndoRegistryClient(_registry)\\n  {\\n    require(_trancheTokenImpl != address(0), \\\"Invalid target\\\");\\n    trancheTokenImpl = _trancheTokenImpl;\\n  }\\n\\n  /**\\n   * @notice Initialize parameters for a Vault\\n   * @dev\\n   * @param _params Struct with all initialization info\\n   * @return vaultId hashed identifier of Vault used everywhere\\n   **/\\n  function createVault(OLib.VaultParams calldata _params)\\n    external\\n    override\\n    whenNotPaused\\n    isAuthorized(OLib.CREATOR_ROLE)\\n    nonReentrant\\n    returns (uint256 vaultId)\\n  {\\n    require(\\n      registry.authorized(OLib.STRATEGY_ROLE, _params.strategy),\\n      \\\"Invalid target\\\"\\n    );\\n    require(\\n      registry.authorized(OLib.STRATEGIST_ROLE, _params.strategist),\\n      \\\"Invalid target\\\"\\n    );\\n    require(_params.startTime >= block.timestamp, \\\"Invalid start time\\\");\\n    require(\\n      _params.enrollment > 0 && _params.duration > 0,\\n      \\\"No zero intervals\\\"\\n    );\\n    require(_params.hurdleRate < 1e8, \\\"Maximum hurdle is 10000%\\\");\\n    require(denominator <= _params.hurdleRate, \\\"Min hurdle is 100%\\\");\\n\\n    require(\\n      _params.seniorAsset != address(0) &&\\n        _params.seniorAsset != address(this) &&\\n        _params.juniorAsset != address(0) &&\\n        _params.juniorAsset != address(this),\\n      \\\"Invalid target\\\"\\n    );\\n    uint256 investAtTime = _params.startTime + _params.enrollment;\\n    uint256 redeemAtTime = investAtTime + _params.duration;\\n    TrancheToken seniorITrancheToken;\\n    TrancheToken juniorITrancheToken;\\n    {\\n      vaultId = uint256(\\n        keccak256(\\n          abi.encode(\\n            _params.seniorAsset,\\n            _params.juniorAsset,\\n            _params.strategy,\\n            _params.hurdleRate,\\n            _params.startTime,\\n            investAtTime,\\n            redeemAtTime\\n          )\\n        )\\n      );\\n      vaultIDs.add(vaultId);\\n      Vault storage vault_ = Vaults[vaultId];\\n      require(address(vault_.strategist) == address(0), \\\"Duplicate\\\");\\n      vault_.strategy = IStrategy(_params.strategy);\\n      vault_.creator = msg.sender;\\n      vault_.strategist = _params.strategist;\\n      vault_.hurdleRate = _params.hurdleRate;\\n      vault_.startAt = _params.startTime;\\n      vault_.investAt = investAtTime;\\n      vault_.redeemAt = redeemAtTime;\\n\\n      registry.recycleDeadTokens(2);\\n\\n      seniorITrancheToken = TrancheToken(\\n        Clones.cloneDeterministic(\\n          trancheTokenImpl,\\n          keccak256(abi.encodePacked(uint256(0), vaultId))\\n        )\\n      );\\n      juniorITrancheToken = TrancheToken(\\n        Clones.cloneDeterministic(\\n          trancheTokenImpl,\\n          keccak256(abi.encodePacked(uint256(1), vaultId))\\n        )\\n      );\\n      vault_.assets[OLib.Tranche.Senior].token = IERC20(_params.seniorAsset);\\n      vault_.assets[OLib.Tranche.Junior].token = IERC20(_params.juniorAsset);\\n      vault_.assets[OLib.Tranche.Senior].trancheToken = seniorITrancheToken;\\n      vault_.assets[OLib.Tranche.Junior].trancheToken = juniorITrancheToken;\\n\\n      vault_.assets[OLib.Tranche.Senior].trancheCap = _params.seniorTrancheCap;\\n      vault_.assets[OLib.Tranche.Senior].userCap = _params.seniorUserCap;\\n      vault_.assets[OLib.Tranche.Junior].trancheCap = _params.juniorTrancheCap;\\n      vault_.assets[OLib.Tranche.Junior].userCap = _params.juniorUserCap;\\n\\n      VaultsByTokens[address(seniorITrancheToken)] = vaultId;\\n      VaultsByTokens[address(juniorITrancheToken)] = vaultId;\\n      if (vault_.startAt == block.timestamp) {\\n        vault_.state = OLib.State.Deposit;\\n      }\\n\\n      IStrategy(_params.strategy).addVault(\\n        vaultId,\\n        IERC20(_params.seniorAsset),\\n        IERC20(_params.juniorAsset)\\n      );\\n\\n      seniorITrancheToken.initialize(\\n        vaultId,\\n        _params.seniorName,\\n        _params.seniorSym,\\n        address(this)\\n      );\\n      juniorITrancheToken.initialize(\\n        vaultId,\\n        _params.juniorName,\\n        _params.juniorSym,\\n        address(this)\\n      );\\n    }\\n\\n    emit CreatedPair(\\n      vaultId,\\n      IERC20(_params.seniorAsset),\\n      IERC20(_params.juniorAsset),\\n      seniorITrancheToken,\\n      juniorITrancheToken\\n    );\\n  }\\n\\n  /**\\n   * @notice Set the rollover details for a Vault\\n   * @dev\\n   * @param _vaultId Vault to update\\n   * @param _rollover Account of approved rollover agent\\n   * @param _rolloverId Rollover fund in RolloverVault\\n   */\\n  function setRollover(\\n    uint256 _vaultId,\\n    address _rollover,\\n    uint256 _rolloverId\\n  ) external override isAuthorized(OLib.ROLLOVER_ROLE) {\\n    Vault storage vault_ = Vaults[_vaultId];\\n    if (vault_.rollover != address(0)) {\\n      require(\\n        msg.sender == vault_.rollover && _rolloverId == vault_.rolloverId,\\n        \\\"Invalid caller\\\"\\n      );\\n    }\\n    vault_.rollover = _rollover;\\n    vault_.rolloverId = _rolloverId;\\n    emit SetRollover(_rollover, _rolloverId, _vaultId);\\n  }\\n\\n  /** @dev Enforce cap on user investment if any\\n   */\\n  function depositCapGuard(uint256 _allowedAmount, uint256 _amount)\\n    internal\\n    pure\\n  {\\n    require(\\n      _allowedAmount == 0 || _amount <= _allowedAmount,\\n      \\\"Exceeds user cap\\\"\\n    );\\n  }\\n\\n  /**\\n   * @notice Deposit funds into specific tranche of specific Vault\\n   * @dev OLib.Tranche balances are maintained by a unique ERC20 contract\\n   * @param _vaultId Specific ID for this Vault\\n   * @param _tranche Tranche to be deposited in\\n   * @param _amount Amount of tranche asset to transfer to the strategy contract\\n   */\\n  function _deposit(\\n    uint256 _vaultId,\\n    OLib.Tranche _tranche,\\n    uint256 _amount,\\n    address _payer\\n  ) internal whenNotPaused  {\\n    maybeOpenDeposit(_vaultId);\\n    Vault storage vault_ = Vaults[_vaultId];\\n    vault_.assets[_tranche].token.safeTransferFrom(\\n      _payer,\\n      address(vault_.strategy),\\n      _amount\\n    );\\n    uint256 _total = vault_.assets[_tranche].deposited += _amount;\\n    OLib.Investor storage _investor =\\n      investors[address(vault_.assets[_tranche].trancheToken)][msg.sender];\\n    uint256 userSum =\\n      _investor.userSums.length > 0\\n        ? _investor.userSums[_investor.userSums.length - 1] + _amount\\n        : _amount;\\n    depositCapGuard(vault_.assets[_tranche].userCap, userSum);\\n    _investor.prefixSums.push(_total);\\n    _investor.userSums.push(userSum);\\n    emit Deposited(msg.sender, _vaultId, uint256(_tranche), _amount);\\n  }\\n\\n  function deposit(\\n    uint256 _vaultId,\\n    OLib.Tranche _tranche,\\n    uint256 _amount\\n  ) external override nonReentrant {\\n    _deposit(_vaultId, _tranche, _amount, msg.sender);\\n  }\\n\\n  function depositETH(uint256 _vaultId, OLib.Tranche _tranche)\\n    external\\n    payable\\n    override\\n    nonReentrant\\n  {\\n    onlyETH(_vaultId, _tranche);\\n    registry.weth().deposit{value: msg.value}();\\n    _deposit(_vaultId, _tranche, msg.value, address(this));\\n  }\\n\\n  /**\\n   * @notice Called by rollover to deposit funds\\n   * @dev Rollover gets priority over other depositors.\\n   * @param _vaultId Vault to work on\\n   * @param _rolloverId Rollover that is depositing funds\\n   * @param _seniorAmount Total available amount of assets\\n   * @param _juniorAmount Total available amount of assets\\n   */\\n  function depositFromRollover(\\n    uint256 _vaultId,\\n    uint256 _rolloverId,\\n    uint256 _seniorAmount,\\n    uint256 _juniorAmount\\n  )\\n    external\\n    override\\n    onlyRollover(_vaultId, _rolloverId)\\n    whenNotPaused\\n    nonReentrant\\n  {\\n    maybeOpenDeposit(_vaultId);\\n    Vault storage vault_ = Vaults[_vaultId];\\n    Asset storage senior_ = vault_.assets[OLib.Tranche.Senior];\\n    Asset storage junior_ = vault_.assets[OLib.Tranche.Junior];\\n    senior_.deposited += _seniorAmount;\\n    junior_.deposited += _juniorAmount;\\n    senior_.rolloverDeposited += _seniorAmount;\\n    junior_.rolloverDeposited += _juniorAmount;\\n    senior_.token.safeTransferFrom(\\n      msg.sender,\\n      address(vault_.strategy),\\n      _seniorAmount\\n    );\\n    junior_.token.safeTransferFrom(\\n      msg.sender,\\n      address(vault_.strategy),\\n      _juniorAmount\\n    );\\n    emit RolloverDeposited(\\n      msg.sender,\\n      _rolloverId,\\n      _vaultId,\\n      _seniorAmount,\\n      _juniorAmount\\n    );\\n  }\\n\\n  /**\\n   * @notice Deposit more LP tokens into a Vault that is live\\n   * @dev When a Vault is created it establishes a ratio between\\n   *      senior/junior tranche tokens per LP token. If LP tokens are added\\n   *      while the Vault is running, it will get the same ratio of tranche\\n   *      tokens in return, regardless of the current balance in the pool.\\n   * @param _vaultId  reference to Vault\\n   * @param _lpTokens Amount of LP tokens to provide\\n   */\\n  function depositLp(uint256 _vaultId, uint256 _lpTokens)\\n    external\\n    override\\n    whenNotPaused\\n    nonReentrant\\n    atState(_vaultId, OLib.State.Live)\\n    returns (uint256 seniorTokensOwed, uint256 juniorTokensOwed)\\n  {\\n    require(registry.tokenMinting(), \\\"Vault tokens inactive\\\");\\n    Vault storage vault_ = Vaults[_vaultId];\\n    IERC20 pool;\\n    (seniorTokensOwed, juniorTokensOwed, pool) = getDepositLp(\\n      _vaultId,\\n      _lpTokens\\n    );\\n\\n    depositCapGuard(\\n      vault_.assets[OLib.Tranche.Senior].userCap,\\n      seniorTokensOwed\\n    );\\n    depositCapGuard(\\n      vault_.assets[OLib.Tranche.Junior].userCap,\\n      juniorTokensOwed\\n    );\\n\\n    vault_.assets[OLib.Tranche.Senior].totalInvested += seniorTokensOwed;\\n    vault_.assets[OLib.Tranche.Junior].totalInvested += juniorTokensOwed;\\n    vault_.assets[OLib.Tranche.Senior].trancheToken.mint(\\n      msg.sender,\\n      seniorTokensOwed\\n    );\\n    vault_.assets[OLib.Tranche.Junior].trancheToken.mint(\\n      msg.sender,\\n      juniorTokensOwed\\n    );\\n\\n    pool.safeTransferFrom(msg.sender, address(vault_.strategy), _lpTokens);\\n    vault_.strategy.addLp(_vaultId, _lpTokens);\\n    emit DepositedLP(\\n      msg.sender,\\n      _vaultId,\\n      _lpTokens,\\n      seniorTokensOwed,\\n      juniorTokensOwed\\n    );\\n  }\\n\\n  function getDepositLp(uint256 _vaultId, uint256 _lpTokens)\\n    public\\n    view\\n    atState(_vaultId, OLib.State.Live)\\n    returns (\\n      uint256 seniorTokensOwed,\\n      uint256 juniorTokensOwed,\\n      IERC20 pool\\n    )\\n  {\\n    Vault storage vault_ = Vaults[_vaultId];\\n    (uint256 shares, uint256 vaultShares, IERC20 ammPool) =\\n      vault_.strategy.sharesFromLp(_vaultId, _lpTokens);\\n    seniorTokensOwed =\\n      (vault_.assets[OLib.Tranche.Senior].totalInvested * shares) /\\n      vaultShares;\\n    juniorTokensOwed =\\n      (vault_.assets[OLib.Tranche.Junior].totalInvested * shares) /\\n      vaultShares;\\n    pool = ammPool;\\n  }\\n\\n  /**\\n   * @notice Invest funds into AMM\\n   * @dev Push deposited funds into underlying strategy contract\\n   * @param _vaultId Specific id for this Vault\\n   * @param _seniorMinIn To ensure you get a decent price\\n   * @param _juniorMinIn Same. Passed to addLiquidity on AMM\\n   *\\n   */\\n  function invest(\\n    uint256 _vaultId,\\n    uint256 _seniorMinIn,\\n    uint256 _juniorMinIn\\n  )\\n    external\\n    override\\n    whenNotPaused\\n    nonReentrant\\n    onlyRolloverOrStrategist(_vaultId)\\n    returns (uint256, uint256)\\n  {\\n    transition(_vaultId, OLib.State.Live);\\n    Vault storage vault_ = Vaults[_vaultId];\\n    investIntoStrategy(vault_, _vaultId, _seniorMinIn, _juniorMinIn);\\n    Asset storage senior_ = vault_.assets[OLib.Tranche.Senior];\\n    Asset storage junior_ = vault_.assets[OLib.Tranche.Junior];\\n    senior_.totalInvested = vault_.assets[OLib.Tranche.Senior].originalInvested;\\n    junior_.totalInvested = vault_.assets[OLib.Tranche.Junior].originalInvested;\\n    emit Invested(_vaultId, senior_.totalInvested, junior_.totalInvested);\\n    return (senior_.totalInvested, junior_.totalInvested); \\n  }\\n\\n  /*\\n   * @dev Separate investable amount calculation and strategy call from storage updates\\n   to keep the stack down.\\n   */\\n  function investIntoStrategy(\\n    Vault storage vault_,\\n    uint256 _vaultId,\\n    uint256 _seniorMinIn,\\n    uint256 _juniorMinIn\\n  ) private {\\n    uint256 seniorInvestableAmount =\\n      vault_.assets[OLib.Tranche.Senior].deposited;\\n    uint256 seniorCappedAmount = seniorInvestableAmount;\\n    if (vault_.assets[OLib.Tranche.Senior].trancheCap > 0) {\\n      seniorCappedAmount = min(\\n        seniorInvestableAmount,\\n        vault_.assets[OLib.Tranche.Senior].trancheCap\\n      );\\n    }\\n    uint256 juniorInvestableAmount =\\n      vault_.assets[OLib.Tranche.Junior].deposited;\\n    uint256 juniorCappedAmount = juniorInvestableAmount;\\n    if (vault_.assets[OLib.Tranche.Junior].trancheCap > 0) {\\n      juniorCappedAmount = min(\\n        juniorInvestableAmount,\\n        vault_.assets[OLib.Tranche.Junior].trancheCap\\n      );\\n    }\\n\\n    (\\n      vault_.assets[OLib.Tranche.Senior].originalInvested,\\n      vault_.assets[OLib.Tranche.Junior].originalInvested\\n    ) = vault_.strategy.invest(\\n      _vaultId,\\n      seniorCappedAmount,\\n      juniorCappedAmount,\\n      seniorInvestableAmount - seniorCappedAmount,\\n      juniorInvestableAmount - juniorCappedAmount,\\n      _seniorMinIn,\\n      _juniorMinIn\\n    );\\n  }\\n\\n  /**\\n   * @notice Return undeposited funds and trigger minting in Tranche Token\\n   * @dev Because the tranches must be balanced to buy LP tokens at\\n   *      the right ratio, it is likely that some deposits will not be\\n   *      accepted. This function transfers that \\\"excess\\\" deposit. Also, it\\n   *      finally mints the tranche tokens for this customer.\\n   * @param _vaultId  Reference to specific Vault\\n   * @param _tranche which tranche to act on\\n   * @return userInvested Total amount actually invested from this tranche\\n   * @return excess Any uninvested funds\\n   */\\n  function _claim(\\n    uint256 _vaultId,\\n    OLib.Tranche _tranche,\\n    address _receiver\\n  )\\n    internal\\n    whenNotPaused\\n    atState(_vaultId, OLib.State.Live)\\n    returns (uint256 userInvested, uint256 excess)\\n  {\\n    Vault storage vault_ = Vaults[_vaultId];\\n    Asset storage _asset = vault_.assets[_tranche];\\n    ITrancheToken _trancheToken = _asset.trancheToken;\\n    OLib.Investor storage investor =\\n      investors[address(_trancheToken)][msg.sender];\\n    require(!investor.claimed, \\\"Already claimed\\\");\\n    IStrategy _strategy = vault_.strategy;\\n    (userInvested, excess) = investor.getInvestedAndExcess(\\n      _getNetOriginalInvested(_asset)\\n    );\\n    if (excess > 0)\\n      _strategy.withdrawExcess(_vaultId, _tranche, _receiver, excess);\\n    if (registry.tokenMinting()) {\\n      _trancheToken.mint(msg.sender, userInvested);\\n    }\\n\\n    investor.claimed = true;\\n    emit Claimed(msg.sender, _vaultId, uint256(_tranche), userInvested, excess);\\n    return (userInvested, excess);\\n  }\\n\\n  function claim(uint256 _vaultId, OLib.Tranche _tranche)\\n    external\\n    override\\n    nonReentrant\\n    returns (uint256, uint256)\\n  {\\n    return _claim(_vaultId, _tranche, msg.sender);\\n  }\\n\\n  function claimETH(uint256 _vaultId, OLib.Tranche _tranche)\\n    external\\n    override\\n    nonReentrant\\n    returns (uint256 invested, uint256 excess)\\n  {\\n    onlyETH(_vaultId, _tranche);\\n    (invested, excess) = _claim(_vaultId, _tranche, address(this));\\n    registry.weth().withdraw(excess);\\n    safeTransferETH(msg.sender, excess);\\n  }\\n\\n  /**\\n   * @notice Called by rollover to claim both tranches\\n   * @dev Triggers minting of tranche tokens. Moves excess to Rollover.\\n   * @param _vaultId Vault id\\n   * @param _rolloverId Rollover ID\\n   * @return srRollInv Amount invested in tranche\\n   * @return jrRollInv Amount invested in tranche\\n   */\\n  function rolloverClaim(uint256 _vaultId, uint256 _rolloverId)\\n    external\\n    override\\n    whenNotPaused\\n    nonReentrant\\n    atState(_vaultId, OLib.State.Live)\\n    onlyRollover(_vaultId, _rolloverId)\\n    returns (uint256 srRollInv, uint256 jrRollInv)\\n  {\\n    Vault storage vault_ = Vaults[_vaultId];\\n    Asset storage senior_ = vault_.assets[OLib.Tranche.Senior];\\n    Asset storage junior_ = vault_.assets[OLib.Tranche.Junior];\\n    srRollInv = _getRolloverInvested(senior_);\\n    jrRollInv = _getRolloverInvested(junior_);\\n    if (srRollInv > 0) {\\n      senior_.trancheToken.mint(msg.sender, srRollInv);\\n    }\\n    if (jrRollInv > 0) {\\n      junior_.trancheToken.mint(msg.sender, jrRollInv);\\n    }\\n    if (senior_.rolloverDeposited > srRollInv) {\\n      vault_.strategy.withdrawExcess(\\n        _vaultId,\\n        OLib.Tranche.Senior,\\n        msg.sender,\\n        senior_.rolloverDeposited - srRollInv\\n      );\\n    }\\n    if (junior_.rolloverDeposited > jrRollInv) {\\n      vault_.strategy.withdrawExcess(\\n        _vaultId,\\n        OLib.Tranche.Junior,\\n        msg.sender,\\n        junior_.rolloverDeposited - jrRollInv\\n      );\\n    }\\n    emit RolloverClaimed(\\n      msg.sender,\\n      _rolloverId,\\n      _vaultId,\\n      srRollInv,\\n      jrRollInv\\n    );\\n    return (srRollInv, jrRollInv);\\n  }\\n\\n  /**\\n   * @notice Redeem funds into AMM\\n   * @dev Exchange LP tokens for senior/junior assets. Compute the amount\\n   *      the senior tranche should get (like 10% more). The senior._received\\n   *      value should be equal to or less than that expected amount. The\\n   *      junior.received should be all that's left.\\n   * @param _vaultId Specific id for this Vault\\n   * @param _seniorMinReceived Compute total expected to redeem, factoring in slippage\\n   * @param _juniorMinReceived Same.\\n   */\\n  function redeem(\\n    uint256 _vaultId,\\n    uint256 _seniorMinReceived,\\n    uint256 _juniorMinReceived\\n  )\\n    external\\n    override\\n    whenNotPaused\\n    nonReentrant\\n    onlyRolloverOrStrategist(_vaultId)\\n    returns (uint256, uint256)\\n  {\\n    transition(_vaultId, OLib.State.Withdraw);\\n    Vault storage vault_ = Vaults[_vaultId];\\n    Asset storage senior_ = vault_.assets[OLib.Tranche.Senior];\\n    Asset storage junior_ = vault_.assets[OLib.Tranche.Junior];\\n    (senior_.received, junior_.received) = vault_.strategy.redeem(\\n      _vaultId,\\n      _getSeniorExpected(vault_, senior_),\\n      _seniorMinReceived,\\n      _juniorMinReceived\\n    );\\n    junior_.received -= takePerformanceFee(vault_, _vaultId);\\n\\n    emit Redeemed(_vaultId, senior_.received, junior_.received);\\n    return (senior_.received, junior_.received);\\n  }\\n\\n  /**\\n   * @notice Investors withdraw funds from Vault\\n   * @dev Based on the fraction of ownership in the original pool of invested assets,\\n          investors get the same fraction of the resulting pile of assets. All funds are withdrawn.\\n   * @param _vaultId Specific ID for this Vault\\n   * @param _tranche Tranche to be deposited in\\n   * @return tokensToWithdraw Amount investor received from transfer\\n   */\\n  function _withdraw(\\n    uint256 _vaultId,\\n    OLib.Tranche _tranche,\\n    address _receiver\\n  )\\n    internal\\n    whenNotPaused\\n    atState(_vaultId, OLib.State.Withdraw)\\n    returns (uint256 tokensToWithdraw)\\n  {\\n    Vault storage vault_ = Vaults[_vaultId];\\n    Asset storage asset_ = vault_.assets[_tranche];\\n    (, , , tokensToWithdraw) = vaultInvestor(_vaultId, _tranche);\\n    ITrancheToken token_ = asset_.trancheToken;\\n    if (registry.tokenMinting()) {\\n      uint256 bal = token_.balanceOf(msg.sender);\\n      if (bal > 0) {\\n        token_.burn(msg.sender, bal);\\n      }\\n    }\\n    asset_.token.safeTransferFrom(\\n      address(vault_.strategy),\\n      _receiver,\\n      tokensToWithdraw\\n    );\\n    investors[address(asset_.trancheToken)][msg.sender].withdrawn = true;\\n    emit Withdrew(msg.sender, _vaultId, uint256(_tranche), tokensToWithdraw);\\n    return tokensToWithdraw;\\n  }\\n\\n  function withdraw(uint256 _vaultId, OLib.Tranche _tranche)\\n    external\\n    override\\n    nonReentrant\\n    returns (uint256)\\n  {\\n    return _withdraw(_vaultId, _tranche, msg.sender);\\n  }\\n\\n  function withdrawETH(uint256 _vaultId, OLib.Tranche _tranche)\\n    external\\n    override\\n    nonReentrant\\n    returns (uint256 amount)\\n  {\\n    onlyETH(_vaultId, _tranche);\\n    amount = _withdraw(_vaultId, _tranche, address(this));\\n    registry.weth().withdraw(amount);\\n    safeTransferETH(msg.sender, amount);\\n  }\\n\\n  receive() external payable {\\n    assert(msg.sender == address(registry.weth()));\\n  }\\n\\n  /**\\n   * @notice Exchange the correct ratio of senior/junior tokens to get LP tokens\\n   * @dev Burn tranche tokens on both sides and send LP tokens to customer\\n   * @param _vaultId  reference to Vault\\n   * @param _shares Share of lp tokens to withdraw\\n   */\\n  function withdrawLp(uint256 _vaultId, uint256 _shares)\\n    external\\n    override\\n    whenNotPaused\\n    nonReentrant\\n    atState(_vaultId, OLib.State.Live)\\n    returns (uint256 seniorTokensNeeded, uint256 juniorTokensNeeded)\\n  {\\n    require(registry.tokenMinting(), \\\"Vault tokens inactive\\\");\\n    Vault storage vault_ = Vaults[_vaultId];\\n    (seniorTokensNeeded, juniorTokensNeeded) = getWithdrawLp(_vaultId, _shares);\\n    vault_.assets[OLib.Tranche.Senior].trancheToken.burn(\\n      msg.sender,\\n      seniorTokensNeeded\\n    );\\n    vault_.assets[OLib.Tranche.Junior].trancheToken.burn(\\n      msg.sender,\\n      juniorTokensNeeded\\n    );\\n    vault_.assets[OLib.Tranche.Senior].totalInvested -= seniorTokensNeeded;\\n    vault_.assets[OLib.Tranche.Junior].totalInvested -= juniorTokensNeeded;\\n    vault_.strategy.removeLp(_vaultId, _shares, msg.sender);\\n    emit WithdrewLP(msg.sender, _shares);\\n  }\\n\\n  function getWithdrawLp(uint256 _vaultId, uint256 _shares)\\n    public\\n    view\\n    atState(_vaultId, OLib.State.Live)\\n    returns (uint256 seniorTokensNeeded, uint256 juniorTokensNeeded)\\n  {\\n    Vault storage vault_ = Vaults[_vaultId];\\n    (, uint256 totalShares) = vault_.strategy.getVaultInfo(_vaultId);\\n    seniorTokensNeeded =\\n      (vault_.assets[OLib.Tranche.Senior].totalInvested * _shares) /\\n      totalShares;\\n    juniorTokensNeeded =\\n      (vault_.assets[OLib.Tranche.Junior].totalInvested * _shares) /\\n      totalShares;\\n  }\\n\\n  function getState(uint256 _vaultId)\\n    public\\n    view\\n    override\\n    returns (OLib.State)\\n  {\\n    Vault storage vault_ = Vaults[_vaultId];\\n    return vault_.state;\\n  }\\n\\n  /**\\n   * Helper functions\\n   */\\n\\n  /**\\n   * @notice Compute performance fee for strategist\\n   * @dev If junior makes at least as much as the senior, then charge\\n   *      a performance fee on junior's earning beyond the hurdle.\\n   * @param vault Vault to work on\\n   * @return fee Amount of tokens deducted from junior tranche\\n   */\\n  function takePerformanceFee(Vault storage vault, uint256 vaultId)\\n    internal\\n    returns (uint256 fee)\\n  {\\n    fee = 0;\\n    if (address(performanceFeeCollector) != address(0)) {\\n      Asset storage junior = vault.assets[OLib.Tranche.Junior];\\n      uint256 juniorHurdle =\\n        (junior.totalInvested * vault.hurdleRate) / denominator;\\n\\n      if (junior.received > juniorHurdle) {\\n        fee = (vault.performanceFee * (junior.received - juniorHurdle)) / denominator;\\n        IERC20(junior.token).safeTransferFrom(\\n          address(vault.strategy),\\n          address(performanceFeeCollector),\\n          fee\\n        );\\n        performanceFeeCollector.processFee(vaultId, IERC20(junior.token), fee);\\n      }\\n    }\\n  }\\n\\n  function safeTransferETH(address to, uint256 value) internal {\\n    (bool success, ) = to.call{value: value}(new bytes(0));\\n    require(success, \\\"ETH transfer failed\\\");\\n  }\\n\\n  /**\\n   * @notice Multiply senior by hurdle raten\\n   * @param vault Vault to work on\\n   * @param senior Relevant asset\\n   * @return Max value senior can earn for this Vault\\n   */\\n  function _getSeniorExpected(Vault storage vault, Asset storage senior)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    return (senior.totalInvested * vault.hurdleRate) / denominator;\\n  }\\n\\n  function _getNetOriginalInvested(Asset storage asset)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 o = asset.originalInvested;\\n    uint256 r = asset.rolloverDeposited;\\n    return o > r ? o - r : 0;\\n  }\\n\\n  function _getRolloverInvested(Asset storage asset)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 o = asset.originalInvested;\\n    uint256 r = asset.rolloverDeposited;\\n    return o > r ? r : o;\\n  }\\n\\n  /**\\n   * Setters\\n   */\\n\\n  /**\\n   * @notice Set optional performance fee for Vault\\n   * @dev Only available before deposits are open\\n   * @param _vaultId Vault to work on\\n   * @param _performanceFee Percent fee, denominator is 10000\\n   */\\n  function setPerformanceFee(uint256 _vaultId, uint256 _performanceFee)\\n    external\\n    onlyStrategist(_vaultId)\\n    atState(_vaultId, OLib.State.Inactive)\\n  {\\n    require(_performanceFee <= denominator, \\\"Too high\\\");\\n    Vault storage vault_ = Vaults[_vaultId];\\n    vault_.performanceFee = _performanceFee;\\n    emit PerformanceFeeSet(_vaultId, _performanceFee);\\n  }\\n\\n  /**\\n   * @notice All performanceFees go this address. Only set by governance role.\\n   * @param _collector Address of collector contract\\n   */\\n  function setPerformanceFeeCollector(address _collector)\\n    external\\n    isAuthorized(OLib.GOVERNANCE_ROLE)\\n  {\\n    performanceFeeCollector = IFeeCollector(_collector);\\n    emit PerformanceFeeCollectorSet(_collector);\\n  }\\n\\n  function canDeposit(uint256 _vaultId) external view override returns (bool) {\\n    Vault storage vault_ = Vaults[_vaultId];\\n    if (vault_.state == OLib.State.Inactive) {\\n      return vault_.startAt <= block.timestamp && vault_.startAt > 0;\\n    }\\n    return vault_.state == OLib.State.Deposit;\\n  }\\n\\n  function getVaults(uint256 _from, uint256 _to)\\n    external\\n    view\\n    returns (VaultView[] memory vaults)\\n  {\\n    EnumerableSet.UintSet storage vaults_ = vaultIDs;\\n    uint256 len = vaults_.length();\\n    if (len == 0) {\\n      return new VaultView[](0);\\n    }\\n    if (len <= _to) {\\n      _to = len - 1;\\n    }\\n    vaults = new VaultView[](1 + _to - _from);\\n    for (uint256 i = _from; i <= _to; i++) {\\n      vaults[i] = getVaultById(vaults_.at(i));\\n    }\\n    return vaults;\\n  }\\n\\n  function getVaultByToken(address _trancheToken)\\n    external\\n    view\\n    returns (VaultView memory)\\n  {\\n    return getVaultById(VaultsByTokens[_trancheToken]);\\n  }\\n\\n  function getVaultById(uint256 _vaultId)\\n    public\\n    view\\n    override\\n    returns (VaultView memory vault)\\n  {\\n    Vault storage svault_ = Vaults[_vaultId];\\n    mapping(OLib.Tranche => Asset) storage sassets_ = svault_.assets;\\n    Asset[] memory assets = new Asset[](2);\\n    assets[0] = sassets_[OLib.Tranche.Senior];\\n    assets[1] = sassets_[OLib.Tranche.Junior];\\n    vault = VaultView(\\n      _vaultId,\\n      assets,\\n      svault_.strategy,\\n      svault_.creator,\\n      svault_.strategist,\\n      svault_.rollover,\\n      svault_.hurdleRate,\\n      svault_.state,\\n      svault_.startAt,\\n      svault_.investAt,\\n      svault_.redeemAt\\n    );\\n  }\\n\\n  function isPaused() external view override returns (bool) {\\n    return paused();\\n  }\\n\\n  function getRegistry() external view override returns (address) {\\n    return address(registry);\\n  }\\n\\n  function seniorExpected(uint256 _vaultId)\\n    external\\n    view\\n    override\\n    returns (uint256)\\n  {\\n    Vault storage vault_ = Vaults[_vaultId];\\n    Asset storage senior_ = vault_.assets[OLib.Tranche.Senior];\\n    return _getSeniorExpected(vault_, senior_);\\n  }\\n\\n  function getUserCaps(uint256 _vaultId)\\n    external\\n    view\\n    override\\n    returns (uint256 seniorUserCap, uint256 juniorUserCap)\\n  {\\n    Vault storage vault_ = Vaults[_vaultId];\\n    return (\\n      vault_.assets[OLib.Tranche.Senior].userCap,\\n      vault_.assets[OLib.Tranche.Junior].userCap\\n    );\\n  }\\n\\n  /*\\n   * @return position: total user invested = unclaimed invested amount + tranche token balance\\n   * @return claimableBalance: unclaimed invested deposit amount that can be converted into tranche tokens by claiming\\n   * @return withdrawableExcess: unclaimed uninvested deposit amount that can be recovered by claiming\\n   * @return withdrawableBalance: total amount that the user can redeem their position for by withdrawaing, 0 if the product is still live\\n   */\\n  function vaultInvestor(uint256 _vaultId, OLib.Tranche _tranche)\\n    public\\n    view\\n    override\\n    returns (\\n      uint256 position,\\n      uint256 claimableBalance,\\n      uint256 withdrawableExcess,\\n      uint256 withdrawableBalance\\n    )\\n  {\\n    Asset storage asset_ = Vaults[_vaultId].assets[_tranche];\\n    OLib.Investor storage investor_ =\\n      investors[address(asset_.trancheToken)][msg.sender];\\n    if (!investor_.withdrawn) {\\n      (position, withdrawableExcess) = investor_.getInvestedAndExcess(\\n        _getNetOriginalInvested(asset_)\\n      );\\n      if (!investor_.claimed) {\\n        claimableBalance = position;\\n        position += asset_.trancheToken.balanceOf(msg.sender);\\n      } else {\\n        withdrawableExcess = 0;\\n        if (registry.tokenMinting()) {\\n          position = asset_.trancheToken.balanceOf(msg.sender);\\n        }\\n      }\\n      if (Vaults[_vaultId].state == OLib.State.Withdraw) {\\n        claimableBalance = 0;\\n        withdrawableBalance =\\n          withdrawableExcess +\\n          (asset_.received * position) /\\n          asset_.totalInvested;\\n      }\\n    }\\n  }\\n\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/OndoRegistryClient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"./OndoRegistryClientInitializable.sol\\\";\\n\\nabstract contract OndoRegistryClient is OndoRegistryClientInitializable {\\n  constructor(address _registry) {\\n    __OndoRegistryClient__initialize(_registry);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/OndoRegistryClientInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"contracts/interfaces/IRegistry.sol\\\";\\nimport \\\"contracts/libraries/OndoLibrary.sol\\\";\\n\\nabstract contract OndoRegistryClientInitializable is\\n  Initializable,\\n  ReentrancyGuard,\\n  Pausable\\n{\\n  using SafeERC20 for IERC20;\\n\\n  IRegistry public registry;\\n  uint256 public denominator;\\n\\n  function __OndoRegistryClient__initialize(address _registry)\\n    internal\\n    initializer\\n  {\\n    require(_registry != address(0), \\\"Invalid registry address\\\");\\n    registry = IRegistry(_registry);\\n    denominator = registry.denominator();\\n  }\\n\\n  /**\\n   * @notice General ACL checker\\n   * @param _role Role as defined in OndoLibrary\\n   */\\n  modifier isAuthorized(bytes32 _role) {\\n    require(registry.authorized(_role, msg.sender), \\\"Unauthorized\\\");\\n    _;\\n  }\\n\\n  /*\\n   * @notice Helper to expose a Pausable interface to tools\\n   */\\n  function paused() public view virtual override returns (bool) {\\n    return registry.paused() || super.paused();\\n  }\\n\\n  function pause() external virtual isAuthorized(OLib.PANIC_ROLE)\\n  {\\n    super._pause();\\n  }\\n\\n  function unpause() external virtual isAuthorized(OLib.GUARDIAN_ROLE)\\n  {\\n    super._unpause();\\n  }\\n\\n  /**\\n   * @notice Grab tokens and send to caller\\n   * @dev If the _amount[i] is 0, then transfer all the tokens\\n   * @param _tokens List of tokens\\n   * @param _amounts Amount of each token to send\\n   */\\n  function _rescueTokens(address[] calldata _tokens, uint256[] memory _amounts)\\n    internal\\n    virtual\\n  {\\n    for (uint256 i = 0; i < _tokens.length; i++) {\\n      uint256 amount = _amounts[i];\\n      if (amount == 0) {\\n        amount = IERC20(_tokens[i]).balanceOf(address(this));\\n      }\\n      IERC20(_tokens[i]).safeTransfer(msg.sender, amount);\\n    }\\n  }\\n\\n  function rescueTokens(address[] calldata _tokens, uint256[] memory _amounts)\\n    public\\n    whenPaused\\n    isAuthorized(OLib.GUARDIAN_ROLE)\\n  {\\n    require(_tokens.length == _amounts.length, \\\"Invalid array sizes\\\");\\n    _rescueTokens(_tokens, _amounts);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/TrancheToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"contracts/interfaces/IPairVault.sol\\\";\\nimport \\\"contracts/interfaces/ITrancheToken.sol\\\";\\nimport \\\"contracts/interfaces/IBasicVault.sol\\\";\\n\\n/**\\n * @title Fixed duration tokens representing tranches\\n * @notice For every Vault, for every tranche, this ERC20 token enables trading.\\n * @dev Since these are short-lived tokens and we are producing lots\\n *      of them, this uses clones to cheaply create many instance.  in\\n *      practice this is not upgradeable, we use openzeppelin's clone\\n */\\ncontract TrancheToken is ERC20Upgradeable, ITrancheToken, OwnableUpgradeable {\\n  IBasicVault public vault;\\n  uint256 public vaultId;\\n\\n  modifier whenNotPaused {\\n    require(!vault.isPaused(), \\\"Global pause in effect\\\");\\n    _;\\n  }\\n\\n  modifier onlyRegistry {\\n    require(\\n      vault.getRegistry() == msg.sender,\\n      \\\"Invalid access: Only Registry can call\\\"\\n    );\\n    _;\\n  }\\n\\n  function initialize(\\n    uint256 _vaultId,\\n    string calldata _name,\\n    string calldata _symbol,\\n    address _vault\\n  ) external initializer {\\n    __Ownable_init();\\n    __ERC20_init(_name, _symbol);\\n    vault = IBasicVault(_vault);\\n    vaultId = _vaultId;\\n  }\\n\\n  function mint(address _account, uint256 _amount)\\n    external\\n    override\\n    whenNotPaused\\n    onlyOwner\\n  {\\n    _mint(_account, _amount);\\n  }\\n\\n  function burn(address _account, uint256 _amount)\\n    external\\n    override\\n    whenNotPaused\\n    onlyOwner\\n  {\\n    _burn(_account, _amount);\\n  }\\n\\n  function transfer(address _account, uint256 _amount)\\n    public\\n    override(ERC20Upgradeable, IERC20Upgradeable)\\n    whenNotPaused\\n    returns (bool)\\n  {\\n    return super.transfer(_account, _amount);\\n  }\\n\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _amount\\n  )\\n    public\\n    override(ERC20Upgradeable, IERC20Upgradeable)\\n    whenNotPaused\\n    returns (bool)\\n  {\\n    return super.transferFrom(_from, _to, _amount);\\n  }\\n\\n  function approve(address _account, uint256 _amount)\\n    public\\n    override(ERC20Upgradeable, IERC20Upgradeable)\\n    whenNotPaused\\n    returns (bool)\\n  {\\n    return super.approve(_account, _amount);\\n  }\\n\\n  function destroy(address payable _receiver)\\n    external\\n    override\\n    whenNotPaused\\n    onlyRegistry\\n  {\\n    selfdestruct(_receiver);\\n  }\\n\\n  function increaseAllowance(address spender, uint256 addedValue)\\n    public\\n    override(ERC20Upgradeable)\\n    whenNotPaused\\n    returns (bool)\\n  {\\n    return super.increaseAllowance(spender, addedValue);\\n  }\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    override(ERC20Upgradeable)\\n    whenNotPaused\\n    returns (bool)\\n  {\\n    return super.decreaseAllowance(spender, subtractedValue);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBasicVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\ninterface IBasicVault {\\n  function isPaused() external view returns (bool);\\n\\n  function getRegistry() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeCollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IFeeCollector {\\n  function processFee(\\n    uint256 vaultId,\\n    IERC20 token,\\n    uint256 feeSent\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPairVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"contracts/libraries/OndoLibrary.sol\\\";\\nimport \\\"contracts/interfaces/ITrancheToken.sol\\\";\\nimport \\\"contracts/interfaces/IStrategy.sol\\\";\\nimport \\\"contracts/interfaces/IBasicVault.sol\\\";\\n\\ninterface IPairVault is IBasicVault {\\n  // Container to return Vault info to caller\\n  struct VaultView {\\n    uint256 id;\\n    Asset[] assets;\\n    IStrategy strategy; // Shared contract that interacts with AMMs\\n    address creator; // Account that calls createVault\\n    address strategist; // Has the right to call invest() and redeem(), and harvest() if strategy supports it\\n    address rollover;\\n    uint256 hurdleRate; // Return offered to senior tranche\\n    OLib.State state; // Current state of Vault\\n    uint256 startAt; // Time when the Vault is unpaused to begin accepting deposits\\n    uint256 investAt; // Time when investors can't move funds, strategist can invest\\n    uint256 redeemAt; // Time when strategist can redeem LP tokens, investors can withdraw\\n  }\\n\\n  // Track the asset type and amount in different stages\\n  struct Asset {\\n    IERC20 token;\\n    ITrancheToken trancheToken;\\n    uint256 trancheCap;\\n    uint256 userCap;\\n    uint256 deposited;\\n    uint256 originalInvested;\\n    uint256 totalInvested; // not literal 1:1, originalInvested + proportional lp from mid-term\\n    uint256 received;\\n    uint256 rolloverDeposited;\\n  }\\n\\n  function getState(uint256 _vaultId) external view returns (OLib.State);\\n\\n  function createVault(OLib.VaultParams calldata _params)\\n    external\\n    returns (uint256 vaultId);\\n\\n  function deposit(\\n    uint256 _vaultId,\\n    OLib.Tranche _tranche,\\n    uint256 _amount\\n  ) external;\\n\\n  function depositETH(uint256 _vaultId, OLib.Tranche _tranche) external payable;\\n\\n  function depositLp(uint256 _vaultId, uint256 _amount)\\n    external\\n    returns (uint256 seniorTokensOwed, uint256 juniorTokensOwed);\\n\\n  function invest(\\n    uint256 _vaultId,\\n    uint256 _seniorMinOut,\\n    uint256 _juniorMinOut\\n  ) external\\n    returns (uint256, uint256);\\n\\n  function redeem(\\n    uint256 _vaultId,\\n    uint256 _seniorMinOut,\\n    uint256 _juniorMinOut\\n  ) external\\n    returns (uint256, uint256);\\n\\n  function withdraw(uint256 _vaultId, OLib.Tranche _tranche)\\n    external\\n    returns (uint256);\\n\\n  function withdrawETH(uint256 _vaultId, OLib.Tranche _tranche)\\n    external\\n    returns (uint256);\\n\\n  function withdrawLp(uint256 _vaultId, uint256 _amount)\\n    external\\n    returns (uint256, uint256);\\n\\n  function claim(uint256 _vaultId, OLib.Tranche _tranche)\\n    external\\n    returns (uint256, uint256);\\n\\n  function claimETH(uint256 _vaultId, OLib.Tranche _tranche)\\n    external\\n    returns (uint256, uint256);\\n\\n  function depositFromRollover(\\n    uint256 _vaultId,\\n    uint256 _rolloverId,\\n    uint256 _seniorAmount,\\n    uint256 _juniorAmount\\n  ) external;\\n\\n  function rolloverClaim(uint256 _vaultId, uint256 _rolloverId)\\n    external\\n    returns (uint256, uint256);\\n\\n  function setRollover(\\n    uint256 _vaultId,\\n    address _rollover,\\n    uint256 _rolloverId\\n  ) external;\\n\\n  function canDeposit(uint256 _vaultId) external view returns (bool);\\n\\n  // function canTransition(uint256 _vaultId, OLib.State _state)\\n  //   external\\n  //   view\\n  //   returns (bool);\\n\\n  function getVaultById(uint256 _vaultId)\\n    external\\n    view\\n    returns (VaultView memory);\\n\\n  function vaultInvestor(uint256 _vaultId, OLib.Tranche _tranche)\\n    external\\n    view\\n    returns (\\n      uint256 position,\\n      uint256 claimableBalance,\\n      uint256 withdrawableExcess,\\n      uint256 withdrawableBalance\\n    );\\n\\n  function seniorExpected(uint256 _vaultId) external view returns (uint256);\\n\\n  function getUserCaps(uint256 _vaultId)\\n    external\\n    view\\n    returns (uint256 seniorUserCap, uint256 juniorUserCap);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"contracts/interfaces/IWETH.sol\\\";\\n\\n/**\\n * @title Global values used by many contracts\\n * @notice This is mostly used for access control\\n */\\ninterface IRegistry is IAccessControl {\\n  function paused() external view returns (bool);\\n\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function tokenMinting() external view returns (bool);\\n\\n  function denominator() external view returns (uint256);\\n\\n  function weth() external view returns (IWETH);\\n\\n  function authorized(bytes32 _role, address _account)\\n    external\\n    view\\n    returns (bool);\\n\\n  function enableTokens() external;\\n  function disableTokens() external;\\n\\n  function recycleDeadTokens(uint256 _tranches) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"contracts/libraries/OndoLibrary.sol\\\";\\nimport \\\"contracts/interfaces/IPairVault.sol\\\";\\n\\ninterface IStrategy {\\n  // Additional info stored for each Vault\\n  struct Vault {\\n    IPairVault origin; // who created this Vault\\n    IERC20 pool; // the DEX pool\\n    IERC20 senior; // senior asset in pool\\n    IERC20 junior; // junior asset in pool\\n    uint256 shares; // number of shares for ETF-style mid-duration entry/exit\\n    uint256 seniorExcess; // unused senior deposits\\n    uint256 juniorExcess; // unused junior deposits\\n  }\\n\\n  function vaults(uint256 vaultId)\\n    external\\n    view\\n    returns (\\n      IPairVault origin,\\n      IERC20 pool,\\n      IERC20 senior,\\n      IERC20 junior,\\n      uint256 shares,\\n      uint256 seniorExcess,\\n      uint256 juniorExcess\\n    );\\n\\n  function addVault(\\n    uint256 _vaultId,\\n    IERC20 _senior,\\n    IERC20 _junior\\n  ) external;\\n\\n  function addLp(uint256 _vaultId, uint256 _lpTokens) external;\\n\\n  function removeLp(\\n    uint256 _vaultId,\\n    uint256 _shares,\\n    address to\\n  ) external;\\n\\n  function getVaultInfo(uint256 _vaultId)\\n    external\\n    view\\n    returns (IERC20, uint256);\\n\\n  function invest(\\n    uint256 _vaultId,\\n    uint256 _totalSenior,\\n    uint256 _totalJunior,\\n    uint256 _extraSenior,\\n    uint256 _extraJunior,\\n    uint256 _seniorMinOut,\\n    uint256 _juniorMinOut\\n  ) external returns (uint256 seniorInvested, uint256 juniorInvested);\\n\\n  function sharesFromLp(uint256 vaultId, uint256 lpTokens)\\n    external\\n    view\\n    returns (\\n      uint256 shares,\\n      uint256 vaultShares,\\n      IERC20 pool\\n    );\\n\\n  function lpFromShares(uint256 vaultId, uint256 shares)\\n    external\\n    view\\n    returns (uint256 lpTokens, uint256 vaultShares);\\n\\n  function redeem(\\n    uint256 _vaultId,\\n    uint256 _seniorExpected,\\n    uint256 _seniorMinOut,\\n    uint256 _juniorMinOut\\n  ) external returns (uint256, uint256);\\n\\n  function withdrawExcess(\\n    uint256 _vaultId,\\n    OLib.Tranche tranche,\\n    address to,\\n    uint256 amount\\n  ) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITrancheToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ITrancheToken is IERC20Upgradeable {\\n  function mint(address _account, uint256 _amount) external;\\n\\n  function burn(address _account, uint256 _amount) external;\\n\\n  function destroy(address payable _receiver) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/OndoLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/utils/Arrays.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n//import \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title Helper functions\\n */\\nlibrary OLib {\\n  using Arrays for uint256[];\\n  using OLib for OLib.Investor;\\n\\n  // State transition per Vault. Just linear transitions.\\n  enum State {Inactive, Deposit, Live, Withdraw}\\n\\n  // Only supports 2 tranches for now\\n  enum Tranche {Senior, Junior}\\n\\n  struct VaultParams {\\n    address seniorAsset;\\n    address juniorAsset;\\n    address strategist;\\n    address strategy;\\n    uint256 hurdleRate;\\n    uint256 startTime;\\n    uint256 enrollment;\\n    uint256 duration;\\n    string seniorName;\\n    string seniorSym;\\n    string juniorName;\\n    string juniorSym;\\n    uint256 seniorTrancheCap;\\n    uint256 seniorUserCap;\\n    uint256 juniorTrancheCap;\\n    uint256 juniorUserCap;\\n  }\\n\\n  struct RolloverParams {\\n    VaultParams vault;\\n    address strategist;\\n    string seniorName;\\n    string seniorSym;\\n    string juniorName;\\n    string juniorSym;\\n  }\\n\\n  bytes32 public constant GOVERNANCE_ROLE = keccak256(\\\"GOVERNANCE_ROLE\\\");\\n  bytes32 public constant PANIC_ROLE = keccak256(\\\"PANIC_ROLE\\\");\\n  bytes32 public constant GUARDIAN_ROLE = keccak256(\\\"GUARDIAN_ROLE\\\");\\n  bytes32 public constant DEPLOYER_ROLE = keccak256(\\\"DEPLOYER_ROLE\\\");\\n  bytes32 public constant CREATOR_ROLE = keccak256(\\\"CREATOR_ROLE\\\");\\n  bytes32 public constant STRATEGIST_ROLE = keccak256(\\\"STRATEGIST_ROLE\\\");\\n  bytes32 public constant VAULT_ROLE = keccak256(\\\"VAULT_ROLE\\\");\\n  bytes32 public constant ROLLOVER_ROLE = keccak256(\\\"ROLLOVER_ROLE\\\");\\n  bytes32 public constant STRATEGY_ROLE = keccak256(\\\"STRATEGY_ROLE\\\");\\n\\n  // Both sums are running sums. If a user deposits [$1, $5, $3], then\\n  // userSums would be [$1, $6, $9]. You can figure out the deposit\\n  // amount be subtracting userSums[i]-userSum[i-1].\\n\\n  // prefixSums is the total deposited for all investors + this\\n  // investors deposit at the time this deposit is made. So at\\n  // prefixSum[0], it would be $1 + totalDeposits, where totalDeposits\\n  // could be $1000 because other investors have put in money.\\n  struct Investor {\\n    uint256[] userSums;\\n    uint256[] prefixSums;\\n    bool claimed;\\n    bool withdrawn;\\n  }\\n\\n  /**\\n   * @dev Given the total amount invested by the Vault, we want to find\\n   *   out how many of this investor's deposits were actually\\n   *   used. Use findUpperBound on the prefixSum to find the point\\n   *   where total deposits were accepted. For example, if $2000 was\\n   *   deposited by all investors and $1000 was invested, then some\\n   *   position in the prefixSum splits the array into deposits that\\n   *   got in, and deposits that didn't get in. That same position\\n   *   maps to userSums. This is the user's deposits that got\\n   *   in. Since we are keeping track of the sums, we know at that\\n   *   position the total deposits for a user was $15, even if it was\\n   *   15 $1 deposits. And we know the amount that didn't get in is\\n   *   the last value in userSum - the amount that got it.\\n\\n   * @param investor A specific investor\\n   * @param invested The total amount invested by this Vault\\n   */\\n  function getInvestedAndExcess(Investor storage investor, uint256 invested)\\n    internal\\n    view\\n    returns (uint256 userInvested, uint256 excess)\\n  {\\n    uint256[] storage prefixSums_ = investor.prefixSums;\\n    uint256 length = prefixSums_.length;\\n    if (length == 0) {\\n      // There were no deposits. Return 0, 0.\\n      return (userInvested, excess);\\n    }\\n    uint256 leastUpperBound = prefixSums_.findUpperBound(invested);\\n    if (length == leastUpperBound) {\\n      // All deposits got in, no excess. Return total deposits, 0\\n      userInvested = investor.userSums[length - 1];\\n      return (userInvested, excess);\\n    }\\n    uint256 prefixSum = prefixSums_[leastUpperBound];\\n    if (prefixSum == invested) {\\n      // Not all deposits got in, but there are no partial deposits\\n      userInvested = investor.userSums[leastUpperBound];\\n      excess = investor.userSums[length - 1] - userInvested;\\n    } else {\\n      // Let's say some of my deposits got in. The last deposit,\\n      // however, was $100 and only $30 got in. Need to split that\\n      // deposit so $30 got in, $70 is excess.\\n      userInvested = leastUpperBound > 0\\n        ? investor.userSums[leastUpperBound - 1]\\n        : 0;\\n      uint256 depositAmount = investor.userSums[leastUpperBound] - userInvested;\\n      if (prefixSum - depositAmount < invested) {\\n        userInvested += (depositAmount + invested - prefixSum);\\n        excess = investor.userSums[length - 1] - userInvested;\\n      } else {\\n        excess = investor.userSums[length - 1] - userInvested;\\n      }\\n    }\\n  }\\n}\\n\\n/**\\n * @title Subset of SafeERC20 from openZeppelin\\n *\\n * @dev Some non-standard ERC20 contracts (e.g. Tether) break\\n * `approve` by forcing it to behave like `safeApprove`. This means\\n * `safeIncreaseAllowance` will fail when it tries to adjust the\\n * allowance. The code below simply adds an extra call to\\n * `approve(spender, 0)`.\\n */\\nlibrary OndoSaferERC20 {\\n  using SafeERC20 for IERC20;\\n\\n  function ondoSafeIncreaseAllowance(\\n    IERC20 token,\\n    address spender,\\n    uint256 value\\n  ) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    token.safeApprove(spender, 0);\\n    token.safeApprove(spender, newAllowance);\\n  }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trancheTokenImpl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"seniorAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"juniorAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ITrancheToken\",\"name\":\"seniorToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ITrancheToken\",\"name\":\"juniorToken\",\"type\":\"address\"}],\"name\":\"CreatedPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"senior\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"junior\",\"type\":\"uint256\"}],\"name\":\"DepositedLP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seniorAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"juniorAmount\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"}],\"name\":\"PerformanceFeeCollectorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"PerformanceFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seniorReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"juniorReceived\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rollover\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rolloverId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seniorAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"juniorAmount\",\"type\":\"uint256\"}],\"name\":\"RolloverClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rollover\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rolloverId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seniorAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"juniorAmount\",\"type\":\"uint256\"}],\"name\":\"RolloverDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rollover\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rolloverId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"SetRollover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"trancheId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrewLP\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"VaultsByTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"canDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"enum OLib.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"enum OLib.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"}],\"name\":\"claimETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"invested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"excess\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seniorAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"juniorAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"hurdleRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enrollment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"seniorName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"seniorSym\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"juniorName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"juniorSym\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"seniorTrancheCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"seniorUserCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorTrancheCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorUserCap\",\"type\":\"uint256\"}],\"internalType\":\"struct OLib.VaultParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"createVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"enum OLib.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"enum OLib.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rolloverId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seniorAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_juniorAmount\",\"type\":\"uint256\"}],\"name\":\"depositFromRollover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokens\",\"type\":\"uint256\"}],\"name\":\"depositLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"seniorTokensOwed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorTokensOwed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokens\",\"type\":\"uint256\"}],\"name\":\"getDepositLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"seniorTokensOwed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorTokensOwed\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"enum OLib.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getUserCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"seniorUserCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorUserCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getVaultById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract ITrancheToken\",\"name\":\"trancheToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"trancheCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverDeposited\",\"type\":\"uint256\"}],\"internalType\":\"struct IPairVault.Asset[]\",\"name\":\"assets\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollover\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"hurdleRate\",\"type\":\"uint256\"},{\"internalType\":\"enum OLib.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemAt\",\"type\":\"uint256\"}],\"internalType\":\"struct IPairVault.VaultView\",\"name\":\"vault\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trancheToken\",\"type\":\"address\"}],\"name\":\"getVaultByToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract ITrancheToken\",\"name\":\"trancheToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"trancheCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverDeposited\",\"type\":\"uint256\"}],\"internalType\":\"struct IPairVault.Asset[]\",\"name\":\"assets\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollover\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"hurdleRate\",\"type\":\"uint256\"},{\"internalType\":\"enum OLib.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemAt\",\"type\":\"uint256\"}],\"internalType\":\"struct IPairVault.VaultView\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getVaults\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract ITrancheToken\",\"name\":\"trancheToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"trancheCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInvested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverDeposited\",\"type\":\"uint256\"}],\"internalType\":\"struct IPairVault.Asset[]\",\"name\":\"assets\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rollover\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"hurdleRate\",\"type\":\"uint256\"},{\"internalType\":\"enum OLib.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemAt\",\"type\":\"uint256\"}],\"internalType\":\"struct IPairVault.VaultView[]\",\"name\":\"vaults\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"getWithdrawLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"seniorTokensNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorTokensNeeded\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seniorMinIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_juniorMinIn\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeCollector\",\"outputs\":[{\"internalType\":\"contract IFeeCollector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seniorMinReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_juniorMinReceived\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rolloverId\",\"type\":\"uint256\"}],\"name\":\"rolloverClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"srRollInv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jrRollInv\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"seniorExpected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collector\",\"type\":\"address\"}],\"name\":\"setPerformanceFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rollover\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rolloverId\",\"type\":\"uint256\"}],\"name\":\"setRollover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trancheTokenImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"enum OLib.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"}],\"name\":\"vaultInvestor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableExcess\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"enum OLib.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"enum OLib.Tranche\",\"name\":\"_tranche\",\"type\":\"uint8\"}],\"name\":\"withdrawETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdrawLp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"seniorTokensNeeded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"juniorTokensNeeded\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"AllPairVault","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"100","ConstructorArguments":"00000000000000000000000047d1f3fda174270244a1d800c49f3af456f0500400000000000000000000000051f07e597a2a7de7601767407a45fb3f581f7b7d","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}