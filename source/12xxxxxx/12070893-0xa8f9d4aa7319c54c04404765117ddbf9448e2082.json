{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mapping/compound.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IndexInterface {\\n    function master() external view returns (address);\\n}\\n\\ninterface ConnectorsInterface {\\n    function chief(address) external view returns (bool);\\n}\\n\\ninterface CTokenInterface {\\n    function isCToken() external view returns (bool);\\n    function underlying() external view returns (address);\\n}\\n\\nabstract contract Helpers {\\n\\n    struct TokenMap {\\n        address ctoken;\\n        address token;\\n    }\\n\\n    event LogCTokenAdded(string indexed name, address indexed token, address indexed ctoken);\\n    event LogCTokenUpdated(string indexed name, address indexed token, address indexed ctoken);\\n\\n    ConnectorsInterface public immutable connectors;\\n\\n    // InstaIndex Address.\\n    IndexInterface public constant instaIndex = IndexInterface(0x2971AdFa57b20E5a416aE5a708A8655A9c74f723);\\n\\n    address public constant ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    mapping (string => TokenMap) public cTokenMapping;\\n\\n    modifier isChief {\\n        require(msg.sender == instaIndex.master() || connectors.chief(msg.sender), \\\"not-an-chief\\\");\\n        _;\\n    }\\n\\n    constructor(address _connectors) {\\n        connectors = ConnectorsInterface(_connectors);\\n    }\\n\\n    function _addCtokenMapping(\\n        string[] memory _names,\\n        address[] memory _tokens,\\n        address[] memory _ctokens\\n    ) internal {\\n        require(_names.length == _tokens.length, \\\"addCtokenMapping: not same length\\\");\\n        require(_names.length == _ctokens.length, \\\"addCtokenMapping: not same length\\\");\\n\\n        for (uint i = 0; i < _ctokens.length; i++) {\\n            TokenMap memory _data = cTokenMapping[_names[i]];\\n\\n            require(_data.ctoken == address(0), \\\"addCtokenMapping: mapping added already\\\");\\n            require(_data.token == address(0), \\\"addCtokenMapping: mapping added already\\\");\\n\\n            require(_tokens[i] != address(0), \\\"addCtokenMapping: _tokens address not vaild\\\");\\n            require(_ctokens[i] != address(0), \\\"addCtokenMapping: _ctokens address not vaild\\\");\\n\\n            CTokenInterface _ctokenContract = CTokenInterface(_ctokens[i]);\\n\\n            require(_ctokenContract.isCToken(), \\\"addCtokenMapping: not a cToken\\\");\\n            if (_tokens[i] != ethAddr) {\\n                require(_ctokenContract.underlying() == _tokens[i], \\\"addCtokenMapping: mapping mismatch\\\");\\n            }\\n\\n            cTokenMapping[_names[i]] = TokenMap(\\n                _ctokens[i],\\n                _tokens[i]\\n            );\\n            emit LogCTokenAdded(_names[i], _tokens[i], _ctokens[i]);\\n        }\\n    }\\n\\n    function updateCtokenMapping(\\n        string[] calldata _names,\\n        address[] memory _tokens,\\n        address[] calldata _ctokens\\n    ) external {\\n        require(msg.sender == instaIndex.master(), \\\"not-master\\\");\\n\\n        require(_names.length == _tokens.length, \\\"updateCtokenMapping: not same length\\\");\\n        require(_names.length == _ctokens.length, \\\"updateCtokenMapping: not same length\\\");\\n\\n        for (uint i = 0; i < _ctokens.length; i++) {\\n            TokenMap memory _data = cTokenMapping[_names[i]];\\n\\n            require(_data.ctoken != address(0), \\\"updateCtokenMapping: mapping does not exist\\\");\\n            require(_data.token != address(0), \\\"updateCtokenMapping: mapping does not exist\\\");\\n\\n            require(_tokens[i] != address(0), \\\"updateCtokenMapping: _tokens address not vaild\\\");\\n            require(_ctokens[i] != address(0), \\\"updateCtokenMapping: _ctokens address not vaild\\\");\\n\\n            CTokenInterface _ctokenContract = CTokenInterface(_ctokens[i]);\\n\\n            require(_ctokenContract.isCToken(), \\\"updateCtokenMapping: not a cToken\\\");\\n            if (_tokens[i] != ethAddr) {\\n                require(_ctokenContract.underlying() == _tokens[i], \\\"addCtokenMapping: mapping mismatch\\\");\\n            }\\n\\n            cTokenMapping[_names[i]] = TokenMap(\\n                _ctokens[i],\\n                _tokens[i]\\n            );\\n            emit LogCTokenUpdated(_names[i], _tokens[i], _ctokens[i]);\\n        }\\n    }\\n\\n    function addCtokenMapping(\\n        string[] memory _names,\\n        address[] memory _tokens,\\n        address[] memory _ctokens\\n    ) external isChief {\\n        _addCtokenMapping(_names, _tokens, _ctokens);\\n    }\\n\\n    function getMapping(string memory _tokenId) external view returns (address, address) {\\n        TokenMap memory _data = cTokenMapping[_tokenId];\\n        return (_data.token, _data.ctoken);\\n    }\\n\\n}\\n\\ncontract InstaCompoundMapping is Helpers {\\n    string constant public name = \\\"Compound-Mapping-v1.1\\\";\\n\\n    constructor(\\n        address _connectors,\\n        string[] memory _ctokenNames,\\n        address[] memory _tokens,\\n        address[] memory _ctokens\\n    ) Helpers(_connectors) {\\n        _addCtokenMapping(_ctokenNames, _tokens, _ctokens);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_connectors\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_ctokenNames\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_ctokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ctoken\",\"type\":\"address\"}],\"name\":\"LogCTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ctoken\",\"type\":\"address\"}],\"name\":\"LogCTokenUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_names\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_ctokens\",\"type\":\"address[]\"}],\"name\":\"addCtokenMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"cTokenMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ctoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectors\",\"outputs\":[{\"internalType\":\"contract ConnectorsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenId\",\"type\":\"string\"}],\"name\":\"getMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instaIndex\",\"outputs\":[{\"internalType\":\"contract IndexInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_names\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_ctokens\",\"type\":\"address[]\"}],\"name\":\"updateCtokenMapping\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"InstaCompoundMapping","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000fe2390dad597594439f218190fc2de40f9cf1179000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000004c00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000000054554482d4100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054241542d410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006434f4d502d41000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000054441492d4100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055245502d410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005554e492d410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006555344432d4100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006555344542d4100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006574254432d4100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006574254432d42000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055a52582d41000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000d8775f648430679a709e98d2b0cb6250d2887ef000000000000000000000000c00e94cb662c3520282e6f5717214004a7f268880000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000001985365e9f78359a9b6ad760e32412f4a445e8620000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f984000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c5990000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000e41d2489571d322189246dafa5ebde1f4699f498000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000004ddc2d193948926d02f9b1fe9e1daa0718270ed50000000000000000000000006c8c6b02e7b2be14d4fa6022dfd6d75921d90e4e00000000000000000000000070e36f6bf80a52b3b46b3af8e106cc0ed743e8e40000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e3643000000000000000000000000158079ee67fce2f58472a96584a73c7ab9ac95c100000000000000000000000035a18000230da775cac24873d00ff85bccded55000000000000000000000000039aa39c021dfbae8fac545936693ac917d5e7563000000000000000000000000f650c3d88d12db855b8bf7d11be6c55a4e07dcc9000000000000000000000000c11b1268c1a384e55c48c2391d8d480264a3a7f4000000000000000000000000ccf4429db6322d5c611ee964527d42e5d685dd6a000000000000000000000000b3319f5d18bc0d84dd1b4825dcde5d5f7266d407","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}