{"status":"1","message":"OK","result":[{"SourceCode":"//   ______   ______     ______     ______     __  __     ______     ______    \r\n//  /\\  == \\ /\\  ___\\   /\\  __ \\   /\\  ___\\   /\\ \\_\\ \\   /\\  ___\\   /\\  ___\\   \r\n//  \\ \\  _-/ \\ \\  __\\   \\ \\  __ \\  \\ \\ \\____  \\ \\  __ \\  \\ \\  __\\   \\ \\___  \\  \r\n//   \\ \\_\\    \\ \\_____\\  \\ \\_\\ \\_\\  \\ \\_____\\  \\ \\_\\ \\_\\  \\ \\_____\\  \\/\\_____\\ \r\n//    \\/_/     \\/_____/   \\/_/\\/_/   \\/_____/   \\/_/\\/_/   \\/_____/   \\/_____/ \r\n//                                                                             \r\n\r\n//Peaches.Finance\r\n//Docs.Peaches.Finance\r\n\r\n//Decentralised Censorship Resistant Stock Tokens on Ethereum.\r\n// :::::::::::::::: ILO :::::::::::::\r\n\r\n// Deposit Eth or DAI, Liquidity Generation on Uniswap, Emergency Withdraw\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\ncontract MrPeachesSale {\r\n    \r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n        \r\n    IERC20 public peaches;\r\n    IERC20 public stableCoin;\r\n    address payable public developer;\r\n    address public oracle;\r\n    \r\n    uint public immutable multiplier;\r\n    uint public immutable privateSaleRate;\r\n    uint public immutable publicSaleRate;\r\n    uint public immutable uniswapRate;\r\n          \r\n    uint public privateSaleSold;\r\n    uint public publicSaleSold;\r\n          \r\n    uint public privateSaleCap;\r\n    uint public publicSaleCap;\r\n          \r\n    uint public publicSaleOpenedAt;\r\n    uint public publicSaleClosedAt;\r\n    uint public liquidityGeneratedAt;\r\n          \r\n    bool public privateSaleClosed = false;\r\n          \r\n    IUniswapV2Router02 public uniswapRouter;\r\n          \r\n    mapping(address => bool) public whiteListed;\r\n    mapping(address => uint256) public tokenBalances;\r\n    mapping(address => uint256) public stableCoinContributed;\r\n          \r\n    event LiquidityGenerated(uint amountA, uint amountB, uint liquidity);\r\n    event PeachesClaimed(address account, uint amount);\r\n    event EmergencyWithdrawn(address account, uint amount);\r\n    event EthDeposited(address account, uint tokens, int price);\r\n    event CoinDeposited(address account, uint tokens);\r\n    event LpRecovered(address account, uint tokens);\r\n    \r\n    constructor(\r\n        uint _privateSaleRate, \r\n        uint _publicSaleRate, \r\n        uint _uniswapRate, \r\n        uint _privateSaleCap, \r\n        uint _publicSaleCap, \r\n        uint _multiplier, \r\n        IERC20 _peaches, \r\n        IERC20 _stableCoin, \r\n        address _oracle, \r\n        address _uniswapRouter\r\n        ) {\r\n        privateSaleRate = _privateSaleRate;\r\n        publicSaleRate = _publicSaleRate;\r\n        uniswapRate = _uniswapRate;\r\n        privateSaleCap = _privateSaleCap;\r\n        publicSaleCap = _publicSaleCap;\r\n        multiplier = _multiplier;\r\n        peaches = _peaches;\r\n        stableCoin = _stableCoin;\r\n        oracle = _oracle;\r\n        uniswapRouter = IUniswapV2Router02(_uniswapRouter);\r\n        developer = payable(msg.sender);\r\n    }\r\n\r\n    receive() external payable {\r\n        depositEth();\r\n    }\r\n\r\n    function depositEth() public payable {\r\n        \r\n        uint tokens;\r\n        \r\n        require(msg.value > 0);\r\n        \r\n        (, int price, uint startedAt, uint updatedAt, ) = AggregatorV3Interface(oracle).latestRoundData();\r\n        require(price > 0 && startedAt > 0 && updatedAt > 0, \"Zero is not valid\");\r\n        \r\n        if (privateSaleClosed == false) {\r\n        \r\n            require(whiteListed[msg.sender], \"Not whitelisted\");\r\n            \r\n            tokens = msg.value.mul(uint(price)).div(privateSaleRate);\r\n            \r\n            require(tokenBalances[msg.sender].add(tokens) >= 16000000000000000000 && tokenBalances[msg.sender].add(tokens) <= 41670000000000000000000, \"Private sale limit\");\r\n            \r\n            require(privateSaleSold.add(tokens) <= privateSaleCap, \"Cap reached\");\r\n            privateSaleSold = privateSaleSold.add(tokens);\r\n            \r\n        } else {\r\n       \r\n            require(publicSaleOpenedAt !=0 && publicSaleClosedAt == 0, \"Public sale closed\");\r\n            require(block.timestamp >= publicSaleOpenedAt && block.timestamp <= publicSaleOpenedAt.add(21 days), 'Time was reached');\r\n            \r\n            if (block.timestamp <= publicSaleOpenedAt.add(6 hours)) {\r\n                require(whiteListed[msg.sender], \"Not whitelisted\");  \r\n            }\r\n            \r\n            uint amount = msg.value.mul(uint(price)).div(multiplier);\r\n            \r\n            address[] memory path = new address[](2);\r\n            path[0] = uniswapRouter.WETH();\r\n            path[1] = address(stableCoin);\r\n            \r\n            uint[] memory amounts = uniswapRouter.swapExactETHForTokens{value:msg.value}(amount.sub(amount / 25), path, address(this), block.timestamp.add(15 minutes));\r\n            require(amounts[1] > 0);\r\n            \r\n            tokens = amounts[1].mul(multiplier).div(publicSaleRate);\r\n            \r\n            require(tokenBalances[msg.sender].add(tokens) >= 125000000000000000000 && tokenBalances[msg.sender].add(tokens) <= 31250000000000000000000, \"Public sale limit\");\r\n            \r\n            require(publicSaleSold.add(tokens) <= publicSaleCap, \"Cap reached\");\r\n            publicSaleSold = publicSaleSold.add(tokens);\r\n            \r\n            stableCoinContributed[msg.sender] = stableCoinContributed[msg.sender].add(amounts[1]);\r\n            \r\n        }\r\n        \r\n        tokenBalances[msg.sender] = tokenBalances[msg.sender].add(tokens);\r\n        emit EthDeposited(msg.sender, tokens, price);\r\n    }\r\n    \r\n    function depositCoin(uint amount) external {\r\n        \r\n        uint tokens;\r\n        \r\n        require(amount > 0); \r\n        require(amount <= stableCoin.allowance(msg.sender, address(this)), \"Allowance not high enough\");\r\n        stableCoin.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        if (privateSaleClosed == false) {\r\n    \r\n            require(whiteListed[msg.sender], \"Not whitelisted\");\r\n            \r\n            tokens = amount.mul(multiplier).div(privateSaleRate);\r\n            \r\n            require(tokenBalances[msg.sender].add(tokens) >= 16000000000000000000 && tokenBalances[msg.sender].add(tokens) <= 41670000000000000000000, \"Private sale limit\");\r\n            \r\n            require(privateSaleSold.add(tokens) <= privateSaleCap, \"Cap reached\");\r\n            privateSaleSold = privateSaleSold.add(tokens);\r\n    \r\n        } else {  \r\n        \r\n            require(publicSaleOpenedAt !=0 && publicSaleClosedAt == 0, \"Public sale closed\");\r\n            require(block.timestamp >= publicSaleOpenedAt && block.timestamp <= publicSaleOpenedAt.add(21 days), 'Time was reached');\r\n            \r\n            if (block.timestamp <= publicSaleOpenedAt.add(6 hours)) {\r\n                require(whiteListed[msg.sender], \"Not whitelisted\");  \r\n            }\r\n            \r\n            tokens = amount.mul(multiplier).div(publicSaleRate);\r\n            \r\n            require(tokenBalances[msg.sender].add(tokens) >= 125000000000000000000 && tokenBalances[msg.sender].add(tokens) <= 31250000000000000000000, \"Public sale limit\");\r\n            \r\n            require(publicSaleSold.add(tokens) <= publicSaleCap, \"Cap reached\");\r\n            publicSaleSold = publicSaleSold.add(tokens);\r\n            \r\n            stableCoinContributed[msg.sender] = stableCoinContributed[msg.sender].add(amount);\r\n            \r\n        }\r\n        \r\n        tokenBalances[msg.sender] = tokenBalances[msg.sender].add(tokens);\r\n        emit CoinDeposited(msg.sender, tokens);\r\n    } \r\n    \r\n    function closePrivateSale() external {\r\n    require(msg.sender == developer, \"Developer only\");\r\n        \r\n        require(privateSaleClosed == false, \"Private sale closed\");\r\n        \r\n        privateSaleClosed = true;\r\n        publicSaleOpenedAt = block.timestamp;\r\n        \r\n        stableCoin.safeTransfer(developer, stableCoin.balanceOf(address(this)));\r\n        \r\n        (bool success, ) = developer.call{value: address(this).balance}(\"\");\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n    \r\n    function closePublicSale() external {\r\n        \r\n        require(publicSaleOpenedAt !=0, \"Private sale open\");\r\n        require(publicSaleClosedAt == 0, 'Public sale closed');\r\n        require(block.timestamp > publicSaleOpenedAt.add(21 days) || (publicSaleSold >= publicSaleCap.sub(125000000000000000000) && publicSaleSold <= publicSaleCap), 'Too early');\r\n\r\n        publicSaleClosedAt = block.timestamp;\r\n    }\r\n    \r\n    function generateLiquidity() external {\r\n        \r\n        require(publicSaleClosedAt != 0, 'Public sale open');\r\n        require(liquidityGeneratedAt == 0, 'Liquidity generated');\r\n        require(block.timestamp > publicSaleClosedAt.add(30 minutes), 'Too early');\r\n        \r\n        uint stableCoinBalance = stableCoin.balanceOf(address(this));\r\n        require(stableCoinBalance > 0, 'Stablecoin balance is zero');\r\n        stableCoin.safeApprove(address(uniswapRouter), stableCoinBalance);\r\n        uint amountPeaches = stableCoinBalance.mul(multiplier).div(uniswapRate);\r\n        peaches.safeApprove(address(uniswapRouter), amountPeaches);\r\n\r\n        (uint amountA, uint amountB, uint liquidity) = uniswapRouter.addLiquidity(\r\n            address(peaches),\r\n            address(stableCoin),\r\n            amountPeaches,\r\n            stableCoinBalance,\r\n            amountPeaches.sub(amountPeaches / 10),\r\n            stableCoinBalance.sub(stableCoinBalance / 10),\r\n            address(this),\r\n            block.timestamp.add(2 hours)\r\n        );\r\n\r\n        liquidityGeneratedAt = block.timestamp;\r\n        \r\n        emit LiquidityGenerated(amountA, amountB, liquidity);\r\n    }\r\n    \r\n    function claimPeaches() external {\r\n        \r\n        require(liquidityGeneratedAt != 0, 'Liquidity not generated');\r\n        uint tokens =  tokenBalances[msg.sender];\r\n        require(tokens > 0 , \"Nothing to claim\");\r\n        \r\n        stableCoinContributed[msg.sender] = 0;\r\n        tokenBalances[msg.sender] = 0;\r\n        \r\n        peaches.safeTransfer(msg.sender, tokens);\r\n        \r\n        emit PeachesClaimed(msg.sender, tokens);\r\n    }\r\n    \r\n    function emergencyWithdrawCoins() external {\r\n        \r\n        require(publicSaleClosedAt != 0, 'Public sale open');\r\n        require(liquidityGeneratedAt == 0, 'Liquidity generated');\r\n        require(block.timestamp > publicSaleClosedAt.add(30 minutes).add(3 days), 'Too early');\r\n        \r\n        uint contributedAmount = stableCoinContributed[msg.sender];\r\n        require(contributedAmount > 0, 'Nothing to withdraw');\r\n        \r\n        tokenBalances[msg.sender] = 0;      \r\n        stableCoinContributed[msg.sender] = 0;\r\n        \r\n        stableCoin.safeTransfer(msg.sender, contributedAmount);\r\n        \r\n        emit EmergencyWithdrawn(msg.sender, contributedAmount);\r\n    }\r\n    \r\n    function recoverPeaches() external {\r\n    require(msg.sender == developer, \"Developer only\");\r\n        \r\n        require(publicSaleClosedAt != 0, 'Public sale open');\r\n        require(block.timestamp > publicSaleClosedAt.add(30 minutes).add(30 days), 'Too early');\r\n        \r\n        uint sold = privateSaleSold.add(publicSaleSold);\r\n        uint cap = privateSaleCap.add(publicSaleCap);\r\n        \r\n        if (cap > sold) {\r\n            peaches.safeTransfer(developer, cap.sub(sold));\r\n        }\r\n    }\r\n    \r\n    function recoverLpTokens(address _lpToken) external {\r\n    require(msg.sender == developer, \"Developer only\");\r\n    \r\n        require(liquidityGeneratedAt != 0, 'Liquidity not generated');\r\n        require(block.timestamp >= liquidityGeneratedAt.add(180 days), 'Too early');\r\n\r\n        IERC20 lpToken = IERC20(_lpToken);\r\n        uint lpBalance = lpToken.balanceOf(address(this));\r\n        lpToken.safeTransfer(developer, lpBalance);\r\n\r\n        emit LpRecovered(developer, lpBalance);\r\n    }\r\n    \r\n    function addPrivateInvestor(address _address, uint _tokens) external {\r\n    require(msg.sender == developer, \"Developer only\");\r\n    \r\n        require(privateSaleClosed == false, \"Private sale closed\");\r\n        \r\n        privateSaleSold = privateSaleSold.add(_tokens);\r\n        tokenBalances[_address] = tokenBalances[_address].add(_tokens);\r\n    }\r\n    \r\n    function setWhitelist(address[] memory addrs) external {\r\n    require(msg.sender == developer, \"Developer only\");\r\n        \r\n        require(publicSaleClosedAt == 0, 'Public sale closed');\r\n        \r\n        for (uint8 i = 0; i < addrs.length; i++){\r\n         whiteListed[addrs[i]] = true;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n   \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity >=0.8.0;\r\n\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n   \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n   \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;       \r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        \r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        \r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n   \r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        \r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    \r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    \r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    \r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity >=0.8.0;\r\n\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    \r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        \r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n   \r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        \r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\npragma solidity >=0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals() external view returns (uint8);\r\n  function description() external view returns (string memory);\r\n  function version() external view returns (uint256);\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_privateSaleRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicSaleRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_uniswapRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_privateSaleCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_publicSaleCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_peaches\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stableCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"CoinDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"name\":\"EthDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityGenerated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"LpRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PeachesClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"addPrivateInvestor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPeaches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePrivateSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePublicSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdrawCoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generateLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityGeneratedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peaches\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSaleCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSaleClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSaleRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSaleSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleClosedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleOpenedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"recoverLpTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverPeaches\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableCoin\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stableCoinContributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MrPeachesSale","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000005b8d8000000000000000000000000000000000000000000000000000000000007a120000000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000079c2cffd4f6f0960000000000000000000000000000000000000000000000001c1fc7b177378f62000000000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000a4c6984e817c086ddc3ebaeedbdcc014695869180000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b84190000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b50991840a353c1a25fccc68e2658e5dffd9813bc01957c5081aaea321e9920e"}]}