{"status":"1","message":"OK","result":[{"SourceCode":"{\"BasicToken.sol\":{\"content\":\"pragma solidity ^0.4.23;\\r\\n\\r\\nimport \\\"./ERC20Basic.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title 实现ERC20基本合约的接口\\r\\n * @dev 基本的StandardToken，不包含allowances.\\r\\n */\\r\\ncontract BasicToken is ERC20Basic {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping(address =\\u003e uint256) balances;\\r\\n\\r\\n    uint256 totalSupply_;\\r\\n\\r\\n    /**\\r\\n     * @dev 返回存在的token总数\\r\\n     */\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return totalSupply_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev 给特定的address转token\\r\\n     * @param _to 要转账到的address\\r\\n     * @param _value 要转账的金额\\r\\n     */\\r\\n    function transfer(address _to, uint256 _value) public returns (bool) {\\r\\n        //做相关的合法验证\\r\\n        require(_to != address(0));\\r\\n        require(_value \\u003c= balances[msg.sender]);\\r\\n        // msg.sender余额中减去额度，_to余额加上相应额度\\r\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        //触发Transfer事件\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev 获取指定address的余额\\r\\n     * @param _owner 查询余额的address.\\r\\n     * @return An uint256 representing the amount owned by the passed address.\\r\\n     */\\r\\n    function balanceOf(address _owner) public view returns (uint256) {\\r\\n        return balances[_owner];\\r\\n    }\\r\\n}\\r\\n\"},\"ERC20.sol\":{\"content\":\"pragma solidity ^0.4.23;\\r\\n\\r\\nimport \\\"./ERC20Basic.sol\\\";\\r\\n\\r\\ncontract ERC20 is ERC20Basic {\\r\\n    function allowance(address owner, address spender)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) public returns (bool);\\r\\n\\r\\n    function approve(address spender, uint256 value) public returns (bool);\\r\\n\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\"},\"ERC20Basic.sol\":{\"content\":\"pragma solidity ^0.4.23;\\r\\n\\r\\ncontract ERC20Basic {\\r\\n    function totalSupply() public view returns (uint256);\\r\\n\\r\\n    function balanceOf(address who) public view returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 value) public returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n}\\r\\n\"},\"IFILToken.sol\":{\"content\":\"pragma solidity ^0.4.23;\\r\\nimport \\\"./StandardToken.sol\\\";\\r\\nimport \\\"./ERC20.sol\\\";\\r\\n\\r\\n// ERC20 standard token\\r\\ncontract IFILToken is StandardToken {\\r\\n    address public admin;\\r\\n    string public name = \\\"IFIL Token\\\";\\r\\n    string public symbol = \\\"IFIL\\\";\\r\\n    uint8 public decimals = 18;\\r\\n    uint256 public INITIAL_SUPPLY = 2000000000000000000000000000;\\r\\n    // 同一个账户满足任意冻结条件均被冻结\\r\\n    mapping(address =\\u003e bool) public frozenAccount; //无限期冻结的账户\\r\\n    mapping(address =\\u003e uint256) public frozenTimestamp; // 有限期冻结的账户\\r\\n    mapping(address =\\u003e ERC20) public tokens; // 代币token map\\r\\n\\r\\n    bool public exchangeFlag = true; // 代币兑换开启\\r\\n    // 不满足条件或募集完成多出的eth均返回给原账户\\r\\n    uint256 public minWei = 1; //最低打 1 wei  1eth = 1*10^18 wei\\r\\n    uint256 public maxWei = 20000000000000000000000; // 最多一次打 20000 eth\\r\\n    uint256 public maxRaiseAmount = 20000000000000000000000; // 募集上限 20000 eth\\r\\n    uint256 public raisedAmount = 0; // 已募集 0 eth\\r\\n    uint256 public raiseRatio = 1; // 兑换比例 1eth = 20万token\\r\\n    // event 通知\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    // 构造函数\\r\\n    constructor() public {\\r\\n        totalSupply_ = INITIAL_SUPPLY;\\r\\n        admin = msg.sender;\\r\\n        balances[msg.sender] = INITIAL_SUPPLY;\\r\\n    }\\r\\n\\r\\n    // fallback 向合约地址转账 or 调用非合约函数触发\\r\\n    // eth自动兑换代币\\r\\n    function() public payable {\\r\\n        require(msg.value \\u003e 0);\\r\\n        if (exchangeFlag) {\\r\\n            if (msg.value \\u003e= minWei \\u0026\\u0026 msg.value \\u003c= maxWei) {\\r\\n                if (raisedAmount \\u003c maxRaiseAmount) {\\r\\n                    uint256 valueNeed = msg.value;\\r\\n                    raisedAmount = raisedAmount.add(msg.value);\\r\\n                    if (raisedAmount \\u003e maxRaiseAmount) {\\r\\n                        uint256 valueLeft = raisedAmount.sub(maxRaiseAmount);\\r\\n                        valueNeed = msg.value.sub(valueLeft);\\r\\n                        msg.sender.transfer(valueLeft);\\r\\n                        raisedAmount = maxRaiseAmount;\\r\\n                    }\\r\\n                    if (raisedAmount \\u003e= maxRaiseAmount) {\\r\\n                        exchangeFlag = false;\\r\\n                    }\\r\\n                    // 已处理过精度 *10^18\\r\\n                    uint256 _value = valueNeed.mul(raiseRatio);\\r\\n\\r\\n                    require(_value \\u003c= balances[admin]);\\r\\n                    balances[admin] = balances[admin].sub(_value);\\r\\n                    balances[msg.sender] = balances[msg.sender].add(_value);\\r\\n\\r\\n                    emit Transfer(admin, msg.sender, _value);\\r\\n                }\\r\\n            } else {\\r\\n                msg.sender.transfer(msg.value);\\r\\n            }\\r\\n        } else {\\r\\n            msg.sender.transfer(msg.value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * 修改管理员\\r\\n     */\\r\\n    function changeAdmin(address _newAdmin) public returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        require(_newAdmin != address(0));\\r\\n        balances[_newAdmin] = balances[_newAdmin].add(balances[admin]);\\r\\n        balances[admin] = 0;\\r\\n        admin = _newAdmin;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * 增发\\r\\n     */\\r\\n    function generateToken(address _target, uint256 _amount)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(msg.sender == admin);\\r\\n        require(_target != address(0));\\r\\n        balances[_target] = balances[_target].add(_amount);\\r\\n        totalSupply_ = totalSupply_.add(_amount);\\r\\n        INITIAL_SUPPLY = totalSupply_;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // 从合约提现\\r\\n    // 只能提给管理员\\r\\n    function withdraw(uint256 _amount) public returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        msg.sender.transfer(_amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // 从合约提现\\r\\n    // 只能管理员提给to\\r\\n    function withdrawUser(address _to, uint256 _amount) public returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        _to.transfer(_amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // 从合约提现token\\r\\n    // 只能提给管理员\\r\\n    function withdrawToken(address _contract,uint256 _amount) public returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        tokens[_contract] = ERC20(_contract);\\r\\n        tokens[_contract].transfer(msg.sender, _amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // 从合约提现token\\r\\n    // 只能管理员提给to\\r\\n    function withdrawTokenUser(address _contract, address _to, uint256 _amount) public returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        tokens[_contract] = ERC20(_contract);\\r\\n        tokens[_contract].transfer(_to, _amount);\\r\\n        return true;\\r\\n    }\\r\\n    /**\\r\\n     * 锁定账户\\r\\n     */\\r\\n    function freeze(address _target, bool _freeze) public returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        require(_target != address(0));\\r\\n        frozenAccount[_target] = _freeze;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * 通过时间戳锁定账户\\r\\n     */\\r\\n    function freezeWithTimestamp(address _target, uint256 _timestamp)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(msg.sender == admin);\\r\\n        require(_target != address(0));\\r\\n        frozenTimestamp[_target] = _timestamp;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * 批量锁定账户\\r\\n     */\\r\\n    function multiFreeze(address[] _targets, bool[] _freezes)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(msg.sender == admin);\\r\\n        require(_targets.length == _freezes.length);\\r\\n        uint256 len = _targets.length;\\r\\n        require(len \\u003e 0);\\r\\n        for (uint256 i = 0; i \\u003c len; i = i.add(1)) {\\r\\n            address _target = _targets[i];\\r\\n            require(_target != address(0));\\r\\n            bool _freeze = _freezes[i];\\r\\n            frozenAccount[_target] = _freeze;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * 批量通过时间戳锁定账户\\r\\n     */\\r\\n    function multiFreezeWithTimestamp(address[] _targets, uint256[] _timestamps)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(msg.sender == admin);\\r\\n        require(_targets.length == _timestamps.length);\\r\\n        uint256 len = _targets.length;\\r\\n        require(len \\u003e 0);\\r\\n        for (uint256 i = 0; i \\u003c len; i = i.add(1)) {\\r\\n            address _target = _targets[i];\\r\\n            require(_target != address(0));\\r\\n            uint256 _timestamp = _timestamps[i];\\r\\n            frozenTimestamp[_target] = _timestamp;\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * 批量转账\\r\\n     */\\r\\n    function multiTransfer(address[] _tos, uint256[] _values)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(!frozenAccount[msg.sender]);\\r\\n        require(now \\u003e frozenTimestamp[msg.sender]);\\r\\n        require(_tos.length == _values.length);\\r\\n        uint256 len = _tos.length;\\r\\n        require(len \\u003e 0);\\r\\n        uint256 amount = 0;\\r\\n        for (uint256 i = 0; i \\u003c len; i = i.add(1)) {\\r\\n            amount = amount.add(_values[i]);\\r\\n        }\\r\\n        require(amount \\u003c= balances[msg.sender]);\\r\\n        for (uint256 j = 0; j \\u003c len; j = j.add(1)) {\\r\\n            address _to = _tos[j];\\r\\n            require(_to != address(0));\\r\\n            balances[_to] = balances[_to].add(_values[j]);\\r\\n            balances[msg.sender] = balances[msg.sender].sub(_values[j]);\\r\\n            emit Transfer(msg.sender, _to, _values[j]);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * 从调用者转账至_to\\r\\n     */\\r\\n    function transfer(address _to, uint256 _value) public returns (bool) {\\r\\n        require(!frozenAccount[msg.sender]);\\r\\n        require(now \\u003e frozenTimestamp[msg.sender]);\\r\\n        require(_to != address(0));\\r\\n        require(_value \\u003c= balances[msg.sender]);\\r\\n\\r\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * 从调用者作为from代理将from账户中的token转账至to\\r\\n     * 调用者在from的许可额度中必须\\u003e=value\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _value\\r\\n    ) public returns (bool) {\\r\\n        require(!frozenAccount[_from]);\\r\\n        require(now \\u003e frozenTimestamp[msg.sender]);\\r\\n        require(_to != address(0));\\r\\n        require(_value \\u003c= balances[_from]);\\r\\n        require(_value \\u003c= allowed[_from][msg.sender]);\\r\\n\\r\\n        balances[_from] = balances[_from].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\r\\n\\r\\n        emit Transfer(_from, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * 调整转账代理方spender的代理的许可额度\\r\\n     */\\r\\n    function approve(address _spender, uint256 _value) public returns (bool) {\\r\\n        // 转账的时候会校验balances，该处require无意义\\r\\n        // require(_value \\u003c= balances[msg.sender]);\\r\\n\\r\\n        allowed[msg.sender][_spender] = _value;\\r\\n\\r\\n        emit Approval(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //********************************************************************************\\r\\n    //查询账户是否存在锁定时间戳\\r\\n    function getFrozenTimestamp(address _target) public view returns (uint256) {\\r\\n        require(_target != address(0));\\r\\n        return frozenTimestamp[_target];\\r\\n    }\\r\\n\\r\\n    //查询账户是否被锁定\\r\\n    function getFrozenAccount(address _target) public view returns (bool) {\\r\\n        require(_target != address(0));\\r\\n        return frozenAccount[_target];\\r\\n    }\\r\\n\\r\\n    //查询合约的余额\\r\\n    function getBalance() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    // 修改name\\r\\n    function setName(string _value) public returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        name = _value;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // 修改symbol\\r\\n    function setSymbol(string _value) public returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        symbol = _value;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // 修改募集flag\\r\\n    function setExchangeFlag(bool _flag) public returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        exchangeFlag = _flag;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // 修改单笔募集下限\\r\\n    function setMinWei(uint256 _value) public returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        minWei = _value;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // 修改单笔募集上限\\r\\n    function setMaxWei(uint256 _value) public returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        maxWei = _value;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // 修改总募集上限\\r\\n    function setMaxRaiseAmount(uint256 _value) public returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        maxRaiseAmount = _value;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // 修改已募集数\\r\\n    function setRaisedAmount(uint256 _value) public returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        raisedAmount = _value;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // 修改募集比例\\r\\n    function setRaiseRatio(uint256 _value) public returns (bool) {\\r\\n        require(msg.sender == admin);\\r\\n        raiseRatio = _value;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // 销毁合约\\r\\n    function kill() public {\\r\\n        require(msg.sender == admin);\\r\\n        selfdestruct(admin);\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// pragma solidity ^0.6.0;\\r\\n\\r\\npragma solidity ^0.4.23;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"},\"StandardToken.sol\":{\"content\":\"pragma solidity ^0.4.23;\\r\\n\\r\\nimport \\\"./BasicToken.sol\\\";\\r\\nimport \\\"./ERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title 标准 ERC20 token\\r\\n *\\r\\n * @dev 实现基础的标准token\\r\\n * @dev https://github.com/ethereum/EIPs/issues/20\\r\\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\r\\n */\\r\\ncontract StandardToken is ERC20, BasicToken {\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) internal allowed;\\r\\n\\r\\n    /**\\r\\n     * @dev 从一个地址向另外一个地址转token\\r\\n     * @param _from 转账的from地址\\r\\n     * @param _to address 转账的to地址\\r\\n     * @param _value uint256 转账token数量\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _value\\r\\n    ) public returns (bool) {\\r\\n        // 做合法性检查\\r\\n        require(_to != address(0));\\r\\n        require(_value \\u003c= balances[_from]);\\r\\n        require(_value \\u003c= allowed[_from][msg.sender]);\\r\\n        //_from余额减去相应的金额\\r\\n        //_to余额加上相应的金额\\r\\n        //msg.sender可以从账户_from中转出的数量减少_value\\r\\n        balances[_from] = balances[_from].sub(_value);\\r\\n        balances[_to] = balances[_to].add(_value);\\r\\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\r\\n        // 触发Transfer事件\\r\\n        emit Transfer(_from, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev 批准传递的address以代表msg.sender花费指定数量的token\\r\\n     *\\r\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\r\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\r\\n     * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     * @param _spender 花费资金的地址\\r\\n     * @param _value 可以被花费的token数量\\r\\n     */\\r\\n    function approve(address _spender, uint256 _value) public returns (bool) {\\r\\n        //记录msg.sender允许_spender动用的token\\r\\n        allowed[msg.sender][_spender] = _value;\\r\\n        //触发Approval事件\\r\\n        emit Approval(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev 函数检查所有者允许的_spender花费的token数量\\r\\n     * @param _owner address 资金所有者地址.\\r\\n     * @param _spender address 花费资金的spender的地址.\\r\\n     * @return A uint256 指定_spender仍可用token的数量。\\r\\n     */\\r\\n    function allowance(address _owner, address _spender)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        //允许_spender从_owner中转出的token数\\r\\n        return allowed[_owner][_spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev 增加所有者允许_spender花费代币的数量。\\r\\n     *\\r\\n     * allowed[_spender] == 0时approve应该被调用. 增加allowed值最好使用此函数避免2此调用（等待知道第一笔交易被挖出）\\r\\n     * From MonolithDAO Token.sol\\r\\n     * @param _spender 花费资金的地址\\r\\n     * @param _addedValue 用于增加允许动用的token牌数量\\r\\n     */\\r\\n    function increaseApproval(address _spender, uint256 _addedValue)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        //在之前允许的数量上增加_addedValue\\r\\n        allowed[msg.sender][_spender] = (\\r\\n            allowed[msg.sender][_spender].add(_addedValue)\\r\\n        );\\r\\n        //触发Approval事件\\r\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev 减少所有者允许_spender花费代币的数量\\r\\n     *\\r\\n     * allowed[_spender] == 0时approve应该被调用. 减少allowed值最好使用此函数避免2此调用（等待知道第一笔交易被挖出）\\r\\n     * From MonolithDAO Token.sol\\r\\n     * @param _spender  花费资金的地址\\r\\n     * @param _subtractedValue 用于减少允许动用的token牌数量\\r\\n     */\\r\\n    function decreaseApproval(address _spender, uint256 _subtractedValue)\\r\\n        public\\r\\n        returns (bool)\\r\\n    {\\r\\n        uint256 oldValue = allowed[msg.sender][_spender];\\r\\n        if (_subtractedValue \\u003e oldValue) {\\r\\n            //减少的数量少于之前允许的数量，则清零\\r\\n            allowed[msg.sender][_spender] = 0;\\r\\n        } else {\\r\\n            //减少对应的_subtractedValue数量\\r\\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\r\\n        }\\r\\n        //触发Approval事件\\r\\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"maxWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setRaisedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMinWei\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"generateToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tos\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxRaiseAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"setExchangeFlag\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeFlag\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raiseRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minWei\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"setSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_freeze\",\"type\":\"bool\"}],\"name\":\"freeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getFrozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"raisedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_freezes\",\"type\":\"bool[]\"}],\"name\":\"multiFreeze\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxRaiseAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"freezeWithTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_targets\",\"type\":\"address[]\"},{\"name\":\"_timestamps\",\"type\":\"uint256[]\"}],\"name\":\"multiFreezeWithTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contract\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokenUser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setRaiseRatio\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getFrozenTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setMaxWei\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"IFILToken","CompilerVersion":"v0.4.23+commit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://d980fa802df904fc704132c8fde5f67a9c772c93da647b6e602b1d5db8bc0306"}]}