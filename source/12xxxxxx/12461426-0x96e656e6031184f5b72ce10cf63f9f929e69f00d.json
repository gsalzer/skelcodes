{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Users/khera/Documents/GitHub/GasSwapTokens/contracts/GSVEDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./IFreeFromUpTo.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n* @dev the gsve deployer has two purposes\\r\\n* it deploys gsve smart wrappers, keeping track of the owners\\r\\n* it allows users to deploy smart contracts using create and create2\\r\\n*/\\r\\ncontract GSVEDeployer is Ownable{\\r\\n    mapping(address => uint256) private _compatibleGasTokens;\\r\\n    mapping(address => uint256) private _freeUpValue;\\r\\n\\r\\n  constructor (address wchi, address wgst2, address wgst1) public {\\r\\n    _compatibleGasTokens[wchi] = 1;\\r\\n    _freeUpValue[wchi] = 30053;\\r\\n\\r\\n    _compatibleGasTokens[wgst2] = 1;\\r\\n    _freeUpValue[wgst2] = 30870;\\r\\n\\r\\n    _compatibleGasTokens[wgst1] = 1;\\r\\n    _freeUpValue[wgst1] = 20046;\\r\\n  }\\r\\n\\r\\n    /**\\r\\n    * @dev add support for trusted gas tokens - those we wrapped\\r\\n    */\\r\\n    function addGasToken(address gasToken, uint256 freeUpValue) public onlyOwner{\\r\\n        _compatibleGasTokens[gasToken] = 1;\\r\\n        _freeUpValue[gasToken] = freeUpValue;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n    * @dev function to check if a gas token is supported by the deployer\\r\\n    */\\r\\n    function compatibleGasToken(address gasToken) public view returns(uint256){\\r\\n        return _compatibleGasTokens[gasToken];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev GSVE moddifier that burns supported gas tokens around a function that uses gas\\r\\n    * the function calculates the optimal number of tokens to burn, based on the token specified\\r\\n    */\\r\\n    modifier discountGas(address gasToken) {\\r\\n        if(gasToken != address(0)){\\r\\n            require(_compatibleGasTokens[gasToken] == 1, \\\"GSVE: incompatible token\\\");\\r\\n            uint256 gasStart = gasleft();\\r\\n            _;\\r\\n            uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\\r\\n            IFreeFromUpTo(gasToken).freeFromUpTo(msg.sender,  (gasSpent + 16000) / _freeUpValue[gasToken]);\\r\\n        }\\r\\n        else{\\r\\n            _;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev deploys a smart contract using the create function\\r\\n    * if the contract is ownable, the contract ownership is passed to the message sender\\r\\n    * the gas token passed in as argument is burned by the moddifier\\r\\n    */\\r\\n    function GsveDeploy(bytes memory data, address gasToken) public discountGas(gasToken) returns(address contractAddress) {\\r\\n        assembly {\\r\\n            contractAddress := create(0, add(data, 32), mload(data))\\r\\n        }\\r\\n        try Ownable(contractAddress).transferOwnership(msg.sender){\\r\\n            emit ContractDeployed(msg.sender, contractAddress);\\r\\n        }\\r\\n        catch{\\r\\n            emit ContractDeployed(msg.sender, contractAddress);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev deploys a smart contract using the create2 function and a user provided salt\\r\\n    * if the contract is ownable, the contract ownership is passed to the message sender\\r\\n    * the gas token passed in as argument is burned by the moddifier\\r\\n    */\\r\\n    function GsveDeploy2(uint256 salt, bytes memory data, address gasToken) public discountGas(gasToken) returns(address contractAddress) {\\r\\n        assembly {\\r\\n            contractAddress := create2(0, add(data, 32), mload(data), salt)\\r\\n        }\\r\\n\\r\\n        try Ownable(contractAddress).transferOwnership(msg.sender){\\r\\n            emit ContractDeployed(msg.sender, contractAddress);\\r\\n        }\\r\\n        catch{\\r\\n            emit ContractDeployed(msg.sender, contractAddress);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    event ContractDeployed(address indexed creator, address deploymentAddress);\\r\\n}\"\r\n    },\r\n    \"/C/Users/khera/Documents/GitHub/GasSwapTokens/contracts/IFreeFromUpTo.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n* @dev interface to allow the burning of gas tokens from an address\\r\\n*/\\r\\ninterface IFreeFromUpTo {\\r\\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wchi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wgst2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wgst1\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deploymentAddress\",\"type\":\"address\"}],\"name\":\"ContractDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"}],\"name\":\"GsveDeploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"}],\"name\":\"GsveDeploy2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"freeUpValue\",\"type\":\"uint256\"}],\"name\":\"addGasToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gasToken\",\"type\":\"address\"}],\"name\":\"compatibleGasToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GSVEDeployer","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000047536fd7c0cdb9338ce495694be6463a303145820000000000000000000000001f4dd5a297ca59cc086f6f24c36a8a032c4ddbad000000000000000000000000e39b8dc27ffdca3f2591eb801c7548fce7d87d72","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}