{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/job/Keep3rLiquidityManagerJob.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@lbertenasco/contract-utils/contracts/abstract/UtilsReady.sol';\\nimport '@lbertenasco/contract-utils/contracts/keep3r/Keep3rAbstract.sol';\\n\\nimport '../keep3r-liquidity-manager/Keep3rLiquidityManagerWork.sol';\\nimport './IKeep3rLiquidityManagerJob.sol';\\n\\ncontract Keep3rLiquidityManagerJob is UtilsReady, Keep3r, IKeep3rLiquidityManagerJob {\\n  using SafeMath for uint256;\\n\\n  uint256 public constant PRECISION = 1_000;\\n  uint256 public constant MAX_REWARD_MULTIPLIER = 1 * PRECISION; // 1x max reward multiplier\\n  uint256 public override rewardMultiplier = MAX_REWARD_MULTIPLIER;\\n\\n  address public override keep3rLiquidityManager;\\n\\n  constructor(\\n    address _keep3rLiquidityManager,\\n    address _keep3r,\\n    address _bond,\\n    uint256 _minBond,\\n    uint256 _earned,\\n    uint256 _age,\\n    bool _onlyEOA\\n  ) public UtilsReady() Keep3r(_keep3r) {\\n    _setKeep3rRequirements(_bond, _minBond, _earned, _age, _onlyEOA);\\n    _setKeep3rLiquidityManager(_keep3rLiquidityManager);\\n  }\\n\\n  // Keep3r Setters\\n  function setKeep3r(address _keep3r) external override onlyGovernor {\\n    _setKeep3r(_keep3r);\\n  }\\n\\n  function setKeep3rRequirements(\\n    address _bond,\\n    uint256 _minBond,\\n    uint256 _earned,\\n    uint256 _age,\\n    bool _onlyEOA\\n  ) external override onlyGovernor {\\n    _setKeep3rRequirements(_bond, _minBond, _earned, _age, _onlyEOA);\\n  }\\n\\n  function setRewardMultiplier(uint256 _rewardMultiplier) external override onlyGovernor {\\n    _setRewardMultiplier(_rewardMultiplier);\\n    emit SetRewardMultiplier(_rewardMultiplier);\\n  }\\n\\n  function _setRewardMultiplier(uint256 _rewardMultiplier) internal {\\n    require(_rewardMultiplier <= MAX_REWARD_MULTIPLIER, 'Keep3rLiquidityManagerJob::set-reward-multiplier:multiplier-exceeds-max');\\n    rewardMultiplier = _rewardMultiplier;\\n  }\\n\\n  function setKeep3rLiquidityManager(address _keep3rLiquidityManager) external override onlyGovernor {\\n    _setKeep3rLiquidityManager(_keep3rLiquidityManager);\\n    emit SetKeep3rLiquidityManager(_keep3rLiquidityManager);\\n  }\\n\\n  function _setKeep3rLiquidityManager(address _keep3rLiquidityManager) internal {\\n    require(_keep3rLiquidityManager != address(0), 'Keep3rLiquidityManagerJob::set-keep3r-liqudiity-manager:not-address-0');\\n    keep3rLiquidityManager = _keep3rLiquidityManager;\\n  }\\n\\n  // Setters\\n  function workable(address _job) external override notPaused returns (bool) {\\n    return _workable(_job);\\n  }\\n\\n  function _workable(address _job) internal view returns (bool) {\\n    return IKeep3rLiquidityManagerWork(keep3rLiquidityManager).workable(_job);\\n  }\\n\\n  //Getters\\n  function jobs() public view override returns (address[] memory _jobs) {\\n    return IKeep3rLiquidityManagerJobsLiquidityHandler(keep3rLiquidityManager).jobs();\\n  }\\n\\n  // Keeper actions\\n  function _work(address _job, bool _workForTokens) internal returns (uint256 _credits) {\\n    uint256 _initialGas = gasleft();\\n\\n    require(_workable(_job), 'Keep3rLiquidityManagerJob::work:not-workable');\\n\\n    _keep3rLiquidityManagerWork(_job);\\n\\n    _credits = _calculateCredits(_initialGas);\\n\\n    emit Worked(_job, msg.sender, _credits, _workForTokens);\\n  }\\n\\n  function work(address _job) external override returns (uint256 _credits) {\\n    return workForBond(_job);\\n  }\\n\\n  function workForBond(address _job) public override notPaused onlyKeeper returns (uint256 _credits) {\\n    _credits = _work(_job, false);\\n    _paysKeeperAmount(msg.sender, _credits);\\n  }\\n\\n  function workForTokens(address _job) external override notPaused onlyKeeper returns (uint256 _credits) {\\n    _credits = _work(_job, true);\\n    _paysKeeperInTokens(msg.sender, _credits);\\n  }\\n\\n  function _calculateCredits(uint256 _initialGas) internal view returns (uint256 _credits) {\\n    // Gets default credits from KP3R_Helper and applies job reward multiplier\\n    return _getQuoteLimit(_initialGas).mul(rewardMultiplier).div(PRECISION);\\n  }\\n\\n  // Mechanics keeper bypass\\n  function forceWork(address _job) external override onlyGovernor {\\n    _keep3rLiquidityManagerWork(_job);\\n    emit ForceWorked(_job);\\n  }\\n\\n  function _keep3rLiquidityManagerWork(address _job) internal {\\n    IKeep3rLiquidityManagerWork(keep3rLiquidityManager).work(_job);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/contracts/abstract/UtilsReady.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '../utils/Governable.sol';\\nimport '../utils/CollectableDust.sol';\\nimport '../utils/Pausable.sol';\\n\\nabstract\\ncontract UtilsReady is Governable, CollectableDust, Pausable {\\n\\n  constructor() public Governable(msg.sender) {\\n  }\\n\\n  // Governable: restricted-access\\n  function setPendingGovernor(address _pendingGovernor) external override onlyGovernor {\\n    _setPendingGovernor(_pendingGovernor);\\n  }\\n\\n  function acceptGovernor() external override onlyPendingGovernor {\\n    _acceptGovernor();\\n  }\\n\\n  // Collectable Dust: restricted-access\\n  function sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) external override virtual onlyGovernor {\\n    _sendDust(_to, _token, _amount);\\n  }\\n\\n  // Pausable: restricted-access\\n  function pause(bool _paused) external override onlyGovernor {\\n    _pause(_paused);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/contracts/keep3r/Keep3rAbstract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\n\\nimport '../../interfaces/keep3r/IKeep3rV1.sol';\\nimport '../../interfaces/keep3r/IKeep3r.sol';\\n\\nabstract\\ncontract Keep3r is IKeep3r {\\n  using SafeMath for uint256;\\n\\n  IKeep3rV1 internal _Keep3r;\\n  address public bond;\\n  uint256 public minBond;\\n  uint256 public earned;\\n  uint256 public age;\\n  bool public onlyEOA;\\n\\n  constructor(address _keep3r) public {\\n    _setKeep3r(_keep3r);\\n  }\\n\\n  // Setters\\n  function _setKeep3r(address _keep3r) internal {\\n    _Keep3r = IKeep3rV1(_keep3r);\\n    emit Keep3rSet(_keep3r);\\n  }\\n\\n  function _setKeep3rRequirements(address _bond, uint256 _minBond, uint256 _earned, uint256 _age, bool _onlyEOA) internal {\\n    bond = _bond;\\n    minBond = _minBond;\\n    earned = _earned;\\n    age = _age;\\n    onlyEOA = _onlyEOA;\\n    emit Keep3rRequirementsSet(_bond, _minBond, _earned, _age, _onlyEOA);\\n  }\\n\\n  // Modifiers\\n  // Only checks if caller is a valid keeper, payment should be handled manually\\n  modifier onlyKeeper() {\\n    _isKeeper();\\n    _;\\n  }\\n\\n  // view\\n  function keep3r() external view override returns (address _keep3r) {\\n    return address(_Keep3r);\\n  }\\n\\n  // handles default payment after execution\\n  modifier paysKeeper() {\\n    _;\\n    _paysKeeper(msg.sender);\\n  }\\n\\n  // Internal helpers\\n  function _isKeeper() internal {\\n    if (onlyEOA) require(msg.sender == tx.origin, \\\"keep3r::isKeeper:keeper-is-not-eoa\\\");\\n    if (minBond == 0 && earned == 0 && age == 0) {\\n      // If no custom keeper requirements are set, just evaluate if sender is a registered keeper\\n      require(_Keep3r.isKeeper(msg.sender), \\\"keep3r::isKeeper:keeper-is-not-registered\\\");\\n    } else {\\n      if (bond == address(0)) {\\n        // Checks for min KP3R, earned and age.\\n        require(_Keep3r.isMinKeeper(msg.sender, minBond, earned, age), \\\"keep3r::isKeeper:keeper-not-min-requirements\\\");\\n      } else {\\n        // Checks for min custom-bond, earned and age.\\n        require(_Keep3r.isBondedKeeper(msg.sender, bond, minBond, earned, age), \\\"keep3r::isKeeper:keeper-not-custom-min-requirements\\\");\\n      }\\n    }\\n  }\\n\\n  function _getQuoteLimit(uint256 _gasUsed) internal view returns (uint256 _credits) {\\n    return _Keep3r.KPRH().getQuoteLimit(_gasUsed.sub(gasleft()));\\n  }\\n\\n  // pays in bonded KP3R after execution\\n  function _paysKeeper(address _keeper) internal {\\n    _Keep3r.worked(_keeper);\\n  }\\n  // pays _amount in KP3R after execution\\n  function _paysKeeperInTokens(address _keeper, uint256 _amount) internal {\\n    _Keep3r.receipt(address(_Keep3r), _keeper, _amount);\\n  }\\n  // pays _amount in bonded KP3R after execution\\n  function _paysKeeperAmount(address _keeper, uint256 _amount) internal {\\n    _Keep3r.workReceipt(_keeper, _amount);\\n  }\\n  // pays _amount in _credit after execution\\n  function _paysKeeperCredit(address _credit, address _keeper, uint256 _amount) internal {\\n    _Keep3r.receipt(_credit, _keeper, _amount);\\n  }\\n  // pays _amount in ETH after execution\\n  function _paysKeeperEth(address _keeper, uint256 _amount) internal {\\n    _Keep3r.receiptETH(_keeper, _amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/keep3r-liquidity-manager/Keep3rLiquidityManagerWork.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport './Keep3rLiquidityManagerEscrowsHandler.sol';\\nimport './Keep3rLiquidityManagerJobHandler.sol';\\nimport './Keep3rLiquidityManagerJobsLiquidityHandler.sol';\\nimport './Keep3rLiquidityManagerParameters.sol';\\nimport './Keep3rLiquidityManagerUserJobsLiquidityHandler.sol';\\nimport './Keep3rLiquidityManagerUserLiquidityHandler.sol';\\n\\ninterface IKeep3rLiquidityManagerWork {\\n  enum Actions { None, AddLiquidityToJob, ApplyCreditToJob, UnbondLiquidityFromJob, RemoveLiquidityFromJob }\\n  enum Steps { NotStarted, LiquidityAdded, CreditApplied, UnbondingLiquidity }\\n\\n  // Actions by Keeper\\n  event Worked(address indexed _job);\\n  // Actions forced by governor\\n  event ForceWorked(address indexed _job);\\n\\n  function getNextAction(address _job) external view returns (address _escrow, Actions _action);\\n\\n  function workable(address _job) external view returns (bool);\\n\\n  function jobEscrowStep(address _job, address _escrow) external view returns (Steps _step);\\n\\n  function jobEscrowTimestamp(address _job, address _escrow) external view returns (uint256 _timestamp);\\n\\n  function work(address _job) external;\\n\\n  function forceWork(address _job) external;\\n}\\n\\nabstract contract Keep3rLiquidityManagerWork is Keep3rLiquidityManagerUserJobsLiquidityHandler, IKeep3rLiquidityManagerWork {\\n  // job => escrow => Steps\\n  mapping(address => mapping(address => Steps)) public override jobEscrowStep;\\n  // job => escrow => timestamp\\n  mapping(address => mapping(address => uint256)) public override jobEscrowTimestamp;\\n\\n  // Since all liquidity behaves the same, we just need to check one of them\\n  function getNextAction(address _job) public view override returns (address _escrow, Actions _action) {\\n    require(_jobLiquidities[_job].length() > 0, 'Keep3rLiquidityManager::getNextAction:job-has-no-liquidity');\\n\\n    Steps _escrow1Step = jobEscrowStep[_job][escrow1];\\n    Steps _escrow2Step = jobEscrowStep[_job][escrow2];\\n\\n    // Init (add liquidity to escrow1)\\n    if (_escrow1Step == Steps.NotStarted && _escrow2Step == Steps.NotStarted) {\\n      return (escrow1, Actions.AddLiquidityToJob);\\n    }\\n\\n    // Init (add liquidity to NotStarted escrow)\\n    if ((_escrow1Step == Steps.NotStarted || _escrow2Step == Steps.NotStarted) && _jobHasDesiredLiquidities(_job)) {\\n      _escrow = _escrow1Step == Steps.NotStarted ? escrow1 : escrow2;\\n      address _otherEscrow = _escrow == escrow1 ? escrow2 : escrow1;\\n\\n      // on _otherEscrow step CreditApplied\\n      if (jobEscrowStep[_job][_otherEscrow] == Steps.CreditApplied) {\\n        // make sure to wait 14 days\\n        if (block.timestamp > jobEscrowTimestamp[_job][_otherEscrow].add(14 days)) {\\n          // add liquidity to NotStarted _escrow\\n          return (_escrow, Actions.AddLiquidityToJob);\\n        }\\n      }\\n\\n      // on _otherEscrow step UnbondingLiquidity add liquidity\\n      if (jobEscrowStep[_job][_otherEscrow] == Steps.UnbondingLiquidity) {\\n        // add liquidity to NotStarted _escrow\\n        return (_escrow, Actions.AddLiquidityToJob);\\n      }\\n    }\\n\\n    // can return None, ApplyCreditToJob and RemoveLiquidityFromJob.\\n    _action = _getNextActionOnStep(escrow1, _escrow1Step, _escrow2Step, _job);\\n    if (_action != Actions.None) return (escrow1, _action);\\n\\n    // if escrow1 next actions is None we need to check escrow2\\n\\n    _action = _getNextActionOnStep(escrow2, _escrow2Step, _escrow1Step, _job);\\n    if (_action != Actions.None) return (escrow2, _action);\\n\\n    return (address(0), Actions.None);\\n  }\\n\\n  function _jobHasDesiredLiquidities(address _job) internal view returns (bool) {\\n    // search for desired liquidity > 0 on all job liquidities\\n    for (uint256 i = 0; i < _jobLiquidities[_job].length(); i++) {\\n      if (jobLiquidityDesiredAmount[_job][_jobLiquidities[_job].at(i)] > 0) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  function _getNextActionOnStep(\\n    address _escrow,\\n    Steps _escrowStep,\\n    Steps _otherEscrowStep,\\n    address _job\\n  ) internal view returns (Actions) {\\n    // after adding liquidity wait 3 days to apply\\n    if (_escrowStep == Steps.LiquidityAdded) {\\n      // The escrow with liquidityAmount is the one to call applyCreditToJob, the other should call unbondLiquidityFromJob\\n      if (block.timestamp > jobEscrowTimestamp[_job][_escrow].add(3 days)) {\\n        return Actions.ApplyCreditToJob;\\n      }\\n      return Actions.None;\\n    }\\n\\n    // after applying credits wait 17 days to unbond (only happens when other escrow is on NotStarted [desired liquidity = 0])\\n    // makes sure otherEscrowStep is still notStarted (it can be liquidityAdded)\\n    if (_escrowStep == Steps.CreditApplied) {\\n      if (_otherEscrowStep == Steps.NotStarted && block.timestamp > jobEscrowTimestamp[_job][_escrow].add(17 days)) {\\n        return Actions.UnbondLiquidityFromJob;\\n      }\\n      return Actions.None;\\n    }\\n\\n    // after unbonding liquidity wait 14 days to remove\\n    if (_escrowStep == Steps.UnbondingLiquidity) {\\n      if (block.timestamp > jobEscrowTimestamp[_job][_escrow].add(14 days)) {\\n        return Actions.RemoveLiquidityFromJob;\\n      }\\n      return Actions.None;\\n    }\\n\\n    // for steps: NotStarted. return Actions.None\\n    return Actions.None;\\n  }\\n\\n  function workable(address _job) public view override returns (bool) {\\n    (, Actions _action) = getNextAction(_job);\\n    return _workable(_action);\\n  }\\n\\n  function _workable(Actions _action) internal pure returns (bool) {\\n    return (_action != Actions.None);\\n  }\\n\\n  function _work(\\n    address _escrow,\\n    Actions _action,\\n    address _job\\n  ) internal {\\n    // AddLiquidityToJob\\n    if (_action == Actions.AddLiquidityToJob) {\\n      for (uint256 i = 0; i < _jobLiquidities[_job].length(); i++) {\\n        address _liquidity = _jobLiquidities[_job].at(i);\\n        uint256 _escrowAmount = jobLiquidityDesiredAmount[_job][_liquidity].div(2);\\n        IERC20(_liquidity).approve(_escrow, _escrowAmount);\\n        IKeep3rEscrow(_escrow).deposit(_liquidity, _escrowAmount);\\n        _addLiquidityToJob(_escrow, _liquidity, _job, _escrowAmount);\\n        jobEscrowStep[_job][_escrow] = Steps.LiquidityAdded;\\n        jobEscrowTimestamp[_job][_escrow] = block.timestamp;\\n      }\\n\\n      // ApplyCreditToJob (_unbondLiquidityFromJob, _removeLiquidityFromJob, _addLiquidityToJob)\\n    } else if (_action == Actions.ApplyCreditToJob) {\\n      address _otherEscrow = _escrow == escrow1 ? escrow2 : escrow1;\\n\\n      // ALWAYS FIRST: Should try to unbondLiquidityFromJob from _otherEscrow\\n      for (uint256 i = 0; i < _jobLiquidities[_job].length(); i++) {\\n        address _liquidity = _jobLiquidities[_job].at(i);\\n        uint256 _liquidityProvided = IKeep3rV1(keep3rV1).liquidityProvided(_otherEscrow, _liquidity, _job);\\n        if (_liquidityProvided > 0) {\\n          _unbondLiquidityFromJob(_otherEscrow, _liquidity, _job, _liquidityProvided);\\n          jobEscrowStep[_job][_otherEscrow] = Steps.UnbondingLiquidity;\\n          jobEscrowTimestamp[_job][_otherEscrow] = block.timestamp;\\n        }\\n      }\\n      // Run applyCreditToJob\\n      for (uint256 i = 0; i < _jobLiquidities[_job].length(); i++) {\\n        _applyCreditToJob(_escrow, _jobLiquidities[_job].at(i), _job);\\n        jobEscrowStep[_job][_escrow] = Steps.CreditApplied;\\n        jobEscrowTimestamp[_job][_escrow] = block.timestamp;\\n      }\\n\\n      // UnbondLiquidityFromJob\\n    } else if (_action == Actions.UnbondLiquidityFromJob) {\\n      for (uint256 i = 0; i < _jobLiquidities[_job].length(); i++) {\\n        address _liquidity = _jobLiquidities[_job].at(i);\\n\\n        uint256 _liquidityProvided = IKeep3rV1(keep3rV1).liquidityProvided(_escrow, _liquidity, _job);\\n        if (_liquidityProvided > 0) {\\n          _unbondLiquidityFromJob(_escrow, _liquidity, _job, _liquidityProvided);\\n          jobEscrowStep[_job][_escrow] = Steps.UnbondingLiquidity;\\n          jobEscrowTimestamp[_job][_escrow] = block.timestamp;\\n        }\\n      }\\n\\n      // RemoveLiquidityFromJob\\n    } else if (_action == Actions.RemoveLiquidityFromJob) {\\n      // Clone _jobLiquidities so we can remove unused without breaking the loop\\n      address[] memory _jobLiquiditiesClone = new address[](_jobLiquidities[_job].length());\\n      for (uint256 i = 0; i < _jobLiquidities[_job].length(); i++) {\\n        _jobLiquiditiesClone[i] = _jobLiquidities[_job].at(i);\\n      }\\n\\n      for (uint256 i = 0; i < _jobLiquiditiesClone.length; i++) {\\n        address _liquidity = _jobLiquiditiesClone[i];\\n        // remove liquidity\\n        uint256 _amount = _removeLiquidityFromJob(_escrow, _liquidity, _job);\\n        jobEscrowStep[_job][_escrow] = Steps.NotStarted;\\n        jobEscrowTimestamp[_job][_escrow] = block.timestamp;\\n\\n        // increase jobCycle\\n        jobCycle[_job] = jobCycle[_job].add(1);\\n\\n        uint256 _escrowAmount = jobLiquidityDesiredAmount[_job][_liquidity].div(2);\\n        // check if a withdraw or deposit is needed\\n        if (_amount > _escrowAmount) {\\n          IKeep3rEscrow(_escrow).withdraw(_liquidity, _amount.sub(_escrowAmount));\\n        } else if (_amount < _escrowAmount) {\\n          IERC20(_liquidity).approve(_escrow, _escrowAmount.sub(_amount));\\n          IKeep3rEscrow(_escrow).deposit(_liquidity, _escrowAmount.sub(_amount));\\n        }\\n\\n        // add liquidity\\n        if (_escrowAmount > 0) {\\n          _addLiquidityToJob(_escrow, _liquidity, _job, _escrowAmount);\\n          jobEscrowStep[_job][_escrow] = Steps.LiquidityAdded;\\n          jobEscrowTimestamp[_job][_escrow] = block.timestamp;\\n        }\\n\\n        uint256 _liquidityInUse =\\n          IKeep3rEscrow(escrow1).liquidityTotalAmount(_liquidity).add(IKeep3rEscrow(escrow2).liquidityTotalAmount(_liquidity));\\n        if (_liquidityInUse == 0) _removeLPFromJob(_job, _liquidity);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/job/IKeep3rLiquidityManagerJob.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport './IKeep3rJob.sol';\\n\\ninterface IKeep3rLiquidityManagerJob is IKeep3rJob {\\n  event SetKeep3rLiquidityManager(address _keep3rLiquidityManager);\\n\\n  // Actions by Keeper\\n  event Worked(address _job, address _keeper, uint256 _credits, bool _workForTokens);\\n\\n  // Actions forced by Governor\\n  event ForceWorked(address _job);\\n\\n  // Setters\\n  function setKeep3rLiquidityManager(address _keep3rLiquidityManager) external;\\n\\n  // Getters\\n  function keep3rLiquidityManager() external returns (address _keep3rLiquidityManager);\\n\\n  function jobs() external view returns (address[] memory _jobs);\\n\\n  function workable(address _job) external returns (bool);\\n\\n  // Keeper actions\\n  function work(address _job) external returns (uint256 _credits);\\n\\n  function workForBond(address _job) external returns (uint256 _credits);\\n\\n  function workForTokens(address _job) external returns (uint256 _credits);\\n\\n  // Governor keeper bypass\\n  function forceWork(address _job) external;\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/contracts/utils/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '../../interfaces/utils/IGovernable.sol';\\n\\nabstract\\ncontract Governable is IGovernable {\\n  address public override governor;\\n  address public override pendingGovernor;\\n\\n  constructor(address _governor) public {\\n    require(_governor != address(0), 'governable/governor-should-not-be-zero-address');\\n    governor = _governor;\\n  }\\n\\n  function _setPendingGovernor(address _pendingGovernor) internal {\\n    require(_pendingGovernor != address(0), 'governable/pending-governor-should-not-be-zero-addres');\\n    pendingGovernor = _pendingGovernor;\\n    emit PendingGovernorSet(_pendingGovernor);\\n  }\\n\\n  function _acceptGovernor() internal {\\n    governor = pendingGovernor;\\n    pendingGovernor = address(0);\\n    emit GovernorAccepted();\\n  }\\n\\n  function isGovernor(address _account) public view override returns (bool _isGovernor) {\\n    return _account == governor;\\n  }\\n\\n  modifier onlyGovernor {\\n    require(isGovernor(msg.sender), 'governable/only-governor');\\n    _;\\n  }\\n\\n  modifier onlyPendingGovernor {\\n    require(msg.sender == pendingGovernor, 'governable/only-pending-governor');\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/contracts/utils/CollectableDust.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport '../../interfaces/utils/ICollectableDust.sol';\\n\\nabstract\\ncontract CollectableDust is ICollectableDust {\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n  EnumerableSet.AddressSet internal protocolTokens;\\n\\n  constructor() public {}\\n\\n  function _addProtocolToken(address _token) internal {\\n    require(!protocolTokens.contains(_token), 'collectable-dust/token-is-part-of-the-protocol');\\n    protocolTokens.add(_token);\\n  }\\n\\n  function _removeProtocolToken(address _token) internal {\\n    require(protocolTokens.contains(_token), 'collectable-dust/token-not-part-of-the-protocol');\\n    protocolTokens.remove(_token);\\n  }\\n\\n  function _sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) internal {\\n    require(_to != address(0), 'collectable-dust/cant-send-dust-to-zero-address');\\n    require(!protocolTokens.contains(_token), 'collectable-dust/token-is-part-of-the-protocol');\\n    if (_token == ETH_ADDRESS) {\\n      payable(_to).transfer(_amount);\\n    } else {\\n      IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n    emit DustSent(_to, _token, _amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '../../interfaces/utils/IPausable.sol';\\n\\nabstract\\ncontract Pausable is IPausable {\\n  bool public paused;\\n\\n  constructor() public {}\\n  \\n  modifier notPaused() {\\n    require(!paused, 'paused');\\n    _;\\n  }\\n\\n  function _pause(bool _paused) internal {\\n    require(paused != _paused, 'no-change');\\n    paused = _paused;\\n    emit Paused(_paused);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/interfaces/utils/IGovernable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IGovernable {\\n  event PendingGovernorSet(address pendingGovernor);\\n  event GovernorAccepted();\\n\\n  function setPendingGovernor(address _pendingGovernor) external;\\n  function acceptGovernor() external;\\n\\n  function governor() external view returns (address _governor);\\n  function pendingGovernor() external view returns (address _pendingGovernor);\\n\\n  function isGovernor(address _account) external view returns (bool _isGovernor);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/interfaces/utils/ICollectableDust.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface ICollectableDust {\\n  event DustSent(address _to, address token, uint256 amount);\\n\\n  function sendDust(address _to, address _token, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/interfaces/utils/IPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IPausable {\\n  event Paused(bool _paused);\\n\\n  function pause(bool _paused) external;\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/interfaces/keep3r/IKeep3rV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IKeep3rV1Helper.sol\\\";\\n\\ninterface IKeep3rV1 is IERC20 {\\n    function name() external returns (string memory);\\n    function KPRH() external view returns (IKeep3rV1Helper);\\n\\n    function isKeeper(address _keeper) external returns (bool);\\n    function isMinKeeper(address _keeper, uint256 _minBond, uint256 _earned, uint256 _age) external returns (bool);\\n    function isBondedKeeper(address _keeper, address bond, uint256 _minBond, uint256 _earned, uint256 _age) external returns (bool);\\n    function addKPRCredit(address _job, uint256 _amount) external;\\n    function addJob(address _job) external;\\n    function removeJob(address _job) external;\\n    function addVotes(address voter, uint256 amount) external;\\n    function removeVotes(address voter, uint256 amount) external;\\n\\n    function worked(address _keeper) external;\\n    function workReceipt(address _keeper, uint256 _amount) external;\\n    function receipt(address credit, address _keeper, uint256 _amount) external;\\n    function receiptETH(address _keeper, uint256 _amount) external;\\n\\n    function addLiquidityToJob(address liquidity, address job, uint amount) external;\\n    function applyCreditToJob(address provider, address liquidity, address job) external;\\n    function unbondLiquidityFromJob(address liquidity, address job, uint amount) external;\\n    function removeLiquidityFromJob(address liquidity, address job) external;\\n\\n    function jobs(address _job) external view returns (bool);\\n    function jobList(uint256 _index) external view returns (address _job);\\n    function credits(address _job, address _credit) external view returns (uint256 _amount);\\n\\n    function liquidityAccepted(address _liquidity) external view returns (bool);\\n\\n    function liquidityProvided(address _provider, address _liquidity, address _job) external view returns (uint256 _amount);\\n    function liquidityApplied(address _provider, address _liquidity, address _job) external view returns (uint256 _amount);\\n    function liquidityAmount(address _provider, address _liquidity, address _job) external view returns (uint256 _amount);\\n    \\n    function liquidityUnbonding(address _provider, address _liquidity, address _job) external view returns (uint256 _amount);\\n    function liquidityAmountsUnbonding(address _provider, address _liquidity, address _job) external view returns (uint256 _amount);\\n\\n    function bond(address bonding, uint256 amount) external;\\n    function activate(address bonding) external;\\n    function unbond(address bonding, uint256 amount) external;\\n    function withdraw(address bonding) external;\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/interfaces/keep3r/IKeep3r.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\ninterface IKeep3r {\\n    event Keep3rSet(address _keep3r);\\n    event Keep3rRequirementsSet(address _bond, uint256 _minBond, uint256 _earned, uint256 _age, bool _onlyEOA);\\n    \\n    function keep3r() external view returns (address _keep3r);\\n\\n    function setKeep3r(address _keep3r) external;\\n    function setKeep3rRequirements(address _bond, uint256 _minBond, uint256 _earned, uint256 _age, bool _onlyEOA) external;\\n}\\n\"\r\n    },\r\n    \"@lbertenasco/contract-utils/interfaces/keep3r/IKeep3rV1Helper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IKeep3rV1Helper {\\n    function quote(uint256 eth) external view returns (uint256);\\n\\n    function getFastGas() external view returns (uint256);\\n\\n    function bonds(address keeper) external view returns (uint256);\\n\\n    function getQuoteLimit(uint256 gasUsed) external view returns (uint256);\\n\\n    function getQuoteLimitFor(address origin, uint256 gasUsed) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/keep3r-liquidity-manager/Keep3rLiquidityManagerEscrowsHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '@lbertenasco/contract-utils/interfaces/utils/IGovernable.sol';\\nimport '@lbertenasco/contract-utils/interfaces/utils/ICollectableDust.sol';\\n\\nimport '../escrow/Keep3rEscrow.sol';\\n\\ninterface IKeep3rLiquidityManagerEscrowsHandler {\\n  event Escrow1Set(address _escrow1);\\n\\n  event Escrow2Set(address _escrow2);\\n\\n  function escrow1() external view returns (address _escrow1);\\n\\n  function escrow2() external view returns (address _escrow2);\\n\\n  function isValidEscrow(address _escrow) external view returns (bool);\\n\\n  function addLiquidityToJob(\\n    address _escrow,\\n    address _liquidity,\\n    address _job,\\n    uint256 _amount\\n  ) external;\\n\\n  function applyCreditToJob(\\n    address _escrow,\\n    address _liquidity,\\n    address _job\\n  ) external;\\n\\n  function unbondLiquidityFromJob(\\n    address _escrow,\\n    address _liquidity,\\n    address _job,\\n    uint256 _amount\\n  ) external;\\n\\n  function removeLiquidityFromJob(\\n    address _escrow,\\n    address _liquidity,\\n    address _job\\n  ) external returns (uint256 _amount);\\n\\n  function setPendingGovernorOnEscrow(address _escrow, address _pendingGovernor) external;\\n\\n  function acceptGovernorOnEscrow(address _escrow) external;\\n\\n  function sendDustOnEscrow(\\n    address _escrow,\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) external;\\n}\\n\\nabstract contract Keep3rLiquidityManagerEscrowsHandler is IKeep3rLiquidityManagerEscrowsHandler {\\n  address public immutable override escrow1;\\n  address public immutable override escrow2;\\n\\n  constructor(address _escrow1, address _escrow2) public {\\n    require(_escrow1 != address(0), 'Keep3rLiquidityManager::zero-address');\\n    require(_escrow2 != address(0), 'Keep3rLiquidityManager::zero-address');\\n    escrow1 = _escrow1;\\n    escrow2 = _escrow2;\\n  }\\n\\n  modifier _assertIsValidEscrow(address _escrow) {\\n    require(isValidEscrow(_escrow), 'Keep3rLiquidityManager::invalid-escrow');\\n    _;\\n  }\\n\\n  function isValidEscrow(address _escrow) public view override returns (bool) {\\n    return _escrow == escrow1 || _escrow == escrow2;\\n  }\\n\\n  function _addLiquidityToJob(\\n    address _escrow,\\n    address _liquidity,\\n    address _job,\\n    uint256 _amount\\n  ) internal _assertIsValidEscrow(_escrow) {\\n    IKeep3rEscrow(_escrow).addLiquidityToJob(_liquidity, _job, _amount);\\n  }\\n\\n  function _applyCreditToJob(\\n    address _escrow,\\n    address _liquidity,\\n    address _job\\n  ) internal _assertIsValidEscrow(_escrow) {\\n    IKeep3rEscrow(_escrow).applyCreditToJob(address(_escrow), _liquidity, _job);\\n  }\\n\\n  function _unbondLiquidityFromJob(\\n    address _escrow,\\n    address _liquidity,\\n    address _job,\\n    uint256 _amount\\n  ) internal _assertIsValidEscrow(_escrow) {\\n    IKeep3rEscrow(_escrow).unbondLiquidityFromJob(_liquidity, _job, _amount);\\n  }\\n\\n  function _removeLiquidityFromJob(\\n    address _escrow,\\n    address _liquidity,\\n    address _job\\n  ) internal _assertIsValidEscrow(_escrow) returns (uint256 _amount) {\\n    return IKeep3rEscrow(_escrow).removeLiquidityFromJob(_liquidity, _job);\\n  }\\n\\n  function _setPendingGovernorOnEscrow(address _escrow, address _pendingGovernor) internal _assertIsValidEscrow(_escrow) {\\n    IGovernable(_escrow).setPendingGovernor(_pendingGovernor);\\n  }\\n\\n  function _acceptGovernorOnEscrow(address _escrow) internal _assertIsValidEscrow(_escrow) {\\n    IGovernable(_escrow).acceptGovernor();\\n  }\\n\\n  function _sendDustOnEscrow(\\n    address _escrow,\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) internal _assertIsValidEscrow(_escrow) {\\n    ICollectableDust(_escrow).sendDust(_to, _token, _amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/keep3r-liquidity-manager/Keep3rLiquidityManagerJobHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IKeep3rLiquidityManagerJobHandler {\\n  function job() external view returns (address _job);\\n\\n  function setJob(address _job) external;\\n}\\n\\nabstract contract Keep3rLiquidityManagerJobHandler is IKeep3rLiquidityManagerJobHandler {\\n  address public override job;\\n\\n  function _setJob(address _job) internal {\\n    job = _job;\\n  }\\n\\n  modifier onlyJob() {\\n    require(msg.sender == job, 'Keep3rLiquidityManagerJobHandler::unauthorized-job');\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/keep3r-liquidity-manager/Keep3rLiquidityManagerJobsLiquidityHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/utils/EnumerableSet.sol';\\n\\ninterface IKeep3rLiquidityManagerJobsLiquidityHandler {\\n  event JobAdded(address _job);\\n\\n  event JobRemoved(address _job);\\n\\n  function jobs() external view returns (address[] memory _jobsList);\\n\\n  function jobLiquidities(address _job) external view returns (address[] memory _liquiditiesList);\\n\\n  function jobLiquidityDesiredAmount(address _job, address _liquidity) external view returns (uint256 _amount);\\n}\\n\\nabstract contract Keep3rLiquidityManagerJobsLiquidityHandler is IKeep3rLiquidityManagerJobsLiquidityHandler {\\n  using SafeMath for uint256;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  // job[]\\n  EnumerableSet.AddressSet internal _jobs;\\n  // job => lp[]\\n  mapping(address => EnumerableSet.AddressSet) internal _jobLiquidities;\\n  // job => lp => amount\\n  mapping(address => mapping(address => uint256)) public override jobLiquidityDesiredAmount;\\n\\n  function jobs() public view override returns (address[] memory _jobsList) {\\n    _jobsList = new address[](_jobs.length());\\n    for (uint256 i; i < _jobs.length(); i++) {\\n      _jobsList[i] = _jobs.at(i);\\n    }\\n  }\\n\\n  function jobLiquidities(address _job) public view override returns (address[] memory _liquiditiesList) {\\n    _liquiditiesList = new address[](_jobLiquidities[_job].length());\\n    for (uint256 i; i < _jobLiquidities[_job].length(); i++) {\\n      _liquiditiesList[i] = _jobLiquidities[_job].at(i);\\n    }\\n  }\\n\\n  function _addJob(address _job) internal {\\n    if (_jobs.add(_job)) emit JobAdded(_job);\\n  }\\n\\n  function _removeJob(address _job) internal {\\n    if (_jobs.remove(_job)) emit JobRemoved(_job);\\n  }\\n\\n  function _addLPToJob(address _job, address _liquidity) internal {\\n    _jobLiquidities[_job].add(_liquidity);\\n    if (_jobLiquidities[_job].length() == 1) _addJob(_job);\\n  }\\n\\n  function _removeLPFromJob(address _job, address _liquidity) internal {\\n    _jobLiquidities[_job].remove(_liquidity);\\n    if (_jobLiquidities[_job].length() == 0) _removeJob(_job);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/keep3r-liquidity-manager/Keep3rLiquidityManagerParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '@lbertenasco/contract-utils/interfaces/keep3r/IKeep3rV1.sol';\\n\\ninterface IKeep3rLiquidityManagerParameters {\\n  event Keep3rV1Set(address _keep3rV1);\\n\\n  function keep3rV1() external view returns (address);\\n}\\n\\nabstract contract Keep3rLiquidityManagerParameters is IKeep3rLiquidityManagerParameters {\\n  address public override keep3rV1;\\n\\n  constructor(address _keep3rV1) public {\\n    _setKeep3rV1(_keep3rV1);\\n  }\\n\\n  function _setKeep3rV1(address _keep3rV1) internal {\\n    require(_keep3rV1 != address(0), 'Keep3rLiquidityManager::zero-address');\\n    keep3rV1 = _keep3rV1;\\n    emit Keep3rV1Set(_keep3rV1);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/keep3r-liquidity-manager/Keep3rLiquidityManagerUserJobsLiquidityHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport './Keep3rLiquidityManagerEscrowsHandler.sol';\\nimport './Keep3rLiquidityManagerUserLiquidityHandler.sol';\\nimport './Keep3rLiquidityManagerJobsLiquidityHandler.sol';\\n\\ninterface IKeep3rLiquidityManagerUserJobsLiquidityHandler {\\n  event LiquidityMinSet(address _liquidity, uint256 _minAmount);\\n  event LiquidityOfJobSet(address indexed _user, address _liquidity, address _job, uint256 _amount);\\n  event IdleLiquidityRemovedFromJob(address indexed _user, address _liquidity, address _job, uint256 _amount);\\n\\n  function liquidityMinAmount(address _liquidity) external view returns (uint256 _minAmount);\\n\\n  function userJobLiquidityAmount(\\n    address _user,\\n    address _job,\\n    address _liquidity\\n  ) external view returns (uint256 _amount);\\n\\n  function userJobLiquidityLockedAmount(\\n    address _user,\\n    address _job,\\n    address _liquidity\\n  ) external view returns (uint256 _amount);\\n\\n  function userJobCycle(address _user, address _job) external view returns (uint256 _cycle);\\n\\n  function jobCycle(address _job) external view returns (uint256 _cycle);\\n\\n  function setMinAmount(address _liquidity, uint256 _minAmount) external;\\n\\n  function setJobLiquidityAmount(\\n    address _liquidity,\\n    address _job,\\n    uint256 _amount\\n  ) external;\\n\\n  function forceRemoveLiquidityOfUserFromJob(\\n    address _user,\\n    address _liquidity,\\n    address _job\\n  ) external;\\n\\n  function removeIdleLiquidityFromJob(\\n    address _liquidity,\\n    address _job,\\n    uint256 _amount\\n  ) external;\\n}\\n\\nabstract contract Keep3rLiquidityManagerUserJobsLiquidityHandler is\\n  Keep3rLiquidityManagerEscrowsHandler,\\n  Keep3rLiquidityManagerUserLiquidityHandler,\\n  Keep3rLiquidityManagerJobsLiquidityHandler,\\n  IKeep3rLiquidityManagerUserJobsLiquidityHandler\\n{\\n  using SafeMath for uint256;\\n\\n  // lp => minAmount\\n  mapping(address => uint256) public override liquidityMinAmount;\\n  // user => job => lp => amount\\n  mapping(address => mapping(address => mapping(address => uint256))) public override userJobLiquidityAmount;\\n  // user => job => lp => amount\\n  mapping(address => mapping(address => mapping(address => uint256))) public override userJobLiquidityLockedAmount;\\n  // user => job => cycle\\n  mapping(address => mapping(address => uint256)) public override userJobCycle;\\n  // job => cycle\\n  mapping(address => uint256) public override jobCycle;\\n\\n  function _setMinAmount(address _liquidity, uint256 _minAmount) internal {\\n    liquidityMinAmount[_liquidity] = _minAmount;\\n    emit LiquidityMinSet(_liquidity, _minAmount);\\n  }\\n\\n  function setJobLiquidityAmount(\\n    address _liquidity,\\n    address _job,\\n    uint256 _amount\\n  ) external virtual override {\\n    _setLiquidityToJobOfUser(msg.sender, _liquidity, _job, _amount);\\n  }\\n\\n  function removeIdleLiquidityFromJob(\\n    address _liquidity,\\n    address _job,\\n    uint256 _amount\\n  ) external virtual override {\\n    _removeIdleLiquidityOfUserFromJob(msg.sender, _liquidity, _job, _amount);\\n  }\\n\\n  function _setLiquidityToJobOfUser(\\n    address _user,\\n    address _liquidity,\\n    address _job,\\n    uint256 _amount\\n  ) internal {\\n    _amount = _amount.div(2).mul(2); // removes potential decimal dust\\n\\n    require(_amount != userJobLiquidityAmount[_user][_job][_liquidity], 'Keep3rLiquidityManager::same-liquidity-amount');\\n\\n    userJobCycle[_user][_job] = jobCycle[_job];\\n\\n    if (_amount > userJobLiquidityLockedAmount[_user][_job][_liquidity]) {\\n      _addLiquidityOfUserToJob(_user, _liquidity, _job, _amount.sub(userJobLiquidityAmount[_user][_job][_liquidity]));\\n    } else {\\n      _subLiquidityOfUserFromJob(_user, _liquidity, _job, userJobLiquidityAmount[_user][_job][_liquidity].sub(_amount));\\n    }\\n    emit LiquidityOfJobSet(_user, _liquidity, _job, _amount);\\n  }\\n\\n  function _forceRemoveLiquidityOfUserFromJob(\\n    address _user,\\n    address _liquidity,\\n    address _job\\n  ) internal {\\n    require(!IKeep3rV1(keep3rV1).jobs(_job), 'Keep3rLiquidityManager::force-remove-liquidity:job-on-keep3r');\\n    // set liquidity as 0 to force exit on stuck job\\n    _setLiquidityToJobOfUser(_user, _liquidity, _job, 0);\\n  }\\n\\n  function _addLiquidityOfUserToJob(\\n    address _user,\\n    address _liquidity,\\n    address _job,\\n    uint256 _amount\\n  ) internal {\\n    require(IKeep3rV1(keep3rV1).jobs(_job), 'Keep3rLiquidityManager::job-not-on-keep3r');\\n    require(_amount > 0, 'Keep3rLiquidityManager::zero-amount');\\n    require(_amount <= userLiquidityIdleAmount[_user][_liquidity], 'Keep3rLiquidityManager::no-idle-liquidity-available');\\n    require(liquidityMinAmount[_liquidity] != 0, 'Keep3rLiquidityManager::liquidity-min-not-set');\\n    require(\\n      userJobLiquidityLockedAmount[_user][_job][_liquidity].add(_amount) >= liquidityMinAmount[_liquidity],\\n      'Keep3rLiquidityManager::locked-amount-not-enough'\\n    );\\n    // set liquidity amount on user-job\\n    userJobLiquidityAmount[_user][_job][_liquidity] = userJobLiquidityAmount[_user][_job][_liquidity].add(_amount);\\n    // increase user-job liquidity locked amount\\n    userJobLiquidityLockedAmount[_user][_job][_liquidity] = userJobLiquidityLockedAmount[_user][_job][_liquidity].add(_amount);\\n    // substract amount from user idle amount\\n    userLiquidityIdleAmount[_user][_liquidity] = userLiquidityIdleAmount[_user][_liquidity].sub(_amount);\\n    // add lp to job if that lp was not being used on that job\\n    if (jobLiquidityDesiredAmount[_job][_liquidity] == 0) _addLPToJob(_job, _liquidity);\\n    // add amount to desired liquidity on job\\n    jobLiquidityDesiredAmount[_job][_liquidity] = jobLiquidityDesiredAmount[_job][_liquidity].add(_amount);\\n  }\\n\\n  function _subLiquidityOfUserFromJob(\\n    address _user,\\n    address _liquidity,\\n    address _job,\\n    uint256 _amount\\n  ) internal {\\n    require(_amount <= userJobLiquidityAmount[_user][_job][_liquidity], 'Keep3rLiquidityManager::not-enough-lp-in-job');\\n    // only allow user job liquidity to be reduced to 0 or higher than minumum\\n    require(\\n      userJobLiquidityAmount[_user][_job][_liquidity].sub(_amount) == 0 ||\\n        userJobLiquidityAmount[_user][_job][_liquidity].sub(_amount) >= liquidityMinAmount[_liquidity],\\n      'Keep3rLiquidityManager::locked-amount-not-enough'\\n    );\\n\\n    userJobLiquidityAmount[_user][_job][_liquidity] = userJobLiquidityAmount[_user][_job][_liquidity].sub(_amount);\\n    jobLiquidityDesiredAmount[_job][_liquidity] = jobLiquidityDesiredAmount[_job][_liquidity].sub(_amount);\\n  }\\n\\n  function _removeIdleLiquidityOfUserFromJob(\\n    address _user,\\n    address _liquidity,\\n    address _job,\\n    uint256 _amount\\n  ) internal {\\n    require(_amount > 0, 'Keep3rLiquidityManager::zero-amount');\\n    require(\\n      jobCycle[_job] >= userJobCycle[_user][_job].add(2) || // wait for full cycle\\n        _jobLiquidities[_job].length() == 0, // or removes if 1 cycle was enough to remove all liquidity\\n      'Keep3rLiquidityManager::liquidity-still-locked'\\n    );\\n\\n    _amount = _amount.div(2).mul(2);\\n\\n    uint256 _unlockedIdleAvailable = userJobLiquidityLockedAmount[_user][_job][_liquidity].sub(userJobLiquidityAmount[_user][_job][_liquidity]);\\n    require(_amount <= _unlockedIdleAvailable, 'Keep3rLiquidityManager::amount-bigger-than-idle-available');\\n\\n    userJobLiquidityLockedAmount[_user][_job][_liquidity] = userJobLiquidityLockedAmount[_user][_job][_liquidity].sub(_amount);\\n    userLiquidityIdleAmount[_user][_liquidity] = userLiquidityIdleAmount[_user][_liquidity].add(_amount);\\n\\n    emit IdleLiquidityRemovedFromJob(_user, _liquidity, _job, _amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/keep3r-liquidity-manager/Keep3rLiquidityManagerUserLiquidityHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\nimport './Keep3rLiquidityManagerParameters.sol';\\n\\ninterface IKeep3rLiquidityManagerUserLiquidityHandler {\\n  event LiquidityFeeSet(uint256 _liquidityFee);\\n\\n  event FeeReceiverSet(address _feeReceiver);\\n\\n  event DepositedLiquidity(address indexed _depositor, address _recipient, address _lp, uint256 _amount, uint256 _fee);\\n\\n  event WithdrewLiquidity(address indexed _withdrawer, address _recipient, address _lp, uint256 _amount);\\n\\n  function liquidityFee() external view returns (uint256 _liquidityFee);\\n\\n  function feeReceiver() external view returns (address _feeReceiver);\\n\\n  function liquidityTotalAmount(address _liquidity) external view returns (uint256 _amount);\\n\\n  function userLiquidityTotalAmount(address _user, address _lp) external view returns (uint256 _amount);\\n\\n  function userLiquidityIdleAmount(address _user, address _lp) external view returns (uint256 _amount);\\n\\n  function depositLiquidity(address _lp, uint256 _amount) external;\\n\\n  function depositLiquidityTo(\\n    address _liquidityRecipient,\\n    address _lp,\\n    uint256 _amount\\n  ) external;\\n\\n  function withdrawLiquidity(address _lp, uint256 _amount) external;\\n\\n  function withdrawLiquidityTo(\\n    address _liquidityRecipient,\\n    address _lp,\\n    uint256 _amount\\n  ) external;\\n\\n  function setLiquidityFee(uint256 _liquidityFee) external;\\n\\n  function setFeeReceiver(address _feeReceiver) external;\\n}\\n\\nabstract contract Keep3rLiquidityManagerUserLiquidityHandler is Keep3rLiquidityManagerParameters, IKeep3rLiquidityManagerUserLiquidityHandler {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  // liquidity fee precision\\n  uint256 public constant PRECISION = 1_000;\\n  // max liquidity fee\\n  uint256 public constant MAX_LIQUIDITY_FEE = PRECISION / 10; // 10%\\n  // liquidity fee\\n  uint256 public override liquidityFee;\\n  // feeReceiver address\\n  address public override feeReceiver;\\n  // lp => amount (helps safely collect extra dust)\\n  mapping(address => uint256) public override liquidityTotalAmount;\\n  // user => lp => amount\\n  mapping(address => mapping(address => uint256)) public override userLiquidityTotalAmount;\\n  // user => lp => amount\\n  mapping(address => mapping(address => uint256)) public override userLiquidityIdleAmount;\\n\\n  constructor() public {\\n    _setFeeReceiver(msg.sender);\\n  }\\n\\n  // user\\n  function depositLiquidity(address _lp, uint256 _amount) public virtual override {\\n    depositLiquidityTo(msg.sender, _lp, _amount);\\n  }\\n\\n  function depositLiquidityTo(\\n    address _liquidityRecipient,\\n    address _lp,\\n    uint256 _amount\\n  ) public virtual override {\\n    _depositLiquidity(msg.sender, _liquidityRecipient, _lp, _amount);\\n  }\\n\\n  function withdrawLiquidity(address _lp, uint256 _amount) public virtual override {\\n    withdrawLiquidityTo(msg.sender, _lp, _amount);\\n  }\\n\\n  function withdrawLiquidityTo(\\n    address _liquidityRecipient,\\n    address _lp,\\n    uint256 _amount\\n  ) public virtual override {\\n    _withdrawLiquidity(msg.sender, _liquidityRecipient, _lp, _amount);\\n  }\\n\\n  function _depositLiquidity(\\n    address _liquidityDepositor,\\n    address _liquidityRecipient,\\n    address _lp,\\n    uint256 _amount\\n  ) internal {\\n    require(IKeep3rV1(keep3rV1).liquidityAccepted(_lp), 'Keep3rLiquidityManager::liquidity-not-accepted-on-keep3r');\\n    IERC20(_lp).safeTransferFrom(_liquidityDepositor, address(this), _amount);\\n    uint256 _fee = _amount.mul(liquidityFee).div(PRECISION);\\n    if (_fee > 0) IERC20(_lp).safeTransfer(feeReceiver, _fee);\\n    _addLiquidity(_liquidityRecipient, _lp, _amount.sub(_fee));\\n    emit DepositedLiquidity(_liquidityDepositor, _liquidityRecipient, _lp, _amount.sub(_fee), _fee);\\n  }\\n\\n  function _withdrawLiquidity(\\n    address _liquidityWithdrawer,\\n    address _liquidityRecipient,\\n    address _lp,\\n    uint256 _amount\\n  ) internal {\\n    require(userLiquidityIdleAmount[_liquidityWithdrawer][_lp] >= _amount, 'Keep3rLiquidityManager::user-insufficient-idle-balance');\\n    _subLiquidity(_liquidityWithdrawer, _lp, _amount);\\n    IERC20(_lp).safeTransfer(_liquidityRecipient, _amount);\\n    emit WithdrewLiquidity(_liquidityWithdrawer, _liquidityRecipient, _lp, _amount);\\n  }\\n\\n  function _addLiquidity(\\n    address _user,\\n    address _lp,\\n    uint256 _amount\\n  ) internal {\\n    require(_user != address(0), 'Keep3rLiquidityManager::zero-user');\\n    require(_amount > 0, 'Keep3rLiquidityManager::amount-bigger-than-zero');\\n    liquidityTotalAmount[_lp] = liquidityTotalAmount[_lp].add(_amount);\\n    userLiquidityTotalAmount[_user][_lp] = userLiquidityTotalAmount[_user][_lp].add(_amount);\\n    userLiquidityIdleAmount[_user][_lp] = userLiquidityIdleAmount[_user][_lp].add(_amount);\\n  }\\n\\n  function _subLiquidity(\\n    address _user,\\n    address _lp,\\n    uint256 _amount\\n  ) internal {\\n    require(userLiquidityTotalAmount[_user][_lp] >= _amount, 'Keep3rLiquidityManager::amount-bigger-than-total');\\n    liquidityTotalAmount[_lp] = liquidityTotalAmount[_lp].sub(_amount);\\n    userLiquidityTotalAmount[_user][_lp] = userLiquidityTotalAmount[_user][_lp].sub(_amount);\\n    userLiquidityIdleAmount[_user][_lp] = userLiquidityIdleAmount[_user][_lp].sub(_amount);\\n  }\\n\\n  function _setLiquidityFee(uint256 _liquidityFee) internal {\\n    // TODO better revert messages\\n    require(_liquidityFee <= MAX_LIQUIDITY_FEE, 'Keep3rLiquidityManager::fee-exceeds-max-liquidity-fee');\\n    liquidityFee = _liquidityFee;\\n    emit LiquidityFeeSet(_liquidityFee);\\n  }\\n\\n  function _setFeeReceiver(address _feeReceiver) internal {\\n    require(_feeReceiver != address(0), 'Keep3rLiquidityManager::zero-address');\\n    feeReceiver = _feeReceiver;\\n    emit FeeReceiverSet(_feeReceiver);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/escrow/Keep3rEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport './Keep3rEscrowParameters.sol';\\nimport './Keep3rEscrowLiquidityHandler.sol';\\n\\ninterface IKeep3rEscrow is IKeep3rEscrowParameters, IKeep3rEscrowLiquidityHandler {}\\n\\ncontract Keep3rEscrow is Keep3rEscrowParameters, Keep3rEscrowLiquidityHandler, IKeep3rEscrow {\\n  constructor(address _keep3r) public Keep3rEscrowParameters(_keep3r) {}\\n\\n  // Manager Liquidity Handler\\n  function deposit(address _liquidity, uint256 _amount) external override onlyGovernor {\\n    _deposit(_liquidity, _amount);\\n  }\\n\\n  function withdraw(address _liquidity, uint256 _amount) external override onlyGovernor {\\n    _withdraw(_liquidity, _amount);\\n  }\\n\\n  // Job Liquidity Handler\\n  function addLiquidityToJob(\\n    address _liquidity,\\n    address _job,\\n    uint256 _amount\\n  ) external override onlyGovernor {\\n    _addLiquidityToJob(_liquidity, _job, _amount);\\n  }\\n\\n  function applyCreditToJob(\\n    address _provider,\\n    address _liquidity,\\n    address _job\\n  ) external override onlyGovernor {\\n    _applyCreditToJob(_provider, _liquidity, _job);\\n  }\\n\\n  function unbondLiquidityFromJob(\\n    address _liquidity,\\n    address _job,\\n    uint256 _amount\\n  ) external override onlyGovernor {\\n    _unbondLiquidityFromJob(_liquidity, _job, _amount);\\n  }\\n\\n  function removeLiquidityFromJob(address _liquidity, address _job) external override onlyGovernor returns (uint256 _amount) {\\n    return _removeLiquidityFromJob(_liquidity, _job);\\n  }\\n\\n  function sendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) external override onlyGovernor {\\n    _safeSendDust(_to, _token, _amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/escrow/Keep3rEscrowParameters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '@lbertenasco/contract-utils/contracts/abstract/UtilsReady.sol';\\n\\ninterface IKeep3rEscrowParameters {\\n  function keep3r() external returns (address);\\n}\\n\\nabstract contract Keep3rEscrowParameters is UtilsReady, IKeep3rEscrowParameters {\\n  address public immutable override keep3r;\\n\\n  constructor(address _keep3r) public UtilsReady() {\\n    require(address(_keep3r) != address(0), 'Keep3rEscrowParameters::constructor::keep3r-zero-address');\\n    keep3r = _keep3r;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/escrow/Keep3rEscrowLiquidityHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport '@lbertenasco/contract-utils/interfaces/keep3r/IKeep3rV1.sol';\\n\\nimport './Keep3rEscrowParameters.sol';\\n\\ninterface IKeep3rEscrowLiquidityHandler {\\n  event LiquidityAddedToJob(address _liquidity, address _job, uint256 _amount);\\n  event AppliedCreditToJob(address _provider, address _liquidity, address _job);\\n  event LiquidityUnbondedFromJob(address _liquidity, address _job, uint256 _amount);\\n  event LiquidityRemovedFromJob(address _liquidity, address _job);\\n\\n  function liquidityTotalAmount(address _liquidity) external returns (uint256 _amount);\\n\\n  function liquidityProvidedAmount(address _liquidity) external returns (uint256 _amount);\\n\\n  function deposit(address _liquidity, uint256 _amount) external;\\n\\n  function withdraw(address _liquidity, uint256 _amount) external;\\n\\n  function addLiquidityToJob(\\n    address _liquidity,\\n    address _job,\\n    uint256 _amount\\n  ) external;\\n\\n  function applyCreditToJob(\\n    address _provider,\\n    address _liquidity,\\n    address _job\\n  ) external;\\n\\n  function unbondLiquidityFromJob(\\n    address _liquidity,\\n    address _job,\\n    uint256 _amount\\n  ) external;\\n\\n  function removeLiquidityFromJob(address _liquidity, address _job) external returns (uint256 _amount);\\n}\\n\\nabstract contract Keep3rEscrowLiquidityHandler is Keep3rEscrowParameters, IKeep3rEscrowLiquidityHandler {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  mapping(address => uint256) public override liquidityTotalAmount;\\n  mapping(address => uint256) public override liquidityProvidedAmount;\\n\\n  // Handler Liquidity Handler\\n  function _deposit(address _liquidity, uint256 _amount) internal {\\n    liquidityTotalAmount[_liquidity] = liquidityTotalAmount[_liquidity].add(_amount);\\n    IERC20(_liquidity).safeTransferFrom(governor, address(this), _amount);\\n  }\\n\\n  function _withdraw(address _liquidity, uint256 _amount) internal {\\n    liquidityTotalAmount[_liquidity] = liquidityTotalAmount[_liquidity].sub(_amount);\\n    IERC20(_liquidity).safeTransfer(governor, _amount);\\n  }\\n\\n  // Job Liquidity Handler\\n  function _addLiquidityToJob(\\n    address _liquidity,\\n    address _job,\\n    uint256 _amount\\n  ) internal {\\n    // Set infinite approval once per liquidity?\\n    IERC20(_liquidity).approve(keep3r, _amount);\\n    IKeep3rV1(keep3r).addLiquidityToJob(_liquidity, _job, _amount);\\n    liquidityProvidedAmount[_liquidity] = liquidityProvidedAmount[_liquidity].add(_amount);\\n  }\\n\\n  function _applyCreditToJob(\\n    address _provider,\\n    address _liquidity,\\n    address _job\\n  ) internal {\\n    IKeep3rV1(keep3r).applyCreditToJob(_provider, _liquidity, _job);\\n    emit AppliedCreditToJob(_provider, _liquidity, _job);\\n  }\\n\\n  function _unbondLiquidityFromJob(\\n    address _liquidity,\\n    address _job,\\n    uint256 _amount\\n  ) internal {\\n    IKeep3rV1(keep3r).unbondLiquidityFromJob(_liquidity, _job, _amount);\\n  }\\n\\n  function _removeLiquidityFromJob(address _liquidity, address _job) internal returns (uint256 _amount) {\\n    uint256 _before = IERC20(_liquidity).balanceOf(address(this));\\n    IKeep3rV1(keep3r).removeLiquidityFromJob(_liquidity, _job);\\n    _amount = IERC20(_liquidity).balanceOf(address(this)).sub(_before);\\n    liquidityProvidedAmount[_liquidity] = liquidityProvidedAmount[_liquidity].sub(_amount);\\n  }\\n\\n  // Collectable Dust\\n  function _safeSendDust(\\n    address _to,\\n    address _token,\\n    uint256 _amount\\n  ) internal {\\n    if (liquidityTotalAmount[_token] > 0) {\\n      uint256 _balance = IERC20(_token).balanceOf(address(this));\\n      uint256 _provided = liquidityProvidedAmount[_token];\\n      require(_amount <= _balance.add(_provided).sub(liquidityTotalAmount[_token]));\\n    }\\n    _sendDust(_to, _token, _amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/job/IKeep3rJob.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IKeep3rJob {\\n  event SetRewardMultiplier(uint256 _rewardMultiplier);\\n\\n  function rewardMultiplier() external view returns (uint256 _rewardMultiplier);\\n\\n  function setRewardMultiplier(uint256 _rewardMultiplier) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keep3rLiquidityManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keep3r\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bond\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_onlyEOA\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DustSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_job\",\"type\":\"address\"}],\"name\":\"ForceWorked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GovernorAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_bond\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minBond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_earned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_onlyEOA\",\"type\":\"bool\"}],\"name\":\"Keep3rRequirementsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_keep3r\",\"type\":\"address\"}],\"name\":\"Keep3rSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_keep3rLiquidityManager\",\"type\":\"address\"}],\"name\":\"SetKeep3rLiquidityManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardMultiplier\",\"type\":\"uint256\"}],\"name\":\"SetRewardMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_job\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_credits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_workForTokens\",\"type\":\"bool\"}],\"name\":\"Worked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REWARD_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"age\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_job\",\"type\":\"address\"}],\"name\":\"forceWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isGovernor\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jobs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_jobs\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keep3r\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_keep3r\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keep3rLiquidityManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyEOA\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keep3r\",\"type\":\"address\"}],\"name\":\"setKeep3r\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keep3rLiquidityManager\",\"type\":\"address\"}],\"name\":\"setKeep3rLiquidityManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bond\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_age\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_onlyEOA\",\"type\":\"bool\"}],\"name\":\"setKeep3rRequirements\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"setPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardMultiplier\",\"type\":\"uint256\"}],\"name\":\"setRewardMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_job\",\"type\":\"address\"}],\"name\":\"work\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_credits\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_job\",\"type\":\"address\"}],\"name\":\"workForBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_credits\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_job\",\"type\":\"address\"}],\"name\":\"workForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_credits\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_job\",\"type\":\"address\"}],\"name\":\"workable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Keep3rLiquidityManagerJob","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f14cb1feb6c40f26d9ca0ea39a9a613428cdc9ca0000000000000000000000001ceb5cb57c4d4e2b2433641b95dd330a33185a440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002b5e3af16b1880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}