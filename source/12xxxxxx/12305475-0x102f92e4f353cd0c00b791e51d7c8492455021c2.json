{"status":"1","message":"OK","result":[{"SourceCode":"{\"contract.sol\":{\"content\":\"pragma solidity ^0.7.5;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract BouncyCoinRefund {\\n\\n    event Refunded(address addr, uint256 tokenAmount, uint256 ethAmount);\\n\\n    uint256 public constant MIN_EXCHANGE_RATE = 100000000;\\n\\n    address payable public owner;\\n\\n    uint256 public exchangeRate;\\n\\n    uint256 public totalRefunded;\\n\\n    IERC20 public bouncyCoinToken; \\n\\n    State public state;\\n\\n    enum State {\\n        Active,\\n        Inactive\\n    }\\n\\n    /* Modifiers */\\n\\n    modifier atState(State _state) {\\n        require(state == _state);\\n        _;\\n    }\\n\\n    modifier isOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    /* Constructor */\\n\\n    constructor(address _bouncyCoinToken, uint256 _exchangeRate)\\n        public\\n        payable {\\n        require(_bouncyCoinToken != address(0));\\n        require(_exchangeRate \\u003e= MIN_EXCHANGE_RATE);\\n\\n        owner = msg.sender;\\n        bouncyCoinToken = IERC20(_bouncyCoinToken);\\n        exchangeRate = _exchangeRate;\\n        state = State.Inactive;\\n    }\\n\\n    /* Public functions */\\n\\n    fallback() external payable {\\n        // no-op, just accept ETH        \\n    }\\n\\n    function refund(uint256 _tokenAmount)\\n        public\\n        atState(State.Active) {\\n\\n        uint256 toRefund = _tokenAmount / exchangeRate;\\n        uint256 bal = address(this).balance;\\n\\n        uint256 tokensToBurn;\\n        if (toRefund \\u003e bal) {\\n            // not enough ETH in contract, refund all\\n            tokensToBurn = bal * exchangeRate;\\n            toRefund = bal;\\n        } else {\\n            // we\\u0027re good\\n            tokensToBurn = _tokenAmount;\\n        }\\n\\n        assert(bouncyCoinToken.transferFrom(msg.sender, address(1), tokensToBurn));\\n        msg.sender.transfer(toRefund);\\n        totalRefunded += toRefund;\\n\\n        emit Refunded(msg.sender, tokensToBurn, toRefund);\\n    }\\n\\n    function setExchangeRate(uint256 _exchangeRate)\\n        public\\n        isOwner {\\n        require(_exchangeRate \\u003e MIN_EXCHANGE_RATE);\\n\\n        exchangeRate = _exchangeRate;\\n    }\\n\\n    function start()\\n        public\\n        isOwner {\\n        state = State.Active;\\n    }\\n\\n    function stop()\\n        public\\n        isOwner {\\n        state = State.Inactive;\\n    }\\n\\n    // In case of accidental ether lock on contract\\n    function withdraw()\\n        public\\n        isOwner {\\n        owner.transfer(address(this).balance);\\n    }\\n\\n    // In case of accidental token transfer to this address, owner can transfer it elsewhere\\n    function transferERC20Token(address _tokenAddress, address _to, uint256 _value)\\n        public\\n        isOwner {\\n        IERC20 token = IERC20(_tokenAddress);\\n        assert(token.transfer(_to, _value));\\n    }\\n\\n}\\n\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bouncyCoinToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MIN_EXCHANGE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bouncyCoinToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum BouncyCoinRefund.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRefunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BouncyCoinRefund","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e9f9547c17fc9539df99a42dcb6ec38165994c45000000000000000000000000000000000000000000000000000000000bebc200","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d04e70433a9a3e59bb3a85ad4c6feb7990c15b77f26bc1d9fe8e00122f7ad6ad"}]}