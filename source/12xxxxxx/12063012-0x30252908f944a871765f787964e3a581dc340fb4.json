{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-03-15\r\n*/\r\n\r\npragma solidity = 0.5.16;\r\n\r\ncontract Ownable {\r\n\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"YouSwap: CALLER_IS_NOT_THE_OWNER\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"YouSwap: NEW_OWNER_IS_THE_ZERO_ADDRESS\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract IDO is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    //Private offering\r\n    mapping(address => uint256) private _ordersOfPriIDO;\r\n    uint256 public startHeightOfPriIDO;\r\n    uint256 public endHeightOfPriIDO;\r\n    uint256 public totalUsdtAmountOfPriIDO = 0;\r\n    uint256 public constant supplyYouForPriIDO = 5 * 10 ** 11;//50ä¸‡YOU\r\n    uint256 public reservedYouOfPriIDO = 0;\r\n    uint256 public constant upperLimitUsdtOfPriIDO = 500 * 10 ** 6;//500USDT\r\n    bool private _priOfferingFinished = false;\r\n    bool private _priIDOWithdrawFinished = false;\r\n\r\n    event PrivateOffering(address indexed participant, uint256 amountOfYou, uint256 amountOfUsdt);\r\n    event PrivateOfferingClaimed(address indexed participant, uint256 amountOfYou);\r\n\r\n    //Public offering\r\n    mapping(address => uint256) private _ordersOfPubIDO;\r\n    uint256 public constant targetUsdtAmountOfPubIDO = 2 * 10 ** 8;//200USDT\r\n    uint256 public constant targetYouAmountOfPubIDO = 2 * 10 ** 9;//2000YOU\r\n    uint256 public totalUsdtAmountOfPubIDO = 0;\r\n    uint256 public startHeightOfPubIDO;\r\n    uint256 public endHeightOfPubIDO;\r\n    uint256 public constant bottomLimitUsdtOfPubIDO = 10 * 10 ** 6; //10USDT\r\n    bool private _pubIDOWithdrawFinished = false;\r\n\r\n    event PublicOffering(address indexed participant, uint256 amountOfUsdt);\r\n    event PublicOfferingClaimed(address indexed participant, uint256 amountOfYou);\r\n    event PublicOfferingRefund(address indexed participant, uint256 amountOfUsdt);\r\n\r\n    mapping(address => uint8) private _whiteList;\r\n\r\n    address private constant _usdtToken = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n    address private _youToken;\r\n\r\n    uint256 public constant initialLiquidYou = 3 * 10 ** 12;//3 000 000YOU For initial Liquid\r\n    address private constant _vault = 0x6B5C21a770dA1621BB28C9a2b6F282E5FC9154d5;\r\n\r\n    uint private unlocked = 1;\r\n    constructor(address youToken) public {\r\n        _youToken = youToken;\r\n\r\n        startHeightOfPriIDO = 12047150;\r\n        endHeightOfPriIDO = 12048590;\r\n\r\n        startHeightOfPubIDO = block.number;\r\n        endHeightOfPubIDO = startHeightOfPubIDO + 60;\r\n    }\r\n\r\n    modifier lock() {\r\n        require(unlocked == 1, 'YouSwap: LOCKED');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    function initPubIDO(uint256 startHOfPubIDO, uint256 endHOfPubIDO) onlyOwner public {\r\n        startHeightOfPubIDO = startHOfPubIDO;\r\n        endHeightOfPubIDO = endHOfPubIDO;\r\n        _pubIDOWithdrawFinished = false;\r\n    }\r\n\r\n    modifier inWhiteList() {\r\n        require(_whiteList[msg.sender] == 1, \"YouSwap: NOT_IN_WHITE_LIST\");\r\n        _;\r\n    }\r\n\r\n    function isInWhiteList(address account) external view returns (bool) {\r\n        return _whiteList[account] == 1;\r\n    }\r\n\r\n    function addToWhiteList(address account) external onlyOwner {\r\n        _whiteList[account] = 1;\r\n    }\r\n\r\n    function addBatchToWhiteList(address[] calldata accounts) external onlyOwner {\r\n        for (uint i = 0; i < accounts.length; i++) {\r\n            _whiteList[accounts[i]] = 1;\r\n        }\r\n    }\r\n\r\n    function removeFromWhiteList(address account) external onlyOwner {\r\n        _whiteList[account] = 0;\r\n    }\r\n\r\n    function claim() inWhiteList external lock {\r\n        require((block.number >= endHeightOfPriIDO && _ordersOfPriIDO[msg.sender] > 0)\r\n            || (block.number >= endHeightOfPubIDO && _ordersOfPubIDO[msg.sender] > 0), 'YouSwap: FORBIDDEN');\r\n\r\n        uint256 reservedYouFromPriIDO = _ordersOfPriIDO[msg.sender];\r\n        if (block.number >= endHeightOfPriIDO && reservedYouFromPriIDO > 0) {\r\n            _ordersOfPriIDO[msg.sender] = 0;\r\n            _mintYou(_youToken, msg.sender, reservedYouFromPriIDO);\r\n            emit PrivateOfferingClaimed(msg.sender, reservedYouFromPriIDO);\r\n        }\r\n\r\n        uint256 amountOfUsdtPayed = _ordersOfPubIDO[msg.sender];\r\n        if (block.number >= endHeightOfPubIDO && amountOfUsdtPayed > 0) {\r\n            uint256 reservedYouFromPubIDO = 0;\r\n            if (totalUsdtAmountOfPubIDO > targetUsdtAmountOfPubIDO) {\r\n                uint256 availableAmountOfUsdt = amountOfUsdtPayed.mul(targetUsdtAmountOfPubIDO).div(totalUsdtAmountOfPubIDO);\r\n                reservedYouFromPubIDO = availableAmountOfUsdt.mul(10);\r\n                uint256 usdtAmountToRefund = amountOfUsdtPayed.sub(availableAmountOfUsdt).sub(10);\r\n\r\n                if (usdtAmountToRefund > 0) {\r\n                    _transfer(_usdtToken, msg.sender, usdtAmountToRefund);\r\n                    emit PublicOfferingRefund(msg.sender, usdtAmountToRefund);\r\n                }\r\n            }\r\n            else {\r\n                reservedYouFromPubIDO = amountOfUsdtPayed.mul(10);\r\n            }\r\n\r\n            _ordersOfPubIDO[msg.sender] = 0;\r\n            _mintYou(_youToken, msg.sender, reservedYouFromPubIDO);\r\n            emit PublicOfferingClaimed(msg.sender, reservedYouFromPubIDO);\r\n        }\r\n    }\r\n\r\n    function withdrawPriIDO() onlyOwner external {\r\n        require(block.number > endHeightOfPriIDO, 'YouSwap: BLOCK_HEIGHT_NOT_REACHED');\r\n        require(!_priIDOWithdrawFinished, 'YouSwap: PRI_IDO_WITHDRAWN_ALREADY');\r\n\r\n        _transfer(_usdtToken, _vault, totalUsdtAmountOfPriIDO);\r\n\r\n        _priIDOWithdrawFinished = true;\r\n    }\r\n\r\n    function withdrawPubIDO() onlyOwner external {\r\n        require(block.number > endHeightOfPubIDO, 'YouSwap: BLOCK_HEIGHT_NOT_REACHED');\r\n        require(!_pubIDOWithdrawFinished, 'YouSwap: PUB_IDO_WITHDRAWN_ALREADY');\r\n\r\n        uint256 amountToWithdraw = totalUsdtAmountOfPubIDO;\r\n        if (totalUsdtAmountOfPubIDO > targetUsdtAmountOfPubIDO) {\r\n            amountToWithdraw = targetUsdtAmountOfPubIDO;\r\n        }\r\n\r\n        _transfer(_usdtToken, _vault, amountToWithdraw);\r\n        _mintYou(_youToken, _vault, initialLiquidYou);\r\n\r\n        _pubIDOWithdrawFinished = true;\r\n    }\r\n\r\n    function privateOffering(uint256 amountOfUsdt) inWhiteList external lock returns (bool)  {\r\n        require(block.number >= startHeightOfPriIDO, 'YouSwap:NOT_STARTED_YET');\r\n        require(!_priOfferingFinished && block.number <= endHeightOfPriIDO, 'YouSwap:PRIVATE_OFFERING_ALREADY_FINISHED');\r\n        require(_ordersOfPriIDO[msg.sender] == 0, 'YouSwap: ENROLLED_ALREADY');\r\n        require(amountOfUsdt <= upperLimitUsdtOfPriIDO, 'YouSwap: EXCEEDS_THE_UPPER_LIMIT');\r\n        require(amountOfUsdt > 0, \"YouSwap: INVALID_AMOUNT\");\r\n\r\n        require(reservedYouOfPriIDO < supplyYouForPriIDO, 'YouSwap:INSUFFICIENT_YOU');\r\n        uint256 amountOfYou = amountOfUsdt.mul(10);\r\n        //0.1USDT/YOU\r\n        if (reservedYouOfPriIDO.add(amountOfYou) >= supplyYouForPriIDO) {\r\n            amountOfYou = supplyYouForPriIDO.sub(reservedYouOfPriIDO);\r\n            amountOfUsdt = amountOfYou.div(10);\r\n\r\n            _priOfferingFinished = true;\r\n        }\r\n        _transferFrom(_usdtToken, amountOfUsdt);\r\n\r\n        _ordersOfPriIDO[msg.sender] = amountOfYou;\r\n        reservedYouOfPriIDO = reservedYouOfPriIDO.add(amountOfYou);\r\n        totalUsdtAmountOfPriIDO = totalUsdtAmountOfPriIDO.add(amountOfUsdt);\r\n        emit PrivateOffering(msg.sender, amountOfYou, amountOfUsdt);\r\n\r\n        return true;\r\n    }\r\n\r\n    function priOfferingFinished() public view returns (bool) {\r\n        return block.number > endHeightOfPriIDO || _priOfferingFinished;\r\n    }\r\n\r\n    function pubOfferingFinished() public view returns (bool) {\r\n        return block.number > endHeightOfPubIDO;\r\n    }\r\n\r\n    function publicOffering(uint256 amountOfUsdt) external lock returns (bool)  {\r\n        require(block.number >= startHeightOfPubIDO, 'YouSwap:PUBLIC_OFFERING_NOT_STARTED_YET');\r\n        require(block.number <= endHeightOfPubIDO, 'YouSwap:PUBLIC_OFFERING_ALREADY_FINISHED');\r\n        require(amountOfUsdt >= bottomLimitUsdtOfPubIDO, 'YouSwap: 100USDT_AT_LEAST');\r\n\r\n        _transferFrom(_usdtToken, amountOfUsdt);\r\n\r\n        _ordersOfPubIDO[msg.sender] = _ordersOfPubIDO[msg.sender].add(amountOfUsdt);\r\n        totalUsdtAmountOfPubIDO = totalUsdtAmountOfPubIDO.add(amountOfUsdt);\r\n\r\n        emit PublicOffering(msg.sender, amountOfUsdt);\r\n\r\n        _whiteList[msg.sender] = 1;\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transferFrom(address token, uint256 amount) private {\r\n        bytes4 methodId = bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(methodId, msg.sender, address(this), amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'YouSwap: TRANSFER_FAILED');\r\n    }\r\n\r\n    function _mintYou(address token, address recipient, uint256 amount) private {\r\n        bytes4 methodId = bytes4(keccak256(bytes('mint(address,uint256)')));\r\n\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(methodId, recipient, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'YouSwap: TRANSFER_FAILED');\r\n    }\r\n\r\n    function _transfer(address token, address recipient, uint amount) private {\r\n        bytes4 methodId = bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(methodId, recipient, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'YouSwap: TRANSFER_FAILED');\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"youToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfYou\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfUsdt\",\"type\":\"uint256\"}],\"name\":\"PrivateOffering\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfYou\",\"type\":\"uint256\"}],\"name\":\"PrivateOfferingClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfUsdt\",\"type\":\"uint256\"}],\"name\":\"PublicOffering\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfYou\",\"type\":\"uint256\"}],\"name\":\"PublicOfferingClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfUsdt\",\"type\":\"uint256\"}],\"name\":\"PublicOfferingRefund\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"addBatchToWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addToWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bottomLimitUsdtOfPubIDO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endHeightOfPriIDO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endHeightOfPubIDO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startHOfPubIDO\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endHOfPubIDO\",\"type\":\"uint256\"}],\"name\":\"initPubIDO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialLiquidYou\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isInWhiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priOfferingFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOfUsdt\",\"type\":\"uint256\"}],\"name\":\"privateOffering\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pubOfferingFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOfUsdt\",\"type\":\"uint256\"}],\"name\":\"publicOffering\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeFromWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reservedYouOfPriIDO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startHeightOfPriIDO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startHeightOfPubIDO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"supplyYouForPriIDO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetUsdtAmountOfPubIDO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"targetYouAmountOfPubIDO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsdtAmountOfPriIDO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUsdtAmountOfPubIDO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upperLimitUsdtOfPriIDO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPriIDO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawPubIDO\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IDO","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000004f5fa514ce5b53d5a17259e06f0340886cae2e5a","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ef456b76936aabb2991fa2e684f58c6f702e51feae501184e4b3dfc385a4423e"}]}