{"status":"1","message":"OK","result":[{"SourceCode":"// File contracts/interfaces/IERC3156FlashBorrower.sol\r\n\r\n// SPDX-License-Identifier: No License\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC3156FlashBorrower {\r\n\r\n  /**\r\n    * @dev Receive a flash loan.\r\n    * @param initiator The initiator of the loan.\r\n    * @param token The loan currency.\r\n    * @param amount The amount of tokens lent.\r\n    * @param fee The additional amount of tokens to repay.\r\n    * @param data Arbitrary data structure, intended to contain user-defined parameters.\r\n    * @return The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\"\r\n    */\r\n  function onFlashLoan(\r\n      address initiator,\r\n      address token,\r\n      uint256 amount,\r\n      uint256 fee,\r\n      bytes calldata data\r\n  ) external returns (bytes32);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC3156FlashLender.sol\r\n\r\npragma solidity ^0.8.0;\r\ninterface IERC3156FlashLender {\r\n  /**\r\n    * @dev The amount of currency available to be lent.\r\n    * @param token The loan currency.\r\n    * @return The amount of `token` that can be borrowed.\r\n    */\r\n  function maxFlashLoan(\r\n      address token\r\n  ) external view returns (uint256);\r\n\r\n  /**\r\n    * @dev The fee to be charged for a given loan.\r\n    * @param token The loan currency.\r\n    * @param amount The amount of tokens lent.\r\n    * @return The amount of `token` to be charged for the loan, on top of the returned principal.\r\n    */\r\n  function flashFee(\r\n      address token,\r\n      uint256 amount\r\n  ) external view returns (uint256);\r\n\r\n  /**\r\n    * @dev Initiate a flash loan.\r\n    * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\r\n    * @param token The loan currency.\r\n    * @param amount The amount of tokens lent.\r\n    * @param data Arbitrary data structure, intended to contain user-defined parameters.\r\n    */\r\n  function flashLoan(\r\n      IERC3156FlashBorrower receiver,\r\n      address token,\r\n      uint256 amount,\r\n      bytes calldata data\r\n  ) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IWETH.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n    function withdraw(uint256 wad) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IEtherWrapper.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IEtherWrapper {\r\n    function capacity() external view returns (uint256);\r\n    function getReserves() external view returns (uint256);\r\n    function calculateMintFee(uint amount) external view returns (uint);\r\n    function calculateBurnFee(uint amount) external view returns (uint);\r\n\r\n    function mint(uint amount) external;\r\n    function burn(uint amount) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/ICurve.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ICurve {\r\n    function get_dy(uint256 i, uint256 j, uint256 dx) external view returns (uint256);\r\n    function balances(uint256 idx) external view returns (uint256);\r\n    function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy) external payable;\r\n}\r\n\r\n\r\n// File contracts/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/utils/Address.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) - value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utils/Ownable.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n * @author crypto-pumpkin\r\n *\r\n * By initialization, the owner account will be the one that called initializeOwner. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Arb.sol\r\n\r\npragma solidity ^0.8.0;\r\ncontract Arb is Ownable {\r\n  using SafeERC20 for IERC20;\r\n\r\n  IERC3156FlashLender public constant flashLender = IERC3156FlashLender(0x6bdC1FCB2F13d1bA9D26ccEc3983d5D4bf318693);\r\n  IERC20 public constant weth = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n  IERC20 public constant seth = IERC20(0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb);\r\n  ICurve public constant curvePool = ICurve(0xc5424B857f758E906013F3555Dad202e4bdB4567);\r\n\r\n  uint256 wethIndex = 0;\r\n  uint256 sethIndex = 1;\r\n\r\n  struct FlashloanData {\r\n    bool isMintSeth;\r\n    address caller;\r\n    address target;\r\n    uint256 minProfit;\r\n  }\r\n\r\n  function onFlashLoan(address initiator, address token, uint256 amount, uint256 fee, bytes calldata data) external returns (bytes32) {\r\n    FlashloanData memory flashData = abi.decode(data, (FlashloanData));\r\n    require(msg.sender == address(flashLender), \"Untrusted lender\");\r\n    require(token == address(weth), \"Not WETH\");\r\n    require(initiator == address(this), \"Untrusted loan initiator\");\r\n    uint256 amountOwed = amount + fee;\r\n  \r\n    // Steps 1-3:\r\n    uint256 wethBal;\r\n    if (flashData.isMintSeth) {\r\n      wethBal = _swapSethForETH(flashData.target, amount);\r\n    } else {\r\n      wethBal = _swapEthForSeth(flashData.target, amount);\r\n    }\r\n\r\n    // Step 4: Ensure profit\r\n    require(wethBal > amountOwed + flashData.minProfit, \"Less than minProfit\");\r\n    weth.safeTransfer(flashData.caller, wethBal - amountOwed);\r\n    return keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\r\n  }\r\n\r\n  function arb(address _sip112Address, uint256 _percentToUse, uint256 _minProfit) external onlyOwner {\r\n    require(_percentToUse <= 100, \"percent > 100\");\r\n    (bool isMintSeth, uint256 amountToFlash, uint256 wethReturned) = calculateOpportunity(_sip112Address, _percentToUse);\r\n    require(wethReturned >= amountToFlash + _minProfit, \"not enough profit!\");\r\n\r\n    bytes memory data = abi.encode(FlashloanData({\r\n      isMintSeth: isMintSeth,\r\n      caller: msg.sender,\r\n      target: _sip112Address,\r\n      minProfit: _minProfit\r\n    }));\r\n    uint256 _fee = flashLender.flashFee(address(weth), amountToFlash);\r\n    uint256 _repayment = amountToFlash + _fee;\r\n    _approve(weth, address(flashLender), _repayment);\r\n    flashLender.flashLoan(IERC3156FlashBorrower(address(this)), address(weth), amountToFlash, data);\r\n  }\r\n\r\n  function calculateOpportunity(address _sip112Address, uint256 _percentToUse)\r\n    public view\r\n    returns (bool isMintSeth, uint256 amountToFlash, uint256 wethReturned)\r\n  {\r\n    uint256 maxFlashLoan = flashLender.maxFlashLoan(address(weth));\r\n    uint256 curveWethBal = curvePool.balances(wethIndex);\r\n    uint256 curveSethBal = curvePool.balances(sethIndex);\r\n    if (curveWethBal > curveSethBal) {\r\n      isMintSeth = true;\r\n      uint256 capacity = IEtherWrapper(_sip112Address).capacity();\r\n      uint256 adjustedCapacityToUse = capacity * _percentToUse / 100;\r\n      amountToFlash = adjustedCapacityToUse > maxFlashLoan ? maxFlashLoan : adjustedCapacityToUse;\r\n      uint256 mintFee = IEtherWrapper(_sip112Address).calculateMintFee(amountToFlash);\r\n      uint256 sethBal = amountToFlash - mintFee;\r\n      if (sethBal > 0) {\r\n        wethReturned = curvePool.get_dy(sethIndex, wethIndex, sethBal);\r\n      }\r\n    } else {\r\n      isMintSeth = false;\r\n      uint256 reserves = IEtherWrapper(_sip112Address).getReserves();\r\n      uint256 adjustedPercentToUse = _percentToUse > 96 ? 96 : _percentToUse;\r\n      uint256 adjustedReserveToUse = reserves * adjustedPercentToUse / 100;\r\n      amountToFlash = adjustedReserveToUse > maxFlashLoan ? maxFlashLoan : amountToFlash;\r\n      if (amountToFlash > 0) {\r\n        uint256 sethBal = curvePool.get_dy(wethIndex, sethIndex, amountToFlash);\r\n        uint256 burnFee = IEtherWrapper(_sip112Address).calculateBurnFee(sethBal);\r\n        wethReturned = sethBal - burnFee;\r\n      }\r\n    }\r\n  }\r\n\r\n  function _approve(IERC20 _token, address _spender, uint256 _amount) internal {\r\n    if (_token.allowance(address(this), _spender) < _amount) {\r\n        _token.safeApprove(_spender, type(uint256).max);\r\n    }\r\n  }\r\n\r\n  /// @notice mint SETH with WETH, sell SETH for ETH on Curve, wrap ETH for WETH, return flash loaned WETH\r\n  function _swapSethForETH(address target, uint256 amount) internal returns(uint256 wethBal) {\r\n    // Step 1: Mint sETH with WETH\r\n    _approve(weth, target, amount);\r\n    IEtherWrapper(target).mint(amount);\r\n    uint256 sethBal = seth.balanceOf(address(this));\r\n\r\n    // Step 2: Swap sETH to ETH\r\n    _approve(seth, address(curvePool), sethBal);\r\n    curvePool.exchange(sethIndex, wethIndex, sethBal, 0);\r\n    uint256 ethBal = address(this).balance;\r\n\r\n    // Step 3: Wrap ETH into WETH\r\n    IWETH(address(weth)).deposit{value: ethBal}();\r\n    wethBal = weth.balanceOf(address(this));\r\n  }\r\n\r\n  /// @notice unwrap WETH into ETH, swap ETH for sETH on Curve, burn sETH for WETH< return flash loaned WETH\r\n  function _swapEthForSeth(address target, uint256 amount) internal returns(uint256 wethBal) {\r\n    // Step 1: Unwrap WETH into ETH\r\n    _approve(weth, address(weth), amount);\r\n    IWETH(address(weth)).withdraw(amount);\r\n    uint256 ethBal = address(this).balance;\r\n    \r\n    // Step 2: Swap ETH for sETH\r\n    curvePool.exchange{value: ethBal}(wethIndex, sethIndex, ethBal, 0);\r\n    uint256 sethBal = seth.balanceOf(address(this));\r\n\r\n    // Step 3: Burn sETH for WETH\r\n    _approve(seth, target, sethBal);\r\n    IEtherWrapper(target).burn(sethBal);\r\n    wethBal = weth.balanceOf(address(this));\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sip112Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentToUse\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minProfit\",\"type\":\"uint256\"}],\"name\":\"arb\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sip112Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percentToUse\",\"type\":\"uint256\"}],\"name\":\"calculateOpportunity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isMintSeth\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountToFlash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethReturned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curvePool\",\"outputs\":[{\"internalType\":\"contract ICurve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLender\",\"outputs\":[{\"internalType\":\"contract IERC3156FlashLender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seth\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Arb","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3e27d0ad11ee55e3615c21e148dea2219858abac89fdc942344e70d55f5647fa"}]}