{"status":"1","message":"OK","result":[{"SourceCode":"{\"HoldefiRead.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IHoldefi {\\r\\n\\r\\n\\tstruct Market {\\r\\n\\t\\tuint256 totalSupply;\\r\\n\\r\\n\\t\\tuint256 supplyIndex;\\r\\n\\t\\tuint256 supplyIndexUpdateTime;\\r\\n\\r\\n\\t\\tuint256 totalBorrow;\\r\\n\\r\\n\\t\\tuint256 borrowIndex;\\r\\n\\t\\tuint256 borrowIndexUpdateTime;\\r\\n\\r\\n\\t\\tuint256 promotionReserveScaled;\\r\\n\\t\\tuint256 promotionReserveLastUpdateTime;\\r\\n\\r\\n\\t\\tuint256 promotionDebtScaled;\\r\\n\\t\\tuint256 promotionDebtLastUpdateTime;\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\tstruct Collateral {\\r\\n\\t\\tuint256 totalCollateral;\\r\\n\\t\\tuint256 totalLiquidatedCollateral;\\r\\n\\t}\\r\\n\\r\\n\\tfunction marketAssets(address market) external view returns(Market memory);\\r\\n\\tfunction collateralAssets(address collateral) external view returns(Collateral memory);\\r\\n\\r\\n\\tfunction getAccountSupply(address account, address market)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (uint256 balance, uint256 interest, uint256 currentSupplyIndex);\\r\\n\\r\\n\\tfunction getAccountBorrow(address account, address market, address collateral)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (uint256 balance, uint256 interest, uint256 currentBorrowIndex);\\r\\n\\r\\n\\tfunction getAccountCollateral(address account, address collateral)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (\\r\\n\\t\\t\\tuint256 balance,\\r\\n\\t\\t\\tuint256 timeSinceLastActivity,\\r\\n\\t\\t\\tuint256 borrowPowerValue,\\r\\n\\t\\t\\tuint256 totalBorrowValue,\\r\\n\\t\\t\\tbool underCollateral\\r\\n\\t\\t);\\r\\n\\r\\n\\tfunction getCurrentSupplyIndex (address market)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (\\r\\n\\t\\t\\tuint256 supplyIndex,\\r\\n\\t\\t\\tuint256 supplyRate,\\r\\n\\t\\t\\tuint256 currentTime\\r\\n\\t\\t);\\r\\n\\r\\n\\tfunction getCurrentBorrowIndex (address market)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (\\r\\n\\t\\t\\tuint256 borrowIndex,\\r\\n\\t\\t\\tuint256 borrowRate,\\r\\n\\t\\t\\tuint256 currentTime\\r\\n\\t\\t);\\r\\n\\r\\n\\tfunction marketDebt (address collateral, address market)\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns(\\r\\n\\t\\t\\tuint256 debt\\r\\n\\t\\t);\\r\\n\\r\\n\\tfunction isPaused(string memory operation) external view returns (bool res);\\r\\n}\\r\\n\\r\\ninterface IHoldefiSettings {\\r\\n\\r\\n\\tstruct MarketSettings {\\r\\n\\t\\tbool isExist;\\r\\n\\t\\tbool isActive;      \\r\\n\\r\\n\\t\\tuint256 borrowRate;\\r\\n\\t\\tuint256 borrowRateUpdateTime;\\r\\n\\r\\n\\t\\tuint256 suppliersShareRate;\\r\\n\\t\\tuint256 suppliersShareRateUpdateTime;\\r\\n\\r\\n\\t\\tuint256 promotionRate;\\r\\n\\t}\\r\\n\\r\\n\\tstruct CollateralSettings {\\r\\n\\t\\tbool isExist;\\r\\n\\t\\tbool isActive;    \\r\\n\\r\\n\\t\\tuint256 valueToLoanRate; \\r\\n\\t\\tuint256 VTLUpdateTime;\\r\\n\\r\\n\\t\\tuint256 penaltyRate;\\r\\n\\t\\tuint256 penaltyUpdateTime;\\r\\n\\r\\n\\t\\tuint256 bonusRate;\\r\\n\\t}\\r\\n\\r\\n\\tfunction marketAssets(address market) external view returns(MarketSettings memory);\\r\\n\\tfunction collateralAssets(address collateral) external view returns(CollateralSettings memory);\\r\\n}\\r\\n\\r\\n\\r\\ninterface IHoldefiPrices {\\r\\n\\tfunction getPrice(address asset) external view returns (uint256 price, uint256 priceDecimals);\\r\\n}\\r\\n\\r\\n\\r\\ncontract HoldefiRead {\\r\\n\\r\\n\\taddress constant public ethAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n\\r\\n\\tstring[8] private operationsList = [\\r\\n\\t\\t\\\"supply\\\",\\r\\n\\t\\t\\\"withdrawSupply\\\",\\r\\n\\t\\t\\\"collateralize\\\",\\r\\n\\t\\t\\\"withdrawCollateral\\\",\\r\\n\\t\\t\\\"borrow\\\",\\r\\n\\t\\t\\\"repayBorrow\\\",\\r\\n\\t\\t\\\"liquidateBorrowerCollateral\\\",\\r\\n\\t\\t\\\"buyLiquidatedCollateral\\\"\\r\\n\\t];\\r\\n\\r\\n\\tstruct AccountMarketData {\\r\\n\\t\\taddress market;\\r\\n\\t\\tuint256 balance;\\r\\n\\t\\tuint256 interest;\\r\\n\\t\\tuint256 index;\\r\\n\\t}\\r\\n\\r\\n\\tstruct AccountCollateralData {\\r\\n\\t\\taddress collateral;\\r\\n\\t\\tuint256 balance;\\r\\n\\t\\tuint256 timeSinceLastActivity;\\r\\n\\t\\tuint256 borrowPowerValue;\\r\\n\\t\\tuint256 totalBorrowValue;\\r\\n\\t\\tbool underCollateral;\\r\\n\\r\\n\\t\\tAccountMarketData[] userBorrows;\\r\\n\\t}\\r\\n\\r\\n\\tstruct AccountAssetData {\\r\\n\\t\\taddress asset;\\r\\n\\t\\tuint256 walletBalance;\\r\\n\\t\\tuint256 allowance;\\r\\n\\t\\tuint256 price;\\r\\n\\t\\tuint256 priceDecimals;\\r\\n\\t}\\r\\n\\r\\n\\tstruct MarketData {\\r\\n\\t\\taddress market;\\r\\n\\r\\n\\t\\tbool isExist;\\r\\n\\t\\tbool isActive;      \\r\\n\\r\\n\\t\\tuint256 borrowRate;\\r\\n\\t\\tuint256 supplyRate;\\r\\n\\r\\n\\t\\tuint256 suppliersShareRate;\\r\\n\\t\\tuint256 promotionRate;\\r\\n\\r\\n\\t\\tuint256 totalSupply;\\r\\n\\t\\tuint256 totalBorrow;\\r\\n\\r\\n\\t\\tuint256 supplyIndex;\\r\\n\\t\\tuint256 borrowIndex;\\r\\n\\r\\n\\t\\tuint256 price;\\r\\n\\t\\tuint256 priceDecimals;\\r\\n\\t}\\r\\n\\r\\n\\tstruct CollateralData {\\r\\n\\t\\taddress collateral;\\r\\n\\r\\n\\t\\tbool isExist;\\r\\n\\t\\tbool isActive;    \\r\\n\\r\\n\\t\\tuint256 valueToLoanRate; \\r\\n\\t\\tuint256 penaltyRate;\\r\\n\\t\\tuint256 bonusRate;\\r\\n\\r\\n\\t\\tuint256 totalCollateral;\\r\\n\\t\\tuint256 totalLiquidatedCollateral;\\r\\n\\r\\n\\t\\tMarketDebtData[] marketDebt;\\r\\n\\r\\n\\t\\tuint256 price;\\r\\n\\t\\tuint256 priceDecimals;\\r\\n\\t}\\r\\n\\r\\n\\tstruct OperationPauseStatus {\\r\\n\\t\\tstring operation;\\r\\n\\t\\tbool pauseStatus;\\r\\n\\t}\\r\\n\\r\\n\\tstruct MarketDebtData {\\r\\n\\t\\taddress market;\\r\\n\\t\\tuint256 debt;\\r\\n\\t}\\r\\n\\r\\n\\tIHoldefi public holdefi;\\r\\n\\r\\n\\tIHoldefiSettings public holdefiSettings;\\r\\n\\r\\n\\tIHoldefiPrices public holdefiPrices;\\r\\n\\r\\n\\r\\n\\tconstructor(\\r\\n\\t\\tIHoldefi holdefiAddress,\\r\\n\\t\\tIHoldefiSettings holdefiSettingsAddress,\\r\\n\\t\\tIHoldefiPrices holdefiPricesAddress\\r\\n\\t)\\r\\n\\t\\tpublic\\r\\n\\t{\\r\\n\\t\\tholdefi = holdefiAddress;\\r\\n\\t\\tholdefiSettings = holdefiSettingsAddress;\\r\\n\\t\\tholdefiPrices = holdefiPricesAddress;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getWalletBalance(address account, address asset) public view returns (uint256 res) {\\r\\n\\t\\tif (asset == ethAddress) {\\r\\n\\t\\t\\tres = account.balance;\\r\\n\\t\\t}\\r\\n\\t\\telse {\\r\\n\\t\\t\\tIERC20 token = IERC20(asset);\\r\\n\\t\\t\\tres = token.balanceOf(account);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction getWalletAllowance(address account, address asset) public view returns (uint256 res) {\\r\\n\\t\\tif (asset != ethAddress) {\\r\\n\\t\\t\\tIERC20 token = IERC20(asset);\\r\\n\\t\\t\\tres = token.allowance(account, address(holdefi));\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\tfunction getUserData(address userAddress, address[] memory marketList, address[] memory collateralList)\\r\\n\\t\\tpublic\\r\\n\\t\\tview\\r\\n\\t\\treturns(\\r\\n\\t\\t\\tAccountMarketData[] memory userSupplies,\\r\\n\\t\\t\\tAccountCollateralData[] memory userCollaterals,\\r\\n\\t\\t\\tAccountAssetData[] memory userAssets\\r\\n\\t\\t)\\r\\n\\t{\\r\\n\\t\\tuserSupplies = new AccountMarketData[](marketList.length);\\r\\n\\t\\tuserCollaterals = new AccountCollateralData[](collateralList.length);\\r\\n\\t\\taddress[] memory assets = new address[](marketList.length + collateralList.length);\\r\\n\\r\\n\\t\\tbool isExist;\\r\\n\\t\\tuint256 index;\\r\\n\\t\\tuint256 i;\\r\\n\\t\\tuint256 j;\\r\\n\\t\\tfor (i = 0 ; i \\u003c collateralList.length ; i++) {\\r\\n\\t\\t\\tisExist = false;\\r\\n\\t\\t\\tuserCollaterals[i].collateral = collateralList[i];\\r\\n\\t\\t\\t(\\r\\n\\t\\t\\t\\tuserCollaterals[i].balance,\\r\\n\\t\\t\\t\\tuserCollaterals[i].timeSinceLastActivity,\\r\\n\\t\\t\\t\\tuserCollaterals[i].borrowPowerValue,\\r\\n\\t\\t\\t\\tuserCollaterals[i].totalBorrowValue,\\r\\n\\t\\t\\t\\tuserCollaterals[i].underCollateral\\r\\n\\t\\t\\t) = holdefi.getAccountCollateral(userAddress, collateralList[i]);\\r\\n\\t\\t\\tuserCollaterals[i].userBorrows = new AccountMarketData[](marketList.length);\\r\\n\\t\\t\\tfor (j = 0 ; j \\u003c marketList.length ; j++) {\\r\\n\\t\\t\\t\\tif (i == 0) {\\r\\n\\t\\t\\t\\t\\tuserSupplies[j].market = marketList[j];\\r\\n\\t\\t\\t\\t\\t(\\r\\n\\t\\t\\t\\t\\t\\tuserSupplies[j].balance,\\r\\n\\t\\t\\t\\t\\t\\tuserSupplies[j].interest,\\r\\n\\t\\t\\t\\t\\t\\tuserSupplies[j].index\\r\\n\\t\\t\\t\\t\\t) = holdefi.getAccountSupply(userAddress, marketList[j]);\\r\\n\\r\\n\\t\\t\\t\\t\\tassets[j] = marketList[j];\\r\\n\\t\\t\\t\\t\\tindex = j + 1;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\tif (collateralList[i] == marketList[j]) {\\r\\n\\t\\t\\t\\t\\tisExist = true;\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tuserCollaterals[i].userBorrows[j].market = marketList[j];\\r\\n\\t\\t\\t\\t(\\r\\n\\t\\t\\t\\t\\tuserCollaterals[i].userBorrows[j].balance,\\r\\n\\t\\t\\t\\t\\tuserCollaterals[i].userBorrows[j].interest,\\r\\n\\t\\t\\t\\t\\tuserCollaterals[i].userBorrows[j].index\\r\\n\\t\\t\\t\\t) = holdefi.getAccountBorrow(userAddress, marketList[j], collateralList[i]);\\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (!isExist) {\\r\\n\\t\\t\\t\\tassets[index] = collateralList[i];\\r\\n\\t\\t\\t\\tindex = index + 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuserAssets = new AccountAssetData[](index);\\r\\n\\t\\tfor (i = 0 ; i \\u003c index ; i++) {\\r\\n\\t\\t\\tuserAssets[i].asset = assets[i];\\r\\n\\t\\t\\t(userAssets[i].price, userAssets[i].priceDecimals) = holdefiPrices.getPrice(assets[i]);\\r\\n\\t\\t\\tuserAssets[i].walletBalance = getWalletBalance(userAddress, assets[i]);\\r\\n\\t\\t\\tuserAssets[i].allowance = getWalletAllowance(userAddress, assets[i]);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\tfunction getProtocolData(address[] memory marketList, address[] memory collateralList)\\r\\n\\t\\tpublic\\r\\n\\t\\tview\\r\\n\\t\\treturns(\\r\\n\\t\\t\\tMarketData[] memory markets,\\r\\n\\t\\t\\tCollateralData[] memory collaterals, \\r\\n\\t\\t\\tOperationPauseStatus[8] memory operations\\r\\n\\t\\t)\\r\\n\\t{\\r\\n\\r\\n\\t\\tmarkets = new MarketData[](marketList.length);\\r\\n\\t\\tcollaterals = new CollateralData[](collateralList.length);\\r\\n\\r\\n\\t\\tuint256 i;\\r\\n\\t\\tuint256 j;\\r\\n\\t\\tfor (i = 0 ; i \\u003c marketList.length ; i++) {\\r\\n\\t\\t\\tIHoldefi.Market memory holdefiMarket = holdefi.marketAssets(marketList[i]);\\r\\n\\r\\n\\t\\t\\tmarkets[i].market = marketList[i];\\r\\n\\t\\t\\tmarkets[i].totalSupply = holdefiMarket.totalSupply;\\r\\n\\t\\t\\tmarkets[i].totalBorrow = holdefiMarket.totalBorrow;\\r\\n\\r\\n\\t\\t\\t(\\r\\n\\t\\t\\t\\tmarkets[i].supplyIndex,\\r\\n\\t\\t\\t\\tmarkets[i].supplyRate,\\r\\n\\t\\t\\t) = holdefi.getCurrentSupplyIndex(marketList[i]);\\r\\n\\r\\n\\r\\n\\t\\t\\t(\\r\\n\\t\\t\\t\\tmarkets[i].borrowIndex,\\r\\n\\t\\t\\t\\tmarkets[i].borrowRate,\\r\\n\\t\\t\\t) = holdefi.getCurrentBorrowIndex(marketList[i]);\\r\\n\\r\\n\\r\\n\\t\\t\\tIHoldefiSettings.MarketSettings memory holdefiSettingsMarket = holdefiSettings.marketAssets(marketList[i]);\\r\\n\\t\\t\\tmarkets[i].isExist = holdefiSettingsMarket.isExist;\\r\\n\\t\\t\\tmarkets[i].isActive = holdefiSettingsMarket.isActive;\\r\\n\\t\\t\\tmarkets[i].suppliersShareRate = holdefiSettingsMarket.suppliersShareRate;\\r\\n\\t\\t\\tmarkets[i].promotionRate = holdefiSettingsMarket.promotionRate;\\r\\n\\r\\n\\t\\t\\t(markets[i].price, markets[i].priceDecimals) = holdefiPrices.getPrice(marketList[i]);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (i = 0 ; i \\u003c collateralList.length ; i++) {\\r\\n\\t\\t\\tIHoldefi.Collateral memory holdefiCollateral = holdefi.collateralAssets(collateralList[i]);\\r\\n\\t\\t\\tcollaterals[i].collateral = collateralList[i];\\r\\n\\t\\t\\tcollaterals[i].totalCollateral = holdefiCollateral.totalCollateral;\\r\\n\\t\\t\\tcollaterals[i].totalLiquidatedCollateral = holdefiCollateral.totalLiquidatedCollateral;\\r\\n\\r\\n\\t\\t\\tIHoldefiSettings.CollateralSettings memory holdefiSettingsCollateral = holdefiSettings.collateralAssets(collateralList[i]);\\r\\n\\t\\t\\tcollaterals[i].isExist = holdefiSettingsCollateral.isExist;\\r\\n\\t\\t\\tcollaterals[i].isActive = holdefiSettingsCollateral.isActive;\\r\\n\\t\\t\\tcollaterals[i].valueToLoanRate = holdefiSettingsCollateral.valueToLoanRate;\\r\\n\\t\\t\\tcollaterals[i].penaltyRate = holdefiSettingsCollateral.penaltyRate;\\r\\n\\t\\t\\tcollaterals[i].bonusRate = holdefiSettingsCollateral.bonusRate;\\r\\n\\r\\n\\t\\t\\t(collaterals[i].price, collaterals[i].priceDecimals) = holdefiPrices.getPrice(collateralList[i]);\\r\\n\\r\\n\\t\\t\\tcollaterals[i].marketDebt = new MarketDebtData[](marketList.length);\\r\\n\\t\\t\\tfor (j = 0 ; j \\u003c marketList.length ; j++) {\\r\\n\\t\\t\\t\\tcollaterals[i].marketDebt[j].market = marketList[j];\\r\\n\\t\\t\\t\\tcollaterals[i].marketDebt[j].debt = holdefi.marketDebt(collateralList[i], marketList[j]);\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tfor (i = 0 ; i \\u003c operationsList.length ; i++) {\\r\\n\\t\\t\\toperations[i].operation = operationsList[i];\\r\\n\\t\\t\\toperations[i].pauseStatus = holdefi.isPaused(operationsList[i]);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\tfunction getUserProtocolData(address userAddress, address[] memory marketList, address[] memory collateralList)\\r\\n\\t\\tpublic\\r\\n\\t\\tview\\r\\n\\t\\treturns(\\r\\n\\t\\t\\tAccountMarketData[] memory userSupplies,\\r\\n\\t\\t\\tAccountCollateralData[] memory userCollaterals,\\r\\n\\t\\t\\tAccountAssetData[] memory userAssets,\\r\\n\\t\\t\\tMarketData[] memory markets,\\r\\n\\t\\t\\tCollateralData[] memory collaterals,\\r\\n\\t\\t\\tOperationPauseStatus[8] memory operations\\r\\n\\t\\t)\\r\\n\\t{\\r\\n\\t\\t(userSupplies, userCollaterals, userAssets) = getUserData(userAddress, marketList, collateralList);\\r\\n\\t\\t(markets, collaterals, operations) = getProtocolData(marketList, collateralList);\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\tfunction getUserAssetsData(address userAddress, address[] memory marketList, address[] memory collateralList)\\r\\n\\t\\tpublic\\r\\n\\t\\tview\\r\\n\\t\\treturns(\\r\\n\\t\\t\\tAccountAssetData[] memory userAssets\\r\\n\\t\\t)\\r\\n\\t{\\r\\n\\t\\taddress[] memory assets = new address[](marketList.length + collateralList.length);\\r\\n\\r\\n\\t\\tbool isExist;\\r\\n\\t\\tuint256 index;\\r\\n\\t\\tuint256 i;\\r\\n\\t\\tuint256 j;\\r\\n\\t\\tfor (i = 0 ; i \\u003c collateralList.length ; i++) {\\r\\n\\t\\t\\tisExist = false;\\r\\n\\t\\t\\tfor (j = 0 ; j \\u003c marketList.length ; j++) {\\r\\n\\t\\t\\t\\tif (i == 0) {\\r\\n\\t\\t\\t\\t\\tassets[j] = marketList[j];\\r\\n\\t\\t\\t\\t\\tindex = j + 1;\\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t\\tif (collateralList[i] == marketList[j]) {\\r\\n\\t\\t\\t\\t\\tisExist = true;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\tif (!isExist) {\\r\\n\\t\\t\\t\\tassets[index] = collateralList[i];\\r\\n\\t\\t\\t\\tindex = index + 1;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuserAssets = new AccountAssetData[](index);\\r\\n\\t\\tfor (i = 0 ; i \\u003c index ; i++) {\\r\\n\\t\\t\\tuserAssets[i].asset = assets[i];\\r\\n\\t\\t\\t(userAssets[i].price, userAssets[i].priceDecimals) = holdefiPrices.getPrice(assets[i]);\\r\\n\\t\\t\\tuserAssets[i].walletBalance = getWalletBalance(userAddress, assets[i]);\\r\\n\\t\\t\\tuserAssets[i].allowance = getWalletAllowance(userAddress, assets[i]);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IHoldefi\",\"name\":\"holdefiAddress\",\"type\":\"address\"},{\"internalType\":\"contract IHoldefiSettings\",\"name\":\"holdefiSettingsAddress\",\"type\":\"address\"},{\"internalType\":\"contract IHoldefiPrices\",\"name\":\"holdefiPricesAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ethAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"marketList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"collateralList\",\"type\":\"address[]\"}],\"name\":\"getProtocolData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"suppliersShareRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"promotionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceDecimals\",\"type\":\"uint256\"}],\"internalType\":\"struct HoldefiRead.MarketData[]\",\"name\":\"markets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"valueToLoanRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquidatedCollateral\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"internalType\":\"struct HoldefiRead.MarketDebtData[]\",\"name\":\"marketDebt\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceDecimals\",\"type\":\"uint256\"}],\"internalType\":\"struct HoldefiRead.CollateralData[]\",\"name\":\"collaterals\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"pauseStatus\",\"type\":\"bool\"}],\"internalType\":\"struct HoldefiRead.OperationPauseStatus[8]\",\"name\":\"operations\",\"type\":\"tuple[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"marketList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"collateralList\",\"type\":\"address[]\"}],\"name\":\"getUserAssetsData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceDecimals\",\"type\":\"uint256\"}],\"internalType\":\"struct HoldefiRead.AccountAssetData[]\",\"name\":\"userAssets\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"marketList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"collateralList\",\"type\":\"address[]\"}],\"name\":\"getUserData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct HoldefiRead.AccountMarketData[]\",\"name\":\"userSupplies\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeSinceLastActivity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowPowerValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowValue\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"underCollateral\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct HoldefiRead.AccountMarketData[]\",\"name\":\"userBorrows\",\"type\":\"tuple[]\"}],\"internalType\":\"struct HoldefiRead.AccountCollateralData[]\",\"name\":\"userCollaterals\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceDecimals\",\"type\":\"uint256\"}],\"internalType\":\"struct HoldefiRead.AccountAssetData[]\",\"name\":\"userAssets\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"marketList\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"collateralList\",\"type\":\"address[]\"}],\"name\":\"getUserProtocolData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct HoldefiRead.AccountMarketData[]\",\"name\":\"userSupplies\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeSinceLastActivity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowPowerValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowValue\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"underCollateral\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct HoldefiRead.AccountMarketData[]\",\"name\":\"userBorrows\",\"type\":\"tuple[]\"}],\"internalType\":\"struct HoldefiRead.AccountCollateralData[]\",\"name\":\"userCollaterals\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"walletBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceDecimals\",\"type\":\"uint256\"}],\"internalType\":\"struct HoldefiRead.AccountAssetData[]\",\"name\":\"userAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"suppliersShareRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"promotionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceDecimals\",\"type\":\"uint256\"}],\"internalType\":\"struct HoldefiRead.MarketData[]\",\"name\":\"markets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"valueToLoanRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penaltyRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLiquidatedCollateral\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"internalType\":\"struct HoldefiRead.MarketDebtData[]\",\"name\":\"marketDebt\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceDecimals\",\"type\":\"uint256\"}],\"internalType\":\"struct HoldefiRead.CollateralData[]\",\"name\":\"collaterals\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"operation\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"pauseStatus\",\"type\":\"bool\"}],\"internalType\":\"struct HoldefiRead.OperationPauseStatus[8]\",\"name\":\"operations\",\"type\":\"tuple[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getWalletAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getWalletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdefi\",\"outputs\":[{\"internalType\":\"contract IHoldefi\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdefiPrices\",\"outputs\":[{\"internalType\":\"contract IHoldefiPrices\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdefiSettings\",\"outputs\":[{\"internalType\":\"contract IHoldefiSettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"HoldefiRead","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008a7c51c654752a68964961749d9b1b63b6e464f400000000000000000000000008aa43bd095716303708a05bdc3ca90360116d67000000000000000000000000a690abb15a45f38acd10600ae82f9f238b1e589c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8610680f854fe70af634a8ec6630f7d5a1ac8c1d0ca88bc73ad1f1a6b2d6a021"}]}