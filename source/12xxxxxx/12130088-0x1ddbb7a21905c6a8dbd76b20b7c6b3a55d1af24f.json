{"status":"1","message":"OK","result":[{"SourceCode":"\"\"\"\r\n@title Greenwood Registry\r\n@notice A storage contract for Greenwood Protocol contract addresses\r\n@author Greenwood Labs\r\n\"\"\"\r\n\r\n# define the events used by the contract\r\nevent SetAddress:\r\n    previousAddress: address\r\n    newAddress: address\r\n    contractName: String[20]\r\n    version: String[11]\r\n    governance: address\r\n    blockNumber: uint256\r\n\r\nevent SetGovernance:\r\n    previousGovernance: address\r\n    newGovernance: address\r\n    blockNumber: uint256\r\n\r\n# define the storage variables used by the contract\r\ngovernance: public(address)\r\nversions: public(HashMap[String[11], HashMap[String[20], address]])\r\n\r\n@external\r\ndef __init__(_governance: address):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _governance The address of the Greenwood governance\r\n    \"\"\"\r\n\r\n    # set the address of the Governance\r\n    self.governance = _governance\r\n\r\n@internal\r\ndef isGovernance(_caller: address, _role: String[20]) -> bool:\r\n    \"\"\"\r\n    @notice Method for role-based security\r\n    @param _caller The address that called the permissioned method\r\n    @param _role The requested authorization level\r\n    @return True if the caller is the Governance, False otherwise\r\n    \"\"\"\r\n\r\n    # check if the requested role is \"governance\"\r\n    if keccak256(_role) == keccak256(\"governance\"):\r\n\r\n        # return the equality comparison\r\n        return self.governance == _caller\r\n\r\n    # catch extraneous role arguments\r\n    else:\r\n\r\n        # revert\r\n        raise \"Unhandled role argument\"\r\n        \r\n@external\r\ndef getAddress(_contract: String[20], _version: String[11]) -> address:\r\n    \"\"\"\r\n    @notice Gets the address of a specified Greenwood contract\r\n    @param _contract The name of the contract\r\n    @param _version The version of the Greenwood Protocol that the contract belongs to\r\n    @return An address\r\n    \"\"\"\r\n\r\n    # get the address for the specified contract from storage and return it\r\n    return self.versions[_version][_contract]\r\n\r\n@external\r\ndef setAddress(_contract: String[20], _address: address, _version: String[11],):\r\n    \"\"\"\r\n    @notice Stores the address of a specified Greenwood contract\r\n    @param _contract The name of the contract that is being stored\r\n    @param _address The address of the contract that is being stored\r\n    @param _version The version of the Greenwood Protocol that the contract belongs to\r\n    @dev Only the Governance can call this method\r\n    \"\"\"\r\n\r\n    # require that the method caller is the governance\r\n    assert self.isGovernance(msg.sender, \"governance\") == True, \"Only Governance can call this method\"\r\n\r\n    # get the previous address for the contract\r\n    previousAddress: address = self.versions[_version][_contract]\r\n\r\n    # set the contract name and adddress for the specified version\r\n    self.versions[_version][_contract] = _address\r\n\r\n    # emit a SetAddress event\r\n    log SetAddress(previousAddress, _address, _contract, _version, msg.sender, block.number) \r\n\r\n@external\r\ndef setGovernance(_new_governance: address):\r\n    \"\"\"\r\n    @notice Updates the address of the Governance\r\n    @param _new_governance The address of the new GReenwood governance\r\n    @dev Only the Governance can call this method\r\n    \"\"\"\r\n\r\n    # require that msg.sender is the current Governance\r\n    assert self.isGovernance(msg.sender, \"governance\") == True, \"Only Governance can call this method\"\r\n\r\n    # get the previous Governance \r\n    previousGovernance: address = self.governance\r\n\r\n    # set the Registry Governance to be the value of _new_governance\r\n    self.governance = _new_governance\r\n\r\n    # emit a SetGovernance event\r\n    log SetGovernance(previousGovernance, _new_governance, block.number)","ABI":"[{\"name\":\"SetAddress\",\"inputs\":[{\"type\":\"address\",\"name\":\"previousAddress\",\"indexed\":false},{\"type\":\"address\",\"name\":\"newAddress\",\"indexed\":false},{\"type\":\"string\",\"name\":\"contractName\",\"indexed\":false},{\"type\":\"string\",\"name\":\"version\",\"indexed\":false},{\"type\":\"address\",\"name\":\"governance\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"blockNumber\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetGovernance\",\"inputs\":[{\"type\":\"address\",\"name\":\"previousGovernance\",\"indexed\":false},{\"type\":\"address\",\"name\":\"newGovernance\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"blockNumber\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_governance\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"getAddress\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[{\"type\":\"string\",\"name\":\"_contract\"},{\"type\":\"string\",\"name\":\"_version\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":1775},{\"name\":\"setAddress\",\"outputs\":[],\"inputs\":[{\"type\":\"string\",\"name\":\"_contract\"},{\"type\":\"address\",\"name\":\"_address\"},{\"type\":\"string\",\"name\":\"_version\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":52836},{\"name\":\"setGovernance\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_new_governance\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":41912},{\"name\":\"governance\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1271},{\"name\":\"versions\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[{\"type\":\"string\",\"name\":\"arg0\"},{\"type\":\"string\",\"name\":\"arg1\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1895}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.3","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"000000000000000000000000e3d5260cd7f8a4207f41c3b2ac87882489f97213","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}