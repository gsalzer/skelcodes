{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity =0.6.6;\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface Oracle {\r\n    function getUniOutput(uint _input, address _token1, address _token2)external view returns (uint);\r\n}\r\n\r\ninterface ERC20 {\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) external;\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external;\r\n}\r\n\r\ncontract dcStake is Ownable{\r\n    using SafeMath for uint;\r\n\r\n    mapping (address => uint) public dcoinRecords;\r\n    mapping (address => uint) public ethRecords;\r\n    uint burnRate;\r\n\r\n    address public weth;\r\n    address public usdt;\r\n    address public usdg;\r\n    ERC20 public dcoin;\r\n\r\n    Oracle public oracle;\r\n\r\n    event StakeChange( address indexed from,uint ethValue,uint dcoinValue, bool isBuy);\r\n    event WithDraw( address indexed from,uint ethValue, uint returnDcoin, uint burnDcoin);\r\n\r\n    event GovWithdraw(address indexed to, uint256 value);\r\n    event GovWithdrawToken(address indexed to, uint256 value);\r\n\r\n    constructor(address _oracle, address _usdg, address _usdt,address _weth, address _dcoin)public {\r\n        oracle = Oracle(_oracle);\r\n        usdg = _usdg;\r\n        usdt = _usdt;\r\n        weth = _weth;\r\n        dcoin = ERC20(_dcoin);\r\n    }\r\n\r\n    function priceEth2DCoin(uint inValue) public view returns (uint){\r\n        uint tmp = oracle.getUniOutput(inValue,weth,usdt);\r\n        tmp = tmp.mul(1000);\r\n        return  oracle.getUniOutput(tmp,usdg,address(dcoin));\r\n    }\r\n\r\n    function stakeWithEth() public payable{\r\n        require(msg.value > 0, \"!eth value\");\r\n        require(msg.value < 10 ether, \"!eth value\");\r\n        uint needDcoin = priceEth2DCoin(msg.value);\r\n        uint allowed = dcoin.allowance(msg.sender,address(this));\r\n        uint balanced = dcoin.balanceOf(msg.sender);\r\n        require(allowed >= needDcoin, \"!allowed\");\r\n        require(balanced >= needDcoin, \"!balanced\");\r\n        dcoin.transferFrom(msg.sender,address(this), needDcoin);\r\n\r\n        dcoinRecords[msg.sender] = dcoinRecords[msg.sender].add(needDcoin);\r\n        ethRecords[msg.sender]=ethRecords[msg.sender].add(msg.value);\r\n\r\n        StakeChange(msg.sender,msg.value, needDcoin,true);\r\n    }\r\n\r\n    function withdraw() public {\r\n        uint storedEth = ethRecords[msg.sender];\r\n        require(storedEth > 0, \"!stored\");\r\n        uint storedDcoin = dcoinRecords[msg.sender];\r\n        uint burnDcoin = storedDcoin.mul(burnRate).div(100);\r\n        uint returnDcoin = storedDcoin.sub(burnDcoin);\r\n        ethRecords[msg.sender] = 0;\r\n        dcoinRecords[msg.sender] = 0;\r\n        dcoin.transfer( msg.sender, returnDcoin);\r\n        dcoin.transfer( address(0), burnDcoin);\r\n        msg.sender.transfer(storedEth);\r\n\r\n        StakeChange(msg.sender,storedEth, storedDcoin,false);\r\n    }\r\n\r\n    function balanceOf(address _addr) public view returns (uint balance) {\r\n        return ethRecords[_addr];\r\n    }\r\n\r\n    function setOracle(address _oracle)onlyOwner public {\r\n        oracle = Oracle(_oracle);\r\n    }\r\n\r\n    function setBurnRate(uint _burnRate)onlyOwner public {\r\n        require(_burnRate < 100, \"!range\");\r\n        burnRate = _burnRate;\r\n    }\r\n\r\n    function govWithdrawEther(uint256 _amount)onlyOwner public {\r\n        require(_amount > 0, \"!zero input\");\r\n        msg.sender.transfer(_amount);\r\n        emit GovWithdraw(msg.sender, _amount);\r\n    }\r\n\r\n    function govWithdrawToken(uint256 _amount)onlyOwner public {\r\n        require(_amount > 0, \"!zero input\");\r\n        dcoin.transfer(msg.sender, _amount);\r\n        emit GovWithdrawToken(msg.sender, _amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dcoin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GovWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GovWithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dcoinValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"}],\"name\":\"StakeChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnDcoin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnDcoin\",\"type\":\"uint256\"}],\"name\":\"WithDraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dcoin\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"dcoinRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"govWithdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"govWithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract Oracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inValue\",\"type\":\"uint256\"}],\"name\":\"priceEth2DCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnRate\",\"type\":\"uint256\"}],\"name\":\"setBurnRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeWithEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"dcStake","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000088dd282c503621d9d87aa136301d3c09a3bc5b6b000000000000000000000000bd62253c8033f3907c0800780662eab7378a4b96000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000b4056171aa3ba32da1f527431383619b3802802c","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ab04e812d6246f21a8a65fc7a1eadcacbe58a71c2de95b11e9ed4b4c482fe6c5"}]}