{"status":"1","message":"OK","result":[{"SourceCode":"\"\"\"\r\n@title Greenwood Store\r\n@notice Loan and asset storage contract for the Greenwood Protocol\r\n@author Greenwood Labs\r\n\"\"\"\r\n\r\n# define the interfaces used by the contract\r\ninterface REGISTRY:\r\n    def getAddress(_contract: String[20], _version: String[11], ) -> address: nonpayable\r\n    def governance() -> address: nonpayable\r\n\r\n# define the events used by the contract\r\nevent SetRegistry:\r\n    previousRegistry: address\r\n    newRegistry: address\r\n    governance: address\r\n    blockNumber: uint256\r\n\r\n# define the structs used by the contract\r\nstruct AssetContext:\r\n    aToken: address\r\n    aaveV2PriceFeed: address\r\n    aaveV2LendingPool: address\r\n    cToken: address\r\n    compoundPriceFeed: address\r\n    comptroller: address\r\n    decimals: uint256\r\n    underlying: address\r\n\r\nstruct Loan:\r\n    collateralAsset: address\r\n    borrowAsset: address\r\n    outstanding: uint256\r\n    collateralizationRatio: uint256\r\n    collateralLocked: uint256\r\n    borrower: address\r\n    lastBorrowIndex: uint256\r\n    repaymentTime: uint256\r\n\r\n    \r\n# define the storage variables used by the contract\r\nassetContexts: public(HashMap[String[10], AssetContext])\r\nassetTickers: public(HashMap[String[10], address])\r\nregistry: public(address)\r\nloans: public(HashMap[bytes32, Loan])\r\nloanNumbers: public(HashMap[address, uint256])\r\nloanProtocols: public(HashMap[bytes32, String[10]])\r\n\r\n@external\r\ndef __init__(_registry: address):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _registry The address of the Greenwood Registry\r\n    \"\"\"\r\n\r\n    # set the address of the Escrow\r\n    self.registry = _registry\r\n\r\n@internal\r\ndef isAuthorized(_caller: address, _role: String[20], _version: String[11]) -> bool:\r\n    \"\"\"\r\n    @notice Method for role-based security\r\n    @param _caller The address that called the permissioned method\r\n    @param _role The requested authorization level\r\n    @param _version The version of Greenwood to use\r\n    @return True if the caller is authorized, False otherwise\r\n    \"\"\"\r\n\r\n    # check if the requested role is \"aaveV2Escrow\"\r\n    if keccak256(_role) == keccak256(\"aaveV2Escrow\"):\r\n\r\n        # get the address of the AaveV2Escrow from the Registry\r\n        aaveV2Escrow: address = REGISTRY(self.registry).getAddress(\"aaveV2Escrow\", _version)\r\n\r\n        # return the equality comparison\r\n        return aaveV2Escrow == _caller\r\n    \r\n    # check if the requested role is \"compoundEscrow\"\r\n    elif keccak256(_role) == keccak256(\"compoundEscrow\"):\r\n\r\n        # get the address of the CompoundEscrow from the Registry\r\n        compoundEscrow: address = REGISTRY(self.registry).getAddress(\"compoundEscrow\", _version)\r\n\r\n        # return the equality comparison\r\n        return compoundEscrow == _caller\r\n\r\n    # check if the requested role is \"governance\"\r\n    elif keccak256(_role) == keccak256(\"governance\"):\r\n\r\n        # get the address of the Governance from the Registry\r\n        governance: address = REGISTRY(self.registry).governance()\r\n\r\n        # return the equality comparison\r\n        return governance == _caller\r\n\r\n    # catch extraneous role arguments\r\n    else:\r\n\r\n        # revert\r\n        raise \"Unhandled role argument\"\r\n\r\n@external\r\ndef setAssetContext(_ticker: String[10], _a_token: address, _aave_v2_price_feed: address, _aave_v2_lending_pool: address, _c_token: address, _compound_price_feed: address, _comptroller: address, _decimals: uint256, _underlying: address, _version: String[11]):\r\n    \"\"\"\r\n    @notice Writes contextual information about an asset ticker to storage\r\n    @param _ticker The ticker string of that asset that the context applies to\r\n    @param _a_token The address of the Aave V2 aToken contract for the underlying asset\r\n    @param _aave_V2_price_feed The address of the Aave V2 price feed contract\r\n    @param _aave_v2_lending_pool The address of the Aave V2 LendingPool contract\r\n    @param _c_token The address of the Compound cToken contract for the underlying asset\r\n    @param _compound_price_feed The address of the Compound price feed contract\r\n    @param _comptroller The address of the Compound Comptroller contract\r\n    @param _decimals The decimals of the underlying asset\r\n    @param _underlying The address of the underlying asset\r\n    @param _version The version of the Greenwood Protocol to use\r\n    @dev Only the Governance can call this method\r\n    \"\"\"\r\n   \r\n    # require that the method caller is the governance\r\n    assert self.isAuthorized(msg.sender, \"governance\", _version) == True, \"Only Governance can call this method\"\r\n\r\n    # check if the aToken address is the zero address\r\n    if _a_token != ZERO_ADDRESS:\r\n\r\n        # write the aToken address to storage\r\n        self.assetContexts[_ticker].aToken = _a_token\r\n\r\n    # check if the Aave V2 price feed address is the zero address\r\n    if _aave_v2_price_feed != ZERO_ADDRESS:\r\n\r\n        # write the Aave V2 price feed address to stroage\r\n        self.assetContexts[_ticker].aaveV2PriceFeed = _aave_v2_price_feed\r\n\r\n    # check if the Aave V2 LendingPool address is the zero address\r\n    if _aave_v2_lending_pool != ZERO_ADDRESS:\r\n\r\n        # write the Aave V2 LendingPool address to storage\r\n        self.assetContexts[_ticker].aaveV2LendingPool = _aave_v2_lending_pool\r\n\r\n    # check if the cToken address is the zero address\r\n    if _c_token != ZERO_ADDRESS:\r\n\r\n        # write the cToken address to storage\r\n        self.assetContexts[_ticker].cToken = _c_token\r\n\r\n    # check if the Compound price feed address is the zero address\r\n    if _compound_price_feed != ZERO_ADDRESS:\r\n\r\n        # write the Compound price feed address to storage\r\n        self.assetContexts[_ticker].compoundPriceFeed = _compound_price_feed\r\n\r\n    # check if the Comptroller address is the zero address\r\n    if _comptroller != ZERO_ADDRESS:\r\n\r\n        # write the Comptroller address to storage\r\n        self.assetContexts[_ticker].comptroller = _comptroller\r\n\r\n    # check if the asset decimals are zero\r\n    if _decimals != 0:\r\n\r\n        # write the asset decimals to stroage\r\n        self.assetContexts[_ticker].decimals = _decimals\r\n\r\n    # check if the underlying address is the zero address\r\n    if _underlying != ZERO_ADDRESS:\r\n\r\n        # write the underlying address to storage\r\n        self.assetContexts[_ticker].underlying = _underlying\r\n    \r\n@external\r\n@view\r\ndef getAssetContext(_ticker: String[10]) -> AssetContext:\r\n    \"\"\"\r\n    @notice Gets contextual information about a given asset ticker from storage\r\n    @param _ticker The ticker string of that asset that the context applies to\r\n    @return AssetContext struct\r\n    \"\"\"\r\n\r\n    # read the contextual data out of storage and return it\r\n    return AssetContext({\r\n        aToken: self.assetContexts[_ticker].aToken,\r\n        aaveV2PriceFeed: self.assetContexts[_ticker].aaveV2PriceFeed,\r\n        aaveV2LendingPool: self.assetContexts[_ticker].aaveV2LendingPool,\r\n        cToken: self.assetContexts[_ticker].cToken,\r\n        compoundPriceFeed: self.assetContexts[_ticker].compoundPriceFeed,\r\n        comptroller: self.assetContexts[_ticker].comptroller,\r\n        decimals: self.assetContexts[_ticker].decimals,\r\n        underlying: self.assetContexts[_ticker].underlying\r\n    })\r\n\r\n@external\r\ndef recordLoan(_borrower: address, _borrow_asset: address, _collateral_asset: address, _collateralization_ratio: uint256, _collateral_locked: uint256, _index: uint256, _principal: uint256, _protocol: String[10], _version: String[11]):\r\n    \"\"\"\r\n    @notice Writes information about a loan to storage\r\n    @param _borrower The address of the borrower\r\n    @param _borrow_asset The address of the asset that is being borrowed\r\n    @param _collateral_asset The address of the asset that is being used as collateral\r\n    @param _collateralization_ratio The collateralization ratio for the loan\r\n    @param _collateral_locked The amount of collateral locked for the loan scaled by the collateral asset's decimals\r\n    @param _index The borrow index at origination\r\n    @param _principal The principal of the loan scaled by the borrow asset's decimals\r\n    @param _protocol The name of the underlying lending protocol for the loan\r\n    @param _version The version of the Greenwood Protocol to use\r\n    @dev Only the AaveV2Escrow, the CompoundEscrow or the Governance can call this method\r\n    \"\"\"\r\n\r\n    # require that the method is being called by an Escrow or the Governance\r\n    assert self.isAuthorized(msg.sender, \"aaveV2Escrow\", _version) == True or self.isAuthorized(msg.sender, \"compoundEscrow\", _version) == True or self.isAuthorized(msg.sender, \"governance\", _version) == True, \"Only Escrow or Governance can call this method\"\r\n\r\n    # create a unique lookup key by concatenating the borrower's address with their current loan number and hashing\r\n    loanKey: bytes32 = keccak256(concat(convert(_borrower, bytes32), convert(self.loanNumbers[_borrower], bytes32)))\r\n\r\n    # write the collateral asset to storage\r\n    self.loans[loanKey].collateralAsset = _collateral_asset\r\n\r\n    # write the borrow asset to storage\r\n    self.loans[loanKey].borrowAsset = _borrow_asset\r\n\r\n    # write the principal to storage as the outstanding loan balance\r\n    self.loans[loanKey].outstanding = _principal\r\n\r\n    # write the collateralization ratio to storage\r\n    self.loans[loanKey].collateralizationRatio = _collateralization_ratio\r\n\r\n    # write the collateral locked to storage\r\n    self.loans[loanKey].collateralLocked = _collateral_locked\r\n\r\n    # write the borrower's address to storage\r\n    self.loans[loanKey].borrower = _borrower\r\n\r\n    # write the borrow index to storage\r\n    self.loans[loanKey].lastBorrowIndex = _index\r\n\r\n    # write loan protocol to storage\r\n    self.loanProtocols[loanKey] = _protocol\r\n\r\n    # increment the borrower's loan number\r\n    self.loanNumbers[_borrower] += 1\r\n\r\n@external\r\ndef updateLoan(_collateral_locked: uint256, _index: uint256, _loan_key: bytes32, _outstanding: uint256, _version: String[11]):\r\n    \"\"\"\r\n    @notice Updates information about a loan in storage\r\n    @param _collateral_locked The amount of collateral locked for the loan scaled by the collateral asset's decimals\r\n    @param _index The borrow index at the time the method is called\r\n    @param _loan_key The uinque identifier for the loan\r\n    @param _outstanding The outstanding balance of the loan scaled by the borrow asset's decimals\r\n    @param _version The version of the Greenwood Protocol to use\r\n    @dev Only the AaveV2Escrow, the CompoundEscrow or the Governance can call this method\r\n    \"\"\"\r\n\r\n    # require that the method is being called by an escrow or the governance\r\n    assert self.isAuthorized(msg.sender, \"aaveV2Escrow\", _version) == True or self.isAuthorized(msg.sender, \"compoundEscrow\", _version) == True or self.isAuthorized(msg.sender, \"governance\", _version) == True, \"Only Escrow or Governance can call this method\"\r\n\r\n    # require that the loan key corresponds to an existing loan\r\n    assert self.loans[_loan_key].borrower != ZERO_ADDRESS, \"No corresponding loan to update\"\r\n\r\n    # update the outstanding balance of the loan\r\n    self.loans[_loan_key].outstanding = _outstanding\r\n\r\n    # update the collateral locked for the loan\r\n    self.loans[_loan_key].collateralLocked = _collateral_locked\r\n\r\n    # set the lastBorrowIndex of the loan if the _borrow_index argument is not 0\r\n    if _index != 0:\r\n        self.loans[_loan_key].lastBorrowIndex = _index\r\n\r\n    # set the repayment time of the loan if the _outstanding argument is 0\r\n    if _outstanding == 0:\r\n        self.loans[_loan_key].repaymentTime = block.timestamp\r\n\r\n@external\r\n@view\r\ndef getLoan(_loan_key: bytes32) -> Loan:\r\n    \"\"\"\r\n    @notice Gets loan data from storage\r\n    @param _loan_key The uinque identifier for the loan\r\n    @return Loan struct\r\n    \"\"\"\r\n\r\n    # read the loan data out of storage and return it\r\n    return Loan({\r\n        collateralAsset: self.loans[_loan_key].collateralAsset,\r\n        borrowAsset: self.loans[_loan_key].borrowAsset,\r\n        outstanding: self.loans[_loan_key].outstanding,\r\n        collateralizationRatio: self.loans[_loan_key].collateralizationRatio,\r\n        collateralLocked: self.loans[_loan_key].collateralLocked,\r\n        borrower: self.loans[_loan_key].borrower,\r\n        lastBorrowIndex: self.loans[_loan_key].lastBorrowIndex,\r\n        repaymentTime: self.loans[_loan_key].repaymentTime\r\n    })\r\n\r\n@external\r\n@view\r\ndef getLoanProtocol(_loan_key: bytes32) -> String[10]:\r\n    \"\"\"\r\n    @notice Gets the name of the lending protocol of loan from storage\r\n    @param _loan_key The uinque identifier for the loan\r\n    @return String with a maximum length of 10\r\n    \"\"\"\r\n\r\n    # read the loan protocol data out of storage and return it\r\n    return self.loanProtocols[_loan_key]\r\n\r\n@external\r\ndef setRegistry(_new_registry: address):\r\n    \"\"\"\r\n    @notice Updates the address of the Registry\r\n    @param _new_registry The address of the new Greenwood Registry\r\n    @dev Only the Governance can call this method\r\n    @dev Only call this method with a valid Greenwood Registry or subsequent calls will fail!\r\n    \"\"\"\r\n\r\n    # require that the method caller is the Governance\r\n    assert self.isAuthorized(msg.sender, \"governance\", \"\") == True, \"Only Governance can call this method\"\r\n\r\n    # get the previous Registry\r\n    previousRegistry: address = self.registry\r\n\r\n    # update the address of the Registry\r\n    self.registry = _new_registry\r\n\r\n    # emit a SetRegistry event\r\n    log SetRegistry(previousRegistry, _new_registry, msg.sender, block.number)","ABI":"[{\"name\":\"SetRegistry\",\"inputs\":[{\"type\":\"address\",\"name\":\"previousRegistry\",\"indexed\":false},{\"type\":\"address\",\"name\":\"newRegistry\",\"indexed\":false},{\"type\":\"address\",\"name\":\"governance\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"blockNumber\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_registry\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"setAssetContext\",\"outputs\":[],\"inputs\":[{\"type\":\"string\",\"name\":\"_ticker\"},{\"type\":\"address\",\"name\":\"_a_token\"},{\"type\":\"address\",\"name\":\"_aave_v2_price_feed\"},{\"type\":\"address\",\"name\":\"_aave_v2_lending_pool\"},{\"type\":\"address\",\"name\":\"_c_token\"},{\"type\":\"address\",\"name\":\"_compound_price_feed\"},{\"type\":\"address\",\"name\":\"_comptroller\"},{\"type\":\"uint256\",\"name\":\"_decimals\"},{\"type\":\"address\",\"name\":\"_underlying\"},{\"type\":\"string\",\"name\":\"_version\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":290918},{\"name\":\"getAssetContext\",\"outputs\":[{\"type\":\"tuple\",\"name\":\"\",\"components\":[{\"type\":\"address\",\"name\":\"aToken\"},{\"type\":\"address\",\"name\":\"aaveV2PriceFeed\"},{\"type\":\"address\",\"name\":\"aaveV2LendingPool\"},{\"type\":\"address\",\"name\":\"cToken\"},{\"type\":\"address\",\"name\":\"compoundPriceFeed\"},{\"type\":\"address\",\"name\":\"comptroller\"},{\"type\":\"uint256\",\"name\":\"decimals\"},{\"type\":\"address\",\"name\":\"underlying\"}]}],\"inputs\":[{\"type\":\"string\",\"name\":\"_ticker\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":9625},{\"name\":\"recordLoan\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_borrower\"},{\"type\":\"address\",\"name\":\"_borrow_asset\"},{\"type\":\"address\",\"name\":\"_collateral_asset\"},{\"type\":\"uint256\",\"name\":\"_collateralization_ratio\"},{\"type\":\"uint256\",\"name\":\"_collateral_locked\"},{\"type\":\"uint256\",\"name\":\"_index\"},{\"type\":\"uint256\",\"name\":\"_principal\"},{\"type\":\"string\",\"name\":\"_protocol\"},{\"type\":\"string\",\"name\":\"_version\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":377996},{\"name\":\"updateLoan\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_collateral_locked\"},{\"type\":\"uint256\",\"name\":\"_index\"},{\"type\":\"bytes32\",\"name\":\"_loan_key\"},{\"type\":\"uint256\",\"name\":\"_outstanding\"},{\"type\":\"string\",\"name\":\"_version\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":165507},{\"name\":\"getLoan\",\"outputs\":[{\"type\":\"tuple\",\"name\":\"\",\"components\":[{\"type\":\"address\",\"name\":\"collateralAsset\"},{\"type\":\"address\",\"name\":\"borrowAsset\"},{\"type\":\"uint256\",\"name\":\"outstanding\"},{\"type\":\"uint256\",\"name\":\"collateralizationRatio\"},{\"type\":\"uint256\",\"name\":\"collateralLocked\"},{\"type\":\"address\",\"name\":\"borrower\"},{\"type\":\"uint256\",\"name\":\"lastBorrowIndex\"},{\"type\":\"uint256\",\"name\":\"repaymentTime\"}]}],\"inputs\":[{\"type\":\"bytes32\",\"name\":\"_loan_key\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":9302},{\"name\":\"getLoanProtocol\",\"outputs\":[{\"type\":\"string\",\"name\":\"\"}],\"inputs\":[{\"type\":\"bytes32\",\"name\":\"_loan_key\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":6871},{\"name\":\"setRegistry\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_new_registry\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":47137},{\"name\":\"assetContexts\",\"outputs\":[{\"type\":\"tuple\",\"name\":\"\",\"components\":[{\"type\":\"address\",\"name\":\"aToken\"},{\"type\":\"address\",\"name\":\"aaveV2PriceFeed\"},{\"type\":\"address\",\"name\":\"aaveV2LendingPool\"},{\"type\":\"address\",\"name\":\"cToken\"},{\"type\":\"address\",\"name\":\"compoundPriceFeed\"},{\"type\":\"address\",\"name\":\"comptroller\"},{\"type\":\"uint256\",\"name\":\"decimals\"},{\"type\":\"address\",\"name\":\"underlying\"}]}],\"inputs\":[{\"type\":\"string\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":9805},{\"name\":\"assetTickers\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[{\"type\":\"string\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1718},{\"name\":\"registry\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1451},{\"name\":\"loans\",\"outputs\":[{\"type\":\"tuple\",\"name\":\"\",\"components\":[{\"type\":\"address\",\"name\":\"collateralAsset\"},{\"type\":\"address\",\"name\":\"borrowAsset\"},{\"type\":\"uint256\",\"name\":\"outstanding\"},{\"type\":\"uint256\",\"name\":\"collateralizationRatio\"},{\"type\":\"uint256\",\"name\":\"collateralLocked\"},{\"type\":\"address\",\"name\":\"borrower\"},{\"type\":\"uint256\",\"name\":\"lastBorrowIndex\"},{\"type\":\"uint256\",\"name\":\"repaymentTime\"}]}],\"inputs\":[{\"type\":\"bytes32\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":9482},{\"name\":\"loanNumbers\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\"}],\"inputs\":[{\"type\":\"address\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1665},{\"name\":\"loanProtocols\",\"outputs\":[{\"type\":\"string\",\"name\":\"\"}],\"inputs\":[{\"type\":\"bytes32\",\"name\":\"arg0\"}],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":7081}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.3","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000001ddbb7a21905c6a8dbd76b20b7c6b3a55d1af24f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}