{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/hging/Downloads/qilin/contracts/Exchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IFluidity.sol\\\";\\nimport \\\"./interfaces/ILiquidation.sol\\\";\\nimport \\\"./interfaces/IExchange.sol\\\";\\nimport \\\"./interfaces/IExchangeRates.sol\\\";\\nimport \\\"./interfaces/IFundToken.sol\\\";\\nimport \\\"./interfaces/ISystemSetting.sol\\\";\\nimport \\\"./interfaces/IDepot.sol\\\";\\n\\nimport \\\"./utils/AddressResolver.sol\\\";\\nimport \\\"./utils/BasicMaths.sol\\\";\\n\\ncontract Exchange is AddressResolver, IExchange {\\n    using SafeMath for uint;\\n    using BasicMaths for uint;\\n    using BasicMaths for bool;\\n    using SafeERC20 for IERC20;\\n\\n    uint public _lastRebaseTime = 0;\\n\\n    uint private constant E18 = 1e18;\\n    bytes32 private constant CONTRACT_FUNDTOKEN = \\\"FundToken\\\";\\n    bytes32 private constant CONTRACT_EXCHANGERATES = \\\"ExchangeRates\\\";\\n    bytes32 private constant CONTRACT_DEPOT = \\\"Depot\\\";\\n    bytes32 private constant CONTRACT_SYSTEMSETTING = \\\"SystemSetting\\\";\\n    bytes32 private constant CONTRACT_BASECURRENCY = \\\"BaseCurrency\\\";\\n\\n    function fundToken() internal view returns (address) {\\n        return requireAndGetAddress(CONTRACT_FUNDTOKEN, \\\"Missing FundToken Address\\\");\\n    }\\n\\n    function exchangeRates() internal view returns (IExchangeRates) {\\n        return IExchangeRates(requireAndGetAddress(CONTRACT_EXCHANGERATES, \\\"Missing ExchangeRates Address\\\"));\\n    }\\n\\n    function systemSetting() internal view returns (ISystemSetting) {\\n        return ISystemSetting(requireAndGetAddress(CONTRACT_SYSTEMSETTING, \\\"Missing SystemSetting Address\\\"));\\n    }\\n\\n    function depotAddress() internal view returns (address) {\\n        return requireAndGetAddress(CONTRACT_DEPOT, \\\"Missing Depot Address\\\");\\n    }\\n\\n    function getDepot() internal view returns (IDepot) {\\n        return IDepot(depotAddress());\\n    }\\n\\n    function baseCurrency() internal view returns (IERC20) {\\n        return IERC20(requireAndGetAddress(CONTRACT_BASECURRENCY, \\\"Missing BaseCurrency Address\\\"));\\n    }\\n\\n    function openPosition(bytes32 currencyKey, uint8 direction, uint16 level, uint position) external override returns (uint32) {\\n        systemSetting().checkOpenPosition(position, level);\\n\\n        require(direction == 1 || direction == 2, \\\"Direction Only Can Be 1 Or 2\\\");\\n\\n        (uint32 currencyKeyIdx, uint openPrice) = exchangeRates().rateForCurrency(currencyKey);\\n        uint32 index = getDepot().newPosition(msg.sender, openPrice, position, currencyKeyIdx, level, direction);\\n\\n        emit OpenPosition(msg.sender, index, openPrice, currencyKey, direction, level, position);\\n\\n        return index;\\n    }\\n\\n    function addDeposit(uint32 positionId, uint margin) external override {\\n        systemSetting().checkAddDeposit(margin);\\n        getDepot().addDeposit(msg.sender, positionId, margin);\\n        emit MarginCall(msg.sender, positionId, margin);\\n    }\\n\\n    function closePosition(uint32 positionId) external override {\\n        ISystemSetting setting = systemSetting();\\n        setting.requireSystemActive();\\n\\n        IDepot depot = getDepot();\\n\\n        Position memory position;\\n        (\\n            position.account,\\n            position.share,\\n            position.leveragedPosition,\\n            position.openPositionPrice,\\n            position.currencyKeyIdx,\\n            position.direction,\\n            position.margin,\\n            position.openRebaseLeft\\n        ) = depot.position(positionId);\\n\\n        require(position.account == msg.sender, \\\"Position Not Match\\\");\\n\\n        uint shareSubnetValue = position.share.mul(depot.netValue(position.direction)) / 1e18;\\n        uint serviceFee = position.leveragedPosition.mul(setting.positionClosingFee()) / 1e18;\\n        uint marginLoss = position.leveragedPosition.sub2Zero(shareSubnetValue);\\n\\n        uint rateForCurrency = exchangeRates().rateForCurrencyByIdx(position.currencyKeyIdx);\\n        uint value = position.leveragedPosition.mul(rateForCurrency.diff(position.openPositionPrice)) / position.openPositionPrice;\\n\\n        bool isProfit = (rateForCurrency >= position.openPositionPrice) == (position.direction == 1);\\n\\n        if ( isProfit ) {\\n            require(position.margin.add(value) > serviceFee.add(marginLoss), \\\"Bankrupted Liquidation\\\");\\n        } else {\\n            require(position.margin > value.add(serviceFee).add(marginLoss), \\\"Bankrupted Liquidation\\\");\\n        }\\n\\n        depot.closePosition(\\n            position,\\n            positionId,\\n            isProfit,\\n            value,\\n            marginLoss,\\n            serviceFee);\\n\\n        emit ClosePosition(msg.sender, positionId, rateForCurrency, serviceFee, marginLoss, isProfit, value);\\n    }\\n\\n    function rebase() external override {\\n        IDepot depot = getDepot();\\n        ISystemSetting setting = systemSetting();\\n        uint time = block.timestamp;\\n\\n        require(_lastRebaseTime + setting.rebaseInterval() <= time, \\\"Not Meet Rebase Interval\\\");\\n        require(depot.liquidityPool() > 0, \\\"liquidity pool must more than 0\\\");\\n\\n        (uint totalMarginLong, uint totalMarginShort, uint totalValueLong, uint totalValueShort) = depot.getTotalPositionState();\\n        uint D = (totalValueLong.diff(totalValueShort)).mul(1e18) / depot.liquidityPool();\\n\\n        require(D > setting.imbalanceThreshold(), \\\"not meet imbalance threshold\\\");\\n\\n        uint lpd = depot.liquidityPool().mul(setting.imbalanceThreshold()) / 1e18;\\n        uint r = totalValueLong.diff(totalValueShort).sub(lpd) / setting.rebaseRate();\\n        uint rebaseLeft;\\n\\n        if(totalValueLong > totalValueShort) {\\n            require(totalMarginLong >= r, \\\"Long Margin Pool Has Bankrupted\\\");\\n            rebaseLeft = E18.sub(r.mul(1e18) / totalValueLong);\\n        } else {\\n            require(totalMarginShort >= r, \\\"Short Margin Pool Has Bankrupted\\\");\\n            rebaseLeft = E18.sub(r.mul(1e18) / totalValueShort);\\n        }\\n\\n        _lastRebaseTime = time;\\n        depot.updateSubTotalState(totalValueLong > totalValueShort,\\n            r.add(depot.liquidityPool()),\\n            r, r, 0, rebaseLeft);\\n\\n        emit Rebase(time, r);\\n    }\\n\\n    event OpenPosition(address indexed sender, uint32 positionId, uint price, bytes32 currencyKey, uint8 direction, uint16 level, uint position);\\n    event MarginCall(address indexed sender, uint32 positionId, uint margin);\\n    event ClosePosition(address indexed sender, uint32 positionId, uint price, uint serviceFee, uint marginLoss, bool isProfit, uint value);\\n    event Rebase(uint time, uint r);\\n}\\n\"\r\n    },\r\n    \"/Users/hging/Downloads/qilin/contracts/interfaces/IDepot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nstruct Position {\\n    uint share;                 // decimals 18\\n    uint openPositionPrice;     // decimals 18\\n    uint leveragedPosition;     // decimals 6\\n    uint margin;                // decimals 6\\n    uint openRebaseLeft;        // decimals 18\\n    address account;\\n    uint32 currencyKeyIdx;\\n    uint8 direction;\\n}\\n\\ninterface IDepot {\\n    function initialFundingCompleted() external view returns (bool);\\n    function liquidityPool() external view returns (uint);\\n    function totalLeveragedPositions() external view returns (uint);\\n    function totalValue() external view returns (uint);\\n\\n    function position(uint32 index) external view returns (\\n        address account,\\n        uint share,\\n        uint leveragedPosition,\\n        uint openPositionPrice,\\n        uint32 currencyKeyIdx,\\n        uint8 direction,\\n        uint margin,\\n        uint openRebaseLeft);\\n\\n    function netValue(uint8 direction) external view returns (uint);\\n    function calMarginLoss(uint leveragedPosition, uint share, uint8 direction) external view returns (uint);\\n    function calNetProfit(uint32 currencyKeyIdx,\\n        uint leveragedPosition,\\n        uint openPositionPrice,\\n        uint8 direction) external view returns (bool, uint);\\n\\n    function completeInitialFunding() external;\\n\\n    function updateSubTotalState(bool isLong, uint liquidity, uint detaMargin,\\n        uint detaLeveraged, uint detaShare, uint rebaseLeft) external;\\n    function getTotalPositionState() external view returns (uint, uint, uint, uint);\\n\\n    function newPosition(\\n        address account,\\n        uint openPositionPrice,\\n        uint margin,\\n        uint32 currencyKeyIdx,\\n        uint16 level,\\n        uint8 direction) external returns (uint32);\\n\\n    function addDeposit(\\n        address account,\\n        uint32 positionId,\\n        uint margin) external;\\n\\n    function liquidate(\\n        Position memory position,\\n        uint32 positionId,\\n        bool isProfit,\\n        uint fee,\\n        uint value,\\n        uint marginLoss,\\n        uint liqReward,\\n        address liquidator) external;\\n\\n    function bankruptedLiquidate(\\n        Position memory position,\\n        uint32 positionId,\\n        uint liquidateFee,\\n        uint marginLoss,\\n        address liquidator) external;\\n\\n    function closePosition(\\n        Position memory position,\\n        uint32 positionId,\\n        bool isProfit,\\n        uint value,\\n        uint marginLoss,\\n        uint fee) external;\\n\\n    function addLiquidity(address account, uint value) external;\\n    function withdrawLiquidity(address account, uint value) external;\\n}\\n\"\r\n    },\r\n    \"/Users/hging/Downloads/qilin/contracts/interfaces/IExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\ninterface IExchange {\\n\\n    function openPosition(bytes32 currencyKey, uint8 direction, uint16 leverage, uint position) external returns (uint32);\\n\\n    function addDeposit(uint32 positionId, uint margin) external;\\n\\n    function closePosition(uint32 positionId) external;\\n\\n    function rebase() external;\\n}\\n\"\r\n    },\r\n    \"/Users/hging/Downloads/qilin/contracts/interfaces/IExchangeRates.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\ninterface IExchangeRates {\\n    function addCurrencyKey(bytes32 currencyKey_, address aggregator_) external;\\n\\n    function updateCurrencyKey(bytes32 currencyKey_, address aggregator_) external;\\n\\n    function deleteCurrencyKey(bytes32 currencyKey) external;\\n\\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint32, uint);\\n\\n    function rateForCurrencyByIdx(uint32 idx) external view returns (uint);\\n\\n    function currencyKeyExist(bytes32 currencyKey) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/Users/hging/Downloads/qilin/contracts/interfaces/IFluidity.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\ninterface IFluidity {\\n    function initialFunding(uint value) external;\\n\\n    function closeInitialFunding() external;\\n\\n    function fundLiquidity(uint value) external;\\n\\n    function withdrawLiquidity(uint value) external;\\n\\n    function fundTokenPrice() external view returns (uint);\\n\\n    function availableToFund() external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"/Users/hging/Downloads/qilin/contracts/interfaces/IFundToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\ninterface IFundToken {\\n    function mint(address account, uint value) external;\\n\\n    function burn(address account, uint value) external;\\n}\\n\"\r\n    },\r\n    \"/Users/hging/Downloads/qilin/contracts/interfaces/ILiquidation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\ninterface ILiquidation {\\n    function liquidate(uint32 positionId) external;\\n\\n    function bankruptedLiquidate(uint32 positionId) external;\\n\\n    function alertLiquidation(uint32 positionId) external view returns (bool);\\n\\n    function alertBankruptedLiquidation(uint32 positionId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"/Users/hging/Downloads/qilin/contracts/interfaces/ISystemSetting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\ninterface ISystemSetting {\\n    // maxInitialLiquidityFunding\\n    function maxInitialLiquidityFunding() external view returns (uint256);\\n\\n    // constantMarginRatio\\n    function constantMarginRatio() external view returns (uint256);\\n\\n    // leverageExist\\n    function leverageExist(uint32 leverage_) external view returns (bool);\\n\\n    // minInitialMargin\\n    function minInitialMargin() external view returns (uint256);\\n\\n    // minAddDeposit\\n    function minAddDeposit() external view returns (uint256);\\n\\n    // minHoldingPeriod\\n    function minHoldingPeriod() external view returns (uint);\\n\\n    // marginRatio\\n    function marginRatio() external view returns (uint256);\\n\\n    // positionClosingFee\\n    function positionClosingFee() external view returns (uint256);\\n\\n    // liquidationFee\\n    function liquidationFee() external view returns (uint256);\\n\\n    // rebaseInterval\\n    function rebaseInterval() external view returns (uint);\\n\\n    // rebaseRate\\n    function rebaseRate() external view returns (uint);\\n\\n    // imbalanceThreshold\\n    function imbalanceThreshold() external view returns (uint);\\n\\n    // minFundTokenRequired\\n    function minFundTokenRequired() external view returns (uint);\\n\\n    function checkOpenPosition(uint position, uint16 level) external view;\\n    function checkAddDeposit(uint margin) external view;\\n\\n    function requireSystemActive() external;\\n    function resumeSystem() external;\\n    function suspendSystem() external;\\n\\n    event Suspend(address indexed sender);\\n    event Resume(address indexed sender);\\n}\\n\"\r\n    },\r\n    \"/Users/hging/Downloads/qilin/contracts/utils/AddressResolver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract AddressResolver is Ownable {\\n    mapping(bytes32 => address) public repository;\\n\\n    function importAddresses(bytes32[] calldata names, address[] calldata destinations) external onlyOwner {\\n        require(names.length == destinations.length, \\\"Input lengths must match\\\");\\n\\n        for (uint i = 0; i < names.length; i++) {\\n            repository[names[i]] = destinations[i];\\n        }\\n    }\\n\\n    function requireAndGetAddress(bytes32 name, string memory reason) internal view returns (address) {\\n        address _foundAddress = repository[name];\\n        require(_foundAddress != address(0), reason);\\n        return _foundAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/hging/Downloads/qilin/contracts/utils/BasicMaths.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary BasicMaths {\\n    /**\\n     * @dev Returns the abs of substraction of two unsigned integers\\n     *\\n     * _Available since v3.4._\\n     */\\n    function diff(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a >= b) {\\n            return a - b;\\n        } else {\\n            return b - a;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a - b if a > b, else return 0\\n     *\\n     * _Available since v3.4._\\n     */\\n    function sub2Zero(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return a - b;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev if isSub then Returns a - b, else return a + b\\n     *\\n     * _Available since v3.4._\\n     */\\n    function addOrSub(bool isAdd, uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (isAdd) {\\n            return SafeMath.add(a, b);\\n        } else {\\n            return SafeMath.sub(a, b);\\n        }\\n    }\\n\\n    /**\\n     * @dev if isSub then Returns sub2Zero(a, b), else return a + b\\n     *\\n     * _Available since v3.4._\\n     */\\n    function addOrSub2Zero(bool isAdd, uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (isAdd) {\\n            return SafeMath.add(a, b);\\n        } else {\\n            if (a > b) {\\n                return a - b;\\n            } else {\\n                return 0;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"positionId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marginLoss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isProfit\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ClosePosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"positionId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"}],\"name\":\"MarginCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"positionId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"direction\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"level\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"OpenPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"}],\"name\":\"Rebase\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_lastRebaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"positionId\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"}],\"name\":\"addDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"positionId\",\"type\":\"uint32\"}],\"name\":\"closePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"names\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"destinations\",\"type\":\"address[]\"}],\"name\":\"importAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"currencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"direction\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"level\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"openPosition\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"repository\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Exchange","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}