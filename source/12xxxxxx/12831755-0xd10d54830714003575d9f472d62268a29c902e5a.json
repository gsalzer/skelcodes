{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.12\r\n\"\"\"\r\n@title Pool Migrator\r\n@author Curve.fi\r\n@notice Zap for moving liquidity between Curve tricrypto pools in a single transaction\r\n@license MIT\r\n\"\"\"\r\n\r\nN_COINS: constant(int128) = 3  # <- change\r\n\r\nOLD_POOL: constant(address) = 0x80466c64868E1ab14a1Ddf27A676C3fcBE638Fe5\r\nOLD_TOKEN: constant(address) = 0xcA3d75aC011BF5aD07a98d02f18225F9bD9A6BDF\r\nOLD_GAUGE: constant(address) = 0x6955a55416a06839309018A8B0cB72c4DDC11f15\r\n\r\nNEW_POOL: constant(address) = 0xD51a44d3FaE010294C616388b506AcdA1bfAAE46\r\nNEW_TOKEN: constant(address) = 0xc4AD29ba4B3c580e6D59105FFf484999997675Ff\r\nNEW_GAUGE: constant(address) = 0xDeFd8FdD20e0f34115C7018CCfb655796F6B2168\r\n\r\nCOINS: constant(address[N_COINS]) = [\r\n    0xdAC17F958D2ee523a2206206994597C13D831ec7,\r\n    0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599,\r\n    0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2,\r\n]\r\n\r\n\r\n# For flash loan protection\r\nPRECISIONS: constant(uint256[N_COINS]) = [\r\n    1000000000000,\r\n    10000000000,\r\n    1,\r\n]\r\nALLOWED_DEVIATION: constant(uint256) = 10**16  # 1% * 1e18\r\n\r\n\r\ninterface ERC20:\r\n    def approve(_spender: address, _amount: uint256): nonpayable\r\n    def transfer(_to: address, _amount: uint256): nonpayable\r\n    def transferFrom(_owner: address, _spender: address, _amount: uint256) -> bool: nonpayable\r\n    def balanceOf(_user: address) -> uint256: view\r\n\r\ninterface Gauge:\r\n    def withdraw(_value: uint256): nonpayable\r\n    def deposit(_value: uint256, _addr: address, _claim_rewards: bool): nonpayable\r\n\r\ninterface Swap:\r\n    def add_liquidity(_amounts: uint256[N_COINS], _min_mint_amount: uint256): nonpayable\r\n    def remove_liquidity(_burn_amount: uint256, _min_amounts: uint256[N_COINS]): nonpayable\r\n    def balances(i: uint256) -> uint256: view\r\n    def price_oracle(i: uint256) -> uint256: view\r\n\r\n\r\n@external\r\ndef __init__():\r\n    for c in COINS:\r\n        ERC20(c).approve(NEW_POOL, MAX_UINT256)\r\n    ERC20(NEW_TOKEN).approve(NEW_GAUGE, MAX_UINT256)\r\n\r\n\r\n@internal\r\n@view\r\ndef is_safe():\r\n    balances: uint256[N_COINS] = PRECISIONS\r\n    S: uint256 = 0\r\n    for i in range(N_COINS):\r\n        balances[i] *= Swap(NEW_POOL).balances(i)\r\n        if i > 0:\r\n            balances[i] = balances[i] * Swap(NEW_POOL).price_oracle(i-1) / 10**18\r\n        S += balances[i]\r\n    for i in range(N_COINS):\r\n        ratio: uint256 = balances[i] * 10**18 / S\r\n        assert ratio > 10**18/N_COINS - ALLOWED_DEVIATION and ratio < 10**18/N_COINS + ALLOWED_DEVIATION, \"Target pool might be under attack now - wait\"\r\n\r\n\r\n@external\r\ndef migrate_to_new_pool():\r\n    \"\"\"\r\n    @notice Migrate liquidity between two pools\r\n    Better to transfer 1 wei of old gauge and old LP to the zap\r\n    \"\"\"\r\n    self.is_safe()\r\n\r\n    old_amount: uint256 = 0\r\n    bal: uint256 = ERC20(OLD_GAUGE).balanceOf(msg.sender)\r\n\r\n    coins: address[N_COINS] = COINS\r\n    coin_balances: uint256[N_COINS] = empty(uint256[N_COINS])\r\n\r\n    # Transfer the gauge in and withdraw if we have something\r\n    if bal > 0:\r\n        ERC20(OLD_GAUGE).transferFrom(msg.sender, self, bal)\r\n        Gauge(OLD_GAUGE).withdraw(bal)\r\n        old_amount += bal\r\n\r\n    # Transfer LP in if we have something\r\n    bal = ERC20(OLD_TOKEN).balanceOf(msg.sender)\r\n    if bal > 0:\r\n        ERC20(OLD_TOKEN).transferFrom(msg.sender, self, bal)\r\n        old_amount += bal\r\n\r\n    # Get usdt/wbtc/weth\r\n    if old_amount > 0:\r\n        Swap(OLD_POOL).remove_liquidity(old_amount, empty(uint256[N_COINS]))\r\n\r\n    # Deposit\r\n    for i in range(N_COINS):\r\n        bal = ERC20(coins[i]).balanceOf(self)\r\n        if bal > 0:\r\n            bal -= 1\r\n        coin_balances[i] = bal\r\n    Swap(NEW_POOL).add_liquidity(coin_balances, 0)\r\n\r\n    # Put in the gauge\r\n    bal = ERC20(NEW_TOKEN).balanceOf(self)\r\n    if bal > 1:\r\n        Gauge(NEW_GAUGE).deposit(bal - 1, msg.sender, False)","ABI":"[{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"migrate_to_new_pool\",\"inputs\":[],\"outputs\":[],\"gas\":61984}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.12","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}