{"status":"1","message":"OK","result":[{"SourceCode":"{\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is IERC20, IERC20Metadata {\\r\\n    mapping (address =\\u003e uint256) internal _balances;\\r\\n\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The defaut value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor (string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\r\\n        require(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        _approve(sender, msg.sender, currentAllowance - amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[msg.sender][spender];\\r\\n        require(currentAllowance \\u003e= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 senderBalance = _balances[sender];\\r\\n        require(senderBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[sender] = senderBalance - amount;\\r\\n        _balances[recipient] += amount;\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _balances[account] = accountBalance - amount;\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\r\\n}\\r\\n\"},\"ERC20Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./Pausable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\r\\n *\\r\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\r\\n * period, or having an emergency switch for freezing all token transfers in the\\r\\n * event of a large bug.\\r\\n */\\r\\nabstract contract ERC20Pausable is ERC20, Pausable {\\r\\n    /**\\r\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the contract must not be paused.\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\r\\n        super._beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\r\\n    }\\r\\n}\\r\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract Ownable {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () {\\r\\n        _owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), msg.sender);\\r\\n    }\\r\\n\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"},\"Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\nabstract contract Pausable {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor () {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view virtual returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused(), \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(paused(), \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function _pause() internal virtual whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function _unpause() internal virtual whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(msg.sender);\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n        uint256 c = a + b;\\r\\n        if (c \\u003c a) return (false, 0);\\r\\n        return (true, c);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n *\\r\\n * _Available since v3.4._\\r\\n */\\r\\nfunction trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\nunchecked {\\r\\nif (b \\u003e a) return (false, 0);\\r\\nreturn (true, a - b);\\r\\n}\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n *\\r\\n * _Available since v3.4._\\r\\n */\\r\\nfunction tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\nunchecked {\\r\\n// Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n// benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\nif (a == 0) return (true, 0);\\r\\nuint256 c = a * b;\\r\\nif (c / a != b) return (false, 0);\\r\\nreturn (true, c);\\r\\n}\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n *\\r\\n * _Available since v3.4._\\r\\n */\\r\\nfunction tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\nunchecked {\\r\\nif (b == 0) return (false, 0);\\r\\nreturn (true, a / b);\\r\\n}\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n *\\r\\n * _Available since v3.4._\\r\\n */\\r\\nfunction tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\nunchecked {\\r\\nif (b == 0) return (false, 0);\\r\\nreturn (true, a % b);\\r\\n}\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Returns the addition of two unsigned integers, reverting on\\r\\n * overflow.\\r\\n *\\r\\n * Counterpart to Solidity\\u0027s `+` operator.\\r\\n *\\r\\n * Requirements:\\r\\n *\\r\\n * - Addition cannot overflow.\\r\\n */\\r\\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\nreturn a + b;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n * overflow (when the result is negative).\\r\\n *\\r\\n * Counterpart to Solidity\\u0027s `-` operator.\\r\\n *\\r\\n * Requirements:\\r\\n *\\r\\n * - Subtraction cannot overflow.\\r\\n */\\r\\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\nreturn a - b;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n * overflow.\\r\\n *\\r\\n * Counterpart to Solidity\\u0027s `*` operator.\\r\\n *\\r\\n * Requirements:\\r\\n *\\r\\n * - Multiplication cannot overflow.\\r\\n */\\r\\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\nreturn a * b;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n * division by zero. The result is rounded towards zero.\\r\\n *\\r\\n * Counterpart to Solidity\\u0027s `/` operator.\\r\\n *\\r\\n * Requirements:\\r\\n *\\r\\n * - The divisor cannot be zero.\\r\\n */\\r\\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\nreturn a / b;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n * reverting when dividing by zero.\\r\\n *\\r\\n * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n * invalid opcode to revert (consuming all remaining gas).\\r\\n *\\r\\n * Requirements:\\r\\n *\\r\\n * - The divisor cannot be zero.\\r\\n */\\r\\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\nreturn a % b;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n * overflow (when the result is negative).\\r\\n *\\r\\n * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n *\\r\\n * Counterpart to Solidity\\u0027s `-` operator.\\r\\n *\\r\\n * Requirements:\\r\\n *\\r\\n * - Subtraction cannot overflow.\\r\\n */\\r\\nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\nunchecked {\\r\\nrequire(b \\u003c= a, errorMessage);\\r\\nreturn a - b;\\r\\n}\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n * division by zero. The result is rounded towards zero.\\r\\n *\\r\\n * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n * invalid opcode to revert (consuming all remaining gas).\\r\\n *\\r\\n * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n *\\r\\n * Requirements:\\r\\n *\\r\\n * - The divisor cannot be zero.\\r\\n */\\r\\nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\nunchecked {\\r\\nrequire(b \\u003e 0, errorMessage);\\r\\nreturn a / b;\\r\\n}\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n * reverting with custom message when dividing by zero.\\r\\n *\\r\\n * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n *\\r\\n * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n * invalid opcode to revert (consuming all remaining gas).\\r\\n *\\r\\n * Requirements:\\r\\n *\\r\\n * - The divisor cannot be zero.\\r\\n */\\r\\nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\nunchecked {\\r\\nrequire(b \\u003e 0, errorMessage);\\r\\nreturn a % b;\\r\\n}\\r\\n}\\r\\n}\"},\"Token.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ERC20Pausable.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\ninterface IHotwalletRepository {\\r\\n    function hotwallet() external view returns (address);\\r\\n}\\r\\n\\r\\ninterface ISignersRepository {\\r\\n    function isSigner(address _signer) external view returns (bool);\\r\\n}\\r\\n\\r\\ncontract Token is ERC20Pausable, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n\\r\\n    uint256 public taxRate;\\r\\n    address public taxReceiver;\\r\\n    uint256 immutable private _cap;\\r\\n\\r\\n    mapping(uint256 =\\u003e bool) public withdrawIDs;\\r\\n    mapping(uint256 =\\u003e bool) public mintIDs;\\r\\n    mapping(address =\\u003e bool) public taxWhitelist;\\r\\n\\r\\n    IHotwalletRepository hotwalletRepository;\\r\\n    ISignersRepository signersRepository;\\r\\n\\r\\n    event Deposited(string indexed tokendID, uint256 amount);\\r\\n    event Withdrawn(uint256 indexed reqID);\\r\\n    event TaxReceiverSet(address indexed taxReceiver);\\r\\n    event AddedToWhitelist(address indexed whitelistAddress);\\r\\n    event RemovedFromWhitelist(address indexed whitelistAddress);\\r\\n\\r\\n    uint256 constant WITHDRAW_OP = 1;\\r\\n    uint256 constant MINT_OP = 2;\\r\\n    uint256 public constant TAX_RATE_DIVISOR = 10000;\\r\\n    uint256 public constant MAX_TAX_RATE = 1000; // 10%\\r\\n\\r\\n    modifier isSigned(\\r\\n        uint256 _prefix,\\r\\n        uint256 _amount,\\r\\n        uint256 _requestID,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s,\\r\\n        uint8 _v\\r\\n    ) {\\r\\n        bytes32 _hash = keccak256(abi.encodePacked(_prefix, msg.sender, _requestID, _amount));\\r\\n        {\\r\\n            address signer = ecrecover(_hash, _v, _r, _s);\\r\\n            require(signer != address(0), \\\"bad-signature\\\");\\r\\n            require(signersRepository.isSigner(signer), \\\"bad-signer\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        address _hotwalletRepository,\\r\\n        address _signers,\\r\\n        uint256 cap_,\\r\\n        uint256 taxRate_,\\r\\n        address taxReceiver_\\r\\n    ) ERC20(_name, _symbol)  Ownable() {\\r\\n        signersRepository = ISignersRepository(_signers);\\r\\n        hotwalletRepository = IHotwalletRepository(_hotwalletRepository);\\r\\n        taxWhitelist[msg.sender] = true;\\r\\n        taxWhitelist[taxReceiver_] = true;\\r\\n        taxRate = taxRate_;\\r\\n        taxReceiver = taxReceiver_;\\r\\n        _cap = cap_;\\r\\n    }\\r\\n\\r\\n    function setTaxReceiver(address taxReceiver_) external onlyOwner {\\r\\n        taxReceiver = taxReceiver_;\\r\\n        emit TaxReceiverSet(taxReceiver_);\\r\\n    }\\r\\n\\r\\n    function addToWhitelist(address whitelistAddress) external onlyOwner {\\r\\n        taxWhitelist[whitelistAddress] = true;\\r\\n        emit AddedToWhitelist(whitelistAddress);\\r\\n    }\\r\\n\\r\\n    function removeFromWhitelist(address whitelistAddress) external onlyOwner {\\r\\n        taxWhitelist[whitelistAddress] = false;\\r\\n        emit RemovedFromWhitelist(whitelistAddress);\\r\\n    }\\r\\n\\r\\n    function cap() public view virtual returns (uint256) {\\r\\n        return _cap;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal override {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        uint256 sendAmount = amount;\\r\\n        if (!taxWhitelist[sender]) {\\r\\n            uint256 taxAmount = amount.mul(taxRate).div(TAX_RATE_DIVISOR);\\r\\n            _balances[taxReceiver] = _balances[taxReceiver].add(taxAmount);\\r\\n            emit Transfer(sender, taxReceiver, taxAmount);\\r\\n            sendAmount = sendAmount.sub(taxAmount);\\r\\n        }\\r\\n        _balances[recipient] = _balances[recipient].add(sendAmount);\\r\\n        emit Transfer(sender, recipient, sendAmount);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal virtual override {\\r\\n        require(ERC20.totalSupply() + amount \\u003c= cap(), \\\"ERC20Capped: cap exceeded\\\");\\r\\n        super._mint(account, amount);\\r\\n    }\\r\\n\\r\\n    function mintBySignature(\\r\\n        uint256 amount,\\r\\n        uint256 requestID,\\r\\n        bytes32 r,\\r\\n        bytes32 s,\\r\\n        uint8 v\\r\\n    ) external isSigned(MINT_OP, amount, requestID, r, s, v) {\\r\\n        require(!mintIDs[requestID], \\\"mint-id-used\\\");\\r\\n        require(!paused(), \\\"token-is-paused\\\");\\r\\n        _mint(hotwalletRepository.hotwallet(), amount);\\r\\n        mintIDs[requestID] = true;\\r\\n    }\\r\\n\\r\\n    function mint(\\r\\n        uint256 amount,\\r\\n        address account\\r\\n    ) external onlyOwner() {\\r\\n        require(!paused(), \\\"token-is-paused\\\");\\r\\n        _mint(account, amount);\\r\\n    }\\r\\n\\r\\n    function deposit(\\r\\n        string memory _tokendID,\\r\\n        uint256 _amount\\r\\n    ) external returns (bool){\\r\\n        require(!paused(), \\\"token-is-paused\\\");\\r\\n\\r\\n        _transfer(msg.sender, hotwalletRepository.hotwallet(), _amount);\\r\\n        emit Deposited(_tokendID, _amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function withdraw(\\r\\n        uint256 _amount,\\r\\n        uint256 _requestID,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s,\\r\\n        uint8 _v\\r\\n    ) isSigned(WITHDRAW_OP, _requestID, _amount, _r, _s, _v) external returns (bool){\\r\\n        require(!paused(), \\\"token-is-paused\\\");\\r\\n        require(!withdrawIDs[_requestID], \\\"withdraw-id-used\\\");\\r\\n        require(balanceOf(msg.sender) \\u003e= _amount, \\\"balance-too-low\\\");\\r\\n        withdrawIDs[_requestID] = true;\\r\\n        _transfer(hotwalletRepository.hotwallet(), msg.sender, _amount);\\r\\n        emit Withdrawn(_requestID);\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\\r\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_hotwalletRepository\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signers\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cap_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"taxRate_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"taxReceiver_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelistAddress\",\"type\":\"address\"}],\"name\":\"AddedToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"tokendID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelistAddress\",\"type\":\"address\"}],\"name\":\"RemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taxReceiver\",\"type\":\"address\"}],\"name\":\"TaxReceiverSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reqID\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TAX_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAX_RATE_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"whitelistAddress\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokendID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"mintBySignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintIDs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"whitelistAddress\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"taxReceiver_\",\"type\":\"address\"}],\"name\":\"setTaxReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"taxWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requestID\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawIDs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Token","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000f943d07370f3b9bf22d498415a2142ded234da07000000000000000000000000fa834fb8f1770b2722d357344df80b72d3cd90fa0000000000000000000000000000000000000000033b2e3c9fd0803ce80000000000000000000000000000000000000000000000000000000000000000000096000000000000000000000000712ca26583da2bf067a8f31644917a957b1454be000000000000000000000000000000000000000000000000000000000000000f53706f7274732044c2b320436f696e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035344330000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://257f56a96e7a64961b3b8bf24c00b6cd6b8c9f6fd39aebaa4907cf43ffd42fca"}]}