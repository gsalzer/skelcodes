{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ninterface IERC20 {\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ninterface IAuctionHouse {\r\n    function buy(\r\n        uint256 wethInMax,\r\n        uint256 bankInMax,\r\n        uint256 floatOutMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function sell(\r\n        uint256 floatIn,\r\n        uint256 wethOutMin,\r\n        uint256 bankOutMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n}\r\n\r\ncontract FloatBuyer {\r\n    address owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function withdrawERC20(address tokenAddress) public onlyOwner {\r\n        IERC20 token = IERC20(tokenAddress);\r\n        token.transferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            token.balanceOf(address(this))\r\n        );\r\n    }\r\n\r\n    function approve(\r\n        address tokenAddress,\r\n        uint256 amount,\r\n        address spender\r\n    ) public onlyOwner {\r\n        IERC20(tokenAddress).approve(spender, amount);\r\n    }\r\n\r\n    function executeAndBuy(\r\n        address floatAddress,\r\n        address usdcTokenAddress,\r\n        uint256 usdcTokenAmount,\r\n        address dexAddress,\r\n        bytes memory dexData,\r\n        address auctionHouse,\r\n        uint256 wethInMax,\r\n        uint256 bankInMax,\r\n        uint256 floatOutMin,\r\n        uint256 deadline\r\n    ) public {\r\n        // transfer usdc in\r\n        IERC20 usdc = IERC20(usdcTokenAddress);\r\n        usdc.transferFrom(msg.sender, address(this), usdcTokenAmount);\r\n\r\n        (bool success1, ) = dexAddress.call(dexData);\r\n        require(success1, \"dex trade not sucessful\");\r\n\r\n        // buy float\r\n        IAuctionHouse(auctionHouse).buy(\r\n            wethInMax,\r\n            bankInMax,\r\n            floatOutMin,\r\n            address(this),\r\n            deadline\r\n        );\r\n\r\n        // transfer float out\r\n        _sendOutAll(IERC20(floatAddress));\r\n        // transfer leftover usdc\r\n        _sendOutAll(usdc);\r\n    }\r\n\r\n    function executeAndSell(\r\n        address floatAddress,\r\n        address usdcTokenAddress,\r\n        address wethTokenAddress,\r\n        address dexAddress,\r\n        bytes memory dexData,\r\n        address auctionHouse,\r\n        uint256 floatIn,\r\n        uint256 wethOutMin,\r\n        uint256 bankOutMin,\r\n        uint256 deadline\r\n    ) public {\r\n        // transfer float in\r\n        IERC20 float = IERC20(floatAddress);\r\n        float.transferFrom(msg.sender, address(this), floatIn);\r\n\r\n        // sell float for WETH\r\n        IAuctionHouse(auctionHouse).sell(\r\n            floatIn,\r\n            wethOutMin,\r\n            bankOutMin,\r\n            address(this),\r\n            deadline\r\n        );\r\n\r\n        // sell WETH for USDC\r\n        (bool success1, ) = dexAddress.call(dexData);\r\n        require(success1, \"dex trade not sucessful\");\r\n\r\n        // transfer USDC out\r\n        _sendOutAll(IERC20(usdcTokenAddress));\r\n        // transfer leftover float\r\n        _sendOutAll(float);\r\n        // transfer leftover weth\r\n        _sendOutAll(IERC20(wethTokenAddress));\r\n    }\r\n\r\n    function executeArbitrary(\r\n        address targetAddress,\r\n        bytes memory targetCallData\r\n    ) public onlyOwner returns (bool) {\r\n        (bool success, ) = targetAddress.call(targetCallData);\r\n        return success;\r\n    }\r\n\r\n    function _sendOutAll(IERC20 token) private {\r\n        token.transferFrom(\r\n            address(this),\r\n            msg.sender,\r\n            token.balanceOf(address(this))\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"floatAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdcTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"usdcTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dexAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"dexData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"auctionHouse\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wethInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bankInMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"floatOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"executeAndBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"floatAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdcTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dexAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"dexData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"auctionHouse\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"floatIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bankOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"executeAndSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"targetCallData\",\"type\":\"bytes\"}],\"name\":\"executeArbitrary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FloatBuyer","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://558d3d6eee0eda89e8966b4a5d5afbfb1cbcc5aacc33143b24baaf0b297c3098"}]}