{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// The following contract is a simplified version of https://github.com/rstormsf/multisender.\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\n\r\ncontract Multisend {\r\n    event Multisended(address indexed _from, address[] _to, uint256[] _value);\r\n    event FeeChanged(uint256 _fee);\r\n    event AuthorizedAddrChanged(address _newAuthorizedAddr);\r\n    event Withdrawn(address indexed receiver, uint256 amount);\r\n\r\n    uint256 internal contractFee = 0 ether; // A contract-caller has to pay this fee to get service\r\n    address internal authorizedAddr;\r\n\r\n    constructor() public {\r\n        authorizedAddr = msg.sender;\r\n    }\r\n\r\n    function changeFee(uint256 fee) public {\r\n        require(msg.sender == authorizedAddr, \"You are not authorized.\");\r\n        contractFee = fee;\r\n        emit FeeChanged(fee);\r\n    }\r\n\r\n    function changeAuthorizedAddr(address newAuthorizedAddr) public {\r\n        require(msg.sender == authorizedAddr, \"You are not authorized.\");\r\n        authorizedAddr = newAuthorizedAddr;\r\n        emit AuthorizedAddrChanged(newAuthorizedAddr);\r\n    }\r\n\r\n    function withdraw(address payable receiver) public {\r\n        require(msg.sender == authorizedAddr, \"You are not authorized.\");\r\n        uint256 amount = address(this).balance;\r\n        emit Withdrawn(receiver, amount);\r\n        receiver.transfer(amount);\r\n    }\r\n\r\n    function multisendEther(address[] memory receivers, uint256[] memory amounts) public payable {\r\n        uint256 total = msg.value;\r\n        require(total >= contractFee, \"Do not have enough tokens to pay the contract fee.\");\r\n        total = total - contractFee;\r\n        uint256 i = 0;\r\n\r\n        for (i; i < receivers.length; i++) {\r\n            require(total >= amounts[i], \"Do not have enough tokens to send.\");\r\n            total = total - amounts[i];\r\n            address payable receiver = address(uint160(receivers[i]));\r\n            receiver.transfer(amounts[i]);\r\n        }\r\n        emit Multisended(msg.sender, receivers, amounts);\r\n    }\r\n\r\n    function checkContractFee() public view returns(uint){\r\n        return contractFee;\r\n    }\r\n\r\n    function checkAuthorizedAddr() public view returns(address){\r\n        return authorizedAddr;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAuthorizedAddr\",\"type\":\"address\"}],\"name\":\"AuthorizedAddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"FeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_value\",\"type\":\"uint256[]\"}],\"name\":\"Multisended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAuthorizedAddr\",\"type\":\"address\"}],\"name\":\"changeAuthorizedAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkAuthorizedAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkContractFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multisendEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Multisend","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://459d751ef2304a0a63b9598ec7b14b4514acbb776c81f268b9612a82b350e323"}]}