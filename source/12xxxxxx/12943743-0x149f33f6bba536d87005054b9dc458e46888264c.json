{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-02-04\r\n*/\r\n\r\n// SPDX-License-Identifier: (c) Otsea.fi, 2021\r\n\r\npragma solidity ^0.6.12;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n * \r\n * @dev Default OpenZeppelin\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Vesting {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public token;\r\n\r\n    uint256 public totalTokens;\r\n    uint256 public releaseStart;\r\n    uint256 public releaseEnd;\r\n\r\n    mapping (address => uint256) public starts;\r\n    mapping (address => uint256) public grantedToken;\r\n\r\n    // this means, released but unclaimed amounts\r\n    mapping (address => uint256) public released;\r\n\r\n    event Claimed(address indexed _user, uint256 _amount, uint256 _timestamp);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount, uint256 _timestamp);\r\n\r\n    // do not input same recipient in the _recipients, it will lead to locked token in this contract\r\n    function initialize(\r\n        address _token,\r\n        uint256 _totalTokens,\r\n        uint256 _start,\r\n        uint256 _period,\r\n        address[] calldata _recipients,\r\n        uint256[] calldata _grantedToken\r\n    )\r\n      public\r\n    {\r\n        require(releaseEnd == 0, \"Contract is already initialized.\");\r\n        require(_recipients.length == _grantedToken.length, \"Array lengths do not match.\");\r\n\r\n        releaseEnd = _start.add(_period);\r\n        releaseStart = _start;\r\n\r\n        token = IERC20(_token);\r\n        token.transferFrom(msg.sender, address(this), _totalTokens);\r\n        totalTokens = _totalTokens;\r\n        uint256 sum = 0;\r\n\r\n        for(uint256 i = 0; i<_recipients.length; i++) {\r\n            starts[_recipients[i]] = releaseStart;\r\n            grantedToken[_recipients[i]] = _grantedToken[i];\r\n            sum = sum.add(_grantedToken[i]);\r\n        }\r\n\r\n        // We're gonna just set the weight as full tokens. Ensures grantedToken were entered correctly as well.\r\n        require(sum == totalTokens, \"Weight does not match tokens being distributed.\");\r\n    }\r\n\r\n    /**\r\n     * @dev User may claim tokens that have vested.\r\n    **/\r\n    function claim()\r\n      public\r\n    {\r\n        address user = msg.sender;\r\n\r\n        require(releaseStart <= block.timestamp, \"Release has not started\");\r\n        require(grantedToken[user] > 0 || released[user] > 0, \"This contract may only be called by users with a stake.\");\r\n\r\n        uint256 releasing = releasable(user);\r\n        // updates the grantedToken\r\n        grantedToken[user] = grantedToken[user].sub(releasing);\r\n\r\n        // claim will claim both released and releasing\r\n        uint256 claimAmount = released[user].add(releasing);\r\n\r\n        // flush the released since released means \"unclaimed\" amount\r\n        released[user] = 0;\r\n        \r\n        // and update the starts\r\n        starts[user] = block.timestamp;\r\n        token.transfer(user, claimAmount);\r\n        emit Claimed(user, claimAmount, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev returns claimable token. buffered(released) token + token released from last update\r\n     * @param _user user to check the claimable token\r\n    **/\r\n    function claimableAmount(address _user) external view returns(uint256) {\r\n        return released[_user].add(releasable(_user));\r\n    }\r\n\r\n    /**\r\n     * @dev returns the token that can be released from last user update\r\n     * @param _user user to check the releasable token\r\n    **/\r\n    function releasable(address _user) public view returns(uint256) {\r\n        if (block.timestamp < releaseStart) return 0;\r\n        uint256 applicableTimeStamp = block.timestamp >= releaseEnd ? releaseEnd : block.timestamp;\r\n        return grantedToken[_user].mul(applicableTimeStamp.sub(starts[_user])).div(releaseEnd.sub(starts[_user]));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers a sender's weight to another address starting from now.\r\n     * @param _to The address to transfer weight to.\r\n     * @param _amountInFullTokens The amount of tokens (in 0 decimal format). We will not have fractions of tokens.\r\n    **/\r\n    function transfer(address _to, uint256 _amountInFullTokens)\r\n      external\r\n    {\r\n        require(_to != msg.sender, \"May not transfer to yourself.\");\r\n        \r\n        // first, update the released\r\n        released[msg.sender] = released[msg.sender].add(releasable(msg.sender));\r\n        released[_to] = released[_to].add(releasable(_to));\r\n\r\n        // then update the grantedToken;\r\n        grantedToken[msg.sender] = grantedToken[msg.sender].sub(releasable(msg.sender));\r\n        grantedToken[_to] = grantedToken[_to].sub(releasable(_to));\r\n\r\n        // then update the starts of user\r\n        starts[msg.sender] = block.timestamp;\r\n        starts[_to] = block.timestamp;\r\n\r\n        // If trying to transfer too much, transfer full amount.\r\n        uint256 amount = _amountInFullTokens.mul(1e18) > grantedToken[msg.sender] ? grantedToken[msg.sender] : _amountInFullTokens.mul(1e18);\r\n\r\n        // then move _amount\r\n        grantedToken[msg.sender] = grantedToken[msg.sender].sub(amount);\r\n        grantedToken[_to] = grantedToken[_to].add(amount);\r\n\r\n        emit Transfer(msg.sender, _to, amount, block.timestamp);\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"grantedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_grantedToken\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"releasable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"starts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountInFullTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Vesting","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2c0d51dffeeb0ffd423f9f08dc310bb6f828935033ef379b7028cae543f399e4"}]}