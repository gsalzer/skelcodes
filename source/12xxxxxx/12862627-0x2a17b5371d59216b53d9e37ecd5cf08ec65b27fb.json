{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/market-wrapper/ZoraMarketWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.5;\\n\\n// ============ External Imports ============\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IZoraAuctionHouse} from \\\"../external/interfaces/IZoraAuctionHouse.sol\\\";\\n\\n// ============ Internal Imports ============\\nimport {IMarketWrapper} from \\\"./IMarketWrapper.sol\\\";\\n\\n/**\\n * @title ZoraMarketWrapper\\n * @author Anna Carroll\\n * @notice MarketWrapper contract implementing IMarketWrapper interface\\n * according to the logic of Zora's Auction Houses\\n * Original Zora Auction House code: https://github.com/ourzora/auction-house/blob/main/contracts/AuctionHouse.sol\\n */\\ncontract ZoraMarketWrapper is IMarketWrapper {\\n    using SafeMath for uint256;\\n\\n    // ============ Internal Immutables ============\\n\\n    IZoraAuctionHouse internal immutable market;\\n    uint8 internal immutable minBidIncrementPercentage;\\n\\n    // ======== Constructor =========\\n\\n    constructor(address _zoraAuctionHouse) {\\n        market = IZoraAuctionHouse(_zoraAuctionHouse);\\n        minBidIncrementPercentage = IZoraAuctionHouse(_zoraAuctionHouse)\\n            .minBidIncrementPercentage();\\n    }\\n\\n    // ======== External Functions =========\\n\\n    /**\\n     * @notice Determine whether there is an existing auction\\n     * for this token on the market\\n     * @return TRUE if the auction exists\\n     */\\n    function auctionExists(uint256 auctionId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        // line 375 of Zora Auction House, _exists() function (not exposed publicly)\\n        IZoraAuctionHouse.Auction memory _auction = market.auctions(auctionId);\\n        return _auction.tokenOwner != address(0);\\n    }\\n\\n    /**\\n     * @notice Determine whether the given auctionId is\\n     * an auction for the tokenId + nftContract\\n     * @return TRUE if the auctionId matches the tokenId + nftContract\\n     */\\n    function auctionIdMatchesToken(\\n        uint256 auctionId,\\n        address nftContract,\\n        uint256 tokenId\\n    ) public view override returns (bool) {\\n        IZoraAuctionHouse.Auction memory _auction = market.auctions(auctionId);\\n        return\\n            _auction.tokenId == tokenId &&\\n            _auction.tokenContract == nftContract &&\\n            _auction.auctionCurrency == address(0);\\n    }\\n\\n    /**\\n     * @notice Calculate the minimum next bid for this auction\\n     * @return minimum bid amount\\n     */\\n    function getMinimumBid(uint256 auctionId)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        // line 173 of Zora Auction House, calculation within createBid() function (calculation not exposed publicly)\\n        IZoraAuctionHouse.Auction memory _auction = market.auctions(auctionId);\\n        if (_auction.amount > _auction.reservePrice) {\\n            return\\n                _auction.amount.add(\\n                    _auction.amount.mul(minBidIncrementPercentage).div(100)\\n                );\\n        } else {\\n            return _auction.reservePrice;\\n        }\\n    }\\n\\n    /**\\n     * @notice Query the current highest bidder for this auction\\n     * @return highest bidder\\n     */\\n    function getCurrentHighestBidder(uint256 auctionId)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        // line 279 of NFTMarketReserveAuction, getMinBidAmount() function\\n        IZoraAuctionHouse.Auction memory _auction = market.auctions(auctionId);\\n        return _auction.bidder;\\n    }\\n\\n    /**\\n     * @notice Submit bid to Market contract\\n     */\\n    function bid(uint256 auctionId, uint256 bidAmount) external override {\\n        // line 153 of Zora Auction House, createBid() function\\n        (bool success, bytes memory returnData) =\\n            address(market).call{value: bidAmount}(\\n                abi.encodeWithSignature(\\n                    \\\"createBid(uint256,uint256)\\\",\\n                    auctionId,\\n                    bidAmount\\n                )\\n            );\\n        require(success, string(returnData));\\n    }\\n\\n    /**\\n     * @notice Determine whether the auction has been finalized\\n     * @return TRUE if the auction has been finalized\\n     */\\n    function isFinalized(uint256 auctionId)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        // line 302 of Zora Auction House,\\n        // the auction is deleted at the end of the endAuction() function\\n        // since we checked that the auction DID exist when we deployed the partyBid,\\n        // if it no longer exists that means the auction has been finalized.\\n        return !auctionExists(auctionId);\\n    }\\n\\n    /**\\n     * @notice Finalize the results of the auction\\n     */\\n    function finalize(uint256 auctionId) external override {\\n        // line 249 of Zora Auction House, endAuction() function\\n        market.endAuction(auctionId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/interfaces/IZoraAuctionHouse.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n// Reproduced from https://github.com/ourzora/auction-house/blob/main/contracts/interfaces/IAuctionHouse.sol under terms of GPL-3.0\\n// Modified slightly\\npragma solidity 0.8.5;\\n\\n/**\\n * @title Interface for Zora Auction Houses\\n */\\ninterface IZoraAuctionHouse {\\n    struct Auction {\\n        // ID for the ERC721 token\\n        uint256 tokenId;\\n        // Address for the ERC721 contract\\n        address tokenContract;\\n        // Whether or not the auction curator has approved the auction to start\\n        bool approved;\\n        // The current highest bid amount\\n        uint256 amount;\\n        // The length of time to run the auction for, after the first bid was made\\n        uint256 duration;\\n        // The time of the first bid\\n        uint256 firstBidTime;\\n        // The minimum price of the first bid\\n        uint256 reservePrice;\\n        // The sale percentage to send to the curator\\n        uint8 curatorFeePercentage;\\n        // The address that should receive the funds once the NFT is sold.\\n        address tokenOwner;\\n        // The address of the current highest bid\\n        address payable bidder;\\n        // The address of the auction's curator.\\n        // The curator can reject or approve an auction\\n        address payable curator;\\n        // The address of the ERC-20 currency to run the auction with.\\n        // If set to 0x0, the auction will be run in ETH\\n        address auctionCurrency;\\n    }\\n\\n    event AuctionCreated(\\n        uint256 indexed auctionId,\\n        uint256 indexed tokenId,\\n        address indexed tokenContract,\\n        uint256 duration,\\n        uint256 reservePrice,\\n        address tokenOwner,\\n        address curator,\\n        uint8 curatorFeePercentage,\\n        address auctionCurrency\\n    );\\n\\n    event AuctionApprovalUpdated(\\n        uint256 indexed auctionId,\\n        uint256 indexed tokenId,\\n        address indexed tokenContract,\\n        bool approved\\n    );\\n\\n    event AuctionReservePriceUpdated(\\n        uint256 indexed auctionId,\\n        uint256 indexed tokenId,\\n        address indexed tokenContract,\\n        uint256 reservePrice\\n    );\\n\\n    event AuctionBid(\\n        uint256 indexed auctionId,\\n        uint256 indexed tokenId,\\n        address indexed tokenContract,\\n        address sender,\\n        uint256 value,\\n        bool firstBid,\\n        bool extended\\n    );\\n\\n    event AuctionDurationExtended(\\n        uint256 indexed auctionId,\\n        uint256 indexed tokenId,\\n        address indexed tokenContract,\\n        uint256 duration\\n    );\\n\\n    event AuctionEnded(\\n        uint256 indexed auctionId,\\n        uint256 indexed tokenId,\\n        address indexed tokenContract,\\n        address tokenOwner,\\n        address curator,\\n        address winner,\\n        uint256 amount,\\n        uint256 curatorFee,\\n        address auctionCurrency\\n    );\\n\\n    event AuctionCanceled(\\n        uint256 indexed auctionId,\\n        uint256 indexed tokenId,\\n        address indexed tokenContract,\\n        address tokenOwner\\n    );\\n\\n    function createAuction(\\n        uint256 tokenId,\\n        address tokenContract,\\n        uint256 duration,\\n        uint256 reservePrice,\\n        address payable curator,\\n        uint8 curatorFeePercentages,\\n        address auctionCurrency\\n    ) external returns (uint256);\\n\\n    function auctions(uint256 auctionId) external view returns (Auction memory);\\n\\n    function minBidIncrementPercentage() external view returns (uint8);\\n\\n    function setAuctionApproval(uint256 auctionId, bool approved) external;\\n\\n    function setAuctionReservePrice(uint256 auctionId, uint256 reservePrice)\\n        external;\\n\\n    function createBid(uint256 auctionId, uint256 amount) external payable;\\n\\n    function endAuction(uint256 auctionId) external;\\n\\n    function cancelAuction(uint256 auctionId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/market-wrapper/IMarketWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.5;\\n\\n/**\\n * @title IMarketWrapper\\n * @author Anna Carroll\\n * @notice IMarketWrapper provides a common interface for\\n * interacting with NFT auction markets.\\n * Contracts can abstract their interactions with\\n * different NFT markets using IMarketWrapper.\\n * NFT markets can become compatible with any contract\\n * using IMarketWrapper by deploying a MarketWrapper contract\\n * that implements this interface using the logic of their Market.\\n *\\n * WARNING: MarketWrapper contracts should NEVER write to storage!\\n * When implementing a MarketWrapper, exercise caution; a poorly implemented\\n * MarketWrapper contract could permanently lose access to the NFT or user funds.\\n */\\ninterface IMarketWrapper {\\n    /**\\n     * @notice Determine whether there is an existing auction\\n     * for this token on the underlying market\\n     * @return TRUE if the auction exists\\n     */\\n    function auctionExists(uint256 auctionId) external view returns (bool);\\n\\n    /**\\n     * @notice Determine whether the given auctionId is\\n     * an auction for the tokenId + nftContract\\n     * @return TRUE if the auctionId matches the tokenId + nftContract\\n     */\\n    function auctionIdMatchesToken(\\n        uint256 auctionId,\\n        address nftContract,\\n        uint256 tokenId\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Calculate the minimum next bid for this auction\\n     * @return minimum bid amount\\n     */\\n    function getMinimumBid(uint256 auctionId) external view returns (uint256);\\n\\n    /**\\n     * @notice Query the current highest bidder for this auction\\n     * @return highest bidder\\n     */\\n    function getCurrentHighestBidder(uint256 auctionId)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Submit bid to Market contract\\n     */\\n    function bid(uint256 auctionId, uint256 bidAmount) external;\\n\\n    /**\\n     * @notice Determine whether the auction has been finalized\\n     * @return TRUE if the auction has been finalized\\n     */\\n    function isFinalized(uint256 auctionId) external view returns (bool);\\n\\n    /**\\n     * @notice Finalize the results of the auction\\n     */\\n    function finalize(uint256 auctionId) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zoraAuctionHouse\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"auctionExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"auctionIdMatchesToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getCurrentHighestBidder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getMinimumBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"isFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ZoraMarketWrapper","CompilerVersion":"v0.8.5+commit.a4f2e591","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000e468ce99444174bd3bbbed09209577d25d1ad673","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}