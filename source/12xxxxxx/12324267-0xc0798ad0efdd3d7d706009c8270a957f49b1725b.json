{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: contracts/IAlohaNFT.sol\r\n\r\npragma solidity ^0.6.6;\r\n\r\ninterface IAlohaNFT {\r\n    function awardItem(\r\n        address wallet,\r\n        uint256 tokenImage,\r\n        uint256 tokenRarity,\r\n        uint256 tokenBackground\r\n    ) external returns (uint256);\r\n\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function tokenRarity(uint256 tokenId) external returns (uint256);\r\n    function tokenImage(uint256 tokenId) external returns (uint256);\r\n    function tokenBackground(uint256 tokenId) external returns (uint256);\r\n}\r\n\r\n// File: contracts/AlohaStaking.sol\r\n\r\npragma solidity 0.6.6;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AlohaStakingV2 is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeMath for uint8;\r\n\r\n    /* Events */\r\n    event SettedPool(\r\n        uint256 indexed alohaAmount,\r\n        uint256 indexed erc20Amount,\r\n        uint256 duration,\r\n        uint256 rarity,\r\n        uint256 date\r\n    );\r\n    event Staked(\r\n        address indexed wallet,\r\n        address indexed erc20Address,\r\n        uint256 rarity,\r\n        uint256 endDate,\r\n        uint256 tokenImage,\r\n        uint256 tokenBackground,\r\n        uint256 alohaAmount,\r\n        uint256 erc20Amount,\r\n        uint256 date\r\n    );\r\n    event Withdrawal(\r\n        address indexed wallet,\r\n        address indexed erc20Address,\r\n        uint256 rarity,\r\n        uint256 originalAlohaAmount,\r\n        uint256 originalErc20Amount,\r\n        uint256 receivedAlohaAmount,\r\n        uint256 receivedErc20Amount,\r\n        uint256 erc721Id,\r\n        uint256 date\r\n    );\r\n    event Transfered(\r\n        address indexed wallet,\r\n        address indexed erc20Address,\r\n        uint256 amount,\r\n        uint256 date\r\n    );\r\n\r\n    /* Vars */\r\n    uint256 public fee;\r\n    address public alohaERC20;\r\n    address public alohaERC721;\r\n    uint256 public backgrounds;\r\n    address[] public feesDestinators;\r\n    uint256[] public feesPercentages;\r\n\r\n    struct Pool {\r\n        uint256 alohaAmount;\r\n        uint256 erc20Amount; // 0 when is not a PairPool\r\n        uint256 duration;\r\n        uint256 rarity;\r\n    }\r\n    struct Stake {\r\n        uint256 endDate;\r\n        uint256 tokenImage;\r\n        uint256 tokenBackground;\r\n        uint256 alohaAmount;\r\n        uint256 erc20Amount;  // 0 when is not a PairPool\r\n    }\r\n\r\n    // image => rarity\r\n    mapping (uint256 => uint256) public rewardsMap;\r\n    // rarity => [image]\r\n    mapping (uint256 => uint256[]) public rarityByImages;\r\n    // rarity => totalImages\r\n    mapping (uint256 => uint256) public rarityByImagesTotal;\r\n    // image => rarity => limit\r\n    mapping (uint256 => mapping(uint256 => uint256)) public limitByRarityAndImage;\r\n    // image => rarity => totalTokens\r\n    mapping (uint256 => mapping(uint256 => uint256)) public totalTokensByRarityAndImage;\r\n    // erc20Address => rarity => Pool\r\n    mapping (address => mapping(uint256 => Pool)) public poolsMap;\r\n    // userAddress => erc20Address => rarity => Stake \r\n    mapping (address => mapping(address => mapping(uint256 => Stake))) public stakingsMap;\r\n    // erc20Address => totalStaked \r\n    mapping (address => uint256) public totalStaked;\r\n\r\n    /* Modifiers */\r\n    modifier imageNotExists(uint256 _image) {\r\n        require(\r\n            !_existsReward(_image),\r\n            \"AlohaStaking: Image for reward already exists\"\r\n        );\r\n        _;\r\n    }\r\n    modifier validRarity(uint256 _rarity) {\r\n        require(\r\n            _rarity >= 1 && _rarity <= 3,\r\n            \"AlohaStaking: Rarity must be 1, 2 or 3\"\r\n        );\r\n        _;\r\n    }\r\n    modifier poolExists(address _erc20, uint256 _rarity) {\r\n        require(\r\n            _existsPool(_erc20, _rarity),\r\n            \"AlohaStaking: Pool for ERC20 Token and rarity not exists\"\r\n        );\r\n        _;\r\n    }\r\n    modifier rarityAvailable(uint256 _rarity) {\r\n        require(\r\n            !(rarityByImagesTotal[_rarity] == 0),\r\n            \"AlohaStaking: Rarity not available\"\r\n        );\r\n        _;\r\n    }\r\n    modifier addressNotInStake(address _userAddress, address _erc20, uint256 _rarity) {\r\n        require(\r\n            (stakingsMap[msg.sender][_erc20][_rarity].endDate == 0),\r\n            \"AlohaStaking: Address already stakes in this pool\"\r\n        );\r\n        _;\r\n    }\r\n    modifier addressInStake(address _userAddress, address _erc20, uint256 _rarity) {\r\n        require(\r\n            !(stakingsMap[msg.sender][_erc20][_rarity].endDate == 0),\r\n            \"AlohaStaking: Address not stakes in this pool\"\r\n        );\r\n        _;\r\n    }\r\n    modifier stakeEnded(address _userAddress, address _erc20, uint256 _rarity) {\r\n        require(\r\n            (_getTime() > stakingsMap[msg.sender][_erc20][_rarity].endDate),\r\n            \"AlohaStaking: Stake duration has not ended yet\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /* Public Functions */\r\n    constructor(\r\n        address _alohaERC20,\r\n        address _alohaERC721,\r\n        uint256 _backgrounds,\r\n        uint256 _fee\r\n    ) public {\r\n        require(address(_alohaERC20) != address(0)); \r\n        require(address(_alohaERC721) != address(0));\r\n\r\n        alohaERC20 = _alohaERC20;\r\n        alohaERC721 = _alohaERC721;\r\n        backgrounds = _backgrounds;\r\n        fee = _fee;\r\n    }\r\n\r\n    /**\r\n    * @dev Stake ALOHA to get a random token of the selected rarity\r\n    */\r\n    function simpleStake(\r\n        uint256 _tokenRarity\r\n    )\r\n        public\r\n    {\r\n        pairStake(alohaERC20, _tokenRarity);\r\n    }\r\n\r\n    /**\r\n    * @dev Stake ALOHA/TOKEN to get a random token of the selected rarity\r\n    */\r\n    function pairStake(\r\n        address _erc20Token,\r\n        uint256 _tokenRarity\r\n    )\r\n        public\r\n        rarityAvailable(_tokenRarity)\r\n        poolExists(_erc20Token, _tokenRarity)\r\n        addressNotInStake(msg.sender, _erc20Token, _tokenRarity)\r\n    {\r\n        uint256 randomImage = _getRandomImage(_tokenRarity);\r\n        uint256 _endDate = _getTime() + poolsMap[_erc20Token][_tokenRarity].duration;\r\n        uint256 randomBackground = _randomB(backgrounds);\r\n\r\n        uint256 alohaAmount = poolsMap[_erc20Token][_tokenRarity].alohaAmount;\r\n        uint256 erc20Amount = poolsMap[_erc20Token][_tokenRarity].erc20Amount;\r\n\r\n        _transferStake(msg.sender, alohaERC20, alohaAmount);\r\n        totalStaked[alohaERC20] += alohaAmount;\r\n        \r\n        if (_erc20Token != alohaERC20) {\r\n            _transferStake(msg.sender, _erc20Token, erc20Amount);\r\n            totalStaked[_erc20Token] += erc20Amount;\r\n        }\r\n\r\n        stakingsMap[msg.sender][_erc20Token][_tokenRarity] = Stake({\r\n            endDate: _endDate,\r\n            tokenImage: randomImage,\r\n            tokenBackground: randomBackground,\r\n            alohaAmount: alohaAmount,\r\n            erc20Amount: erc20Amount\r\n        });\r\n\r\n        emit Staked(\r\n            msg.sender,\r\n            _erc20Token,\r\n            _tokenRarity,\r\n            _endDate,\r\n            randomImage,\r\n            randomBackground,\r\n            alohaAmount,\r\n            erc20Amount,\r\n            _getTime()\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Withdraw ALOHA and claim your random NFT for the selected rarity\r\n    */\r\n    function simpleWithdraw(\r\n        uint256 _tokenRarity\r\n    )\r\n        public\r\n    {\r\n        pairWithdraw(alohaERC20, _tokenRarity);\r\n    }\r\n\r\n    /**\r\n    * @dev Withdraw ALOHA/TOKEN and claim your random NFT for the selected rarity\r\n    */\r\n    function pairWithdraw(\r\n        address _erc20Token,\r\n        uint256 _tokenRarity\r\n    )\r\n        public\r\n        nonReentrant()\r\n        addressInStake(msg.sender, _erc20Token, _tokenRarity)\r\n        stakeEnded(msg.sender, _erc20Token, _tokenRarity)\r\n    {\r\n        _withdraw(_erc20Token, _tokenRarity, true);\r\n    }\r\n\r\n    /**\r\n    * @dev Withdra ALOHA without generating your NFT. This can be done before release time is reached.\r\n    */\r\n    function forceSimpleWithdraw(\r\n        uint256 _tokenRarity\r\n    )\r\n        public\r\n    {\r\n        forcePairWithdraw(alohaERC20, _tokenRarity);\r\n    }\r\n\r\n    /**\r\n    * @dev Withdraw ALOHA/TOKEN without generating your NFT. This can be done before release time is reached.\r\n    */\r\n    function forcePairWithdraw(\r\n        address _erc20Token,\r\n        uint256 _tokenRarity\r\n    )\r\n        public\r\n        nonReentrant()\r\n        addressInStake(msg.sender, _erc20Token, _tokenRarity)\r\n    {\r\n        _withdraw(_erc20Token, _tokenRarity, false);\r\n    }\r\n\r\n    /**\r\n    * @dev Returns how many fees we collected from withdraws of one token.\r\n    */\r\n    function getAcumulatedFees(address _erc20Token) public view returns (uint256) {\r\n        uint256 balance = IERC20(_erc20Token).balanceOf(address(this));\r\n\r\n        if (balance > 0) {\r\n            return balance.sub(totalStaked[_erc20Token]);\r\n        }\r\n\r\n        return 0; \r\n    } \r\n\r\n    /**\r\n    * @dev Send all the acumulated fees for one token to the fee destinators.\r\n    */\r\n    function withdrawAcumulatedFees(address _erc20Token) public {\r\n        uint256 total = getAcumulatedFees(_erc20Token);\r\n        \r\n        for (uint8 i = 0; i < feesDestinators.length; i++) {\r\n            IERC20(_erc20Token).transfer(\r\n                feesDestinators[i],\r\n                total.mul(feesPercentages[i]).div(100)\r\n            );\r\n        }\r\n    }\r\n\r\n    /* Governance Functions */\r\n\r\n    /**\r\n    * @dev Sets the fee for every withdraw.\r\n    */\r\n    function setFee(uint256 _fee) public onlyOwner() {\r\n        fee = _fee;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds a new NFT to the pools, so users can stake for it.\r\n    */\r\n    function createReward(\r\n        uint256 _tokenImage,\r\n        uint256 _tokenRarity,\r\n        uint256 _limit\r\n    )\r\n        public\r\n        onlyOwner()\r\n        imageNotExists(_tokenImage)\r\n        validRarity(_tokenRarity)\r\n    {\r\n        rewardsMap[_tokenImage] = _tokenRarity;\r\n        rarityByImages[_tokenRarity].push(_tokenImage);\r\n        rarityByImagesTotal[_tokenRarity] += 1;\r\n        limitByRarityAndImage[_tokenImage][_tokenRarity] = _limit;\r\n    }\r\n\r\n    /**\r\n    * @dev Configure staking time and amount in ALOHA pool for one rarity.\r\n    */\r\n    function setSimplePool(\r\n        uint256 _alohaAmount,\r\n        uint256 _duration,\r\n        uint256 _tokenRarity\r\n    )\r\n        public\r\n        onlyOwner()\r\n        rarityAvailable(_tokenRarity)\r\n    {\r\n        poolsMap[alohaERC20][_tokenRarity] = Pool({\r\n            alohaAmount: _alohaAmount,\r\n            erc20Amount: 0,\r\n            duration: _duration,\r\n            rarity: _tokenRarity\r\n        });\r\n\r\n        emit SettedPool(\r\n            _alohaAmount,\r\n            0,\r\n            _duration,\r\n            _tokenRarity,\r\n            _getTime()\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Configure staking time and amount in ALOHA/TOKEN pool for one rarity.\r\n    */\r\n    function setPairPool(\r\n        uint256 _alohaAmount,\r\n        address _erc20Address,\r\n        uint256 _erc20Amount,\r\n        uint256 _duration,\r\n        uint256 _tokenRarity\r\n    )\r\n        public\r\n        onlyOwner()\r\n        rarityAvailable(_tokenRarity)\r\n    {\r\n        require(address(_erc20Address) != address(0));\r\n\r\n        poolsMap[_erc20Address][_tokenRarity] = Pool({\r\n            alohaAmount: _alohaAmount,\r\n            erc20Amount: _erc20Amount,\r\n            duration: _duration,\r\n            rarity: _tokenRarity\r\n        });\r\n\r\n        emit SettedPool(\r\n            _alohaAmount,\r\n            _erc20Amount,\r\n            _duration,\r\n            _tokenRarity,\r\n            _getTime()\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @dev Creates a new background for NFTs. New stakers could get this background.\r\n    */\r\n    function addBackground(uint8 increase)\r\n        public\r\n        onlyOwner()\r\n    {\r\n        backgrounds += increase;\r\n    }\r\n\r\n    /**\r\n    * @dev Configure how to distribute the fees for user's withdraws.\r\n    */\r\n    function setFeesDestinatorsWithPercentages(\r\n        address[] memory _destinators,\r\n        uint256[] memory _percentages\r\n    )\r\n        public\r\n        onlyOwner()\r\n    {\r\n        require(_destinators.length <= 3, \"AlohaStaking: Destinators lenght more then 3\");\r\n        require(_percentages.length <= 3, \"AlohaStaking: Percentages lenght more then 3\");\r\n        require(_destinators.length == _percentages.length, \"AlohaStaking: Destinators and percentageslenght are not equals\");\r\n\r\n        uint256 total = 0;\r\n        for (uint8 i = 0; i < _percentages.length; i++) {\r\n            total += _percentages[i];\r\n        }\r\n        require(total == 100, \"AlohaStaking: Percentages sum must be 100\");\r\n\r\n        feesDestinators = _destinators;\r\n        feesPercentages = _percentages;\r\n    }\r\n\r\n    /* Internal functions */\r\n    function _existsReward(uint256 _tokenImage) internal view returns (bool) {\r\n        return rewardsMap[_tokenImage] != 0;\r\n    }\r\n\r\n    function _existsPool(address _erc20Token, uint256 _rarity) internal view returns (bool) {\r\n        return poolsMap[_erc20Token][_rarity].duration != 0;\r\n    }\r\n\r\n    function _getTime() internal view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    /**\r\n    * @dev Apply withdraw fees to the amounts.\r\n    */\r\n    function _applyStakeFees(\r\n        address _erc20Token,\r\n        uint256 _tokenRarity\r\n    ) internal view returns (\r\n        uint256 _alohaAmountAfterFees,\r\n        uint256 _erc20AmountAfterFees\r\n    ) {\r\n        uint256 alohaAmount = poolsMap[_erc20Token][_tokenRarity].alohaAmount;\r\n        uint256 alohaAmountAfterFees = alohaAmount.sub(alohaAmount.mul(fee).div(10000));\r\n        uint256 erc20AmountAfterFees = 0;\r\n\r\n        if (_erc20Token != alohaERC20) {\r\n            uint256 erc20Amount = poolsMap[_erc20Token][_tokenRarity].erc20Amount;\r\n            erc20AmountAfterFees = erc20Amount.sub(erc20Amount.mul(fee).div(10000));\r\n        }\r\n\r\n        return (alohaAmountAfterFees, erc20AmountAfterFees);\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers erc20 tokens to this contract.\r\n    */\r\n    function _transferStake(\r\n        address _wallet,\r\n        address _erc20,\r\n        uint256 _amount\r\n    ) internal {\r\n        require(IERC20(_erc20).transferFrom(_wallet, address(this), _amount), \"Must approve the ERC20 first\");\r\n\r\n        emit Transfered(_wallet, _erc20, _amount, _getTime());\r\n    }\r\n\r\n    /**\r\n    * @dev Transfers erc20 tokens from this contract to the wallet.\r\n    */\r\n    function _transferWithdrawRewards(\r\n        address _wallet,\r\n        address _erc20,\r\n        uint256 _amount\r\n    ) internal {\r\n        require(IERC20(_erc20).transfer(_wallet, _amount), \"Must approve the ERC20 first\");\r\n\r\n        emit Transfered(_wallet, _erc20, _amount, _getTime());\r\n    }\r\n\r\n    /**\r\n    * @dev Clear the stake state for a wallet and a rarity.\r\n    */\r\n    function _clearStake(address wallet, address _erc20Token, uint256 _tokenRarity) internal {\r\n        stakingsMap[wallet][_erc20Token][_tokenRarity].endDate = 0;\r\n        stakingsMap[wallet][_erc20Token][_tokenRarity].tokenImage = 0;\r\n        stakingsMap[wallet][_erc20Token][_tokenRarity].tokenBackground = 0;\r\n        stakingsMap[wallet][_erc20Token][_tokenRarity].alohaAmount = 0;\r\n        stakingsMap[wallet][_erc20Token][_tokenRarity].erc20Amount = 0;\r\n    }\r\n\r\n    /**\r\n    * @dev Withdraw tokens and mints the NFT if claimed.\r\n    */\r\n    function _withdraw(address _erc20Token, uint256 _tokenRarity, bool claimReward) internal {\r\n        uint256 alohaAmount = poolsMap[_erc20Token][_tokenRarity].alohaAmount;\r\n        uint256 erc20Amount = poolsMap[_erc20Token][_tokenRarity].erc20Amount;\r\n        uint256 alohaAmountAfterFees;\r\n        uint256 erc20AmountAfterFees;\r\n    \r\n        if (!claimReward) {\r\n            alohaAmountAfterFees = alohaAmount;\r\n            erc20AmountAfterFees = erc20Amount;\r\n        } else {\r\n            (alohaAmountAfterFees, erc20AmountAfterFees) = _applyStakeFees(_erc20Token, _tokenRarity);\r\n        }\r\n\r\n        _transferWithdrawRewards(msg.sender, alohaERC20, alohaAmountAfterFees);\r\n        totalStaked[alohaERC20] -= alohaAmount;\r\n\r\n        if (_erc20Token != alohaERC20) {\r\n            _transferWithdrawRewards(msg.sender, _erc20Token, erc20AmountAfterFees);\r\n            totalStaked[_erc20Token] -= erc20Amount;\r\n        }\r\n\r\n        uint256 tokenId = 0;\r\n        uint256 image = stakingsMap[msg.sender][_erc20Token][_tokenRarity].tokenImage;\r\n        if (claimReward) {\r\n            uint256 background = stakingsMap[msg.sender][_erc20Token][_tokenRarity].tokenBackground;\r\n\r\n            tokenId = IAlohaNFT(alohaERC721).awardItem(msg.sender, _tokenRarity, image, background);\r\n        } else {\r\n            totalTokensByRarityAndImage[image][_tokenRarity] -= 1;\r\n        }\r\n\r\n        emit Withdrawal(\r\n            msg.sender,\r\n            _erc20Token,\r\n            _tokenRarity,\r\n            alohaAmount,\r\n            erc20Amount,\r\n            alohaAmountAfterFees,\r\n            erc20AmountAfterFees,\r\n            tokenId,\r\n            _getTime()\r\n        );\r\n\r\n        _clearStake(msg.sender, _erc20Token, _tokenRarity);\r\n    }\r\n\r\n    function _getRandomImage(uint256 _rarity) internal returns (uint256) {\r\n        uint256 selectedImage = rarityByImages[_rarity][_randomA(rarityByImagesTotal[_rarity]) - 1];\r\n\r\n        if (limitByRarityAndImage[selectedImage][_rarity] == 0 || \r\n            totalTokensByRarityAndImage[selectedImage][_rarity] < limitByRarityAndImage[selectedImage][_rarity]\r\n        ) {\r\n            totalTokensByRarityAndImage[selectedImage][_rarity] += 1;\r\n            return selectedImage;\r\n        }\r\n\r\n        for (uint256 index = 1; index <= rarityByImagesTotal[_rarity]; index++) {\r\n            selectedImage = rarityByImages[_rarity][index - 1];\r\n            if (limitByRarityAndImage[selectedImage][_rarity] == 0 ||\r\n                totalTokensByRarityAndImage[selectedImage][_rarity] < limitByRarityAndImage[selectedImage][_rarity]\r\n            ) {\r\n                totalTokensByRarityAndImage[selectedImage][_rarity] += 1;\r\n                return selectedImage;\r\n            }\r\n        }\r\n\r\n        revert(\"AlohaStaking: All images has reached the limit\");\r\n    }\r\n\r\n    /**\r\n    * @dev Generates a \"random\" number using the numbers of backgrounds that we have.\r\n    */\r\n    function _randomA(uint256 _limit) internal view returns (uint8) {\r\n        uint256 _gasleft = gasleft();\r\n        bytes32 _blockhash = blockhash(block.number-1);\r\n        bytes32 _structHash = keccak256(\r\n            abi.encode(\r\n                _blockhash,\r\n                backgrounds,\r\n                _gasleft,\r\n                _limit\r\n            )\r\n        );\r\n        uint256 _randomNumber  = uint256(_structHash);\r\n        assembly {_randomNumber := add(mod(_randomNumber, _limit),1)}\r\n        return uint8(_randomNumber);\r\n    }\r\n\r\n    /**\r\n    * @dev Generates a \"random\" number using the current block timestamp.\r\n    */\r\n    function _randomB(uint256 _limit) internal view returns (uint256) {\r\n        uint256 _gasleft = gasleft();\r\n        bytes32 _blockhash = blockhash(block.number-1);\r\n        bytes32 _structHash = keccak256(\r\n            abi.encode(\r\n                _blockhash,\r\n                _getTime(),\r\n                _gasleft,\r\n                _limit\r\n            )\r\n        );\r\n        uint256 _randomNumber  = uint256(_structHash);\r\n        assembly {_randomNumber := add(mod(_randomNumber, _limit),1)}\r\n        return uint8(_randomNumber);\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alohaERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_alohaERC721\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_backgrounds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"alohaAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"erc20Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"SettedPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenImage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenBackground\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"alohaAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"erc20Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Transfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalAlohaAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originalErc20Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAlohaAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedErc20Amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"erc721Id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"increase\",\"type\":\"uint8\"}],\"name\":\"addBackground\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alohaERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alohaERC721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"backgrounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenImage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenRarity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"createReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feesDestinators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feesPercentages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenRarity\",\"type\":\"uint256\"}],\"name\":\"forcePairWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenRarity\",\"type\":\"uint256\"}],\"name\":\"forceSimpleWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"}],\"name\":\"getAcumulatedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"limitByRarityAndImage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenRarity\",\"type\":\"uint256\"}],\"name\":\"pairStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenRarity\",\"type\":\"uint256\"}],\"name\":\"pairWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolsMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"alohaAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc20Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rarityByImages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rarityByImagesTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_destinators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_percentages\",\"type\":\"uint256[]\"}],\"name\":\"setFeesDestinatorsWithPercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_alohaAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_erc20Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenRarity\",\"type\":\"uint256\"}],\"name\":\"setPairPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_alohaAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenRarity\",\"type\":\"uint256\"}],\"name\":\"setSimplePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenRarity\",\"type\":\"uint256\"}],\"name\":\"simpleStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenRarity\",\"type\":\"uint256\"}],\"name\":\"simpleWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingsMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenImage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenBackground\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alohaAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc20Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalTokensByRarityAndImage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"}],\"name\":\"withdrawAcumulatedFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AlohaStakingV2","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000455f7ef6d8bcfc35f9337e85aee1b0600a59fabe000000000000000000000000524833d8b9c2194ead830fd205e8faed9801e7760000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000012c","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://66e9ac8ae4bf18d1bcefb0b5171e4bc4ea77ff26c3cd74f7c9e242bcf4692946"}]}