{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Users/carme/OneDrive/Documents/Crypto/projects/ethereum/Dirty/TRUFFLE WORKING/contracts/DirtyFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// Dirty.Finance Staking Contract Version 1.0\\r\\n// Stake your $dirty or LP tokens to receive Dirtycash rewards (XXXCASH)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"./dirtycash.sol\\\";\\r\\n\\r\\ninterface IDirtyNFT {\\r\\n  function mint(address to, uint256 id) external;\\r\\n  function getCreatorAddress(uint256 _nftid) external view returns (address);\\r\\n  function getCreatorPrice(uint256 _nftid) external view returns (uint256);\\r\\n  function getCreatorSplit(uint256 _nftid) external view returns (uint256);\\r\\n  function getCreatorMintLimit(uint256 _nftid) external view returns (uint256);\\r\\n  function getCreatorRedeemable(uint256 _nftid) external view returns (bool);\\r\\n  function getCreatorPurchasable(uint256 _nftid) external view returns (bool);\\r\\n  function getCreatorExists(uint256 _nftid) external view returns (bool);\\r\\n  function mintedCountbyID(uint256 _id) external view returns (uint256);\\r\\n}\\r\\n\\r\\n// Allows another user(s) to change contract variables\\r\\ncontract Authorizable is Ownable {\\r\\n\\r\\n    mapping(address => bool) public authorized;\\r\\n\\r\\n    modifier onlyAuthorized() {\\r\\n        require(authorized[_msgSender()] || owner() == address(_msgSender()), \\\"Sender is not authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function addAuthorized(address _toAdd) onlyOwner public {\\r\\n        require(_toAdd != address(0), \\\"Address is the zero address\\\");\\r\\n        authorized[_toAdd] = true;\\r\\n    }\\r\\n\\r\\n    function removeAuthorized(address _toRemove) onlyOwner public {\\r\\n        require(_toRemove != address(0), \\\"Address is the zero address\\\");\\r\\n        require(_toRemove != address(_msgSender()), \\\"Sender cannot remove themself\\\");\\r\\n        authorized[_toRemove] = false;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\ncontract DirtyFarm is Ownable, Authorizable, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    \\r\\n\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // How many LP tokens the user has provided.\\r\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\r\\n        //\\r\\n        // We do some fancy math here. Basically, any point in time, the amount of DIRTYCASH tokens\\r\\n        // entitled to a user but is pending to be distributed is:\\r\\n        //\\r\\n        //   pending reward = (user.amount * pool.accDirtyPerShare) - user.rewardDebt\\r\\n        //\\r\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\r\\n        //   1. The pool's `accDirtyPerShare` (and `lastRewardBlock`) gets updated.\\r\\n        //   2. User receives the pending reward sent to his/her address.\\r\\n        //   3. User's `amount` gets updated.\\r\\n        //   4. User's `rewardDebt` gets updated.\\r\\n    }\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        IERC20 lpToken; // Address of LP token contract.\\r\\n        uint256 allocPoint; // How many allocation points assigned to this pool. DIRTYCASH tokens to distribute per block.\\r\\n        uint256 lastRewardBlock; // Last block number that DIRTYCASH tokens distribution occurs.\\r\\n        uint256 accDirtyPerShare; // Accumulated DIRTYCASH tokens per share, times 1e12. See below.\\r\\n        uint256 runningTotal; // Total accumulation of tokens (not including reflection, pertains to pool 1 ($Dirty))\\r\\n    }\\r\\n\\r\\n    DirtyCash public immutable dirtycash; // The DIRTYCASH ERC-20 Token.\\r\\n    uint256 private dirtyPerBlock; // DIRTYCASH tokens distributed per block. Use getDirtyPerBlock() to get the updated reward.\\r\\n\\r\\n    PoolInfo[] public poolInfo; // Info of each pool.\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo; // Info of each user that stakes LP tokens.\\r\\n    \\r\\n    uint256 public totalAllocPoint; // Total allocation points. Must be the sum of all allocation points in all pools.\\r\\n    uint256 public startBlock; // The block number when DIRTYCASH token mining starts.\\r\\n\\r\\n    uint256 public blockRewardUpdateCycle = 1 days; // The cycle in which the dirtyPerBlock gets updated.\\r\\n    uint256 public blockRewardLastUpdateTime = block.timestamp; // The timestamp when the block dirtyPerBlock was last updated.\\r\\n    uint256 public blocksPerDay = 5000; // The estimated number of mined blocks per day, lowered so rewards are halved to start.\\r\\n    uint256 public blockRewardPercentage = 10; // The percentage used for dirtyPerBlock calculation.\\r\\n    uint256 public unstakeTime = 86400; // Time in seconds to wait for withdrawal default (86400).\\r\\n    uint256 public poolReward = 1000000000000000000000; //starting basis for poolReward (default 1k).\\r\\n    uint256 public conversionRate = 100000; //conversion rate of DIRTYCASH => $dirty (default 100k).\\r\\n    bool public enableRewardWithdraw = false; //whether DIRTYCASH is withdrawable from this contract (default false).\\r\\n    uint256 public minDirtyStake = 21000000000000000000000000; //min stake amount (default 21 million Dirty).\\r\\n    uint256 public maxDirtyStake = 2100000000000000000000000000; //max stake amount (default 2.1 billion Dirty).\\r\\n    uint256 public minLPStake = 1000000000000000000000; //min lp stake amount (default 1000 LP tokens).\\r\\n    uint256 public maxLPStake = 10000000000000000000000; //max lp stake amount (default 10,000 LP tokens).\\r\\n    uint256 public promoAmount = 200000000000000000000; //amount of DIRTYCASH to give to new stakers (default 200 DIRTYCASH).\\r\\n    bool public promoActive = true; //whether the promotional amount of DIRTYCASH is given out to new stakers (default is True).\\r\\n    uint256 public rewardSegment = poolReward.mul(100).div(200); //reward segment for dynamic staking.\\r\\n    uint256 public ratio; //ratio of pool0 to pool1 for dynamic staking.\\r\\n    uint256 public lpalloc = 65; //starting pool allocation for LP side.\\r\\n    uint256 public stakealloc = 35; //starting pool allocation for Dirty side.\\r\\n    uint256 public allocMultiplier = 5; //ratio * allocMultiplier to balance out the pools.\\r\\n    bool public dynamicStakingActive = true; //whether the staking pool will auto-balance rewards or not.\\r\\n\\r\\n    mapping(address => bool) public addedLpTokens; // Used for preventing LP tokens from being added twice in add().\\r\\n    mapping(uint256 => mapping(address => uint256)) public unstakeTimer; // Used to track time since unstake requested.\\r\\n    mapping(address => uint256) private userBalance; // Balance of DirtyCash for each user that survives staking/unstaking/redeeming.\\r\\n    mapping(address => bool) private promoWallet; // Whether the wallet has received promotional DIRTYCASH.\\r\\n    mapping(uint256 => uint256) public totalEarnedCreator; // Total amount of $dirty token spent to creator on a particular NFT.\\r\\n    mapping(uint256 => uint256) public totalEarnedPool; // Total amount of $dirty token spent to pool on a particular NFT.\\r\\n    mapping(uint256 => uint256) public totalEarnedBurn; // Total amount of $dirty token spent to burn on a particular NFT.\\r\\n    mapping(uint256 =>mapping(address => bool)) public userStaked; // Denotes whether the user is currently staked or not.\\r\\n    \\r\\n    address public NFTAddress; //NFT contract address\\r\\n    address public DirtyCashAddress; //DIRTYCASH contract address\\r\\n\\r\\n    IERC20 dirtytoken = IERC20(0x4faB740779C73aA3945a5CF6025bF1b0e7F6349C); //dirty token\\r\\n\\r\\n    event Unstake(address indexed user, uint256 indexed pid);\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event WithdrawRewardsOnly(address indexed user, uint256 amount);\\r\\n\\r\\n    constructor(\\r\\n        DirtyCash _dirty,\\r\\n        uint256 _startBlock\\r\\n    ) {\\r\\n        require(address(_dirty) != address(0), \\\"DIRTYCASH address is invalid\\\");\\r\\n        //require(_startBlock >= block.number, \\\"startBlock is before current block\\\");\\r\\n\\r\\n        dirtycash = _dirty;\\r\\n        DirtyCashAddress = address(_dirty);\\r\\n        startBlock = _startBlock;\\r\\n    }\\r\\n\\r\\n    modifier updateDirtyPerBlock() {\\r\\n        (uint256 blockReward, bool update) = getDirtyPerBlock();\\r\\n        if (update) {\\r\\n            dirtyPerBlock = blockReward;\\r\\n            blockRewardLastUpdateTime = block.timestamp;\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getDirtyPerBlock() public view returns (uint256, bool) {\\r\\n        if (block.number < startBlock) {\\r\\n            return (0, false);\\r\\n        }\\r\\n\\r\\n        if (block.timestamp >= getDirtyPerBlockUpdateTime() || dirtyPerBlock == 0) {\\r\\n            return (poolReward.mul(blockRewardPercentage).div(100).div(blocksPerDay), true);\\r\\n        }\\r\\n\\r\\n        return (dirtyPerBlock, false);\\r\\n    }\\r\\n\\r\\n    function getDirtyPerBlockUpdateTime() public view returns (uint256) {\\r\\n        // if blockRewardUpdateCycle = 1 day then roundedUpdateTime = today's UTC midnight\\r\\n        uint256 roundedUpdateTime = blockRewardLastUpdateTime - (blockRewardLastUpdateTime % blockRewardUpdateCycle);\\r\\n        // if blockRewardUpdateCycle = 1 day then calculateRewardTime = tomorrow's UTC midnight\\r\\n        uint256 calculateRewardTime = roundedUpdateTime + blockRewardUpdateCycle;\\r\\n        return calculateRewardTime;\\r\\n    }\\r\\n\\r\\n    function poolLength() external view returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    // Add a new lp to the pool. Can only be called by the owner.\\r\\n    function add(\\r\\n        uint256 _allocPoint,\\r\\n        IERC20 _lpToken,\\r\\n        bool _withUpdate\\r\\n    ) public onlyOwner {\\r\\n        require(address(_lpToken) != address(0), \\\"LP token is invalid\\\");\\r\\n        require(!addedLpTokens[address(_lpToken)], \\\"LP token is already added\\\");\\r\\n\\r\\n        require(_allocPoint >= 1 && _allocPoint <= 100, \\\"_allocPoint is outside of range 1-100\\\");\\r\\n\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\r\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\r\\n        poolInfo.push(PoolInfo({\\r\\n            lpToken : _lpToken,\\r\\n            allocPoint : _allocPoint,\\r\\n            lastRewardBlock : lastRewardBlock,\\r\\n            accDirtyPerShare : 0,\\r\\n            runningTotal : 0 \\r\\n        }));\\r\\n\\r\\n        addedLpTokens[address(_lpToken)] = true;\\r\\n    }\\r\\n\\r\\n    // Update the given pool's DIRTYCASH token allocation point. Can only be called by the owner.\\r\\n    function set(\\r\\n        uint256 _pid,\\r\\n        uint256 _allocPoint,\\r\\n        bool _withUpdate\\r\\n    ) public onlyAuthorized {\\r\\n        require(_allocPoint >= 1 && _allocPoint <= 100, \\\"_allocPoint is outside of range 1-100\\\");\\r\\n\\r\\n        if (_withUpdate) {\\r\\n            massUpdatePools();\\r\\n        }\\r\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\r\\n        poolInfo[_pid].allocPoint = _allocPoint;\\r\\n    }\\r\\n\\r\\n    // Update the given pool's DIRTYCASH token allocation point when pool.\\r\\n    function adjustPools(\\r\\n        uint256 _pid,\\r\\n        uint256 _allocPoint,\\r\\n        bool _withUpdate\\r\\n    ) internal {\\r\\n        require(_allocPoint >= 1 && _allocPoint <= 100, \\\"_allocPoint is outside of range 1-100\\\");\\r\\n\\r\\n        if (_withUpdate) {\\r\\n            updatePool(_pid);\\r\\n        }\\r\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\r\\n        poolInfo[_pid].allocPoint = _allocPoint;\\r\\n    }\\r\\n\\r\\n    // View function to see pending DIRTYCASH tokens on frontend.\\r\\n    function pendingRewards(uint256 _pid, address _user) public view returns (uint256) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 accDirtyPerShare = pool.accDirtyPerShare;\\r\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\r\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\r\\n            uint256 multiplier = block.number.sub(pool.lastRewardBlock);\\r\\n            (uint256 blockReward, ) = getDirtyPerBlock();\\r\\n            uint256 dirtyReward = multiplier.mul(blockReward).mul(pool.allocPoint).div(totalAllocPoint);\\r\\n            accDirtyPerShare = accDirtyPerShare.add(dirtyReward.mul(1e12).div(lpSupply));\\r\\n        }\\r\\n        return user.amount.mul(accDirtyPerShare).div(1e12).sub(user.rewardDebt);\\r\\n    }\\r\\n\\r\\n    // Update reward variables for all pools. Be careful of gas spending!\\r\\n    function massUpdatePools() public onlyAuthorized {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            updatePool(pid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update reward variables of the given pool to be up-to-date when lpSupply changes\\r\\n    // For every deposit/withdraw pool recalculates accumulated token value\\r\\n    function updatePool(uint256 _pid) public updateDirtyPerBlock {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (block.number <= pool.lastRewardBlock) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 lpSupply = pool.runningTotal; //pool.lpToken.balanceOf(address(this));\\r\\n        if (lpSupply == 0) {\\r\\n            pool.lastRewardBlock = block.number;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 multiplier = block.number.sub(pool.lastRewardBlock);\\r\\n        uint256 dirtyReward = multiplier.mul(dirtyPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\r\\n\\r\\n        // no minting is required, the contract should have DIRTYCASH token balance pre-allocated\\r\\n        // accumulated DIRTYCASH per share is stored multiplied by 10^12 to allow small 'fractional' values\\r\\n        pool.accDirtyPerShare = pool.accDirtyPerShare.add(dirtyReward.mul(1e12).div(lpSupply));\\r\\n        pool.lastRewardBlock = block.number;\\r\\n    }\\r\\n\\r\\n    function updatePoolReward(uint256 _amount) public onlyAuthorized {\\r\\n        poolReward = _amount;\\r\\n    }\\r\\n\\r\\n    // Deposit LP tokens/$Dirty to DirtyFarming for DIRTYCASH token allocation.\\r\\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\\r\\n\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\r\\n\\r\\n        updatePool(_pid);\\r\\n\\r\\n        if (_amount > 0) {\\r\\n\\r\\n            if(user.amount > 0) { //if user has already deposited, secure rewards before reconfiguring rewardDebt\\r\\n                uint256 tempRewards = pendingRewards(_pid, _msgSender());\\r\\n                userBalance[_msgSender()] = userBalance[_msgSender()].add(tempRewards);\\r\\n            }\\r\\n            \\r\\n            if (_pid != 0) { //$Dirty tokens\\r\\n                if(user.amount == 0) { //we only want the minimum to apply on first deposit, not subsequent ones\\r\\n                require(_amount >= minDirtyStake, \\\"You cannot stake less than the minimum required $Dirty\\\");\\r\\n                }\\r\\n                require(_amount.add(user.amount) <= maxDirtyStake, \\\"You cannot stake more than the maximum $Dirty\\\");\\r\\n                pool.runningTotal = pool.runningTotal.add(_amount);\\r\\n                user.amount = user.amount.add(_amount);  \\r\\n                pool.lpToken.safeTransferFrom(address(_msgSender()), address(this), _amount);\\r\\n                //function to update all totals here\\r\\n\\r\\n                \\r\\n            } else { //LP tokens\\r\\n                if(user.amount == 0) { //we only want the minimum to apply on first deposit, not subsequent ones\\r\\n                require(_amount >= minLPStake, \\\"You cannot stake less than the minimum LP Tokens\\\");\\r\\n                }\\r\\n                require(_amount.add(user.amount) <= maxLPStake, \\\"You cannot stake more than the maximum LP Tokens\\\");\\r\\n                pool.runningTotal = pool.runningTotal.add(_amount);\\r\\n                user.amount = user.amount.add(_amount);\\r\\n                pool.lpToken.safeTransferFrom(address(_msgSender()), address(this), _amount);\\r\\n            }\\r\\n            \\r\\n        \\r\\n            unstakeTimer[_pid][_msgSender()] = 9999999999;\\r\\n            userStaked[_pid][_msgSender()] = true;\\r\\n\\r\\n            if (!promoWallet[_msgSender()] && promoActive) {\\r\\n                userBalance[_msgSender()] = promoAmount; //give 200 promo DIRTYCASH\\r\\n                promoWallet[_msgSender()] = true;\\r\\n            }\\r\\n\\r\\n            if (dynamicStakingActive) {\\r\\n                updateVariablePoolReward();\\r\\n            }\\r\\n            \\r\\n            user.rewardDebt = user.amount.mul(pool.accDirtyPerShare).div(1e12);\\r\\n            emit Deposit(_msgSender(), _pid, _amount);\\r\\n\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setUnstakeTime(uint256 _time) external onlyAuthorized {\\r\\n\\r\\n        require(_time >= 0 || _time <= 172800, \\\"Time should be between 0 and 2 days (in seconds)\\\");\\r\\n        unstakeTime = _time;\\r\\n    }\\r\\n\\r\\n    //Call unstake to start countdown\\r\\n    function unstake(uint256 _pid) public {\\r\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\r\\n        require(user.amount > 0, \\\"You have no amount to unstake\\\");\\r\\n\\r\\n        unstakeTimer[_pid][_msgSender()] = block.timestamp.add(unstakeTime);\\r\\n        userStaked[_pid][_msgSender()] = false;\\r\\n        \\r\\n\\r\\n    }\\r\\n\\r\\n    //Get time remaining until able to withdraw tokens\\r\\n    function timeToUnstake(uint256 _pid, address _user) external view returns (uint256)  {\\r\\n\\r\\n        if (unstakeTimer[_pid][_user] > block.timestamp) {\\r\\n            return unstakeTimer[_pid][_user].sub(block.timestamp);\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    // Withdraw LP tokens from DirtyFarming\\r\\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\\r\\n\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_msgSender()];\\r\\n        uint256 userAmount = user.amount;\\r\\n        require(_amount > 0, \\\"Withdrawal amount must be greater than zero\\\");\\r\\n        require(user.amount >= _amount, \\\"Withdraw amount is greater than user amount\\\");\\r\\n        require(block.timestamp > unstakeTimer[_pid][_msgSender()], \\\"Unstaking wait period has not expired\\\");\\r\\n\\r\\n        updatePool(_pid);\\r\\n\\r\\n        if (_amount > 0) {\\r\\n\\r\\n            if (_pid != 0) { //$Dirty tokens\\r\\n                \\r\\n                uint256 lpSupply = pool.lpToken.balanceOf(address(this)); //get total amount of tokens\\r\\n                uint256 totalRewards = lpSupply.sub(pool.runningTotal); //get difference between contract address amount and ledger amount\\r\\n                if (totalRewards == 0) { //no rewards, just return 100% to the user\\r\\n\\r\\n                    uint256 tempRewards = pendingRewards(_pid, _msgSender());\\r\\n                    userBalance[_msgSender()] = userBalance[_msgSender()].add(tempRewards);\\r\\n\\r\\n                    pool.runningTotal = pool.runningTotal.sub(_amount);\\r\\n                    pool.lpToken.safeTransfer(address(_msgSender()), _amount);\\r\\n                    user.amount = user.amount.sub(_amount);\\r\\n                    emit Withdraw(_msgSender(), _pid, _amount);\\r\\n                    \\r\\n                } \\r\\n                if (totalRewards > 0) { //include reflection\\r\\n\\r\\n                    uint256 tempRewards = pendingRewards(_pid, _msgSender());\\r\\n                    userBalance[_msgSender()] = userBalance[_msgSender()].add(tempRewards);\\r\\n\\r\\n                    uint256 percentRewards = _amount.mul(100).div(pool.runningTotal); //get % of share out of 100\\r\\n                    uint256 reflectAmount = percentRewards.mul(totalRewards).div(100); //get % of reflect amount\\r\\n\\r\\n                    pool.runningTotal = pool.runningTotal.sub(_amount);\\r\\n                    user.amount = user.amount.sub(_amount);\\r\\n                    _amount = _amount.mul(99).div(100).add(reflectAmount);\\r\\n                    pool.lpToken.safeTransfer(address(_msgSender()), _amount);\\r\\n                    emit Withdraw(_msgSender(), _pid, _amount);\\r\\n                }               \\r\\n\\r\\n            } else {\\r\\n\\r\\n\\r\\n                uint256 tempRewards = pendingRewards(_pid, _msgSender());\\r\\n                \\r\\n                userBalance[_msgSender()] = userBalance[_msgSender()].add(tempRewards);\\r\\n                user.amount = user.amount.sub(_amount);\\r\\n                pool.runningTotal = pool.runningTotal.sub(_amount);\\r\\n                pool.lpToken.safeTransfer(address(_msgSender()), _amount);\\r\\n                emit Withdraw(_msgSender(), _pid, _amount);\\r\\n            }\\r\\n            \\r\\n\\r\\n            if (dynamicStakingActive) {\\r\\n                    updateVariablePoolReward();\\r\\n            }\\r\\n\\r\\n            if (userAmount == _amount) { //user is retrieving entire balance, set rewardDebt to zero\\r\\n                user.rewardDebt = 0;\\r\\n            } else {\\r\\n                user.rewardDebt = user.amount.mul(pool.accDirtyPerShare).div(1e12); \\r\\n            }\\r\\n\\r\\n        }\\r\\n        \\r\\n                        \\r\\n    }\\r\\n\\r\\n    // Safe DIRTYCASH token transfer function, just in case if\\r\\n    // rounding error causes pool to not have enough DIRTYCASH tokens\\r\\n    function safeTokenTransfer(address _to, uint256 _amount) internal {\\r\\n        uint256 balance = dirtycash.balanceOf(address(this));\\r\\n        uint256 amount = _amount > balance ? balance : _amount;\\r\\n        dirtycash.transfer(_to, amount);\\r\\n    }\\r\\n\\r\\n    function setBlockRewardUpdateCycle(uint256 _blockRewardUpdateCycle) external onlyAuthorized {\\r\\n        require(_blockRewardUpdateCycle > 0, \\\"Value is zero\\\");\\r\\n        blockRewardUpdateCycle = _blockRewardUpdateCycle;\\r\\n    }\\r\\n\\r\\n    // Just in case an adjustment is needed since mined blocks per day\\r\\n    // changes constantly depending on the network\\r\\n    function setBlocksPerDay(uint256 _blocksPerDay) external onlyAuthorized {\\r\\n        require(_blocksPerDay >= 1 && _blocksPerDay <= 14000, \\\"Value is outside of range 1-14000\\\");\\r\\n        blocksPerDay = _blocksPerDay;\\r\\n    }\\r\\n\\r\\n    function setBlockRewardPercentage(uint256 _blockRewardPercentage) external onlyAuthorized {\\r\\n        require(_blockRewardPercentage >= 1 && _blockRewardPercentage <= 5, \\\"Value is outside of range 1-5\\\");\\r\\n        blockRewardPercentage = _blockRewardPercentage;\\r\\n    }\\r\\n\\r\\n    // This will allow to rescue ETH sent by mistake directly to the contract\\r\\n    function rescueETHFromContract() external onlyAuthorized {\\r\\n        address payable _owner = payable(_msgSender());\\r\\n        _owner.transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    // Function to allow admin to claim *other* ERC20 tokens sent to this contract (by mistake)\\r\\n    function transferERC20Tokens(address _tokenAddr, address _to, uint _amount) public onlyAuthorized {\\r\\n       /* so admin can move out any erc20 mistakenly sent to farm contract EXCEPT Dirty & Dirty LP tokens */\\r\\n        require(_tokenAddr != address(0xcDC477f2ccFf2d8883067c9F23cf489F2B994d00), \\\"Cannot transfer out LP token\\\");\\r\\n        require(_tokenAddr != address(0x4faB740779C73aA3945a5CF6025bF1b0e7F6349C), \\\"Cannot transfer out $Dirty token\\\");\\r\\n        IERC20(_tokenAddr).transfer(_to, _amount);\\r\\n    }\\r\\n\\r\\n    //returns total stake amount (LP, Dirty token) and address of that token respectively\\r\\n    function getTotalStake(uint256 _pid, address _user) external view returns (uint256, IERC20) { \\r\\n         PoolInfo storage pool = poolInfo[_pid];\\r\\n         UserInfo storage user = userInfo[_pid][_user];\\r\\n\\r\\n        return (user.amount, pool.lpToken);\\r\\n    }\\r\\n\\r\\n    //gets the full ledger of deposits into each pool\\r\\n    function getRunningDepositTotal(uint256 _pid) external view returns (uint256) { \\r\\n         PoolInfo storage pool = poolInfo[_pid];\\r\\n\\r\\n        return (pool.runningTotal);\\r\\n    }\\r\\n\\r\\n    //gets the total of all pending rewards from each pool\\r\\n    function getTotalPendingRewards(address _user) public view returns (uint256) { \\r\\n        uint256 value1 = pendingRewards(0, _user);\\r\\n        uint256 value2 = pendingRewards(1, _user);\\r\\n\\r\\n        return value1.add(value2);\\r\\n    }\\r\\n\\r\\n    //gets the total amount of rewards secured (not pending)\\r\\n    function getAccruedRewards(address _user) external view returns (uint256) { \\r\\n        return userBalance[_user];\\r\\n    }\\r\\n\\r\\n    //gets the total of pending + secured rewards\\r\\n    function getTotalRewards(address _user) external view returns (uint256) { \\r\\n        uint256 value1 = getTotalPendingRewards(_user);\\r\\n        uint256 value2 = userBalance[_user];\\r\\n\\r\\n        return value1.add(value2);\\r\\n    }\\r\\n\\r\\n    //moves all pending rewards into the accrued array\\r\\n    function redeemTotalRewards(address _user) internal { \\r\\n\\r\\n        uint256 pool0 = 0;\\r\\n\\r\\n        PoolInfo storage pool = poolInfo[pool0];\\r\\n        UserInfo storage user = userInfo[pool0][_user];\\r\\n\\r\\n        updatePool(pool0);\\r\\n        \\r\\n        uint256 value0 = pendingRewards(pool0, _user);\\r\\n        \\r\\n        userBalance[_user] = userBalance[_user].add(value0);\\r\\n\\r\\n        user.rewardDebt = user.amount.mul(pool.accDirtyPerShare).div(1e12); \\r\\n\\r\\n        uint256 pool1 = 1; \\r\\n        \\r\\n        pool = poolInfo[pool1];\\r\\n        user = userInfo[pool1][_user];\\r\\n\\r\\n        updatePool(pool1);\\r\\n\\r\\n        uint256 value1 = pendingRewards(pool1, _user);\\r\\n        \\r\\n        userBalance[_user] = userBalance[_user].add(value1);\\r\\n\\r\\n        user.rewardDebt = user.amount.mul(pool.accDirtyPerShare).div(1e12); \\r\\n    }\\r\\n\\r\\n    //whether to allow the DirtyCash token to actually be withdrawn, of just leave it virtual (default)\\r\\n    function enableRewardWithdrawals(bool _status) public onlyAuthorized {\\r\\n        enableRewardWithdraw = _status;\\r\\n    }\\r\\n\\r\\n    //view state of reward withdrawals (true/false)\\r\\n    function rewardWithdrawalStatus() external view returns (bool) {\\r\\n        return enableRewardWithdraw;\\r\\n    }\\r\\n\\r\\n    //withdraw DirtyCash\\r\\n    function withdrawRewardsOnly() public nonReentrant {\\r\\n\\r\\n        require(enableRewardWithdraw, \\\"DIRTYCASH withdrawals are not enabled\\\");\\r\\n\\r\\n        IERC20 rewardtoken = IERC20(DirtyCashAddress); //DIRTYCASH\\r\\n\\r\\n        redeemTotalRewards(_msgSender());\\r\\n\\r\\n        uint256 pending = userBalance[_msgSender()];\\r\\n        if (pending > 0) {\\r\\n            require(rewardtoken.balanceOf(address(this)) > pending, \\\"DIRTYCASH token balance of this contract is insufficient\\\");\\r\\n            userBalance[_msgSender()] = 0;\\r\\n            safeTokenTransfer(_msgSender(), pending);\\r\\n        }\\r\\n        \\r\\n        emit WithdrawRewardsOnly(_msgSender(), pending);\\r\\n    }\\r\\n\\r\\n    // Set NFT contract address\\r\\n     function setNFTAddress(address _address) external onlyAuthorized {\\r\\n        NFTAddress = _address;\\r\\n    }\\r\\n\\r\\n    // Set DIRTYCASH contract address\\r\\n     function setDirtyCashAddress(address _address) external onlyAuthorized {\\r\\n        DirtyCashAddress = _address;\\r\\n    }\\r\\n\\r\\n    //redeem the NFT with DIRTYCASH only\\r\\n    function redeem(uint256 _nftid) public nonReentrant {\\r\\n    \\r\\n        uint256 creatorPrice = IDirtyNFT(NFTAddress).getCreatorPrice(_nftid);\\r\\n        bool creatorRedeemable = IDirtyNFT(NFTAddress).getCreatorRedeemable(_nftid);\\r\\n        uint256 creatorMinted = IDirtyNFT(NFTAddress).mintedCountbyID(_nftid);\\r\\n        uint256 creatorMintLimit = IDirtyNFT(NFTAddress).getCreatorMintLimit(_nftid);\\r\\n    \\r\\n        require(creatorRedeemable, \\\"This NFT is not redeemable with DirtyCash\\\");\\r\\n        require(creatorMinted < creatorMintLimit, \\\"This NFT has reached its mint limit\\\");\\r\\n\\r\\n        uint256 price = creatorPrice;\\r\\n\\r\\n        require(price > 0, \\\"NFT not found\\\");\\r\\n\\r\\n        redeemTotalRewards(_msgSender());\\r\\n\\r\\n        if (userBalance[_msgSender()] < price) {\\r\\n            \\r\\n            IERC20 rewardtoken = IERC20(0xB02658F05315A7bE78486A53ca618c1bBBFeC61a); //DIRTYCASH\\r\\n            require(rewardtoken.balanceOf(_msgSender()) >= price, \\\"You do not have the required tokens for purchase\\\"); \\r\\n            IDirtyNFT(NFTAddress).mint(_msgSender(), _nftid);\\r\\n            IERC20(rewardtoken).transferFrom(_msgSender(), address(this), price);\\r\\n\\r\\n        } else {\\r\\n\\r\\n            require(userBalance[_msgSender()] >= price, \\\"Not enough DirtyCash to redeem\\\");\\r\\n            IDirtyNFT(NFTAddress).mint(_msgSender(), _nftid);\\r\\n            userBalance[_msgSender()] = userBalance[_msgSender()].sub(price);\\r\\n\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    //set the conversion rate between DIRTYCASH and the $dirty token\\r\\n    function setConverstionRate(uint256 _rate) public onlyAuthorized {\\r\\n        conversionRate = _rate;\\r\\n    }\\r\\n\\r\\n    // users can also purchase the NFT with $dirty token and the proceeds can be split between the NFT influencer/artist and the staking pool\\r\\n    function purchase(uint256 _nftid) public nonReentrant {\\r\\n        \\r\\n        address creatorAddress = IDirtyNFT(NFTAddress).getCreatorAddress(_nftid);\\r\\n        uint256 creatorPrice = IDirtyNFT(NFTAddress).getCreatorPrice(_nftid);\\r\\n        uint256 creatorSplit = IDirtyNFT(NFTAddress).getCreatorSplit(_nftid);\\r\\n        uint256 creatorMinted = IDirtyNFT(NFTAddress).mintedCountbyID(_nftid);\\r\\n        uint256 creatorMintLimit = IDirtyNFT(NFTAddress).getCreatorMintLimit(_nftid);\\r\\n        bool creatorPurchasable = IDirtyNFT(NFTAddress).getCreatorPurchasable(_nftid);\\r\\n        bool creatorExists = IDirtyNFT(NFTAddress).getCreatorExists(_nftid);\\r\\n\\r\\n        uint256 price = creatorPrice;\\r\\n        price = price.mul(conversionRate);\\r\\n\\r\\n        require(creatorPurchasable, \\\"This NFT is not purchasable with Dirty tokens\\\");\\r\\n        require(creatorMinted < creatorMintLimit, \\\"This NFT has reached its mint limit\\\");\\r\\n        require(dirtytoken.balanceOf(_msgSender()) >= price, \\\"You do not have the required tokens for purchase\\\"); \\r\\n        IDirtyNFT(NFTAddress).mint(_msgSender(), _nftid);\\r\\n\\r\\n        distributeDirty(_nftid, creatorAddress, price, creatorSplit, creatorExists);\\r\\n\\r\\n        \\r\\n    }\\r\\n\\r\\n    function distributeDirty(uint256 _nftid, address _creator, uint256 _price, uint256 _creatorSplit, bool _creatorExists) internal {\\r\\n        if (_creatorExists) { \\r\\n            uint256 creatorShare;\\r\\n            uint256 remainingShare;\\r\\n            uint256 burnShare;\\r\\n            uint256 poolShare;\\r\\n            creatorShare = _price.mul(_creatorSplit).div(100);\\r\\n            remainingShare = _price.sub(creatorShare);           \\r\\n\\r\\n            IERC20(dirtytoken).transferFrom(_msgSender(), address(this), _price);\\r\\n\\r\\n            if (creatorShare > 0) {\\r\\n\\r\\n                totalEarnedCreator[_nftid] = totalEarnedCreator[_nftid].add(creatorShare);\\r\\n                IERC20(dirtytoken).safeTransfer(address(_creator), creatorShare);                \\r\\n                \\r\\n            }\\r\\n\\r\\n            if (remainingShare > 0) {\\r\\n                burnShare = remainingShare.mul(50).div(100);\\r\\n                poolShare = remainingShare.mul(50).div(100);\\r\\n\\r\\n                totalEarnedPool[_nftid] = totalEarnedPool[_nftid].add(poolShare);\\r\\n                IERC20(dirtytoken).safeTransfer(address(0x000000000000000000000000000000000000dEaD), burnShare);\\r\\n                totalEarnedBurn[_nftid] = totalEarnedBurn[_nftid].add(burnShare);\\r\\n            }\\r\\n\\r\\n        } else {\\r\\n            IERC20(dirtytoken).transferFrom(_msgSender(), address(this), _price.mul(50).div(100));\\r\\n            totalEarnedPool[_nftid] = totalEarnedPool[_nftid].add(_price.mul(50).div(100));\\r\\n\\r\\n            IERC20(dirtytoken).transferFrom(_msgSender(), address(0x000000000000000000000000000000000000dEaD), _price.mul(50).div(100));\\r\\n            totalEarnedBurn[_nftid] = totalEarnedBurn[_nftid].add(_price.mul(50).div(100));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // We can give the artists/influencers a DirtyCash balance so they can redeem their own NFTs\\r\\n    function setDirtyCashBalance(address _address, uint256 _amount) public onlyAuthorized {\\r\\n        userBalance[_address] = _amount;\\r\\n    }\\r\\n\\r\\n    function reduceDirtyCashBalance(address _address, uint256 _amount) public onlyAuthorized {\\r\\n        userBalance[_address] = userBalance[_address].sub(_amount);\\r\\n    }\\r\\n\\r\\n    function increaseDirtyCashBalance(address _address, uint256 _amount) public onlyAuthorized {\\r\\n        userBalance[_address] = userBalance[_address].add(_amount);\\r\\n    }\\r\\n\\r\\n    // Get rate of DirtyCash/$Dirty conversion\\r\\n    function getConversionRate() external view returns (uint256) {\\r\\n        return conversionRate;\\r\\n    }\\r\\n\\r\\n    // Get price of NFT in $dirty based on DirtyCash _price\\r\\n    function getConversionPrice(uint256 _price) external view returns (uint256) {\\r\\n        uint256 newprice = _price.mul(conversionRate);\\r\\n        return newprice;\\r\\n    }\\r\\n\\r\\n    // Get price of NFT in $dirty based on NFT\\r\\n    function getConversionNFTPrice(uint256 _nftid) external view returns (uint256) {\\r\\n        uint256 nftprice = IDirtyNFT(NFTAddress).getCreatorPrice(_nftid);\\r\\n        uint256 newprice = nftprice.mul(conversionRate);\\r\\n        return newprice;\\r\\n    }\\r\\n\\r\\n    // Get the holder rewards of users staked $dirty if they were to withdraw\\r\\n    function getHolderRewards(address _address) external view returns (uint256) {\\r\\n        PoolInfo storage pool = poolInfo[1];\\r\\n        UserInfo storage user = userInfo[1][_address];\\r\\n\\r\\n        uint256 _amount = user.amount;\\r\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this)); //get total amount of tokens\\r\\n        uint256 totalRewards = lpSupply.sub(pool.runningTotal); //get difference between contract address amount and ledger amount\\r\\n        \\r\\n         if (totalRewards > 0) { //include reflection\\r\\n            uint256 percentRewards = _amount.mul(100).div(pool.runningTotal); //get % of share out of 100\\r\\n            uint256 reflectAmount = percentRewards.mul(totalRewards).div(100); //get % of reflect amount\\r\\n\\r\\n            return _amount.add(reflectAmount); //add pool rewards to users original staked amount\\r\\n\\r\\n         } else {\\r\\n\\r\\n             return 0;\\r\\n\\r\\n         }\\r\\n\\r\\n    }\\r\\n\\r\\n    // Sets min/max staking amounts for Dirty token\\r\\n    function setDirtyStakingMinMax(uint256 _min, uint256 _max) external onlyAuthorized {\\r\\n\\r\\n        require(_min < _max, \\\"The maximum staking amount is less than the minimum\\\");\\r\\n        require(_min > 0, \\\"The minimum amount cannot be zero\\\");\\r\\n\\r\\n        minDirtyStake = _min;\\r\\n        maxDirtyStake = _max;\\r\\n    }\\r\\n\\r\\n    // Sets min/max amounts for LP staking\\r\\n    function setLPStakingMinMax(uint256 _min, uint256 _max) external onlyAuthorized {\\r\\n\\r\\n        require(_min < _max, \\\"The maximum staking amount is less than the minimum\\\");\\r\\n        require(_min > 0, \\\"The minimum amount cannot be zero\\\");\\r\\n\\r\\n        minLPStake = _min;\\r\\n        maxLPStake = _max;\\r\\n    }\\r\\n\\r\\n    // Lets user move their pending rewards to accrued/escrow balance\\r\\n    function moveRewardsToEscrow(address _address) external {\\r\\n\\r\\n        require(_address == _msgSender() || authorized[_msgSender()], \\\"Sender is not wallet owner or authorized\\\");\\r\\n\\r\\n        UserInfo storage user0 = userInfo[0][_msgSender()];\\r\\n        uint256 userAmount = user0.amount;\\r\\n\\r\\n        UserInfo storage user1 = userInfo[1][_msgSender()];\\r\\n        userAmount = userAmount.add(user1.amount);\\r\\n\\r\\n        if (userAmount == 0) {\\r\\n            return;\\r\\n        } else {\\r\\n            redeemTotalRewards(_msgSender());\\r\\n        }       \\r\\n    }\\r\\n\\r\\n    // Sets true/false for the DIRTYCASH promo for new stakers\\r\\n    function setPromoStatus(bool _status) external onlyAuthorized {\\r\\n        promoActive = _status;\\r\\n    }\\r\\n\\r\\n    function setDynamicStakingEnabled(bool _status) external onlyAuthorized {\\r\\n        dynamicStakingActive = _status;\\r\\n    }\\r\\n\\r\\n    // Sets the allocation multiplier\\r\\n    function setAllocMultiplier(uint256 _newAllocMul) external onlyAuthorized {\\r\\n\\r\\n        require(_newAllocMul >= 1 && _newAllocMul <= 100, \\\"_allocPoint is outside of range 1-100\\\");\\r\\n\\r\\n        allocMultiplier = _newAllocMul;\\r\\n    }\\r\\n\\r\\n    function setAllocations(uint256 _lpalloc, uint256 _stakealloc) external onlyAuthorized {\\r\\n\\r\\n        require(_lpalloc >= 1 && _lpalloc <= 100, \\\"lpalloc is outside of range 1-100\\\");\\r\\n        require(_stakealloc >= 1 && _stakealloc <= 100, \\\"stakealloc is outside of range 1-100\\\");\\r\\n        require(_stakealloc.add(_lpalloc) == 100, \\\"amounts should add up to 100\\\");\\r\\n\\r\\n        lpalloc = _lpalloc;\\r\\n        stakealloc = _stakealloc;\\r\\n    }\\r\\n\\r\\n    // Changes poolReward dynamically based on how many Dirty tokens + LP Tokens are staked to keep rewards consistent\\r\\n    function updateVariablePoolReward() private {\\r\\n\\r\\n        PoolInfo storage pool0 = poolInfo[0];\\r\\n        uint256 runningTotal0 = pool0.runningTotal;\\r\\n        uint256 lpratio;\\r\\n\\r\\n        PoolInfo storage pool1 = poolInfo[1];\\r\\n        uint256 runningTotal1 = pool1.runningTotal;\\r\\n        uint256 stakeratio;\\r\\n\\r\\n        uint256 multiplier;\\r\\n        uint256 ratioMultiplier;\\r\\n        uint256 newLPAlloc;\\r\\n        uint256 newStakeAlloc;\\r\\n\\r\\n        if (runningTotal0 >= maxLPStake) {\\r\\n            lpratio = SafeMath.div(runningTotal0, maxLPStake, \\\"lpratio >= maxLPStake divison error\\\");\\r\\n        } else {\\r\\n            lpratio = SafeMath.div(maxLPStake, maxLPStake, \\\"lpratio maxLPStake / maxLPStake division error\\\");\\r\\n        }\\r\\n\\r\\n        if (runningTotal1 >= maxDirtyStake) {\\r\\n             stakeratio = SafeMath.div(runningTotal1, maxDirtyStake, \\\"stakeratio >= maxDirtyStake division error\\\"); \\r\\n        } else {\\r\\n            stakeratio = SafeMath.div(maxDirtyStake, maxDirtyStake, \\\"stakeratio maxDirtyStake / maxDirtyStake division error\\\");\\r\\n        }   \\r\\n\\r\\n        multiplier = SafeMath.add(lpratio, stakeratio);\\r\\n        \\r\\n        poolReward = SafeMath.mul(rewardSegment, multiplier);\\r\\n\\r\\n        if (stakeratio == lpratio) { //ratio of pool rewards should remain the same (65 lp, 35 stake)\\r\\n            adjustPools(0, lpalloc, true);\\r\\n            adjustPools(1, stakealloc, true);\\r\\n        }\\r\\n\\r\\n        if (stakeratio > lpratio) {\\r\\n            ratio = SafeMath.div(stakeratio, lpratio, \\\"stakeratio > lpratio division error\\\");\\r\\n            \\r\\n             ratioMultiplier = ratio.mul(allocMultiplier);\\r\\n\\r\\n             if (ratioMultiplier < lpalloc) {\\r\\n                newLPAlloc = lpalloc.sub(ratioMultiplier);\\r\\n             } else {\\r\\n                 newLPAlloc = 5;\\r\\n             }\\r\\n\\r\\n             newStakeAlloc = stakealloc.add(ratioMultiplier);\\r\\n\\r\\n             if (newStakeAlloc > 95) {\\r\\n                 newStakeAlloc = 95;\\r\\n             }\\r\\n\\r\\n             adjustPools(0, newLPAlloc, true);\\r\\n             adjustPools(1, newStakeAlloc, true);\\r\\n\\r\\n        }\\r\\n\\r\\n        if (lpratio > stakeratio) {\\r\\n            ratio = SafeMath.div(lpratio, stakeratio,  \\\"lpratio > stakeratio division error\\\");\\r\\n\\r\\n            ratioMultiplier = ratio.mul(allocMultiplier);\\r\\n\\r\\n            if (ratioMultiplier < stakealloc) {\\r\\n                newStakeAlloc = stakealloc.sub(ratioMultiplier);\\r\\n            } else {\\r\\n                 newStakeAlloc = 5;\\r\\n            }\\r\\n\\r\\n             newLPAlloc = lpalloc.add(ratioMultiplier);\\r\\n\\r\\n            if (newLPAlloc > 95) {\\r\\n                 newLPAlloc = 95;\\r\\n            }\\r\\n\\r\\n             adjustPools(0, newLPAlloc, true);\\r\\n             adjustPools(1, newStakeAlloc, true);\\r\\n        }\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    \\r\\n}\"\r\n    },\r\n    \"/C/Users/carme/OneDrive/Documents/Crypto/projects/ethereum/Dirty/TRUFFLE WORKING/contracts/dirtycash.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title  \\r\\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\\r\\n * Note they can later distribute these tokens as they wish using `transfer` and other\\r\\n * `ERC20` functions.\\r\\n * Based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v2.5.1/contracts/examples/SimpleToken.sol\\r\\n */\\r\\ncontract DirtyCash is ERC20 {\\r\\n    /**\\r\\n     * @dev Constructor that gives msg.sender all of existing tokens.\\r\\n     */\\r\\n    constructor(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        uint256 initialSupply\\r\\n    ) ERC20(name, symbol) {\\r\\n        _mint(msg.sender, initialSupply);\\r\\n    }\\r\\n\\r\\n    address owner = payable(address(msg.sender));\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n    _;\\r\\n    }\\r\\n\\r\\n    // This will allow to rescue ETH sent by mistake directly to the contract\\r\\n    function rescueETHFromContract() external onlyOwner {\\r\\n        address payable _owner = payable(_msgSender());\\r\\n        _owner.transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    // Function to allow admin to claim *other* ERC20 tokens sent to this contract (by mistake)\\r\\n    function transferERC20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner {\\r\\n        require(_tokenAddr != address(this), \\\"Cannot transfer out native token\\\");\\r\\n        IERC20(_tokenAddr).transfer(_to, _amount);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"constantinople\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract DirtyCash\",\"name\":\"_dirty\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawRewardsOnly\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DirtyCashAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAdd\",\"type\":\"address\"}],\"name\":\"addAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addedLpTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockRewardLastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockRewardPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockRewardUpdateCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dirtycash\",\"outputs\":[{\"internalType\":\"contract DirtyCash\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicStakingActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRewardWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enableRewardWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getAccruedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftid\",\"type\":\"uint256\"}],\"name\":\"getConversionNFTPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"getConversionPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDirtyPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDirtyPerBlockUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getHolderRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getRunningDepositTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTotalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseDirtyCashBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpalloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDirtyStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLPStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDirtyStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLPStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"moveRewardsToEscrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accDirtyPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runningTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promoActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"promoAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftid\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftid\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"reduceDirtyCashBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toRemove\",\"type\":\"address\"}],\"name\":\"removeAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueETHFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardSegment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardWithdrawalStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAllocMul\",\"type\":\"uint256\"}],\"name\":\"setAllocMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpalloc\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakealloc\",\"type\":\"uint256\"}],\"name\":\"setAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockRewardPercentage\",\"type\":\"uint256\"}],\"name\":\"setBlockRewardPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockRewardUpdateCycle\",\"type\":\"uint256\"}],\"name\":\"setBlockRewardUpdateCycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocksPerDay\",\"type\":\"uint256\"}],\"name\":\"setBlocksPerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setConverstionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDirtyCashAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setDirtyCashBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setDirtyStakingMinMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setDynamicStakingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setLPStakingMinMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setPromoStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setUnstakeTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakealloc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"timeToUnstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalEarnedBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalEarnedCreator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalEarnedPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unstakeTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updatePoolReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewardsOnly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DirtyFarm","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005af387b715b667921ca676aaefbe8320584ed65b0000000000000000000000000000000000000000000000000000000000c6424c","EVMVersion":"constantinople","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}