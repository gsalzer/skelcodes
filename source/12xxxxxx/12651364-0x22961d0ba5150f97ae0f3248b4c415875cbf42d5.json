{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/InterestRateModel/FixedInterestRateModel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"../library/Ownable.sol\\\";\\n\\ninterface IInterestRateModelClient {\\n    function updateInterest() external returns (bool);\\n}\\n\\n/**\\n * @title dForce's Fixed Interest Rate Model Contract\\n * @author dForce\\n */\\ncontract FixedInterestRateModel is Ownable {\\n    // ratePerBlock must not exceed this value\\n    uint256 internal constant ratePerBlockMax = 0.001e18;\\n\\n    /**\\n     * @notice The approximate number of Ethereum blocks produced each year\\n     * @dev This is not used internally, but is expected externally for an interest rate model\\n     */\\n    uint256 public constant blocksPerYear = 2425846;\\n\\n    /**\\n     * @notice Borrow interest rates per block\\n     */\\n    mapping(address => uint256) public borrowRatesPerBlock;\\n\\n    /**\\n     * @notice Supply interest rates per block\\n     */\\n    mapping(address => uint256) public supplyRatesPerBlock;\\n\\n    /**\\n     * @dev Emitted when borrow rate for `target` is set to `rate`.\\n     */\\n    event BorrowRateSet(address target, uint256 rate);\\n\\n    /**\\n     * @dev Emitted when supply rate for `target` is set to `rate`.\\n     */\\n    event SupplyRateSet(address target, uint256 rate);\\n\\n    constructor() public {\\n        __Ownable_init();\\n    }\\n\\n    /*********************************/\\n    /******** Security Check *********/\\n    /*********************************/\\n\\n    /**\\n     * @notice Ensure this is an interest rate model contract.\\n     */\\n    function isInterestRateModel() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current borrow rate per block\\n     * @param cash Not used by this model.\\n     * @param borrows Not used by this model.\\n     * @param reserves Not used by this model.\\n     * @return Current borrow rate per block (as a percentage, and scaled by 1e18).\\n     */\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) public view returns (uint256) {\\n        cash;\\n        borrows;\\n        reserves;\\n        return borrowRatesPerBlock[msg.sender];\\n    }\\n\\n    /**\\n     * @dev Get the current supply interest rate per block.\\n     * @param cash Not used by this model.\\n     * @param borrows Not used by this model.\\n     * @param reserves Not used by this model.\\n     * @param reserveRatio Not used by this model.\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18).\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveRatio\\n    ) external view returns (uint256) {\\n        cash;\\n        borrows;\\n        reserves;\\n        reserveRatio;\\n        return supplyRatesPerBlock[msg.sender];\\n    }\\n\\n    /**\\n     * @notice Admin function to set the current borrow rate per block\\n     */\\n    function _setBorrowRate(address _target, uint256 _rate) public onlyOwner {\\n        require(_rate <= ratePerBlockMax, \\\"Borrow rate invalid\\\");\\n\\n        // Settle interest before setting new one\\n        IInterestRateModelClient(_target).updateInterest();\\n\\n        borrowRatesPerBlock[_target] = _rate;\\n\\n        emit BorrowRateSet(_target, _rate);\\n    }\\n\\n    /**\\n     * @notice Admin function to set the current supply interest rate per block\\n     */\\n    function _setSupplyRate(address _target, uint256 _rate) public onlyOwner {\\n        require(_rate <= ratePerBlockMax, \\\"Supply rate invalid\\\");\\n\\n        // Settle interest before setting new one\\n        IInterestRateModelClient(_target).updateInterest();\\n\\n        supplyRatesPerBlock[_target] = _rate;\\n\\n        emit SupplyRateSet(_target, _rate);\\n    }\\n\\n    /**\\n     * @notice Admin function to set the borrow interest rates per block for targets\\n     */\\n    function _setBorrowRates(\\n        address[] calldata _targets,\\n        uint256[] calldata _rates\\n    ) external onlyOwner {\\n        require(\\n            _targets.length == _rates.length,\\n            \\\"Targets and rates length mismatch!\\\"\\n        );\\n\\n        uint256 _len = _targets.length;\\n        for (uint256 i = 0; i < _len; i++) {\\n            _setBorrowRate(_targets[i], _rates[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Admin function to set the supply interest rates per block for the targets\\n     */\\n    function _setSupplyRates(\\n        address[] calldata _targets,\\n        uint256[] calldata _rates\\n    ) external onlyOwner {\\n        require(\\n            _targets.length == _rates.length,\\n            \\\"Targets and rates length mismatch!\\\"\\n        );\\n\\n        uint256 _len = _targets.length;\\n        for (uint256 i = 0; i < _len; i++) {\\n            _setSupplyRate(_targets[i], _rates[i]);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/library/Ownable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {_setPendingOwner} and {_acceptOwner}.\\n */\\ncontract Ownable {\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    address payable public owner;\\n\\n    /**\\n     * @dev Returns the address of the current pending owner.\\n     */\\n    address payable public pendingOwner;\\n\\n    event NewOwner(address indexed previousOwner, address indexed newOwner);\\n    event NewPendingOwner(\\n        address indexed oldPendingOwner,\\n        address indexed newPendingOwner\\n    );\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner == msg.sender, \\\"onlyOwner: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal {\\n        owner = msg.sender;\\n        emit NewOwner(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @notice Base on the inputing parameter `newPendingOwner` to check the exact error reason.\\n     * @dev Transfer contract control to a new owner. The newPendingOwner must call `_acceptOwner` to finish the transfer.\\n     * @param newPendingOwner New pending owner.\\n     */\\n    function _setPendingOwner(address payable newPendingOwner)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            newPendingOwner != address(0) && newPendingOwner != pendingOwner,\\n            \\\"_setPendingOwner: New owenr can not be zero address and owner has been set!\\\"\\n        );\\n\\n        // Gets current owner.\\n        address oldPendingOwner = pendingOwner;\\n\\n        // Sets new pending owner.\\n        pendingOwner = newPendingOwner;\\n\\n        emit NewPendingOwner(oldPendingOwner, newPendingOwner);\\n    }\\n\\n    /**\\n     * @dev Accepts the admin rights, but only for pendingOwenr.\\n     */\\n    function _acceptOwner() external {\\n        require(\\n            msg.sender == pendingOwner,\\n            \\\"_acceptOwner: Only for pending owner!\\\"\\n        );\\n\\n        // Gets current values for events.\\n        address oldOwner = owner;\\n        address oldPendingOwner = pendingOwner;\\n\\n        // Set the new contract owner.\\n        owner = pendingOwner;\\n\\n        // Clear the pendingOwner.\\n        pendingOwner = address(0);\\n\\n        emit NewOwner(oldOwner, owner);\\n        emit NewPendingOwner(oldPendingOwner, pendingOwner);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"BorrowRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPendingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"SupplyRateSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_acceptOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"_setBorrowRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rates\",\"type\":\"uint256[]\"}],\"name\":\"_setBorrowRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"_setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"_setSupplyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rates\",\"type\":\"uint256[]\"}],\"name\":\"_setSupplyRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksPerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowRatesPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"}],\"name\":\"getBorrowRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveRatio\",\"type\":\"uint256\"}],\"name\":\"getSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInterestRateModel\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplyRatesPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FixedInterestRateModel","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}