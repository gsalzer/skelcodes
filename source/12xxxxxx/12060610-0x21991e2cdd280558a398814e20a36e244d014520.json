{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/utils/AddressArray.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\nlibrary AddressArray{\r\n  function exists(address[] memory self, address addr) public pure returns(bool){\r\n    for (uint i = 0; i< self.length;i++){\r\n      if (self[i]==addr){\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function index_of(address[] memory self, address addr) public pure returns(uint){\r\n    for (uint i = 0; i< self.length;i++){\r\n      if (self[i]==addr){\r\n        return i;\r\n      }\r\n    }\r\n    require(false, \"AddressArray:index_of, not exist\");\r\n  }\r\n\r\n  function remove(address[] storage self, address addr) public returns(bool){\r\n    uint index = index_of(self, addr);\r\n    self[index] = self[self.length - 1];\r\n\r\n    delete self[self.length-1];\r\n    self.length--;\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: contracts/AddressList.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\ncontract AddressList{\r\n  using AddressArray for address[];\r\n  mapping(address => bool) private address_status;\r\n  address[] public addresses;\r\n\r\n  constructor() public{}\r\n\r\n  function get_all_addresses() public view returns(address[] memory){\r\n    return addresses;\r\n  }\r\n\r\n  function get_address(uint i) public view returns(address){\r\n    require(i < addresses.length, \"AddressList:get_address, out of range\");\r\n    return addresses[i];\r\n  }\r\n\r\n  function get_address_num() public view returns(uint){\r\n    return addresses.length;\r\n  }\r\n\r\n  function is_address_exist(address addr) public view returns(bool){\r\n    return address_status[addr];\r\n  }\r\n\r\n  function _add_address(address addr) internal{\r\n    if(address_status[addr]) return;\r\n    address_status[addr] = true;\r\n    addresses.push(addr);\r\n  }\r\n\r\n  function _remove_address(address addr) internal{\r\n    if(!address_status[addr]) return;\r\n    address_status[addr] = false;\r\n    addresses.remove(addr);\r\n  }\r\n\r\n  function _reset() internal{\r\n    for(uint i = 0; i < addresses.length; i++){\r\n      address_status[addresses[i]] = false;\r\n    }\r\n    delete addresses;\r\n  }\r\n}\r\n\r\n// File: contracts/utils/Ownable.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\ncontract Ownable {\r\n    address private _contract_owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = msg.sender;\r\n        _contract_owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _contract_owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_contract_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_contract_owner, newOwner);\r\n        _contract_owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/TrustList.sol\r\n\r\npragma solidity >=0.4.21 <0.6.0;\r\n\r\n\r\n\r\ncontract TrustList is AddressList, Ownable{\r\n\r\n  event AddTrust(address addr);\r\n  event RemoveTrust(address addr);\r\n\r\n  constructor(address[] memory _list) public {\r\n    for(uint i = 0; i < _list.length; i++){\r\n      _add_address(_list[i]);\r\n    }\r\n  }\r\n\r\n  function is_trusted(address addr) public view returns(bool){\r\n    return is_address_exist(addr);\r\n  }\r\n\r\n  function get_trusted(uint i) public view returns(address){\r\n    return get_address(i);\r\n  }\r\n\r\n  function get_trusted_num() public view returns(uint){\r\n    return get_address_num();\r\n  }\r\n\r\n  function add_trusted( address addr) public\r\n    onlyOwner{\r\n    _add_address(addr);\r\n    emit AddTrust(addr);\r\n  }\r\n\r\n  function remove_trusted(address addr) public\r\n    onlyOwner{\r\n    _remove_address(addr);\r\n    emit RemoveTrust(addr);\r\n  }\r\n\r\n}\r\n\r\ncontract TrustListFactory{\r\n  event NewTrustList(address indexed addr, address[] list);\r\n\r\n  function createTrustList(address[] memory _list) public returns(address){\r\n    TrustList tl = new TrustList(_list);\r\n    tl.transferOwnership(msg.sender);\r\n    emit NewTrustList(address(tl), _list);\r\n    return address(tl);\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_list\",\"type\":\"address[]\"}],\"name\":\"createTrustList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"list\",\"type\":\"address[]\"}],\"name\":\"NewTrustList\",\"type\":\"event\"}]","ContractName":"TrustListFactory","CompilerVersion":"v0.5.10+commit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"AddressArray:7e083c71912fd59bb99b7ca52d5d07f7febbafcc","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b0b2189a6817628b18cd1268af07c7bbb2a094adc70a0766cef350748b89842e"}]}