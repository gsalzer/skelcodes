{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\ninterface GaugeController {\r\n    struct VotedSlope {\r\n        uint slope;\r\n        uint power;\r\n        uint end;\r\n    }\r\n    \r\n    struct Point {\r\n        uint bias;\r\n        uint slope;\r\n    }\r\n    \r\n    function vote_user_slopes(address, address) external view returns (VotedSlope memory);\r\n    function last_user_vote(address, address) external view returns (uint);\r\n    function points_weight(address, uint256) external view returns (Point memory);\r\n    function checkpoint_gauge(address) external;\r\n}\r\n\r\ninterface IERC20 { \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address) external view returns (uint);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n}\r\n\r\ncontract Bribe {\r\n    uint constant WEEK = 86400 * 7;\r\n    uint constant PRECISION = 10**18;\r\n    GaugeController constant GAUGE_CONTROLLER = GaugeController(0x2F50D538606Fa9EDD2B11E2446BEb18C9D5846bB);\r\n    \r\n    mapping(address => mapping(address => uint)) public active_period;\r\n    mapping(address => mapping(address => uint)) public reward_per_token;\r\n    mapping(address => mapping(address => mapping(address => uint))) public last_user_claim;\r\n    \r\n    function _update_period(address gauge, address reward_token) internal returns (uint) {\r\n        uint _period = active_period[gauge][reward_token];\r\n        if (block.timestamp >= _period + WEEK) {\r\n            _period = block.timestamp / WEEK * WEEK;\r\n            GAUGE_CONTROLLER.checkpoint_gauge(gauge);\r\n            uint _slope = GAUGE_CONTROLLER.points_weight(gauge, _period).slope;\r\n            uint _amount = IERC20(reward_token).balanceOf(address(this));\r\n            reward_per_token[gauge][reward_token] = _amount * PRECISION / _slope;\r\n            active_period[gauge][reward_token] = _period;\r\n        }\r\n        return _period;\r\n    }\r\n    \r\n    function add_reward_amount(address gauge, address reward_token, uint amount) external returns (bool) {\r\n        _safeTransferFrom(reward_token, msg.sender, address(this), amount);\r\n        _update_period(gauge, reward_token);\r\n        return true;\r\n    }\r\n    \r\n    function claimable(address user, address gauge, address reward_token) external view returns (uint) {\r\n        uint _period = active_period[gauge][reward_token];\r\n        uint _amount = 0;\r\n        if (last_user_claim[user][gauge][reward_token] < _period) {\r\n            uint _last_vote = GAUGE_CONTROLLER.last_user_vote(user, gauge);\r\n            if (_last_vote < _period) {\r\n                uint _slope = GAUGE_CONTROLLER.vote_user_slopes(user, gauge).slope;\r\n                _amount = _slope * reward_per_token[gauge][reward_token] / PRECISION;\r\n            }\r\n        }\r\n        return _amount;\r\n    }\r\n    \r\n    function claim_reward(address user, address gauge, address reward_token) external returns (uint) {\r\n        return _claim_reward(user, gauge, reward_token);\r\n    }\r\n    \r\n    function claim_reward(address gauge, address reward_token) external returns (uint) {\r\n        return _claim_reward(msg.sender, gauge, reward_token);\r\n    }\r\n    \r\n    function _claim_reward(address user, address gauge, address reward_token) internal returns (uint) {\r\n        uint _period = _update_period(gauge, reward_token);\r\n        uint _amount = 0;\r\n        if (last_user_claim[user][gauge][reward_token] < _period) {\r\n            last_user_claim[user][gauge][reward_token] = _period;\r\n            uint _last_vote = GAUGE_CONTROLLER.last_user_vote(user, gauge);\r\n            if (_last_vote < _period) {\r\n                uint _slope = GAUGE_CONTROLLER.vote_user_slopes(user, gauge).slope;\r\n                _amount = _slope * reward_per_token[gauge][reward_token] / PRECISION;\r\n                if (_amount > 0) {\r\n                    _safeTransfer(reward_token, user, _amount);\r\n                }\r\n            }\r\n        }\r\n        return _amount;\r\n    }\r\n    \r\n    function _safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n    \r\n    function _safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) =\r\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"active_period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"add_reward_amount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_token\",\"type\":\"address\"}],\"name\":\"claim_reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_token\",\"type\":\"address\"}],\"name\":\"claim_reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_token\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"last_user_claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reward_per_token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Bribe","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://313a76aa299116578f05e2684deff0efd8478cb17ae4110b2f296086438e8d9d"}]}