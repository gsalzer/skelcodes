{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface IERC20 {\r\n\r\n}\r\n\r\ninterface IGUniPool {\r\n    function token0() external view returns (IERC20);\r\n\r\n    function token1() external view returns (IERC20);\r\n\r\n    // function pool() external view returns (IUniswapV3Pool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    // function mint(uint256 mintAmount, address receiver)\r\n    //     external\r\n    //     returns (\r\n    //         uint256 amount0,\r\n    //         uint256 amount1,\r\n    //         uint128 liquidityMinted\r\n    //     );\r\n\r\n    // function burn(uint256 burnAmount, address receiver)\r\n    //     external\r\n    //     returns (\r\n    //         uint256 amount0,\r\n    //         uint256 amount1,\r\n    //         uint128 liquidityBurned\r\n    //     );\r\n\r\n    // function getMintAmounts(uint256 amount0Max, uint256 amount1Max)\r\n    //     external\r\n    //     view\r\n    //     returns (\r\n    //         uint256 amount0,\r\n    //         uint256 amount1,\r\n    //         uint256 mintAmount\r\n    //     );\r\n\r\n    // function getPositionID() external view returns (bytes32 positionID);\r\n}\r\n\r\ninterface IGUniRouter {\r\n\r\n    function getPoolUnderlyingBalances(IGUniPool pool)\r\n        external\r\n        view\r\n        returns (uint256 amount0, uint256 amount1);\r\n\r\n    function getUnderlyingBalances(\r\n        IGUniPool pool,\r\n        address account,\r\n        uint256 balance\r\n    ) external view returns (uint256 amount0, uint256 amount1);\r\n\r\n}\r\n\r\nstruct StakingRewardsInfo {\r\n    address stakingRewards;\r\n    uint rewardAmount;\r\n}\r\ninterface StakingFactoryInterface {\r\n\r\n    function stakingRewardsInfoByStakingToken(address) external view returns(StakingRewardsInfo memory);\r\n\r\n}\r\n\r\ninterface StakingInterface {\r\n    function totalSupply() external view returns (uint256);\r\n    function rewardRate() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function earned(address account) external view returns (uint256);\r\n    function rewardPerToken() external view returns (uint256);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"math-not-safe\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"math-not-safe\");\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n}\r\n\r\ncontract Helpers is DSMath {\r\n\r\n    StakingFactoryInterface public constant getStakingFactory = StakingFactoryInterface(0xf39eC5a471edF20Ecc7db1c2c34B4C73ab4B2C19);\r\n    IGUniRouter public constant gelatoRouter = IGUniRouter(0x8CA6fa325bc32f86a12cC4964Edf1f71655007A7);\r\n\r\n    struct UserData {\r\n        address pool; // address of pool contract\r\n        address staking; // address of staking contract\r\n        address token0Addr; // address of token 0\r\n        address token1Addr; // address of token 1\r\n        uint poolTokenSupply; // Total supply of Pool token\r\n        uint poolToken0Bal; // balance of total pool for token0\r\n        uint poolToken1Bal; // balance of total pool for token1\r\n        uint poolTokenSupplyStaked; // total pool token locked in staking contract\r\n        uint stakingToken0Bal; // total balance of token0 in Staking\r\n        uint stakingToken1Bal; // total balance of token1 in Staking\r\n        uint rewardRate; // INST distributing per second\r\n        uint token0Bal; // balance of token 0 of user\r\n        uint token1Bal; // balance of token 1 of user\r\n        uint earned; // INST earned from staking\r\n        uint stakedBal; // user's pool token bal in staking contract\r\n        uint poolBal; // ideal pool token in user's DSA\r\n        uint totalBal; // stakedBal + poolTknBal\r\n    }\r\n\r\n}\r\n\r\ncontract Resolver is Helpers {\r\n\r\n    function getSinglePosition(address user, address pool) public view returns(UserData memory _data) {\r\n        _data.pool = pool;\r\n        StakingInterface stakingContract = StakingInterface(getStakingFactory.stakingRewardsInfoByStakingToken(pool).stakingRewards);\r\n        _data.staking = address(stakingContract);\r\n        IGUniPool poolContract = IGUniPool(pool);\r\n        _data.token0Addr = address(poolContract.token0());\r\n        _data.token1Addr = address(poolContract.token1());\r\n        if (_data.staking == address(0)) {\r\n            _data.earned = 0;\r\n            _data.stakedBal = 0;\r\n        } else {\r\n            _data.earned = stakingContract.earned(user);\r\n            _data.stakedBal = stakingContract.balanceOf(user);\r\n        }\r\n        _data.poolBal = poolContract.balanceOf(user);\r\n        _data.totalBal = add(_data.stakedBal, _data.poolBal);\r\n        (_data.token0Bal, _data.token1Bal) = gelatoRouter.getUnderlyingBalances(poolContract, user, _data.totalBal);\r\n        _data.poolTokenSupply = poolContract.balanceOf(user);\r\n        (_data.poolToken0Bal, _data.poolToken1Bal) = gelatoRouter.getPoolUnderlyingBalances(poolContract);\r\n        _data.poolTokenSupplyStaked = stakingContract.totalSupply();\r\n        (_data.stakingToken0Bal, _data.stakingToken1Bal) = gelatoRouter.getUnderlyingBalances(poolContract, _data.staking, _data.poolTokenSupplyStaked);\r\n        _data.rewardRate = stakingContract.rewardRate();\r\n    }\r\n\r\n    function getPosition(address user, address[] memory pools) public view returns(UserData[] memory _data) {\r\n        for (uint i = 0; i < pools.length; i++) {\r\n            _data[i] = getSinglePosition(user, pools[i]);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"name\":\"gelatoRouter\",\"outputs\":[{\"internalType\":\"contract IGUniRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolToken0Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolToken1Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenSupplyStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingToken0Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingToken1Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBal\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.UserData[]\",\"name\":\"_data\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getSinglePosition\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0Addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1Addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolToken0Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolToken1Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenSupplyStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingToken0Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingToken1Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Bal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolBal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBal\",\"type\":\"uint256\"}],\"internalType\":\"struct Helpers.UserData\",\"name\":\"_data\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingFactory\",\"outputs\":[{\"internalType\":\"contract StakingFactoryInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Resolver","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d1e9d64ea3d172f68eaf52657957d07d91aad4178a6c09a4870d5dffa032beea"}]}