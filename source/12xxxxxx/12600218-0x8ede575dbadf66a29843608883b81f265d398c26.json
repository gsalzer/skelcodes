{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// File: openzeppelin-solidity/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Ownable.sol\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/EthWalletFeeIncluded.sol\r\n\r\n\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\ncontract EthWalletFeeIncluded is Ownable {\r\n\r\n    struct depSettings {\r\n        uint128 size;\r\n        uint128 fee;\r\n    }\r\n\r\n    //depSettings private _depositSettings;\r\n    //mapping(address => depSettings) private _tokenDepositAmounts;\r\n\r\n    mapping(uint8 => depSettings) private _depositSettings;\r\n    mapping(uint8 => mapping (address => depSettings)) private _tokenDepositAmounts;\r\n    mapping(uint256 => bool) private _networksAvailable;\r\n\r\n    event DepositEthMade(\r\n        address sender,\r\n        uint128 amount,\r\n        uint8 network\r\n    );\r\n\r\n    event DepositTokenMade(\r\n        address tokenAddress,\r\n        address sender,\r\n        uint256 amount,\r\n        uint8 network\r\n    );\r\n\r\n    constructor(uint8[] memory _networks, uint128[] memory _depositSize, uint128[] memory _depositFee) {\r\n        //_depositSettings = depSettings(_depositSize, _depositFee);\r\n        require(_networks.length == _depositSize.length, \"Invalid array size\");\r\n        require(_depositSize.length == _depositFee.length, \"Invalid array size\");\r\n        for(uint8 i=0; i < _networks.length; i++){\r\n            _networksAvailable[_networks[i]] = true;\r\n            _depositSettings[_networks[i]] = depSettings(_depositSize[i], _depositFee[i]);\r\n        }\r\n    }\r\n\r\n    function deposit(uint8 network) external payable {\r\n        require(_networksAvailable[network], \"Network is not available\");\r\n        depSettings memory ds = _depositSettings[network];\r\n        require(msg.value == ds.size, 'EthWallet: invalid eth amount');\r\n        emit DepositEthMade(_msgSender(), ds.size - (ds.size*ds.fee)/100, network);\r\n    }\r\n\r\n    function depositToken(address tokenAddress, uint8 network) external {\r\n        require(_networksAvailable[network], \"Network is not available\");\r\n        depSettings memory tokenDepositSize = _tokenDepositAmounts[network][tokenAddress];\r\n        require(tokenDepositSize.size != 0, 'EthWallet: token not allowed');\r\n\r\n        require(IERC20(tokenAddress).transferFrom(_msgSender(), address(this),\r\n        tokenDepositSize.size ), \"Can not get tokens\");\r\n\r\n        emit DepositTokenMade(tokenAddress, _msgSender(), tokenDepositSize.size - (tokenDepositSize.size*tokenDepositSize.fee)/100, network);\r\n    }\r\n\r\n    function withdraw(uint256 amount) external onlyOwner {\r\n        require(amount != 0, 'EthWallet: 0 transfer');\r\n        payable(owner()).transfer(amount);\r\n    }\r\n\r\n    function withdrawToken(address tokenAddress, uint256 amount) external onlyOwner {\r\n        require(amount != 0, 'EthWallet: 0 transfer');\r\n        IERC20(tokenAddress).transfer(owner(), amount);\r\n    }\r\n\r\n    function setDepositSize(uint8 network, uint128 newSize) external onlyOwner {\r\n        _depositSettings[network].size = newSize;\r\n    }\r\n\r\n    function setDepositFee(uint8 network, uint128 newFee) external onlyOwner {\r\n        _depositSettings[network].fee = newFee;\r\n    }\r\n\r\n    function setDepositSettings(uint8 network, uint128 _depositSize, uint128 _depositFee) external onlyOwner {\r\n        _depositSettings[network] = depSettings(_depositSize, _depositFee);\r\n    }\r\n\r\n    function setTokenDepositSettings(address tokenAddress, uint8 network, uint128 _depositSize, uint128 _depositFee) external onlyOwner {\r\n        depSettings memory tokenDepositSettings = _tokenDepositAmounts[network][tokenAddress];\r\n        tokenDepositSettings.size = _depositSize;\r\n        tokenDepositSettings.fee = _depositFee;\r\n\r\n        _tokenDepositAmounts[network][tokenAddress] = tokenDepositSettings;\r\n    }\r\n\r\n    function forbidTokenDeposits(uint8 network, address tokenAddress) external onlyOwner {\r\n        _tokenDepositAmounts[network][tokenAddress].size = 0;\r\n        _tokenDepositAmounts[network][tokenAddress].fee = 0;\r\n    }\r\n\r\n    function addNetwork(uint8 network, uint128 _depositSizeEth, uint128 _depositFeeEth) external onlyOwner {\r\n        require(!_networksAvailable[network], \"This network number exist\");\r\n        _networksAvailable[network] = true;\r\n        _depositSettings[network] = depSettings(_depositSizeEth, _depositFeeEth);\r\n    }\r\n\r\n    function removeNetwork(uint8 network) external onlyOwner {\r\n        require(_networksAvailable[network], \"Network is not available\");\r\n        _networksAvailable[network] = false;\r\n        _depositSettings[network].size = 0;\r\n        _depositSettings[network].fee = 0;\r\n    }\r\n\r\n    function depositFee(uint8 network) external view returns(uint128) {\r\n        return _depositSettings[network].fee;\r\n    }\r\n\r\n    function depositSize(uint8 network) external view returns(uint128) {\r\n        return _depositSettings[network].size;\r\n    }\r\n\r\n    function depositTokenSize(uint8 network, address tokenAddress) external view returns(uint128) {\r\n        return _tokenDepositAmounts[network][tokenAddress].size;\r\n    }\r\n\r\n    function depositTokenFee(uint8 network, address tokenAddress) external view returns(uint128) {\r\n        return _tokenDepositAmounts[network][tokenAddress].fee;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_networks\",\"type\":\"uint8[]\"},{\"internalType\":\"uint128[]\",\"name\":\"_depositSize\",\"type\":\"uint128[]\"},{\"internalType\":\"uint128[]\",\"name\":\"_depositFee\",\"type\":\"uint128[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"network\",\"type\":\"uint8\"}],\"name\":\"DepositEthMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"network\",\"type\":\"uint8\"}],\"name\":\"DepositTokenMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"network\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"_depositSizeEth\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_depositFeeEth\",\"type\":\"uint128\"}],\"name\":\"addNetwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"network\",\"type\":\"uint8\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"network\",\"type\":\"uint8\"}],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"network\",\"type\":\"uint8\"}],\"name\":\"depositSize\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"network\",\"type\":\"uint8\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"network\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"depositTokenFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"network\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"depositTokenSize\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"network\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"forbidTokenDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"network\",\"type\":\"uint8\"}],\"name\":\"removeNetwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"network\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"newFee\",\"type\":\"uint128\"}],\"name\":\"setDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"network\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"_depositSize\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_depositFee\",\"type\":\"uint128\"}],\"name\":\"setDepositSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"network\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"newSize\",\"type\":\"uint128\"}],\"name\":\"setDepositSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"network\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"_depositSize\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_depositFee\",\"type\":\"uint128\"}],\"name\":\"setTokenDepositSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EthWalletFeeIncluded","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000014","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5c35456483caa5ef45165c2ce733cd0025927864ac092ab8ab3dab1bb9c4a7dd"}]}