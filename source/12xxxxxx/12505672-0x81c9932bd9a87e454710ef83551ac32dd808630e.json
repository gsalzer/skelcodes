{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/controller/null controller/NullController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"../ControllerCommon.sol\\\";\\n\\ncontract NullController is ControllerCommon {\\n\\n    /**\\n     @notice this controller implementation supports the interface but does not intervene in any way\\n     @dev the controller implementation can be extended but must implement the minimum interface\\n     */\\n    constructor(address oneTokenFactory_)\\n       ControllerCommon(oneTokenFactory_, \\\"Null Controller\\\")\\n     {} \\n\\n}\\n\"\r\n    },\r\n    \"contracts/controller/ControllerCommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"../interface/IController.sol\\\";\\nimport \\\"../interface/IOneTokenFactory.sol\\\";\\n\\nabstract contract ControllerCommon is IController {\\n\\n    bytes32 constant public override MODULE_TYPE = keccak256(abi.encodePacked(\\\"ICHI V1 Controller\\\"));\\n\\n    address public override oneTokenFactory;\\n    string public override description;\\n\\n    event ControllerDeployed(address sender, address oneTokenFactory, string description);\\n    event ControllerInitialized(address sender);\\n    event ControllerPeriodic(address sender);\\n\\n    modifier onlyKnownToken {\\n        require(IOneTokenFactory(oneTokenFactory).isOneToken(msg.sender), \\\"ICHIModuleCommon: msg.sender is not a known oneToken\\\");\\n        _;\\n    }\\n\\n    /**\\n     @notice Controllers rebalance funds and may execute strategies periodically.\\n     */\\n    \\n    /**\\n     @notice controllers are bound to factories at deployment time\\n     @param oneTokenFactory_ factory to bind to\\n     @param description_ human-readable, description only\\n     */ \\n    constructor(address oneTokenFactory_, string memory description_) {\\n        oneTokenFactory = oneTokenFactory_;\\n        description = description_;\\n        emit ControllerDeployed(msg.sender, oneTokenFactory_, description);\\n    }    \\n    \\n    /**\\n     @notice oneTokens invoke periodic() to trigger periodic processes. Can be trigger externally.\\n     @dev Acceptable access control will vary by implementation. \\n     */  \\n    function periodic() external virtual override {\\n        emit ControllerPeriodic(msg.sender);\\n    }  \\n        \\n    /**\\n     @notice OneTokenBase (msg.sender) calls this when the controller is assigned. Must be re-initializeable.\\n     */\\n    function init() external onlyKnownToken virtual override {\\n        emit ControllerInitialized(msg.sender);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\n\\ninterface IController {\\n    \\n    function oneTokenFactory() external returns(address);\\n    function description() external returns(string memory);\\n    function init() external;\\n    function periodic() external;\\n    function MODULE_TYPE() external view returns(bytes32);    \\n}\\n\"\r\n    },\r\n    \"contracts/interface/IOneTokenFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./InterfaceCommon.sol\\\";\\n\\ninterface IOneTokenFactory is InterfaceCommon {\\n\\n    function oneTokenProxyAdmins(address) external returns(address);\\n    function deployOneTokenProxy(\\n        string memory name,\\n        string memory symbol,\\n        address governance, \\n        address version,\\n        address controller,\\n        address mintMaster,              \\n        address memberToken, \\n        address collateral,\\n        address oneTokenOracle\\n    ) \\n        external \\n        returns(address newOneTokenProxy, address proxyAdmin);\\n\\n    function admitModule(address module, ModuleType moduleType, string memory name, string memory url) external;\\n    function updateModule(address module, string memory name, string memory url) external;\\n    function removeModule(address module) external;\\n\\n    function admitForeignToken(address foreignToken, bool collateral, address oracle) external;\\n    function updateForeignToken(address foreignToken, bool collateral) external;\\n    function removeForeignToken(address foreignToken) external;\\n\\n    function assignOracle(address foreignToken, address oracle) external;\\n    function removeOracle(address foreignToken, address oracle) external; \\n\\n    /**\\n     * View functions\\n     */\\n    \\n    function MODULE_TYPE() external view returns(bytes32);\\n\\n    function oneTokenCount() external view returns(uint256);\\n    function oneTokenAtIndex(uint256 index) external view returns(address);\\n    function isOneToken(address oneToken) external view returns(bool);\\n \\n    // modules\\n\\n    function moduleCount() external view returns(uint256);\\n    function moduleAtIndex(uint256 index) external view returns(address module);\\n    function isModule(address module) external view returns(bool);\\n    function isValidModuleType(address module, ModuleType moduleType) external view returns(bool);\\n\\n    // foreign tokens\\n\\n    function foreignTokenCount() external view returns(uint256);\\n    function foreignTokenAtIndex(uint256 index) external view returns(address);\\n    function foreignTokenInfo(address foreignToken) external view returns(bool collateral, uint256 oracleCount);\\n    function foreignTokenOracleCount(address foreignToken) external view returns(uint256);\\n    function foreignTokenOracleAtIndex(address foreignToken, uint256 index) external view returns(address);\\n    function isOracle(address foreignToken, address oracle) external view returns(bool);\\n    function isForeignToken(address foreignToken) external view returns(bool);\\n    function isCollateral(address foreignToken) external view returns(bool);\\n}\"\r\n    },\r\n    \"contracts/interface/InterfaceCommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface InterfaceCommon {\\n\\n    enum ModuleType { Version, Controller, Strategy, MintMaster, Oracle }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oneTokenFactory_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oneTokenFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ControllerDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ControllerInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ControllerPeriodic\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MODULE_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneTokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NullController","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d0092632b9ac5a7856664eec1abb6e3403a6a36a","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}