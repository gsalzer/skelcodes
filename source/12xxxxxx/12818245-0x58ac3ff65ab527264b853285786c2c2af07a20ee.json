{"status":"1","message":"OK","result":[{"SourceCode":"// \"SPDX-License-Identifier: MIT\"\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ncontract pwTreasury {\r\n    address _host;\r\n    address public thisAddress;\r\n\r\n    bool blocked;\r\n\r\n    uint nonce;\r\n    \r\n    struct transactionHistory{\r\n        address sender;\r\n        uint amount;\r\n        uint date;\r\n    }\r\n    \r\n    struct transactionHistoryUsers{\r\n        uint[] amount;\r\n        uint[] date;\r\n    }\r\n\r\n    mapping(uint => transactionHistory) transactions;\r\n    mapping(address => transactionHistoryUsers) userTransactions;\r\n    \r\n    constructor(){\r\n         nonce = 0;\r\n        _host = msg.sender;\r\n        thisAddress = address(this);\r\n        blocked = false;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public isHost{\r\n        _host = newOwner;\r\n    }\r\n    \r\n   modifier isHost() {\r\n        require(msg.sender == _host, \"Only host can invoke this function\");\r\n        _;\r\n    }\r\n\r\n    modifier isBlocked() {\r\n        require(blocked == false, \"Smart contract has been temporary blocked\");\r\n        _;\r\n    }\r\n    \r\n    function withdraw(address to, uint256 amount, address contractAddress) public isHost isBlocked {\r\n        USDC coin = USDC(contractAddress);\r\n        coin.transfer(to, amount);\r\n        transactions[nonce].sender = msg.sender;\r\n        transactions[nonce].amount = amount;\r\n        transactions[nonce].date = block.timestamp;\r\n        userTransactions[msg.sender].amount.push(amount);\r\n        userTransactions[msg.sender].date.push(block.timestamp);\r\n        nonce++;\r\n    }\r\n\r\n    function lockContract() public isHost {\r\n        blocked = true;\r\n    }\r\n\r\n    function unlockContract() public isHost {\r\n        blocked = false;\r\n    }\r\n\r\n    function getUserAmounts(address user) public view returns(uint[] memory){\r\n        return userTransactions[user].amount;\r\n    }\r\n    \r\n    function getUserDates(address user) public view returns(uint[] memory){\r\n        return userTransactions[user].date;\r\n    }\r\n    \r\n    function getSender(uint nounce) public view returns(address){\r\n        return transactions[nounce].sender;\r\n    }\r\n    \r\n    function getAmount(uint nounce) public view returns(uint){\r\n        return transactions[nounce].amount;\r\n    }\r\n    \r\n    function getDate(uint nounce) public view returns(uint){\r\n        return transactions[nounce].date;\r\n    }\r\n}\r\n\r\nabstract contract USDC {\r\n    function transfer(address recipient, uint256 amount) virtual public returns (bool);\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nounce\",\"type\":\"uint256\"}],\"name\":\"getAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nounce\",\"type\":\"uint256\"}],\"name\":\"getDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nounce\",\"type\":\"uint256\"}],\"name\":\"getSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserAmounts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserDates\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thisAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"pwTreasury","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3091248c08f9717ababb791690afbac29a6cedbdaec700a6e9ea4b6b6b34580f"}]}