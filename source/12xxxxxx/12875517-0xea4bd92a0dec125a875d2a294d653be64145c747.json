{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.6;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address account) external view returns (uint);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n  function symbol() external view returns (string memory);\r\n  function decimals() external view returns (uint);\r\n  function approve(address spender, uint amount) external returns (bool);\r\n  function mint(address account, uint amount) external;\r\n  function burn(address account, uint amount) external;\r\n  function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface IUniswapRouter {\r\n\r\n  function getAmountsOut(\r\n    uint amountIn,\r\n    address[] memory path\r\n  ) external view returns (uint[] memory amounts);\r\n\r\n  function getAmountsIn(\r\n    uint amountOut,\r\n    address[] memory path\r\n  ) external view returns (uint[] memory amounts);\r\n\r\n  function swapExactTokensForTokens(\r\n    uint amountIn,\r\n    uint amountOutMin,\r\n    address[] calldata path,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint[] memory amounts);\r\n\r\n  function addLiquidity(\r\n    address tokenA,\r\n    address tokenB,\r\n    uint amountADesired,\r\n    uint amountBDesired,\r\n    uint amountAMin,\r\n    uint amountBMin,\r\n    address to,\r\n    uint deadline\r\n  ) external returns (uint amountA, uint amountB, uint liquidity);\r\n}\r\n\r\ninterface ILendingPair {\r\n  function checkAccountHealth(address _account) external view;\r\n  function accrueAccount(address _account) external;\r\n  function accrue() external;\r\n  function accountHealth(address _account) external view returns(uint);\r\n  function totalDebt(address _token) external view returns(uint);\r\n  function tokenA() external view returns(address);\r\n  function tokenB() external view returns(address);\r\n  function lpToken(address _token) external view returns(IERC20);\r\n  function debtOf(address _account, address _token) external view returns(uint);\r\n  function pendingDebtTotal(address _token) external view returns(uint);\r\n  function pendingSupplyTotal(address _token) external view returns(uint);\r\n  function deposit(address _token, uint _amount) external;\r\n  function withdraw(address _token, uint _amount) external;\r\n  function borrow(address _token, uint _amount) external;\r\n  function repay(address _token, uint _amount) external;\r\n  function withdrawBorrow(address _token, uint _amount) external;\r\n  function controller() external view returns(IController);\r\n\r\n  function borrowBalance(\r\n    address _account,\r\n    address _borrowedToken,\r\n    address _returnToken\r\n  ) external view returns(uint);\r\n\r\n  function convertTokenValues(\r\n    address _fromToken,\r\n    address _toToken,\r\n    uint    _inputAmount\r\n  ) external view returns(uint);\r\n}\r\n\r\ninterface IInterestRateModel {\r\n  function systemRate(ILendingPair _pair, address _token) external view returns(uint);\r\n  function supplyRatePerBlock(ILendingPair _pair, address _token) external view returns(uint);\r\n  function borrowRatePerBlock(ILendingPair _pair, address _token) external view returns(uint);\r\n}\r\n\r\ninterface IRewardDistribution {\r\n\r\n  function distributeReward(address _account, address _token) external;\r\n  function setTotalRewardPerBlock(uint _value) external;\r\n  function migrateRewards(address _recipient, uint _amount) external;\r\n\r\n  function addPool(\r\n    address _pair,\r\n    address _token,\r\n    bool    _isSupply,\r\n    uint    _points\r\n  ) external;\r\n}\r\n\r\ninterface IController {\r\n  function interestRateModel() external view returns(IInterestRateModel);\r\n  function rewardDistribution() external view returns(IRewardDistribution);\r\n  function feeRecipient() external view returns(address);\r\n  function LIQ_MIN_HEALTH() external view returns(uint);\r\n  function minBorrowUSD() external view returns(uint);\r\n  function liqFeeSystem(address _token) external view returns(uint);\r\n  function liqFeeCaller(address _token) external view returns(uint);\r\n  function liqFeesTotal(address _token) external view returns(uint);\r\n  function colFactor(address _token) external view returns(uint);\r\n  function depositLimit(address _lendingPair, address _token) external view returns(uint);\r\n  function borrowLimit(address _lendingPair, address _token) external view returns(uint);\r\n  function originFee(address _token) external view returns(uint);\r\n  function depositsEnabled() external view returns(bool);\r\n  function borrowingEnabled() external view returns(bool);\r\n  function setFeeRecipient(address _feeRecipient) external;\r\n  function tokenPrice(address _token) external view returns(uint);\r\n  function tokenSupported(address _token) external view returns(bool);\r\n  function setRewardDistribution(address _value) external;\r\n}\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n  address public pendingOwner;\r\n\r\n  event OwnershipTransferInitiated(address indexed previousOwner, address indexed newOwner);\r\n  event OwnershipTransferConfirmed(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor() {\r\n    owner = msg.sender;\r\n    emit OwnershipTransferConfirmed(address(0), owner);\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(isOwner(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  function isOwner() public view returns (bool) {\r\n    return msg.sender == owner;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) external onlyOwner {\r\n    require(_newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferInitiated(owner, _newOwner);\r\n    pendingOwner = _newOwner;\r\n  }\r\n\r\n  function acceptOwnership() external {\r\n    require(msg.sender == pendingOwner, \"Ownable: caller is not pending owner\");\r\n    emit OwnershipTransferConfirmed(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract FeeConverter is Ownable {\r\n\r\n  uint private constant MAX_INT = 2**256 - 1;\r\n\r\n  // Only large liquid tokens: ETH, DAI, USDC, WBTC, etc\r\n  mapping (address => bool) public permittedTokens;\r\n\r\n  IUniswapRouter public uniswapRouter;\r\n  IERC20         public wildToken;\r\n  IController    public controller;\r\n  address        public stakingPool;\r\n  uint           public callIncentive;\r\n\r\n  event FeeDistribution(uint amount);\r\n\r\n  constructor(\r\n    IUniswapRouter _uniswapRouter,\r\n    IController    _controller,\r\n    IERC20         _wildToken,\r\n    address        _stakingPool,\r\n    uint           _callIncentive\r\n  ) {\r\n    uniswapRouter = _uniswapRouter;\r\n    controller    = _controller;\r\n    stakingPool   = _stakingPool;\r\n    callIncentive = _callIncentive;\r\n    wildToken     = _wildToken;\r\n  }\r\n\r\n  function convert(\r\n    ILendingPair     _pair,\r\n    address[] memory _path,\r\n    uint             _supplyTokenAmount\r\n  ) external {\r\n\r\n    _validatePath(_path);\r\n    require(_pair.controller() == controller, \"FeeConverter: invalid pair\");\r\n    require(_supplyTokenAmount > 0, \"FeeConverter: nothing to convert\");\r\n\r\n    _pair.withdraw(_path[0], _supplyTokenAmount);\r\n    IERC20(_path[0]).approve(address(uniswapRouter), MAX_INT);\r\n\r\n    uniswapRouter.swapExactTokensForTokens(\r\n      _supplyTokenAmount,\r\n      0,\r\n      _path,\r\n      address(this),\r\n      block.timestamp + 1000\r\n    );\r\n\r\n    uint wildBalance = wildToken.balanceOf(address(this));\r\n    uint callerIncentive = wildBalance * callIncentive / 100e18;\r\n    wildToken.transfer(msg.sender, callerIncentive);\r\n    wildToken.transfer(stakingPool, wildBalance - callerIncentive);\r\n\r\n    emit FeeDistribution(wildBalance - callerIncentive);\r\n  }\r\n\r\n  function setStakingRewards(address _value) external onlyOwner {\r\n    stakingPool = _value;\r\n  }\r\n\r\n  function setController(IController _value) external onlyOwner {\r\n    controller = _value;\r\n  }\r\n\r\n  function setCallIncentive(uint _value) external onlyOwner {\r\n    callIncentive = _value;\r\n  }\r\n\r\n  function permitToken(address _token, bool _value) external onlyOwner {\r\n    permittedTokens[_token] = _value;\r\n  }\r\n\r\n  function _validatePath(address[] memory _path) internal view {\r\n    require(_path[_path.length - 1] == address(wildToken), \"FeeConverter: must convert into WILD\");\r\n\r\n    // Validate only middle tokens. Skip the first and last token.\r\n    for (uint i; i < _path.length - 1; i++) {\r\n      if (i > 0) {\r\n        require(permittedTokens[_path[i]], \"FeeConverter: invalid path\");\r\n      }\r\n    }\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"contract IController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_wildToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_callIncentive\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferInitiated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILendingPair\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_supplyTokenAmount\",\"type\":\"uint256\"}],\"name\":\"convert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"permitToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permittedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setCallIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setStakingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wildToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FeeConverter","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d00000000000000000000000045ee906e9cfae0aabdb194d6180a3a119d4376c400000000000000000000000008a75dbc7167714ceac1a8e43a8d643a4edd625a000000000000000000000000c12ce0c877ce1c5c3314bfdf1d9e9dc4cdde0c700000000000000000000000000000000000000000000000004563918244f40000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c059d1588f299f50a3fe1ab6714e109742604b0c76e7ddf7a91b09d101932bb7"}]}