{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\n\r\n// The ABI encoder is necessary, but older Solidity versions should work\r\npragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n// These definitions are taken from across multiple dydx contracts, and are\r\n// limited to just the bare minimum necessary to make flash loans work.\r\nlibrary Types {\r\n    enum AssetDenomination { Wei, Par }\r\n    enum AssetReference { Delta, Target }\r\n    struct AssetAmount {\r\n        bool sign;\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n}\r\n\r\nlibrary Account {\r\n    struct Info {\r\n        address owner;\r\n        uint256 number;\r\n    }\r\n}\r\n\r\nlibrary Actions {\r\n    enum ActionType {\r\n        Deposit, Withdraw, Transfer, Buy, Sell, Trade, Liquidate, Vaporize, Call\r\n    }\r\n    struct ActionArgs {\r\n        ActionType actionType;\r\n        uint256 accountId;\r\n        Types.AssetAmount amount;\r\n        uint256 primaryMarketId;\r\n        uint256 secondaryMarketId;\r\n        address otherAddress;\r\n        uint256 otherAccountId;\r\n        bytes data;\r\n    }\r\n}\r\n\r\ninterface ISoloMargin {\r\n    function operate(Account.Info[] memory accounts, Actions.ActionArgs[] memory actions) external;\r\n}\r\n\r\n// The interface for a contract to be callable after receiving a flash loan\r\ninterface ICallee {\r\n    function callFunction(address sender, Account.Info memory accountInfo, bytes memory data) external;\r\n}\r\n\r\n// Standard ERC-20 interface\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Additional methods available for WETH\r\ninterface IWETH is IERC20 {\r\n    function deposit() external payable;\r\n    function withdraw(uint wad) external;\r\n}\r\n\r\ninterface Cryptopunks {\r\n    function punkIndexToAddress (uint256 punkIndex) external view returns (address);\r\n    function punkBids (uint256 punkIndex) external view returns ( bool , uint256 , address , uint256 );\r\n    function enterBidForPunk (uint256 punkIndex) external payable;\r\n    function withdrawBidForPunk (uint256 punkIndex) external;\r\n    function withdraw () external;\r\n}\r\n\r\ninterface ENS{\r\n    function setName(string memory name) external returns (bytes32);\r\n}\r\n\r\ncontract declineBid is ICallee {\r\n    // The WETH token contract, since we're assuming we want a loan in WETH\r\n    IWETH private WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    // The dydx Solo Margin contract, as can be found here:\r\n    // https://github.com/dydxprotocol/solo/blob/master/migrations/deployed.json\r\n    ISoloMargin private soloMargin = ISoloMargin(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e);\r\n    Cryptopunks constant punkContract=Cryptopunks(0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB);\r\n    ENS constant ensRegistar=ENS(0x084b1c3C81545d370f3634392De611CaaBFf8148);\r\n    address private owner;\r\n\r\n    constructor() {\r\n        // Give infinite approval to dydx to withdraw WETH on contract deployment,\r\n        // so we don't have to approve the loan repayment amount (+2 wei) on each call.\r\n        // The approval is used by the dydx contract to pay the loan back to itself.\r\n        WETH.approve(address(soloMargin), uint(-1));\r\n        owner= msg.sender;\r\n    }\r\n    \r\n    // This is the function we call\r\n    function declineBidOnPunk(uint256 punkIndex) external {\r\n        /*\r\n        The flash loan functionality in dydx is predicated by their \"operate\" function,\r\n        which takes a list of operations to execute, and defers validating the state of\r\n        things until it's done executing them.\r\n        \r\n        We thus create three operations, a Withdraw (which loans us the funds), a Call\r\n        (which invokes the callFunction method on this contract), and a Deposit (which\r\n        repays the loan, plus the 2 wei fee), and pass them all to \"operate\".\r\n        \r\n        Note that the Deposit operation will invoke the transferFrom to pay the loan \r\n        (or whatever amount it was initialised with) back to itself, there is no need\r\n        to pay it back explicitly.\r\n        \r\n        The loan must be given as an ERC-20 token, so WETH is used instead of ETH. Other\r\n        currencies (DAI, USDC) are also available, their index can be looked up by\r\n        calling getMarketTokenAddress on the solo margin contract, and set as the \r\n        primaryMarketId in the Withdraw and Deposit definitions.\r\n        */\r\n        \r\n        (,,,uint loanAmount) = punkContract.punkBids(punkIndex) ; //add 1 wei\r\n        require (loanAmount!=0,\"No bid on this punk!\");\r\n        require (msg.sender==owner || msg.sender==punkContract.punkIndexToAddress(punkIndex),\"Not your punk!\"); //owner may use for testing\r\n        loanAmount+=1;\r\n\r\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\r\n\r\n        operations[0] = Actions.ActionArgs({\r\n            actionType: Actions.ActionType.Withdraw,\r\n            accountId: 0,\r\n            amount: Types.AssetAmount({\r\n                sign: false,\r\n                denomination: Types.AssetDenomination.Wei,\r\n                ref: Types.AssetReference.Delta,\r\n                value: loanAmount // Amount to borrow\r\n            }),\r\n            primaryMarketId: 0, // WETH\r\n            secondaryMarketId: 0,\r\n            otherAddress: address(this),\r\n            otherAccountId: 0,\r\n            data: \"\"\r\n        });\r\n        \r\n        operations[1] = Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Call,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: false,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: 0\r\n                }),\r\n                primaryMarketId: 0,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: abi.encode(\r\n                    // Replace or add any additional variables that you want\r\n                    // to be available to the receiver function\r\n                    msg.sender,\r\n                    loanAmount,\r\n                    punkIndex\r\n                )\r\n            });\r\n        \r\n        operations[2] = Actions.ActionArgs({\r\n            actionType: Actions.ActionType.Deposit,\r\n            accountId: 0,\r\n            amount: Types.AssetAmount({\r\n                sign: true,\r\n                denomination: Types.AssetDenomination.Wei,\r\n                ref: Types.AssetReference.Delta,\r\n                value: loanAmount + 2 // Repayment amount with 2 wei fee\r\n            }),\r\n            primaryMarketId: 0, // WETH\r\n            secondaryMarketId: 0,\r\n            otherAddress: address(this),\r\n            otherAccountId: 0,\r\n            data: \"\"\r\n        });\r\n\r\n        Account.Info[] memory accountInfos = new Account.Info[](1);\r\n        accountInfos[0] = Account.Info({owner: address(this), number: 1});\r\n\r\n        soloMargin.operate(accountInfos, operations);\r\n    }\r\n    \r\n    // This is the function called by dydx after giving us the loan\r\n    function callFunction(address sender, Account.Info memory accountInfo, bytes memory data) external override {\r\n        // Decode the passed variables from the data object\r\n        (\r\n            // This must match the variables defined in the Call object above\r\n            address payable actualSender,\r\n            uint loanAmount,\r\n            uint256 punkIndex\r\n\r\n        ) = abi.decode(data, (\r\n            address, uint, uint256\r\n        ));\r\n        \r\n        // We now have a WETH balance of loanAmount. The logic for what we\r\n        // want to do with it goes here. The code below is just there in case\r\n        // it's useful.\r\n        WETH.withdraw(loanAmount);\r\n        punkContract.enterBidForPunk{value:loanAmount}(punkIndex);\r\n        punkContract.withdrawBidForPunk(punkIndex);\r\n        punkContract.withdraw();\r\n        WETH.deposit{value: loanAmount}();\r\n        // It can be useful for debugging to have a verbose error message when\r\n        // the loan can't be paid, since dydx doesn't provide one\r\n        require(WETH.balanceOf(address(this)) > loanAmount + 2, \"CANNOT REPAY LOAN\");\r\n    }\r\n\r\n    function setReverseRecord(string memory _name) external \r\n    {\r\n        require (msg.sender==owner);\r\n        ensRegistar.setName(_name);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Account.Info\",\"name\":\"accountInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"declineBidOnPunk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setReverseRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"declineBid","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://30c7b914c3ea755d42beb4cbc54c252acf8f380dff965a7a3d7db86f5f8128fa"}]}