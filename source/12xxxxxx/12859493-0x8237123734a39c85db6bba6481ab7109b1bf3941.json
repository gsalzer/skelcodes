{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\ncontract GebAuth {\r\n    // --- Authorization ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"GebAuth/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n\r\n    constructor () public {\r\n        authorizedAccounts[msg.sender] = 1;\r\n        emit AddAuthorization(msg.sender);\r\n    }\r\n}\r\n\r\nabstract contract RrfmCalculatorLike {\r\n    function modifyParameters(bytes32, uint256) virtual external;\r\n    function modifyParameters(bytes32, int256) virtual external;\r\n}\r\ncontract MinimalRrfmCalculatorOverlay is GebAuth {\r\n    // --- Vars ---\r\n    mapping(bytes32 => UnsignedBounds) public unsignedBounds;\r\n    mapping(bytes32 => SignedBounds)   public signedBounds;\r\n\r\n    RrfmCalculatorLike public calculator;\r\n\r\n    // --- Structs ---\r\n    struct UnsignedBounds {\r\n        uint256 upperBound;\r\n        uint256 lowerBound;\r\n    }\r\n    struct SignedBounds {\r\n        int256 upperBound;\r\n        int256 lowerBound;\r\n    }\r\n\r\n    constructor(\r\n        address calculator_,\r\n        bytes32[] memory unsignedParams,\r\n        bytes32[] memory signedParams,\r\n        uint256[] memory unsignedUpperBounds,\r\n        uint256[] memory unsignedLowerBounds,\r\n        int256[] memory signedUpperBounds,\r\n        int256[] memory signedLowerBounds\r\n    ) public {\r\n        require(\r\n          both(unsignedParams.length == unsignedUpperBounds.length, unsignedParams.length == unsignedLowerBounds.length),\r\n          \"MinimalRrfmCalculatorOverlay/invalid-unsigned-lengths\"\r\n        );\r\n        require(\r\n          both(signedParams.length == signedUpperBounds.length, signedParams.length == signedLowerBounds.length),\r\n          \"MinimalRrfmCalculatorOverlay/invalid-signed-lengths\"\r\n        );\r\n        require(calculator_ != address(0), \"MinimalRrfmCalculatorOverlay/null-calculator\");\r\n\r\n        uint256 i;\r\n        for (i = 0; i < unsignedParams.length; i++) {\r\n            require(either(unsignedUpperBounds[i] != 0, unsignedLowerBounds[i] != 0), \"MinimalRrfmCalculatorOverlay/invalid-uint-bounds\");\r\n            require(unsignedUpperBounds[i] >= unsignedLowerBounds[i], \"MinimalRrfmCalculatorOverlay/incorrect-uint-bounds\");\r\n            unsignedBounds[unsignedParams[i]] = UnsignedBounds(unsignedUpperBounds[i], unsignedLowerBounds[i]);\r\n        }\r\n        for (i = 0; i < signedParams.length; i++) {\r\n            require(either(signedUpperBounds[i] != 0, signedLowerBounds[i] != 0), \"MinimalRrfmCalculatorOverlay/invalid-int-bounds\");\r\n            require(signedUpperBounds[i] >= signedLowerBounds[i], \"MinimalRrfmCalculatorOverlay/incorrect-int-bounds\");\r\n            signedBounds[signedParams[i]] = SignedBounds(signedUpperBounds[i], signedLowerBounds[i]);\r\n        }\r\n\r\n        calculator = RrfmCalculatorLike(calculator_);\r\n    }\r\n    \r\n    // --- Boolean Logic ---\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n\r\n    /*\r\n    * @notify Modify a uint256 param inside the calculator\r\n    * @param parameter The parameter's name\r\n    * @param val The new value for the parameter\r\n    */\r\n    function modifyParameters(bytes32 parameter, uint256 val) external isAuthorized {\r\n        UnsignedBounds memory bounds = unsignedBounds[parameter];\r\n\r\n        if (parameter == \"allReaderToggle\") {\r\n            calculator.modifyParameters(parameter, uint(1));\r\n        }\r\n        else if (either(bounds.upperBound != 0, bounds.lowerBound != 0)) {\r\n            require(both(val >= bounds.lowerBound, val <= bounds.upperBound), \"MinimalRrfmCalculatorOverlay/invalid-value\");\r\n            calculator.modifyParameters(parameter, val);\r\n        }\r\n        else revert(\"MinimalRrfmCalculatorOverlay/modify-forbidden-param\");\r\n    }\r\n\r\n    /*\r\n    * @notify Modify a int256 param inside the calculator\r\n    * @param parameter The parameter's name\r\n    * @param val The new value for the parameter\r\n    */\r\n    function modifyParameters(bytes32 parameter, int256 val) external isAuthorized {\r\n        SignedBounds memory bounds = signedBounds[parameter];\r\n\r\n        if (parameter == \"pdc\") {\r\n            calculator.modifyParameters(parameter, int(0));\r\n        }\r\n        else if (either(bounds.upperBound != 0, bounds.lowerBound != 0)) {\r\n            require(both(val >= bounds.lowerBound, val <= bounds.upperBound), \"MinimalRrfmCalculatorOverlay/invalid-value\");\r\n            calculator.modifyParameters(parameter, val);\r\n        }\r\n        else revert(\"MinimalRrfmCalculatorOverlay/modify-forbidden-param\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"calculator_\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"unsignedParams\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"signedParams\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unsignedUpperBounds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unsignedLowerBounds\",\"type\":\"uint256[]\"},{\"internalType\":\"int256[]\",\"name\":\"signedUpperBounds\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"signedLowerBounds\",\"type\":\"int256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculator\",\"outputs\":[{\"internalType\":\"contract RrfmCalculatorLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"signedBounds\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"upperBound\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lowerBound\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"unsignedBounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MinimalRrfmCalculatorOverlay","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000564aecea06a74caa67a4c4c37087851eef56c2900000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000000273670000000000000000000000000000000000000000000000000000000000006167000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000269707300000000000000000000000000000000000000000000000000000000007073636c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000ad78ebc5ac62000000000000000000000000000000000000000000000000000004563918244f4000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000003782dace9d90000000000000000000000000000000000000000000000000000006f05b59d3b20000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000033a5a7a8401b34f4700000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000e1000000000000000000000000000000000000000000332e8a789bc7ef49e000000","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c7fb83ca9e9d80b4cfff1e375efb8e85ee0bfc93dbf2731b93d9d50d4c38ba99"}]}