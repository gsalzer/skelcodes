{"status":"1","message":"OK","result":[{"SourceCode":"{\"AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.12;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n    function description() external view returns (string memory);\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId) external view returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n\\n    function latestRoundData() external view returns (\\n        uint80 roundId,\\n        int256 answer,\\n        uint256 startedAt,\\n        uint256 updatedAt,\\n        uint80 answeredInRound\\n    );\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\"},\"IExOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IExOracle\\n{\\n    function get(string calldata priceType, address source) external view returns (uint, uint);\\n}\"},\"IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.12;\\n\\n// Ref: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Pair.sol\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address owner) external view returns (uint);\\n\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n\\n    function transfer(address to, uint value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n    external\\n    view\\n    returns (\\n        uint112 reserve0,\\n        uint112 reserve1,\\n        uint32 blockTimestampLast\\n    );\\n\\n    function price0CumulativeLast() external view returns (uint);\\n\\n    function price1CumulativeLast() external view returns (uint);\\n\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"},\"KineMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\n\\nlibrary KineMath{\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c \\u003e= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint a, uint b) internal pure returns (uint) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b \\u003c= a, errorMessage);\\n        uint c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint a, uint b) internal pure returns (uint) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n\\n    // implementation from https://github.com/Uniswap/uniswap-lib/commit/99f3f28770640ba1bb1ff460ac7c5292fb8291a0\\n    // original implementation: https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint x) pure internal returns (uint) {\\n        if (x == 0) return 0;\\n        uint xx = x;\\n        uint r = 1;\\n\\n        if (xx \\u003e= 0x100000000000000000000000000000000) {\\n            xx \\u003e\\u003e= 128;\\n            r \\u003c\\u003c= 64;\\n        }\\n        if (xx \\u003e= 0x10000000000000000) {\\n            xx \\u003e\\u003e= 64;\\n            r \\u003c\\u003c= 32;\\n        }\\n        if (xx \\u003e= 0x100000000) {\\n            xx \\u003e\\u003e= 32;\\n            r \\u003c\\u003c= 16;\\n        }\\n        if (xx \\u003e= 0x10000) {\\n            xx \\u003e\\u003e= 16;\\n            r \\u003c\\u003c= 8;\\n        }\\n        if (xx \\u003e= 0x100) {\\n            xx \\u003e\\u003e= 8;\\n            r \\u003c\\u003c= 4;\\n        }\\n        if (xx \\u003e= 0x10) {\\n            xx \\u003e\\u003e= 4;\\n            r \\u003c\\u003c= 2;\\n        }\\n        if (xx \\u003e= 0x8) {\\n            r \\u003c\\u003c= 1;\\n        }\\n\\n        r = (r + x / r) \\u003e\\u003e 1;\\n        r = (r + x / r) \\u003e\\u003e 1;\\n        r = (r + x / r) \\u003e\\u003e 1;\\n        r = (r + x / r) \\u003e\\u003e 1;\\n        r = (r + x / r) \\u003e\\u003e 1;\\n        r = (r + x / r) \\u003e\\u003e 1;\\n        r = (r + x / r) \\u003e\\u003e 1; // Seven iterations should be enough\\n        uint r1 = x / r;\\n        return (r \\u003c r1 ? r : r1);\\n    }\\n}\\n\"},\"KineOracleV2.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./PriceConfig.sol\\\";\\nimport \\\"./IUniswapV2Pair.sol\\\";\\n\\n/// @title Kine Protocol Oracle V2\\n/// @author Kine Technology\\ncontract KineOracleV2 is PriceConfig {\\n    /// @notice The latest mcd update time\\n    uint public mcdLastUpdatedAt;\\n\\n    /// @notice The scale constant\\n    uint public constant priceScale = 1e36;\\n\\n    /// @notice The kaptain address allowed to operate oracle prices\\n    address public kaptain;\\n\\n    /// @notice The symbol hash of the string \\\"MCD\\\"\\n    bytes32 public constant mcdHash = keccak256(abi.encodePacked(\\\"MCD\\\"));\\n\\n    /// @notice The kaptain prices mapped by symbol hash\\n    mapping(bytes32 =\\u003e uint) public prices;\\n\\n    /// @notice Kaptain post price event\\n    event PriceUpdated(string symbol, uint price);\\n\\n    /// @notice The event emitted when Kaptain is updated\\n    event KaptainUpdated(address fromAddress, address toAddress);\\n\\n    /// @notice Only kaptain can update kaptain price and mcd price\\n    modifier onlyKaptain(){\\n        require(kaptain == _msgSender(), \\\"caller is not Kaptain\\\");\\n        _;\\n    }\\n\\n    constructor(address kaptain_, KTokenConfig[] memory configs) public {\\n        kaptain = kaptain_;\\n        for (uint i = 0; i \\u003c configs.length; i++) {\\n            KTokenConfig memory config = configs[i];\\n            _pushConfig(config);\\n        }\\n    }\\n\\n    /*********************************************************************************************\\n     * Price controller needs\\n     * gup = getUnderlyingPrice                          Pr * 1e36\\n     * Pr = realPricePerToken                 gup  =  ---------------\\n     * Ub = baseUnit                                        Ub\\n     *********************************************************************************************/\\n    /**\\n     * @notice Get the underlying price of a kToken\\n     * @param kToken The kToken address for price retrieval\\n     * @return Price denominated in USD\\n     */\\n    function getUnderlyingPrice(address kToken) public view returns (uint){\\n        KTokenConfig memory config = getKConfigByKToken(kToken);\\n        uint price;\\n        if (config.priceSource == PriceSource.CHAINLINK) {\\n            price = _calcPrice(_getChainlinkPrice(config), config);\\n        }else if (config.priceSource == PriceSource.KAPTAIN) {\\n            price = _calcPrice(_getKaptainPrice(config), config);\\n        }else if (config.priceSource == PriceSource.LP){\\n            price = _calcLpPrice(config);\\n        }else{\\n            revert(\\\"invalid price source\\\");\\n        }\\n\\n        require(price != 0, \\\"invalid price 0\\\");\\n\\n        return price;\\n    }\\n\\n    /**\\n     * @notice Get the underlying price with a token symbol\\n     * @param symbol The token symbol for price retrieval\\n     * @return Price denominated in USD\\n     */\\n    function getUnderlyingPriceBySymbol(string memory symbol) external view returns (uint){\\n        KTokenConfig memory config = getKConfigBySymbolHash(keccak256(abi.encodePacked(symbol)));\\n        return getUnderlyingPrice(config.kToken);\\n    }\\n\\n    /*********************************************************************************************\\n     * gup = getUnderlyingPrice\\n     * Ps = priceFromPriceSource                                  Ps * 1e36\\n     * Up = priceUnit                                   gup  =  -------------\\n     * Ub = baseUnit                                                 PM\\n     * PM = Up * Ub\\n     *********************************************************************************************/\\n    /**\\n     * @notice Calculate the price to fit the price Kine controller needs\\n     * @param price The price from price source such as chainlink\\n     * @param config The kToken configuration\\n     * @return Price denominated in USD\\n     */\\n    function _calcPrice(uint price, KTokenConfig memory config) internal pure returns (uint){\\n        return price.mul(priceScale).div(config.priceMantissa);\\n    }\\n\\n    /*********************************************************************************************\\n     *  Pl = lpPrice\\n     *  p0 = token0_PriceFromPriceSource\\n     *  p1 = token1_PriceFromPriceSource\\n     *  r0 = reserve0                                 2 * sqrt(p0 * r0) * sqrt(p1 * r1) * 1e36\\n     *  r1 = reserve1                          Pl = --------------------------------------------\\n     *  PM0 = Token0_PriceMantissa                         totalSupply * sqrt(PM0 * PM1)\\n     *  PM1 = Token1_PriceMantissa\\n     *  totalSupply = LP totalSupply\\n     *  PriceMantissa = priceUnit * baseUnit\\n     *********************************************************************************************/\\n    function _calcLpPrice(KTokenConfig memory config) internal view returns (uint){\\n        uint numerator;\\n        uint denominator;\\n        KTokenConfig memory config0;\\n        KTokenConfig memory config1;\\n\\n        {\\n            address token0 = IUniswapV2Pair(config.underlying).token0();\\n            address token1 = IUniswapV2Pair(config.underlying).token1();\\n            config0 = getKConfigByUnderlying(token0);\\n            config1 = getKConfigByUnderlying(token1);\\n        }\\n\\n        {\\n            (uint r0, uint r1, ) = IUniswapV2Pair(config.underlying).getReserves();\\n            numerator = (_getSourcePrice(config0).mul(r0).sqrt())\\n                            .mul(_getSourcePrice(config1).mul(r1).sqrt())\\n                            .mul(2).mul(priceScale);\\n        }\\n\\n        {\\n            uint totalSupply = IUniswapV2Pair(config.underlying).totalSupply();\\n            uint pmMultiplier = config0.priceMantissa.mul(config1.priceMantissa);\\n            denominator = totalSupply.mul(pmMultiplier.sqrt());\\n        }\\n\\n        return numerator.div(denominator);\\n    }\\n\\n    function _getSourcePrice(KTokenConfig memory config) internal view returns (uint){\\n        if (config.priceSource == PriceSource.CHAINLINK) {\\n            return _getChainlinkPrice(config);\\n        }\\n        if (config.priceSource == PriceSource.KAPTAIN) {\\n            return _getKaptainPrice(config);\\n        }\\n\\n        revert(\\\"invalid config\\\");\\n    }\\n\\n    function _getChainlinkPrice(KTokenConfig memory config) internal view returns (uint){\\n        // Check aggregator address\\n        AggregatorV3Interface agg = aggregators[config.symbolHash];\\n        require(address(agg) != address(0), \\\"aggregator address not found\\\");\\n        (, int price, , ,) = agg.latestRoundData();\\n        return uint(price);\\n    }\\n\\n    function _getKaptainPrice(KTokenConfig memory config) internal view returns (uint){\\n        return prices[config.symbolHash];\\n    }\\n\\n    /// @notice Only Kaptain allowed to operate prices\\n    function postPrices(string[] calldata symbolArray, uint[] calldata priceArray) external onlyKaptain {\\n        require(symbolArray.length == priceArray.length, \\\"length mismatch\\\");\\n        // iterate and set\\n        for (uint i = 0; i \\u003c symbolArray.length; i++) {\\n            KTokenConfig memory config = getKConfigBySymbolHash(keccak256(abi.encodePacked(symbolArray[i])));\\n            require(config.priceSource == PriceSource.KAPTAIN, \\\"can only post kaptain price\\\");\\n            require(config.symbolHash != mcdHash, \\\"cannot post mcd price here\\\");\\n            require(priceArray[i] != 0, \\\"price cannot be 0\\\");\\n            prices[config.symbolHash] = priceArray[i];\\n        }\\n    }\\n\\n    /// @notice Kaptain call to set the latest mcd price\\n    function postMcdPrice(uint mcdPrice) external onlyKaptain {\\n        require(mcdPrice != 0, \\\"MCD price cannot be 0\\\");\\n        mcdLastUpdatedAt = block.timestamp;\\n        prices[mcdHash] = mcdPrice;\\n        emit PriceUpdated(\\\"MCD\\\", mcdPrice);\\n    }\\n\\n    function changeKaptain(address kaptain_) external onlyOwner {\\n        require(kaptain != kaptain_, \\\"same kaptain\\\");\\n        address oldKaptain = kaptain;\\n        kaptain = kaptain_;\\n        emit KaptainUpdated(oldKaptain, kaptain);\\n    }\\n\\n    function addConfig(address kToken_, address underlying_, bytes32 symbolHash_, uint baseUnit_, uint priceUnit_,\\n        PriceSource priceSource_) external onlyOwner {\\n        KTokenConfig memory config = KTokenConfig({\\n        kToken : kToken_,\\n        underlying : underlying_,\\n        symbolHash : symbolHash_,\\n        baseUnit : baseUnit_,\\n        priceUnit : priceUnit_,\\n        priceMantissa: baseUnit_.mul(priceUnit_),\\n        priceSource : priceSource_\\n        });\\n\\n        _pushConfig(config);\\n    }\\n\\n    function removeConfigByKToken(address kToken) external onlyOwner {\\n        KTokenConfig memory configToDelete = _deleteConfigByKToken(kToken);\\n        // remove all token related information\\n        delete prices[configToDelete.symbolHash];\\n    }\\n}\\n\\n\"},\"KineOracleV2OkexChain.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./PriceConfigOkexChain.sol\\\";\\nimport \\\"./IUniswapV2Pair.sol\\\";\\n\\n/// @title Kine Protocol Oracle V2\\n/// @author Kine Technology\\ncontract KineOracleV2OkexChain is PriceConfigOkexChain {\\n    /// @notice The latest mcd update time\\n    uint public mcdLastUpdatedAt;\\n\\n    /// @notice The scale constant\\n    uint public constant priceScale = 1e36;\\n\\n    /// @notice The kaptain address allowed to operate oracle prices\\n    address public kaptain;\\n\\n    /// @notice The symbol hash of the string \\\"MCD\\\"\\n    bytes32 public constant mcdHash = keccak256(abi.encodePacked(\\\"MCD\\\"));\\n\\n    /// @notice The kaptain prices mapped by symbol hash\\n    mapping(bytes32 =\\u003e uint) public prices;\\n\\n    /// @notice Kaptain post price event\\n    event PriceUpdated(string symbol, uint price);\\n\\n    /// @notice The event emitted when Kaptain is updated\\n    event KaptainUpdated(address fromAddress, address toAddress);\\n\\n    /// @notice Only kaptain can update kaptain price and mcd price\\n    modifier onlyKaptain(){\\n        require(kaptain == _msgSender(), \\\"caller is not Kaptain\\\");\\n        _;\\n    }\\n\\n    constructor(address kaptain_, KTokenConfig[] memory configs, address exOracleAddress_, ExOracleConfig[] memory exOracleConfigs) public {\\n        kaptain = kaptain_;\\n        for (uint i = 0; i \\u003c configs.length; i++) {\\n            KTokenConfig memory config = configs[i];\\n            _pushConfig(config);\\n        }\\n        exOracleView = IExOracle(exOracleAddress_);\\n\\n        for(uint i = 0; i \\u003c exOracleConfigs.length; i++){\\n            ExOracleConfig memory exOracleConfig = exOracleConfigs[i];\\n            setExOracleConfig(exOracleConfig.kToken, exOracleConfig.symbol, exOracleConfig.source);\\n        }\\n    }\\n\\n    /*********************************************************************************************\\n     * Price controller needs\\n     * gup = getUnderlyingPrice                          Pr * 1e36\\n     * Pr = realPricePerToken                 gup  =  ---------------\\n     * Ub = baseUnit                                        Ub\\n     *********************************************************************************************/\\n    /**\\n     * @notice Get the underlying price of a kToken\\n     * @param kToken The kToken address for price retrieval\\n     * @return Price denominated in USD\\n     */\\n    function getUnderlyingPrice(address kToken) public view returns (uint){\\n        KTokenConfig memory config = getKConfigByKToken(kToken);\\n        uint price;\\n        if (config.priceSource == PriceSource.EXORACLE) {\\n            price = _calcPrice(_getExOraclePrice(config), config);\\n        }else if (config.priceSource == PriceSource.CHAINLINK) {\\n            price = _calcPrice(_getChainlinkPrice(config), config);\\n        }else if (config.priceSource == PriceSource.KAPTAIN) {\\n            price = _calcPrice(_getKaptainPrice(config), config);\\n        }else if (config.priceSource == PriceSource.LP){\\n            price = _calcLpPrice(config);\\n        }else{\\n            revert(\\\"invalid price source\\\");\\n        }\\n\\n        require(price != 0, \\\"invalid price 0\\\");\\n\\n        return price;\\n    }\\n\\n    /**\\n     * @notice Get the underlying price with a token symbol\\n     * @param symbol The token symbol for price retrieval\\n     * @return Price denominated in USD\\n     */\\n    function getUnderlyingPriceBySymbol(string memory symbol) external view returns (uint){\\n        KTokenConfig memory config = getKConfigBySymbolHash(keccak256(abi.encodePacked(symbol)));\\n        return getUnderlyingPrice(config.kToken);\\n    }\\n\\n    /*********************************************************************************************\\n     * gup = getUnderlyingPrice\\n     * Ps = priceFromPriceSource                                  Ps * 1e36\\n     * Up = priceUnit                                   gup  =  -------------\\n     * Ub = baseUnit                                                 PM\\n     * PM = Up * Ub\\n     *********************************************************************************************/\\n    /**\\n     * @notice Calculate the price to fit the price Kine controller needs\\n     * @param price The price from price source such as chainlink\\n     * @param config The kToken configuration\\n     * @return Price denominated in USD\\n     */\\n    function _calcPrice(uint price, KTokenConfig memory config) internal pure returns (uint){\\n        return price.mul(priceScale).div(config.priceMantissa);\\n    }\\n\\n    /*********************************************************************************************\\n     *  Pl = lpPrice\\n     *  p0 = token0_PriceFromPriceSource\\n     *  p1 = token1_PriceFromPriceSource\\n     *  r0 = reserve0                                 2 * sqrt(p0 * r0) * sqrt(p1 * r1) * 1e36\\n     *  r1 = reserve1                          Pl = --------------------------------------------\\n     *  PM0 = Token0_PriceMantissa                         totalSupply * sqrt(PM0 * PM1)\\n     *  PM1 = Token1_PriceMantissa\\n     *  totalSupply = LP totalSupply\\n     *  PriceMantissa = priceUnit * baseUnit\\n     *********************************************************************************************/\\n    function _calcLpPrice(KTokenConfig memory config) internal view returns (uint){\\n        uint numerator;\\n        uint denominator;\\n        KTokenConfig memory config0;\\n        KTokenConfig memory config1;\\n\\n        {\\n            address token0 = IUniswapV2Pair(config.underlying).token0();\\n            address token1 = IUniswapV2Pair(config.underlying).token1();\\n            config0 = getKConfigByUnderlying(token0);\\n            config1 = getKConfigByUnderlying(token1);\\n        }\\n\\n        {\\n            (uint r0, uint r1, ) = IUniswapV2Pair(config.underlying).getReserves();\\n            numerator = (_getSourcePrice(config0).mul(r0).sqrt())\\n            .mul(_getSourcePrice(config1).mul(r1).sqrt())\\n            .mul(2).mul(priceScale);\\n        }\\n\\n        {\\n            uint totalSupply = IUniswapV2Pair(config.underlying).totalSupply();\\n            uint pmMultiplier = config0.priceMantissa.mul(config1.priceMantissa);\\n            denominator = totalSupply.mul(pmMultiplier.sqrt());\\n        }\\n\\n        return numerator.div(denominator);\\n    }\\n\\n    function _getSourcePrice(KTokenConfig memory config) internal view returns (uint){\\n        if (config.priceSource == PriceSource.CHAINLINK) {\\n            return _getChainlinkPrice(config);\\n        }\\n        if (config.priceSource == PriceSource.KAPTAIN) {\\n            return _getKaptainPrice(config);\\n        }\\n\\n        revert(\\\"invalid config\\\");\\n    }\\n\\n    function _getChainlinkPrice(KTokenConfig memory config) internal view returns (uint){\\n        // Check aggregator address\\n        AggregatorV3Interface agg = aggregators[config.symbolHash];\\n        require(address(agg) != address(0), \\\"aggregator address not found\\\");\\n        (, int price, , ,) = agg.latestRoundData();\\n        return uint(price);\\n    }\\n\\n    function _getExOraclePrice(KTokenConfig memory config) internal view returns (uint){\\n        // Check exOracle address\\n        ExOracleConfig memory exOracleConfig = exOracleConfigs[config.kToken];\\n        require(exOracleConfig.kToken != address(0), \\\"ExOracle config not found\\\");\\n        (uint price, ) = exOracleView.get(exOracleConfig.symbol, exOracleConfig.source);\\n        return price;\\n    }\\n\\n    function _getKaptainPrice(KTokenConfig memory config) internal view returns (uint){\\n        return prices[config.symbolHash];\\n    }\\n\\n    /// @notice Only Kaptain allowed to operate prices\\n    function postPrices(string[] calldata symbolArray, uint[] calldata priceArray) external onlyKaptain {\\n        require(symbolArray.length == priceArray.length, \\\"length mismatch\\\");\\n        // iterate and set\\n        for (uint i = 0; i \\u003c symbolArray.length; i++) {\\n            KTokenConfig memory config = getKConfigBySymbolHash(keccak256(abi.encodePacked(symbolArray[i])));\\n            require(config.priceSource == PriceSource.KAPTAIN, \\\"can only post kaptain price\\\");\\n            require(config.symbolHash != mcdHash, \\\"cannot post mcd price here\\\");\\n            require(priceArray[i] != 0, \\\"price cannot be 0\\\");\\n            prices[config.symbolHash] = priceArray[i];\\n        }\\n    }\\n\\n    /// @notice Kaptain call to set the latest mcd price\\n    function postMcdPrice(uint mcdPrice) external onlyKaptain {\\n        require(mcdPrice != 0, \\\"MCD price cannot be 0\\\");\\n        mcdLastUpdatedAt = block.timestamp;\\n        prices[mcdHash] = mcdPrice;\\n        emit PriceUpdated(\\\"MCD\\\", mcdPrice);\\n    }\\n\\n    function changeKaptain(address kaptain_) external onlyOwner {\\n        require(kaptain != kaptain_, \\\"same kaptain\\\");\\n        address oldKaptain = kaptain;\\n        kaptain = kaptain_;\\n        emit KaptainUpdated(oldKaptain, kaptain);\\n    }\\n\\n    function addConfig(address kToken_, address underlying_, bytes32 symbolHash_, uint baseUnit_, uint priceUnit_,\\n        PriceSource priceSource_) external onlyOwner {\\n        KTokenConfig memory config = KTokenConfig({\\n        kToken : kToken_,\\n        underlying : underlying_,\\n        symbolHash : symbolHash_,\\n        baseUnit : baseUnit_,\\n        priceUnit : priceUnit_,\\n        priceMantissa: baseUnit_.mul(priceUnit_),\\n        priceSource : priceSource_\\n        });\\n\\n        _pushConfig(config);\\n    }\\n\\n    function removeConfigByKToken(address kToken) external onlyOwner {\\n        KTokenConfig memory configToDelete = _deleteConfigByKToken(kToken);\\n        // remove all token related information\\n        delete prices[configToDelete.symbolHash];\\n    }\\n}\\n\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"},\"PriceConfig.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\nimport \\\"./KineMath.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ncontract PriceConfig is Ownable {\\n    using KineMath for uint;\\n\\n    enum PriceSource {\\n        CHAINLINK, // Price from chainlink, priceUnit is aggregator decimals, baseUnit depends on underlying\\n        KAPTAIN,   // Price posted by kaptain\\n        LP,        // LP baseUnit is 1e18, priceUnit is 1e18\\n        EXORACLE   // Price from ExOracle, priceUnit is 1e6\\n    }\\n\\n    struct KTokenConfig {\\n        address kToken;\\n        address underlying;\\n        bytes32 symbolHash;\\n        uint baseUnit;      // baseUnit: underlying decimal\\n        uint priceUnit;     // priceUnit: price decimal\\n        uint priceMantissa; // priceMantissa = priceUnit * baseUnit\\n        PriceSource priceSource;\\n    }\\n\\n    // Chainlink aggregator map, bytes32 =\\u003e AggregatorV3Interface\\n    mapping(bytes32 =\\u003e AggregatorV3Interface) public aggregators;\\n\\n    // Map used for ExOracle price query, kToken =\\u003e symbolUsedToCall\\n    mapping(address =\\u003e string) public kTokenSymbol;\\n\\n    KTokenConfig[] public kTokenConfigs;\\n\\n    /// @notice New chainlink aggregator\\n    event AggregatorUpdated(string symbol, address source);\\n\\n    /// @notice Configuration added event\\n    event TokenConfigAdded(address kToken, address underlying, bytes32 symbolHash,\\n        uint baseUnit, uint priceUnit, uint PriceMantissa, PriceSource priceSource);\\n\\n    /// @notice Configuration removed event\\n    event TokenConfigRemoved(address kToken, address underlying, bytes32 symbolHash,\\n        uint baseUnit, uint priceUnit, uint PriceMantissa, PriceSource priceSource);\\n\\n    function _pushConfig(KTokenConfig memory config) internal {\\n        require(config.priceMantissa == config.baseUnit.mul(config.priceUnit), \\\"invalid priceMantissa\\\");\\n\\n        // check baseUnit\\n        IERC20 underlying = IERC20(config.underlying);\\n        uint tokenDecimals = uint(underlying.decimals());\\n        require(10**tokenDecimals == config.baseUnit, \\\"mismatched baseUnit\\\");\\n\\n        kTokenConfigs.push(config);\\n        emit TokenConfigAdded(config.kToken, config.underlying, config.symbolHash,\\n            config.baseUnit, config.priceUnit, config.priceMantissa, config.priceSource);\\n    }\\n\\n    // @dev must be called after you add chainlink sourced config\\n    function setAggregators(string[] calldata symbols, address[] calldata sources) public onlyOwner {\\n        require(symbols.length == sources.length, \\\"mismatched input\\\");\\n        for (uint i = 0; i \\u003c symbols.length; i++) {\\n            KTokenConfig memory config = getKConfigBySymbolHash(keccak256(abi.encodePacked(symbols[i])));\\n            AggregatorV3Interface agg = AggregatorV3Interface(sources[i]);\\n            aggregators[config.symbolHash] = agg;\\n            uint priceDecimals = uint(agg.decimals());\\n            require(10**priceDecimals == config.priceUnit, \\\"mismatched priceUnit\\\");\\n            emit AggregatorUpdated(symbols[i], sources[i]);\\n        }\\n    }\\n\\n    function setExOracleCallSymbols(address[] calldata kTokens, string[] calldata symbols) public onlyOwner {\\n\\n    }\\n\\n    function _deleteConfigByKToken(address kToken) internal returns(KTokenConfig memory){\\n        uint index = getKConfigIndexByKToken(kToken);\\n        KTokenConfig memory configToDelete = kTokenConfigs[index];\\n        kTokenConfigs[index] = kTokenConfigs[kTokenConfigs.length - 1];\\n\\n        // If chainlink price source, remove its aggregator\\n        if (configToDelete.priceSource == PriceSource.CHAINLINK) {\\n            delete aggregators[configToDelete.symbolHash];\\n        }\\n        kTokenConfigs.pop();\\n\\n        emit TokenConfigRemoved(configToDelete.kToken, configToDelete.underlying,\\n            configToDelete.symbolHash, configToDelete.baseUnit, configToDelete.priceUnit,\\n            configToDelete.priceMantissa, configToDelete.priceSource);\\n\\n        return configToDelete;\\n    }\\n\\n    function getKConfigIndexByKToken(address kToken) public view returns (uint){\\n        for (uint i = 0; i \\u003c kTokenConfigs.length; i++) {\\n            KTokenConfig memory config = kTokenConfigs[i];\\n            if (config.kToken == kToken) {\\n                return i;\\n            }\\n        }\\n        return uint(-1);\\n    }\\n\\n    function getKConfigIndexByUnderlying(address underlying) public view returns (uint){\\n        for (uint i = 0; i \\u003c kTokenConfigs.length; i++) {\\n            KTokenConfig memory config = kTokenConfigs[i];\\n            if (config.underlying == underlying) {\\n                return i;\\n            }\\n        }\\n        return uint(-1);\\n    }\\n\\n    function getKConfigIndexBySymbolHash(bytes32 symbolHash) public view returns (uint){\\n        for (uint i = 0; i \\u003c kTokenConfigs.length; i++) {\\n            KTokenConfig memory config = kTokenConfigs[i];\\n            if (config.symbolHash == symbolHash) {\\n                return i;\\n            }\\n        }\\n        return uint(-1);\\n    }\\n\\n    // if not found should revert\\n    function getKConfigByKToken(address kToken) public view returns (KTokenConfig memory) {\\n        uint index = getKConfigIndexByKToken(kToken);\\n        if (index != uint(-1)) {\\n            return kTokenConfigs[index];\\n        }\\n        revert(\\\"token config not found\\\");\\n    }\\n\\n    function getKConfigBySymbolHash(bytes32 symbolHash) public view returns (KTokenConfig memory) {\\n        uint index = getKConfigIndexBySymbolHash(symbolHash);\\n        if (index != uint(-1)) {\\n            return kTokenConfigs[index];\\n        }\\n        revert(\\\"token config not found\\\");\\n    }\\n\\n    function getKConfigBySymbol(string memory symbol) external view returns (KTokenConfig memory) {\\n        return getKConfigBySymbolHash(keccak256(abi.encodePacked(symbol)));\\n    }\\n\\n    function getKConfigByUnderlying(address underlying) public view returns (KTokenConfig memory) {\\n        uint index = getKConfigIndexByUnderlying(underlying);\\n        if (index != uint(-1)) {\\n            return kTokenConfigs[index];\\n        }\\n        revert(\\\"token config not found\\\");\\n    }\\n}\"},\"PriceConfigOkexChain.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\nimport \\\"./KineMath.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IExOracle.sol\\\";\\n\\ncontract PriceConfigOkexChain is Ownable {\\n    using KineMath for uint;\\n\\n    enum PriceSource {\\n        CHAINLINK, // Price from chainlink, priceUnit is aggregator decimals, baseUnit depends on underlying\\n        KAPTAIN,   // Price posted by kaptain\\n        LP,        // LP baseUnit is 1e18, priceUnit is 1e18\\n        EXORACLE   // Price from ExOracle, priceUnit is 1e6\\n    }\\n\\n    struct KTokenConfig {\\n        address kToken;\\n        address underlying;\\n        bytes32 symbolHash;\\n        uint baseUnit;      // baseUnit: underlying decimal\\n        uint priceUnit;     // priceUnit: price decimal\\n        uint priceMantissa; // priceMantissa = priceUnit * baseUnit\\n        PriceSource priceSource;\\n    }\\n\\n    struct ExOracleConfig {\\n        address kToken;\\n        string symbol;\\n        address source;\\n    }\\n\\n    // Chainlink aggregator map, bytes32 =\\u003e AggregatorV3Interface\\n    mapping(bytes32 =\\u003e AggregatorV3Interface) public aggregators;\\n\\n    // Map used for ExOracle price query, kToken =\\u003e ExOracleConfig\\n    mapping(address =\\u003e ExOracleConfig) public exOracleConfigs;\\n\\n    IExOracle public exOracleView;\\n\\n    KTokenConfig[] public kTokenConfigs;\\n\\n    /// @notice New chainlink aggregator\\n    event AggregatorUpdated(string symbol, address source);\\n\\n    /// @notice Configuration added event\\n    event TokenConfigAdded(address kToken, address underlying, bytes32 symbolHash,\\n        uint baseUnit, uint priceUnit, uint PriceMantissa, PriceSource priceSource);\\n\\n    /// @notice Configuration removed event\\n    event TokenConfigRemoved(address kToken, address underlying, bytes32 symbolHash,\\n        uint baseUnit, uint priceUnit, uint PriceMantissa, PriceSource priceSource);\\n\\n    /// @notice ExOracle address update event\\n    event ExOracleAddressUpdated(address fromAddress, address toAddress);\\n\\n    /// @notice ExOracle configuraion setting event\\n    event ExOracleConfigUpdated(address kToken, string symbol, address source);\\n\\n    function _pushConfig(KTokenConfig memory config) internal {\\n        require(config.priceMantissa == config.baseUnit.mul(config.priceUnit), \\\"invalid priceMantissa\\\");\\n\\n        // check baseUnit\\n        IERC20 underlying = IERC20(config.underlying);\\n        uint tokenDecimals = uint(underlying.decimals());\\n        require(10**tokenDecimals == config.baseUnit, \\\"mismatched baseUnit\\\");\\n\\n        kTokenConfigs.push(config);\\n        emit TokenConfigAdded(config.kToken, config.underlying, config.symbolHash,\\n            config.baseUnit, config.priceUnit, config.priceMantissa, config.priceSource);\\n    }\\n\\n    // @dev must be called after you add chainlink sourced config\\n    function setAggregators(string[] calldata symbols, address[] calldata sources) public onlyOwner {\\n        require(symbols.length == sources.length, \\\"mismatched input\\\");\\n        for (uint i = 0; i \\u003c symbols.length; i++) {\\n            KTokenConfig memory config = getKConfigBySymbolHash(keccak256(abi.encodePacked(symbols[i])));\\n            AggregatorV3Interface agg = AggregatorV3Interface(sources[i]);\\n            aggregators[config.symbolHash] = agg;\\n            uint priceDecimals = uint(agg.decimals());\\n            require(10**priceDecimals == config.priceUnit, \\\"mismatched priceUnit\\\");\\n            emit AggregatorUpdated(symbols[i], sources[i]);\\n        }\\n    }\\n\\n    // @notice set the symbol used to query ExOracle\\n    function setExOracleConfig(address kToken_, string memory symbol_, address source_) public onlyOwner {\\n        KTokenConfig memory config = getKConfigByKToken(kToken_);\\n        require(config.priceSource == PriceSource.EXORACLE, \\\"mismatched priceSource\\\");\\n\\n        ExOracleConfig memory exOracleConfig = ExOracleConfig({\\n            kToken: kToken_,\\n            symbol: symbol_,\\n            source: source_\\n        });\\n        exOracleConfigs[kToken_] = exOracleConfig;\\n\\n        (uint price, ) = exOracleView.get(symbol_, source_);\\n        require(price != 0, \\\"unable to get price\\\");\\n\\n        emit ExOracleConfigUpdated(kToken_, symbol_, source_);\\n    }\\n\\n    function _deleteConfigByKToken(address kToken) internal returns(KTokenConfig memory){\\n        uint index = getKConfigIndexByKToken(kToken);\\n        KTokenConfig memory configToDelete = kTokenConfigs[index];\\n        kTokenConfigs[index] = kTokenConfigs[kTokenConfigs.length - 1];\\n\\n        // If chainlink price source, remove its aggregator\\n        if (configToDelete.priceSource == PriceSource.CHAINLINK) {\\n            delete aggregators[configToDelete.symbolHash];\\n        }\\n        kTokenConfigs.pop();\\n\\n        emit TokenConfigRemoved(configToDelete.kToken, configToDelete.underlying,\\n            configToDelete.symbolHash, configToDelete.baseUnit, configToDelete.priceUnit,\\n            configToDelete.priceMantissa, configToDelete.priceSource);\\n\\n        return configToDelete;\\n    }\\n\\n    function getKConfigIndexByKToken(address kToken) public view returns (uint){\\n        for (uint i = 0; i \\u003c kTokenConfigs.length; i++) {\\n            KTokenConfig memory config = kTokenConfigs[i];\\n            if (config.kToken == kToken) {\\n                return i;\\n            }\\n        }\\n        return uint(-1);\\n    }\\n\\n    function getKConfigIndexByUnderlying(address underlying) public view returns (uint){\\n        for (uint i = 0; i \\u003c kTokenConfigs.length; i++) {\\n            KTokenConfig memory config = kTokenConfigs[i];\\n            if (config.underlying == underlying) {\\n                return i;\\n            }\\n        }\\n        return uint(-1);\\n    }\\n\\n    function getKConfigIndexBySymbolHash(bytes32 symbolHash) public view returns (uint){\\n        for (uint i = 0; i \\u003c kTokenConfigs.length; i++) {\\n            KTokenConfig memory config = kTokenConfigs[i];\\n            if (config.symbolHash == symbolHash) {\\n                return i;\\n            }\\n        }\\n        return uint(-1);\\n    }\\n\\n    // if not found should revert\\n    function getKConfigByKToken(address kToken) public view returns (KTokenConfig memory) {\\n        uint index = getKConfigIndexByKToken(kToken);\\n        if (index != uint(-1)) {\\n            return kTokenConfigs[index];\\n        }\\n        revert(\\\"token config not found\\\");\\n    }\\n\\n    function getKConfigBySymbolHash(bytes32 symbolHash) public view returns (KTokenConfig memory) {\\n        uint index = getKConfigIndexBySymbolHash(symbolHash);\\n        if (index != uint(-1)) {\\n            return kTokenConfigs[index];\\n        }\\n        revert(\\\"token config not found\\\");\\n    }\\n\\n    function getKConfigBySymbol(string memory symbol) external view returns (KTokenConfig memory) {\\n        return getKConfigBySymbolHash(keccak256(abi.encodePacked(symbol)));\\n    }\\n\\n    function getKConfigByUnderlying(address underlying) public view returns (KTokenConfig memory) {\\n        uint index = getKConfigIndexByUnderlying(underlying);\\n        if (index != uint(-1)) {\\n            return kTokenConfigs[index];\\n        }\\n        revert(\\\"token config not found\\\");\\n    }\\n\\n    function changeExOracleAddress(address newExOracle_) external {\\n        address oldExOracle = address(exOracleView);\\n        require(oldExOracle != newExOracle_, \\\"same ExOracle\\\");\\n        exOracleView = IExOracle(newExOracle_);\\n        emit ExOracleAddressUpdated(oldExOracle, newExOracle_);\\n    }\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kaptain_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"kToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceMantissa\",\"type\":\"uint256\"},{\"internalType\":\"enum PriceConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"}],\"internalType\":\"struct PriceConfig.KTokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"AggregatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"KaptainUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"kToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceUnit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PriceMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum PriceConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"}],\"name\":\"TokenConfigAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"kToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceUnit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PriceMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum PriceConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"}],\"name\":\"TokenConfigRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceUnit_\",\"type\":\"uint256\"},{\"internalType\":\"enum PriceConfig.PriceSource\",\"name\":\"priceSource_\",\"type\":\"uint8\"}],\"name\":\"addConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"aggregators\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kaptain_\",\"type\":\"address\"}],\"name\":\"changeKaptain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kToken\",\"type\":\"address\"}],\"name\":\"getKConfigByKToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"kToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceMantissa\",\"type\":\"uint256\"},{\"internalType\":\"enum PriceConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"}],\"internalType\":\"struct PriceConfig.KTokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getKConfigBySymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"kToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceMantissa\",\"type\":\"uint256\"},{\"internalType\":\"enum PriceConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"}],\"internalType\":\"struct PriceConfig.KTokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"getKConfigBySymbolHash\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"kToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceMantissa\",\"type\":\"uint256\"},{\"internalType\":\"enum PriceConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"}],\"internalType\":\"struct PriceConfig.KTokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getKConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"kToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceMantissa\",\"type\":\"uint256\"},{\"internalType\":\"enum PriceConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"}],\"internalType\":\"struct PriceConfig.KTokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kToken\",\"type\":\"address\"}],\"name\":\"getKConfigIndexByKToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"getKConfigIndexBySymbolHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getKConfigIndexByUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getUnderlyingPriceBySymbol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kTokenConfigs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"kToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceMantissa\",\"type\":\"uint256\"},{\"internalType\":\"enum PriceConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"kTokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kaptain\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mcdHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mcdLastUpdatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mcdPrice\",\"type\":\"uint256\"}],\"name\":\"postMcdPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"symbolArray\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"priceArray\",\"type\":\"uint256[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"kToken\",\"type\":\"address\"}],\"name\":\"removeConfigByKToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"}],\"name\":\"setAggregators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"kTokens\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"setExOracleCallSymbols\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"KineOracleV2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000db098785a082e21b505670b2ebfe5bf2f6a701dd00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000008000000000000000000000000af2617aa6fd98581bb8cb099a16af74510b6555f000000000000000000000000af2617aa6fd98581bb8cb099a16af74510b6555fb4e390f51b7b166e80aa2bd4ca6a7efd11d137edbc0329a84b39d48eaf9f084c0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000d3c21bcecceda1000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000037fb11963f05b3a0eef6c49a9e9ed9cac7650bed000000000000000000000000cbfef8fdd706cde6f208460f2bf39aa9c785f05deb48ef9150b594762681c5b8a89019528e4a6af2dc81fe0a4cc42c194c8cbda10000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000d3c21bcecceda10000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000473ccdec83b7125a4f52aa6f8699026fcb878ee8000000000000000000000000a8d7643324df0f38764f514eb1a99d8f379cc692e7dd417ce0d2c9663d253c6661ea04b9315c5630aac8b872e96a5225abd507d10000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000d3c21bcecceda10000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a58e822de1517aae7114714fb354ee853cd35780000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2aaaebeba3810b1e6b70781f14b2d72c1cb89c0b2b320c43bb67ff79f562f5ff40000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000052b7d2dcc80cd2e4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063b63b5f0ae8057cb8f704f65fd91c19badd5a73000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec78b1a1d9c2b109e527c9134b25b1a1833b16b6594f92daa9f6d9b7a6024bce9d000000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000005af3107a400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001568a7f0bdf67d37dc963c345dbc4a598859eba3000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48d6aca1be9729c13d677335161321649cccae6a591554772516700f986f942eaa00000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000377f100a7280dd992c6f2503330f893620f586ab0000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599e98e2830be1a7e4156d656a7505e65d08c67660dc618072422e9c78053c261e90000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000005f5e100000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bf5250ac655920b301ca34f4e46f0669b90a5bf50000000000000000000000004691937a7508860f876c9c0a2a617e7d9e945d4bb6473a2eb3816dbf0e6165c14a55d60f9c91e29eeec6be271ae03d063d6fec4d0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000d3c21bcecceda10000000000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://17d6b2282c8415e1caba917c3ef6de7cab15b42c70c021c6d53a5649230ba1dd"}]}