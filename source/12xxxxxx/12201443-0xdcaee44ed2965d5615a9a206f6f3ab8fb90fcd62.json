{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.0;\n\n\n\n// Part: IAxieInfinity\n\ninterface IAxieInfinity {\n\n    /// @dev Bids on an open auction, completing the auction and transferring\n    ///  ownership of the NFT if enough Ether is supplied.\n    /// @param _nftAddress - address of a deployed contract implementing\n    ///  the Nonfungible Interface.\n    /// @param _tokenId - ID of token to bid on.\n    function bid(\n        address _nftAddress,\n        uint256 _tokenId\n    ) external payable;\n\n    /// @dev Returns the current price of an auction.\n    /// @param _nftAddress - Address of the NFT.\n    /// @param _tokenId - ID of the token price we are checking.\n    function getCurrentPrice(\n        address _nftAddress,\n        uint256 _tokenId\n    )\n    external\n    view\n    returns (uint256);\n}\n\n// Part: IERC721\n\ninterface IERC721 {\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    ///  THEY MAY BE PERMANENTLY LOST\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) external;\n    \n    function setApprovalForAll(address operator, bool approved) external;\n\n    function approve(address to, uint256 tokenId) external;\n    \n    function isApprovedForAll(address owner, address operator) external returns (bool);\n}\n\n// File: AxieInfinityMarket.sol\n\nlibrary AxieInfinityMarket {\n\n    address public constant AXIE_INFINITY = 0xF4985070Ce32b6B1994329DF787D1aCc9a2dd9e2;\n\n    function buyAssetsForEth(bytes memory data, address recipient) public {\n        address[] memory nftAddresses;\n        uint256[] memory tokenIds;\n        (nftAddresses, tokenIds) = abi.decode(\n            data,\n            (address[], uint256[])\n        );\n        for (uint256 i = 0; i < nftAddresses.length; i++) {\n            _buyAssetForEth(nftAddresses[i], tokenIds[i], recipient);\n        }\n    }\n\n    function estimateAssetPriceInEth(address nftAddress, uint256 tokenId) public view returns(uint256) {\n        return IAxieInfinity(AXIE_INFINITY).getCurrentPrice(nftAddress, tokenId);\n    }\n\n    function estimateBatchAssetPriceInEth(bytes memory data) public view returns(uint256 totalCost) {\n        address[] memory nftAddresses;\n        uint256[] memory tokenIds;\n        (nftAddresses, tokenIds) = abi.decode(\n            data,\n            (address[], uint256[])\n        );\n        for (uint256 i = 0; i < nftAddresses.length; i++) {\n            totalCost += IAxieInfinity(AXIE_INFINITY).getCurrentPrice(nftAddresses[i], tokenIds[i]);\n        }\n    }\n\n    function _buyAssetForEth(address _nftAddress, uint256 _tokenId, address _recipient) public {\n        bytes memory _data = abi.encodeWithSelector(IAxieInfinity(AXIE_INFINITY).bid.selector, _nftAddress, _tokenId);\n\n        (bool success, ) = AXIE_INFINITY.call{value:estimateAssetPriceInEth(_nftAddress,_tokenId)}(_data);\n        require(success, \"_buyAssetForEth: axie buy failed.\");\n\n        IERC721(_nftAddress).transferFrom(address(this), _recipient, _tokenId);\n    }   \n\n}\n","ABI":"[{\"inputs\":[],\"name\":\"AXIE_INFINITY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"estimateAssetPriceInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"estimateBatchAssetPriceInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AxieInfinityMarket","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}