{"status":"1","message":"OK","result":[{"SourceCode":"{\"IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller\\u0027s tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``\\u0027s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``\\u0027s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.0 \\u003c0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.6.2 \\u003c0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"},\"PortionExchangeV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.4;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\u0027./IERC1155.sol\\u0027;\\n\\ncontract PortionExchangeV2 {\\n\\tstruct ERC1155Offer {\\n\\t\\tuint tokenId;\\n\\t\\tuint quantity;\\n\\t\\tuint price;\\n\\t\\taddress seller;\\n\\t}\\n\\n\\tevent TokenPriceListed (uint indexed _tokenId, address indexed _owner, uint _price);\\n\\tevent TokenPriceDeleted (uint indexed _tokenId);\\n\\tevent TokenSold (uint indexed _tokenId, uint _price, bool _soldForPRT);\\n\\tevent TokenOwned (uint indexed _tokenId, address indexed _previousOwner, address indexed _newOwner);\\n\\tevent Token1155OfferListed (uint indexed _tokenId, uint indexed _offerId, address indexed _owner, uint _quantity, uint _price);\\n\\tevent Token1155OfferDeleted (uint indexed _tokenId, uint indexed _offerId);\\n\\tevent Token1155Sold(uint indexed _tokenId, uint indexed _offerId, uint _quantity, uint _price, bool _soldForPRT);\\n\\tevent Token1155Owned (uint indexed _tokenId, address indexed _previousOwner, address indexed _newOwner, uint _quantity);\\n\\n\\taddress public signer;\\n\\taddress owner;\\n\\n\\tbytes32 public name = \\\"PortionExchangeV2\\\";\\n\\n\\tuint public offerIdCounter;\\n\\n\\tIERC20 public portionTokenContract;\\n\\tIERC721 public artTokenContract;\\n\\tIERC1155 public artToken1155Contract;\\n\\n\\tmapping(address =\\u003e uint) public nonces;\\n\\tmapping(uint =\\u003e uint) public ERC721Prices;\\n\\tmapping(uint =\\u003e ERC1155Offer) public ERC1155Offers;\\n\\tmapping(address =\\u003e mapping(uint =\\u003e uint)) public tokensListed;\\n\\n\\tconstructor (\\n\\t\\taddress _signer,\\n\\t\\taddress _artTokenAddress,\\n\\t\\taddress _artToken1155Address,\\n\\t\\taddress _portionTokenAddress\\n\\t)\\n\\t{\\n\\t\\trequire (_signer != address(0));\\n\\t\\trequire (_artTokenAddress != address(0));\\n\\t\\trequire (_artToken1155Address != address(0));\\n\\t\\trequire (_portionTokenAddress != address(0));\\n\\n\\t\\towner = msg.sender;\\n\\t\\tsigner = _signer;\\n\\t\\tartTokenContract = IERC721(_artTokenAddress);\\n\\t\\tartToken1155Contract = IERC1155(_artToken1155Address);\\n\\t\\tportionTokenContract = IERC20(_portionTokenAddress);\\n\\t}\\n\\n\\tfunction listToken(\\n\\t\\tuint _tokenId,\\n\\t\\tuint _price\\n\\t)\\n\\texternal\\n\\t{\\n\\t\\trequire(_price \\u003e 0);\\n\\t\\trequire(artTokenContract.ownerOf(_tokenId) == msg.sender);\\n\\t\\tERC721Prices[_tokenId] = _price;\\n\\t\\temit TokenPriceListed(_tokenId, msg.sender, _price);\\n\\t}\\n\\n\\tfunction listToken1155(\\n\\t\\tuint _tokenId,\\n\\t\\tuint _quantity,\\n\\t\\tuint _price\\n\\t)\\n\\texternal\\n\\t{\\n\\t\\trequire(_price \\u003e 0);\\n\\t\\trequire(artToken1155Contract.balanceOf(msg.sender, _tokenId) \\u003e= tokensListed[msg.sender][_tokenId] + _quantity);\\n\\n\\t\\tuint offerId = offerIdCounter++;\\n\\t\\tERC1155Offers[offerId] = ERC1155Offer({\\n\\t\\t\\ttokenId: _tokenId,\\n\\t\\t\\tquantity: _quantity,\\n\\t\\t\\tprice: _price,\\n\\t\\t\\tseller: msg.sender\\n\\t\\t});\\n\\n\\t\\ttokensListed[msg.sender][_tokenId] += _quantity;\\n\\t\\temit Token1155OfferListed(_tokenId, offerId, msg.sender, _quantity, _price);\\n\\t}\\n\\n\\tfunction removeListToken(\\n\\t\\tuint _tokenId\\n\\t)\\n\\texternal\\n\\t{\\n\\t\\trequire(artTokenContract.ownerOf(_tokenId) == msg.sender);\\n\\t\\tdeleteTokenPrice(_tokenId);\\n\\t}\\n\\n\\tfunction removeListToken1155(\\n\\t\\tuint _offerId\\n\\t)\\n\\texternal\\n\\t{\\n\\t\\trequire(ERC1155Offers[_offerId].seller == msg.sender);\\n\\t\\tdeleteToken1155Offer(_offerId);\\n\\t}\\n\\n\\tfunction deleteTokenPrice(\\n\\t\\tuint _tokenId\\n\\t)\\n\\tinternal\\n\\t{\\n\\t\\tdelete ERC721Prices[_tokenId];\\n\\t\\temit TokenPriceDeleted(_tokenId);\\n\\t}\\n\\n\\tfunction deleteToken1155Offer(\\n\\t\\tuint _offerId\\n\\t)\\n\\tinternal\\n\\t{\\n\\t\\tERC1155Offer memory offer = ERC1155Offers[_offerId];\\n\\t\\ttokensListed[offer.seller][offer.tokenId] -= offer.quantity;\\n\\n\\t\\tdelete ERC1155Offers[_offerId];\\n\\t\\temit Token1155OfferDeleted(offer.tokenId, _offerId);\\n\\t}\\n\\n\\tfunction buyToken(\\n\\t\\tuint _tokenId\\n\\t)\\n\\texternal\\n\\tpayable\\n\\t{\\n\\t\\trequire(ERC721Prices[_tokenId] \\u003e 0, \\\"token is not for sale\\\");\\n\\t\\trequire(ERC721Prices[_tokenId] \\u003c= msg.value);\\n\\n\\t\\taddress tokenOwner = artTokenContract.ownerOf(_tokenId);\\n\\n\\t\\taddress payable payableTokenOwner = payable(tokenOwner);\\n\\t\\t(bool sent, ) = payableTokenOwner.call{value: msg.value}(\\\"\\\");\\n\\t\\trequire(sent);\\n\\n\\t\\tartTokenContract.safeTransferFrom(tokenOwner, msg.sender, _tokenId);\\n\\n\\t\\temit TokenSold(_tokenId, msg.value, false);\\n\\t\\temit TokenOwned(_tokenId, tokenOwner, msg.sender);\\n\\n\\t\\tdeleteTokenPrice(_tokenId);\\n\\t}\\n\\n\\tfunction buyToken1155(\\n\\t\\tuint _offerId,\\n\\t\\tuint _quantity\\n\\t)\\n\\texternal\\n\\tpayable\\n\\t{\\n\\t\\tERC1155Offer memory offer = ERC1155Offers[_offerId];\\n\\n\\t\\trequire(offer.price \\u003e 0, \\\"offer does not exist\\\");\\n\\t\\trequire(offer.quantity \\u003e= _quantity);\\n\\t\\trequire(offer.price * _quantity \\u003c= msg.value);\\n\\n\\t\\taddress payable payableSeller = payable(offer.seller);\\n\\t\\t(bool sent, ) = payableSeller.call{value: msg.value}(\\\"\\\");\\n\\t\\trequire(sent);\\n\\n\\t\\tartToken1155Contract.safeTransferFrom(offer.seller, msg.sender, offer.tokenId, _quantity, \\\"\\\");\\n\\n\\t\\temit Token1155Sold(offer.tokenId, _offerId, _quantity, offer.price, false);\\n\\t\\temit Token1155Owned(offer.tokenId, offer.seller, msg.sender, _quantity);\\n\\n\\t\\tif (offer.quantity == _quantity) {\\n\\t\\t\\tdeleteToken1155Offer(_offerId);\\n\\t\\t} else {\\n\\t\\t\\tERC1155Offers[_offerId].quantity -= _quantity;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction buyTokenForPRT(\\n\\t\\tuint _tokenId,\\n\\t\\tuint _amountOfPRT,\\n\\t\\tuint _nonce,\\n\\t\\tbytes calldata _signature\\n\\t)\\n\\texternal\\n\\t{\\n\\t\\trequire(ERC721Prices[_tokenId] \\u003e 0, \\\"token is not for sale\\\");\\n\\n\\t\\trequire(nonces[msg.sender] \\u003c _nonce, \\\"invalid nonce\\\");\\n\\t\\tnonces[msg.sender] = _nonce;\\n\\n\\t\\tbytes32 hash = keccak256(abi.encodePacked(_tokenId, _amountOfPRT, _nonce));\\n\\t\\tbytes32 ethSignedMessageHash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n\\t\\trequire(recoverSignerAddress(ethSignedMessageHash, _signature) == signer, \\\"invalid secret signer\\\");\\n\\n\\t\\taddress tokenOwner = artTokenContract.ownerOf(_tokenId);\\n\\n\\t\\tbool sent = portionTokenContract.transferFrom(msg.sender, tokenOwner, _amountOfPRT);\\n\\t\\trequire(sent);\\n\\n\\t\\tartTokenContract.safeTransferFrom(tokenOwner, msg.sender, _tokenId);\\n\\n\\t\\temit TokenSold(_tokenId, _amountOfPRT, true);\\n\\t\\temit TokenOwned(_tokenId, tokenOwner, msg.sender);\\n\\n\\t\\tdeleteTokenPrice(_tokenId);\\n\\t}\\n\\n\\tfunction buyToken1155ForPRT(\\n\\t\\tuint _offerId,\\n\\t\\tuint _quantity,\\n\\t\\tuint _amountOfPRT,\\n\\t\\tuint _nonce,\\n\\t\\tbytes calldata _signature\\n\\t)\\n\\texternal\\n\\t{\\n\\t\\tERC1155Offer memory offer = ERC1155Offers[_offerId];\\n\\n\\t\\trequire(offer.price \\u003e 0, \\\"offer does not exist\\\");\\n\\t\\trequire(offer.quantity \\u003e= _quantity);\\n\\n\\t\\trequire(nonces[msg.sender] \\u003c _nonce, \\\"invalid nonce\\\");\\n\\t\\tnonces[msg.sender] = _nonce;\\n\\n\\t\\tbytes32 hash = keccak256(abi.encodePacked(_offerId, _quantity, _amountOfPRT, _nonce));\\n\\t\\tbytes32 ethSignedMessageHash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n\\t\\trequire(recoverSignerAddress(ethSignedMessageHash, _signature) == signer, \\\"invalid secret signer\\\");\\n\\n\\t\\tportionTokenContract.transferFrom(msg.sender, offer.seller, _amountOfPRT * _quantity);\\n\\t\\tartToken1155Contract.safeTransferFrom(offer.seller, msg.sender, offer.tokenId, _quantity, \\\"\\\");\\n\\n\\t\\temit Token1155Sold(offer.tokenId, _offerId, _quantity, _amountOfPRT, true);\\n\\t\\temit Token1155Owned(offer.tokenId, offer.seller, msg.sender, _quantity);\\n\\n\\t\\tif (offer.quantity == _quantity) {\\n\\t\\t\\tdeleteToken1155Offer(_offerId);\\n\\t\\t} else {\\n\\t\\t\\tERC1155Offers[_offerId].quantity -= _quantity;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setSigner(\\n\\t\\taddress _newSigner\\n\\t)\\n\\texternal\\n\\t{\\n\\t\\trequire(msg.sender == owner);\\n\\t\\tsigner = _newSigner;\\n\\t}\\n\\n\\tfunction recoverSignerAddress(\\n\\t\\tbytes32 _hash,\\n\\t\\tbytes memory _signature\\n\\t)\\n\\tinternal\\n\\tpure\\n\\treturns (address)\\n\\t{\\n\\t\\trequire(_signature.length == 65, \\\"invalid signature length\\\");\\n\\n\\t\\tbytes32 r;\\n\\t\\tbytes32 s;\\n\\t\\tuint8 v;\\n\\n\\t\\tassembly {\\n\\t\\t\\tr := mload(add(_signature, 32))\\n\\t\\t\\ts := mload(add(_signature, 64))\\n\\t\\t\\tv := and(mload(add(_signature, 65)), 255)\\n\\t\\t}\\n\\n\\t\\tif (v \\u003c 27) {\\n\\t\\t\\tv += 27;\\n\\t\\t}\\n\\n\\t\\tif (v != 27 \\u0026\\u0026 v != 28) {\\n\\t\\t\\treturn address(0);\\n\\t\\t}\\n\\n\\t\\treturn ecrecover(_hash, v, r, s);\\n\\t}\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_artTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_artToken1155Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_portionTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"Token1155OfferDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"Token1155OfferListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"Token1155Owned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_soldForPRT\",\"type\":\"bool\"}],\"name\":\"Token1155Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"TokenOwned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenPriceDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"TokenPriceListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_soldForPRT\",\"type\":\"bool\"}],\"name\":\"TokenSold\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ERC1155Offers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ERC721Prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artToken1155Contract\",\"outputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artTokenContract\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"buyToken1155\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfPRT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"buyToken1155ForPRT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOfPRT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"buyTokenForPRT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"listToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"listToken1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"offerIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"portionTokenContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"removeListToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_offerId\",\"type\":\"uint256\"}],\"name\":\"removeListToken1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newSigner\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensListed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PortionExchangeV2","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000025410b89c8061e0208f1af11c9273a61e4206153000000000000000000000000da98f59e1edecb2545d7b07b794e704ed6cf1f7a0000000000000000000000000adf0bc748296bcba9f394d783a5f5e9406d68740000000000000000000000006d0f5149c502faf215c89ab306ec3e50b15e2892","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://29e0ab59be327e431fc7ed5485b5e324608febfaf28ebe2b7785fb5603744542"}]}