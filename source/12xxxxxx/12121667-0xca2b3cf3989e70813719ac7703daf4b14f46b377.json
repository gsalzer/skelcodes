{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/AlchTimeLock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/ITimelock.sol\\\";\\r\\n\\r\\n\\r\\ncontract AlchemyTimelock is ITimelock {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  event NewAdmin(address indexed newAdmin);\\r\\n  event NewPendingAdmin(address indexed newPendingAdmin);\\r\\n  event NewDelay(uint256 indexed newDelay);\\r\\n  event CancelTransaction(\\r\\n    bytes32 indexed txHash,\\r\\n    address indexed target,\\r\\n    uint256 value,\\r\\n    string signature,\\r\\n    bytes data,\\r\\n    uint256 eta\\r\\n  );\\r\\n  event ExecuteTransaction(\\r\\n    bytes32 indexed txHash,\\r\\n    address indexed target,\\r\\n    uint256 value,\\r\\n    string signature,\\r\\n    bytes data,\\r\\n    uint256 eta\\r\\n  );\\r\\n  event QueueTransaction(\\r\\n    bytes32 indexed txHash,\\r\\n    address indexed target,\\r\\n    uint256 value,\\r\\n    string signature,\\r\\n    bytes data,\\r\\n    uint256 eta\\r\\n  );\\r\\n\\r\\n  uint256 public constant override GRACE_PERIOD = 14 days;\\r\\n  uint256 public constant override MINIMUM_DELAY = 2 days;\\r\\n  uint256 public constant override MAXIMUM_DELAY = 30 days;\\r\\n\\r\\n  address public override admin;\\r\\n  address public override pendingAdmin;\\r\\n  uint256 public override delay;\\r\\n\\r\\n  mapping(bytes32 => bool) public override queuedTransactions;\\r\\n\\r\\n  constructor(address admin_, uint256 delay_) public {\\r\\n    require(\\r\\n      delay_ >= MINIMUM_DELAY,\\r\\n      \\\"Timelock::constructor: Delay must exceed minimum delay.\\\"\\r\\n    );\\r\\n    require(\\r\\n      delay_ <= MAXIMUM_DELAY,\\r\\n      \\\"Timelock::setDelay: Delay must not exceed maximum delay.\\\"\\r\\n    );\\r\\n\\r\\n    admin = admin_;\\r\\n    delay = delay_;\\r\\n  }\\r\\n\\r\\n  fallback() external payable {}\\r\\n\\r\\n  receive() external payable {}\\r\\n\\r\\n  function setDelay(uint256 delay_) public override {\\r\\n    require(\\r\\n      msg.sender == address(this),\\r\\n      \\\"Timelock::setDelay: Call must come from Timelock.\\\"\\r\\n    );\\r\\n    require(\\r\\n      delay_ >= MINIMUM_DELAY,\\r\\n      \\\"Timelock::setDelay: Delay must exceed minimum delay.\\\"\\r\\n    );\\r\\n    require(\\r\\n      delay_ <= MAXIMUM_DELAY,\\r\\n      \\\"Timelock::setDelay: Delay must not exceed maximum delay.\\\"\\r\\n    );\\r\\n    delay = delay_;\\r\\n\\r\\n    emit NewDelay(delay);\\r\\n  }\\r\\n\\r\\n  function acceptAdmin() public override {\\r\\n    require(\\r\\n      msg.sender == pendingAdmin,\\r\\n      \\\"Timelock::acceptAdmin: Call must come from pendingAdmin.\\\"\\r\\n    );\\r\\n    admin = msg.sender;\\r\\n    pendingAdmin = address(0);\\r\\n\\r\\n    emit NewAdmin(admin);\\r\\n  }\\r\\n\\r\\n  function setPendingAdmin(address pendingAdmin_) public override {\\r\\n    require(\\r\\n      msg.sender == address(this),\\r\\n      \\\"Timelock::setPendingAdmin: Call must come from Timelock.\\\"\\r\\n    );\\r\\n    pendingAdmin = pendingAdmin_;\\r\\n\\r\\n    emit NewPendingAdmin(pendingAdmin);\\r\\n  }\\r\\n\\r\\n  function queueTransaction(\\r\\n    address target,\\r\\n    uint256 value,\\r\\n    string memory signature,\\r\\n    bytes memory data,\\r\\n    uint256 eta\\r\\n  ) public override returns (bytes32) {\\r\\n    require(\\r\\n      msg.sender == admin,\\r\\n      \\\"Timelock::queueTransaction: Call must come from admin.\\\"\\r\\n    );\\r\\n    require(\\r\\n      eta >= getBlockTimestamp().add(delay),\\r\\n      \\\"Timelock::queueTransaction: Estimated execution block must satisfy delay.\\\"\\r\\n    );\\r\\n\\r\\n    bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\r\\n    queuedTransactions[txHash] = true;\\r\\n\\r\\n    emit QueueTransaction(txHash, target, value, signature, data, eta);\\r\\n    return txHash;\\r\\n  }\\r\\n\\r\\n  function cancelTransaction(\\r\\n    address target,\\r\\n    uint256 value,\\r\\n    string memory signature,\\r\\n    bytes memory data,\\r\\n    uint256 eta\\r\\n  ) public override {\\r\\n    require(\\r\\n      msg.sender == admin,\\r\\n      \\\"Timelock::cancelTransaction: Call must come from admin.\\\"\\r\\n    );\\r\\n\\r\\n    bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\r\\n    queuedTransactions[txHash] = false;\\r\\n\\r\\n    emit CancelTransaction(txHash, target, value, signature, data, eta);\\r\\n  }\\r\\n\\r\\n  function executeTransaction(\\r\\n    address target,\\r\\n    uint256 value,\\r\\n    string memory signature,\\r\\n    bytes memory data,\\r\\n    uint256 eta\\r\\n  ) public payable override returns (bytes memory) {\\r\\n    require(\\r\\n      msg.sender == admin,\\r\\n      \\\"Timelock::executeTransaction: Call must come from admin.\\\"\\r\\n    );\\r\\n\\r\\n    bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\\r\\n    require(\\r\\n      queuedTransactions[txHash],\\r\\n      \\\"Timelock::executeTransaction: Transaction hasn't been queued.\\\"\\r\\n    );\\r\\n    require(\\r\\n      getBlockTimestamp() >= eta,\\r\\n      \\\"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\\\"\\r\\n    );\\r\\n    require(\\r\\n      getBlockTimestamp() <= eta.add(GRACE_PERIOD),\\r\\n      \\\"Timelock::executeTransaction: Transaction is stale.\\\"\\r\\n    );\\r\\n\\r\\n    queuedTransactions[txHash] = false;\\r\\n\\r\\n    bytes memory callData;\\r\\n\\r\\n    if (bytes(signature).length == 0) {\\r\\n      callData = data;\\r\\n    } else {\\r\\n      callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\\r\\n    }\\r\\n\\r\\n    (bool success, bytes memory returnData) = target.call{value: value}(callData);\\r\\n    require(\\r\\n      success,\\r\\n      \\\"Timelock::executeTransaction: Transaction execution reverted.\\\"\\r\\n    );\\r\\n\\r\\n    emit ExecuteTransaction(txHash, target, value, signature, data, eta);\\r\\n\\r\\n    return returnData;\\r\\n  }\\r\\n\\r\\n  function getBlockTimestamp() internal view returns (uint256) {\\r\\n    // solium-disable-next-line security/no-block-members\\r\\n    return block.timestamp;\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITimelock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n\\r\\ninterface ITimelock {\\r\\n    event NewAdmin(address indexed newAdmin);\\r\\n    event NewPendingAdmin(address indexed newPendingAdmin);\\r\\n    event NewDelay(uint256 indexed newDelay);\\r\\n    event CancelTransaction(\\r\\n        bytes32 indexed txHash,\\r\\n        address indexed target,\\r\\n        uint256 value,\\r\\n        string signature,\\r\\n        bytes data,\\r\\n        uint256 eta\\r\\n    );\\r\\n    event ExecuteTransaction(\\r\\n        bytes32 indexed txHash,\\r\\n        address indexed target,\\r\\n        uint256 value,\\r\\n        string signature,\\r\\n        bytes data,\\r\\n        uint256 eta\\r\\n    );\\r\\n    event QueueTransaction(\\r\\n        bytes32 indexed txHash,\\r\\n        address indexed target,\\r\\n        uint256 value,\\r\\n        string signature,\\r\\n        bytes data,\\r\\n        uint256 eta\\r\\n    );\\r\\n\\r\\n    function GRACE_PERIOD() external pure returns (uint256);\\r\\n\\r\\n    function MINIMUM_DELAY() external pure returns (uint256);\\r\\n\\r\\n    function MAXIMUM_DELAY() external pure returns (uint256);\\r\\n\\r\\n    function admin() external view returns (address);\\r\\n\\r\\n    function pendingAdmin() external view returns (address);\\r\\n\\r\\n    function delay() external view returns (uint256);\\r\\n\\r\\n    function queuedTransactions(bytes32) external view returns (bool);\\r\\n\\r\\n    function setDelay(uint256 delay_) external;\\r\\n\\r\\n    function acceptAdmin() external;\\r\\n\\r\\n    function setPendingAdmin(address pendingAdmin_) external;\\r\\n\\r\\n    function queueTransaction(\\r\\n        address target,\\r\\n        uint256 value,\\r\\n        string calldata signature,\\r\\n        bytes calldata data,\\r\\n        uint256 eta\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function cancelTransaction(\\r\\n        address target,\\r\\n        uint256 value,\\r\\n        string calldata signature,\\r\\n        bytes calldata data,\\r\\n        uint256 eta\\r\\n    ) external;\\r\\n\\r\\n    function executeTransaction(\\r\\n        address target,\\r\\n        uint256 value,\\r\\n        string calldata signature,\\r\\n        bytes calldata data,\\r\\n        uint256 eta\\r\\n    ) external payable returns (bytes memory);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delay_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"CancelTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ExecuteTransaction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newDelay\",\"type\":\"uint256\"}],\"name\":\"NewDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"QueueTransaction\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"GRACE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"cancelTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"queueTransaction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"queuedTransactions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delay_\",\"type\":\"uint256\"}],\"name\":\"setDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingAdmin_\",\"type\":\"address\"}],\"name\":\"setPendingAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"AlchemyTimelock","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c311fd8b92b5777c6e345aab02117919892a9cc2000000000000000000000000000000000000000000000000000000000002a300","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}