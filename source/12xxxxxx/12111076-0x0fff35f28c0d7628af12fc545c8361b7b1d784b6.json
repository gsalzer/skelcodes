{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol\\n// and modified it.\\n\\npragma solidity \\u003e=0.8;\\n\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\n    }\\n\\n    function functionCallWithValue(address target, bytes memory data, uint256 weiValue) internal returns (bytes memory) {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        require(data.length == 0 || isContract(target));\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // TODO: I think this does not lead to correct error messages.\\n            revert(string(returndata));\\n        }\\n    }\\n}\"},\"MultiSig.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: MIT\\n */\\n\\npragma solidity \\u003e=0.8;\\n\\nimport \\\"./Address.sol\\\";\\nimport \\\"./RLPEncode.sol\\\";\\nimport \\\"./Nonce.sol\\\";\\n\\ncontract MultiSig is Nonce {\\n\\n  mapping (address =\\u003e uint8) public signers; // The addresses that can co-sign transactions and the number of signatures needed\\n\\n  uint16 public signerCount;\\n  bytes public contractId; // most likely unique id of this contract\\n\\n  event SignerChange(\\n    address indexed signer,\\n    uint8 cosignaturesNeeded\\n  );\\n\\n  event Transacted(\\n    address indexed toAddress,  // The address the transaction was sent to\\n    bytes4 selector, // selected operation\\n    address[] signers // Addresses of the signers used to initiate the transaction\\n  );\\n\\n  constructor (address owner) {\\n    // We use the gas price to get a unique id into our transactions.\\n    // Note that 32 bits do not guarantee that no one can generate a contract with the\\n    // same id, but it practically rules out that someone accidentally creates two\\n    // two multisig contracts with the same id, and that\\u0027s all we need to prevent\\n    // replay-attacks.\\n    contractId = toBytes(uint32(uint160(address(this))));\\n    _setSigner(owner, 1); // set initial owner\\n  }\\n\\n  /**\\n   * It should be possible to store ether on this address.\\n   */\\n  receive() external payable {\\n  }\\n\\n  /**\\n   * Checks if the provided signatures suffice to sign the transaction and if the nonce is correct.\\n   */\\n  function checkSignatures(uint128 nonce, address to, uint value, bytes calldata data,\\n    uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) public view returns (address[] memory) {\\n    bytes32 transactionHash = calculateTransactionHash(nonce, contractId, to, value, data);\\n    return verifySignatures(transactionHash, v, r, s);\\n  }\\n\\n  /**\\n   * Checks if the execution of a transaction would succeed if it was properly signed.\\n   */\\n  function checkExecution(address to, uint value, bytes calldata data) public {\\n    Address.functionCallWithValue(to, data, value);\\n    require(false, \\\"Test passed. Reverting.\\\");\\n  }\\n\\n  function execute(uint128 nonce, address to, uint value, bytes calldata data, uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) public returns (bytes memory) {\\n    bytes32 transactionHash = calculateTransactionHash(nonce, contractId, to, value, data);\\n    address[] memory found = verifySignatures(transactionHash, v, r, s);\\n    bytes memory returndata = Address.functionCallWithValue(to, data, value);\\n    flagUsed(nonce);\\n    emit Transacted(to, extractSelector(data), found);\\n    return returndata;\\n  }\\n\\n  function extractSelector(bytes calldata data) private pure returns (bytes4){\\n    if (data.length \\u003c 4){\\n      return bytes4(0);\\n    } else {\\n      return bytes4(data[0]) | (bytes4(data[1]) \\u003e\\u003e 8) | (bytes4(data[2]) \\u003e\\u003e 16) | (bytes4(data[3]) \\u003e\\u003e 24);\\n    }\\n  }\\n\\n  function toBytes(uint number) internal pure returns (bytes memory){\\n    uint len = 0;\\n    uint temp = 1;\\n    while (number \\u003e= temp){\\n      temp = temp \\u003c\\u003c 8;\\n      len++;\\n    }\\n    temp = number;\\n    bytes memory data = new bytes(len);\\n    for (uint i = len; i\\u003e0; i--) {\\n      data[i-1] = bytes1(uint8(temp));\\n      temp = temp \\u003e\\u003e 8;\\n    }\\n    return data;\\n  }\\n\\n  // Note: does not work with contract creation\\n  function calculateTransactionHash(uint128 sequence, bytes memory id, address to, uint value, bytes calldata data)\\n    internal view returns (bytes32){\\n    bytes[] memory all = new bytes[](9);\\n    all[0] = toBytes(sequence); // sequence number instead of nonce\\n    all[1] = id; // contract id instead of gas price\\n    all[2] = toBytes(21000); // gas limit\\n    all[3] = abi.encodePacked(to);\\n    all[4] = toBytes(value);\\n    all[5] = data;\\n    all[6] = toBytes(block.chainid);\\n    all[7] = toBytes(0);\\n    for (uint i = 0; i\\u003c8; i++){\\n      all[i] = RLPEncode.encodeBytes(all[i]);\\n    }\\n    all[8] = all[7];\\n    return keccak256(RLPEncode.encodeList(all));\\n  }\\n\\n  function verifySignatures(bytes32 transactionHash, uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s)\\n    public view returns (address[] memory) {\\n    address[] memory found = new address[](r.length);\\n    for (uint i = 0; i \\u003c r.length; i++) {\\n      address signer = ecrecover(transactionHash, v[i], r[i], s[i]);\\n      uint8 cosignaturesNeeded = signers[signer];\\n      require(cosignaturesNeeded \\u003e 0 \\u0026\\u0026 cosignaturesNeeded \\u003c= r.length, \\\"cosigner error\\\");\\n      found[i] = signer;\\n    }\\n    requireNoDuplicates(found);\\n    return found;\\n  }\\n\\n  function requireNoDuplicates(address[] memory found) private pure {\\n    for (uint i = 0; i \\u003c found.length; i++) {\\n      for (uint j = i+1; j \\u003c found.length; j++) {\\n        require(found[i] != found[j], \\\"duplicate signature\\\");\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Call this method through execute\\n   */\\n  function setSigner(address signer, uint8 cosignaturesNeeded) public authorized {\\n    _setSigner(signer, cosignaturesNeeded);\\n    require(signerCount \\u003e 0);\\n  }\\n\\n  function migrate(address destination) public {\\n    _migrate(msg.sender, destination);\\n  }\\n\\n  function migrate(address source, address destination) public authorized {\\n    _migrate(source, destination);\\n  }\\n\\n  function _migrate(address source, address destination) private {\\n    require(signers[destination] == 0); // do not overwrite existing signer!\\n    _setSigner(destination, signers[source]);\\n    _setSigner(source, 0);\\n  }\\n\\n  function _setSigner(address signer, uint8 cosignaturesNeeded) private {\\n    require(!Address.isContract(signer), \\\"signer cannot be a contract\\\");\\n    uint8 prevValue = signers[signer];\\n    signers[signer] = cosignaturesNeeded;\\n    if (prevValue \\u003e 0 \\u0026\\u0026 cosignaturesNeeded == 0){\\n      signerCount--;\\n    } else if (prevValue == 0 \\u0026\\u0026 cosignaturesNeeded \\u003e 0){\\n      signerCount++;\\n    }\\n    emit SignerChange(signer, cosignaturesNeeded);\\n  }\\n\\n  modifier authorized() {\\n    require(address(this) == msg.sender || signers[msg.sender] == 1, \\\"not authorized\\\");\\n    _;\\n  }\\n\\n}\"},\"Nonce.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: LicenseRef-Aktionariat\\n*\\n* MIT License with Automated License Fee Payments\\n*\\n* Copyright (c) 2020 Aktionariat AG (aktionariat.com)\\n*\\n* Permission is hereby granted to any person obtaining a copy of this software\\n* and associated documentation files (the \\\"Software\\\"), to deal in the Software\\n* without restriction, including without limitation the rights to use, copy,\\n* modify, merge, publish, distribute, sublicense, and/or sell copies of the\\n* Software, and to permit persons to whom the Software is furnished to do so,\\n* subject to the following conditions:\\n*\\n* - The above copyright notice and this permission notice shall be included in\\n*   all copies or substantial portions of the Software.\\n* - All automated license fee payments integrated into this and related Software\\n*   are preserved.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n* SOFTWARE.\\n*/\\n\\npragma solidity \\u003e=0.8;\\n\\ncontract Nonce {\\n\\n    uint256 public constant MAX_INCREASE = 100;\\n    \\n    uint256 private compound;\\n    \\n    constructor(){\\n        setBoth(128, 0);\\n    }\\n    \\n    /**\\n     * The next recommended nonce, which is the highest nonce ever used plus one.\\n     */\\n    function nextNonce() public view returns (uint256){\\n        return getMax() + 1;\\n    }\\n\\n    /**\\n     * Returns whether the provided nonce can be used.\\n     * For the 100 nonces in the interval [nextNonce(), nextNonce + 99], this is always true.\\n     * For the nonces in the interval [nextNonce() - 129, nextNonce() - 1], this is true for the nonces that have not been used yet.\\n     */ \\n    function isFree(uint128 nonce) public view returns (bool){\\n        uint128 max = getMax();\\n        return isValidHighNonce(max, nonce) || isValidLowNonce(max, getRegister(), nonce);\\n    }\\n\\n    /**\\n     * Flags the given nonce as used.\\n     * Reverts if the provided nonce is not free.\\n     */\\n    function flagUsed(uint128 nonce) internal {\\n        uint256 comp = compound;\\n        uint128 max = uint128(comp);\\n        uint128 reg = uint128(comp \\u003e\\u003e 128);\\n        if (isValidHighNonce(max, nonce)){\\n            setBoth(nonce, ((reg \\u003c\\u003c 1) | 0x1) \\u003c\\u003c (nonce - max - 1));\\n        } else if (isValidLowNonce(max, reg, nonce)){\\n            setBoth(max, uint128(reg | 0x1 \\u003c\\u003c (max - nonce - 1)));\\n        } else {\\n            require(false);\\n        }\\n    }\\n    \\n    function getMax() private view returns (uint128) {\\n        return uint128(compound);\\n    }\\n    \\n    function getRegister() private view returns (uint128) {\\n        return uint128(compound \\u003e\\u003e 128);\\n    }\\n    \\n    function setBoth(uint128 max, uint128 reg) private {\\n        compound = uint256(reg) \\u003c\\u003c 128 | max;\\n    }\\n\\n    function isValidHighNonce(uint128 max, uint128 nonce) private pure returns (bool){\\n        return nonce \\u003e max \\u0026\\u0026 nonce \\u003c= max + MAX_INCREASE;\\n    }\\n\\n    function isValidLowNonce(uint128 max, uint128 reg, uint256 nonce) private pure returns (bool){\\n        uint256 diff = max - nonce;\\n        return diff \\u003e 0 \\u0026\\u0026 diff \\u003c= 128 \\u0026\\u0026 ((0x1 \\u003c\\u003c (diff - 1)) \\u0026 reg == 0);\\n    }\\n    \\n}\"},\"RLPEncode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity \\u003e=0.4.0;\\n/**\\n * @title RLPEncode\\n * @dev A simple RLP encoding library.\\n * @author Bakaoh\\n */\\nlibrary RLPEncode {\\n    /*\\n     * Internal functions\\n     */\\n\\n    /**\\n     * @dev RLP encodes a byte string.\\n     * @param self The byte string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function encodeBytes(bytes memory self) internal pure returns (bytes memory) {\\n        bytes memory encoded;\\n        if (self.length == 1 \\u0026\\u0026 uint8(self[0]) \\u003c= 128) {\\n            encoded = self;\\n        } else {\\n            encoded = concat(encodeLength(self.length, 128), self);\\n        }\\n        return encoded;\\n    }\\n\\n    /**\\n     * @dev RLP encodes a list of RLP encoded byte byte strings.\\n     * @param self The list of RLP encoded byte strings.\\n     * @return The RLP encoded list of items in bytes.\\n     */\\n    function encodeList(bytes[] memory self) internal pure returns (bytes memory) {\\n        bytes memory list = flatten(self);\\n        return concat(encodeLength(list.length, 192), list);\\n    }\\n\\n    /**\\n     * @dev RLP encodes a string.\\n     * @param self The string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function encodeString(string memory self) internal pure returns (bytes memory) {\\n        return encodeBytes(bytes(self));\\n    }\\n\\n    /** \\n     * @dev RLP encodes an address.\\n     * @param self The address to encode.\\n     * @return The RLP encoded address in bytes.\\n     */\\n    function encodeAddress(address self) internal pure returns (bytes memory) {\\n        bytes memory inputBytes;\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(add(m, 20), xor(0x140000000000000000000000000000000000000000, self))\\n            mstore(0x40, add(m, 52))\\n            inputBytes := m\\n        }\\n        return encodeBytes(inputBytes);\\n    }\\n\\n    /** \\n     * @dev RLP encodes a uint.\\n     * @param self The uint to encode.\\n     * @return The RLP encoded uint in bytes.\\n     */\\n    function encodeUint(uint self) internal pure returns (bytes memory) {\\n        return encodeBytes(toBinary(self));\\n    }\\n\\n    /** \\n     * @dev RLP encodes an int.\\n     * @param self The int to encode.\\n     * @return The RLP encoded int in bytes.\\n     */\\n    function encodeInt(int self) internal pure returns (bytes memory) {\\n        return encodeUint(uint(self));\\n    }\\n\\n    /** \\n     * @dev RLP encodes a bool.\\n     * @param self The bool to encode.\\n     * @return The RLP encoded bool in bytes.\\n     */\\n    function encodeBool(bool self) internal pure returns (bytes memory) {\\n        bytes memory encoded = new bytes(1);\\n        encoded[0] = (self ? bytes1(0x01) : bytes1(0x80));\\n        return encoded;\\n    }\\n\\n\\n    /*\\n     * Private functions\\n     */\\n\\n    /**\\n     * @dev Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\\n     * @param len The length of the string or the payload.\\n     * @param offset 128 if item is string, 192 if item is list.\\n     * @return RLP encoded bytes.\\n     */\\n    function encodeLength(uint len, uint offset) private pure returns (bytes memory) {\\n        bytes memory encoded;\\n        if (len \\u003c 56) {\\n            encoded = new bytes(1);\\n            encoded[0] = bytes32(len + offset)[31];\\n        } else {\\n            uint lenLen;\\n            uint i = 1;\\n            while (len / i != 0) {\\n                lenLen++;\\n                i *= 256;\\n            }\\n\\n            encoded = new bytes(lenLen + 1);\\n            encoded[0] = bytes32(lenLen + offset + 55)[31];\\n            for(i = 1; i \\u003c= lenLen; i++) {\\n                encoded[i] = bytes32((len / (256**(lenLen-i))) % 256)[31];\\n            }\\n        }\\n        return encoded;\\n    }\\n\\n    /**\\n     * @dev Encode integer in big endian binary form with no leading zeroes.\\n     * @notice TODO: This should be optimized with assembly to save gas costs.\\n     * @param _x The integer to encode.\\n     * @return RLP encoded bytes.\\n     */\\n    function toBinary(uint _x) private pure returns (bytes memory) {\\n        bytes memory b = new bytes(32);\\n        assembly { \\n            mstore(add(b, 32), _x) \\n        }\\n        uint i;\\n        for (i = 0; i \\u003c 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n        bytes memory res = new bytes(32 - i);\\n        for (uint j = 0; j \\u003c res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n        return res;\\n    }\\n\\n    /**\\n     * @dev Copies a piece of memory to another location.\\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol.\\n     * @param _dest Destination location.\\n     * @param _src Source location.\\n     * @param _len Length of memory to copy.\\n     */\\n    function memcpy(uint _dest, uint _src, uint _len) private pure {\\n        uint dest = _dest;\\n        uint src = _src;\\n        uint len = _len;\\n\\n        for(; len \\u003e= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /**\\n     * @dev Flattens a list of byte strings into one byte string.\\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\\n     * @param _list List of byte strings to flatten.\\n     * @return The flattened byte string.\\n     */\\n    function flatten(bytes[] memory _list) private pure returns (bytes memory) {\\n        if (_list.length == 0) {\\n            return new bytes(0);\\n        }\\n\\n        uint len;\\n        uint i;\\n        for (i = 0; i \\u003c _list.length; i++) {\\n            len += _list[i].length;\\n        }\\n\\n        bytes memory flattened = new bytes(len);\\n        uint flattenedPtr;\\n        assembly { flattenedPtr := add(flattened, 0x20) }\\n\\n        for(i = 0; i \\u003c _list.length; i++) {\\n            bytes memory item = _list[i];\\n            \\n            uint listPtr;\\n            assembly { listPtr := add(item, 0x20)}\\n\\n            memcpy(flattenedPtr, listPtr, item.length);\\n            flattenedPtr += _list[i].length;\\n        }\\n\\n        return flattened;\\n    }\\n\\n    /**\\n     * @dev Concatenates two bytes.\\n     * @notice From: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol.\\n     * @param _preBytes First byte string.\\n     * @param _postBytes Second byte string.\\n     * @return Both byte string combined.\\n     */\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) private pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            tempBytes := mload(0x40)\\n\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            let mc := add(tempBytes, 0x20)\\n            let end := add(mc, length)\\n\\n            for {\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            mc := end\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31)\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"cosignaturesNeeded\",\"type\":\"uint8\"}],\"name\":\"SignerChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"}],\"name\":\"Transacted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_INCREASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"checkExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"nonce\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"checkSignatures\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractId\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"nonce\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"nonce\",\"type\":\"uint128\"}],\"name\":\"isFree\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"cosignaturesNeeded\",\"type\":\"uint8\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signers\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"verifySignatures\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MultiSig","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000080db5860e435ef74082203c5aff874448fe89d67","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ccfd16b380cd7d41b3bdadac6980c1ae306f2c1ea1bf6553eee528c4e49be847"}]}