{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./utils/Context.sol\\\";\\nimport \\\"./security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IStaking.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\n/**\\n * An implementation of the {IStaking} interface.\\n *\\n * It allows users to stake their tokens for `x` days predetermined\\n * during the time of stake and earn interest over time.\\n *\\n * The ROI can be changed but it's not influential on previous stakers\\n * to maintain the integrity of the application.\\n */\\n\\ncontract EdgeStakingV1 is ReentrancyGuard, Context, IStaking {\\n    mapping(address => uint256) public totalStakingContracts;\\n    mapping(address => mapping(uint256 => Stake)) public stakeContract;\\n\\n    uint256 public currentROI;\\n\\n    address public edgexContract;\\n    address public admin;\\n\\n    /**\\n     * @dev represents the staking instance.\\n     *\\n     * Every user's stake is mapped to a staking instance\\n     * represented by `stakeId`\\n     */\\n    struct Stake {\\n        uint256 amount;\\n        uint256 maturesAt;\\n        uint256 createdAt;\\n        uint256 roiAtStake;\\n        bool isClaimed;\\n        uint256 interest;\\n    }\\n\\n    /**\\n     * @dev Emitted when the `caller` the old admin\\n     * transfers the governance of the staking contract to a\\n     * `newOwner`\\n     */\\n    event RevokeOwnership(address indexed newOwner);\\n\\n    /**\\n     * @dev Emitted when the `admin` who is the governor\\n     * of the contract changes the ROI for staking\\n     *\\n     * Effective for new stakers.\\n     */\\n    event ChangeROI(uint256 newROI);\\n\\n    /**\\n     * @dev sanity checks the caller.\\n     * If the caller is not admin, the transaction is reverted.\\n     *\\n     * keeps the security of the platform and prevents bad actors\\n     * from executing sensitive functions / state changes.\\n     */\\n    modifier onlyAdmin() {\\n        require(_msgSender() == admin, \\\"Error: caller not admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev checks whether the address is a valid one.\\n     *\\n     * If it's a zero address returns an error.\\n     */\\n    modifier isZero(address _address) {\\n        require(_address != address(0), \\\"Error: zero address\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev sets the starting parameters of the SC.\\n     *\\n     * {_edgexContract} - address of the EDGEX token contract.\\n     * {_newROI} - the ROI in % represented in 13 decimals.\\n     * {_admin} - the controller of the contract.\\n     */\\n    constructor(\\n        address _edgexContract,\\n        uint256 _newROI,\\n        address _admin\\n    ) {\\n        edgexContract = _edgexContract;\\n        currentROI = _newROI;\\n        admin = _admin;\\n    }\\n\\n    /**\\n     * @dev stakes the `amount` of tokens for `tenure`\\n     *\\n     * Requirements:\\n     * `amount` should be approved by the `caller`\\n     * to the staking contract.\\n     *\\n     * `tenure` shoulde be mentioned in days.\\n     */\\n    function stake(uint256 _amount, uint256 _tenureInDays)\\n        public\\n        virtual\\n        override\\n        nonReentrant\\n        returns (bool)\\n    {\\n        uint256 currentAllowance =\\n            IERC20(edgexContract).allowance(_msgSender(), address(this));\\n        uint256 currentBalance = IERC20(edgexContract).balanceOf(_msgSender());\\n\\n        require(\\n            currentAllowance >= _amount,\\n            \\\"Error: stake amount exceeds allowance\\\"\\n        );\\n        require(\\n            currentBalance >= _amount,\\n            \\\"Error: stake amount exceeds balance\\\"\\n        );\\n\\n        updateStakeData(_amount, _tenureInDays, _msgSender());\\n        totalStakingContracts[_msgSender()] += 1;\\n\\n        return IERC20(edgexContract).transferFrom(\\n            _msgSender(),\\n            address(this),\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev creates the staking data in a new {Stake} strucutre.\\n     *\\n     * It records the current snapshots of ROI and other staking information available.\\n     */\\n    function updateStakeData(\\n        uint256 _amount,\\n        uint256 _tenureInDays,\\n        address _user\\n    ) internal {\\n        uint256 totalContracts = totalStakingContracts[_user] + 1;\\n\\n        Stake storage sc = stakeContract[_user][totalContracts];\\n        sc.amount = _amount;\\n        sc.createdAt = block.timestamp;\\n        uint256 maturityInSeconds = _tenureInDays * 1 days;\\n        sc.maturesAt = block.timestamp + maturityInSeconds;\\n        sc.roiAtStake = currentROI;\\n    }\\n\\n    /**\\n     * @dev claims the {amount} of tokens plus {earned} tokens\\n     * after the end of {tenure}\\n     *\\n     * Requirements:\\n     * `_stakingContractId` of the staking instance.\\n     *\\n     * returns a boolean to show the current state of the transaction.\\n     */\\n    function claim(uint256 _stakingContractId)\\n        public\\n        virtual\\n        override\\n        nonReentrant\\n        returns (bool)\\n    {\\n        Stake storage sc = stakeContract[_msgSender()][_stakingContractId];\\n\\n        require(sc.maturesAt <= block.timestamp, \\\"Not Yet Matured\\\");\\n        require(!sc.isClaimed, \\\"Already Claimed\\\");\\n\\n        uint256 total;\\n        uint256 interest;\\n        (total, interest) = calculateClaimAmount(\\n            _msgSender(),\\n            _stakingContractId\\n        );\\n        sc.isClaimed = true;\\n        sc.interest = interest;\\n\\n        return IERC20(edgexContract).transfer(_msgSender(), total);\\n    }\\n\\n    /**\\n     * @dev returns the amount of unclaimed tokens.\\n     *\\n     * Requirements:\\n     * `user` is the ethereum address of the wallet.\\n     * `contractId` is the id of the staking instance.\\n     *\\n     * returns the `total amount` and the `interest earned` respectively.\\n     */\\n    function calculateClaimAmount(address _user, uint256 _contractId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256, uint256)\\n    {\\n        Stake storage sc = stakeContract[_user][_contractId];\\n\\n        uint256 a = sc.amount * sc.roiAtStake;\\n        uint256 time = sc.maturesAt - sc.createdAt;\\n        uint256 b = a * time;\\n        uint256 interest = b / (31536 * 10**18);\\n        uint256 total = sc.amount + interest;\\n\\n        return (total, interest);\\n    }\\n\\n    /**\\n     * @dev transfers the governance from one account(`caller`) to another account(`_newOwner`).\\n     *\\n     * Note: Governors can only set / change the ROI.\\n     */\\n\\n    function revokeOwnership(address _newOwner)\\n        public\\n        virtual\\n        override\\n        onlyAdmin\\n        isZero(_newOwner)\\n        returns (bool)\\n    {\\n        admin = payable(_newOwner);\\n        emit RevokeOwnership(_newOwner);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev will change the ROI on the staking yield.\\n     *\\n     * `_newROI` is the ROI calculated per second considering 365 days in a year.\\n     * It should be in 13 precision.\\n     *\\n     * The change will be effective for new users who staked tokens after the change.\\n     */\\n    function changeROI(uint256 _newROI)\\n        public\\n        virtual\\n        override\\n        onlyAdmin\\n        returns (bool)\\n    {\\n        currentROI = _newROI;\\n        emit ChangeROI(_newROI);\\n        return true;\\n    }\\n\\n    /**\\n     * #@dev will change the token contract (EDGEX)\\n     *\\n     * If we're migrating / moving the token contract.\\n     * This prevents the need for migration of the staking contract.\\n     */\\n    function updateEdgexContract(address _contractAddress)\\n        public\\n        virtual\\n        override\\n        onlyAdmin\\n        isZero(_contractAddress)\\n        returns (bool)\\n    {\\n        edgexContract = _contractAddress;\\n        return true;\\n    }\\n\\n    /**\\n     * @dev enables the governor to withdraw funds from the SC.\\n     *\\n     * this prevents tokens from getting locked in the SC.\\n     */\\n    function withdrawLiquidity(uint256 _edgexAmount, address _to)\\n        public\\n        virtual\\n        onlyAdmin\\n        isZero(_to)\\n        returns (bool)\\n    {\\n        return IERC20(edgexContract).transfer(_to, _edgexAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: NO-LICENSE\\n\\npragma solidity ^0.8.4;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this;\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: NO-LICENSE\\n\\npragma solidity ^0.8.4;\\n\\nabstract contract ReentrancyGuard {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    modifier nonReentrant() {\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n        _status = _ENTERED;\\n        _;\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.4;\\n\\ninterface IStaking {\\n    /**\\n     * @dev stakes the `amount` of tokens for `tenure`\\n     *\\n     * Requirements:\\n     * `amount` should be approved by the `caller`\\n     * to the staking contract.\\n     *\\n     * `tenure` shoulde be mentioned in days.\\n     */\\n    function stake(uint256 amount, uint256 tenure) external returns (bool);\\n\\n    /**\\n     * @dev claims the {amount} of tokens plus {earned} tokens\\n     * after the end of {tenure}\\n     *\\n     * Requirements:\\n     * `stakeId` of the staking instance.\\n     *\\n     * returns a boolean to show the current state of the transaction.\\n     */\\n    function claim(uint256 stakeId) external returns (bool);\\n\\n    /**\\n     * @dev returns the amount of unclaimed tokens.\\n     *\\n     * Requirements:\\n     * `user` is the ethereum address of the wallet.\\n     * `stakeId` is the id of the staking instance.\\n     *\\n     * returns the `total amount` and the `interest earned` respectively.\\n     */\\n    function calculateClaimAmount(address user, uint256 stakeId)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    /**\\n     * @dev transfers the governance from one account(`caller`) to another account(`_newOwner`).\\n     */\\n    function revokeOwnership(address _newOwner) external returns (bool);\\n\\n    /**\\n     * @dev will change the ROI on the staking yield.\\n     *\\n     * `_newROI` is the ROI calculated per second considering 365 days in a year.\\n     * It should be in 13 precision.\\n     *\\n     * The change will be effective for new users who staked tokens after the change.\\n     */\\n    function changeROI(uint256 _newROI) external returns (bool);\\n\\n    /**\\n     * #@dev will change the token contract (EDGEX)\\n     *\\n     * If we're migrating / moving the token contract.\\n     * This prevents the need for migration of the staking contract.\\n     */\\n    function updateEdgexContract(address _contractAddress)\\n        external\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: NO-LICENSE\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_edgexContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newROI\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newROI\",\"type\":\"uint256\"}],\"name\":\"ChangeROI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"RevokeOwnership\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_contractId\",\"type\":\"uint256\"}],\"name\":\"calculateClaimAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newROI\",\"type\":\"uint256\"}],\"name\":\"changeROI\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingContractId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"edgexContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"revokeOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tenureInDays\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturesAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roiAtStake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalStakingContracts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddress\",\"type\":\"address\"}],\"name\":\"updateEdgexContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_edgexAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EdgeStakingV1","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d61f493d18ed4c5aad0b2763d9a9b421c8da006a00000000000000000000000000000000000000000000000000006d23ad5f80000000000000000000000000008934b795af3edd9d2cea8dcf919fb69f40483ccc","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}