{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface AggregatorValidatorInterface {\r\n\tfunction validate(uint256 previousRoundId,\r\n\t\t\tint256 previousAnswer,\r\n\t\t\tuint256 currentRoundId,\r\n\t\t\tint256 currentAnswer) external returns (bool);\r\n}\r\n\r\ncontract Ownable {\r\n\r\n    address private ownerAddr;\r\n    address private pendingOwnerAddr;\r\n\r\n    event OwnershipTransferRequested(address indexed from, address indexed to);\r\n    event OwnershipTransferred(address indexed from, address indexed to);\r\n\r\n    constructor() public {\r\n        ownerAddr = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @notice Allows an owner to begin transferring ownership to a new address,\r\n    * pending.\r\n    */\r\n    function transferOwnership(address to) external onlyOwner() {\r\n        require(to != msg.sender, \"Cannot transfer to self\");\r\n\r\n        pendingOwnerAddr = to;\r\n\r\n        emit OwnershipTransferRequested(ownerAddr, to);\r\n    }\r\n\r\n    /**\r\n    * @notice Allows an ownership transfer to be completed by the recipient.\r\n    */\r\n    function acceptOwnership() external {\r\n        require(msg.sender == pendingOwnerAddr, \"Must be proposed owner\");\r\n\r\n        address oldOwner = ownerAddr;\r\n        ownerAddr = msg.sender;\r\n        pendingOwnerAddr = address(0);\r\n\r\n        emit OwnershipTransferred(oldOwner, msg.sender);\r\n    }\r\n\r\n    /**\r\n    * @notice Get the current owner\r\n    */\r\n    function owner() public view returns (address) {\r\n        return ownerAddr;\r\n    }\r\n\r\n    /**\r\n    * @notice Reverts if called by anyone other than the contract owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == ownerAddr, \"Only callable by owner\");\r\n        _;\r\n    }\r\n\r\n}\r\n\r\ninterface CErc20 {\r\n    function underlying() external view returns (address);\r\n}\r\n\r\ncontract UniswapConfig {\r\n    /// @dev Describe how to interpret the fixedPrice in the TokenConfig.\r\n    enum PriceSource {\r\n        FIXED_ETH, /// implies the fixedPrice is a constant multiple of the ETH price (which varies)\r\n        FIXED_USD, /// implies the fixedPrice is a constant multiple of the USD price (which is 1)\r\n        REPORTER   /// implies the price is set by the reporter\r\n    }\r\n\r\n    /// @dev Describe how the USD price should be determined for an asset.\r\n    ///  There should be 1 TokenConfig object for each supported asset, passed in the constructor.\r\n    struct TokenConfig {\r\n        address cToken;\r\n        address underlying;\r\n        bytes32 symbolHash;\r\n        uint256 baseUnit;\r\n        PriceSource priceSource;\r\n        uint256 fixedPrice;\r\n        address uniswapMarket;\r\n        address reporter;\r\n        uint256 reporterMultiplier;\r\n        bool isUniswapReversed;\r\n    }\r\n\r\n    /// @notice The max number of tokens this contract is hardcoded to support\r\n    /// @dev Do not change this variable without updating all the fields throughout the contract.\r\n    uint public constant maxTokens = 25;\r\n\r\n    /// @notice The number of tokens this contract actually supports\r\n    uint public immutable numTokens;\r\n\r\n    address internal immutable cToken00;\r\n    address internal immutable cToken01;\r\n    address internal immutable cToken02;\r\n    address internal immutable cToken03;\r\n    address internal immutable cToken04;\r\n    address internal immutable cToken05;\r\n    address internal immutable cToken06;\r\n    address internal immutable cToken07;\r\n    address internal immutable cToken08;\r\n    address internal immutable cToken09;\r\n    address internal immutable cToken10;\r\n    address internal immutable cToken11;\r\n    address internal immutable cToken12;\r\n    address internal immutable cToken13;\r\n    address internal immutable cToken14;\r\n    address internal immutable cToken15;\r\n    address internal immutable cToken16;\r\n    address internal immutable cToken17;\r\n    address internal immutable cToken18;\r\n    address internal immutable cToken19;\r\n    address internal immutable cToken20;\r\n    address internal immutable cToken21;\r\n    address internal immutable cToken22;\r\n    address internal immutable cToken23;\r\n    address internal immutable cToken24;\r\n\r\n    address internal immutable underlying00;\r\n    address internal immutable underlying01;\r\n    address internal immutable underlying02;\r\n    address internal immutable underlying03;\r\n    address internal immutable underlying04;\r\n    address internal immutable underlying05;\r\n    address internal immutable underlying06;\r\n    address internal immutable underlying07;\r\n    address internal immutable underlying08;\r\n    address internal immutable underlying09;\r\n    address internal immutable underlying10;\r\n    address internal immutable underlying11;\r\n    address internal immutable underlying12;\r\n    address internal immutable underlying13;\r\n    address internal immutable underlying14;\r\n    address internal immutable underlying15;\r\n    address internal immutable underlying16;\r\n    address internal immutable underlying17;\r\n    address internal immutable underlying18;\r\n    address internal immutable underlying19;\r\n    address internal immutable underlying20;\r\n    address internal immutable underlying21;\r\n    address internal immutable underlying22;\r\n    address internal immutable underlying23;\r\n    address internal immutable underlying24;\r\n\r\n    bytes32 internal immutable symbolHash00;\r\n    bytes32 internal immutable symbolHash01;\r\n    bytes32 internal immutable symbolHash02;\r\n    bytes32 internal immutable symbolHash03;\r\n    bytes32 internal immutable symbolHash04;\r\n    bytes32 internal immutable symbolHash05;\r\n    bytes32 internal immutable symbolHash06;\r\n    bytes32 internal immutable symbolHash07;\r\n    bytes32 internal immutable symbolHash08;\r\n    bytes32 internal immutable symbolHash09;\r\n    bytes32 internal immutable symbolHash10;\r\n    bytes32 internal immutable symbolHash11;\r\n    bytes32 internal immutable symbolHash12;\r\n    bytes32 internal immutable symbolHash13;\r\n    bytes32 internal immutable symbolHash14;\r\n    bytes32 internal immutable symbolHash15;\r\n    bytes32 internal immutable symbolHash16;\r\n    bytes32 internal immutable symbolHash17;\r\n    bytes32 internal immutable symbolHash18;\r\n    bytes32 internal immutable symbolHash19;\r\n    bytes32 internal immutable symbolHash20;\r\n    bytes32 internal immutable symbolHash21;\r\n    bytes32 internal immutable symbolHash22;\r\n    bytes32 internal immutable symbolHash23;\r\n    bytes32 internal immutable symbolHash24;\r\n\r\n    uint256 internal immutable baseUnit00;\r\n    uint256 internal immutable baseUnit01;\r\n    uint256 internal immutable baseUnit02;\r\n    uint256 internal immutable baseUnit03;\r\n    uint256 internal immutable baseUnit04;\r\n    uint256 internal immutable baseUnit05;\r\n    uint256 internal immutable baseUnit06;\r\n    uint256 internal immutable baseUnit07;\r\n    uint256 internal immutable baseUnit08;\r\n    uint256 internal immutable baseUnit09;\r\n    uint256 internal immutable baseUnit10;\r\n    uint256 internal immutable baseUnit11;\r\n    uint256 internal immutable baseUnit12;\r\n    uint256 internal immutable baseUnit13;\r\n    uint256 internal immutable baseUnit14;\r\n    uint256 internal immutable baseUnit15;\r\n    uint256 internal immutable baseUnit16;\r\n    uint256 internal immutable baseUnit17;\r\n    uint256 internal immutable baseUnit18;\r\n    uint256 internal immutable baseUnit19;\r\n    uint256 internal immutable baseUnit20;\r\n    uint256 internal immutable baseUnit21;\r\n    uint256 internal immutable baseUnit22;\r\n    uint256 internal immutable baseUnit23;\r\n    uint256 internal immutable baseUnit24;\r\n\r\n    PriceSource internal immutable priceSource00;\r\n    PriceSource internal immutable priceSource01;\r\n    PriceSource internal immutable priceSource02;\r\n    PriceSource internal immutable priceSource03;\r\n    PriceSource internal immutable priceSource04;\r\n    PriceSource internal immutable priceSource05;\r\n    PriceSource internal immutable priceSource06;\r\n    PriceSource internal immutable priceSource07;\r\n    PriceSource internal immutable priceSource08;\r\n    PriceSource internal immutable priceSource09;\r\n    PriceSource internal immutable priceSource10;\r\n    PriceSource internal immutable priceSource11;\r\n    PriceSource internal immutable priceSource12;\r\n    PriceSource internal immutable priceSource13;\r\n    PriceSource internal immutable priceSource14;\r\n    PriceSource internal immutable priceSource15;\r\n    PriceSource internal immutable priceSource16;\r\n    PriceSource internal immutable priceSource17;\r\n    PriceSource internal immutable priceSource18;\r\n    PriceSource internal immutable priceSource19;\r\n    PriceSource internal immutable priceSource20;\r\n    PriceSource internal immutable priceSource21;\r\n    PriceSource internal immutable priceSource22;\r\n    PriceSource internal immutable priceSource23;\r\n    PriceSource internal immutable priceSource24;\r\n\r\n    uint256 internal immutable fixedPrice00;\r\n    uint256 internal immutable fixedPrice01;\r\n    uint256 internal immutable fixedPrice02;\r\n    uint256 internal immutable fixedPrice03;\r\n    uint256 internal immutable fixedPrice04;\r\n    uint256 internal immutable fixedPrice05;\r\n    uint256 internal immutable fixedPrice06;\r\n    uint256 internal immutable fixedPrice07;\r\n    uint256 internal immutable fixedPrice08;\r\n    uint256 internal immutable fixedPrice09;\r\n    uint256 internal immutable fixedPrice10;\r\n    uint256 internal immutable fixedPrice11;\r\n    uint256 internal immutable fixedPrice12;\r\n    uint256 internal immutable fixedPrice13;\r\n    uint256 internal immutable fixedPrice14;\r\n    uint256 internal immutable fixedPrice15;\r\n    uint256 internal immutable fixedPrice16;\r\n    uint256 internal immutable fixedPrice17;\r\n    uint256 internal immutable fixedPrice18;\r\n    uint256 internal immutable fixedPrice19;\r\n    uint256 internal immutable fixedPrice20;\r\n    uint256 internal immutable fixedPrice21;\r\n    uint256 internal immutable fixedPrice22;\r\n    uint256 internal immutable fixedPrice23;\r\n    uint256 internal immutable fixedPrice24;\r\n\r\n    address internal immutable uniswapMarket00;\r\n    address internal immutable uniswapMarket01;\r\n    address internal immutable uniswapMarket02;\r\n    address internal immutable uniswapMarket03;\r\n    address internal immutable uniswapMarket04;\r\n    address internal immutable uniswapMarket05;\r\n    address internal immutable uniswapMarket06;\r\n    address internal immutable uniswapMarket07;\r\n    address internal immutable uniswapMarket08;\r\n    address internal immutable uniswapMarket09;\r\n    address internal immutable uniswapMarket10;\r\n    address internal immutable uniswapMarket11;\r\n    address internal immutable uniswapMarket12;\r\n    address internal immutable uniswapMarket13;\r\n    address internal immutable uniswapMarket14;\r\n    address internal immutable uniswapMarket15;\r\n    address internal immutable uniswapMarket16;\r\n    address internal immutable uniswapMarket17;\r\n    address internal immutable uniswapMarket18;\r\n    address internal immutable uniswapMarket19;\r\n    address internal immutable uniswapMarket20;\r\n    address internal immutable uniswapMarket21;\r\n    address internal immutable uniswapMarket22;\r\n    address internal immutable uniswapMarket23;\r\n    address internal immutable uniswapMarket24;\r\n\r\n    address internal immutable reporter00;\r\n    address internal immutable reporter01;\r\n    address internal immutable reporter02;\r\n    address internal immutable reporter03;\r\n    address internal immutable reporter04;\r\n    address internal immutable reporter05;\r\n    address internal immutable reporter06;\r\n    address internal immutable reporter07;\r\n    address internal immutable reporter08;\r\n    address internal immutable reporter09;\r\n    address internal immutable reporter10;\r\n    address internal immutable reporter11;\r\n    address internal immutable reporter12;\r\n    address internal immutable reporter13;\r\n    address internal immutable reporter14;\r\n    address internal immutable reporter15;\r\n    address internal immutable reporter16;\r\n    address internal immutable reporter17;\r\n    address internal immutable reporter18;\r\n    address internal immutable reporter19;\r\n    address internal immutable reporter20;\r\n    address internal immutable reporter21;\r\n    address internal immutable reporter22;\r\n    address internal immutable reporter23;\r\n    address internal immutable reporter24;\r\n\r\n    uint256 internal immutable reporterMultiplier00;\r\n    uint256 internal immutable reporterMultiplier01;\r\n    uint256 internal immutable reporterMultiplier02;\r\n    uint256 internal immutable reporterMultiplier03;\r\n    uint256 internal immutable reporterMultiplier04;\r\n    uint256 internal immutable reporterMultiplier05;\r\n    uint256 internal immutable reporterMultiplier06;\r\n    uint256 internal immutable reporterMultiplier07;\r\n    uint256 internal immutable reporterMultiplier08;\r\n    uint256 internal immutable reporterMultiplier09;\r\n    uint256 internal immutable reporterMultiplier10;\r\n    uint256 internal immutable reporterMultiplier11;\r\n    uint256 internal immutable reporterMultiplier12;\r\n    uint256 internal immutable reporterMultiplier13;\r\n    uint256 internal immutable reporterMultiplier14;\r\n    uint256 internal immutable reporterMultiplier15;\r\n    uint256 internal immutable reporterMultiplier16;\r\n    uint256 internal immutable reporterMultiplier17;\r\n    uint256 internal immutable reporterMultiplier18;\r\n    uint256 internal immutable reporterMultiplier19;\r\n    uint256 internal immutable reporterMultiplier20;\r\n    uint256 internal immutable reporterMultiplier21;\r\n    uint256 internal immutable reporterMultiplier22;\r\n    uint256 internal immutable reporterMultiplier23;\r\n    uint256 internal immutable reporterMultiplier24;\r\n\r\n    bool internal immutable isUniswapReversed00;\r\n    bool internal immutable isUniswapReversed01;\r\n    bool internal immutable isUniswapReversed02;\r\n    bool internal immutable isUniswapReversed03;\r\n    bool internal immutable isUniswapReversed04;\r\n    bool internal immutable isUniswapReversed05;\r\n    bool internal immutable isUniswapReversed06;\r\n    bool internal immutable isUniswapReversed07;\r\n    bool internal immutable isUniswapReversed08;\r\n    bool internal immutable isUniswapReversed09;\r\n    bool internal immutable isUniswapReversed10;\r\n    bool internal immutable isUniswapReversed11;\r\n    bool internal immutable isUniswapReversed12;\r\n    bool internal immutable isUniswapReversed13;\r\n    bool internal immutable isUniswapReversed14;\r\n    bool internal immutable isUniswapReversed15;\r\n    bool internal immutable isUniswapReversed16;\r\n    bool internal immutable isUniswapReversed17;\r\n    bool internal immutable isUniswapReversed18;\r\n    bool internal immutable isUniswapReversed19;\r\n    bool internal immutable isUniswapReversed20;\r\n    bool internal immutable isUniswapReversed21;\r\n    bool internal immutable isUniswapReversed22;\r\n    bool internal immutable isUniswapReversed23;\r\n    bool internal immutable isUniswapReversed24;\r\n\r\n    /**\r\n     * @notice Construct an immutable store of configs into the contract data\r\n     * @param configs The configs for the supported assets\r\n     */\r\n    constructor(TokenConfig[] memory configs) public {\r\n        require(configs.length <= maxTokens, \"too many configs\");\r\n        numTokens = configs.length;\r\n\r\n        cToken00 = get(configs, 0).cToken;\r\n        cToken01 = get(configs, 1).cToken;\r\n        cToken02 = get(configs, 2).cToken;\r\n        cToken03 = get(configs, 3).cToken;\r\n        cToken04 = get(configs, 4).cToken;\r\n        cToken05 = get(configs, 5).cToken;\r\n        cToken06 = get(configs, 6).cToken;\r\n        cToken07 = get(configs, 7).cToken;\r\n        cToken08 = get(configs, 8).cToken;\r\n        cToken09 = get(configs, 9).cToken;\r\n        cToken10 = get(configs, 10).cToken;\r\n        cToken11 = get(configs, 11).cToken;\r\n        cToken12 = get(configs, 12).cToken;\r\n        cToken13 = get(configs, 13).cToken;\r\n        cToken14 = get(configs, 14).cToken;\r\n        cToken15 = get(configs, 15).cToken;\r\n        cToken16 = get(configs, 16).cToken;\r\n        cToken17 = get(configs, 17).cToken;\r\n        cToken18 = get(configs, 18).cToken;\r\n        cToken19 = get(configs, 19).cToken;\r\n        cToken20 = get(configs, 20).cToken;\r\n        cToken21 = get(configs, 21).cToken;\r\n        cToken22 = get(configs, 22).cToken;\r\n        cToken23 = get(configs, 23).cToken;\r\n        cToken24 = get(configs, 24).cToken;\r\n\r\n        underlying00 = get(configs, 0).underlying;\r\n        underlying01 = get(configs, 1).underlying;\r\n        underlying02 = get(configs, 2).underlying;\r\n        underlying03 = get(configs, 3).underlying;\r\n        underlying04 = get(configs, 4).underlying;\r\n        underlying05 = get(configs, 5).underlying;\r\n        underlying06 = get(configs, 6).underlying;\r\n        underlying07 = get(configs, 7).underlying;\r\n        underlying08 = get(configs, 8).underlying;\r\n        underlying09 = get(configs, 9).underlying;\r\n        underlying10 = get(configs, 10).underlying;\r\n        underlying11 = get(configs, 11).underlying;\r\n        underlying12 = get(configs, 12).underlying;\r\n        underlying13 = get(configs, 13).underlying;\r\n        underlying14 = get(configs, 14).underlying;\r\n        underlying15 = get(configs, 15).underlying;\r\n        underlying16 = get(configs, 16).underlying;\r\n        underlying17 = get(configs, 17).underlying;\r\n        underlying18 = get(configs, 18).underlying;\r\n        underlying19 = get(configs, 19).underlying;\r\n        underlying20 = get(configs, 20).underlying;\r\n        underlying21 = get(configs, 21).underlying;\r\n        underlying22 = get(configs, 22).underlying;\r\n        underlying23 = get(configs, 23).underlying;\r\n        underlying24 = get(configs, 24).underlying;\r\n\r\n        symbolHash00 = get(configs, 0).symbolHash;\r\n        symbolHash01 = get(configs, 1).symbolHash;\r\n        symbolHash02 = get(configs, 2).symbolHash;\r\n        symbolHash03 = get(configs, 3).symbolHash;\r\n        symbolHash04 = get(configs, 4).symbolHash;\r\n        symbolHash05 = get(configs, 5).symbolHash;\r\n        symbolHash06 = get(configs, 6).symbolHash;\r\n        symbolHash07 = get(configs, 7).symbolHash;\r\n        symbolHash08 = get(configs, 8).symbolHash;\r\n        symbolHash09 = get(configs, 9).symbolHash;\r\n        symbolHash10 = get(configs, 10).symbolHash;\r\n        symbolHash11 = get(configs, 11).symbolHash;\r\n        symbolHash12 = get(configs, 12).symbolHash;\r\n        symbolHash13 = get(configs, 13).symbolHash;\r\n        symbolHash14 = get(configs, 14).symbolHash;\r\n        symbolHash15 = get(configs, 15).symbolHash;\r\n        symbolHash16 = get(configs, 16).symbolHash;\r\n        symbolHash17 = get(configs, 17).symbolHash;\r\n        symbolHash18 = get(configs, 18).symbolHash;\r\n        symbolHash19 = get(configs, 19).symbolHash;\r\n        symbolHash20 = get(configs, 20).symbolHash;\r\n        symbolHash21 = get(configs, 21).symbolHash;\r\n        symbolHash22 = get(configs, 22).symbolHash;\r\n        symbolHash23 = get(configs, 23).symbolHash;\r\n        symbolHash24 = get(configs, 24).symbolHash;\r\n\r\n        baseUnit00 = get(configs, 0).baseUnit;\r\n        baseUnit01 = get(configs, 1).baseUnit;\r\n        baseUnit02 = get(configs, 2).baseUnit;\r\n        baseUnit03 = get(configs, 3).baseUnit;\r\n        baseUnit04 = get(configs, 4).baseUnit;\r\n        baseUnit05 = get(configs, 5).baseUnit;\r\n        baseUnit06 = get(configs, 6).baseUnit;\r\n        baseUnit07 = get(configs, 7).baseUnit;\r\n        baseUnit08 = get(configs, 8).baseUnit;\r\n        baseUnit09 = get(configs, 9).baseUnit;\r\n        baseUnit10 = get(configs, 10).baseUnit;\r\n        baseUnit11 = get(configs, 11).baseUnit;\r\n        baseUnit12 = get(configs, 12).baseUnit;\r\n        baseUnit13 = get(configs, 13).baseUnit;\r\n        baseUnit14 = get(configs, 14).baseUnit;\r\n        baseUnit15 = get(configs, 15).baseUnit;\r\n        baseUnit16 = get(configs, 16).baseUnit;\r\n        baseUnit17 = get(configs, 17).baseUnit;\r\n        baseUnit18 = get(configs, 18).baseUnit;\r\n        baseUnit19 = get(configs, 19).baseUnit;\r\n        baseUnit20 = get(configs, 20).baseUnit;\r\n        baseUnit21 = get(configs, 21).baseUnit;\r\n        baseUnit22 = get(configs, 22).baseUnit;\r\n        baseUnit23 = get(configs, 23).baseUnit;\r\n        baseUnit24 = get(configs, 24).baseUnit;\r\n\r\n        priceSource00 = get(configs, 0).priceSource;\r\n        priceSource01 = get(configs, 1).priceSource;\r\n        priceSource02 = get(configs, 2).priceSource;\r\n        priceSource03 = get(configs, 3).priceSource;\r\n        priceSource04 = get(configs, 4).priceSource;\r\n        priceSource05 = get(configs, 5).priceSource;\r\n        priceSource06 = get(configs, 6).priceSource;\r\n        priceSource07 = get(configs, 7).priceSource;\r\n        priceSource08 = get(configs, 8).priceSource;\r\n        priceSource09 = get(configs, 9).priceSource;\r\n        priceSource10 = get(configs, 10).priceSource;\r\n        priceSource11 = get(configs, 11).priceSource;\r\n        priceSource12 = get(configs, 12).priceSource;\r\n        priceSource13 = get(configs, 13).priceSource;\r\n        priceSource14 = get(configs, 14).priceSource;\r\n        priceSource15 = get(configs, 15).priceSource;\r\n        priceSource16 = get(configs, 16).priceSource;\r\n        priceSource17 = get(configs, 17).priceSource;\r\n        priceSource18 = get(configs, 18).priceSource;\r\n        priceSource19 = get(configs, 19).priceSource;\r\n        priceSource20 = get(configs, 20).priceSource;\r\n        priceSource21 = get(configs, 21).priceSource;\r\n        priceSource22 = get(configs, 22).priceSource;\r\n        priceSource23 = get(configs, 23).priceSource;\r\n        priceSource24 = get(configs, 24).priceSource;\r\n\r\n        fixedPrice00 = get(configs, 0).fixedPrice;\r\n        fixedPrice01 = get(configs, 1).fixedPrice;\r\n        fixedPrice02 = get(configs, 2).fixedPrice;\r\n        fixedPrice03 = get(configs, 3).fixedPrice;\r\n        fixedPrice04 = get(configs, 4).fixedPrice;\r\n        fixedPrice05 = get(configs, 5).fixedPrice;\r\n        fixedPrice06 = get(configs, 6).fixedPrice;\r\n        fixedPrice07 = get(configs, 7).fixedPrice;\r\n        fixedPrice08 = get(configs, 8).fixedPrice;\r\n        fixedPrice09 = get(configs, 9).fixedPrice;\r\n        fixedPrice10 = get(configs, 10).fixedPrice;\r\n        fixedPrice11 = get(configs, 11).fixedPrice;\r\n        fixedPrice12 = get(configs, 12).fixedPrice;\r\n        fixedPrice13 = get(configs, 13).fixedPrice;\r\n        fixedPrice14 = get(configs, 14).fixedPrice;\r\n        fixedPrice15 = get(configs, 15).fixedPrice;\r\n        fixedPrice16 = get(configs, 16).fixedPrice;\r\n        fixedPrice17 = get(configs, 17).fixedPrice;\r\n        fixedPrice18 = get(configs, 18).fixedPrice;\r\n        fixedPrice19 = get(configs, 19).fixedPrice;\r\n        fixedPrice20 = get(configs, 20).fixedPrice;\r\n        fixedPrice21 = get(configs, 21).fixedPrice;\r\n        fixedPrice22 = get(configs, 22).fixedPrice;\r\n        fixedPrice23 = get(configs, 23).fixedPrice;\r\n        fixedPrice24 = get(configs, 24).fixedPrice;\r\n\r\n        uniswapMarket00 = get(configs, 0).uniswapMarket;\r\n        uniswapMarket01 = get(configs, 1).uniswapMarket;\r\n        uniswapMarket02 = get(configs, 2).uniswapMarket;\r\n        uniswapMarket03 = get(configs, 3).uniswapMarket;\r\n        uniswapMarket04 = get(configs, 4).uniswapMarket;\r\n        uniswapMarket05 = get(configs, 5).uniswapMarket;\r\n        uniswapMarket06 = get(configs, 6).uniswapMarket;\r\n        uniswapMarket07 = get(configs, 7).uniswapMarket;\r\n        uniswapMarket08 = get(configs, 8).uniswapMarket;\r\n        uniswapMarket09 = get(configs, 9).uniswapMarket;\r\n        uniswapMarket10 = get(configs, 10).uniswapMarket;\r\n        uniswapMarket11 = get(configs, 11).uniswapMarket;\r\n        uniswapMarket12 = get(configs, 12).uniswapMarket;\r\n        uniswapMarket13 = get(configs, 13).uniswapMarket;\r\n        uniswapMarket14 = get(configs, 14).uniswapMarket;\r\n        uniswapMarket15 = get(configs, 15).uniswapMarket;\r\n        uniswapMarket16 = get(configs, 16).uniswapMarket;\r\n        uniswapMarket17 = get(configs, 17).uniswapMarket;\r\n        uniswapMarket18 = get(configs, 18).uniswapMarket;\r\n        uniswapMarket19 = get(configs, 19).uniswapMarket;\r\n        uniswapMarket20 = get(configs, 20).uniswapMarket;\r\n        uniswapMarket21 = get(configs, 21).uniswapMarket;\r\n        uniswapMarket22 = get(configs, 22).uniswapMarket;\r\n        uniswapMarket23 = get(configs, 23).uniswapMarket;\r\n        uniswapMarket24 = get(configs, 24).uniswapMarket;\r\n\r\n        reporter00 = get(configs, 0).reporter;\r\n        reporter01 = get(configs, 1).reporter;\r\n        reporter02 = get(configs, 2).reporter;\r\n        reporter03 = get(configs, 3).reporter;\r\n        reporter04 = get(configs, 4).reporter;\r\n        reporter05 = get(configs, 5).reporter;\r\n        reporter06 = get(configs, 6).reporter;\r\n        reporter07 = get(configs, 7).reporter;\r\n        reporter08 = get(configs, 8).reporter;\r\n        reporter09 = get(configs, 9).reporter;\r\n        reporter10 = get(configs, 10).reporter;\r\n        reporter11 = get(configs, 11).reporter;\r\n        reporter12 = get(configs, 12).reporter;\r\n        reporter13 = get(configs, 13).reporter;\r\n        reporter14 = get(configs, 14).reporter;\r\n        reporter15 = get(configs, 15).reporter;\r\n        reporter16 = get(configs, 16).reporter;\r\n        reporter17 = get(configs, 17).reporter;\r\n        reporter18 = get(configs, 18).reporter;\r\n        reporter19 = get(configs, 19).reporter;\r\n        reporter20 = get(configs, 20).reporter;\r\n        reporter21 = get(configs, 21).reporter;\r\n        reporter22 = get(configs, 22).reporter;\r\n        reporter23 = get(configs, 23).reporter;\r\n        reporter24 = get(configs, 24).reporter;\r\n\r\n        reporterMultiplier00 = get(configs, 0).reporterMultiplier;\r\n        reporterMultiplier01 = get(configs, 1).reporterMultiplier;\r\n        reporterMultiplier02 = get(configs, 2).reporterMultiplier;\r\n        reporterMultiplier03 = get(configs, 3).reporterMultiplier;\r\n        reporterMultiplier04 = get(configs, 4).reporterMultiplier;\r\n        reporterMultiplier05 = get(configs, 5).reporterMultiplier;\r\n        reporterMultiplier06 = get(configs, 6).reporterMultiplier;\r\n        reporterMultiplier07 = get(configs, 7).reporterMultiplier;\r\n        reporterMultiplier08 = get(configs, 8).reporterMultiplier;\r\n        reporterMultiplier09 = get(configs, 9).reporterMultiplier;\r\n        reporterMultiplier10 = get(configs, 10).reporterMultiplier;\r\n        reporterMultiplier11 = get(configs, 11).reporterMultiplier;\r\n        reporterMultiplier12 = get(configs, 12).reporterMultiplier;\r\n        reporterMultiplier13 = get(configs, 13).reporterMultiplier;\r\n        reporterMultiplier14 = get(configs, 14).reporterMultiplier;\r\n        reporterMultiplier15 = get(configs, 15).reporterMultiplier;\r\n        reporterMultiplier16 = get(configs, 16).reporterMultiplier;\r\n        reporterMultiplier17 = get(configs, 17).reporterMultiplier;\r\n        reporterMultiplier18 = get(configs, 18).reporterMultiplier;\r\n        reporterMultiplier19 = get(configs, 19).reporterMultiplier;\r\n        reporterMultiplier20 = get(configs, 20).reporterMultiplier;\r\n        reporterMultiplier21 = get(configs, 21).reporterMultiplier;\r\n        reporterMultiplier22 = get(configs, 22).reporterMultiplier;\r\n        reporterMultiplier23 = get(configs, 23).reporterMultiplier;\r\n        reporterMultiplier24 = get(configs, 24).reporterMultiplier;\r\n\r\n        isUniswapReversed00 = get(configs, 0).isUniswapReversed;\r\n        isUniswapReversed01 = get(configs, 1).isUniswapReversed;\r\n        isUniswapReversed02 = get(configs, 2).isUniswapReversed;\r\n        isUniswapReversed03 = get(configs, 3).isUniswapReversed;\r\n        isUniswapReversed04 = get(configs, 4).isUniswapReversed;\r\n        isUniswapReversed05 = get(configs, 5).isUniswapReversed;\r\n        isUniswapReversed06 = get(configs, 6).isUniswapReversed;\r\n        isUniswapReversed07 = get(configs, 7).isUniswapReversed;\r\n        isUniswapReversed08 = get(configs, 8).isUniswapReversed;\r\n        isUniswapReversed09 = get(configs, 9).isUniswapReversed;\r\n        isUniswapReversed10 = get(configs, 10).isUniswapReversed;\r\n        isUniswapReversed11 = get(configs, 11).isUniswapReversed;\r\n        isUniswapReversed12 = get(configs, 12).isUniswapReversed;\r\n        isUniswapReversed13 = get(configs, 13).isUniswapReversed;\r\n        isUniswapReversed14 = get(configs, 14).isUniswapReversed;\r\n        isUniswapReversed15 = get(configs, 15).isUniswapReversed;\r\n        isUniswapReversed16 = get(configs, 16).isUniswapReversed;\r\n        isUniswapReversed17 = get(configs, 17).isUniswapReversed;\r\n        isUniswapReversed18 = get(configs, 18).isUniswapReversed;\r\n        isUniswapReversed19 = get(configs, 19).isUniswapReversed;\r\n        isUniswapReversed20 = get(configs, 20).isUniswapReversed;\r\n        isUniswapReversed21 = get(configs, 21).isUniswapReversed;\r\n        isUniswapReversed22 = get(configs, 22).isUniswapReversed;\r\n        isUniswapReversed23 = get(configs, 23).isUniswapReversed;\r\n        isUniswapReversed24 = get(configs, 24).isUniswapReversed;\r\n    }\r\n\r\n    function get(TokenConfig[] memory configs, uint i) internal pure returns (TokenConfig memory) {\r\n        if (i < configs.length)\r\n            return configs[i];\r\n        return TokenConfig({\r\n            cToken: address(0),\r\n            underlying: address(0),\r\n            symbolHash: bytes32(0),\r\n            baseUnit: uint256(0),\r\n            priceSource: PriceSource(0),\r\n            fixedPrice: uint256(0),\r\n            uniswapMarket: address(0),\r\n            reporter: address(0),\r\n            reporterMultiplier: uint256(0),\r\n            isUniswapReversed: false\r\n        });\r\n    }\r\n\r\n    function getReporterIndex(address reporter) internal view returns(uint) {\r\n        if (reporter == reporter00) return 0;\r\n        if (reporter == reporter01) return 1;\r\n        if (reporter == reporter02) return 2;\r\n        if (reporter == reporter03) return 3;\r\n        if (reporter == reporter04) return 4;\r\n        if (reporter == reporter05) return 5;\r\n        if (reporter == reporter06) return 6;\r\n        if (reporter == reporter07) return 7;\r\n        if (reporter == reporter08) return 8;\r\n        if (reporter == reporter09) return 9;\r\n        if (reporter == reporter10) return 10;\r\n        if (reporter == reporter11) return 11;\r\n        if (reporter == reporter12) return 12;\r\n        if (reporter == reporter13) return 13;\r\n        if (reporter == reporter14) return 14;\r\n        if (reporter == reporter15) return 15;\r\n        if (reporter == reporter16) return 16;\r\n        if (reporter == reporter17) return 17;\r\n        if (reporter == reporter18) return 18;\r\n        if (reporter == reporter19) return 19;\r\n        if (reporter == reporter20) return 20;\r\n        if (reporter == reporter21) return 21;\r\n        if (reporter == reporter22) return 22;\r\n        if (reporter == reporter23) return 23;\r\n        if (reporter == reporter24) return 24;\r\n\r\n        return type(uint).max;\r\n    }\r\n\r\n    function getCTokenIndex(address cToken) internal view returns (uint) {\r\n        if (cToken == cToken00) return 0;\r\n        if (cToken == cToken01) return 1;\r\n        if (cToken == cToken02) return 2;\r\n        if (cToken == cToken03) return 3;\r\n        if (cToken == cToken04) return 4;\r\n        if (cToken == cToken05) return 5;\r\n        if (cToken == cToken06) return 6;\r\n        if (cToken == cToken07) return 7;\r\n        if (cToken == cToken08) return 8;\r\n        if (cToken == cToken09) return 9;\r\n        if (cToken == cToken10) return 10;\r\n        if (cToken == cToken11) return 11;\r\n        if (cToken == cToken12) return 12;\r\n        if (cToken == cToken13) return 13;\r\n        if (cToken == cToken14) return 14;\r\n        if (cToken == cToken15) return 15;\r\n        if (cToken == cToken16) return 16;\r\n        if (cToken == cToken17) return 17;\r\n        if (cToken == cToken18) return 18;\r\n        if (cToken == cToken19) return 19;\r\n        if (cToken == cToken20) return 20;\r\n        if (cToken == cToken21) return 21;\r\n        if (cToken == cToken22) return 22;\r\n        if (cToken == cToken23) return 23;\r\n        if (cToken == cToken24) return 24;\r\n\r\n        return uint(-1);\r\n    }\r\n\r\n    function getUnderlyingIndex(address underlying) internal view returns (uint) {\r\n        if (underlying == underlying00) return 0;\r\n        if (underlying == underlying01) return 1;\r\n        if (underlying == underlying02) return 2;\r\n        if (underlying == underlying03) return 3;\r\n        if (underlying == underlying04) return 4;\r\n        if (underlying == underlying05) return 5;\r\n        if (underlying == underlying06) return 6;\r\n        if (underlying == underlying07) return 7;\r\n        if (underlying == underlying08) return 8;\r\n        if (underlying == underlying09) return 9;\r\n        if (underlying == underlying10) return 10;\r\n        if (underlying == underlying11) return 11;\r\n        if (underlying == underlying12) return 12;\r\n        if (underlying == underlying13) return 13;\r\n        if (underlying == underlying14) return 14;\r\n        if (underlying == underlying15) return 15;\r\n        if (underlying == underlying16) return 16;\r\n        if (underlying == underlying17) return 17;\r\n        if (underlying == underlying18) return 18;\r\n        if (underlying == underlying19) return 19;\r\n        if (underlying == underlying20) return 20;\r\n        if (underlying == underlying21) return 21;\r\n        if (underlying == underlying22) return 22;\r\n        if (underlying == underlying23) return 23;\r\n        if (underlying == underlying24) return 24;\r\n\r\n        return uint(-1);\r\n    }\r\n\r\n    function getSymbolHashIndex(bytes32 symbolHash) internal view returns (uint) {\r\n        if (symbolHash == symbolHash00) return 0;\r\n        if (symbolHash == symbolHash01) return 1;\r\n        if (symbolHash == symbolHash02) return 2;\r\n        if (symbolHash == symbolHash03) return 3;\r\n        if (symbolHash == symbolHash04) return 4;\r\n        if (symbolHash == symbolHash05) return 5;\r\n        if (symbolHash == symbolHash06) return 6;\r\n        if (symbolHash == symbolHash07) return 7;\r\n        if (symbolHash == symbolHash08) return 8;\r\n        if (symbolHash == symbolHash09) return 9;\r\n        if (symbolHash == symbolHash10) return 10;\r\n        if (symbolHash == symbolHash11) return 11;\r\n        if (symbolHash == symbolHash12) return 12;\r\n        if (symbolHash == symbolHash13) return 13;\r\n        if (symbolHash == symbolHash14) return 14;\r\n        if (symbolHash == symbolHash15) return 15;\r\n        if (symbolHash == symbolHash16) return 16;\r\n        if (symbolHash == symbolHash17) return 17;\r\n        if (symbolHash == symbolHash18) return 18;\r\n        if (symbolHash == symbolHash19) return 19;\r\n        if (symbolHash == symbolHash20) return 20;\r\n        if (symbolHash == symbolHash21) return 21;\r\n        if (symbolHash == symbolHash22) return 22;\r\n        if (symbolHash == symbolHash23) return 23;\r\n        if (symbolHash == symbolHash24) return 24;\r\n\r\n        return uint(-1);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the i-th config, according to the order they were passed in originally\r\n     * @param i The index of the config to get\r\n     * @return The config object\r\n     */\r\n    function getTokenConfig(uint i) public view returns (TokenConfig memory) {\r\n        require(i < numTokens, \"token config not found\");\r\n\r\n        if (i == 0) return TokenConfig({cToken: cToken00, underlying: underlying00, symbolHash: symbolHash00, baseUnit: baseUnit00, priceSource: priceSource00, fixedPrice: fixedPrice00, uniswapMarket: uniswapMarket00, reporter: reporter00, reporterMultiplier: reporterMultiplier00, isUniswapReversed: isUniswapReversed00});\r\n        if (i == 1) return TokenConfig({cToken: cToken01, underlying: underlying01, symbolHash: symbolHash01, baseUnit: baseUnit01, priceSource: priceSource01, fixedPrice: fixedPrice01, uniswapMarket: uniswapMarket01, reporter: reporter01, reporterMultiplier: reporterMultiplier01, isUniswapReversed: isUniswapReversed01});\r\n        if (i == 2) return TokenConfig({cToken: cToken02, underlying: underlying02, symbolHash: symbolHash02, baseUnit: baseUnit02, priceSource: priceSource02, fixedPrice: fixedPrice02, uniswapMarket: uniswapMarket02, reporter: reporter02, reporterMultiplier: reporterMultiplier02, isUniswapReversed: isUniswapReversed02});\r\n        if (i == 3) return TokenConfig({cToken: cToken03, underlying: underlying03, symbolHash: symbolHash03, baseUnit: baseUnit03, priceSource: priceSource03, fixedPrice: fixedPrice03, uniswapMarket: uniswapMarket03, reporter: reporter03, reporterMultiplier: reporterMultiplier03, isUniswapReversed: isUniswapReversed03});\r\n        if (i == 4) return TokenConfig({cToken: cToken04, underlying: underlying04, symbolHash: symbolHash04, baseUnit: baseUnit04, priceSource: priceSource04, fixedPrice: fixedPrice04, uniswapMarket: uniswapMarket04, reporter: reporter04, reporterMultiplier: reporterMultiplier04, isUniswapReversed: isUniswapReversed04});\r\n        if (i == 5) return TokenConfig({cToken: cToken05, underlying: underlying05, symbolHash: symbolHash05, baseUnit: baseUnit05, priceSource: priceSource05, fixedPrice: fixedPrice05, uniswapMarket: uniswapMarket05, reporter: reporter05, reporterMultiplier: reporterMultiplier05, isUniswapReversed: isUniswapReversed05});\r\n        if (i == 6) return TokenConfig({cToken: cToken06, underlying: underlying06, symbolHash: symbolHash06, baseUnit: baseUnit06, priceSource: priceSource06, fixedPrice: fixedPrice06, uniswapMarket: uniswapMarket06, reporter: reporter06, reporterMultiplier: reporterMultiplier06, isUniswapReversed: isUniswapReversed06});\r\n        if (i == 7) return TokenConfig({cToken: cToken07, underlying: underlying07, symbolHash: symbolHash07, baseUnit: baseUnit07, priceSource: priceSource07, fixedPrice: fixedPrice07, uniswapMarket: uniswapMarket07, reporter: reporter07, reporterMultiplier: reporterMultiplier07, isUniswapReversed: isUniswapReversed07});\r\n        if (i == 8) return TokenConfig({cToken: cToken08, underlying: underlying08, symbolHash: symbolHash08, baseUnit: baseUnit08, priceSource: priceSource08, fixedPrice: fixedPrice08, uniswapMarket: uniswapMarket08, reporter: reporter08, reporterMultiplier: reporterMultiplier08, isUniswapReversed: isUniswapReversed08});\r\n        if (i == 9) return TokenConfig({cToken: cToken09, underlying: underlying09, symbolHash: symbolHash09, baseUnit: baseUnit09, priceSource: priceSource09, fixedPrice: fixedPrice09, uniswapMarket: uniswapMarket09, reporter: reporter09, reporterMultiplier: reporterMultiplier09, isUniswapReversed: isUniswapReversed09});\r\n\r\n        if (i == 10) return TokenConfig({cToken: cToken10, underlying: underlying10, symbolHash: symbolHash10, baseUnit: baseUnit10, priceSource: priceSource10, fixedPrice: fixedPrice10, uniswapMarket: uniswapMarket10, reporter: reporter10, reporterMultiplier: reporterMultiplier10, isUniswapReversed: isUniswapReversed10});\r\n        if (i == 11) return TokenConfig({cToken: cToken11, underlying: underlying11, symbolHash: symbolHash11, baseUnit: baseUnit11, priceSource: priceSource11, fixedPrice: fixedPrice11, uniswapMarket: uniswapMarket11, reporter: reporter11, reporterMultiplier: reporterMultiplier11, isUniswapReversed: isUniswapReversed11});\r\n        if (i == 12) return TokenConfig({cToken: cToken12, underlying: underlying12, symbolHash: symbolHash12, baseUnit: baseUnit12, priceSource: priceSource12, fixedPrice: fixedPrice12, uniswapMarket: uniswapMarket12, reporter: reporter12, reporterMultiplier: reporterMultiplier12, isUniswapReversed: isUniswapReversed12});\r\n        if (i == 13) return TokenConfig({cToken: cToken13, underlying: underlying13, symbolHash: symbolHash13, baseUnit: baseUnit13, priceSource: priceSource13, fixedPrice: fixedPrice13, uniswapMarket: uniswapMarket13, reporter: reporter13, reporterMultiplier: reporterMultiplier13, isUniswapReversed: isUniswapReversed13});\r\n        if (i == 14) return TokenConfig({cToken: cToken14, underlying: underlying14, symbolHash: symbolHash14, baseUnit: baseUnit14, priceSource: priceSource14, fixedPrice: fixedPrice14, uniswapMarket: uniswapMarket14, reporter: reporter14, reporterMultiplier: reporterMultiplier14, isUniswapReversed: isUniswapReversed14});\r\n        if (i == 15) return TokenConfig({cToken: cToken15, underlying: underlying15, symbolHash: symbolHash15, baseUnit: baseUnit15, priceSource: priceSource15, fixedPrice: fixedPrice15, uniswapMarket: uniswapMarket15, reporter: reporter15, reporterMultiplier: reporterMultiplier15, isUniswapReversed: isUniswapReversed15});\r\n        if (i == 16) return TokenConfig({cToken: cToken16, underlying: underlying16, symbolHash: symbolHash16, baseUnit: baseUnit16, priceSource: priceSource16, fixedPrice: fixedPrice16, uniswapMarket: uniswapMarket16, reporter: reporter16, reporterMultiplier: reporterMultiplier16, isUniswapReversed: isUniswapReversed16});\r\n        if (i == 17) return TokenConfig({cToken: cToken17, underlying: underlying17, symbolHash: symbolHash17, baseUnit: baseUnit17, priceSource: priceSource17, fixedPrice: fixedPrice17, uniswapMarket: uniswapMarket17, reporter: reporter17, reporterMultiplier: reporterMultiplier17, isUniswapReversed: isUniswapReversed17});\r\n        if (i == 18) return TokenConfig({cToken: cToken18, underlying: underlying18, symbolHash: symbolHash18, baseUnit: baseUnit18, priceSource: priceSource18, fixedPrice: fixedPrice18, uniswapMarket: uniswapMarket18, reporter: reporter18, reporterMultiplier: reporterMultiplier18, isUniswapReversed: isUniswapReversed18});\r\n        if (i == 19) return TokenConfig({cToken: cToken19, underlying: underlying19, symbolHash: symbolHash19, baseUnit: baseUnit19, priceSource: priceSource19, fixedPrice: fixedPrice19, uniswapMarket: uniswapMarket19, reporter: reporter19, reporterMultiplier: reporterMultiplier19, isUniswapReversed: isUniswapReversed19});\r\n\r\n        if (i == 20) return TokenConfig({cToken: cToken20, underlying: underlying20, symbolHash: symbolHash20, baseUnit: baseUnit20, priceSource: priceSource20, fixedPrice: fixedPrice20, uniswapMarket: uniswapMarket20, reporter: reporter20, reporterMultiplier: reporterMultiplier20, isUniswapReversed: isUniswapReversed20});\r\n        if (i == 21) return TokenConfig({cToken: cToken21, underlying: underlying21, symbolHash: symbolHash21, baseUnit: baseUnit21, priceSource: priceSource21, fixedPrice: fixedPrice21, uniswapMarket: uniswapMarket21, reporter: reporter21, reporterMultiplier: reporterMultiplier21, isUniswapReversed: isUniswapReversed21});\r\n        if (i == 22) return TokenConfig({cToken: cToken22, underlying: underlying22, symbolHash: symbolHash22, baseUnit: baseUnit22, priceSource: priceSource22, fixedPrice: fixedPrice22, uniswapMarket: uniswapMarket22, reporter: reporter22, reporterMultiplier: reporterMultiplier22, isUniswapReversed: isUniswapReversed22});\r\n        if (i == 23) return TokenConfig({cToken: cToken23, underlying: underlying23, symbolHash: symbolHash23, baseUnit: baseUnit23, priceSource: priceSource23, fixedPrice: fixedPrice23, uniswapMarket: uniswapMarket23, reporter: reporter23, reporterMultiplier: reporterMultiplier23, isUniswapReversed: isUniswapReversed23});\r\n        if (i == 24) return TokenConfig({cToken: cToken24, underlying: underlying24, symbolHash: symbolHash24, baseUnit: baseUnit24, priceSource: priceSource24, fixedPrice: fixedPrice24, uniswapMarket: uniswapMarket24, reporter: reporter24, reporterMultiplier: reporterMultiplier24, isUniswapReversed: isUniswapReversed24});\r\n    }\r\n\r\n    /**\r\n     * @notice Get the config for symbol\r\n     * @param symbol The symbol of the config to get\r\n     * @return The config object\r\n     */\r\n    function getTokenConfigBySymbol(string memory symbol) public view returns (TokenConfig memory) {\r\n        return getTokenConfigBySymbolHash(keccak256(abi.encodePacked(symbol)));\r\n    }\r\n\r\n    /**\r\n     * @notice Get the config for the reporter\r\n     * @param reporter The address of the reporter of the config to get\r\n     * @return The config object\r\n     */\r\n    function getTokenConfigByReporter(address reporter) public view returns (TokenConfig memory) {\r\n        uint index = getReporterIndex(reporter);\r\n        if (index != uint(-1)) {\r\n            return getTokenConfig(index);\r\n        }\r\n\r\n        revert(\"token config not found\");\r\n    }\r\n\r\n    /**\r\n     * @notice Get the config for the symbolHash\r\n     * @param symbolHash The keccack256 of the symbol of the config to get\r\n     * @return The config object\r\n     */\r\n    function getTokenConfigBySymbolHash(bytes32 symbolHash) public view returns (TokenConfig memory) {\r\n        uint index = getSymbolHashIndex(symbolHash);\r\n        if (index != uint(-1)) {\r\n            return getTokenConfig(index);\r\n        }\r\n\r\n        revert(\"token config not found\");\r\n    }\r\n\r\n    /**\r\n     * @notice Get the config for the cToken\r\n     * @dev If a config for the cToken is not found, falls back to searching for the underlying.\r\n     * @param cToken The address of the cToken of the config to get\r\n     * @return The config object\r\n     */\r\n    function getTokenConfigByCToken(address cToken) public view returns (TokenConfig memory) {\r\n        uint index = getCTokenIndex(cToken);\r\n        if (index != uint(-1)) {\r\n            return getTokenConfig(index);\r\n        }\r\n\r\n        return getTokenConfigByUnderlying(CErc20(cToken).underlying());\r\n    }\r\n\r\n    /**\r\n     * @notice Get the config for an underlying asset\r\n     * @param underlying The address of the underlying asset of the config to get\r\n     * @return The config object\r\n     */\r\n    function getTokenConfigByUnderlying(address underlying) public view returns (TokenConfig memory) {\r\n        uint index = getUnderlyingIndex(underlying);\r\n        if (index != uint(-1)) {\r\n            return getTokenConfig(index);\r\n        }\r\n\r\n        revert(\"token config not found\");\r\n    }\r\n}\r\n\r\nlibrary FixedPoint {\r\n    // range: [0, 2**112 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq112x112 {\r\n        uint224 _x;\r\n    }\r\n\r\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\r\n    // equivalent to encode(numerator).div(denominator)\r\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\r\n        require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\r\n        return uq112x112((uint224(numerator) << 112) / denominator);\r\n    }\r\n\r\n    // decode a uq112x112 into a uint with 18 decimals of precision\r\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\r\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\r\n        // instead, get close to:\r\n        //  (x * 1e18) >> 112\r\n        // without risk of overflowing, e.g.:\r\n        //  (x) / 2 ** (112 - lg(1e18))\r\n        return uint(self._x) / 5192296858534827;\r\n    }\r\n}\r\n\r\n// library with helper methods for oracles that are concerned with computing average prices\r\nlibrary UniswapV2OracleLibrary {\r\n    using FixedPoint for *;\r\n\r\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\r\n    function currentBlockTimestamp() internal view returns (uint32) {\r\n        return uint32(block.timestamp % 2 ** 32);\r\n    }\r\n\r\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\r\n    function currentCumulativePrices(\r\n        address pair\r\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\r\n        blockTimestamp = currentBlockTimestamp();\r\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\r\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\r\n\r\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\r\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\r\n        if (blockTimestampLast != blockTimestamp) {\r\n            // subtraction overflow is desired\r\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\r\n            // addition overflow is desired\r\n            // counterfactual\r\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\r\n            // counterfactual\r\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n}\r\n\r\n\r\nstruct Observation {\r\n    uint timestamp;\r\n    uint acc;\r\n}\r\n\r\nstruct PriceData {\r\n    uint248 price;\r\n    bool failoverActive;\r\n}\r\n\r\ncontract UniswapAnchoredView is AggregatorValidatorInterface, UniswapConfig, Ownable {\r\n    using FixedPoint for *;\r\n\r\n    /// @notice The number of wei in 1 ETH\r\n    uint public constant ethBaseUnit = 1e18;\r\n\r\n    /// @notice A common scaling factor to maintain precision\r\n    uint public constant expScale = 1e18;\r\n\r\n    /// @notice The highest ratio of the new price to the anchor price that will still trigger the price to be updated\r\n    uint public immutable upperBoundAnchorRatio;\r\n\r\n    /// @notice The lowest ratio of the new price to the anchor price that will still trigger the price to be updated\r\n    uint public immutable lowerBoundAnchorRatio;\r\n\r\n    /// @notice The minimum amount of time in seconds required for the old uniswap price accumulator to be replaced\r\n    uint public immutable anchorPeriod;\r\n\r\n    /// @notice Official prices by symbol hash\r\n    mapping(bytes32 => PriceData) public prices;\r\n\r\n    /// @notice The old observation for each symbolHash\r\n    mapping(bytes32 => Observation) public oldObservations;\r\n\r\n    /// @notice The new observation for each symbolHash\r\n    mapping(bytes32 => Observation) public newObservations;\r\n\r\n    /// @notice The event emitted when new prices are posted but the stored price is not updated due to the anchor\r\n    event PriceGuarded(bytes32 indexed symbolHash, uint reporter, uint anchor);\r\n\r\n    /// @notice The event emitted when the stored price is updated\r\n    event PriceUpdated(bytes32 indexed symbolHash, uint price);\r\n\r\n    /// @notice The event emitted when anchor price is updated\r\n    event AnchorPriceUpdated(bytes32 indexed symbolHash, uint anchorPrice, uint oldTimestamp, uint newTimestamp);\r\n\r\n    /// @notice The event emitted when the uniswap window changes\r\n    event UniswapWindowUpdated(bytes32 indexed symbolHash, uint oldTimestamp, uint newTimestamp, uint oldPrice, uint newPrice);\r\n\r\n    /// @notice The event emitted when failover is activated\r\n    event FailoverActivated(bytes32 indexed symbolHash);\r\n\r\n    /// @notice The event emitted when failover is deactivated\r\n    event FailoverDeactivated(bytes32 indexed symbolHash);\r\n\r\n    bytes32 constant ethHash = keccak256(abi.encodePacked(\"ETH\"));\r\n\r\n    /**\r\n     * @notice Construct a uniswap anchored view for a set of token configurations\r\n     * @dev Note that to avoid immature TWAPs, the system must run for at least a single anchorPeriod before using.\r\n     * @param anchorToleranceMantissa_ The percentage tolerance that the reporter may deviate from the uniswap anchor\r\n     * @param anchorPeriod_ The minimum amount of time required for the old uniswap price accumulator to be replaced\r\n     * @param configs The static token configurations which define what prices are supported and how\r\n     */\r\n    constructor(uint anchorToleranceMantissa_,\r\n                uint anchorPeriod_,\r\n                TokenConfig[] memory configs) UniswapConfig(configs) public {\r\n\r\n        anchorPeriod = anchorPeriod_;\r\n\r\n        // Allow the tolerance to be whatever the deployer chooses, but prevent under/overflow (and prices from being 0)\r\n        upperBoundAnchorRatio = anchorToleranceMantissa_ > uint(-1) - 100e16 ? uint(-1) : 100e16 + anchorToleranceMantissa_;\r\n        lowerBoundAnchorRatio = anchorToleranceMantissa_ < 100e16 ? 100e16 - anchorToleranceMantissa_ : 1;\r\n\r\n        for (uint i = 0; i < configs.length; i++) {\r\n            TokenConfig memory config = configs[i];\r\n            require(config.baseUnit > 0, \"baseUnit must be greater than zero\");\r\n            address uniswapMarket = config.uniswapMarket;\r\n            if (config.priceSource == PriceSource.REPORTER) {\r\n                require(uniswapMarket != address(0), \"reported prices must have an anchor\");\r\n                bytes32 symbolHash = config.symbolHash;\r\n                uint cumulativePrice = currentCumulativePrice(config);\r\n                oldObservations[symbolHash].timestamp = block.timestamp;\r\n                newObservations[symbolHash].timestamp = block.timestamp;\r\n                oldObservations[symbolHash].acc = cumulativePrice;\r\n                newObservations[symbolHash].acc = cumulativePrice;\r\n                emit UniswapWindowUpdated(symbolHash, block.timestamp, block.timestamp, cumulativePrice, cumulativePrice);\r\n            } else {\r\n                require(uniswapMarket == address(0), \"only reported prices utilize an anchor\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Get the official price for a symbol\r\n     * @param symbol The symbol to fetch the price of\r\n     * @return Price denominated in USD, with 6 decimals\r\n     */\r\n    function price(string memory symbol) external view returns (uint) {\r\n        TokenConfig memory config = getTokenConfigBySymbol(symbol);\r\n        return priceInternal(config);\r\n    }\r\n\r\n    function priceInternal(TokenConfig memory config) internal view returns (uint) {\r\n        if (config.priceSource == PriceSource.REPORTER) return prices[config.symbolHash].price;\r\n        if (config.priceSource == PriceSource.FIXED_USD) return config.fixedPrice;\r\n        if (config.priceSource == PriceSource.FIXED_ETH) {\r\n            uint usdPerEth = prices[ethHash].price;\r\n            require(usdPerEth > 0, \"ETH price not set, cannot convert to dollars\");\r\n            return mul(usdPerEth, config.fixedPrice) / ethBaseUnit;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Get the underlying price of a cToken\r\n     * @dev Implements the PriceOracle interface for Compound v2.\r\n     * @param cToken The cToken address for price retrieval\r\n     * @return Price denominated in USD, with 18 decimals, for the given cToken address\r\n     */\r\n    function getUnderlyingPrice(address cToken) external view returns (uint) {\r\n        TokenConfig memory config = getTokenConfigByCToken(cToken);\r\n         // Comptroller needs prices in the format: ${raw price} * 1e(36 - baseUnit)\r\n         // Since the prices in this view have 6 decimals, we must scale them by 1e(36 - 6 - baseUnit)\r\n        return mul(1e30, priceInternal(config)) / config.baseUnit;\r\n    }\r\n\r\n    /**\r\n     * @notice This is called by the reporter whenever a new price is posted on-chain\r\n     * @dev called by AccessControlledOffChainAggregator\r\n     * @param currentAnswer the price\r\n     * @return valid bool\r\n     */\r\n    function validate(uint256/* previousRoundId */,\r\n            int256 /* previousAnswer */,\r\n            uint256 /* currentRoundId */,\r\n            int256 currentAnswer) external override returns (bool valid) {\r\n\r\n        // This will revert if no configs found for the msg.sender\r\n        TokenConfig memory config = getTokenConfigByReporter(msg.sender);\r\n        uint256 reportedPrice = convertReportedPrice(config, currentAnswer);\r\n        uint256 anchorPrice = calculateAnchorPriceFromEthPrice(config);\r\n\r\n        PriceData memory priceData = prices[config.symbolHash];\r\n        if (priceData.failoverActive) {\r\n            require(anchorPrice <= 2**248, \"Anchor price too large\");\r\n            prices[config.symbolHash].price = uint248(anchorPrice);\r\n            emit PriceUpdated(config.symbolHash, anchorPrice);\r\n        } else if (isWithinAnchor(reportedPrice, anchorPrice)) {\r\n            require(reportedPrice <= 2**248, \"Reported price too large\");\r\n            prices[config.symbolHash].price = uint248(reportedPrice);\r\n            emit PriceUpdated(config.symbolHash, reportedPrice);\r\n            valid = true;\r\n        } else {\r\n            emit PriceGuarded(config.symbolHash, reportedPrice, anchorPrice);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice In the event that a feed is failed over to Uniswap TWAP, this function can be called\r\n     * by anyone to update the TWAP price.\r\n     * @dev This only works if the feed represented by the symbolHash is failed over, and will revert otherwise\r\n     * @param symbolHash bytes32\r\n     */\r\n    function pokeFailedOverPrice(bytes32 symbolHash) public {\r\n        PriceData memory priceData = prices[symbolHash];\r\n        require(priceData.failoverActive, \"Failover must be active\");\r\n        TokenConfig memory config = getTokenConfigBySymbolHash(symbolHash);\r\n        uint anchorPrice = calculateAnchorPriceFromEthPrice(config);\r\n        require(anchorPrice <= 2**248, \"Anchor price too large\");\r\n        prices[config.symbolHash].price = uint248(anchorPrice);\r\n        emit PriceUpdated(config.symbolHash, anchorPrice);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the anchor price by fetching price data from the TWAP\r\n     * @param config TokenConfig\r\n     * @return anchorPrice uint\r\n     */\r\n    function calculateAnchorPriceFromEthPrice(TokenConfig memory config) internal returns (uint anchorPrice) {\r\n        uint ethPrice = fetchEthPrice();\r\n        require(config.priceSource == PriceSource.REPORTER, \"only reporter prices get posted\");\r\n        if (config.symbolHash == ethHash) {\r\n            anchorPrice = ethPrice;\r\n        } else {\r\n            anchorPrice = fetchAnchorPrice(config.symbolHash, config, ethPrice);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Convert the reported price to the 6 decimal format that this view requires\r\n     * @param config TokenConfig\r\n     * @param reportedPrice from the reporter\r\n     * @return convertedPrice uint256\r\n     */\r\n    function convertReportedPrice(TokenConfig memory config, int256 reportedPrice) internal pure returns (uint256) {\r\n        require(reportedPrice >= 0, \"Reported price cannot be negative\");\r\n        uint256 unsignedPrice = uint256(reportedPrice);\r\n        uint256 convertedPrice = mul(unsignedPrice, config.reporterMultiplier) / config.baseUnit;\r\n        return convertedPrice;\r\n    }\r\n\r\n\r\n    function isWithinAnchor(uint reporterPrice, uint anchorPrice) internal view returns (bool) {\r\n        if (reporterPrice > 0) {\r\n            uint anchorRatio = mul(anchorPrice, 100e16) / reporterPrice;\r\n            return anchorRatio <= upperBoundAnchorRatio && anchorRatio >= lowerBoundAnchorRatio;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @dev Fetches the current token/eth price accumulator from uniswap.\r\n     */\r\n    function currentCumulativePrice(TokenConfig memory config) internal view returns (uint) {\r\n        (uint cumulativePrice0, uint cumulativePrice1,) = UniswapV2OracleLibrary.currentCumulativePrices(config.uniswapMarket);\r\n        if (config.isUniswapReversed) {\r\n            return cumulativePrice1;\r\n        } else {\r\n            return cumulativePrice0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Fetches the current eth/usd price from uniswap, with 6 decimals of precision.\r\n     *  Conversion factor is 1e18 for eth/usdc market, since we decode uniswap price statically with 18 decimals.\r\n     */\r\n    function fetchEthPrice() internal returns (uint) {\r\n        return fetchAnchorPrice(ethHash, getTokenConfigBySymbolHash(ethHash), ethBaseUnit);\r\n    }\r\n\r\n    /**\r\n     * @dev Fetches the current token/usd price from uniswap, with 6 decimals of precision.\r\n     * @param conversionFactor 1e18 if seeking the ETH price, and a 6 decimal ETH-USDC price in the case of other assets\r\n     */\r\n    function fetchAnchorPrice(bytes32 symbolHash, TokenConfig memory config, uint conversionFactor) internal virtual returns (uint) {\r\n        (uint nowCumulativePrice, uint oldCumulativePrice, uint oldTimestamp) = pokeWindowValues(config);\r\n\r\n        // This should be impossible, but better safe than sorry\r\n        require(block.timestamp > oldTimestamp, \"now must come after before\");\r\n        uint timeElapsed = block.timestamp - oldTimestamp;\r\n\r\n        // Calculate uniswap time-weighted average price\r\n        // Underflow is a property of the accumulators: https://uniswap.org/audit.html#orgc9b3190\r\n        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(uint224((nowCumulativePrice - oldCumulativePrice) / timeElapsed));\r\n        uint rawUniswapPriceMantissa = priceAverage.decode112with18();\r\n        uint unscaledPriceMantissa = mul(rawUniswapPriceMantissa, conversionFactor);\r\n        uint anchorPrice;\r\n\r\n        // Adjust rawUniswapPrice according to the units of the non-ETH asset\r\n        // In the case of ETH, we would have to scale by 1e6 / USDC_UNITS, but since baseUnit2 is 1e6 (USDC), it cancels\r\n\r\n        // In the case of non-ETH tokens\r\n        // a. pokeWindowValues already handled uniswap reversed cases, so priceAverage will always be Token/ETH TWAP price.\r\n        // b. conversionFactor = ETH price * 1e6\r\n        // unscaledPriceMantissa = priceAverage(token/ETH TWAP price) * expScale * conversionFactor\r\n        // so ->\r\n        // anchorPrice = priceAverage * tokenBaseUnit / ethBaseUnit * ETH_price * 1e6\r\n        //             = priceAverage * conversionFactor * tokenBaseUnit / ethBaseUnit\r\n        //             = unscaledPriceMantissa / expScale * tokenBaseUnit / ethBaseUnit\r\n        anchorPrice = mul(unscaledPriceMantissa, config.baseUnit) / ethBaseUnit / expScale;\r\n\r\n        emit AnchorPriceUpdated(symbolHash, anchorPrice, oldTimestamp, block.timestamp);\r\n\r\n        return anchorPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev Get time-weighted average prices for a token at the current timestamp.\r\n     *  Update new and old observations of lagging window if period elapsed.\r\n     */\r\n    function pokeWindowValues(TokenConfig memory config) internal returns (uint, uint, uint) {\r\n        bytes32 symbolHash = config.symbolHash;\r\n        uint cumulativePrice = currentCumulativePrice(config);\r\n\r\n        Observation memory newObservation = newObservations[symbolHash];\r\n\r\n        // Update new and old observations if elapsed time is greater than or equal to anchor period\r\n        uint timeElapsed = block.timestamp - newObservation.timestamp;\r\n        if (timeElapsed >= anchorPeriod) {\r\n            oldObservations[symbolHash].timestamp = newObservation.timestamp;\r\n            oldObservations[symbolHash].acc = newObservation.acc;\r\n\r\n            newObservations[symbolHash].timestamp = block.timestamp;\r\n            newObservations[symbolHash].acc = cumulativePrice;\r\n            emit UniswapWindowUpdated(config.symbolHash, newObservation.timestamp, block.timestamp, newObservation.acc, cumulativePrice);\r\n        }\r\n        return (cumulativePrice, oldObservations[symbolHash].acc, oldObservations[symbolHash].timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Activate failover, and fall back to using failover directly.\r\n     * @dev Only the owner can call this function\r\n     */\r\n    function activateFailover(bytes32 symbolHash) external onlyOwner() {\r\n        require(!prices[symbolHash].failoverActive, \"Already activated\");\r\n        prices[symbolHash].failoverActive = true;\r\n        emit FailoverActivated(symbolHash);\r\n    }\r\n\r\n    /**\r\n     * @notice Deactivate a previously activated failover\r\n     * @dev Only the owner can call this function\r\n     */\r\n    function deactivateFailover(bytes32 symbolHash) external onlyOwner() {\r\n        require(prices[symbolHash].failoverActive, \"Already deactivated\");\r\n        prices[symbolHash].failoverActive = false;\r\n        emit FailoverDeactivated(symbolHash);\r\n    }\r\n\r\n    /// @dev Overflow proof multiplication\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) return 0;\r\n        uint c = a * b;\r\n        require(c / a == b, \"multiplication overflow\");\r\n        return c;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"anchorToleranceMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"anchorPeriod_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reporterMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnchorPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"FailoverActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"FailoverDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reporter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchor\",\"type\":\"uint256\"}],\"name\":\"PriceGuarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UniswapWindowUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"activateFailover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchorPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"deactivateFailover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reporterMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reporterMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"getTokenConfigByReporter\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reporterMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenConfigBySymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reporterMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"getTokenConfigBySymbolHash\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reporterMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reporterMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"newObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"oldObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"pokeFailedOverPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint248\",\"name\":\"price\",\"type\":\"uint248\"},{\"internalType\":\"bool\",\"name\":\"failoverActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"currentAnswer\",\"type\":\"int256\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UniswapAnchoredView","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8436fc45157c6be22a5ec9f7927e39176006ab6692d89db9b51037355525d7ac"}]}