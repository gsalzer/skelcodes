{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.8.0;\r\n\r\ncontract FDCBridgeEth {\r\n    \r\n    address private owner;\r\n    \r\n    struct admin {\r\n        bool isAdmin;\r\n        uint limit;\r\n        uint approvedLimit;\r\n    }\r\n    \r\n    mapping (address => admin) private admins;\r\n    \r\n    mapping (address => uint) private balances;\r\n    \r\n    address private FDCContract = 0x311C6769461e1d2173481F8d789AF00B39DF6d75;\r\n    \r\n    uint private transferFeeMinimum = 15700000000000000;\r\n    \r\n    uint private feeModifier = 0;//100 = 1%\r\n    \r\n    string private version = \"v1\";\r\n    \r\n    event TransferBridge(\r\n        address from,\r\n        address to,\r\n        uint amount\r\n    );\r\n    \r\n    event Balance(\r\n        address Address,\r\n        uint amount,\r\n        bool isBalanceAdd\r\n    );\r\n    \r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function burn(uint amount, address adminAddress) external payable {\r\n        require(admins[adminAddress].isAdmin == true, 'only admin');\r\n        require(msg.value >= transferFeeMinimum, \"Transfer Fee needs to be higher than minimum\");\r\n        \r\n        TransferHelper.safeTransferFrom(\r\n          FDCContract, msg.sender, address(this), amount\r\n        );\r\n        \r\n        TransferHelper.safeTransferETH(\r\n          adminAddress, msg.value\r\n        );\r\n        \r\n        uint transferRate = amount / 10;\r\n        require(transferRate > 0, \"Transfer Rate needs to be higher than the minimum\");\r\n        require(amount > transferRate, \"Amount sent needs to be higher than the Transfer Rate\");\r\n        uint sendValue = amount - transferRate;\r\n        \r\n        if (feeModifier > 0) {\r\n            uint fee = amount / feeModifier;\r\n            require(fee > 0, \"Fee needs to be higher than the minimum\");\r\n            TransferHelper.safeTransfer(\r\n              FDCContract, adminAddress, fee\r\n            );\r\n            sendValue -= fee;\r\n        }\r\n        \r\n        require((admins[adminAddress].limit >= sendValue), 'not enough admin limit');\r\n        admins[adminAddress].limit -= sendValue;\r\n        admins[adminAddress].approvedLimit += sendValue;\r\n        \r\n        balanceAdd(msg.sender, sendValue);\r\n        \r\n        emit TransferBridge(\r\n          msg.sender,\r\n          adminAddress,\r\n          sendValue\r\n        );\r\n    }\r\n    \r\n    function mint(uint amount, address to) external {\r\n        require(admins[msg.sender].isAdmin == true, 'only admin');\r\n        \r\n        TransferHelper.safeTransfer(\r\n          FDCContract, to, amount\r\n        );\r\n        \r\n        emit TransferBridge(\r\n          msg.sender,\r\n          to,\r\n          amount\r\n        );\r\n    }\r\n    \r\n    function balanceOf(address Address) external view returns (uint) {\r\n        return balances[Address];\r\n    }\r\n    \r\n    function balanceAdd(address Address, uint value) internal {\r\n        require(Address != address(0));\r\n        balances[Address] = balances[Address] + value;\r\n        emit Balance(\r\n          Address,\r\n          value,\r\n          true\r\n        );\r\n    }\r\n    \r\n    function balanceSubtract(address Address, uint value) internal {\r\n        require(Address != address(0));\r\n        require(balances[Address] - value >= 0, 'Not enough balance to subtract');\r\n        balances[Address] = balances[Address] - value;\r\n        emit Balance(\r\n          Address,\r\n          value,\r\n          false\r\n        );\r\n    }\r\n    \r\n    function adminSubtractBalance(address Address, uint value) external {\r\n        require(admins[msg.sender].isAdmin == true, 'only admin');\r\n        admins[msg.sender].approvedLimit -= value;\r\n        balanceSubtract(Address, value);\r\n        emit TransferBridge(\r\n          msg.sender,\r\n          Address,\r\n          value\r\n        );\r\n    }\r\n    \r\n    function updateAdmin(address adminAddress, bool state, uint limit) external {\r\n        require(msg.sender == owner, 'only owner');\r\n        admins[adminAddress].isAdmin = state;\r\n        admins[adminAddress].limit = limit;\r\n    }\r\n    \r\n    function getAdmin(address Address) external view returns(bool,uint,uint) {\r\n        return (admins[Address].isAdmin,admins[Address].limit,admins[Address].approvedLimit);\r\n    }\r\n    \r\n    function getOwner() external view returns(address) {\r\n        return owner;\r\n    }\r\n    \r\n    function setTransferFeeMinimum(uint amount) external {\r\n        require(msg.sender == owner, 'only owner');\r\n        transferFeeMinimum = amount;\r\n    }\r\n    \r\n    function getTransferFeeMinimum() external view returns(uint) {\r\n        return transferFeeMinimum;\r\n    }\r\n    \r\n    function setFeeModifier(uint amount) external {\r\n        require(msg.sender == owner, 'only owner');\r\n        feeModifier = amount;\r\n    }\r\n    \r\n    function getFeeModifier() external view returns(uint) {\r\n        return feeModifier;\r\n    }\r\n    \r\n    function getVersion() external view returns(string memory) {\r\n        return version;\r\n    }\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isBalanceAdd\",\"type\":\"bool\"}],\"name\":\"Balance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferBridge\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"adminSubtractBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"}],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeModifier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransferFeeMinimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setFeeModifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setTransferFeeMinimum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FDCBridgeEth","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7b57ae2e9ea219adaa983bcb4b7b76e7165c2ff6db07eb2c58428c5c2b7b7e24"}]}