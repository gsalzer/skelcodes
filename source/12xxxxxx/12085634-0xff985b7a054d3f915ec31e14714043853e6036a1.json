{"status":"1","message":"OK","result":[{"SourceCode":"/// SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity 0.6.12;\r\n\r\n/// @dev brief interface for moloch dao v2 erc20 token txs\r\ninterface IERC20 { \r\n    function balanceOf(address account) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n/// @dev brief interface for moloch dao v2 \r\ninterface IMOLOCH { \r\n    function submitProposal(\r\n        address applicant,\r\n        uint256 sharesRequested,\r\n        uint256 lootRequested,\r\n        uint256 tributeOffered,\r\n        address tributeToken,\r\n        uint256 paymentRequested,\r\n        address paymentToken,\r\n        string calldata details\r\n    ) external returns (uint256);\r\n    \r\n    function getProposalFlags(uint256 proposalId) external view returns (bool[6] memory);\r\n    \r\n    function withdrawBalance(address token, uint256 amount) external;\r\n}\r\n\r\n/// @dev brief interface for sushi bar (`xSUSHI`) entry\r\ninterface ISushiBar { \r\n   function enter(uint256 _amount) external;\r\n}\r\n\r\n/// @dev helper for address type\r\nlibrary Address { \r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n}\r\n\r\n/// @dev helper for non-standard token\r\nlibrary SafeERC20 { \r\n    using Address for address;\r\n    \r\n    function safeTransfer(IERC20 token, address to, uint256 amount) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, amount));\r\n    }\r\n    \r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 amount) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, amount));\r\n    }\r\n    \r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n        (bool success, bytes memory returnData) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returnData.length > 0) { // return data is optional\r\n            require(abi.decode(returnData, (bool)), \"SafeERC20: erc20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/// @dev helper for under/overflow check\r\nlibrary SafeMath { \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n}\r\n\r\n/// @dev call wrapper for reentrancy check\r\ncontract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n\r\n    constructor() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/// @dev low-level caller, ETH holder, separate bank for moloch dao v2 - based on raid guild `Minion`\r\ncontract SushiMinion is ReentrancyGuard {\r\n    address immutable sushiToken; // internal sushi token contract reference\r\n    IMOLOCH public moloch; // parent moloch contract reference \r\n\r\n    mapping(uint256 => Action) public actions; // proposalId => Action\r\n\r\n    struct Action {\r\n        uint256 value;\r\n        address to;\r\n        address proposer;\r\n        bool executed;\r\n        bytes data;\r\n    }\r\n\r\n    event ProposeAction(uint256 proposalId, address proposer);\r\n    event ExecuteAction(uint256 proposalId, address executor);\r\n\r\n    constructor(address _moloch, address _sushiToken, address _xSushiToken, address _aave) public {\r\n        moloch = IMOLOCH(_moloch);\r\n        sushiToken = _sushiToken;\r\n        IERC20(_sushiToken).approve(_xSushiToken, uint256(-1)); // max approve sushi bar for sushi token staking into xSushi\r\n        IERC20(_xSushiToken).approve(_aave, uint256(-1)); // max approve aave for deposit into aToken from underlying xSushi\r\n    }\r\n\r\n    function doWithdraw(address token, uint256 amount) external nonReentrant {\r\n        moloch.withdrawBalance(token, amount); // withdraw funds from parent moloch into minion\r\n    }\r\n\r\n    function proposeAction(\r\n        address actionTo,\r\n        uint256 actionValue,\r\n        bytes calldata actionData,\r\n        string calldata details\r\n    ) external nonReentrant returns (uint256) {\r\n        // No calls to zero address allows us to check that proxy submitted\r\n        // the proposal without getting the proposal struct from parent moloch\r\n        require(actionTo != address(0), \"invalid actionTo\");\r\n\r\n        uint256 proposalId = moloch.submitProposal(\r\n            address(this),\r\n            0,\r\n            0,\r\n            0,\r\n            sushiToken,\r\n            0,\r\n            sushiToken,\r\n            details\r\n        );\r\n\r\n        Action memory action = Action({\r\n            value: actionValue,\r\n            to: actionTo,\r\n            proposer: msg.sender,\r\n            executed: false,\r\n            data: actionData\r\n        });\r\n\r\n        actions[proposalId] = action;\r\n\r\n        emit ProposeAction(proposalId, msg.sender);\r\n        return proposalId;\r\n    }\r\n\r\n    function executeAction(uint256 proposalId) external nonReentrant returns (bytes memory) {\r\n        Action memory action = actions[proposalId];\r\n        bool[6] memory flags = moloch.getProposalFlags(proposalId);\r\n\r\n        require(action.to != address(0), \"invalid proposalId\");\r\n        require(!action.executed, \"action executed\");\r\n        require(address(this).balance >= action.value, \"insufficient ETH\");\r\n        require(flags[2], \"proposal not passed\");\r\n\r\n        // execute call\r\n        actions[proposalId].executed = true;\r\n        (bool success, bytes memory retData) = action.to.call{value: action.value}(action.data);\r\n        require(success, \"call failure\");\r\n        emit ExecuteAction(proposalId, msg.sender);\r\n        return retData;\r\n    }\r\n\r\n    receive() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moloch\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xSushiToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aave\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ExecuteAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"ProposeAction\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"actions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"doWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"executeAction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moloch\",\"outputs\":[{\"internalType\":\"contract IMOLOCH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"actionTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"actionValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"actionData\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"}],\"name\":\"proposeAction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SushiMinion","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006a57480cf4d93a1dd2946270468a645957f918bb0000000000000000000000006b3595068778dd592e39a122f4f5a5cf09c90fe20000000000000000000000008798249c2e607446efb7ad49ec89dd1865ff42720000000000000000000000007d2768de32b0b80b7a3454c06bdac94a69ddc7a9","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://614a819aae6767a3efa655007b16fa30d3a7506c86aab3c218a7857840dfc3d1"}]}