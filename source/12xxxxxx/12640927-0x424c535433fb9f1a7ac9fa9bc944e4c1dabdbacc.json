{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: SourceLibre\r\n\r\n/**\r\n * Elysium\r\n * Powered by Diemlibre.\r\n * A SourceLibre Product.\r\n * DApp for buying Diemlibre $DLB.\r\n * \r\n * This file includes:\r\n * 1) interface IERC20.\r\n * 2) library SafeMath.\r\n * 3) contract BuyDiemlibre.\r\n * \r\n * Note: Token is in its smallet unit with respect to its decimal value.\r\n */\r\npragma solidity 0.8.1;\r\n\r\n\r\n/**\r\n * ERC Interface for Diemlibre Token.\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function decimals() external view returns (uint8);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * Safe Math Library.\r\n */\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * BuyDiemlibre Contract.\r\n * \r\n * Default Attribues:\r\n * - `owner` -> The owner of the contract.\r\n * - `rate` -> The rate of the exchange in WEI, to be set by the `owner`.\r\n * - `token` -> The ERC20 token handle.\r\n * - `holder` -> The address of the holder of coins which this contract will be spending on its behave.\r\n * - `self` -> The address of this contract. To be set by the owner after deployment.\r\n * - `fees` -> The fees per transaction to be set by the owner.\r\n */\r\ncontract BuyDiemlibre {\r\n    \r\n    using SafeMath for uint256;\r\n    address owner;\r\n    uint256 rate; // Rate is in WEI per Diemlibre\r\n    IERC20 token;\r\n    uint256 tokenDecimalsValue;\r\n    address holder;\r\n    address self;\r\n    uint256 fees;\r\n    \r\n    /**\r\n     * \r\n     * Method Name: constructor\r\n     * Initialises the contract.\r\n     * Set most of the default attribues.\r\n     *\r\n     * Parameters:\r\n     * - `address _tokenAddress` -> non zero address of the token contract.\r\n     * - `address _holderAddress` -> non zero address of the holder of the tokens which has tokens.\r\n     * - the caller is recommeded to be the owner or has some admin control of the token contract.\r\n     * \r\n     */\r\n    constructor(address _tokenAddress, address _holderAddress) {\r\n        require(_tokenAddress != address(0), \"Error! Invalid Token Address.\");\r\n        require(_holderAddress != address(0), \"Error! Invalid Holder Address.\");\r\n        require(_tokenAddress != _holderAddress, \"Token Address and Spender Address cann't be the same.\");\r\n        \r\n        token = IERC20(_tokenAddress);\r\n        holder = _holderAddress;\r\n        owner = msg.sender;\r\n        rate = 1000000000000000000; // in WEI\r\n        fees = 0;\r\n        tokenDecimalsValue = 10**token.decimals();\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * Method Name: withdrawETHToOwner, private\r\n     * Withdraw ETH to the owner.\r\n     *\r\n     * Parameters:\r\n     * - `uint256 _amount` -> non zero amount of ETH to be sent to the owner.\r\n     * \r\n     * Returns:\r\n     * Boolean if the transaction was successfull or not.\r\n     * \r\n     */\r\n    function withdrawETHToOwner(uint256 _amount) private returns(bool) {\r\n         payable(owner).transfer(_amount);\r\n         return true;\r\n    }\r\n    \r\n    function getRate() external view returns(uint256) {\r\n        return rate;\r\n    }\r\n    \r\n    function getSelf() external view returns(address) {\r\n        return self;\r\n    }\r\n    \r\n    function getFees() external view returns(uint256) {\r\n        return fees;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * \r\n     * Method Name: currentETHValue, external view\r\n     * Gets the current ETH value of 1 Token.\r\n     *\r\n     * Parameters:\r\n     * - `uint256 _tokenAmount` -> non zero amount of tokens to get its equivilence in ETH.\r\n     * \r\n     * Returns:\r\n     * The amount in ETH.\r\n     * \r\n     */\r\n    function currentETHValue(uint256 _tokenAmount) external view returns(uint256) {\r\n        return _tokenAmount.mul(rate).div(tokenDecimalsValue);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * \r\n     * Method Name: currentTokenValue, external view\r\n     * Gets the current token value of 1 ETH.\r\n     *\r\n     * Parameters:\r\n     * - `uint256 _WEIETHAmount` -> non zero amount of ETH in WEI to get its equivilence in token.\r\n     * \r\n     * Returns:\r\n     * The amount in token.\r\n     * \r\n     */\r\n    function currentTokenValue(uint256 _WEIETHAmount) external view returns(uint256) {\r\n        return _WEIETHAmount.mul(tokenDecimalsValue).div(rate);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * \r\n     * Method Name: _buy, private\r\n     * Payable the sends equivilent tokens calculated based on the rate to the msg.sender.\r\n     *\r\n     * Parameters:\r\n     * - `address _msgSender` -> non zero address of the Message sender.\r\n     * - `uint256 _msgValue` -> non zero amount of ETH in WEI the sender sent.\r\n     * \r\n     * Returns:\r\n     * The total amount of tokens the sender has.\r\n     * \r\n     */\r\n    function _buy(address _msgSender, uint256 _msgValue) private returns(uint256) {\r\n        require(_msgValue > 0, \"Error! Invalid or Insufficient Amount.\");\r\n        require(self != address(0), \"Error! Uninitialized self.\");\r\n        \r\n        uint256 tokenAmount = _msgValue.mul(tokenDecimalsValue).div(rate);\r\n        uint256 tokenAllowance = token.allowance(holder, self);\r\n        \r\n        require(tokenAmount > 0 && tokenAmount <= tokenAllowance, \"Insufficient Liquidity\");\r\n        \r\n        withdrawETHToOwner(_msgValue);\r\n        require(token.transferFrom(holder, _msgSender, tokenAmount), \"Oops... Could not complete Transaction. Please try again later.\");\r\n        return token.balanceOf(_msgSender);\r\n    }\r\n    \r\n    \r\n     /**\r\n     * \r\n     * Method: _buyFor, private\r\n     * Payable the sends equivilent tokens calculated based on the rate to the _receiver set by msg.sender.\r\n     *\r\n     * Parameters:\r\n     * - `address _receiver` -> non zero address of the receiver of the tokens.\r\n     * - `uint256 _msgValue` -> non zero amount of ETH in WEI the sender sent.\r\n     * \r\n     * Returns:\r\n     * The total amount of tokens the _receiver has.\r\n     * \r\n     */\r\n    function _buyFor(address _receiver, uint256 _msgValue) private returns(uint256) {\r\n        require(_msgValue > 0, \"Error! Invalid or Insufficient Amount.\");\r\n        require(self != address(0), \"Error! Uninitialized self.\");\r\n        \r\n        uint256 tokenAmount = _msgValue.mul(tokenDecimalsValue).div(rate);\r\n        uint256 tokenAllowance = token.allowance(holder, self);\r\n        \r\n        require(tokenAmount > 0 && tokenAmount <= tokenAllowance, \"Insufficient Liquidity\");\r\n        \r\n        withdrawETHToOwner(_msgValue);\r\n        require(token.transferFrom(holder, _receiver, tokenAmount), \"Oops... Could not complete Transaction. Please try again later.\");\r\n        return token.balanceOf(_receiver);\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * Method: buy, external payable\r\n     * External implementation of _buy()\r\n     * \r\n     */\r\n    function buy() external payable returns(uint256) {\r\n        return _buy(msg.sender, msg.value);\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * Method: buyFor, external payable\r\n     * External implementation of _buyFor()\r\n     * \r\n     */\r\n    function buyFor(address _receiver) external payable returns(uint256) {\r\n        return _buyFor(_receiver,  msg.value);\r\n    }\r\n    \r\n    /**\r\n     * \r\n     * Fancy names for Web3.js Providers to read method names.\r\n     * \r\n     */\r\n    \r\n    // Buy\r\n    function buyDLB() external payable returns(uint256) {\r\n        return _buy(msg.sender, msg.value);\r\n    }\r\n    \r\n    function buyDlb() external payable returns(uint256) {\r\n        return _buy(msg.sender, msg.value);\r\n    }\r\n    \r\n    function buyDiemlibre() external payable returns(uint256) {\r\n        return _buy(msg.sender, msg.value);\r\n    }\r\n    \r\n    // BuyFor\r\n    function buyDLBFor(address _receiver) external payable returns(uint256) {\r\n        return _buyFor(_receiver,  msg.value);\r\n    }\r\n    \r\n    function buyDlbFor(address _receiver) external payable returns(uint256) {\r\n        return _buyFor(_receiver,  msg.value);\r\n    }\r\n    \r\n    function buyDiemlibreFor(address _receiver) external payable returns(uint256) {\r\n        return _buyFor(_receiver,  msg.value);\r\n    }\r\n    \r\n    \r\n    \r\n    /**\r\n     * \r\n     * Methods to be ran only by the owner\r\n     * \r\n     */\r\n    function getHolder() external view returns(address) {\r\n        require(msg.sender == owner, \"Error! Unauthorized access.\");\r\n        return holder;\r\n    }\r\n    \r\n    function setHolder(address _newHolder) external returns(address) {\r\n        require(msg.sender == owner, \"Error! Unauthorized access.\");\r\n        require(_newHolder != address(0), \"Error! Invalid New Holder Address.\");\r\n        \r\n        holder = _newHolder;\r\n        return holder;\r\n    }\r\n    \r\n    function withdrawETH(address _receiver, uint256 _amount) external returns(bool) {\r\n        require(msg.sender == owner, \"Error! Unauthorized access.\");\r\n        require(_receiver != address(0), \"Error! Invalid Receiver Address.\");\r\n        \r\n        payable(_receiver).transfer(_amount);\r\n        return true;\r\n    }\r\n    \r\n    function setRate(uint256 _newRate) external returns(uint256) {\r\n        require(msg.sender == owner, \"Error! Unauthorized access.\");\r\n        rate = _newRate;\r\n        return rate;\r\n    }\r\n    \r\n    function setFees(uint256 _newFees) external returns(uint256) {\r\n        require(msg.sender == owner, \"Error! Unauthorized access.\");\r\n        fees = _newFees;\r\n        return fees;\r\n    }\r\n    \r\n    function setSelf(address _selfAddress) external returns(address) {\r\n        require(msg.sender == owner, \"Error! Unauthorized access.\");\r\n        require(_selfAddress != address(0), \"Error! Invalid Self Address.\");\r\n        \r\n        self = _selfAddress;\r\n        return self;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_holderAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDLB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"buyDLBFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDiemlibre\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"buyDiemlibreFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyDlb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"buyDlbFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"buyFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"currentETHValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_WEIETHAmount\",\"type\":\"uint256\"}],\"name\":\"currentTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSelf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFees\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newHolder\",\"type\":\"address\"}],\"name\":\"setHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_selfAddress\",\"type\":\"address\"}],\"name\":\"setSelf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BuyDiemlibre","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000087c22615435998d69aca34889d03155b694a94fc000000000000000000000000beff96b1e8ed2a60d97917da1f57e467d4eba63b","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a896b0c98ea0de5b9bdd1400dc73e30d7f6f22bfbfc42692815dfdea46dfbc5a"}]}