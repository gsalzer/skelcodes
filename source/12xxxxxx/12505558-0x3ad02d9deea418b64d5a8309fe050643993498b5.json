{"status":"1","message":"OK","result":[{"SourceCode":"{\"AccessControl.sol\":{\"content\":\"pragma solidity 0.8.1;\\n\\ninterface IERC20Withdraw {\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n}\\n\\ninterface IERC721Withdraw {\\n    function setApprovalForAll(address operator, bool _approved) external;\\n}\\n\\nabstract contract AccessControl {\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    // @dev Address with full contract privileges\\n    address ownerAddress;\\n\\n    // @dev Next owner address\\n    address pendingOwnerAddress;\\n\\n    // @dev Addresses with configuration privileges\\n    mapping (address =\\u003e bool) operatorAddress;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == ownerAddress, \\\"Access denied\\\");\\n        _;\\n    }\\n\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == pendingOwnerAddress, \\\"Access denied\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(operatorAddress[msg.sender] || msg.sender == ownerAddress, \\\"Access denied\\\");\\n        _;\\n    }\\n\\n    constructor () {\\n        ownerAddress = msg.sender;\\n    }\\n\\n    function getOwner() external view returns (address) {\\n        return ownerAddress;\\n    }\\n\\n    function setOwner(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0));\\n        pendingOwnerAddress = _newOwner;\\n    }\\n\\n    function getPendingOwner() external view returns (address) {\\n        return pendingOwnerAddress;\\n    }\\n\\n    function claimOwnership() external onlyPendingOwner {\\n        emit OwnershipTransferred(ownerAddress, pendingOwnerAddress);\\n        ownerAddress = pendingOwnerAddress;\\n        pendingOwnerAddress = address(0);\\n    }\\n\\n    function isOperator(address _addr) public view returns (bool) {\\n        return operatorAddress[_addr];\\n    }\\n\\n    function setOperator(address _newOperator) public onlyOwner {\\n        require(_newOperator != address(0));\\n        operatorAddress[_newOperator] = true;\\n    }\\n\\n    function removeOperator(address _operator) public onlyOwner {\\n        delete(operatorAddress[_operator]);\\n    }\\n\\n    // @dev The balance transfer from CutieCore contract to project owners\\n    function withdraw(address payable _receiver) external onlyOwner {\\n        if (address(this).balance \\u003e 0) {\\n            _receiver.transfer(address(this).balance);\\n        }\\n    }\\n\\n    // @dev Allow to withdraw ERC20 tokens from contract itself\\n    function withdrawERC20(IERC20Withdraw _tokenContract) external onlyOwner {\\n        uint256 balance = _tokenContract.balanceOf(address(this));\\n        if (balance \\u003e 0) {\\n            _tokenContract.transfer(msg.sender, balance);\\n        }\\n    }\\n\\n    // @dev Allow to withdraw ERC721 tokens from contract itself\\n    function approveERC721(IERC721Withdraw _tokenContract) external onlyOwner {\\n        _tokenContract.setApprovalForAll(msg.sender, true);\\n    }\\n\\n}\\n\"},\"BCUGPriceOracle.sol\":{\"content\":\"pragma solidity 0.8.1;\\n\\nimport \\\"./AccessControl.sol\\\";\\n\\ninterface IUniswapV2Pair {\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n}\\n\\n/**\\n  ETH/BCUG price oracle designed for TokenRegistry and presale system.\\n  Function ETHPrice returns how many BCUG token can be bought by 1 ETH\\n  1 ETH = X BCUG\\n**/\\ncontract BCUGPriceOracle is AccessControl {\\n\\n    address public bcug;\\n    IUniswapV2Pair public pool;\\n\\n    uint8 private slot;\\n\\n    constructor(address _bcug, IUniswapV2Pair _pool) {\\n        bcug = _bcug;\\n        setPool(_pool);\\n    }\\n\\n    function setPool(IUniswapV2Pair _pool) public onlyOwner {\\n        require(_pool.token0() == bcug || _pool.token1() == bcug, \\\"Wrong pool for BCUG provided\\\");\\n        pool = _pool;\\n        slot = _pool.token0() == bcug ? 0 : 1;\\n    }\\n\\n    // @dev returns amount of token0 needed to buy token1\\n    function ETHPrice() external view returns (uint) {\\n        (uint Res0, uint Res1) = getReserves();\\n        uint res0 = Res0 * 1 ether; // * 10 ^ 18\\n        return res0 / Res1;\\n    }\\n\\n    function getReserves() private view returns (uint Res0, uint Res1) {\\n        if (slot == 0) {\\n            (Res0, Res1,) = pool.getReserves();\\n        } else {\\n            (Res1, Res0,) = pool.getReserves();\\n        }\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bcug\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"_pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETHPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Withdraw\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"approveERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bcug\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Withdraw\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BCUGPriceOracle","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000014da7b27b2e0fedefe0a664118b0c9bc68e2e9af0000000000000000000000008382aeab50c5d60e06cf3b68a51cd88c39a061c6","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://34134aef21efa90df47fa451ac9e98a2399648035c3ba263940907294453d153"}]}