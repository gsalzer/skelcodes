{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.5.9;\r\n\r\n// ----------------------------------------------------------------------------\r\n// 'SafeBank' Staking smart contract\r\n// ----------------------------------------------------------------------------\r\n\r\n// ----------------------------------------------------------------------------\r\n// SafeMath library\r\n// ----------------------------------------------------------------------------\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n    \r\n    function ceil(uint a, uint m) internal pure returns (uint r) {\r\n        return (a + m - 1) / m * m;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address payable public owner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnershipTransferred(msg.sender, _newOwner);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\ninterface sBANK {\r\n    function balanceOf(address _owner) view external  returns (uint256 balance);\r\n    // function transfer(address _to, uint256 _value) public  returns (bool success);\r\n    // function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success);\r\n    // function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) view external  returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    // function transfer(address _to, uint256 _amount) external  returns (bool success);\r\n    function transfer(address _to, uint256 _amount) external  returns (bool success);\r\n    function transferFrom(address _from,address _to,uint256 _amount) external  returns (bool success);\r\n    function approve(address _to, uint256 _amount) external  returns (bool success);\r\n    // function balanceOf(address _owner) external view returns (uint256 balance);\r\n    function _mint(address account, uint256 amount) external ;\r\n    \r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC20 Token, with the addition of symbol, name and decimals and assisted\r\n// token transfers\r\n// ----------------------------------------------------------------------------\r\ncontract Stake is Owned {\r\n    using SafeMath for uint256;\r\n    address contractAddress;\r\n    uint256 public WeekRewardPercent = 200;\r\n    uint256 public TotalStakedOMB = 0;\r\n    uint256 StakingFee = 10; \r\n    uint256 UnstakingFee = 10; \r\n    uint256 private TeamFeesCollector = 0;\r\n    uint256 private FeesCollectedForJustwap = 0;\r\n    sBANK public tokenInstance;\r\n    sBANK public rewardTkn;\r\n    struct USER{\r\n        uint256 stakedAmount;\r\n        uint256 reward;\r\n        uint256 creationTime; \r\n        uint256 TotalOMBRewarded;\r\n    }\r\n    \r\n    mapping(address => USER) public stakers;\r\n             \r\n    mapping(address=>uint256) public amounts;\r\n    \r\n    \r\n    event STAKED(address staker, uint256 tokens, uint256 StakingFee);\r\n    event UNSTAKED(address staker, uint256 tokens, uint256 UnstakingFee);\r\n    event CLAIMEDREWARD(address staker, uint256 reward);\r\n    event PERCENTCHANGED(address operator, uint256 percent);\r\n    event FkTake(uint256 amount);\r\n    event JkTake(uint256 amount);\r\n    constructor(address payable tokenAddress, address payable rewardToken)  public{\r\n         tokenInstance=sBANK(tokenAddress);\r\n         rewardTkn=sBANK(rewardToken);\r\n         contractAddress=tokenAddress;\r\n        \r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Token holders can stake their tokens using this function\r\n    // @param tokens number of tokens to stake\r\n    // ------------------------------------------------------------------------\r\n    function STAKE(uint256 tokens) external {\r\n        require(tokenInstance.transferFrom(msg.sender, address(this), tokens), \"Tokens cannot be transferred from user account\");\r\n        \r\n        uint256 _stakingFee = 0;\r\n        if(TotalStakedOMB > 0)\r\n        _stakingFee= (onePercentofTokens(tokens).mul(StakingFee)).div(10); \r\n        \r\n        \r\n                if(amounts[msg.sender]>0)\r\n        {\r\n           uint256 time = now - stakers[msg.sender].creationTime; \r\n           uint256 daysCount = time.div(86400);\r\n            if(daysCount>0)\r\n            {\r\n                    uint256  owing =  (amounts[msg.sender]).mul(daysCount);\r\n                    stakers[msg.sender].reward = (stakers[msg.sender].reward).add(owing);\r\n            }\r\n        }\r\n        \r\n        stakers[msg.sender].stakedAmount = (tokens.sub(_stakingFee)).add(stakers[msg.sender].stakedAmount);\r\n        stakers[msg.sender].creationTime = now;    \r\n        TotalStakedOMB = TotalStakedOMB.add(tokens.sub(_stakingFee));\r\n        uint256 percal = calPercentofTokens(stakers[msg.sender].stakedAmount,WeekRewardPercent);\r\n        amounts[msg.sender] = percal;\r\n        \r\n        TeamFeesCollector = TeamFeesCollector.add(_stakingFee);\r\n        \r\n        emit STAKED(msg.sender, tokens.sub(_stakingFee), _stakingFee);\r\n    \r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Stakers can claim their pending rewards using this function\r\n    // ------------------------------------------------------------------------\r\n    function CLAIMREWARD() public {\r\n\r\n        \r\n \r\n           uint256 time = now - stakers[msg.sender].creationTime; \r\n           uint256 daysCount = time.div(86400);\r\n           \r\n           if(daysCount > 0)\r\n           {\r\n                uint256  owing=0;\r\n               if(amounts[msg.sender]>0)\r\n               {\r\n                   \r\n                   uint a = daysCount * 86400; \r\n                   a  = time.sub(a);\r\n                   \r\n                   \r\n                   owing =  (amounts[msg.sender]).mul(daysCount);\r\n                   if(a!=0)                       \r\n                    owing = (owing.mul(a)).div(86400);\r\n                   if(stakers[msg.sender].reward >0)\r\n                   {\r\n                \r\n                    owing = owing.add(stakers[msg.sender].reward);\r\n                   }      \r\n                   \r\n               }\r\n               else\r\n               {\r\n                   if(stakers[msg.sender].reward > 0)\r\n                   {\r\n                          owing = stakers[msg.sender].reward;\r\n                   }else{\r\n                       revert(\"No reward\");\r\n                   }\r\n               }     \r\n        \r\n            require(rewardTkn.transfer(msg.sender,owing), \"ERROR: error in sending reward from contract\");\r\n            emit CLAIMEDREWARD(msg.sender, owing);\r\n            stakers[msg.sender].TotalOMBRewarded = (stakers[msg.sender].TotalOMBRewarded).add(owing);\r\n            stakers[msg.sender].creationTime = now;\r\n            stakers[msg.sender].reward = 0;\r\n            \r\n           }else\r\n           {\r\n                uint256  owing=0;\r\n               if(amounts[msg.sender]>0)\r\n               {\r\n                    \r\n                     owing =  ((amounts[msg.sender]).mul(time)).div(time);\r\n                   if(stakers[msg.sender].reward >0)\r\n                   {\r\n                \r\n                    owing = owing.add(stakers[msg.sender].reward);\r\n                   }      \r\n                   \r\n               }\r\n               else\r\n               {\r\n                   if(stakers[msg.sender].reward > 0)\r\n                   {\r\n                          owing = stakers[msg.sender].reward;\r\n                   }else{\r\n                       revert(\"No reward\");\r\n                   }\r\n               }  \r\n              \r\n            require(rewardTkn.transfer(msg.sender,owing), \"ERROR: error in sending reward from contract\");\r\n            emit CLAIMEDREWARD(msg.sender, owing);\r\n            stakers[msg.sender].TotalOMBRewarded = (stakers[msg.sender].TotalOMBRewarded).add(owing);\r\n            stakers[msg.sender].creationTime = now;\r\n            stakers[msg.sender].reward = 0;\r\n               \r\n           }\r\n           \r\n    }\r\n\r\n    function calculateReward(address user) public view returns(uint256 result){\r\n        \r\n        uint256 time = block.timestamp - stakers[user].creationTime; \r\n        uint256 daysCount = time.div(86400);\r\n           \r\n            if(daysCount > 0)\r\n           {\r\n               \r\n               \r\n               uint256  owing=0;\r\n               if(amounts[user]>0)\r\n               {\r\n                   \r\n                   uint256 a = daysCount * 86400; \r\n                   a  = time.sub(a);\r\n                   \r\n    \r\n                   owing =  (amounts[user]).mul(daysCount);\r\n                   if(a!=0)                       \r\n                    owing = (owing.mul(a)).div(86400);\r\n                   if(stakers[user].reward >0)\r\n                   {\r\n                \r\n                    owing = owing.add(stakers[user].reward);\r\n                   }      \r\n                   \r\n               }\r\n               else\r\n               {\r\n                   if(stakers[user].reward > 0)\r\n                   {\r\n                          owing = stakers[user].reward;\r\n                   }else{\r\n                       owing = 0;\r\n                   }\r\n               }     \r\n               \r\n               \r\n               \r\n               \r\n               \r\n                return owing;\r\n            \r\n           }\r\n           else\r\n           {\r\n               uint256  owing=0;\r\n               if(amounts[user]>0)\r\n               {\r\n                    \r\n                     owing =  ((amounts[user]).mul(time)).div(86400);\r\n                   if(stakers[user].reward >0)\r\n                   {\r\n                \r\n                    owing = owing.add(stakers[user].reward);\r\n                   }      \r\n                   \r\n               }\r\n               else\r\n               {\r\n                   if(stakers[user].reward > 0)\r\n                   {\r\n                          owing = stakers[user].reward;\r\n                   }else{\r\n                       owing = 0;\r\n                   }\r\n               }  \r\n               \r\n               \r\n          return owing;\r\n               \r\n           }\r\n           \r\n            \r\n    }\r\n    \r\n    function WITHDRAW(uint256 tokens) external {\r\n        \r\n        require(stakers[msg.sender].stakedAmount >= tokens && tokens > 0, \"Invalid token amount to withdraw\");\r\n        \r\n        uint256 _unstakingFee = (onePercentofTokens(tokens).mul(UnstakingFee)).div(10);\r\n        \r\n       \r\n                if(amounts[msg.sender]>0)\r\n        {\r\n           uint256 time = now - stakers[msg.sender].creationTime; \r\n           uint256 daysCount = time.div(86400);\r\n            if(daysCount>0)\r\n            {\r\n                    uint256  owing =  (amounts[msg.sender]).mul(daysCount);\r\n                    stakers[msg.sender].reward = (stakers[msg.sender].reward).add(owing);\r\n            }\r\n        }\r\n       \r\n       \r\n                \r\n        require(tokenInstance.transfer(msg.sender, tokens.sub(_unstakingFee)), \"Error in un-staking tokens\");\r\n        \r\n        stakers[msg.sender].stakedAmount = stakers[msg.sender].stakedAmount.sub(tokens);\r\n        \r\n        if(stakers[msg.sender].stakedAmount == 0)\r\n        {\r\n            stakers[msg.sender].creationTime = 0;\r\n            amounts[msg.sender] = 0;\r\n        }else{\r\n            \r\n            uint256 percal = calPercentofTokens(stakers[msg.sender].stakedAmount,WeekRewardPercent);\r\n             amounts[msg.sender] = percal;\r\n           \r\n        }\r\n        \r\n        TotalStakedOMB = TotalStakedOMB.sub(tokens);\r\n        FeesCollectedForJustwap =FeesCollectedForJustwap.add(_unstakingFee); \r\n        \r\n        emit UNSTAKED(msg.sender, tokens.sub(_unstakingFee), _unstakingFee);\r\n    }\r\n    // ------------------------------------------------------------------------\r\n    // Private function to calculate 1% percentage\r\n    // ------------------------------------------------------------------------\r\n    \r\n    function onePercentofTokens(uint256 _tokens) private pure returns (uint256){\r\n        uint256 roundValue = _tokens.ceil(100);\r\n        uint onePercentofToken = roundValue.mul(100).div(100 * 10**uint(2));\r\n        return onePercentofToken;\r\n    }\r\n    \r\n    function calPercentofTokens(uint256 _tokens, uint256 cust) private pure returns (uint256){\r\n        uint256 roundValue = _tokens.ceil(100);\r\n        uint256 custPercentofTokens = roundValue.mul(cust).div(100 * 10**uint(2));\r\n        return custPercentofTokens;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the number of tokens staked by a staker\r\n    // param _staker the address of the staker\r\n    // ------------------------------------------------------------------------\r\n    function yourStakedOMB(address staker) external view returns(uint256 stakedOMB){\r\n        return stakers[staker].stakedAmount;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Get the SNTM balance of the token holder\r\n    // @param user the address of the token holder\r\n    // ------------------------------------------------------------------------\r\n    function yourOMBBalance(address user) external view returns(uint256 OMBBalance){\r\n        return tokenInstance.balanceOf(user);\r\n    }\r\n    \r\n    function setPercent(uint256 percent) public onlyOwner {\r\n        \r\n        if(percent >= 1)\r\n        {\r\n         WeekRewardPercent = percent;    \r\n         emit PERCENTCHANGED(msg.sender, percent);\r\n        }\r\n         \r\n    }\r\n\r\n    function OwnerTeamFeesCollectorRead() external view returns(uint256 jKeeper) {\r\n        return TeamFeesCollector;\r\n    }\r\n    \r\n    function OwnerFeesCollectedForJustwapRead() external view returns(uint256 Fkeeper) {\r\n        return FeesCollectedForJustwap;\r\n    }\r\n    \r\n    function OwnerFKtake() external onlyOwner{\r\n        \r\n      address payable r=owner;   \r\n      r.transfer(TeamFeesCollector);\r\n      TeamFeesCollector = 0;\r\n      emit FkTake(TeamFeesCollector);\r\n    }\r\n\r\n    function OwnerJustSwaptake() external onlyOwner{\r\n        \r\n      address payable r=owner;   \r\n      r.transfer(FeesCollectedForJustwap);\r\n      FeesCollectedForJustwap = 0;\r\n      emit JkTake(FeesCollectedForJustwap);\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"CLAIMEDREWARD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FkTake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"JkTake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"PERCENTCHANGED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"StakingFee\",\"type\":\"uint256\"}],\"name\":\"STAKED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"UnstakingFee\",\"type\":\"uint256\"}],\"name\":\"UNSTAKED\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[],\"name\":\"CLAIMREWARD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"OwnerFKtake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OwnerFeesCollectedForJustwapRead\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"Fkeeper\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"OwnerJustSwaptake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OwnerTeamFeesCollectorRead\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"jKeeper\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"STAKE\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TotalStakedOMB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"WITHDRAW\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WeekRewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rewardTkn\",\"outputs\":[{\"internalType\":\"contract sBANK\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TotalOMBRewarded\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenInstance\",\"outputs\":[{\"internalType\":\"contract sBANK\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"yourOMBBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"OMBBalance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"yourStakedOMB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedOMB\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Stake","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000e3b2d2eae80cd8eadb72bf3f14e23c0a621b4f0500000000000000000000000043acedd39ba4b0bfccd92897fce617fb90a971d8","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"bzzr://07cd01e38173a795dcb257824b9268d8fd562259bfb50a2df2424d54b26419cf"}]}