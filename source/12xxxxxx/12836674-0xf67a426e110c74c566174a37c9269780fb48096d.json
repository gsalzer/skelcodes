{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPLv3\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        \r\n        \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        \r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IPnL {\r\n    function calcPnL() external view returns (uint256, uint256);\r\n\r\n    function increaseGTokenLastAmount(bool pwrd, uint256 dollarAmount) external;\r\n\r\n    function decreaseGTokenLastAmount(\r\n        bool pwrd,\r\n        uint256 dollarAmount,\r\n        uint256 bonus\r\n    ) external;\r\n\r\n    function lastGvtAssets() external view returns (uint256);\r\n\r\n    function lastPwrdAssets() external view returns (uint256);\r\n\r\n    function utilisationRatio() external view returns (uint256);\r\n\r\n    function emergencyPnL() external;\r\n\r\n    function recover() external;\r\n\r\n    function distributeStrategyGainLoss(\r\n        uint256 gain,\r\n        uint256 loss,\r\n        address reward\r\n    ) external;\r\n\r\n    function distributePriceChange(uint256 currentTotalAssets) external;\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; \r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IController {\r\n    function stablecoins() external view returns (address[3] memory);\r\n\r\n    function vaults() external view returns (address[3] memory);\r\n\r\n    function underlyingVaults(uint256 i) external view returns (address vault);\r\n\r\n    function curveVault() external view returns (address);\r\n\r\n    function pnl() external view returns (address);\r\n\r\n    function insurance() external view returns (address);\r\n\r\n    function lifeGuard() external view returns (address);\r\n\r\n    function buoy() external view returns (address);\r\n\r\n    function reward() external view returns (address);\r\n\r\n    function isValidBigFish(\r\n        bool pwrd,\r\n        bool deposit,\r\n        uint256 amount\r\n    ) external view returns (bool);\r\n\r\n    function withdrawHandler() external view returns (address);\r\n\r\n    function emergencyHandler() external view returns (address);\r\n\r\n    function depositHandler() external view returns (address);\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function gTokenTotalAssets() external view returns (uint256);\r\n\r\n    function eoaOnly(address sender) external;\r\n\r\n    function getSkimPercent() external view returns (uint256);\r\n\r\n    function gToken(bool _pwrd) external view returns (address);\r\n\r\n    function emergencyState() external view returns (bool);\r\n\r\n    function deadCoin() external view returns (uint256);\r\n\r\n    function distributeStrategyGainLoss(uint256 gain, uint256 loss) external;\r\n\r\n    function burnGToken(\r\n        bool pwrd,\r\n        bool all,\r\n        address account,\r\n        uint256 amount,\r\n        uint256 bonus\r\n    ) external;\r\n\r\n    function mintGToken(\r\n        bool pwrd,\r\n        address account,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function getUserAssets(bool pwrd, address account) external view returns (uint256 deductUsd);\r\n\r\n    function referrals(address account) external view returns (address);\r\n\r\n    function addReferral(address account, address referral) external;\r\n\r\n    function getStrategiesTargetRatio() external view returns (uint256[] memory);\r\n\r\n    function withdrawalFee(bool pwrd) external view returns (uint256);\r\n\r\n    function validGTokenDecrease(uint256 amount) external view returns (bool);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IPausable {\r\n    function paused() external view returns (bool);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ncontract Controllable is Ownable {\r\n    address public controller;\r\n\r\n    event ChangeController(address indexed oldController, address indexed newController);\r\n\r\n    modifier whenNotPaused() {\r\n        require(!_pausable().paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(_pausable().paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    function ctrlPaused() public view returns (bool) {\r\n        return _pausable().paused();\r\n    }\r\n\r\n    function setController(address newController) external onlyOwner {\r\n        require(newController != address(0), \"setController: !0x\");\r\n        address oldController = controller;\r\n        controller = newController;\r\n        emit ChangeController(oldController, newController);\r\n    }\r\n\r\n    function _controller() internal view returns (IController) {\r\n        require(controller != address(0), \"Controller not set\");\r\n        return IController(controller);\r\n    }\r\n\r\n    function _pausable() internal view returns (IPausable) {\r\n        require(controller != address(0), \"Controller not set\");\r\n        return IPausable(controller);\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ncontract Constants {\r\n    uint8 public constant N_COINS = 3;\r\n    uint8 public constant DEFAULT_DECIMALS = 18; \r\n    uint256 public constant DEFAULT_DECIMALS_FACTOR = uint256(10)**DEFAULT_DECIMALS;\r\n    uint8 public constant CHAINLINK_PRICE_DECIMALS = 8;\r\n    uint256 public constant CHAINLINK_PRICE_DECIMAL_FACTOR = uint256(10)**CHAINLINK_PRICE_DECIMALS;\r\n    uint8 public constant PERCENTAGE_DECIMALS = 4;\r\n    uint256 public constant PERCENTAGE_DECIMAL_FACTOR = uint256(10)**PERCENTAGE_DECIMALS;\r\n    uint256 public constant CURVE_RATIO_DECIMALS = 6;\r\n    uint256 public constant CURVE_RATIO_DECIMALS_FACTOR = uint256(10)**CURVE_RATIO_DECIMALS;\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IToken {\r\n    function factor() external view returns (uint256);\r\n\r\n    function factor(uint256 totalAssets) external view returns (uint256);\r\n\r\n    function mint(\r\n        address account,\r\n        uint256 _factor,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function burn(\r\n        address account,\r\n        uint256 _factor,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function burnAll(address account) external;\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function getPricePerShare() external view returns (uint256);\r\n\r\n    function getShareAssets(uint256 shares) external view returns (uint256);\r\n\r\n    function getAssets(address account) external view returns (uint256);\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ninterface IVault {\r\n    function withdraw(uint256 amount) external;\r\n\r\n    function withdraw(uint256 amount, address recipient) external;\r\n\r\n    function withdrawByStrategyOrder(\r\n        uint256 amount,\r\n        address recipient,\r\n        bool reversed\r\n    ) external;\r\n\r\n    function withdrawByStrategyIndex(\r\n        uint256 amount,\r\n        address recipient,\r\n        uint256 strategyIndex\r\n    ) external;\r\n\r\n    function deposit(uint256 amount) external;\r\n\r\n    function updateStrategyRatio(uint256[] calldata strategyRetios) external;\r\n\r\n    function totalAssets() external view returns (uint256);\r\n\r\n    function getStrategiesLength() external view returns (uint256);\r\n\r\n    function strategyHarvestTrigger(uint256 index, uint256 callCost) external view returns (bool);\r\n\r\n    function strategyHarvest(uint256 index) external returns (bool);\r\n\r\n    function getStrategyAssets(uint256 index) external view returns (uint256);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function vault() external view returns (address);\r\n\r\n    function investTrigger() external view returns (bool);\r\n\r\n    function invest() external;\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ncontract FixedStablecoins is Constants {\r\n    address public immutable DAI; \r\n    address public immutable USDC; \r\n    address public immutable USDT; \r\n\r\n    uint256 public immutable DAI_DECIMALS; \r\n    uint256 public immutable USDC_DECIMALS; \r\n    uint256 public immutable USDT_DECIMALS; \r\n\r\n    constructor(address[N_COINS] memory _tokens, uint256[N_COINS] memory _decimals) public {\r\n        DAI = _tokens[0];\r\n        USDC = _tokens[1];\r\n        USDT = _tokens[2];\r\n        DAI_DECIMALS = _decimals[0];\r\n        USDC_DECIMALS = _decimals[1];\r\n        USDT_DECIMALS = _decimals[2];\r\n    }\r\n\r\n    function underlyingTokens() internal view returns (address[N_COINS] memory tokens) {\r\n        tokens[0] = DAI;\r\n        tokens[1] = USDC;\r\n        tokens[2] = USDT;\r\n    }\r\n\r\n    function getToken(uint256 index) internal view returns (address) {\r\n        if (index == 0) {\r\n            return DAI;\r\n        } else if (index == 1) {\r\n            return USDC;\r\n        } else {\r\n            return USDT;\r\n        }\r\n    }\r\n\r\n    function decimals() internal view returns (uint256[N_COINS] memory _decimals) {\r\n        _decimals[0] = DAI_DECIMALS;\r\n        _decimals[1] = USDC_DECIMALS;\r\n        _decimals[2] = USDT_DECIMALS;\r\n    }\r\n\r\n    function getDecimal(uint256 index) internal view returns (uint256) {\r\n        if (index == 0) {\r\n            return DAI_DECIMALS;\r\n        } else if (index == 1) {\r\n            return USDC_DECIMALS;\r\n        } else {\r\n            return USDT_DECIMALS;\r\n        }\r\n    }\r\n}\r\n\r\ncontract FixedGTokens {\r\n    IToken public immutable pwrd;\r\n    IToken public immutable gvt;\r\n\r\n    constructor(address _pwrd, address _gvt) public {\r\n        pwrd = IToken(_pwrd);\r\n        gvt = IToken(_gvt);\r\n    }\r\n\r\n    function gTokens(bool _pwrd) internal view returns (IToken) {\r\n        if (_pwrd) {\r\n            return pwrd;\r\n        } else {\r\n            return gvt;\r\n        }\r\n    }\r\n}\r\n\r\ncontract FixedVaults is Constants {\r\n    address public immutable DAI_VAULT;\r\n    address public immutable USDC_VAULT;\r\n    address public immutable USDT_VAULT;\r\n\r\n    constructor(address[N_COINS] memory _vaults) public {\r\n        DAI_VAULT = _vaults[0];\r\n        USDC_VAULT = _vaults[1];\r\n        USDT_VAULT = _vaults[2];\r\n    }\r\n\r\n    function getVault(uint256 index) internal view returns (address) {\r\n        if (index == 0) {\r\n            return DAI_VAULT;\r\n        } else if (index == 1) {\r\n            return USDC_VAULT;\r\n        } else {\r\n            return USDT_VAULT;\r\n        }\r\n    }\r\n\r\n    function vaults() internal view returns (address[N_COINS] memory _vaults) {\r\n        _vaults[0] = DAI_VAULT;\r\n        _vaults[1] = USDC_VAULT;\r\n        _vaults[2] = USDT_VAULT;\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\ncontract PnL is Controllable, Constants, FixedGTokens, IPnL {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public override lastGvtAssets;\r\n    uint256 public override lastPwrdAssets;\r\n    bool public rebase = true;\r\n\r\n    uint256 public performanceFee; \r\n\r\n    event LogRebaseSwitch(bool status);\r\n    event LogNewPerfromanceFee(uint256 fee);\r\n    event LogNewGtokenChange(bool pwrd, int256 change);\r\n    event LogPnLExecution(\r\n        uint256 deductedAssets,\r\n        int256 totalPnL,\r\n        int256 investPnL,\r\n        int256 pricePnL,\r\n        uint256 withdrawalBonus,\r\n        uint256 performanceBonus,\r\n        uint256 beforeGvtAssets,\r\n        uint256 beforePwrdAssets,\r\n        uint256 afterGvtAssets,\r\n        uint256 afterPwrdAssets\r\n    );\r\n\r\n    constructor(\r\n        address pwrd,\r\n        address gvt,\r\n        uint256 pwrdAssets,\r\n        uint256 gvtAssets\r\n    ) public FixedGTokens(pwrd, gvt) {\r\n        lastPwrdAssets = pwrdAssets;\r\n        lastGvtAssets = gvtAssets;\r\n    }\r\n\r\n    function setRebase(bool _rebase) external onlyOwner {\r\n        rebase = _rebase;\r\n        emit LogRebaseSwitch(_rebase);\r\n    }\r\n\r\n    function setPerformanceFee(uint256 _performanceFee) external onlyOwner {\r\n        performanceFee = _performanceFee;\r\n        emit LogNewPerfromanceFee(_performanceFee);\r\n    }\r\n\r\n    function increaseGTokenLastAmount(bool pwrd, uint256 dollarAmount) external override {\r\n        require(msg.sender == controller, \"increaseGTokenLastAmount: !controller\");\r\n        if (!pwrd) {\r\n            lastGvtAssets = lastGvtAssets.add(dollarAmount);\r\n        } else {\r\n            lastPwrdAssets = lastPwrdAssets.add(dollarAmount);\r\n        }\r\n        emit LogNewGtokenChange(pwrd, int256(dollarAmount));\r\n    }\r\n\r\n    function decreaseGTokenLastAmount(\r\n        bool pwrd,\r\n        uint256 dollarAmount,\r\n        uint256 bonus\r\n    ) external override {\r\n        require(msg.sender == controller, \"decreaseGTokenLastAmount: !controller\");\r\n        uint256 lastGA = lastGvtAssets;\r\n        uint256 lastPA = lastPwrdAssets;\r\n        if (!pwrd) {\r\n            lastGA = dollarAmount > lastGA ? 0 : lastGA.sub(dollarAmount);\r\n        } else {\r\n            lastPA = dollarAmount > lastPA ? 0 : lastPA.sub(dollarAmount);\r\n        }\r\n        if (bonus > 0) {\r\n            uint256 preGABeforeBonus = lastGA;\r\n            uint256 prePABeforeBonus = lastPA;\r\n            uint256 preTABeforeBonus = preGABeforeBonus.add(prePABeforeBonus);\r\n            if (rebase) {\r\n                lastGA = preGABeforeBonus.add(bonus.mul(preGABeforeBonus).div(preTABeforeBonus));\r\n                lastPA = prePABeforeBonus.add(bonus.mul(prePABeforeBonus).div(preTABeforeBonus));\r\n            } else {\r\n                lastGA = preGABeforeBonus.add(bonus);\r\n            }\r\n            emit LogPnLExecution(0, int256(bonus), 0, 0, bonus, 0, preGABeforeBonus, prePABeforeBonus, lastGA, lastPA);\r\n        }\r\n\r\n        lastGvtAssets = lastGA;\r\n        lastPwrdAssets = lastPA;\r\n        emit LogNewGtokenChange(pwrd, -int256(dollarAmount));\r\n    }\r\n\r\n    function calcPnL() external view override returns (uint256, uint256) {\r\n        return (lastGvtAssets, lastPwrdAssets);\r\n    }\r\n\r\n    function utilisationRatio() external view override returns (uint256) {\r\n        return lastGvtAssets != 0 ? lastPwrdAssets.mul(PERCENTAGE_DECIMAL_FACTOR).div(lastGvtAssets) : 0;\r\n    }\r\n\r\n    function emergencyPnL() external override {\r\n        require(msg.sender == controller, \"emergencyPnL: !controller\");\r\n        forceDistribute();\r\n    }\r\n\r\n    function recover() external override {\r\n        require(msg.sender == controller, \"recover: !controller\");\r\n        forceDistribute();\r\n    }\r\n\r\n    function handleInvestGain(\r\n        uint256 gvtAssets,\r\n        uint256 pwrdAssets,\r\n        uint256 profit,\r\n        address reward\r\n    )\r\n        private\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 performanceBonus;\r\n        if (performanceFee > 0 && reward != address(0)) {\r\n            performanceBonus = profit.mul(performanceFee).div(PERCENTAGE_DECIMAL_FACTOR);\r\n            profit = profit.sub(performanceBonus);\r\n        }\r\n        if (rebase) {\r\n            uint256 totalAssets = gvtAssets.add(pwrdAssets);\r\n            uint256 gvtProfit = profit.mul(gvtAssets).div(totalAssets);\r\n            uint256 pwrdProfit = profit.mul(pwrdAssets).div(totalAssets);\r\n\r\n            uint256 factor = pwrdAssets.mul(10000).div(gvtAssets);\r\n            if (factor > 10000) factor = 10000;\r\n            if (factor < 8000) {\r\n                factor = factor.mul(3).div(8).add(3000);\r\n            } else {\r\n                factor = factor.sub(8000).mul(2).add(6000);\r\n            }\r\n\r\n            uint256 portionFromPwrdProfit = pwrdProfit.mul(factor).div(10000);\r\n            gvtAssets = gvtAssets.add(gvtProfit.add(portionFromPwrdProfit));\r\n            pwrdAssets = pwrdAssets.add(pwrdProfit.sub(portionFromPwrdProfit));\r\n        } else {\r\n            gvtAssets = gvtAssets.add(profit);\r\n        }\r\n        return (gvtAssets, pwrdAssets, performanceBonus);\r\n    }\r\n\r\n    function handleLoss(\r\n        uint256 gvtAssets,\r\n        uint256 pwrdAssets,\r\n        uint256 loss\r\n    ) private pure returns (uint256, uint256) {\r\n        uint256 maxGvtLoss = gvtAssets.sub(DEFAULT_DECIMALS_FACTOR);\r\n        if (loss > maxGvtLoss) {\r\n            gvtAssets = DEFAULT_DECIMALS_FACTOR;\r\n            pwrdAssets = pwrdAssets.sub(loss.sub(maxGvtLoss));\r\n        } else {\r\n            gvtAssets = gvtAssets - loss;\r\n        }\r\n        return (gvtAssets, pwrdAssets);\r\n    }\r\n\r\n    function forceDistribute() private {\r\n        uint256 total = _controller().totalAssets();\r\n\r\n        if (total > lastPwrdAssets.add(DEFAULT_DECIMALS_FACTOR)) {\r\n            lastGvtAssets = total - lastPwrdAssets;\r\n        } else {\r\n            lastGvtAssets = DEFAULT_DECIMALS_FACTOR;\r\n            lastPwrdAssets = total.sub(DEFAULT_DECIMALS_FACTOR);\r\n        }\r\n    }\r\n\r\n    function distributeStrategyGainLoss(\r\n        uint256 gain,\r\n        uint256 loss,\r\n        address reward\r\n    ) external override {\r\n        require(msg.sender == controller, \"!Controller\");\r\n        uint256 lastGA = lastGvtAssets;\r\n        uint256 lastPA = lastPwrdAssets;\r\n        uint256 performanceBonus;\r\n        uint256 gvtAssets;\r\n        uint256 pwrdAssets;\r\n        int256 investPnL;\r\n        if (gain > 0) {\r\n            (gvtAssets, pwrdAssets, performanceBonus) = handleInvestGain(lastGA, lastPA, gain, reward);\r\n            if (performanceBonus > 0) {\r\n                gvt.mint(reward, gvt.factor(gvtAssets), performanceBonus);\r\n                gvtAssets = gvtAssets.add(performanceBonus);\r\n            }\r\n\r\n            lastGvtAssets = gvtAssets;\r\n            lastPwrdAssets = pwrdAssets;\r\n            investPnL = int256(gain);\r\n        } else if (loss > 0) {\r\n            (lastGvtAssets, lastPwrdAssets) = handleLoss(lastGA, lastPA, loss);\r\n            investPnL = -int256(loss);\r\n        }\r\n\r\n        emit LogPnLExecution(\r\n            0,\r\n            investPnL,\r\n            investPnL,\r\n            0,\r\n            0,\r\n            performanceBonus,\r\n            lastGA,\r\n            lastPA,\r\n            lastGvtAssets,\r\n            lastPwrdAssets\r\n        );\r\n    }\r\n\r\n    function distributePriceChange(uint256 currentTotalAssets) external override {\r\n        require(msg.sender == controller, \"!Controller\");\r\n        uint256 gvtAssets = lastGvtAssets;\r\n        uint256 pwrdAssets = lastPwrdAssets;\r\n        uint256 totalAssets = gvtAssets.add(pwrdAssets);\r\n\r\n        if (currentTotalAssets > totalAssets) {\r\n            lastGvtAssets = gvtAssets.add(currentTotalAssets.sub(totalAssets));\r\n        } else if (currentTotalAssets < totalAssets) {\r\n            (lastGvtAssets, lastPwrdAssets) = handleLoss(gvtAssets, pwrdAssets, totalAssets.sub(currentTotalAssets));\r\n        }\r\n        int256 priceChange = int256(currentTotalAssets) - int256(totalAssets);\r\n\r\n        emit LogPnLExecution(\r\n            0,\r\n            priceChange,\r\n            0,\r\n            priceChange,\r\n            0,\r\n            0,\r\n            gvtAssets,\r\n            pwrdAssets,\r\n            lastGvtAssets,\r\n            lastPwrdAssets\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pwrd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gvt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pwrdAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gvtAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"ChangeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pwrd\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"change\",\"type\":\"int256\"}],\"name\":\"LogNewGtokenChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LogNewPerfromanceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deductedAssets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"totalPnL\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"investPnL\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"pricePnL\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beforeGvtAssets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beforePwrdAssets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"afterGvtAssets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"afterPwrdAssets\",\"type\":\"uint256\"}],\"name\":\"LogPnLExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"LogRebaseSwitch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHAINLINK_PRICE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHAINLINK_PRICE_DECIMAL_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURVE_RATIO_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CURVE_RATIO_DECIMALS_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_DECIMALS_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"N_COINS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_DECIMAL_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcPnL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ctrlPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pwrd\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"dollarAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"}],\"name\":\"decreaseGTokenLastAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTotalAssets\",\"type\":\"uint256\"}],\"name\":\"distributePriceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"distributeStrategyGainLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPnL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gvt\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pwrd\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"dollarAmount\",\"type\":\"uint256\"}],\"name\":\"increaseGTokenLastAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastGvtAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPwrdAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pwrd\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_rebase\",\"type\":\"bool\"}],\"name\":\"setRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilisationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PnL","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f0a93d4994b3d98fb5e3a2f90dbc2d69073cb86b0000000000000000000000003adb04e127b9c0a5d36094125669d4603ac52a0c00000000000000000000000000000000000000000000863731abbde088da577700000000000000000000000000000000000000000001a2920710413463cccfe7","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://67c1e1b843e865c250d9de13f99ad977cf44e80b5210fe4dca163fe36d882bfa"}]}