{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.8.0;\r\n\r\n/**\r\n * @title Swap\r\n * @dev Main Swap contract that burns old token and mints new token for given user\r\n */\r\n\r\ncontract Owned {\r\n        address public owner;      \r\n\r\n        constructor() {\r\n            owner = msg.sender;\r\n        }\r\n\r\n        modifier onlyOwner {\r\n            assert(msg.sender == owner);\r\n            _;\r\n        }\r\n        \r\n        /* This function is used to transfer adminship to new owner\r\n         * @param  _newOwner - address of new admin or owner        \r\n         */\r\n\r\n        function transferOwnership(address _newOwner) onlyOwner public {\r\n            assert(_newOwner != address(0)); \r\n            owner = _newOwner;\r\n        }          \r\n}\r\n\r\ncontract Swapper is Owned\r\n{\r\n    \r\n    ERC20 public oldToken;\r\n    ERC20 public newToken;\r\n    Burner public  burner;\r\n    \r\n    event SwapExecuted(address user, uint256 amount);\r\n\r\n    struct VestingUnit {\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n    }\r\n        \r\n    uint256 public approvalDeadline;\r\n\r\n    mapping(address => VestingUnit[]) public holdersVestingData;\r\n    \r\n    function claim() public {\r\n        VestingUnit[] memory vestingUnits = holdersVestingData[msg.sender];\r\n        uint sum = 0;\r\n        for(uint i = 0; i < vestingUnits.length; i++) {\r\n            uint256 finalClaimableTime = vestingUnits[i].timestamp + findTimeMultipler(i) * 30 days + 2 weeks;\r\n            if(finalClaimableTime < block.timestamp){\r\n                continue;\r\n            }\r\n            if(vestingUnits[i].amount > 0 && vestingUnits[i].timestamp < block.timestamp) {\r\n                sum += vestingUnits[i].amount;\r\n                delete holdersVestingData[msg.sender][i];\r\n            }\r\n        }\r\n        newToken.transfer(msg.sender, sum);\r\n    }\r\n    \r\n    function amountClaimable(address holder) public view returns(uint256) {\r\n        VestingUnit[] memory vestingUnits = holdersVestingData[holder];\r\n        uint sum = 0;\r\n        for(uint i = 0; i < vestingUnits.length; i++) {\r\n             uint256 finalClaimableTime = vestingUnits[i].timestamp + findTimeMultipler(i) * 30 days + 2 weeks;\r\n            if(finalClaimableTime < block.timestamp){\r\n                continue;\r\n            }\r\n            if(vestingUnits[i].amount > 0 && vestingUnits[i].timestamp < block.timestamp) {\r\n                sum += vestingUnits[i].amount;\r\n            }\r\n        }\r\n        return sum;\r\n    }\r\n     \r\n    constructor(\r\n        address _oldToken,\r\n        address _newToken,\r\n        address _burner,\r\n        uint256 _approvalDeadline\r\n\r\n    ) {\r\n        approvalDeadline = _approvalDeadline;\r\n        oldToken = ERC20(_oldToken);\r\n        newToken = ERC20(_newToken);\r\n        burner = Burner(_burner);\r\n\r\n    }\r\n\r\n\r\n    function updateApprovalDeadline(uint256 _approvalDeadline) onlyOwner public {\r\n        approvalDeadline = _approvalDeadline;\r\n    }\r\n    \r\n    function energencyWithdraw(uint256 _amount) onlyOwner public {\r\n        newToken.transfer(msg.sender,_amount);\r\n    }\r\n    \r\n\tfunction SwapNow(uint256 _val) public {\r\n\t    require(approvalDeadline > block.timestamp,\"deadline reached\");\r\n\t    require(oldToken.allowance(msg.sender, address(this)) >= _val,\"allowance lower\"); \r\n\t    oldToken.transferFrom(msg.sender, address(burner), _val);\r\n\t    burner.burn(_val);\r\n\t    newToken.transfer(msg.sender, _val / 10);\r\n\t    \r\n\t    setVestingData(_val);\r\n\r\n\t    emit SwapExecuted(msg.sender, _val);\r\n\t}\r\n\t\r\n\tfunction calculateCutPerMonth(uint256 totalAmount) private pure returns (uint256){\r\n\t    return totalAmount * 75/1000;\r\n\t}\r\n\t\r\n\t\r\n\tfunction setVestingData(uint256 _val) private {\r\n\t    \t  \r\n\t    uint256 amount = calculateCutPerMonth(_val);\r\n\t    uint256 finalChunkAmount = _val - _val/10;\r\n\t    for(uint256 i=0; i < 11; i++){\r\n\t        uint256 vestingTimestamp = block.timestamp + 90 days + 30 days * i;\r\n\t        VestingUnit memory vestingData  = VestingUnit({amount:amount,timestamp:vestingTimestamp});\r\n\t        holdersVestingData[msg.sender].push(vestingData);\r\n\t        finalChunkAmount -= amount;\r\n\t    }\r\n\t    \r\n\t    holdersVestingData[msg.sender].push(VestingUnit({amount:finalChunkAmount,timestamp:block.timestamp + 90 days + 30 days * 11}));\r\n\t}\r\n\t\r\n\t\r\n\tfunction findTimeMultipler(uint256 i) private pure returns(uint256){\r\n\t    if((i+1)%12 == 0){\r\n\t        return 0 ;\r\n\t    }\r\n\t    else{\r\n\t        return 12 - (i+1)%12;\r\n\t    }\r\n\t}\r\n\t\r\n\r\n\tfunction remainingClaim(address _holder) view public returns(uint256) {\r\n\t    VestingUnit[] memory vestingUnits = holdersVestingData[_holder];\r\n        uint sum = 0;\r\n        for(uint i = 0; i < vestingUnits.length; i++) {\r\n            if(vestingUnits[i].amount > 0) {\r\n                sum += vestingUnits[i].amount;\r\n            }\r\n        }\r\n        return sum;\r\n\t}\r\n}\r\ncontract Burner is Owned {\r\n    ERC20 oldToken;\r\n    \r\n    function returnOwnership(address _newOwner) public onlyOwner {\r\n        oldToken.transferOwnership(_newOwner);\r\n    }\r\n    \r\n    constructor(address _oldToken) {\r\n        oldToken = ERC20(_oldToken);\r\n    }\r\n    \r\n    function burn(uint256 _val) public {\r\n        oldToken.burn(_val);\r\n    }\r\n}\r\n\r\n\r\ninterface ERC20 {\r\n    function transferOwnership(address _newOwner) external;\r\n    \r\n    function transferFrom(\r\n         address _from,\r\n         address _to,\r\n         uint256 _amount\r\n     ) external returns (bool success);\r\n    \r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    \r\n    function burn(uint256 _value) external;\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_approvalDeadline\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwapExecuted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"SwapNow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"amountClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvalDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burner\",\"outputs\":[{\"internalType\":\"contract Burner\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"energencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holdersVestingData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"remainingClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_approvalDeadline\",\"type\":\"uint256\"}],\"name\":\"updateApprovalDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Swapper","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000096e322f2a4f151cd898f86ea5626cc6e10090c7600000000000000000000000040eb746dee876ac1e78697b7ca85142d178a1fc8000000000000000000000000f39271cb27ddc6985ff38238918ff66ec5653b2a00000000000000000000000000000000000000000000000000000000635f897d","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://45db0dbade789adf728844845412d798c0bbc6603ad497590df97691cafe7e41"}]}