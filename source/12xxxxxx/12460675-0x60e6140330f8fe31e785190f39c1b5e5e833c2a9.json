{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 199\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"contracts/chainbridge/GenericHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IGenericHandler.sol\\\";\\n\\n/**\\n    @title Handles generic deposits and deposit executions.\\n    @author ChainSafe Systems.\\n    @notice This contract is intended to be used with the Bridge contract. Copied directly from here: \\n            https://github.com/ChainSafe/chainbridge-solidity/releases/tag/v1.0.0\\n */\\ncontract GenericHandler is IGenericHandler {\\n    address public _bridgeAddress;\\n\\n    struct DepositRecord {\\n        uint8 _destinationChainID;\\n        address _depositer;\\n        bytes32 _resourceID;\\n        bytes _metaData;\\n    }\\n\\n    // depositNonce => Deposit Record\\n    mapping(uint8 => mapping(uint64 => DepositRecord)) public _depositRecords;\\n\\n    // resourceID => contract address\\n    mapping(bytes32 => address) public _resourceIDToContractAddress;\\n\\n    // contract address => resourceID\\n    mapping(address => bytes32) public _contractAddressToResourceID;\\n\\n    // contract address => deposit function signature\\n    mapping(address => bytes4) public _contractAddressToDepositFunctionSignature;\\n\\n    // contract address => execute proposal function signature\\n    mapping(address => bytes4) public _contractAddressToExecuteFunctionSignature;\\n\\n    // token contract address => is whitelisted\\n    mapping(address => bool) public _contractWhitelist;\\n\\n    modifier onlyBridge() {\\n        _onlyBridge();\\n        _;\\n    }\\n\\n    function _onlyBridge() private {\\n        require(msg.sender == _bridgeAddress, \\\"sender must be bridge contract\\\");\\n    }\\n\\n    /**\\n        @param bridgeAddress Contract address of previously deployed Bridge.\\n        @param initialResourceIDs Resource IDs used to identify a specific contract address.\\n        These are the Resource IDs this contract will initially support.\\n        @param initialContractAddresses These are the addresses the {initialResourceIDs} will point to, and are the contracts that will be\\n        called to perform deposit and execution calls.\\n        @param initialDepositFunctionSignatures These are the function signatures {initialContractAddresses} will point to,\\n        and are the function that will be called when executing {deposit}\\n        @param initialExecuteFunctionSignatures These are the function signatures {initialContractAddresses} will point to,\\n        and are the function that will be called when executing {executeProposal}\\n\\n        @dev {initialResourceIDs}, {initialContractAddresses}, {initialDepositFunctionSignatures},\\n        and {initialExecuteFunctionSignatures} must all have the same length. Also,\\n        values must be ordered in the way that that index x of any mentioned array\\n        must be intended for value x of any other array, e.g. {initialContractAddresses}[0]\\n        is the intended address for {initialDepositFunctionSignatures}[0].\\n     */\\n    constructor(\\n        address bridgeAddress,\\n        bytes32[] memory initialResourceIDs,\\n        address[] memory initialContractAddresses,\\n        bytes4[] memory initialDepositFunctionSignatures,\\n        bytes4[] memory initialExecuteFunctionSignatures\\n    ) {\\n        require(\\n            initialResourceIDs.length == initialContractAddresses.length,\\n            \\\"initialResourceIDs and initialContractAddresses len mismatch\\\"\\n        );\\n\\n        require(\\n            initialContractAddresses.length == initialDepositFunctionSignatures.length,\\n            \\\"provided contract addresses and function signatures len mismatch\\\"\\n        );\\n\\n        require(\\n            initialDepositFunctionSignatures.length == initialExecuteFunctionSignatures.length,\\n            \\\"provided deposit and execute function signatures len mismatch\\\"\\n        );\\n\\n        _bridgeAddress = bridgeAddress;\\n\\n        for (uint256 i = 0; i < initialResourceIDs.length; i++) {\\n            _setResource(\\n                initialResourceIDs[i],\\n                initialContractAddresses[i],\\n                initialDepositFunctionSignatures[i],\\n                initialExecuteFunctionSignatures[i]\\n            );\\n        }\\n    }\\n\\n    /**\\n        @param depositNonce This ID will have been generated by the Bridge contract.\\n        @param destId ID of chain deposit will be bridged to.\\n        @return DepositRecord which consists of:\\n        - _destinationChainID ChainID deposited tokens are intended to end up on.\\n        - _resourceID ResourceID used when {deposit} was executed.\\n        - _depositer Address that initially called {deposit} in the Bridge contract.\\n        - _metaData Data to be passed to method executed in corresponding {resourceID} contract.\\n    */\\n    function getDepositRecord(uint64 depositNonce, uint8 destId) external view returns (DepositRecord memory) {\\n        return _depositRecords[destId][depositNonce];\\n    }\\n\\n    /**\\n        @notice First verifies {_resourceIDToContractAddress}[{resourceID}] and\\n        {_contractAddressToResourceID}[{contractAddress}] are not already set,\\n        then sets {_resourceIDToContractAddress} with {contractAddress},\\n        {_contractAddressToResourceID} with {resourceID},\\n        {_contractAddressToDepositFunctionSignature} with {depositFunctionSig},\\n        {_contractAddressToExecuteFunctionSignature} with {executeFunctionSig},\\n        and {_contractWhitelist} to true for {contractAddress}.\\n        @param resourceID ResourceID to be used when making deposits.\\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\\n        @param depositFunctionSig Function signature of method to be called in {contractAddress} when a deposit is made.\\n        @param executeFunctionSig Function signature of method to be called in {contractAddress} when a deposit is executed.\\n     */\\n    function setResource(\\n        bytes32 resourceID,\\n        address contractAddress,\\n        bytes4 depositFunctionSig,\\n        bytes4 executeFunctionSig\\n    ) external override onlyBridge {\\n        _setResource(resourceID, contractAddress, depositFunctionSig, executeFunctionSig);\\n    }\\n\\n    /**\\n        @notice A deposit is initiatied by making a deposit in the Bridge contract.\\n        @param destinationChainID Chain ID deposit is expected to be bridged to.\\n        @param depositNonce This value is generated as an ID by the Bridge contract.\\n        @param depositer Address of account making the deposit in the Bridge contract.\\n        @param data Consists of: {resourceID}, {lenMetaData}, and {metaData} all padded to 32 bytes.\\n        @notice Data passed into the function should be constructed as follows:\\n        len(data)                              uint256     bytes  0  - 32\\n        data                                   bytes       bytes  64 - END\\n        @notice {contractAddress} is required to be whitelisted\\n        @notice If {_contractAddressToDepositFunctionSignature}[{contractAddress}] is set,\\n        {metaData} is expected to consist of needed function arguments.\\n     */\\n    function deposit(\\n        bytes32 resourceID,\\n        uint8 destinationChainID,\\n        uint64 depositNonce,\\n        address depositer,\\n        bytes calldata data\\n    ) external onlyBridge {\\n        bytes32 lenMetadata;\\n        bytes memory metadata;\\n\\n        assembly {\\n            // Load length of metadata from data + 64\\n            lenMetadata := calldataload(0xC4)\\n            // Load free memory pointer\\n            metadata := mload(0x40)\\n\\n            mstore(0x40, add(0x20, add(metadata, lenMetadata)))\\n\\n            // func sig (4) + destinationChainId (padded to 32) + depositNonce (32) + depositor (32) +\\n            // bytes length (32) + resourceId (32) + length (32) = 0xC4\\n\\n            calldatacopy(\\n                metadata, // copy to metadata\\n                0xC4, // copy from calldata after metadata length declaration @0xC4\\n                sub(calldatasize(), 0xC4) // copy size (calldatasize - (0xC4 + the space metaData takes up))\\n            )\\n        }\\n\\n        address contractAddress = _resourceIDToContractAddress[resourceID];\\n        require(_contractWhitelist[contractAddress], \\\"provided contractAddress is not whitelisted\\\");\\n\\n        bytes4 sig = _contractAddressToDepositFunctionSignature[contractAddress];\\n        if (sig != bytes4(0)) {\\n            bytes memory callData = abi.encodePacked(sig, metadata);\\n            (bool success, ) = contractAddress.call(callData);\\n            require(success, \\\"delegatecall to contractAddress failed\\\");\\n        }\\n\\n        _depositRecords[destinationChainID][depositNonce] = DepositRecord(\\n            destinationChainID,\\n            depositer,\\n            resourceID,\\n            metadata\\n        );\\n    }\\n\\n    /**\\n        @notice Proposal execution should be initiated when a proposal is finalized in the Bridge contract.\\n        @param data Consists of {resourceID}, {lenMetaData}, and {metaData}.\\n        @notice Data passed into the function should be constructed as follows:\\n        len(data)                              uint256     bytes  0  - 32\\n        data                                   bytes       bytes  32 - END\\n        @notice {contractAddress} is required to be whitelisted\\n        @notice If {_contractAddressToExecuteFunctionSignature}[{contractAddress}] is set,\\n        {metaData} is expected to consist of needed function arguments.\\n     */\\n    function executeProposal(bytes32 resourceID, bytes calldata data) external onlyBridge {\\n        bytes memory metaData;\\n        assembly {\\n            // metadata has variable length\\n            // load free memory pointer to store metadata\\n            metaData := mload(0x40)\\n            // first 32 bytes of variable length in storage refer to length\\n            let lenMeta := calldataload(0x64)\\n            mstore(0x40, add(0x60, add(metaData, lenMeta)))\\n\\n            // in the calldata, metadata is stored @0x64 after accounting for function signature, and 2 previous params\\n            calldatacopy(\\n                metaData, // copy to metaData\\n                0x64, // copy from calldata after data length declaration at 0x64\\n                sub(calldatasize(), 0x64) // copy size (calldatasize - 0x64)\\n            )\\n        }\\n\\n        address contractAddress = _resourceIDToContractAddress[resourceID];\\n        require(_contractWhitelist[contractAddress], \\\"provided contractAddress is not whitelisted\\\");\\n\\n        bytes4 sig = _contractAddressToExecuteFunctionSignature[contractAddress];\\n        if (sig != bytes4(0)) {\\n            bytes memory callData = abi.encodePacked(sig, metaData);\\n            (bool success, ) = contractAddress.call(callData);\\n            require(success, \\\"delegatecall to contractAddress failed\\\");\\n        }\\n    }\\n\\n    function _setResource(\\n        bytes32 resourceID,\\n        address contractAddress,\\n        bytes4 depositFunctionSig,\\n        bytes4 executeFunctionSig\\n    ) internal {\\n        _resourceIDToContractAddress[resourceID] = contractAddress;\\n        _contractAddressToResourceID[contractAddress] = resourceID;\\n        _contractAddressToDepositFunctionSignature[contractAddress] = depositFunctionSig;\\n        _contractAddressToExecuteFunctionSignature[contractAddress] = executeFunctionSig;\\n\\n        _contractWhitelist[contractAddress] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/chainbridge/IGenericHandler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n    @title Interface for handler that handles generic deposits and deposit executions.\\n    @dev Copied directly from here: https://github.com/ChainSafe/chainbridge-solidity/releases/tag/v1.0.0.\\n    @author ChainSafe Systems.\\n */\\ninterface IGenericHandler {\\n    /**\\n        @notice Correlates {resourceID} with {contractAddress}, {depositFunctionSig}, and {executeFunctionSig}.\\n        @param resourceID ResourceID to be used when making deposits.\\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\\n        @param depositFunctionSig Function signature of method to be called in {contractAddress} when a deposit is made.\\n        @param executeFunctionSig Function signature of method to be called in {contractAddress} when a deposit is executed.\\n     */\\n    function setResource(\\n        bytes32 resourceID,\\n        address contractAddress,\\n        bytes4 depositFunctionSig,\\n        bytes4 executeFunctionSig\\n    ) external;\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"initialResourceIDs\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"initialContractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"initialDepositFunctionSignatures\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"initialExecuteFunctionSignatures\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_bridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_contractAddressToDepositFunctionSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_contractAddressToExecuteFunctionSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_contractAddressToResourceID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_contractWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"_depositRecords\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"_destinationChainID\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_depositer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_metaData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_resourceIDToContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"depositer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"destId\",\"type\":\"uint8\"}],\"name\":\"getDepositRecord\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_destinationChainID\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_depositer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_metaData\",\"type\":\"bytes\"}],\"internalType\":\"struct GenericHandler.DepositRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"depositFunctionSig\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"executeFunctionSig\",\"type\":\"bytes4\"}],\"name\":\"setResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GenericHandler","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"199","ConstructorArguments":"000000000000000000000000ba26bc014c4c889431826c123492861e886408b900000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}