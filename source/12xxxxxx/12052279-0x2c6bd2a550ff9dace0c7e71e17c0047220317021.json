{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n        return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\ncontract CosmoDistributor {\r\n    using SafeMath for uint256;\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status = _NOT_ENTERED;\r\n\r\n    address private _owner;\r\n\r\n    address public constant token = 0x27cd7375478F189bdcF55616b088BE03d9c4339c;\r\n    uint256 public constant timeStart = 1615820400;  // 2021-03-15T15:00:00.000Z = 1615820400\r\n    uint256 public constant timeEnd = 1647356400;    // 2022-03-15T15:00:00.000Z = 1647356400\r\n\r\n    mapping(address => uint256) public vestedAmount;\r\n    mapping(address => uint256) public totalDrawn;\r\n    mapping(address => uint256) public lastDrawnAt;\r\n\r\n    string public url = \"https://CosmoFund.space/\";\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event ScheduleCreated(address indexed beneficiary);\r\n    event DrawDown(address indexed beneficiary, uint256 indexed amount);\r\n\r\n    constructor() public {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n        setup();\r\n    }\r\n\r\n    function setup() internal {\r\n        vestedAmount[0xB2F8234571eEF9B222DEca1307A03c6c2E376b73] = 1800000000e18;\r\n        vestedAmount[0x3A7F0d57928d7dCE60E11470e528c47CF5084f33] = 18000000e18;\r\n    }\r\n\r\n    /**\r\n    * @notice Create new vesting schedules in a batch\r\n    * @notice A transfer is used to bring tokens into the VestingDepositAccount so pre-approval is required\r\n    * @param beneficiaries array of beneficiaries of the vested tokens\r\n    * @param amounts array of amount of tokens (in wei)\r\n    * @dev array index of address should be the same as the array index of the amount\r\n    */\r\n    function createVestingSchedules(address[] calldata beneficiaries, uint256[] calldata amounts) external onlyOwner returns (bool) {\r\n        require(beneficiaries.length > 0, \"Empty Data\");\r\n        require(beneficiaries.length == amounts.length, \"Array lengths do not match\");\r\n        for (uint256 i = 0; i < beneficiaries.length; i = i.add(1)) {\r\n            address beneficiary = beneficiaries[i];\r\n            uint256 amount = amounts[i];\r\n            _createVestingSchedule(beneficiary, amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @notice Create a new vesting schedule\r\n    * @notice A transfer is used to bring tokens into the VestingDepositAccount so pre-approval is required\r\n    * @param beneficiary beneficiary of the vested tokens\r\n    * @param amount amount of tokens (in wei)\r\n    */\r\n    function createVestingSchedule(address beneficiary, uint256 amount) external onlyOwner returns (bool) {\r\n        return _createVestingSchedule(beneficiary, amount);\r\n    }\r\n\r\n    /**\r\n    * @notice Draws down any vested tokens due\r\n    * @dev Must be called directly by the beneficiary assigned the tokens in the schedule\r\n    */\r\n    function drawDown() nonReentrant external returns (bool) {\r\n        return _drawDown(_msgSender());\r\n    }\r\n\r\n    /**\r\n    * @notice Vesting schedule and associated data for a beneficiary\r\n    * @dev Must be called directly by the beneficiary assigned the tokens in the schedule\r\n    * @return _amount\r\n    * @return _totalDrawn\r\n    * @return _lastDrawnAt\r\n    * @return _remainingBalance\r\n    */\r\n    function vestingScheduleForBeneficiary(address beneficiary) external view\r\n    returns (uint256 _amount, uint256 _totalDrawn, uint256 _lastDrawnAt, uint256 _remainingBalance) {\r\n        return (\r\n            vestedAmount[beneficiary],\r\n            totalDrawn[beneficiary],\r\n            lastDrawnAt[beneficiary],\r\n            vestedAmount[beneficiary].sub(totalDrawn[beneficiary])\r\n        );\r\n    }\r\n\r\n    /**\r\n    * @notice Draw down amount currently available (based on the block timestamp)\r\n    * @param beneficiary beneficiary of the vested tokens\r\n    * @return amount tokens due from vesting schedule\r\n    */\r\n    function availableDrawDownAmount(address beneficiary) external view returns (uint256) {\r\n        return _availableDrawDownAmount(beneficiary);\r\n    }\r\n\r\n    /**\r\n    * @notice Balance remaining in vesting schedule\r\n    * @param beneficiary beneficiary of the vested tokens\r\n    * @return remainingBalance tokens still due (and currently locked) from vesting schedule\r\n    */\r\n    function remainingBalance(address beneficiary) external view returns (uint256) {\r\n        return vestedAmount[beneficiary].sub(totalDrawn[beneficiary]);\r\n    }\r\n\r\n    function _createVestingSchedule(address beneficiary, uint256 amount) internal returns (bool) {\r\n        require(beneficiary != address(0), \"Beneficiary cannot be empty\");\r\n        require(amount > 0, \"Amount cannot be empty\");\r\n        // Ensure one per address\r\n        require(vestedAmount[beneficiary] == 0, \"Schedule already in flight\");\r\n        vestedAmount[beneficiary] = amount;\r\n        // Vest the tokens into the deposit account and delegate to the beneficiary\r\n        require(IERC20(token).transferFrom(_msgSender(), address(this), amount), \"Unable to escrow tokens\");\r\n        emit ScheduleCreated(beneficiary);\r\n        return true;\r\n    }\r\n\r\n    function _drawDown(address beneficiary) internal returns (bool) {\r\n        require(vestedAmount[beneficiary] > 0, \"There is no schedule currently in flight\");\r\n        uint256 amount = _availableDrawDownAmount(beneficiary);\r\n        require(amount > 0, \"No allowance left to withdraw\");\r\n        // Update last drawn to now\r\n        lastDrawnAt[beneficiary] = _getNow();\r\n        // Increase total drawn amount\r\n        totalDrawn[beneficiary] = totalDrawn[beneficiary].add(amount);\r\n        // Safety measure - this should never trigger\r\n        require(totalDrawn[beneficiary] <= vestedAmount[beneficiary], \"Safety Mechanism - Drawn exceeded Amount Vested\");\r\n        // Issue tokens to beneficiary\r\n        require(IERC20(token).transfer(beneficiary, amount), \"Unable to transfer tokens\");\r\n        emit DrawDown(beneficiary, amount);\r\n        return true;\r\n    }\r\n\r\n    function _availableDrawDownAmount(address beneficiary) internal view returns (uint256) {\r\n        uint256 nowTime = _getNow();\r\n        // Schedule complete\r\n        if (nowTime > timeEnd) {\r\n            return vestedAmount[beneficiary].sub(totalDrawn[beneficiary]);\r\n        }\r\n        // Schedule is active\r\n        // Work out when the last invocation was\r\n        uint256 timeLastDrawnOrStart = lastDrawnAt[beneficiary] == 0 ? timeStart : lastDrawnAt[beneficiary];\r\n        // Find out how much time has past since last invocation\r\n        uint256 timePassedSinceLastInvocation = nowTime.sub(timeLastDrawnOrStart);\r\n        // Work out how many due tokens - time passed * rate per second\r\n        uint256 drawDownRate = vestedAmount[beneficiary].mul(1e18).div(timeEnd.sub(timeStart));\r\n        uint256 amount = timePassedSinceLastInvocation.mul(drawDownRate).div(1e18);\r\n        return amount;\r\n    }\r\n\r\n    function _getNow() internal view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"Reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DrawDown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"ScheduleCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"availableDrawDownAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createVestingSchedule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"createVestingSchedules\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawDown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDrawnAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"remainingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"url\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"vestingScheduleForBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastDrawnAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_remainingBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CosmoDistributor","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"","EVMVersion":"istanbul","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a3b8f8e05715e42624d822ed71b39d24a3e091f2ec7cba14ece067e47c5bc1f7"}]}