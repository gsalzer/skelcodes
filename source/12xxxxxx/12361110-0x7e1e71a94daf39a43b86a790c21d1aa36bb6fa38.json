{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.4;\r\n\r\n\r\ninterface contract2Interface{\r\n    \r\n   function userStats(address user) external view returns(uint256 firstBlock, uint256 claimedDays, uint256 lockedRewards, uint256 claimableRewards);\r\n    \r\n    function definiteStats(address user) external view returns(uint256 firstBlock, uint256 lockedRewards, uint256 totalLockedRewards);\r\n    \r\n    function totalStakedMCH(uint256 day) external view returns(uint256);\r\n    \r\n    function totalLocked(address user) external view returns(uint256);\r\n    \r\n    function unstake(uint256 amount) external ;\r\n    \r\n    function claimRewards() external returns(bool);\r\n    \r\n    function claimRewards(address user) external returns(bool); \r\n    \r\n    function emergencyWithdraw(address to, uint256 amount) external ;\r\n    \r\n    function giveAllowence(address user) external ;\r\n    \r\n    function removeAllowence(address user) external ;\r\n    \r\n    function allowance(address user) external view returns(bool) ;\r\n    \r\n    event MCHunstake(address user, uint256 amont);\r\n}\r\n\r\n\r\ninterface IERC20{\r\n\r\n\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n\r\n}\r\n\r\n\r\ninterface MCHstakingInterface {\r\n\r\n\r\n    function stakingStats(address user) external view returns(uint256 amount, uint256 stakingBlock) ;\r\n    \r\n    function totalStaked() external view returns(uint256);\r\n    \r\n    function showBlackUser(address user) external view returns(bool) ;\r\n    \r\n    function unstake(address user, uint256 amount) external ;  \r\n    \r\n    function transferMCH(address to, uint256 amount) external ;\r\n    \r\n}\r\ncontract Contract2 is contract2Interface {\r\n    \r\n    MCHstakingInterface MCHstaking;\r\n    IERC20 MCF;\r\n    //MCH staing : 12310169\r\n    \r\n    address _owner;\r\n    \r\n    mapping (address => bool) private _allowence;\r\n    \r\n    mapping (uint256 => uint256) private _totalStaked; //total staked MCH during each day\r\n    \r\n    mapping (address => uint256) private _firstBlock; //first block the user staked at\r\n    mapping (address => uint256) private _claimedDays; //Days the users have claimed rewards in\r\n    \r\n    mapping (address => uint256) private _lockedRewards;\r\n    mapping (address => uint256) private _totalLockedRewards;\r\n    \r\n    constructor(address MCHcontract, address MCFcontract) {\r\n        _owner = msg.sender;\r\n        MCHstaking = MCHstakingInterface(MCHcontract);\r\n        MCF = IERC20((MCFcontract));\r\n    }\r\n\r\n\r\n    function allowance(address user) external view override returns(bool){\r\n        require(_allowence[msg.sender]);\r\n        return _allowence[user];\r\n    }    \r\n\r\n\r\n    function CR(address user) internal  {\r\n        setFirstBlock(user);\r\n           uint256 totalStaked = MCHstaking.totalStaked();\r\n              uint256 day = ((block.number - 12356690) / 6646) + 1; //12356692\r\n           if(day > 61) {day = 61;}\r\n           if(totalStaked > _totalStaked[day]){_totalStaked[day] = totalStaked;}\r\n           uint256 claimedDays = _claimedDays[user] + 1;\r\n           (uint256 staked, ) = MCHstaking.stakingStats(user);\r\n           if(claimedDays < day && staked > 0){\r\n               uint256 rewards;\r\n               for(uint256 t = claimedDays; t < day; ++t){\r\n                   if(_totalStaked[t] == 0){_totalStaked[t] = totalStaked;}\r\n                   rewards += (staked * 5000000000000000 / _totalStaked[t]);\r\n                   /////////////////////5000000000000000\r\n                   \r\n                   if(t+1 == day){\r\n                       _claimedDays[user] = t;\r\n                       _lockedRewards[user] += rewards/2;\r\n                       _totalLockedRewards[user] = _lockedRewards[user];\r\n                       MCF.transfer(user, rewards/2);\r\n                   }\r\n               }\r\n               \r\n           }\r\n\r\n\r\n    }\r\n    \r\n    function setFirstBlock(address user) internal  {\r\n                if(_firstBlock[user] == 0){\r\n            (, uint256 stakingBlock) = MCHstaking.stakingStats(user);\r\n            if(stakingBlock != 0){\r\n            _firstBlock[user] = stakingBlock;\r\n                    uint256 day = ((stakingBlock + 46523) - 12356690) / 6646 ;     //   12356692    \r\n            _claimedDays[user] = day;\r\n            }\r\n            else{\r\n                _firstBlock[user] = block.number;\r\n                uint256 day = ((block.number + 46523) - 12356690) / 6646 ;     //   12356692    \r\n            _claimedDays[user] = day;\r\n            }\r\n                }\r\n    }\r\n    \r\n    function userStats(address user) external view override returns(uint256 firstBlock, uint256 claimedDays, uint256 lockedRewards, uint256 claimableRewards){\r\n            if(_firstBlock[user] == 0){\r\n            (, uint256 stakingBlock) = MCHstaking.stakingStats(user);\r\n            if(stakingBlock != 0){\r\n            firstBlock = stakingBlock;\r\n                    uint256 day = ((stakingBlock + 46523) - 12356690) / 6646 ;     //   12356692    \r\n            claimedDays = day;\r\n            }\r\n            else{\r\n                firstBlock = block.number;\r\n                uint256 day = ((block.number + 46523) - 12356690) / 6646 ;     //   12356692    \r\n            claimedDays = day;\r\n            }\r\n                }\r\n                \r\n            else{\r\n              firstBlock = _firstBlock[user];\r\n              claimedDays = _claimedDays[user];\r\n            }    \r\n        if(block.number >= 12356690){\r\n            uint256 totalStaked = MCHstaking.totalStaked();\r\n            uint256 day = (block.number - 12356690) / 6646 + 1;\r\n            if(day > 61) {day = 61;}\r\n            if(claimedDays + 1 < day){\r\n               (uint256 staked, ) = MCHstaking.stakingStats(user);\r\n               for(uint256 t = claimedDays+1; t < day; ++t){\r\n                   if(_totalStaked[t] == 0){\r\n                       claimableRewards += (staked * 5000000000000000 / totalStaked) / 2;\r\n                       }\r\n                       else{\r\n                           claimableRewards += (staked * 5000000000000000 / _totalStaked[t]) / 2;\r\n                       }\r\n                   \r\n               }\r\n           }\r\n        }\r\n        else{claimableRewards = 0;}\r\n        \r\n        lockedRewards = _lockedRewards[user] + claimableRewards;\r\n    }\r\n    \r\n    function definiteStats(address user) external view override returns(uint256 firstBlock, uint256 lockedRewards, uint256 totalLockedRewards){\r\n        firstBlock = _firstBlock[user];\r\n        lockedRewards = _lockedRewards[user];\r\n        totalLockedRewards = _totalLockedRewards[user];\r\n    }\r\n    \r\n    function totalStakedMCH(uint256 day) external view override returns(uint256){\r\n        return _totalStaked[day];\r\n    }\r\n    \r\n    function totalLocked(address user) external view override returns(uint256){\r\n        return _totalLockedRewards[user];\r\n    }\r\n    function unstake(uint256 amount) external override {\r\n        setFirstBlock(msg.sender);\r\n        require(!MCHstaking.showBlackUser(msg.sender));\r\n        require(block.number - _firstBlock[msg.sender] >= 46523);\r\n        CR(msg.sender);\r\n        MCHstaking.unstake(msg.sender, amount);\r\n        MCHstaking.transferMCH(msg.sender, amount);\r\n        emit MCHunstake(msg.sender, amount);\r\n    }\r\n    \r\n    function claimRewards() external override returns(bool) {\r\n        require(!MCHstaking.showBlackUser(msg.sender));\r\n        CR(msg.sender);\r\n        return true;\r\n    }\r\n    \r\n    function claimRewards2() external returns(bool) {\r\n        require(!MCHstaking.showBlackUser(msg.sender));\r\n        CR(msg.sender);\r\n        return true;\r\n    }\r\n    \r\n    function claimRewards(address user) external override returns(bool) {\r\n        require(address(MCHstaking) == msg.sender || _allowence[msg.sender]);\r\n        if(!MCHstaking.showBlackUser(user)){CR(user);}\r\n        return true;\r\n    }\r\n    \r\n    function emergencyWithdraw(address to, uint256 amount) external override {\r\n        require(msg.sender == _owner);\r\n        MCF.transfer(to, amount);\r\n    }\r\n        \r\n    function giveAllowence(address user) external override {\r\n        require(msg.sender == _owner);\r\n        _allowence[user] = true;\r\n    }\r\n    \r\n    function removeAllowence(address user) external override {\r\n        require(msg.sender == _owner);\r\n        _allowence[user] = false;\r\n    }  \r\n    \r\n    function editData(address user, uint256 lockedRewards, uint256 firstBlock) external {\r\n        require(_allowence[msg.sender]);\r\n        _lockedRewards[user] = lockedRewards;\r\n        _firstBlock[user] = firstBlock;\r\n    }\r\n    \r\n    \r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"MCHcontract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"MCFcontract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amont\",\"type\":\"uint256\"}],\"name\":\"MCHunstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"definiteStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"firstBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLockedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstBlock\",\"type\":\"uint256\"}],\"name\":\"editData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"giveAllowence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeAllowence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"totalStakedMCH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"firstBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Contract2","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000374a57715421bf484f227ec7c0a8f1f2f526679a00000000000000000000000010d88ae63188987799772813778e3b697a5ae64a","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://558891b6ad52a2c4dca6603d3d728fb0a57af475aa99724c5135a1899c775149"}]}