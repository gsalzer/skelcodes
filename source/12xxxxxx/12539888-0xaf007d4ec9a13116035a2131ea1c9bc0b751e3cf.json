{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.8.2;\r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary MassetHelpers {\r\n    using SafeERC20 for IERC20;\r\n\r\n    function transferReturnBalance(\r\n        address _sender,\r\n        address _recipient,\r\n        address _bAsset,\r\n        uint256 _qty\r\n    ) internal returns (uint256 receivedQty, uint256 recipientBalance) {\r\n        uint256 balBefore = IERC20(_bAsset).balanceOf(_recipient);\r\n        IERC20(_bAsset).safeTransferFrom(_sender, _recipient, _qty);\r\n        recipientBalance = IERC20(_bAsset).balanceOf(_recipient);\r\n        receivedQty = recipientBalance - balBefore;\r\n    }\r\n\r\n    function safeInfiniteApprove(address _asset, address _spender) internal {\r\n        IERC20(_asset).safeApprove(_spender, 0);\r\n        IERC20(_asset).safeApprove(_spender, 2**256 - 1);\r\n    }\r\n}\r\n\r\ninterface IPlatformIntegration {\r\n    /**\r\n     * @dev Deposit the given bAsset to Lending platform\r\n     * @param _bAsset bAsset address\r\n     * @param _amount Amount to deposit\r\n     */\r\n    function deposit(\r\n        address _bAsset,\r\n        uint256 _amount,\r\n        bool isTokenFeeCharged\r\n    ) external returns (uint256 quantityDeposited);\r\n\r\n    /**\r\n     * @dev Withdraw given bAsset from Lending platform\r\n     */\r\n    function withdraw(\r\n        address _receiver,\r\n        address _bAsset,\r\n        uint256 _amount,\r\n        bool _hasTxFee\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Withdraw given bAsset from Lending platform\r\n     */\r\n    function withdraw(\r\n        address _receiver,\r\n        address _bAsset,\r\n        uint256 _amount,\r\n        uint256 _totalAmount,\r\n        bool _hasTxFee\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Withdraw given bAsset from the cache\r\n     */\r\n    function withdrawRaw(\r\n        address _receiver,\r\n        address _bAsset,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current balance of the given bAsset\r\n     */\r\n    function checkBalance(address _bAsset) external returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the pToken\r\n     */\r\n    function bAssetToPToken(address _bAsset) external returns (address pToken);\r\n}\r\n\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\ncontract ModuleKeys {\r\n    // Governance\r\n    // ===========\r\n    // keccak256(\"Governance\");\r\n    bytes32 internal constant KEY_GOVERNANCE =\r\n        0x9409903de1e6fd852dfc61c9dacb48196c48535b60e25abf92acc92dd689078d;\r\n    //keccak256(\"Staking\");\r\n    bytes32 internal constant KEY_STAKING =\r\n        0x1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d167034;\r\n    //keccak256(\"ProxyAdmin\");\r\n    bytes32 internal constant KEY_PROXY_ADMIN =\r\n        0x96ed0203eb7e975a4cbcaa23951943fa35c5d8288117d50c12b3d48b0fab48d1;\r\n\r\n    // mStable\r\n    // =======\r\n    // keccak256(\"OracleHub\");\r\n    bytes32 internal constant KEY_ORACLE_HUB =\r\n        0x8ae3a082c61a7379e2280f3356a5131507d9829d222d853bfa7c9fe1200dd040;\r\n    // keccak256(\"Manager\");\r\n    bytes32 internal constant KEY_MANAGER =\r\n        0x6d439300980e333f0256d64be2c9f67e86f4493ce25f82498d6db7f4be3d9e6f;\r\n    //keccak256(\"Recollateraliser\");\r\n    bytes32 internal constant KEY_RECOLLATERALISER =\r\n        0x39e3ed1fc335ce346a8cbe3e64dd525cf22b37f1e2104a755e761c3c1eb4734f;\r\n    //keccak256(\"MetaToken\");\r\n    bytes32 internal constant KEY_META_TOKEN =\r\n        0xea7469b14936af748ee93c53b2fe510b9928edbdccac3963321efca7eb1a57a2;\r\n    // keccak256(\"SavingsManager\");\r\n    bytes32 internal constant KEY_SAVINGS_MANAGER =\r\n        0x12fe936c77a1e196473c4314f3bed8eeac1d757b319abb85bdda70df35511bf1;\r\n    // keccak256(\"Liquidator\");\r\n    bytes32 internal constant KEY_LIQUIDATOR =\r\n        0x1e9cb14d7560734a61fa5ff9273953e971ff3cd9283c03d8346e3264617933d4;\r\n    // keccak256(\"InterestValidator\");\r\n    bytes32 internal constant KEY_INTEREST_VALIDATOR =\r\n        0xc10a28f028c7f7282a03c90608e38a4a646e136e614e4b07d119280c5f7f839f;\r\n}\r\n\r\ninterface INexus {\r\n    function governor() external view returns (address);\r\n\r\n    function getModule(bytes32 key) external view returns (address);\r\n\r\n    function proposeModule(bytes32 _key, address _addr) external;\r\n\r\n    function cancelProposedModule(bytes32 _key) external;\r\n\r\n    function acceptProposedModule(bytes32 _key) external;\r\n\r\n    function acceptProposedModules(bytes32[] calldata _keys) external;\r\n\r\n    function requestLockModule(bytes32 _key) external;\r\n\r\n    function cancelLockModule(bytes32 _key) external;\r\n\r\n    function lockModule(bytes32 _key) external;\r\n}\r\n\r\nabstract contract ImmutableModule is ModuleKeys {\r\n    INexus public immutable nexus;\r\n\r\n    /**\r\n     * @dev Initialization function for upgradable proxy contracts\r\n     * @param _nexus Nexus contract address\r\n     */\r\n    constructor(address _nexus) {\r\n        require(_nexus != address(0), \"Nexus address is zero\");\r\n        nexus = INexus(_nexus);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governor.\r\n     */\r\n    modifier onlyGovernor() {\r\n        _onlyGovernor();\r\n        _;\r\n    }\r\n\r\n    function _onlyGovernor() internal view {\r\n        require(msg.sender == _governor(), \"Only governor can execute\");\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governance.\r\n     *      Governance is either Governor address or Governance address.\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(\r\n            msg.sender == _governor() || msg.sender == _governance(),\r\n            \"Only governance can execute\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Governor address from the Nexus\r\n     * @return Address of Governor Contract\r\n     */\r\n    function _governor() internal view returns (address) {\r\n        return nexus.governor();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Governance Module address from the Nexus\r\n     * @return Address of the Governance (Phase 2)\r\n     */\r\n    function _governance() internal view returns (address) {\r\n        return nexus.getModule(KEY_GOVERNANCE);\r\n    }\r\n\r\n    /**\r\n     * @dev Return SavingsManager Module address from the Nexus\r\n     * @return Address of the SavingsManager Module contract\r\n     */\r\n    function _savingsManager() internal view returns (address) {\r\n        return nexus.getModule(KEY_SAVINGS_MANAGER);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Recollateraliser Module address from the Nexus\r\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\r\n     */\r\n    function _recollateraliser() internal view returns (address) {\r\n        return nexus.getModule(KEY_RECOLLATERALISER);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Recollateraliser Module address from the Nexus\r\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\r\n     */\r\n    function _liquidator() internal view returns (address) {\r\n        return nexus.getModule(KEY_LIQUIDATOR);\r\n    }\r\n\r\n    /**\r\n     * @dev Return ProxyAdmin Module address from the Nexus\r\n     * @return Address of the ProxyAdmin Module contract\r\n     */\r\n    function _proxyAdmin() internal view returns (address) {\r\n        return nexus.getModule(KEY_PROXY_ADMIN);\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\nabstract contract AbstractIntegration is\r\n    IPlatformIntegration,\r\n    Initializable,\r\n    ImmutableModule,\r\n    ReentrancyGuard\r\n{\r\n    event PTokenAdded(address indexed _bAsset, address _pToken);\r\n\r\n    event Deposit(address indexed _bAsset, address _pToken, uint256 _amount);\r\n    event Withdrawal(address indexed _bAsset, address _pToken, uint256 _amount);\r\n    event PlatformWithdrawal(\r\n        address indexed bAsset,\r\n        address pToken,\r\n        uint256 totalAmount,\r\n        uint256 userAmount\r\n    );\r\n\r\n    // LP has write access\r\n    address public immutable lpAddress;\r\n\r\n    // bAsset => pToken (Platform Specific Token Address)\r\n    mapping(address => address) public override bAssetToPToken;\r\n    // Full list of all bAssets supported here\r\n    address[] internal bAssetsMapped;\r\n\r\n    /**\r\n     * @param _nexus     Address of the Nexus\r\n     * @param _lp        Address of LP\r\n     */\r\n    constructor(address _nexus, address _lp) ReentrancyGuard() ImmutableModule(_nexus) {\r\n        require(_lp != address(0), \"Invalid LP address\");\r\n        lpAddress = _lp;\r\n    }\r\n\r\n    /**\r\n     * @dev Simple initializer to set first bAsset/pTokens\r\n     */\r\n    function initialize(address[] calldata _bAssets, address[] calldata _pTokens)\r\n        public\r\n        initializer\r\n    {\r\n        uint256 len = _bAssets.length;\r\n        require(len == _pTokens.length, \"Invalid inputs\");\r\n        for (uint256 i = 0; i < len; i++) {\r\n            _setPTokenAddress(_bAssets[i], _pTokens[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governor.\r\n     */\r\n    modifier onlyLP() {\r\n        require(msg.sender == lpAddress, \"Only the LP can execute\");\r\n        _;\r\n    }\r\n\r\n    /***************************************\r\n                    CONFIG\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Provide support for bAsset by passing its pToken address.\r\n     * This method can only be called by the system Governor\r\n     * @param _bAsset   Address for the bAsset\r\n     * @param _pToken   Address for the corresponding platform token\r\n     */\r\n    function setPTokenAddress(address _bAsset, address _pToken) external onlyGovernor {\r\n        _setPTokenAddress(_bAsset, _pToken);\r\n    }\r\n\r\n    /**\r\n     * @dev Provide support for bAsset by passing its pToken address.\r\n     * Add to internal mappings and execute the platform specific,\r\n     * abstract method `_abstractSetPToken`\r\n     * @param _bAsset   Address for the bAsset\r\n     * @param _pToken   Address for the corresponding platform token\r\n     */\r\n    function _setPTokenAddress(address _bAsset, address _pToken) internal {\r\n        require(bAssetToPToken[_bAsset] == address(0), \"pToken already set\");\r\n        require(_bAsset != address(0) && _pToken != address(0), \"Invalid addresses\");\r\n\r\n        bAssetToPToken[_bAsset] = _pToken;\r\n        bAssetsMapped.push(_bAsset);\r\n\r\n        emit PTokenAdded(_bAsset, _pToken);\r\n\r\n        _abstractSetPToken(_bAsset, _pToken);\r\n    }\r\n\r\n    function _abstractSetPToken(address _bAsset, address _pToken) internal virtual;\r\n\r\n    /**\r\n     * @dev Simple helper func to get the min of two values\r\n     */\r\n    function _min(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return x > y ? y : x;\r\n    }\r\n}\r\n\r\ninterface ICERC20 {\r\n\r\n    /**\r\n     * @notice The mint function transfers an asset into the protocol, which begins accumulating\r\n     * interest based on the current Supply Rate for the asset. The user receives a quantity of\r\n     * cTokens equal to the underlying tokens supplied, divided by the current Exchange Rate.\r\n     * @param mintAmount The amount of the asset to be supplied, in units of the underlying asset.\r\n     * @return 0 on success, otherwise an Error codes\r\n     */\r\n    function mint(uint mintAmount) external returns (uint);\r\n\r\n    /**\r\n     * @notice The redeem underlying function converts cTokens into a specified quantity of the underlying\r\n     * asset, and returns them to the user. The amount of cTokens redeemed is equal to the quantity of\r\n     * underlying tokens received, divided by the current Exchange Rate. The amount redeemed must be less\r\n     * than the user's Account Liquidity and the market's available liquidity.\r\n     * @param redeemAmount The amount of underlying to be redeemed.\r\n     * @return 0 on success, otherwise an Error codes\r\n     */\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n\r\n    /**\r\n     * @notice The user's underlying balance, representing their assets in the protocol, is equal to\r\n     * the user's cToken balance multiplied by the Exchange Rate.\r\n     * @param owner The account to get the underlying balance of.\r\n     * @return The amount of underlying currently owned by the account.\r\n     */\r\n    function balanceOfUnderlying(address owner) external returns (uint);\r\n\r\n    /**\r\n     * @notice Calculates the exchange rate from the underlying to the CToken\r\n     * @dev This function does not accrue interest before calculating the exchange rate\r\n     * @return Calculated exchange rate scaled by 1e18\r\n     */\r\n    function exchangeRateStored() external view returns (uint);\r\n\r\n    /**\r\n     * @notice Get the token balance of the `owner`\r\n     * @param owner The address of the account to query\r\n     * @return The number of tokens owned by `owner`\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256);\r\n}\r\n\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\n/**\r\n * @title   CompoundIntegration\r\n * @author  mStable\r\n * @notice  A simple connection to deposit and withdraw bAssets from Compound and Cream\r\n * @dev     VERSION: 1.0\r\n *          DATE:    2021-05-04\r\n */\r\ncontract CompoundIntegration is AbstractIntegration {\r\n    using SafeERC20 for IERC20;\r\n\r\n    event SkippedWithdrawal(address bAsset, uint256 amount);\r\n    event RewardTokenApproved(address rewardToken, address account);\r\n\r\n    address public immutable rewardToken;\r\n\r\n    /**\r\n     * @param _nexus            Address of the Nexus\r\n     * @param _lp               Address of liquidity provider. eg mAsset or feeder pool\r\n     * @param _rewardToken      Reward token, if any. eg COMP\r\n     */\r\n    constructor(\r\n        address _nexus,\r\n        address _lp,\r\n        address _rewardToken\r\n    ) AbstractIntegration(_nexus, _lp) {\r\n        rewardToken = _rewardToken;\r\n    }\r\n\r\n    /***************************************\r\n                    ADMIN\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Approves Liquidator to spend reward tokens\r\n     */\r\n    function approveRewardToken()\r\n        external\r\n        onlyGovernor\r\n    {\r\n        address liquidator = nexus.getModule(keccak256(\"Liquidator\"));\r\n        require(liquidator != address(0), \"Liquidator address is zero\");\r\n\r\n        MassetHelpers.safeInfiniteApprove(rewardToken, liquidator);\r\n\r\n        emit RewardTokenApproved(rewardToken, liquidator);\r\n    }\r\n\r\n    /***************************************\r\n                    CORE\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Deposit a quantity of bAsset into the platform. Credited cTokens\r\n     *      remain here in the vault. Can only be called by whitelisted addresses\r\n     *      (mAsset and corresponding BasketManager)\r\n     * @param _bAsset              Address for the bAsset\r\n     * @param _amount              Units of bAsset to deposit\r\n     * @param isTokenFeeCharged    Flag that signals if an xfer fee is charged on bAsset\r\n     * @return quantityDeposited   Quantity of bAsset that entered the platform\r\n     */\r\n    function deposit(\r\n        address _bAsset,\r\n        uint256 _amount,\r\n        bool isTokenFeeCharged\r\n    )\r\n        external\r\n        override\r\n        onlyLP\r\n        nonReentrant\r\n        returns (uint256 quantityDeposited)\r\n    {\r\n        require(_amount > 0, \"Must deposit something\");\r\n\r\n        // Get the Target token\r\n        ICERC20 cToken = _getCTokenFor(_bAsset);\r\n\r\n        quantityDeposited = _amount;\r\n\r\n        if(isTokenFeeCharged) {\r\n            // If we charge a fee, account for it\r\n            uint256 prevBal = _checkBalance(cToken);\r\n            require(cToken.mint(_amount) == 0, \"cToken mint failed\");\r\n            uint256 newBal = _checkBalance(cToken);\r\n            quantityDeposited = _min(quantityDeposited, newBal - prevBal);\r\n        } else {\r\n            // Else just execute the mint\r\n            require(cToken.mint(_amount) == 0, \"cToken mint failed\");\r\n        }\r\n\r\n        emit Deposit(_bAsset, address(cToken), quantityDeposited);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Withdraw a quantity of bAsset from Compound\r\n     * @param _receiver     Address to which the withdrawn bAsset should be sent\r\n     * @param _bAsset       Address of the bAsset\r\n     * @param _amount       Units of bAsset to withdraw\r\n     * @param _hasTxFee     Is the bAsset known to have a tx fee?\r\n     */\r\n    function withdraw(\r\n        address _receiver,\r\n        address _bAsset,\r\n        uint256 _amount,\r\n        bool _hasTxFee\r\n    )\r\n        external\r\n        override\r\n        onlyLP\r\n        nonReentrant\r\n    {\r\n        _withdraw(_receiver, _bAsset, _amount, _amount, _hasTxFee);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw a quantity of bAsset from Compound\r\n     * @param _receiver     Address to which the withdrawn bAsset should be sent\r\n     * @param _bAsset       Address of the bAsset\r\n     * @param _amount       Units of bAsset to withdraw\r\n     * @param _totalAmount  Total units to pull from lending platform\r\n     * @param _hasTxFee     Is the bAsset known to have a tx fee?\r\n     */\r\n    function withdraw(\r\n        address _receiver,\r\n        address _bAsset,\r\n        uint256 _amount,\r\n        uint256 _totalAmount,\r\n        bool _hasTxFee\r\n    )\r\n        external\r\n        override\r\n        onlyLP\r\n        nonReentrant\r\n    {\r\n        _withdraw(_receiver, _bAsset, _amount, _totalAmount, _hasTxFee);\r\n    }\r\n\r\n    function _withdraw(\r\n        address _receiver,\r\n        address _bAsset,\r\n        uint256 _amount,\r\n        uint256 _totalAmount,\r\n        bool _hasTxFee\r\n    )\r\n        internal\r\n    {\r\n        require(_totalAmount > 0, \"Must withdraw something\");\r\n        require(_receiver != address(0), \"Must specify recipient\");\r\n\r\n        // Get the Target token\r\n        ICERC20 cToken = _getCTokenFor(_bAsset);\r\n\r\n        // If redeeming 0 cTokens, just skip, else COMP will revert\r\n        // Reason for skipping: to ensure that redeemMasset is always able to execute\r\n        uint256 cTokensToRedeem = _convertUnderlyingToCToken(cToken, _totalAmount);\r\n        if(cTokensToRedeem == 0) {\r\n            emit SkippedWithdrawal(_bAsset, _totalAmount);\r\n            return;\r\n        }\r\n\r\n        uint256 userWithdrawal = _amount;\r\n\r\n        if(_hasTxFee) {\r\n            require(_amount == _totalAmount, \"Cache inactive with tx fee\");\r\n            IERC20 b = IERC20(_bAsset);\r\n            uint256 prevBal = b.balanceOf(address(this));\r\n            require(cToken.redeemUnderlying(_amount) == 0, \"redeem failed\");\r\n            uint256 newBal = b.balanceOf(address(this));\r\n            userWithdrawal = _min(userWithdrawal, newBal - prevBal);\r\n        } else {\r\n            // Redeem Underlying bAsset amount\r\n            require(cToken.redeemUnderlying(_totalAmount) == 0, \"redeem failed\");\r\n        }\r\n\r\n        // Send redeemed bAsset to the receiver\r\n        IERC20(_bAsset).safeTransfer(_receiver, userWithdrawal);\r\n\r\n        emit PlatformWithdrawal(_bAsset, address(cToken), _totalAmount, _amount);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Withdraw a quantity of bAsset from the cache.\r\n     * @param _receiver     Address to which the bAsset should be sent\r\n     * @param _bAsset       Address of the bAsset\r\n     * @param _amount       Units of bAsset to withdraw\r\n     */\r\n    function withdrawRaw(\r\n        address _receiver,\r\n        address _bAsset,\r\n        uint256 _amount\r\n    )\r\n        external\r\n        override\r\n        onlyLP\r\n        nonReentrant\r\n    {\r\n        require(_amount > 0, \"Must withdraw something\");\r\n        require(_receiver != address(0), \"Must specify recipient\");\r\n\r\n        IERC20(_bAsset).safeTransfer(_receiver, _amount);\r\n\r\n        emit Withdrawal(_bAsset, address(0), _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total bAsset value held in the platform\r\n     *      This includes any interest that was generated since depositing\r\n     *      Compound exchange rate between the cToken and bAsset gradually increases,\r\n     *      causing the cToken to be worth more corresponding bAsset.\r\n     * @param _bAsset     Address of the bAsset\r\n     * @return balance    Total value of the bAsset in the platform\r\n     */\r\n    function checkBalance(address _bAsset)\r\n        external\r\n        override\r\n        view\r\n        returns (uint256 balance)\r\n    {\r\n        // balance is always with token cToken decimals\r\n        ICERC20 cToken = _getCTokenFor(_bAsset);\r\n        balance = _checkBalance(cToken);\r\n    }\r\n\r\n    /***************************************\r\n                    APPROVALS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Re-approve the spending of all bAssets by their corresponding cToken,\r\n     *      if for some reason is it necessary. Only callable through Governance.\r\n     */\r\n    function reApproveAllTokens()\r\n        external\r\n        onlyGovernor\r\n    {\r\n        uint256 bAssetCount = bAssetsMapped.length;\r\n        for(uint i = 0; i < bAssetCount; i++){\r\n            address bAsset = bAssetsMapped[i];\r\n            address cToken = bAssetToPToken[bAsset];\r\n            MassetHelpers.safeInfiniteApprove(bAsset, cToken);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal method to respond to the addition of new bAsset / cTokens\r\n     *      We need to approve the cToken and give it permission to spend the bAsset\r\n     * @param _bAsset Address of the bAsset to approve\r\n     * @param _cToken This cToken has the approval approval\r\n     */\r\n    function _abstractSetPToken(address _bAsset, address _cToken)\r\n        internal\r\n        override\r\n    {\r\n        // approve the pool to spend the bAsset\r\n        MassetHelpers.safeInfiniteApprove(_bAsset, _cToken);\r\n    }\r\n\r\n    /***************************************\r\n                    HELPERS\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Get the cToken wrapped in the ICERC20 interface for this bAsset.\r\n     *      Fails if the pToken doesn't exist in our mappings.\r\n     * @param _bAsset   Address of the bAsset\r\n     * @return cToken   Corresponding cToken to this bAsset\r\n     */\r\n    function _getCTokenFor(address _bAsset)\r\n        internal\r\n        view\r\n        returns (ICERC20 cToken)\r\n    {\r\n        address cTokenAddress = bAssetToPToken[_bAsset];\r\n        require(cTokenAddress != address(0), \"cToken does not exist\");\r\n        cToken = ICERC20(cTokenAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total bAsset value held in the platform\r\n     *          underlying = (cTokenAmt * exchangeRate) / 1e18\r\n     * @param _cToken     cToken for which to check balance\r\n     * @return balance    Total value of the bAsset in the platform\r\n     */\r\n    function _checkBalance(ICERC20 _cToken)\r\n        internal\r\n        view\r\n        returns (uint256 balance)\r\n    {\r\n        uint256 cTokenBalance = _cToken.balanceOf(address(this));\r\n        uint256 exchangeRate = _cToken.exchangeRateStored();\r\n        // e.g. 50e8*205316390724364402565641705 / 1e18 = 1.0265..e18\r\n        balance = (cTokenBalance * exchangeRate) / 1e18;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an underlying amount into cToken amount\r\n     *          cTokenAmt = (underlying * 1e18) / exchangeRate\r\n     * @param _cToken     cToken for which to change\r\n     * @param _underlying Amount of underlying to convert\r\n     * @return amount     Equivalent amount of cTokens\r\n     */\r\n    function _convertUnderlyingToCToken(ICERC20 _cToken, uint256 _underlying)\r\n        internal\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        uint256 exchangeRate = _cToken.exchangeRateStored();\r\n        // e.g. 1e18*1e18 / 205316390724364402565641705 = 50e8\r\n        // e.g. 1e8*1e18 / 205316390724364402565641705 = 0.45 or 0\r\n        amount = (_underlying * 1e18) / exchangeRate;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nexus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userAmount\",\"type\":\"uint256\"}],\"name\":\"PlatformWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RewardTokenApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SkippedWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"approveRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bAssetToPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTokenFeeCharged\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quantityDeposited\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bAssets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nexus\",\"outputs\":[{\"internalType\":\"contract INexus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reApproveAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"setPTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hasTxFee\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_hasTxFee\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRaw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CompoundIntegration","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000afce80b19a8ce13dec0739a1aab7a028d6845eb30000000000000000000000004fb30c5a3ac8e85bc32785518633303c4590752d0000000000000000000000002ba592f78db6436527729929aaf6c908497cb200","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2951d24d53bcf0af4ff0fceb61f2cc0f7cd7e24e06205b3f2899e2a0e3cd256e"}]}