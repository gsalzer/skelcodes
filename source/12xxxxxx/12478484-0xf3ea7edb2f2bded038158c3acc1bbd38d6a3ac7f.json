{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/RankedAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';\\nimport {ReentrancyGuard} from '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport {IERC20Permit} from './interfaces/IERC20Permit.sol';\\nimport {AdminPausableUpgradeSafe} from './misc/AdminPausableUpgradeSafe.sol';\\nimport {WETHBase} from './misc/WETHBase.sol';\\nimport {VersionedInitializable} from './aave-upgradeability/VersionedInitializable.sol';\\nimport {DataTypes} from './libraries/DataTypes.sol';\\nimport {Errors} from './libraries/Errors.sol';\\n\\n/**\\n * @title RankedAuction contract.\\n * @author Aito\\n *\\n * @notice A simple auction contract that just stores bids and relies on an external entity to manage the auctioning\\n * logic.\\n */\\ncontract RankedAuction is\\n    VersionedInitializable,\\n    AdminPausableUpgradeSafe,\\n    WETHBase,\\n    ReentrancyGuard\\n{\\n    using SafeERC20 for IERC20Permit;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant RANKEDAUCTION_REVISION = 0x1;\\n\\n    mapping(uint256 => DataTypes.RankedAuctionData) internal _auctionsById;\\n    mapping(address => mapping(uint256 => uint256)) internal _bids;\\n    mapping(address => mapping(uint256 => bool)) internal _outbid;\\n    mapping(address => bool) internal _currencyWhitelisted;\\n\\n    uint256 internal _auctionCounter;\\n    uint40 internal _overtimeWindow;\\n\\n    /**\\n     * @notice Emitted upon contract initialization.\\n     *\\n     * @param weth The WETH address whitelisted.\\n     * @param overtimeWindow The overtime window set.\\n     */\\n    event Initialized(address weth, uint256 overtimeWindow);\\n\\n    /**\\n     * @notice Emitted when a new bid is placed or when an account's bid is increased.\\n     *\\n     * @param auctionId The auction identifier.\\n     * @param bidder The bidder address.\\n     * @param spender The address spending currency.\\n     * @param amount The bid amount.\\n     */\\n    event BidSubmitted(uint256 indexed auctionId, address bidder, address spender, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when the minimum price is updated by the admin.\\n     *\\n     * @param auctionId The auction identifier.\\n     * @param minimumPrice The auction's new minimum price.\\n     */\\n    event MinimumPriceUpdated(uint256 indexed auctionId, uint256 minimumPrice);\\n\\n    /**\\n     * @notice Emitted when an outbid bid is withdrawn.\\n     *\\n     * @param auctionId The auction identifier.\\n     * @param bidder The address of the bidder who withdrew.\\n     * @param amount The amount withdrew.\\n     */\\n    event BidWithdrew(uint256 indexed auctionId, address indexed bidder, uint256 indexed amount);\\n\\n    /**\\n     * @notice Emitted when an auction is created.\\n     *\\n     * @param auctionId The auction identifier.\\n     * @param currency The auction's underlying bid currency.\\n     * @param minPrice The minimum starting price of the auction.\\n     * @param maxWinners The expected maximum amount of NFT winners.\\n     * @param recipient The funds recipient.\\n     * @param startTimestamp The starting timestamp.\\n     * @param endTimestamp The ending timestamp.\\n     */\\n    event AuctionCreated(\\n        uint256 indexed auctionId,\\n        address indexed currency,\\n        uint256 indexed minPrice,\\n        uint256 maxWinners,\\n        address recipient,\\n        uint40 startTimestamp,\\n        uint40 endTimestamp\\n    );\\n\\n    /**\\n     * @notice Emitted when funds are received by the recipient.\\n     *\\n     * @param auctionId The auction identifier.\\n     * @param recipient The recipient address.\\n     * @param amount The amount received.\\n     */\\n    event FundsReceived(\\n        uint256 indexed auctionId,\\n        address indexed recipient,\\n        address[] bidders,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice Emitted when a currency is whitelisted.\\n     *\\n     * @param currency The newly whitelisted currency.\\n     */\\n    event CurrencyWhitelisted(address currency);\\n\\n    /**\\n     * @notice Emitted when a currency is removed from the whitelist.\\n     *\\n     * @param currency The newly unwhitelisted currency.\\n     */\\n    event CurrencyUnwhitelisted(address currency);\\n\\n    /**\\n     * @notice Emitted when user bids are manually marked as outbid. Used as a backup\\n     * when there are multiple bids of the same price.\\n     *\\n     * @param auctionId The auction identifier.\\n     * @param bidders The array of bidders outbid.\\n     */\\n    event UsersOutbid(uint256 indexed auctionId, address[] bidders);\\n\\n    /**\\n     * @notice Constructor sets the immutable WETH address.\\n     *\\n     * @param weth The WETH address.\\n     */\\n    constructor(address weth) WETHBase(weth) {}\\n\\n    /**\\n     * @notice Initializes the contract.\\n     *\\n     * @param admin The admin address to set.\\n     * @param overtimeWindow The overtime window to set.\\n     */\\n    function initialize(address admin, uint40 overtimeWindow) external initializer {\\n        require(admin != address(0) && overtimeWindow < 2 days, Errors.INVALID_INIT_PARAMS);\\n        _admin = admin;\\n        _overtimeWindow = overtimeWindow;\\n        _currencyWhitelisted[address(WETH)] = true;\\n        _paused = false;\\n\\n        emit Initialized(address(WETH), overtimeWindow);\\n    }\\n\\n    /**\\n     * @notice Creates a new auction, only available to the admin.\\n     *\\n     * @param maxWinners The total amount of winners expected, must be emitted.\\n     * @param minPrice The starting minimum price for the auction.\\n     * @param currency The currency to be used in the auction.\\n     * @param recipient The address to receive proceeds from the auction.\\n     * @param startTimestamp The starting timestamp for the auction.\\n     * @param endTimestamp The ending timestamp for the auction.\\n     */\\n    function createAuction(\\n        uint256 maxWinners,\\n        address currency,\\n        uint256 minPrice,\\n        address recipient,\\n        uint40 startTimestamp,\\n        uint40 endTimestamp\\n    ) external nonReentrant onlyAdmin whenNotPaused {\\n        require(recipient != address(0), Errors.ZERO_RECIPIENT);\\n        require(currency != address(0), Errors.ZERO_CURRENCY);\\n        require(_currencyWhitelisted[currency], Errors.CURRENCY_NOT_WHITELSITED);\\n        require(\\n            startTimestamp > block.timestamp && endTimestamp > startTimestamp,\\n            Errors.INVALID_AUCTION_TIMESTAMPS\\n        );\\n        DataTypes.RankedAuctionData storage auction = _auctionsById[_auctionCounter];\\n        auction.minPrice = minPrice;\\n        auction.recipient = recipient;\\n        auction.currency = currency;\\n        auction.startTimestamp = startTimestamp;\\n        auction.endTimestamp = endTimestamp;\\n\\n        emit AuctionCreated(\\n            _auctionCounter++,\\n            currency,\\n            minPrice,\\n            maxWinners,\\n            recipient,\\n            startTimestamp,\\n            endTimestamp\\n        );\\n    }\\n\\n    /**\\n     * @notice Bids on the auction.\\n     *\\n     * @param auctionId The auction identifier.\\n     * @param onBehalfOf The address to bid on behalf of.\\n     * @param amount The amount to bid.\\n     */\\n    function bid(\\n        uint256 auctionId,\\n        address onBehalfOf,\\n        uint256 amount\\n    ) external nonReentrant whenNotPaused {\\n        _bid(auctionId, msg.sender, onBehalfOf, amount);\\n    }\\n\\n    /**\\n     * @notice Bids bypassing an 'approval' transaction by bundling the bid with a permit on the underlying asset.\\n     *\\n     * @param auctionId The auction identifier.\\n     * @param params The parameters containing the necessary data to execute the 'permit' and the 'bid.'\\n     */\\n    function bidWithPermit(uint256 auctionId, DataTypes.SimpleBidWithPermitParams calldata params)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        IERC20Permit currency = IERC20Permit(_auctionsById[auctionId].currency);\\n        currency.permit(\\n            msg.sender,\\n            address(this),\\n            params.amount,\\n            params.deadline,\\n            params.v,\\n            params.r,\\n            params.s\\n        );\\n        _bid(auctionId, msg.sender, params.onBehalfOf, params.amount);\\n    }\\n\\n    /**\\n     * @dev Sets the minimum price for new bids, allowing lower bids to withdraw.\\n     *\\n     * @param auctionId The auction identifier.\\n     * @param newMinimum New minimum bid price.\\n     */\\n    function updateMinimumPrice(uint256 auctionId, uint256 newMinimum)\\n        external\\n        nonReentrant\\n        onlyAdmin\\n    {\\n        _auctionsById[auctionId].minPrice = newMinimum;\\n\\n        emit MinimumPriceUpdated(auctionId, newMinimum);\\n    }\\n\\n    /**\\n     * @dev Sets user bids as manually outbid, in case bids are placed at the same price, causing the\\n     * minimum price to not allow users to withdraw their bids.\\n     *\\n     * @param auctionId The auction identifier.\\n     * @param toOutbid The array of addresses to mark as outbid.\\n     */\\n    function setOutbid(uint256 auctionId, address[] calldata toOutbid)\\n        external\\n        nonReentrant\\n        onlyAdmin\\n    {\\n        for (uint256 i = 0; i < toOutbid.length; i++) {\\n            require(_bids[toOutbid[i]][auctionId] > 0, Errors.INVALID_BID_AMOUNT);\\n            _outbid[toOutbid[i]][auctionId] = true;\\n        }\\n\\n        emit UsersOutbid(auctionId, toOutbid);\\n    }\\n\\n    /**\\n     * @notice Withdraws the caller's bid if it is outbid.\\n     *\\n     * @param auctionId The auction identifier.\\n     */\\n    function withdrawBid(uint256 auctionId) external nonReentrant whenNotPaused {\\n        DataTypes.RankedAuctionData storage auction = _auctionsById[auctionId];\\n        uint256 returnAmount = _bids[msg.sender][auctionId];\\n        require(\\n            (returnAmount > 0 && returnAmount < auction.minPrice) || _outbid[msg.sender][auctionId],\\n            Errors.RA_NOT_OUTBID\\n        );\\n        IERC20Permit currency = IERC20Permit(auction.currency);\\n        delete (_bids[msg.sender][auctionId]);\\n        delete (_outbid[msg.sender][auctionId]);\\n\\n        if (address(currency) == address(WETH)) {\\n            WETH.withdraw(returnAmount);\\n            (bool success, ) = msg.sender.call{value: returnAmount}(new bytes(0));\\n            if (!success) {\\n                WETH.deposit{value: returnAmount}();\\n                IERC20Permit(address(WETH)).safeTransferFrom(\\n                    address(this),\\n                    msg.sender,\\n                    returnAmount\\n                );\\n            }\\n        } else {\\n            currency.safeTransfer(msg.sender, returnAmount);\\n        }\\n\\n        emit BidWithdrew(auctionId, msg.sender, returnAmount);\\n    }\\n\\n    /**\\n     * @notice Transfers the funds from winning bids to the recipient address.\\n     *\\n     * @param auctionId The auction identifier.\\n     * @param toReceive winning bid addresses to transfer bid amounts from.\\n     */\\n    function receiveFunds(uint256 auctionId, address[] calldata toReceive)\\n        external\\n        nonReentrant\\n        onlyAdmin\\n    {\\n        DataTypes.RankedAuctionData storage auction = _auctionsById[auctionId];\\n        uint256 endTimestamp = auction.endTimestamp;\\n        uint256 minPrice = auction.minPrice;\\n        uint256 amountToTransfer;\\n        address recipient = auction.recipient;\\n        IERC20Permit currency = IERC20Permit(auction.currency);\\n        require(block.timestamp > endTimestamp, Errors.INVALID_AUCTION_TIMESTAMPS);\\n\\n        for (uint256 i = 0; i < toReceive.length; i++) {\\n            require(!_outbid[toReceive[i]][auctionId], Errors.RA_OUTBID);\\n            uint256 bidAmount = _bids[toReceive[i]][auctionId];\\n            require(bidAmount >= minPrice, Errors.RA_OUTBID);\\n            amountToTransfer = amountToTransfer.add(bidAmount);\\n            delete (_bids[toReceive[i]][auctionId]);\\n        }\\n        currency.safeTransfer(recipient, amountToTransfer);\\n\\n        emit FundsReceived(auctionId, recipient, toReceive, amountToTransfer);\\n    }\\n\\n    /**\\n     * @dev Admin function to whitelist a currency.\\n     *\\n     * @param toWhitelist The currency address to whitelist.\\n     */\\n    function whitelistCurrency(address toWhitelist) external onlyAdmin {\\n        _currencyWhitelisted[toWhitelist] = true;\\n        emit CurrencyWhitelisted(toWhitelist);\\n    }\\n\\n    /**\\n     * @dev Admin function to remove a whitelisted currency.\\n     *\\n     * @param toRemove The currency address to remove from the whitelist.\\n     */\\n    function removeCurrencyFromWhitelist(address toRemove) external onlyAdmin {\\n        _currencyWhitelisted[toRemove] = false;\\n        emit CurrencyUnwhitelisted(toRemove);\\n    }\\n\\n    /**\\n     * @dev transfer native Ether, for native Ether recovery in case of stuck Ether\\n     * due selfdestructs or transfer ether to pre-computated contract address before deployment.\\n     *\\n     * @param to recipient of the transfer\\n     * @param amount amount to send\\n     */\\n    function emergencyEtherTransfer(address to, uint256 amount) external onlyAdmin {\\n        _safeTransferETH(to, amount);\\n    }\\n\\n    /**\\n     * @notice Returns the auction data for a given auction ID.\\n     *\\n     * @return The RankedAuctionData struct containing the auction's parameters.\\n     */\\n    function getAuctionData(uint256 auctionId)\\n        external\\n        view\\n        returns (DataTypes.RankedAuctionData memory)\\n    {\\n        return _auctionsById[auctionId];\\n    }\\n\\n    /**\\n     * @notice Returns a specific bid data query.\\n     *\\n     * @param bidder The bidder to query the bid for.\\n     * @param auctionId The auction ID to query the bid for.\\n     */\\n    function getBid(address bidder, uint256 auctionId) external view returns (uint256) {\\n        return _bids[bidder][auctionId];\\n    }\\n\\n    /**\\n     * @notice Returns the overtime window.\\n     *\\n     * @return The overtime window.\\n     */\\n    function getOvertimeWindow() external view returns (uint256) {\\n        return _overtimeWindow;\\n    }\\n\\n    /**\\n     * @notice Returns whether a currency address is whitelisted and allowed to be used in the auction.\\n     *\\n     * @param query The address to query.\\n     */\\n    function isWhitelisted(address query) external view returns (bool) {\\n        return _currencyWhitelisted[query];\\n    }\\n\\n    /**\\n     * @dev Internal function executes the underlying logic of a bid.\\n     *\\n     * @param auctionId The auction identifier.\\n     * @param spender The spender to transfer currency from.\\n     * @param onBehalfOf The address to bid on behalf of.\\n     * @param amount The amount to bid with.\\n     */\\n    function _bid(\\n        uint256 auctionId,\\n        address spender,\\n        address onBehalfOf,\\n        uint256 amount\\n    ) internal {\\n        DataTypes.RankedAuctionData storage auction = _auctionsById[auctionId];\\n        uint256 minPrice = auction.minPrice;\\n        IERC20Permit currency = IERC20Permit(auction.currency);\\n        uint40 startTimestamp = auction.startTimestamp;\\n        uint40 endTimestamp = auction.endTimestamp;\\n        require(onBehalfOf != address(0), Errors.INVALID_BIDDER);\\n        require(amount > minPrice, Errors.INVALID_BID_AMOUNT);\\n        require(\\n            block.timestamp > startTimestamp && block.timestamp < endTimestamp,\\n            Errors.INVALID_BID_TIMESTAMPS\\n        );\\n        if (_overtimeWindow > 0 && block.timestamp > endTimestamp - _overtimeWindow) {\\n            endTimestamp = endTimestamp + _overtimeWindow;\\n        }\\n\\n        uint256 previousBid = _bids[onBehalfOf][auctionId];\\n        _bids[onBehalfOf][auctionId] = amount;\\n        if (amount > previousBid) {\\n            currency.safeTransferFrom(spender, address(this), amount - previousBid);\\n        } else {\\n            revert(Errors.INVALID_BID_AMOUNT);\\n        }\\n\\n        emit BidSubmitted(auctionId, onBehalfOf, spender, amount);\\n    }\\n\\n    function getRevision() internal pure override returns (uint256) {\\n        return RANKEDAUCTION_REVISION;\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == address(WETH));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IERC20Permit is IERC20 {\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/misc/AdminPausableUpgradeSafe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport {Errors} from '../libraries/Errors.sol';\\n\\n/**\\n * @title AdminPausableUpgradeSafe\\n *\\n * @author Aito\\n * \\n * @dev Contract to be inherited from that adds simple administrator pausable functionality. This does not\\n * implement any changes on its own as there is no constructor or initializer. Both _admin and _paused must\\n * be initialized in the inheriting contract.\\n */\\ncontract AdminPausableUpgradeSafe {\\n    address internal _admin;\\n    bool internal _paused;\\n    \\n    /**\\n     * @notice Emitted when the contract is paused.\\n     * \\n     * @param admin The current administrator address.\\n     */\\n    event Paused(address admin);\\n\\n    /**\\n     * @notice Emitted when the contract is unpaused.\\n     *\\n     * @param admin The current administrator address.\\n     */\\n    event Unpaused(address admin);\\n\\n    /**\\n     * @notice Emitted when the admin is set to a different address.\\n     * \\n     * @param to The address of the new administrator. \\n     */\\n    event AdminChanged(address to);\\n\\n    constructor() {\\n        _paused = true;\\n    }\\n\\n    /**\\n     * @dev Modifier to only allow functions to be called when not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, Errors.PAUSED);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to only allow the admin as the caller.\\n     */\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, Errors.NOT_ADMIN);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Admin function pauses the contract.\\n     */\\n    function pause() external onlyAdmin {\\n        _paused = true;\\n        emit Paused(_admin);\\n    }\\n\\n    /**\\n     * @dev Admin function unpauses the contract.\\n     */\\n    function unpause() external onlyAdmin {\\n        _paused = false;\\n        emit Unpaused(_admin);\\n    }\\n\\n    /**\\n     * @dev Admin function that changes the administrator.\\n     */\\n    function changeAdmin(address to) external onlyAdmin {\\n        _admin = to;\\n        emit AdminChanged(to);\\n    }\\n\\n    /**\\n     * @dev View function that returns the current admin.\\n     */\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n}\"\r\n    },\r\n    \"contracts/misc/WETHBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport {IWETH} from '../interfaces/IWETH.sol';\\n\\ncontract WETHBase {\\n\\n    IWETH public immutable WETH;\\n\\n    /**\\n     * @notice Constructor sets the immutable WETH address.\\n     */\\n    constructor(address weth) {\\n        WETH = IWETH(weth);\\n    }\\n\\n    /**\\n    * @dev transfer ETH to an address, revert if it fails.\\n    * @param to recipient of the transfer\\n    * @param value the amount to send\\n    */\\n    function _safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'ETH_TRANSFER_FAILED');\\n    }    \\n}\"\r\n    },\r\n    \"contracts/aave-upgradeability/VersionedInitializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.7.6;\\n\\n/**\\n * @title VersionedInitializable\\n *\\n * @dev Helper contract to implement initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n *\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n */\\nabstract contract VersionedInitializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  uint256 private lastInitializedRevision = 0;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    uint256 revision = getRevision();\\n    require(\\n      initializing || isConstructor() || revision > lastInitializedRevision,\\n      'Contract instance has already been initialized'\\n    );\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      lastInitializedRevision = revision;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /**\\n   * @dev returns the revision number of the contract\\n   * Needs to be defined in the inherited class as a constant.\\n   **/\\n  function getRevision() internal pure virtual returns (uint256);\\n\\n  /**\\n   * @dev Returns true if and only if the function is running in the constructor\\n   **/\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    uint256 cs;\\n    //solium-disable-next-line\\n    assembly {\\n      cs := extcodesize(address())\\n    }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\"\r\n    },\r\n    \"contracts/libraries/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\n/// Library containing data types needed for the NFT controller & vaults\\nlibrary DataTypes {\\n    struct DistributionData {\\n        address recipient;\\n        uint256 bps;\\n    }\\n\\n    struct StakingAuctionFullData {\\n        StakingAuctionData auction;\\n        DistributionData[] distribution;\\n        uint256 auctionId;\\n        address auctioner;\\n        address vault;\\n    }\\n\\n    struct StakingAuctionData {\\n        uint256 currentBid;\\n        address currentBidder;\\n        uint40 startTimestamp;\\n        uint40 endTimestamp;\\n    }\\n\\n    struct StakingAuctionConfiguration {\\n        address vaultLogic;\\n        address treasury;\\n        uint40 minimumAuctionDuration;\\n        uint40 overtimeWindow;\\n        uint16 treasuryFeeBps;\\n        uint16 burnPenaltyBps;\\n    }\\n\\n    struct GenericAuctionFullData {\\n        GenericAuctionData auction;\\n        DistributionData[] distribution;\\n        uint256 auctionId;\\n        address auctioner;\\n    }\\n\\n    struct GenericAuctionData {\\n        uint256 currentBid;\\n        address currency;\\n        address currentBidder;\\n        uint40 startTimestamp;\\n        uint40 endTimestamp;\\n    }\\n\\n    struct GenericAuctionConfiguration {\\n        address treasury;\\n        uint40 minimumAuctionDuration;\\n        uint40 overtimeWindow;\\n        uint16 treasuryFeeBps;\\n    }\\n\\n    struct RankedAuctionData {\\n        uint256 minPrice;\\n        address recipient;\\n        address currency;\\n        uint40 startTimestamp;\\n        uint40 endTimestamp;\\n    }\\n\\n    struct ReserveAuctionFullData {\\n        ReserveAuctionData auction;\\n        DistributionData[] distribution;\\n        uint256 auctionId;\\n        address auctioner;\\n    }\\n\\n    struct ReserveAuctionData {\\n        uint256 currentBid;\\n        uint256 buyNow;\\n        address currency;\\n        address currentBidder;\\n        uint40 duration;\\n        uint40 firstBidTimestamp;\\n        uint40 endTimestamp;\\n    }\\n\\n    struct OpenEditionFullData {\\n        DistributionData[] distribution;\\n        OpenEditionSaleData saleData;\\n    }\\n\\n    struct OpenEditionSaleData {\\n        uint256 price;\\n        address currency;\\n        address nft;\\n        uint40 startTimestamp;\\n        uint40 endTimestamp;\\n    }\\n\\n    struct OpenEditionConfiguration {\\n        address treasury;\\n        uint40 minimumAuctionDuration;\\n        uint16 treasuryFeeBps;\\n    }\\n\\n    struct OpenEditionBuyWithPermitParams {\\n        uint256 id;\\n        uint256 amount;\\n        uint256 permitAmount;\\n        uint256 deadline;\\n        address onBehalfOf;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct BidWithPermitParams {\\n        uint256 amount;\\n        uint256 deadline;\\n        uint256 nftId;\\n        address onBehalfOf;\\n        address nft;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct SimpleBidWithPermitParams {\\n        uint256 amount;\\n        uint256 deadline;\\n        address onBehalfOf;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    enum CallType {Call, DelegateCall}\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\n/// Contains error code strings\\nlibrary Errors {\\n  string public constant INVALID_AUCTION_TIMESTAMPS = '1';\\n  string public constant INVALID_BID_TIMESTAMPS = '2';\\n  string public constant INVALID_BID_AMOUNT = '3';\\n  string public constant AUCTION_ONGOING = '4';\\n  string public constant VALID_BIDDER = '5';\\n  string public constant NONEXISTANT_VAULT = '6';\\n  string public constant INVALID_DISTRIBUTION_BPS = '7';\\n  string public constant AUCTION_EXISTS = '8';\\n  string public constant NOT_STAKING_AUCTION = '9';\\n  string public constant INVALID_CALL_TYPE = '10';\\n  string public constant INVALID_AUCTION_DURATION = '11';\\n  string public constant INVALID_BIDDER = '12';\\n  string public constant PAUSED = '13';\\n  string public constant NOT_ADMIN = '14';\\n  string public constant INVALID_INIT_PARAMS = '15';\\n  string public constant INVALID_DISTRIBUTION_COUNT = '16';\\n  string public constant ZERO_RECIPIENT = '17';\\n  string public constant ZERO_CURRENCY = '18';\\n  string public constant RA_NOT_OUTBID = '19';\\n  string public constant RA_OUTBID = '20';\\n  string public constant NO_DISTRIBUTIONS = '21';\\n  string public constant VAULT_ARRAY_MISMATCH = '22';\\n  string public constant CURRENCY_NOT_WHITELSITED = '23';\\n  string public constant NOT_NFT_OWNER = '24';\\n  string public constant ZERO_NFT = '25';\\n  string public constant NOT_COLLECTION_CREATOR = '26';\\n  string public constant INVALID_BUY_NOW = '27';\\n  string public constant INVALID_RESERVE_PRICE = '28';\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\ninterface IWETH {\\n\\n  function balanceOf(address guy) external returns (uint256);\\n\\n  function deposit() external payable;\\n\\n  function withdraw(uint256 wad) external;\\n\\n  function approve(address guy, uint256 wad) external returns (bool);\\n\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 wad\\n  ) external returns (bool);\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWinners\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"startTimestamp\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"endTimestamp\",\"type\":\"uint40\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidWithdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"CurrencyUnwhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"CurrencyWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"bidders\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"overtimeWindow\",\"type\":\"uint256\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumPrice\",\"type\":\"uint256\"}],\"name\":\"MinimumPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"bidders\",\"type\":\"address[]\"}],\"name\":\"UsersOutbid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RANKEDAUCTION_REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct DataTypes.SimpleBidWithPermitParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"bidWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWinners\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"startTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endTimestamp\",\"type\":\"uint40\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyEtherTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuctionData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"startTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endTimestamp\",\"type\":\"uint40\"}],\"internalType\":\"struct DataTypes.RankedAuctionData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOvertimeWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"overtimeWindow\",\"type\":\"uint40\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"query\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"toReceive\",\"type\":\"address[]\"}],\"name\":\"receiveFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toRemove\",\"type\":\"address\"}],\"name\":\"removeCurrencyFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"toOutbid\",\"type\":\"address[]\"}],\"name\":\"setOutbid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMinimum\",\"type\":\"uint256\"}],\"name\":\"updateMinimumPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toWhitelist\",\"type\":\"address\"}],\"name\":\"whitelistCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"withdrawBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"RankedAuction","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}