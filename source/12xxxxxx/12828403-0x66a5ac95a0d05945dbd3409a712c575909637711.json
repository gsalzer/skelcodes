{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.3.3 https://hardhat.org\r\n\r\n// File contracts/core/ArmorToken.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n/*\r\n    Copyright 2016, Jordi Baylina\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\n// This minime token contract adjusted by ArmorFi to remove all functionality of\r\n// inheriting from a parent and only keep functionality related to keeping track of\r\n// balances through different checkpoints.\r\n\r\n/// @title MiniMeToken Contract\r\n/// @author Jordi Baylina\r\n/// @dev This token contract's goal is to make it easy for anyone to clone this\r\n///  token using the token distribution at a given block, this will allow DAO's\r\n///  and DApps to upgrade their features in a decentralized manner without\r\n///  affecting the original token\r\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\r\n\r\n\r\n/// @dev The actual token contract, the default controller is the msg.sender\r\n///  that deploys the contract, so usually this token will be deployed by a\r\n///  token controller contract, which Giveth will call a \"Campaign\"\r\ncontract ArmorToken {\r\n\r\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\r\n    uint8 public decimals;             //Number of decimals of the smallest unit\r\n    string public symbol;              //An identifier: e.g. REP\r\n    string public version = '69_420'; //An arbitrary versioning scheme\r\n\r\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\r\n    ///  given value, the block number attached is the one that last changed the\r\n    ///  value\r\n    struct  Checkpoint {\r\n\r\n        // `fromBlock` is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n\r\n        // `value` is the amount of tokens at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n    // `creationBlock` is the block number that the Clone Token was created\r\n    uint public creationBlock;\r\n\r\n    // `balances` is the map that tracks the balance of each address, in this\r\n    //  contract when the balance changes the block number that the change\r\n    //  occurred is also included in the map\r\n    mapping (address => Checkpoint[]) balances;\r\n\r\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n\r\n    // Tracks the history of the `totalSupply` of the token\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    // Shield that is allowed to mint tokens to peeps.\r\n    address public arShield;\r\n    // ShieldController--can just withdraw tokens.\r\n    address public controller;\r\n\r\n////////////////\r\n// Constructor\r\n////////////////\r\n\r\n    /// @notice Constructor to create a MiniMeToken\r\n    /// @param _tokenName Name of the new token\r\n    /// @param _tokenSymbol Token Symbol for the new token\r\n    constructor(\r\n        address _arShield,\r\n        string memory _tokenName,\r\n        string memory _tokenSymbol\r\n    ) \r\n    {\r\n        require(arShield == address(0), \"Contract already initialized.\");\r\n        arShield = _arShield;\r\n        name = _tokenName;                                 // Set the name\r\n        decimals = 18;                                     // Set the decimals\r\n        symbol = _tokenSymbol;                             // Set the symbol\r\n        creationBlock = block.number;\r\n        controller = msg.sender;\r\n    }\r\n\r\n    modifier onlyController\r\n    {\r\n        require(msg.sender == controller, \"Sender must be controller.\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyShield\r\n    {\r\n        require(msg.sender == arShield, \"Sender must be shield.\");\r\n        _;\r\n    }\r\n\r\n///////////////////\r\n// ERC20 Methods\r\n///////////////////\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return success Whether the transfer was successful or not\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\r\n        doTransfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\r\n    ///  is approved by `_from`\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    /// @return success True if the transfer was successful\r\n    function transferFrom(address _from, address _to, uint256 _amount\r\n    ) public returns (bool success) {\r\n\r\n        // The controller of this contract can move tokens around at will,\r\n        //  this is important to recognize! Confirm that you trust the\r\n        //  controller of this contract, which in most situations should be\r\n        //  another open source smart contract or 0x0\r\n\r\n        // The standard ERC 20 transferFrom functionality\r\n        require(allowed[_from][msg.sender] >= _amount);\r\n        allowed[_from][msg.sender] -= _amount;\r\n\r\n        doTransfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This is the actual transfer function in the token contract, it can\r\n    ///  only be called by other functions in this contract.\r\n    /// @param _from The address holding the tokens being transferred\r\n    /// @param _to The address of the recipient\r\n    /// @param _amount The amount of tokens to be transferred\r\n    function doTransfer(address _from, address _to, uint _amount\r\n    ) internal {\r\n\r\n           if (_amount == 0) {\r\n               emit Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\r\n               return;\r\n           }\r\n\r\n           // Do not allow transfer to 0x0 or the token contract itself\r\n           require(_to != address(this));\r\n\r\n           // If the amount being transfered is more than the balance of the\r\n           //  account the transfer throws\r\n           uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\r\n\r\n           require(previousBalanceFrom >= _amount);\r\n\r\n           // First update the balance array with the new value for the address\r\n           //  sending the tokens\r\n           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\r\n\r\n           // Then update the balance array with the new value for the address\r\n           //  receiving the tokens\r\n           uint256 previousBalanceTo = balanceOfAt(_to, block.number);\r\n           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\r\n\r\n           // An event to make the transfer easy to find on the blockchain\r\n           emit Transfer(_from, _to, _amount);\r\n\r\n    }\r\n\r\n    /// @param _owner The address that's balance is being requested\r\n    /// @return balance The balance of `_owner` at the current block\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\r\n    ///  its behalf. This is a modified version of the ERC20 approve function\r\n    ///  to be a little bit safer\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @param _amount The amount of tokens to be approved for transfer\r\n    /// @return success True if the approval was successful\r\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\r\n\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        \r\n        // Armor is removing this cause frankly it's a bit annoying and so unlikely.\r\n        //require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    /// @dev This function makes it easy to read the `allowed[]` map\r\n    /// @param _owner The address of the account that owns the token\r\n    /// @param _spender The address of the account able to transfer the tokens\r\n    /// @return remaining Amount of remaining tokens of _owner that _spender is allowed\r\n    ///  to spend\r\n    function allowance(address _owner, address _spender\r\n    ) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of tokens\r\n    /// @return The total number of tokens\r\n    function totalSupply() public view returns (uint) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n\r\n////////////////\r\n// Query balance and totalSupply in History\r\n////////////////\r\n\r\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\r\n    /// @param _owner The address from which the balance will be retrieved\r\n    /// @param _blockNumber The block number when the balance is queried\r\n    /// @return The balance at `_blockNumber`\r\n    function balanceOfAt(address _owner, uint _blockNumber) public view\r\n        returns (uint) {\r\n\r\n        // These next few lines are used when the balance of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.balanceOfAt` be queried at the\r\n        //  genesis block for that token as this contains initial balance of\r\n        //  this token\r\n        if ((balances[_owner].length == 0)\r\n            || (balances[_owner][0].fromBlock > _blockNumber)) {\r\n                return 0;\r\n        // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\r\n    /// @param _blockNumber The block number when the totalSupply is queried\r\n    /// @return The total amount of tokens at `_blockNumber`\r\n    function totalSupplyAt(uint _blockNumber) public view returns(uint) {\r\n\r\n        // These next few lines are used when the totalSupply of the token is\r\n        //  requested before a check point was ever created for this token, it\r\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\r\n        //  genesis block for this token as that contains totalSupply of this\r\n        //  token at this block number.\r\n        if ((totalSupplyHistory.length == 0)\r\n            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\r\n                return 0;\r\n        // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n////////////////\r\n// Generate and destroy tokens\r\n////////////////\r\n\r\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\r\n    /// @param _owner The address that will be assigned the new tokens\r\n    /// @param _amount The quantity of tokens generated\r\n    /// @return True if the tokens are generated correctly\r\n    function mint(address _owner, uint _amount\r\n    ) public onlyShield returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\r\n        uint previousBalanceTo = balanceOf(_owner);\r\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\r\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\r\n        emit Transfer(address(0), _owner, _amount);\r\n        return true;\r\n    }\r\n\r\n\r\n    /// @notice Burns `_amount` tokens from `_owner`\r\n    /// @param _amount The quantity of tokens to burn\r\n    /// @return True if the tokens are burned correctly\r\n    function burn(uint _amount\r\n    )  public returns (bool) {\r\n        uint curTotalSupply = totalSupply();\r\n        require(curTotalSupply >= _amount);\r\n        uint previousBalanceFrom = balanceOf(msg.sender);\r\n        require(previousBalanceFrom >= _amount);\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\r\n        updateValueAtNow(balances[msg.sender], previousBalanceFrom - _amount);\r\n        emit Transfer(msg.sender, address(0), _amount);\r\n        return true;\r\n    }\r\n\r\n////////////////\r\n// Internal helper functions to query and set a value in a snapshot array\r\n////////////////\r\n\r\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\r\n    /// @param checkpoints The history of values being queried\r\n    /// @param _block The block number to retrieve the value at\r\n    /// @return The number of tokens being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block\r\n    ) view internal returns (uint) {\r\n        if (checkpoints.length == 0) return 0;\r\n\r\n        // Shortcut for the actual value\r\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\r\n            return checkpoints[checkpoints.length-1].value;\r\n        if (_block < checkpoints[0].fromBlock) return 0;\r\n\r\n        // Binary search of the value in the array\r\n        uint minimum = 0;\r\n        uint max = checkpoints.length-1;\r\n        while (max > minimum) {\r\n            uint mid = (max + minimum + 1)/ 2;\r\n            if (checkpoints[mid].fromBlock<=_block) {\r\n                minimum = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[minimum].value;\r\n    }\r\n\r\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\r\n    ///  `totalSupplyHistory`\r\n    /// @param checkpoints The history of data being updated\r\n    /// @param _value The new number of tokens\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\r\n    ) internal  {\r\n        if ((checkpoints.length == 0)\r\n        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\r\n               //Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\r\n               checkpoints.push( Checkpoint( uint128(block.number), uint128(_value) ) );\r\n               //newCheckPoint.fromBlock =  uint128(block.number);\r\n               //newCheckPoint.value = uint128(_value);\r\n           } else {\r\n               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\r\n               oldCheckPoint.value = uint128(_value);\r\n           }\r\n    }\r\n\r\n    /// @dev Helper function to return a min betwen the two uints\r\n    function min(uint a, uint b) pure internal returns (uint) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n//////////\r\n// Safety Methods\r\n//////////\r\n\r\n    /// @notice This method can be used by the controller to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n    function claimTokens(address _token) public onlyController {\r\n        if (_token == address(0)) {\r\n            payable(controller).transfer(address(this).balance);\r\n            return;\r\n        }\r\n\r\n        ArmorToken token = ArmorToken(_token);\r\n        uint balance = token.balanceOf(address(this));\r\n        token.transfer(controller, balance);\r\n        emit ClaimedTokens(_token, controller, balance);\r\n    }\r\n\r\n////////////////\r\n// Events\r\n////////////////\r\n\r\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _amount\r\n        );\r\n\r\n}\r\n\r\n\r\n// File contracts/general/Governable.sol\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * @title Governable\r\n * @dev Pretty default ownable but with variable names changed to better convey owner.\r\n */\r\ncontract Governable {\r\n    address payable private _governor;\r\n    address payable private _pendingGovernor;\r\n\r\n    event OwnershipTransferred(address indexed previousGovernor, address indexed newGovernor);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function initializeOwnable() internal {\r\n        require(_governor == address(0), \"already initialized\");\r\n        _governor = payable(msg.sender);\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function governor() public view returns (address payable) {\r\n        return _governor;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyGov() {\r\n        require(isGov(), \"msg.sender is not owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isGov() public view returns (bool) {\r\n        return msg.sender == _governor;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newGovernor The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address payable newGovernor) public onlyGov {\r\n        _pendingGovernor = newGovernor;\r\n    }\r\n\r\n    function receiveOwnership() public {\r\n        require(msg.sender == _pendingGovernor, \"Only pending governor can call this function\");\r\n        _transferOwnership(_pendingGovernor);\r\n        _pendingGovernor = payable(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newGovernor The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address payable newGovernor) internal {\r\n        require(newGovernor != address(0));\r\n        emit OwnershipTransferred(_governor, newGovernor);\r\n        _governor = newGovernor;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IarShield.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IarShield {\r\n    function initialize(\r\n        address _oracle,\r\n        address _pToken,\r\n        address _arToken,\r\n        address _uTokenLink,\r\n        uint256[] calldata _fees,\r\n        address[] calldata _covBases\r\n    ) \r\n      external;\r\n    function locked() external view returns(bool);\r\n}\r\n\r\n\r\n// File contracts/interfaces/ICovBase.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\ninterface ICovBase {\r\n    function editShield(address shield, bool active) external;\r\n    function updateShield(uint256 ethValue) external payable;\r\n    function checkCoverage(uint256 pAmount) external view returns (bool);\r\n    function getShieldOwed(address shield) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/proxies/Proxy.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @title Proxy\r\n * @dev Gives the possibility to delegate any call to a foreign implementation.\r\n */\r\nabstract contract Proxy {\r\n    /**\r\n    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\r\n    * This function will return whatever the implementation call returns\r\n    */\r\n    fallback() external payable {\r\n        address _impl = implementation();\r\n        require(_impl != address(0));\r\n\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0, calldatasize())\r\n            let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\r\n            let size := returndatasize()\r\n            returndatacopy(ptr, 0, size)\r\n\r\n            switch result\r\n            case 0 { revert(ptr, size) }\r\n            default { return(ptr, size) }\r\n            }\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the implementation where every call will be delegated.\r\n    * @return address of the implementation to which it will be delegated\r\n    */\r\n    function implementation() public view virtual returns (address);\r\n}\r\n\r\n\r\n// File contracts/proxies/UpgradeabilityProxy.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @title UpgradeabilityProxy\r\n * @dev This contract represents a proxy where the implementation address to which it will delegate can be upgraded\r\n */\r\ncontract UpgradeabilityProxy is Proxy {\r\n    /**\r\n    * @dev This event will be emitted every time the implementation gets upgraded\r\n    * @param implementation representing the address of the upgraded implementation\r\n    */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    // Storage position of the address of the current implementation\r\n    bytes32 private constant IMPLEMENTATION_POSITION = keccak256(\"org.armor.proxy.implementation\");\r\n\r\n    /**\r\n    * @dev Constructor function\r\n    */\r\n    constructor() public {}\r\n\r\n    /**\r\n    * @dev Tells the address of the current implementation\r\n    * @return impl address of the current implementation\r\n    */\r\n    function implementation() public view override returns (address impl) {\r\n        bytes32 position = IMPLEMENTATION_POSITION;\r\n        assembly {\r\n            impl := sload(position)\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the address of the current implementation\r\n    * @param _newImplementation address representing the new implementation to be set\r\n    */\r\n    function _setImplementation(address _newImplementation) internal {\r\n        bytes32 position = IMPLEMENTATION_POSITION;\r\n        assembly {\r\n        sstore(position, _newImplementation)\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Upgrades the implementation address\r\n    * @param _newImplementation representing the address of the new implementation to be set\r\n    */\r\n    function _upgradeTo(address _newImplementation) internal {\r\n        address currentImplementation = implementation();\r\n        require(currentImplementation != _newImplementation);\r\n        _setImplementation(_newImplementation);\r\n        emit Upgraded(_newImplementation);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/proxies/OwnedUpgradeabilityProxy.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n/**\r\n * @title OwnedUpgradeabilityProxy\r\n * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\r\n */\r\ncontract OwnedUpgradeabilityProxy is UpgradeabilityProxy {\r\n    /**\r\n    * @dev Event to show ownership has been transferred\r\n    * @param previousOwner representing the address of the previous owner\r\n    * @param newOwner representing the address of the new owner\r\n    */\r\n    event ProxyOwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    // Storage position of the owner of the contract\r\n    bytes32 private constant PROXY_OWNER_POSITION = keccak256(\"org.armor.proxy.owner\");\r\n\r\n    /**\r\n    * @dev the constructor sets the original owner of the contract to the sender account.\r\n    */\r\n    constructor(address _implementation) public {\r\n        _setUpgradeabilityOwner(msg.sender);\r\n        _upgradeTo(_implementation);\r\n    }\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyProxyOwner() {\r\n        require(msg.sender == proxyOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return owner the address of the owner\r\n    */\r\n    function proxyOwner() public view returns (address owner) {\r\n        bytes32 position = PROXY_OWNER_POSITION;\r\n        assembly {\r\n            owner := sload(position)\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param _newOwner The address to transfer ownership to.\r\n    */\r\n    function transferProxyOwnership(address _newOwner) public onlyProxyOwner {\r\n        require(_newOwner != address(0));\r\n        _setUpgradeabilityOwner(_newOwner);\r\n        emit ProxyOwnershipTransferred(proxyOwner(), _newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the proxy owner to upgrade the current version of the proxy.\r\n    * @param _implementation representing the address of the new implementation to be set.\r\n    */\r\n    function upgradeTo(address _implementation) public onlyProxyOwner {\r\n        _upgradeTo(_implementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the address of the owner\r\n    */\r\n    function _setUpgradeabilityOwner(address _newProxyOwner) internal {\r\n        bytes32 position = PROXY_OWNER_POSITION;\r\n        assembly {\r\n            sstore(position, _newProxyOwner)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/core/ShieldController.sol\r\n\r\n// SPDX-License-Identifier: (c) Armor.Fi, 2021\r\n\r\npragma solidity 0.8.4;\r\n\r\n/** \r\n * @title Shield Controller\r\n * @notice Shield Controller is in charge of creating new shields and storing universal variables.\r\n * @author Armor.fi -- Robert M.C. Forster\r\n**/\r\ncontract ShieldController is Governable {\r\n\r\n    // Liquidation bonus for users who are liquidating funds.\r\n    uint256 public bonus;\r\n    // Fee % for referrals. 10000 == 100% of the rest of the fees.\r\n    uint256 public refFee;\r\n    // Amount that needs to be deposited to lock the contract.\r\n    uint256 public depositAmt;\r\n    // Default beneficiary of all shields.\r\n    address payable public beneficiary;\r\n    // List of all arShields\r\n    address[] private arShields;\r\n\r\n    function initialize(\r\n        uint256 _bonus,\r\n        uint256 _refFee,\r\n        uint256 _depositAmt\r\n    )\r\n      external\r\n    {\r\n        require(arShields.length == 0, \"Contract already initialized.\");\r\n        initializeOwnable();\r\n        bonus = _bonus;\r\n        refFee = _refFee;\r\n        depositAmt = _depositAmt;\r\n        beneficiary = payable(msg.sender);\r\n    }\r\n\r\n    // In case a token has Ether lost in it we need to be able to receive.\r\n    receive() external payable {}\r\n\r\n    /**\r\n     * @notice Create a new arShield from an already-created family.\r\n     * @param _name Name of the armorToken to be created.\r\n     * @param _symbol Symbol of the armorToken to be created.\r\n     * @param _oracle Address of the family's oracle contract to find token value.\r\n     * @param _pToken Protocol token that the shield will use.\r\n     * @param _uTokenLink Address of the ChainLink contract for the underlying token.\r\n     * @param _masterCopy Mastercopy for the arShield proxy.\r\n     * @param _fees Mint/redeem fee for each coverage base.\r\n     * @param _covBases Coverage bases that the shield will subscribe to.\r\n    **/\r\n    function createShield(\r\n        string calldata _name,\r\n        string calldata _symbol,\r\n        address _oracle,\r\n        address _pToken,\r\n        address _uTokenLink,\r\n        address _masterCopy,\r\n        uint256[] calldata _fees,\r\n        address[] calldata _covBases\r\n    )\r\n      external\r\n      onlyGov\r\n    {\r\n        address proxy = address( new OwnedUpgradeabilityProxy(_masterCopy) );\r\n        address token = address( new ArmorToken(proxy, _name, _symbol) );\r\n        \r\n        IarShield(proxy).initialize(\r\n            _oracle,\r\n            _pToken,\r\n            token,\r\n            _uTokenLink,\r\n            _fees,\r\n            _covBases\r\n        );\r\n        \r\n        for(uint256 i = 0; i < _covBases.length; i++) ICovBase(_covBases[i]).editShield(proxy, true);\r\n\r\n        arShields.push(proxy);\r\n        OwnedUpgradeabilityProxy( payable(proxy) ).transferProxyOwnership(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Delete a shield. We use both shield address and index for safety.\r\n     * @param _shield Address of the shield to delete from array.\r\n     * @param _idx Index of the shield in the arShields array.\r\n    **/\r\n    function deleteShield(\r\n        address _shield,\r\n        uint256 _idx\r\n    )\r\n      external\r\n      onlyGov\r\n    {\r\n        if (arShields[_idx] == _shield) delete arShields[_idx];\r\n        arShields[_idx] = arShields[arShields.length - 1];\r\n        arShields.pop();\r\n    }\r\n\r\n    /**\r\n     * @notice Claim any lost tokens on an arShield contract.\r\n     * @param _armorToken Address of the Armor token that has tokens or ether lost in it.\r\n     * @param _token The address of the lost token.\r\n     * @param _beneficiary Address to send the tokens to.\r\n    **/\r\n    function claimTokens(\r\n        address _armorToken,\r\n        address _token,\r\n        address payable _beneficiary\r\n    )\r\n      external\r\n      onlyGov\r\n    {\r\n        ArmorToken(_armorToken).claimTokens(_token);\r\n        if (_token == address(0)) _beneficiary.transfer(address(this).balance);\r\n        else ArmorToken(_token).transfer( _beneficiary, ArmorToken(_token).balanceOf( address(this) ) );\r\n    }\r\n\r\n    /**\r\n     * @notice Edit the discount on Chainlink price that liquidators receive.\r\n     * @param _newBonus The new bonus amount that will be given to liquidators.\r\n    **/\r\n    function changeBonus(\r\n        uint256 _newBonus\r\n    )\r\n      external\r\n      onlyGov\r\n    {\r\n        bonus = _newBonus;\r\n    }\r\n\r\n    /**\r\n     * @notice Change amount required to deposit to lock a shield.\r\n     * @param _depositAmt New required deposit amount in Ether to lock a contract.\r\n    **/\r\n    function changeDepositAmt(\r\n        uint256 _depositAmt\r\n    )\r\n      external\r\n      onlyGov\r\n    {\r\n        depositAmt = _depositAmt;\r\n    }\r\n\r\n    /**\r\n     * @notice Change amount required to deposit to lock a shield.\r\n     * @param _refFee New fee to be paid to referrers. 10000 == 100%\r\n     *                of the protocol fees that will be charged.\r\n    **/\r\n    function changeRefFee(\r\n        uint256 _refFee\r\n    )\r\n      external\r\n      onlyGov\r\n    {\r\n        refFee = _refFee;\r\n    }\r\n\r\n    /**\r\n     * @notice Change the main beneficiary of all shields.\r\n     * @param _beneficiary New address to withdraw excess funds and get default referral fees.\r\n    **/\r\n    function changeBeneficiary(\r\n        address payable _beneficiary\r\n    )\r\n      external\r\n      onlyGov\r\n    {\r\n        beneficiary = _beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @notice Get all arShields.\r\n    **/\r\n    function getShields()\r\n      external\r\n      view\r\n    returns(\r\n        address[] memory shields\r\n    )\r\n    {\r\n        shields = arShields;\r\n    }\r\n\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"changeBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBonus\",\"type\":\"uint256\"}],\"name\":\"changeBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositAmt\",\"type\":\"uint256\"}],\"name\":\"changeDepositAmt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_refFee\",\"type\":\"uint256\"}],\"name\":\"changeRefFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_armorToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uTokenLink\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_masterCopy\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_covBases\",\"type\":\"address[]\"}],\"name\":\"createShield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shield\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"deleteShield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShields\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"shields\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmt\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGov\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ShieldController","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8987d91e861bed7fc8ccac3bf89a51bf9fd54fe3b1c1a11f91882e88dac5f06f"}]}