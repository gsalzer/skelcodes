{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: -- ðŸŽ² --\r\n\r\npragma solidity > 0.6.1 < 0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface IApeBetPool {\r\n    function depositUserETH() external payable;\r\n\r\n    function depositETH(address _sender, uint256 amount) external payable;\r\n\r\n    function depositBetToken(address _sender, uint256 amount) external;\r\n\r\n    function sendRewards(address payable account, uint256 amount) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ncontract ApeBetBookMaker is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    struct SportEvent {\r\n        bytes16 event_id;\r\n        uint256 event_status;\r\n        uint256 winner;\r\n        string name_home;\r\n        string name_away;\r\n        uint256 score_home;\r\n        uint256 score_away;\r\n        int256 moneyline_home;\r\n        int256 moneyline_away;\r\n        int256 moneyline_draw;\r\n        string event_date;\r\n    }\r\n\r\n    struct Bet {\r\n        bytes16 eventInfo;\r\n        uint256 bet_winner;\r\n        int256 bet_moneyline;\r\n        uint256 bet_amount;\r\n        uint256 bet_reserved;\r\n        uint256 bet_payout;\r\n        uint256 bet_timestamp;\r\n        bool bet_claimed;\r\n    }\r\n\r\n    IApeBetPool private betPool;\r\n    address payable public betPoolAddress;\r\n    uint256 public affiliate_id;\r\n    uint256 public maxPoolPayout;\r\n\r\n    mapping(bytes16 => mapping(uint256 => SportEvent)) public events;\r\n    bytes16[] public availableEvents;\r\n\r\n    mapping(bytes16 => Bet) public idToBet;\r\n    mapping(bytes16 => mapping(uint256 => mapping(address => bytes16[])))\r\n        public bets;\r\n    mapping(bytes16 => mapping(uint256 => address[])) private bet_addresses;\r\n    mapping(bytes16 => mapping(uint256 => mapping(address => bool))) private bet_addresses_claimed;\r\n    mapping(address => bytes16[]) public userBetData;\r\n    mapping(bytes16 => mapping(uint256 => mapping(uint256 => uint256))) public teamReserved;\r\n\r\n    modifier onlyPoolOwner() {\r\n        require(msg.sender == betPoolAddress, \"You have no permission\");\r\n        _;\r\n    }\r\n\r\n    modifier betsValidation(\r\n        bytes16[] memory _bet_event_ids,\r\n        uint256[] memory winners,\r\n        uint256[] memory amounts\r\n    ) {\r\n        // Check if pool has enough eth to give payouts to users\r\n        uint256 maxPayout = 0;\r\n        for (uint256 i = 0; i < _bet_event_ids.length; i++) {\r\n            maxPayout = maxPayout\r\n                .add(getPayoutEst(_bet_event_ids[i], winners[i], amounts[i]))\r\n                .sub(amounts[i]);\r\n\r\n            require(\r\n                events[_bet_event_ids[i]][affiliate_id].event_status == 1,\r\n                \"Event is not available.\"\r\n            );\r\n        }\r\n        require(maxPayout < maxPoolPayout, \"Not enough eth to payout your bet\");\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        affiliate_id = 0;\r\n        maxPoolPayout = 0;\r\n    }\r\n\r\n    function changeAffiliate(uint256 _affiliate_id) external onlyOwner {\r\n        affiliate_id = _affiliate_id;\r\n    }\r\n\r\n    function getBetId(bytes16 _event_id, address _account)\r\n        internal\r\n        view\r\n        returns (bytes16 betId)\r\n    {\r\n        betId = bytes16(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    _event_id,\r\n                    affiliate_id,\r\n                    _account,\r\n                    block.timestamp\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    function changeBetPool(address payable _betPoolAddress) external onlyOwner {\r\n        betPool = IApeBetPool(_betPoolAddress);\r\n        betPoolAddress = _betPoolAddress;\r\n        maxPoolPayout = address(betPool).balance;\r\n    }\r\n\r\n    function getUserBetHistory(address user)\r\n        external\r\n        view\r\n        returns (Bet[] memory userBets, SportEvent[] memory userEvents)\r\n    {\r\n        userBets = new Bet[](userBetData[user].length);\r\n        userEvents = new SportEvent[](userBetData[user].length);\r\n        for (uint256 i = 0; i < userBetData[user].length; i++) {\r\n            userBets[i] = idToBet[userBetData[user][i]];\r\n            userEvents[i] = events[userBets[i].eventInfo][affiliate_id];\r\n        }\r\n        return (userBets, userEvents);\r\n    }\r\n\r\n    function getCollectableRewards(address user)\r\n        external\r\n        view\r\n        returns (uint256 totalPayouts)\r\n    {\r\n        totalPayouts = 0;\r\n        for (uint256 i = 0; i < userBetData[user].length; i++) {\r\n            Bet storage bet = idToBet[userBetData[user][i]];\r\n            SportEvent memory ev = events[bet.eventInfo][affiliate_id];\r\n\r\n            if (\r\n                ev.event_status == 2 &&\r\n                ev.winner == bet.bet_winner &&\r\n                bet.bet_claimed == false\r\n            ) {\r\n                totalPayouts = totalPayouts.add(\r\n                    bet\r\n                        .bet_amount\r\n                        .mul(convertOddsFormat(bet.bet_moneyline))\r\n                        .div(1e4)\r\n                );\r\n            }\r\n        }\r\n        return totalPayouts;\r\n    }\r\n\r\n    function collectRewards() external {\r\n        uint256 totalPayouts = 0;\r\n        for (uint256 i = 0; i < userBetData[msg.sender].length; i++) {\r\n            Bet storage bet = idToBet[userBetData[msg.sender][i]];\r\n            if (\r\n                events[bet.eventInfo][affiliate_id].event_status == 2 &&\r\n                events[bet.eventInfo][affiliate_id].winner == bet.bet_winner\r\n            ) {\r\n                bet.bet_payout = bet\r\n                    .bet_amount\r\n                    .mul(convertOddsFormat(bet.bet_moneyline))\r\n                    .div(1e4);\r\n                bet.bet_claimed = true;\r\n                totalPayouts = totalPayouts.add(bet.bet_payout);\r\n            }\r\n        }\r\n\r\n        betPool.sendRewards(msg.sender, totalPayouts);\r\n    }\r\n\r\n    // This function is used for converting only American format to European format\r\n    function convertOddsFormat(int256 odds) internal pure returns (uint256) {\r\n        uint256 payout = 0;\r\n        uint256 bet = 0;\r\n        if (odds < 0) {\r\n            payout = uint256(100 - odds);\r\n            bet = uint256(-odds);\r\n        } else {\r\n            payout = uint256(100 + odds);\r\n            bet = 100;\r\n        }\r\n\r\n        return payout.mul(1e4).div(bet);\r\n    }\r\n\r\n    // for temporary use till chainlink is available to use\r\n    function updateEvents(\r\n        bytes16[] memory _event_ids,\r\n        uint256[] memory _event_statuss,\r\n        uint256[] memory _winners,\r\n        string[] memory _name_homes,\r\n        string[] memory _name_aways,\r\n        uint256[] memory _score_aways,\r\n        uint256[] memory _score_homes,\r\n        int256[] memory _moneyline_homes,\r\n        int256[] memory _moneyline_aways,\r\n        int256[] memory _moneyline_draws,\r\n        string[] memory _dates\r\n    ) external {\r\n        for (uint256 i = 0; i < _event_ids.length; i++) {\r\n            if (events[_event_ids[i]][affiliate_id].event_status == 0) {\r\n                availableEvents.push(_event_ids[i]);\r\n            }\r\n            \r\n            if (events[_event_ids[i]][affiliate_id].event_status == 2) continue;\r\n            \r\n            if (events[_event_ids[i]][affiliate_id].event_status == _event_statuss[i]) {\r\n                events[_event_ids[i]][affiliate_id].moneyline_home = _moneyline_homes[i];\r\n                events[_event_ids[i]][affiliate_id].moneyline_away = _moneyline_aways[i];\r\n            } else {\r\n                events[_event_ids[i]][affiliate_id] = SportEvent({\r\n                    event_id: _event_ids[i],\r\n                    event_status: _event_statuss[i],\r\n                    winner: _winners[i],\r\n                    name_away: _name_aways[i],\r\n                    name_home: _name_homes[i],\r\n                    score_away: _score_aways[i],\r\n                    score_home: _score_homes[i],\r\n                    moneyline_home: _moneyline_homes[i],\r\n                    moneyline_away: _moneyline_aways[i],\r\n                    moneyline_draw: _moneyline_draws[i],\r\n                    event_date: _dates[i]\r\n                });   \r\n            }\r\n\r\n            if (events[_event_ids[i]][affiliate_id].event_status == 2) {\r\n                bytes16 event_id = _event_ids[i];\r\n                uint256 paidForEvt = 0;\r\n                for (\r\n                    uint256 j = 0;\r\n                    j < bet_addresses[event_id][affiliate_id].length;\r\n                    j++\r\n                ) {\r\n                    address account = bet_addresses[event_id][affiliate_id][j];\r\n                    for (\r\n                        uint256 k = 0;\r\n                        k < bets[event_id][affiliate_id][account].length;\r\n                        k++\r\n                    ) {\r\n                        if (\r\n                            idToBet[bets[event_id][affiliate_id][account][k]].bet_winner != events[event_id][affiliate_id].winner\r\n                        ) {\r\n                            maxPoolPayout = maxPoolPayout.add(\r\n                                idToBet[\r\n                                    bets[event_id][affiliate_id][account][k]\r\n                                ]\r\n                                    .bet_amount\r\n                            );\r\n                        } else {\r\n                            paidForEvt = paidForEvt.add(idToBet[bets[event_id][affiliate_id][account][k]].bet_reserved.sub(idToBet[bets[event_id][affiliate_id][account][k]].bet_amount));\r\n                        }\r\n                    }\r\n                }\r\n                if (teamReserved[event_id][affiliate_id][1] > teamReserved[event_id][affiliate_id][2]) {\r\n                    maxPoolPayout = maxPoolPayout.add(teamReserved[event_id][affiliate_id][1].sub(paidForEvt));\r\n                } else {\r\n                    maxPoolPayout = maxPoolPayout.add(teamReserved[event_id][affiliate_id][2].sub(paidForEvt));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function getAvailableEvents()\r\n        external\r\n        view\r\n        returns (SportEvent[] memory evts)\r\n    {\r\n        evts = new SportEvent[](availableEvents.length);\r\n        uint256 idx = 0;\r\n        for (uint256 i = 0; i < availableEvents.length; i++) {\r\n            if (events[availableEvents[i]][affiliate_id].event_status == 1)\r\n                evts[idx++] = events[availableEvents[i]][affiliate_id];\r\n        }\r\n        return evts;\r\n    }\r\n\r\n    function getPayoutEst(\r\n        bytes16 _bet_event_id,\r\n        uint256 winner,\r\n        uint256 amount\r\n    ) public view returns (uint256) {\r\n        uint256 maxPayout;\r\n\r\n        // winner: 1 (home),  winner: 2(away),   winner: 3(draw)\r\n\r\n        SportEvent memory ev = events[_bet_event_id][affiliate_id];\r\n        if (winner == 1) {\r\n            maxPayout = convertOddsFormat(ev.moneyline_home).mul(amount).div(\r\n                1e4\r\n            );\r\n        } else if (winner == 2) {\r\n            maxPayout = convertOddsFormat(ev.moneyline_away).mul(amount).div(\r\n                1e4\r\n            );\r\n        } else {\r\n            maxPayout = convertOddsFormat(ev.moneyline_draw).mul(amount).div(\r\n                1e4\r\n            );\r\n        }\r\n        return maxPayout;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function updateMaxPoolPayout(uint256 addAmount, uint256 removeAmount)\r\n        external\r\n        onlyPoolOwner\r\n    {\r\n        if (addAmount > 0) maxPoolPayout = maxPoolPayout.add(addAmount);\r\n        else maxPoolPayout = maxPoolPayout.sub(removeAmount);\r\n    }\r\n\r\n    function createBets(\r\n        bytes16[] memory _bet_event_ids,\r\n        uint256[] memory _bet_winners,\r\n        uint256[] memory _bet_amounts\r\n    )\r\n        external\r\n        payable\r\n        nonReentrant\r\n        betsValidation(_bet_event_ids, _bet_winners, _bet_amounts)\r\n    {\r\n        for (uint256 i = 0; i < _bet_event_ids.length; i++) {\r\n            bytes16 bet_id = getBetId(_bet_event_ids[i], msg.sender);\r\n            uint256 estPayout =\r\n                getPayoutEst(\r\n                    _bet_event_ids[i],\r\n                    _bet_winners[i],\r\n                    _bet_amounts[i]\r\n                );\r\n            bets[_bet_event_ids[i]][affiliate_id][msg.sender].push(bet_id);\r\n\r\n            idToBet[bet_id] = Bet({\r\n                eventInfo: _bet_event_ids[i],\r\n                bet_winner: _bet_winners[i],\r\n                bet_amount: _bet_amounts[i],\r\n                bet_timestamp: block.timestamp,\r\n                bet_moneyline: _bet_winners[i] == 1\r\n                    ? events[_bet_event_ids[i]][affiliate_id].moneyline_home\r\n                    : events[_bet_event_ids[i]][affiliate_id].moneyline_away,\r\n                bet_payout: 0,\r\n                bet_reserved: estPayout,\r\n                bet_claimed: false\r\n            });\r\n\r\n            if (bet_addresses_claimed[_bet_event_ids[i]][affiliate_id][msg.sender] != true) {\r\n                bet_addresses[_bet_event_ids[i]][affiliate_id].push(msg.sender);\r\n                bet_addresses_claimed[_bet_event_ids[i]][affiliate_id][msg.sender] = true;\r\n            }\r\n\r\n            userBetData[msg.sender].push(bet_id);\r\n\r\n            uint256 reservedAmount = estPayout.sub(_bet_amounts[i]);\r\n            if (teamReserved[_bet_event_ids[i]][affiliate_id][1] > teamReserved[_bet_event_ids[i]][affiliate_id][2])\r\n                maxPoolPayout = maxPoolPayout.add(teamReserved[_bet_event_ids[i]][affiliate_id][1]);\r\n            else\r\n                maxPoolPayout = maxPoolPayout.add(teamReserved[_bet_event_ids[i]][affiliate_id][2]);\r\n            \r\n            teamReserved[_bet_event_ids[i]][affiliate_id][_bet_winners[i]] = teamReserved[_bet_event_ids[i]][affiliate_id][_bet_winners[i]].add(reservedAmount);\r\n\r\n            if (teamReserved[_bet_event_ids[i]][affiliate_id][1] > teamReserved[_bet_event_ids[i]][affiliate_id][2])\r\n                maxPoolPayout = maxPoolPayout.sub(teamReserved[_bet_event_ids[i]][affiliate_id][1]);\r\n            else\r\n                maxPoolPayout = maxPoolPayout.sub(teamReserved[_bet_event_ids[i]][affiliate_id][2]);\r\n            require(maxPoolPayout >= 0, \"Exceeded reserved amount.\");\r\n        }\r\n\r\n        betPool.depositUserETH{value: msg.value}();\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"affiliate_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"availableEvents\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betPoolAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_affiliate_id\",\"type\":\"uint256\"}],\"name\":\"changeAffiliate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_betPoolAddress\",\"type\":\"address\"}],\"name\":\"changeBetPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16[]\",\"name\":\"_bet_event_ids\",\"type\":\"bytes16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bet_winners\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bet_amounts\",\"type\":\"uint256[]\"}],\"name\":\"createBets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"events\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"event_id\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"event_status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winner\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_home\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name_away\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"score_home\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"score_away\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"moneyline_home\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"moneyline_away\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"moneyline_draw\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"event_date\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAvailableEvents\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes16\",\"name\":\"event_id\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"event_status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winner\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_home\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name_away\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"score_home\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"score_away\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"moneyline_home\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"moneyline_away\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"moneyline_draw\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"event_date\",\"type\":\"string\"}],\"internalType\":\"struct ApeBetBookMaker.SportEvent[]\",\"name\":\"evts\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCollectableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPayouts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"_bet_event_id\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"winner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPayoutEst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserBetHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes16\",\"name\":\"eventInfo\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"bet_winner\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"bet_moneyline\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bet_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bet_reserved\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bet_payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bet_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bet_claimed\",\"type\":\"bool\"}],\"internalType\":\"struct ApeBetBookMaker.Bet[]\",\"name\":\"userBets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes16\",\"name\":\"event_id\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"event_status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winner\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_home\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name_away\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"score_home\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"score_away\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"moneyline_home\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"moneyline_away\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"moneyline_draw\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"event_date\",\"type\":\"string\"}],\"internalType\":\"struct ApeBetBookMaker.SportEvent[]\",\"name\":\"userEvents\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"name\":\"idToBet\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"eventInfo\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"bet_winner\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"bet_moneyline\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bet_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bet_reserved\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bet_payout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bet_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bet_claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPoolPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamReserved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16[]\",\"name\":\"_event_ids\",\"type\":\"bytes16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_event_statuss\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_winners\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"_name_homes\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_name_aways\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_score_aways\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_score_homes\",\"type\":\"uint256[]\"},{\"internalType\":\"int256[]\",\"name\":\"_moneyline_homes\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"_moneyline_aways\",\"type\":\"int256[]\"},{\"internalType\":\"int256[]\",\"name\":\"_moneyline_draws\",\"type\":\"int256[]\"},{\"internalType\":\"string[]\",\"name\":\"_dates\",\"type\":\"string[]\"}],\"name\":\"updateEvents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removeAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaxPoolPayout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userBetData\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ApeBetBookMaker","CompilerVersion":"v0.6.9+commit.3e3065ac","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://25af16fae646ba4ce3c2e72e1d32e21d568991d563560d33ffe03ac170e64637"}]}