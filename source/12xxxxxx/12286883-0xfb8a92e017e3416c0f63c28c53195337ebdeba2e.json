{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.7.0;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface TokenInterface {\r\n    function approve(address, uint256) external;\r\n    function transfer(address, uint) external;\r\n    function transferFrom(address, address, uint) external;\r\n    function deposit() external payable;\r\n    function withdraw(uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n    function decimals() external view returns (uint);\r\n}\r\n\r\ninterface MemoryInterface {\r\n    function getUint(uint id) external returns (uint num);\r\n    function setUint(uint id, uint val) external;\r\n}\r\n\r\ninterface InstaMapping {\r\n    function cTokenMapping(address) external view returns (address);\r\n    function gemJoinMapping(bytes32) external view returns (address);\r\n}\r\n\r\ninterface AccountInterface {\r\n    function enable(address) external;\r\n    function disable(address) external;\r\n    function isAuth(address) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/mainnet/common/stores.sol\r\n\r\nabstract contract Stores {\r\n\r\n  /**\r\n   * @dev Return ethereum address\r\n   */\r\n  address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n  /**\r\n   * @dev Return Wrapped ETH address\r\n   */\r\n  address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n  /**\r\n   * @dev Return memory variable address\r\n   */\r\n  MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\r\n\r\n  /**\r\n   * @dev Return InstaDApp Mapping Addresses\r\n   */\r\n  InstaMapping constant internal instaMapping = InstaMapping(0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88);\r\n\r\n  /**\r\n   * @dev Get Uint value from InstaMemory Contract.\r\n   */\r\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\r\n    returnVal = getId == 0 ? val : instaMemory.getUint(getId);\r\n  }\r\n\r\n  /**\r\n  * @dev Set Uint value in InstaMemory Contract.\r\n  */\r\n  function setUint(uint setId, uint val) virtual internal {\r\n    if (setId != 0) instaMemory.setUint(setId, val);\r\n  }\r\n\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/math/SafeMath.sol@v3.4.1\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/mainnet/common/math.sol\r\n\r\ncontract DSMath {\r\n  uint constant WAD = 10 ** 18;\r\n  uint constant RAY = 10 ** 27;\r\n\r\n  function add(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(x, y);\r\n  }\r\n\r\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\r\n    z = SafeMath.sub(x, y);\r\n  }\r\n\r\n  function mul(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.mul(x, y);\r\n  }\r\n\r\n  function div(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.div(x, y);\r\n  }\r\n\r\n  function wmul(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\r\n  }\r\n\r\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\r\n  }\r\n\r\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\r\n  }\r\n\r\n  function rmul(uint x, uint y) internal pure returns (uint z) {\r\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\r\n  }\r\n\r\n  function toInt(uint x) internal pure returns (int y) {\r\n    y = int(x);\r\n    require(y >= 0, \"int-overflow\");\r\n  }\r\n\r\n  function toRad(uint wad) internal pure returns (uint rad) {\r\n    rad = mul(wad, 10 ** 27);\r\n  }\r\n\r\n}\r\n\r\n\r\n// File contracts/mainnet/common/basic.sol\r\n\r\n\r\nabstract contract Basic is DSMath, Stores {\r\n\r\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = (_amt / 10 ** (18 - _dec));\r\n    }\r\n\r\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\r\n        amt = mul(_amt, 10 ** (18 - _dec));\r\n    }\r\n\r\n    function getTokenBal(TokenInterface token) internal view returns(uint _amt) {\r\n        _amt = address(token) == ethAddr ? address(this).balance : token.balanceOf(address(this));\r\n    }\r\n\r\n    function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {\r\n        buyDec = address(buyAddr) == ethAddr ?  18 : buyAddr.decimals();\r\n        sellDec = address(sellAddr) == ethAddr ?  18 : sellAddr.decimals();\r\n    }\r\n\r\n    function encodeEvent(string memory eventName, bytes memory eventParam) internal pure returns (bytes memory) {\r\n        return abi.encode(eventName, eventParam);\r\n    }\r\n\r\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\r\n        _buy = buy == ethAddr ? TokenInterface(wethAddr) : TokenInterface(buy);\r\n        _sell = sell == ethAddr ? TokenInterface(wethAddr) : TokenInterface(sell);\r\n    }\r\n\r\n    function convertEthToWeth(bool isEth, TokenInterface token, uint amount) internal {\r\n        if(isEth) token.deposit{value: amount}();\r\n    }\r\n\r\n    function convertWethToEth(bool isEth, TokenInterface token, uint amount) internal {\r\n       if(isEth) {\r\n            token.approve(address(token), amount);\r\n            token.withdraw(amount);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/mainnet/connectors/COMP/interface.sol\r\n\r\ninterface ComptrollerInterface {\r\n    function claimComp(address holder) external;\r\n    function claimComp(address holder, address[] calldata) external;\r\n    function claimComp(address[] calldata holders, address[] calldata cTokens, bool borrowers, bool suppliers) external;\r\n}\r\n\r\ninterface COMPInterface {\r\n    function delegate(address delegatee) external;\r\n    function delegates(address) external view returns(address);\r\n}\r\n\r\ninterface CompoundMappingInterface {\r\n    function cTokenMapping(string calldata tokenId) external view returns (address);\r\n    function getMapping(string calldata tokenId) external view returns (address, address);\r\n}\r\n\r\n\r\n// File contracts/mainnet/connectors/COMP/helpers.sol\r\n\r\n\r\nabstract contract Helpers is DSMath, Basic {\r\n    /**\r\n     * @dev Compound Comptroller\r\n     */\r\n    ComptrollerInterface internal constant troller = ComptrollerInterface(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\r\n\r\n    /**\r\n     * @dev COMP Token\r\n     */\r\n    COMPInterface internal constant compToken = COMPInterface(0xc00e94Cb662C3520282E6f5717214004A7f26888);\r\n\r\n    /**\r\n     * @dev Compound Mapping\r\n     */\r\n    CompoundMappingInterface internal constant compMapping = CompoundMappingInterface(0xA8F9D4aA7319C54C04404765117ddBf9448E2082);\r\n\r\n    function getMergedCTokens(\r\n        string[] calldata supplyIds,\r\n        string[] calldata borrowIds\r\n    ) internal view returns (address[] memory ctokens, bool isBorrow, bool isSupply) {\r\n        uint _supplyLen = supplyIds.length;\r\n        uint _borrowLen = borrowIds.length;\r\n        uint _totalLen = add(_supplyLen, _borrowLen);\r\n        ctokens = new address[](_totalLen);\r\n\r\n        if(_supplyLen > 0) {\r\n            isSupply = true;\r\n            for (uint i = 0; i < _supplyLen; i++) {\r\n                (address token, address cToken) = compMapping.getMapping(supplyIds[i]);\r\n                require(token != address(0) && cToken != address(0), \"invalid token/ctoken address\");\r\n\r\n                ctokens[i] = cToken;\r\n            }\r\n        }\r\n\r\n        if(_borrowLen > 0) {\r\n            isBorrow = true;\r\n            for (uint i = 0; i < _borrowLen; i++) {\r\n                (address token, address cToken) = compMapping.getMapping(borrowIds[i]);\r\n                require(token != address(0) && cToken != address(0), \"invalid token/ctoken address\");\r\n\r\n                ctokens[_supplyLen + i] = cToken;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/mainnet/connectors/COMP/events.sol\r\n\r\ncontract Events {\r\n    event LogClaimedComp(uint256 compAmt, uint256 setId);\r\n    event LogDelegate(address delegatee);\r\n}\r\n\r\n\r\n// File contracts/mainnet/connectors/COMP/main.sol\r\n\r\n\r\nabstract contract CompResolver is Events, Helpers {\r\n\r\n    /**\r\n     * @dev Claim Accrued COMP Token.\r\n     * @notice Claim Accrued COMP Token.\r\n     * @param setId ID stores the amount of COMP claimed.\r\n    */\r\n    function ClaimComp(uint256 setId) external payable {\r\n        TokenInterface _compToken = TokenInterface(address(compToken));\r\n        uint intialBal = _compToken.balanceOf(address(this));\r\n        troller.claimComp(address(this));\r\n        uint finalBal = _compToken.balanceOf(address(this));\r\n        uint amt = sub(finalBal, intialBal);\r\n\r\n        setUint(setId, amt);\r\n\r\n        emit LogClaimedComp(amt, setId);\r\n    }\r\n\r\n    /**\r\n     * @dev Claim Accrued COMP Token.\r\n     * @notice Claim Accrued COMP Token.\r\n     * @param tokenIds Array of supplied and borrowed token IDs.\r\n     * @param setId ID stores the amount of COMP claimed.\r\n    */\r\n    function ClaimCompTwo(string[] calldata tokenIds, uint256 setId) external payable {\r\n        uint _len = tokenIds.length;\r\n        address[] memory ctokens = new address[](_len);\r\n        for (uint i = 0; i < _len; i++) {\r\n            (address token, address cToken) = compMapping.getMapping(tokenIds[i]);\r\n            require(token != address(0) && cToken != address(0), \"invalid token/ctoken address\");\r\n\r\n            ctokens[i] = cToken;\r\n        }\r\n\r\n        TokenInterface _compToken = TokenInterface(address(compToken));\r\n        uint intialBal = _compToken.balanceOf(address(this));\r\n        troller.claimComp(address(this), ctokens);\r\n        uint finalBal = _compToken.balanceOf(address(this));\r\n        uint amt = sub(finalBal, intialBal);\r\n\r\n        setUint(setId, amt);\r\n\r\n        emit LogClaimedComp(amt, setId);\r\n    }\r\n\r\n    /**\r\n     * @dev Claim Accrued COMP Token.\r\n     * @notice Claim Accrued COMP Token.\r\n     * @param supplyTokenIds Array of supplied tokenIds.\r\n     * @param borrowTokenIds Array of borrowed tokenIds.\r\n     * @param setId ID stores the amount of COMP claimed.\r\n    */\r\n    function ClaimCompThree(string[] calldata supplyTokenIds, string[] calldata borrowTokenIds, uint256 setId) external payable {\r\n      (address[] memory ctokens, bool isBorrow, bool isSupply) = getMergedCTokens(supplyTokenIds, borrowTokenIds);\r\n\r\n        address[] memory holders = new address[](1);\r\n        holders[0] = address(this);\r\n\r\n        TokenInterface _compToken = TokenInterface(address(compToken));\r\n        uint intialBal = _compToken.balanceOf(address(this));\r\n        troller.claimComp(holders, ctokens, isBorrow, isSupply);\r\n        uint finalBal = _compToken.balanceOf(address(this));\r\n        uint amt = sub(finalBal, intialBal);\r\n\r\n        setUint(setId, amt);\r\n\r\n        emit LogClaimedComp(amt, setId);\r\n    }\r\n\r\n    /**\r\n     * @dev Delegate votes.\r\n     * @notice Delegate votes.\r\n     * @param delegatee The address to delegate the votes to.\r\n    */\r\n    function delegate(address delegatee) external payable {\r\n        require(compToken.delegates(address(this)) != delegatee, \"Already delegated to same delegatee.\");\r\n\r\n        compToken.delegate(delegatee);\r\n\r\n        emit LogDelegate(delegatee);\r\n    }\r\n}\r\n\r\ncontract ConnectCOMP is CompResolver {\r\n    /**\r\n     * @dev Connector ID and Type.\r\n     */\r\n    function connectorID() public pure returns(uint _type, uint _id) {\r\n        (_type, _id) = (1, 91);\r\n    }\r\n\r\n    string public constant name = \"COMP-v1.1\";\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"compAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogClaimedComp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"LogDelegate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"ClaimComp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"supplyTokenIds\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"borrowTokenIds\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"ClaimCompThree\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"tokenIds\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"ClaimCompTwo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connectorID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ConnectCOMP","CompilerVersion":"v0.7.0+commit.9e61f92b","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://470ed907583cda9eb9f8a11126c325bc54e12d3f404762f986f00dafdf114fe3"}]}