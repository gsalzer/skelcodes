{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.7.6;\r\n\r\nlibrary SafeMath\r\n{\r\n\r\n   function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       uint256 c = a + b;\r\n       require(c >= a, \"SafeMath: addition overflow\");\r\n       return c;\r\n   }\r\n\r\n   \r\n   function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       return sub(a, b, \"SafeMath: subtraction overflow\");\r\n   }\r\n\r\n   function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n       require(b <= a, errorMessage);\r\n       uint256 c = a - b;\r\n\r\n       return c;\r\n   }\r\n\r\n   \r\n   function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n       // benefit is lost if 'b' is also tested.\r\n       // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n       if (a == 0) {\r\n           return 0;\r\n       }\r\n\r\n       uint256 c = a * b;\r\n       require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n       return c;\r\n   }\r\n\r\n\r\n   function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       return div(a, b, \"SafeMath: division by zero\");\r\n   }\r\n\r\n   \r\n   function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n       require(b > 0, errorMessage);\r\n       uint256 c = a / b;\r\n       // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n       return c;\r\n   }\r\n\r\n   \r\n   function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n       return mod(a, b, \"SafeMath: modulo by zero\");\r\n   }\r\n\r\n   \r\n   function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n       require(b != 0, errorMessage);\r\n       return a % b;\r\n   }\r\n\r\n   function ceil(uint a, uint m) internal pure returns (uint r) {\r\n       return (a + m - 1) / m * m;\r\n   }\r\n\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Owned is Context\r\n{\r\n   modifier onlyOwner() virtual{\r\n       require(_msgSender()==owner);\r\n       _;\r\n   }\r\n   address payable owner;\r\n   address payable newOwner;\r\n   function changeOwner(address payable _newOwner) external onlyOwner {\r\n       require(_newOwner!=address(0));\r\n       newOwner = _newOwner;\r\n   }\r\n   function acceptOwnership() external {\r\n       if (_msgSender()==newOwner) {\r\n           owner = newOwner;\r\n       }\r\n   }\r\n}\r\n\r\ninterface ERC20 \r\n{\r\n   function balanceOf(address _owner) view external  returns (uint256 balance);\r\n   function transfer(address _to, uint256 _value) external  returns (bool success);\r\n   function transferFrom(address _from, address _to, uint256 _value) external  returns (bool success);\r\n   function approve(address _spender, uint256 _value) external returns (bool success);\r\n   function allowance(address _owner, address _spender) view external  returns (uint256 remaining);\r\n   event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n   event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract PIKA is Context,Owned,  ERC20 {\r\n    using SafeMath for uint256;\r\n    uint256 public _taxFee;\r\n    uint256 public totalSupply;\r\n    string public symbol;\r\n    string public name;\r\n    uint8 public decimals;\r\n    uint256 private _taxFeepercent = 225;\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    uint256 public ContractDeployed;\r\n    address oldPika = 0xE09fB60E8D6e7E1CEbBE821bD5c3FC67a40F86bF;\r\n    uint256 public oldPika_amount;\r\n    uint256 private minamountTakenOut = 1000000 *10**9 * 10 **9;  \r\n    uint256 private MinimumSupply = 100000000 *10**9 * 10**9;\r\n    \r\n    mapping (address=>uint256) balances;\r\n    mapping (address=>mapping (address=>uint256)) allowed;\r\n\r\n    event TransferFee(address indexed _from, address indexed _to, uint256 _value);\r\n    \r\n    function balanceOf(address _owner) view    public override  returns (uint256 balance) {return balances[_owner];}\r\n    \r\n    function transfer(address _to, uint256 _amount)  public override     returns (bool success) {\r\n        _transfer(_msgSender(), _to, _amount);\r\n        return true;\r\n    }\r\n  \r\n    function transferFrom(address sender, address recipient, uint256 amount) public override  returns (bool success) {\r\n        \r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = allowed[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n\r\n        \r\n    }\r\n  \r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if(_isExcludedFromFee[sender]  ||  _isExcludedFromFee[recipient])\r\n        {\r\n            uint256 senderBalance = balances[sender];\r\n            require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n            balances[sender] = senderBalance - amount;\r\n            balances[recipient] += amount;\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n        else\r\n        {\r\n            uint256 _Fee = calSwapToken(amount,_taxFeepercent);\r\n            _taxFee +=  _Fee;\r\n            if(_taxFee >= minamountTakenOut )\r\n            {\r\n                swapTokensForEth(_taxFee);\r\n            }\r\n            \r\n                uint256 senderBalance = balances[sender];\r\n                require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n                balances[sender] = senderBalance - amount;\r\n                balances[recipient] += amount-_Fee ;\r\n                emit Transfer(sender, recipient, amount-_Fee);\r\n            \r\n        }\r\n\r\n\r\n      \r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n  \r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        allowed[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) view public override  returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        \r\n        \r\n            require(account != address(0), \"ERC20: burn from the zero address\");\r\n            uint256 accountBalance = balances[account];\r\n            require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n            balances[account] = accountBalance - amount;\r\n            totalSupply -= amount;\r\n            emit Transfer(account, address(0), amount);\r\n        \r\n            \r\n        }\r\n    \r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            owner,\r\n            block.timestamp\r\n        );\r\n        \r\n        _taxFee =0;\r\n    }\r\n\r\n    function viewMinExtractAmt() public view returns(uint256){\r\n         return minamountTakenOut;\r\n     }    \r\n        \r\n    function setMinExtractAmt(uint256 _amount) public onlyOwner() {\r\n         minamountTakenOut = _amount;\r\n     }\r\n    \r\n    function viewFee() public view  returns(uint256){\r\n       return  _taxFeepercent ;\r\n    } \r\n    \r\n    function exchnagePika(uint256 tokens)external{\r\n            \r\n        require(tokens <= PIKA(address(this)).balanceOf(address(this)), \"Not enough tokens in the reserve\");\r\n        require(ERC20(oldPika).transferFrom(_msgSender(), address(this), tokens), \"Tokens cannot be transferred from user account\");      \r\n            \r\n\r\n               uint256 time = block.timestamp - ContractDeployed;\r\n               uint256 day = time.div(86400);\r\n               require(day <= 4, \"Sorry Swaping Time Period is finished\");\r\n\r\n                if(tokens < 10000000000 * 10**9 * 10**9)\r\n                {\r\n                    uint256 extra = calSwapToken(tokens,500);\r\n                    PIKA(address(this)).transfer(_msgSender(), tokens.add(extra));\r\n                }\r\n                \r\n                else if ( (tokens >= 10000000000 * 10**9 * 10**9)  &&  (tokens < 100000000000 * 10**9 * 10**9))\r\n                {\r\n                    uint256 extra = calSwapToken(tokens,250);\r\n                    PIKA(address(this)).transfer(_msgSender(), tokens.add(extra));\r\n                }\r\n                else if( tokens >= 100000000000 * 10**9 * 10**9 )\r\n                {\r\n                    uint256 extra = calSwapToken(tokens,100);\r\n                    PIKA(address(this)).transfer(_msgSender(), tokens.add(extra));\r\n                }\r\n                \r\n            \r\n            oldPika_amount = oldPika_amount.add(tokens);\r\n\r\n    }\r\n    \r\n    function extractOldPIKA() external onlyOwner(){\r\n            ERC20(oldPika).transfer(_msgSender(), oldPika_amount);\r\n            oldPika_amount = 0;\r\n        }\r\n        \r\n    function extractfee() external onlyOwner(){\r\n        PIKA(address(this)).transfer(_msgSender(), _taxFee);\r\n        _taxFee = 0;\r\n       }\r\n   \r\n    function calSwapToken(uint256 _tokens, uint256 cust) internal virtual returns (uint256) {\r\n        uint256 custPercentofTokens = _tokens.mul(cust).div(100 * 10**uint(2));\r\n        return custPercentofTokens;\r\n        }\r\n\r\n    function burn(uint256 value) public returns(bool flag) {\r\n     if(totalSupply >= MinimumSupply)         \r\n     {\r\n      _burn(_msgSender(), value);\r\n      return true;\r\n     } \r\n     else\r\n     return false;\r\n\r\n    }\r\n    \r\n    function viewMinSupply()public view  returns(uint256) {\r\n            return MinimumSupply;\r\n    }\r\n    \r\n    function changeMinSupply(uint256 newMinSupply)onlyOwner() public{\r\n            MinimumSupply = newMinSupply;\r\n    }\r\n    \r\n    function addLiquidity(uint256 tokenAmount) public payable onlyOwner() {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: msg.value}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0, // slippage is unavoidable\r\n           owner,\r\n            block.timestamp\r\n        );\r\n    }\r\n    \r\n    constructor() {\r\n       symbol = \"PIKA\";\r\n       name = \"PIKA\";\r\n       decimals = 18;\r\n       totalSupply = 50000000000000 * 10**9 * 10**9; //50 trillion\r\n        owner = _msgSender();\r\n       balances[owner] = totalSupply;\r\n       _isExcludedFromFee[owner] = true;\r\n       _isExcludedFromFee[address(this)] = true;\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n    ContractDeployed = block.timestamp;\r\n   }\r\n\r\n    receive () payable external {\r\n       require(msg.value>0);\r\n       owner.transfer(msg.value);\r\n   }\r\n    \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ContractDeployed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"flag\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinSupply\",\"type\":\"uint256\"}],\"name\":\"changeMinSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"exchnagePika\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractOldPIKA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractfee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldPika_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setMinExtractAmt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewMinExtractAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewMinSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PIKA","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1bcae79cd482b893f02cb837bf037d3300b196ff22f9587637c76a6f0a25e6ea"}]}