{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ModStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./interfaces/IModStore.sol\\\";\\nimport \\\"./abstract/Operatable.sol\\\";\\nimport \\\"./abstract/TerminalUtility.sol\\\";\\n\\nimport \\\"./libraries/Operations.sol\\\";\\n\\n/**\\n  @notice\\n  Stores mods for each project.\\n\\n  @dev\\n  Mods can be used to distribute a percentage of payments or tickets to preconfigured beneficiaries.\\n*/\\ncontract ModStore is IModStore, Operatable, TerminalUtility {\\n    // --- private stored properties --- //\\n\\n    // All payout mods for each project ID's configurations.\\n    mapping(uint256 => mapping(uint256 => PayoutMod[])) private _payoutModsOf;\\n\\n    // All ticket mods for each project ID's configurations.\\n    mapping(uint256 => mapping(uint256 => TicketMod[])) private _ticketModsOf;\\n\\n    // --- public immutable stored properties --- //\\n\\n    /// @notice The contract storing project information.\\n    IProjects public immutable override projects;\\n\\n    // --- public views --- //\\n\\n    /**\\n      @notice \\n      Get all payout mods for the specified project ID.\\n\\n      @param _projectId The ID of the project to get mods for.\\n      @param _configuration The configuration to get mods for.\\n\\n      @return An array of all mods for the project.\\n     */\\n    function payoutModsOf(uint256 _projectId, uint256 _configuration)\\n        external\\n        view\\n        override\\n        returns (PayoutMod[] memory)\\n    {\\n        return _payoutModsOf[_projectId][_configuration];\\n    }\\n\\n    /**\\n      @notice \\n      Get all ticket mods for the specified project ID.\\n\\n      @param _projectId The ID of the project to get mods for.\\n      @param _configuration The configuration to get mods for.\\n\\n      @return An array of all mods for the project.\\n     */\\n    function ticketModsOf(uint256 _projectId, uint256 _configuration)\\n        external\\n        view\\n        override\\n        returns (TicketMod[] memory)\\n    {\\n        return _ticketModsOf[_projectId][_configuration];\\n    }\\n\\n    // --- external transactions --- //\\n\\n    /** \\n      @param _projects The contract storing project information\\n      @param _operatorStore A contract storing operator assignments.\\n      @param _terminalDirectory A directory of a project's current Juicebox terminal to receive payments in.\\n    */\\n    constructor(\\n        IProjects _projects,\\n        IOperatorStore _operatorStore,\\n        ITerminalDirectory _terminalDirectory\\n    ) Operatable(_operatorStore) TerminalUtility(_terminalDirectory) {\\n        projects = _projects;\\n    }\\n\\n    /** \\n      @notice \\n      Adds a mod to the payout mods list.\\n\\n      @dev\\n      Only the owner or operator of a project can make this call, or the current terminal of the project.\\n\\n      @param _projectId The project to add a mod to.\\n      @param _configuration The configuration to set the mods to be active during.\\n      @param _mods The payout mods to set.\\n    */\\n    function setPayoutMods(\\n        uint256 _projectId,\\n        uint256 _configuration,\\n        PayoutMod[] memory _mods\\n    )\\n        external\\n        override\\n        requirePermissionAcceptingAlternateAddress(\\n            projects.ownerOf(_projectId),\\n            _projectId,\\n            Operations.SetPayoutMods,\\n            address(terminalDirectory.terminalOf(_projectId))\\n        )\\n    {\\n        // There must be something to do.\\n        require(_mods.length > 0, \\\"ModStore::setPayoutMods: NO_OP\\\");\\n\\n        // Get a reference to the project's payout mods.\\n        PayoutMod[] memory _currentMods = _payoutModsOf[_projectId][\\n            _configuration\\n        ];\\n\\n        // Check to see if all locked Mods are included.\\n        for (uint256 _i = 0; _i < _currentMods.length; _i++) {\\n            if (block.timestamp < _currentMods[_i].lockedUntil) {\\n                bool _includesLocked = false;\\n                for (uint256 _j = 0; _j < _mods.length; _j++) {\\n                    // Check for sameness. Let the note change.\\n                    if (\\n                        _mods[_j].percent == _currentMods[_i].percent &&\\n                        _mods[_j].beneficiary == _currentMods[_i].beneficiary &&\\n                        _mods[_j].allocator == _currentMods[_i].allocator &&\\n                        _mods[_j].projectId == _currentMods[_i].projectId &&\\n                        // Allow lock expention.\\n                        _mods[_j].lockedUntil >= _currentMods[_i].lockedUntil\\n                    ) _includesLocked = true;\\n                }\\n                require(\\n                    _includesLocked,\\n                    \\\"ModStore::setPayoutMods: SOME_LOCKED\\\"\\n                );\\n            }\\n        }\\n\\n        // Delete from storage so mods can be repopulated.\\n        delete _payoutModsOf[_projectId][_configuration];\\n\\n        // Add up all the percents to make sure they cumulative are under 100%.\\n        uint256 _payoutModPercentTotal = 0;\\n\\n        for (uint256 _i = 0; _i < _mods.length; _i++) {\\n            // The percent should be greater than 0.\\n            require(\\n                _mods[_i].percent > 0,\\n                \\\"ModStore::setPayoutMods: BAD_MOD_PERCENT\\\"\\n            );\\n\\n            // Add to the total percents.\\n            _payoutModPercentTotal = _payoutModPercentTotal + _mods[_i].percent;\\n\\n            // The total percent should be less than 10000.\\n            require(\\n                _payoutModPercentTotal <= 10000,\\n                \\\"ModStore::setPayoutMods: BAD_TOTAL_PERCENT\\\"\\n            );\\n\\n            // The allocator and the beneficiary shouldn't both be the zero address.\\n            require(\\n                _mods[_i].allocator != IModAllocator(address(0)) ||\\n                    _mods[_i].beneficiary != address(0),\\n                \\\"ModStore::setPayoutMods: ZERO_ADDRESS\\\"\\n            );\\n\\n            // Push the new mod into the project's list of mods.\\n            _payoutModsOf[_projectId][_configuration].push(_mods[_i]);\\n\\n            emit SetPayoutMod(\\n                _projectId,\\n                _configuration,\\n                _mods[_i],\\n                msg.sender\\n            );\\n        }\\n    }\\n\\n    /** \\n      @notice \\n      Adds a mod to the ticket mods list.\\n\\n      @dev\\n      Only the owner or operator of a project can make this call, or the current terminal of the project.\\n\\n      @param _projectId The project to add a mod to.\\n      @param _configuration The configuration to set the mods to be active during.\\n      @param _mods The ticket mods to set.\\n    */\\n    function setTicketMods(\\n        uint256 _projectId,\\n        uint256 _configuration,\\n        TicketMod[] memory _mods\\n    )\\n        external\\n        override\\n        requirePermissionAcceptingAlternateAddress(\\n            projects.ownerOf(_projectId),\\n            _projectId,\\n            Operations.SetTicketMods,\\n            address(terminalDirectory.terminalOf(_projectId))\\n        )\\n    {\\n        // There must be something to do.\\n        require(_mods.length > 0, \\\"ModStore::setTicketMods: NO_OP\\\");\\n\\n        // Get a reference to the project's ticket mods.\\n        TicketMod[] memory _projectTicketMods = _ticketModsOf[_projectId][\\n            _configuration\\n        ];\\n\\n        // Check to see if all locked Mods are included.\\n        for (uint256 _i = 0; _i < _projectTicketMods.length; _i++) {\\n            if (block.timestamp < _projectTicketMods[_i].lockedUntil) {\\n                bool _includesLocked = false;\\n                for (uint256 _j = 0; _j < _mods.length; _j++) {\\n                    // Check for the same values.\\n                    if (\\n                        _mods[_j].percent == _projectTicketMods[_i].percent &&\\n                        _mods[_j].beneficiary ==\\n                        _projectTicketMods[_i].beneficiary &&\\n                        // Allow lock extensions.\\n                        _mods[_j].lockedUntil >=\\n                        _projectTicketMods[_i].lockedUntil\\n                    ) _includesLocked = true;\\n                }\\n                require(\\n                    _includesLocked,\\n                    \\\"ModStore::setTicketMods: SOME_LOCKED\\\"\\n                );\\n            }\\n        }\\n        // Delete from storage so mods can be repopulated.\\n        delete _ticketModsOf[_projectId][_configuration];\\n\\n        // Add up all the percents to make sure they cumulative are under 100%.\\n        uint256 _ticketModPercentTotal = 0;\\n\\n        for (uint256 _i = 0; _i < _mods.length; _i++) {\\n            // The percent should be greater than 0.\\n            require(\\n                _mods[_i].percent > 0,\\n                \\\"ModStore::setTicketMods: BAD_MOD_PERCENT\\\"\\n            );\\n\\n            // Add to the total percents.\\n            _ticketModPercentTotal = _ticketModPercentTotal + _mods[_i].percent;\\n            // The total percent should be less than 10000.\\n            require(\\n                _ticketModPercentTotal <= 10000,\\n                \\\"ModStore::setTicketMods: BAD_TOTAL_PERCENT\\\"\\n            );\\n\\n            // The beneficiary shouldn't be the zero address.\\n            require(\\n                _mods[_i].beneficiary != address(0),\\n                \\\"ModStore::setTicketMods: ZERO_ADDRESS\\\"\\n            );\\n\\n            // Push the new mod into the project's list of mods.\\n            _ticketModsOf[_projectId][_configuration].push(_mods[_i]);\\n\\n            emit SetTicketMod(\\n                _projectId,\\n                _configuration,\\n                _mods[_i],\\n                msg.sender\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IModStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./IOperatorStore.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IModAllocator.sol\\\";\\n\\nstruct PayoutMod {\\n    bool preferUnstaked;\\n    uint16 percent;\\n    uint48 lockedUntil;\\n    address payable beneficiary;\\n    IModAllocator allocator;\\n    uint56 projectId;\\n}\\n\\nstruct TicketMod {\\n    bool preferUnstaked;\\n    uint16 percent;\\n    uint48 lockedUntil;\\n    address payable beneficiary;\\n}\\n\\ninterface IModStore {\\n    event SetPayoutMod(\\n        uint256 indexed projectId,\\n        uint256 indexed configuration,\\n        PayoutMod mods,\\n        address caller\\n    );\\n\\n    event SetTicketMod(\\n        uint256 indexed projectId,\\n        uint256 indexed configuration,\\n        TicketMod mods,\\n        address caller\\n    );\\n\\n    function projects() external view returns (IProjects);\\n\\n    function payoutModsOf(uint256 _projectId, uint256 _configuration)\\n        external\\n        view\\n        returns (PayoutMod[] memory);\\n\\n    function ticketModsOf(uint256 _projectId, uint256 _configuration)\\n        external\\n        view\\n        returns (TicketMod[] memory);\\n\\n    function setPayoutMods(\\n        uint256 _projectId,\\n        uint256 _configuration,\\n        PayoutMod[] memory _mods\\n    ) external;\\n\\n    function setTicketMods(\\n        uint256 _projectId,\\n        uint256 _configuration,\\n        TicketMod[] memory _mods\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/abstract/Operatable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./../interfaces/IOperatable.sol\\\";\\n\\nabstract contract Operatable is IOperatable {\\n    modifier requirePermission(\\n        address _account,\\n        uint256 _domain,\\n        uint256 _index\\n    ) {\\n        require(\\n            msg.sender == _account ||\\n                operatorStore.hasPermission(\\n                    msg.sender,\\n                    _account,\\n                    _domain,\\n                    _index\\n                ),\\n            \\\"Operatable: UNAUTHORIZED\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier requirePermissionAllowingWildcardDomain(\\n        address _account,\\n        uint256 _domain,\\n        uint256 _index\\n    ) {\\n        require(\\n            msg.sender == _account ||\\n                operatorStore.hasPermission(\\n                    msg.sender,\\n                    _account,\\n                    _domain,\\n                    _index\\n                ) ||\\n                operatorStore.hasPermission(msg.sender, _account, 0, _index),\\n            \\\"Operatable: UNAUTHORIZED\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier requirePermissionAcceptingAlternateAddress(\\n        address _account,\\n        uint256 _domain,\\n        uint256 _index,\\n        address _alternate\\n    ) {\\n        require(\\n            msg.sender == _account ||\\n                operatorStore.hasPermission(\\n                    msg.sender,\\n                    _account,\\n                    _domain,\\n                    _index\\n                ) ||\\n                msg.sender == _alternate,\\n            \\\"Operatable: UNAUTHORIZED\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice A contract storing operator assignments.\\n    IOperatorStore public immutable override operatorStore;\\n\\n    /** \\n      @param _operatorStore A contract storing operator assignments.\\n    */\\n    constructor(IOperatorStore _operatorStore) {\\n        operatorStore = _operatorStore;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/abstract/TerminalUtility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./../interfaces/ITerminalUtility.sol\\\";\\n\\nabstract contract TerminalUtility is ITerminalUtility {\\n    modifier onlyTerminal(uint256 _projectId) {\\n        require(\\n            address(terminalDirectory.terminalOf(_projectId)) == msg.sender,\\n            \\\"TerminalUtility: UNAUTHORIZED\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @notice The direct deposit terminals.\\n    ITerminalDirectory public immutable override terminalDirectory;\\n\\n    /** \\n      @param _terminalDirectory A directory of a project's current Juicebox terminal to receive payments in.\\n    */\\n    constructor(ITerminalDirectory _terminalDirectory) {\\n        terminalDirectory = _terminalDirectory;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Operations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nlibrary Operations {\\n    uint256 public constant Configure = 1;\\n    uint256 public constant PrintPreminedTickets = 2;\\n    uint256 public constant Redeem = 3;\\n    uint256 public constant Migrate = 4;\\n    uint256 public constant SetHandle = 5;\\n    uint256 public constant SetUri = 6;\\n    uint256 public constant ClaimHandle = 7;\\n    uint256 public constant RenewHandle = 8;\\n    uint256 public constant Issue = 9;\\n    uint256 public constant Stake = 10;\\n    uint256 public constant Unstake = 11;\\n    uint256 public constant Transfer = 12;\\n    uint256 public constant Lock = 13;\\n    uint256 public constant SetPayoutMods = 14;\\n    uint256 public constant SetTicketMods = 15;\\n    uint256 public constant SetTerminal = 16;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOperatorStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IOperatorStore {\\n    event SetOperator(\\n        address indexed operator,\\n        address indexed account,\\n        uint256 indexed domain,\\n        uint256[] permissionIndexes,\\n        uint256 packed\\n    );\\n\\n    function permissionsOf(\\n        address _operator,\\n        address _account,\\n        uint256 _domain\\n    ) external view returns (uint256);\\n\\n    function hasPermission(\\n        address _operator,\\n        address _account,\\n        uint256 _domain,\\n        uint256 _permissionIndex\\n    ) external view returns (bool);\\n\\n    function hasPermissions(\\n        address _operator,\\n        address _account,\\n        uint256 _domain,\\n        uint256[] calldata _permissionIndexes\\n    ) external view returns (bool);\\n\\n    function setOperator(\\n        address _operator,\\n        uint256 _domain,\\n        uint256[] calldata _permissionIndexes\\n    ) external;\\n\\n    function setOperators(\\n        address[] calldata _operators,\\n        uint256[] calldata _domains,\\n        uint256[][] calldata _permissionIndexes\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProjects.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./ITerminal.sol\\\";\\nimport \\\"./IOperatorStore.sol\\\";\\n\\ninterface IProjects is IERC721 {\\n    event Create(\\n        uint256 indexed projectId,\\n        address indexed owner,\\n        bytes32 indexed handle,\\n        string uri,\\n        ITerminal terminal,\\n        address caller\\n    );\\n\\n    event SetHandle(\\n        uint256 indexed projectId,\\n        bytes32 indexed handle,\\n        address caller\\n    );\\n\\n    event SetUri(uint256 indexed projectId, string uri, address caller);\\n\\n    event TransferHandle(\\n        uint256 indexed projectId,\\n        address indexed to,\\n        bytes32 indexed handle,\\n        bytes32 newHandle,\\n        address caller\\n    );\\n\\n    event ClaimHandle(\\n        address indexed account,\\n        uint256 indexed projectId,\\n        bytes32 indexed handle,\\n        address caller\\n    );\\n\\n    event ChallengeHandle(\\n        bytes32 indexed handle,\\n        uint256 challengeExpiry,\\n        address caller\\n    );\\n\\n    event RenewHandle(\\n        bytes32 indexed handle,\\n        uint256 indexed projectId,\\n        address caller\\n    );\\n\\n    function count() external view returns (uint256);\\n\\n    function uriOf(uint256 _projectId) external view returns (string memory);\\n\\n    function handleOf(uint256 _projectId) external returns (bytes32 handle);\\n\\n    function projectFor(bytes32 _handle) external returns (uint256 projectId);\\n\\n    function transferAddressFor(bytes32 _handle)\\n        external\\n        returns (address receiver);\\n\\n    function challengeExpiryOf(bytes32 _handle) external returns (uint256);\\n\\n    function exists(uint256 _projectId) external view returns (bool);\\n\\n    function create(\\n        address _owner,\\n        bytes32 _handle,\\n        string calldata _uri,\\n        ITerminal _terminal\\n    ) external returns (uint256 id);\\n\\n    function setHandle(uint256 _projectId, bytes32 _handle) external;\\n\\n    function setUri(uint256 _projectId, string calldata _uri) external;\\n\\n    function transferHandle(\\n        uint256 _projectId,\\n        address _to,\\n        bytes32 _newHandle\\n    ) external returns (bytes32 _handle);\\n\\n    function claimHandle(\\n        bytes32 _handle,\\n        address _for,\\n        uint256 _projectId\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IModAllocator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IModAllocator {\\n    event Allocate(\\n        uint256 indexed projectId,\\n        uint256 indexed forProjectId,\\n        address indexed beneficiary,\\n        uint256 amount,\\n        address caller\\n    );\\n\\n    function allocate(\\n        uint256 _projectId,\\n        uint256 _forProjectId,\\n        address _beneficiary\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITerminal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./ITerminalDirectory.sol\\\";\\n\\ninterface ITerminal {\\n    event Pay(\\n        uint256 indexed fundingCycleId,\\n        uint256 indexed projectId,\\n        address indexed beneficiary,\\n        uint256 amount,\\n        string note,\\n        address caller\\n    );\\n\\n    event AddToBalance(\\n        uint256 indexed projectId,\\n        uint256 value,\\n        address caller\\n    );\\n\\n    event AllowMigration(ITerminal allowed);\\n\\n    event Migrate(\\n        uint256 indexed projectId,\\n        ITerminal indexed to,\\n        uint256 _amount,\\n        address caller\\n    );\\n\\n    function terminalDirectory() external view returns (ITerminalDirectory);\\n\\n    function migrationIsAllowed(ITerminal _terminal)\\n        external\\n        view\\n        returns (bool);\\n\\n    function pay(\\n        uint256 _projectId,\\n        address _beneficiary,\\n        string calldata _memo,\\n        bool _preferUnstakedTickets\\n    ) external payable returns (uint256 fundingCycleId);\\n\\n    function addToBalance(uint256 _projectId) external payable;\\n\\n    function allowMigration(ITerminal _contract) external;\\n\\n    function migrate(uint256 _projectId, ITerminal _to) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITerminalDirectory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./IDirectPaymentAddress.sol\\\";\\nimport \\\"./ITerminal.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\nimport \\\"./IProjects.sol\\\";\\n\\ninterface ITerminalDirectory {\\n    event DeployAddress(\\n        uint256 indexed projectId,\\n        string memo,\\n        address indexed caller\\n    );\\n\\n    event SetTerminal(\\n        uint256 indexed projectId,\\n        ITerminal indexed terminal,\\n        address caller\\n    );\\n\\n    event SetPayerPreferences(\\n        address indexed account,\\n        address beneficiary,\\n        bool preferUnstakedTickets\\n    );\\n\\n    function projects() external view returns (IProjects);\\n\\n    function terminalOf(uint256 _projectId) external view returns (ITerminal);\\n\\n    function beneficiaryOf(address _account) external returns (address);\\n\\n    function unstakedTicketsPreferenceOf(address _account)\\n        external\\n        returns (bool);\\n\\n    function addressesOf(uint256 _projectId)\\n        external\\n        view\\n        returns (IDirectPaymentAddress[] memory);\\n\\n    function deployAddress(uint256 _projectId, string calldata _memo) external;\\n\\n    function setTerminal(uint256 _projectId, ITerminal _terminal) external;\\n\\n    function setPayerPreferences(\\n        address _beneficiary,\\n        bool _preferUnstakedTickets\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDirectPaymentAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./ITerminalDirectory.sol\\\";\\nimport \\\"./ITerminal.sol\\\";\\n\\ninterface IDirectPaymentAddress {\\n    event Forward(\\n        address indexed payer,\\n        uint256 indexed projectId,\\n        address beneficiary,\\n        uint256 value,\\n        string memo,\\n        bool preferUnstakedTickets\\n    );\\n\\n    function terminalDirectory() external returns (ITerminalDirectory);\\n\\n    function projectId() external returns (uint256);\\n\\n    function memo() external returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOperatable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./IOperatorStore.sol\\\";\\n\\ninterface IOperatable {\\n    function operatorStore() external view returns (IOperatorStore);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITerminalUtility.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./ITerminalDirectory.sol\\\";\\n\\ninterface ITerminalUtility {\\n    function terminalDirectory() external view returns (ITerminalDirectory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IProjects\",\"name\":\"_projects\",\"type\":\"address\"},{\"internalType\":\"contract IOperatorStore\",\"name\":\"_operatorStore\",\"type\":\"address\"},{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"_terminalDirectory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferUnstaked\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"contract IModAllocator\",\"name\":\"allocator\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"projectId\",\"type\":\"uint56\"}],\"indexed\":false,\"internalType\":\"struct PayoutMod\",\"name\":\"mods\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SetPayoutMod\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"configuration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferUnstaked\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct TicketMod\",\"name\":\"mods\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"SetTicketMod\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"operatorStore\",\"outputs\":[{\"internalType\":\"contract IOperatorStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_configuration\",\"type\":\"uint256\"}],\"name\":\"payoutModsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferUnstaked\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"contract IModAllocator\",\"name\":\"allocator\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"projectId\",\"type\":\"uint56\"}],\"internalType\":\"struct PayoutMod[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"contract IProjects\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_configuration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferUnstaked\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"contract IModAllocator\",\"name\":\"allocator\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"projectId\",\"type\":\"uint56\"}],\"internalType\":\"struct PayoutMod[]\",\"name\":\"_mods\",\"type\":\"tuple[]\"}],\"name\":\"setPayoutMods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_configuration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferUnstaked\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"internalType\":\"struct TicketMod[]\",\"name\":\"_mods\",\"type\":\"tuple[]\"}],\"name\":\"setTicketMods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"terminalDirectory\",\"outputs\":[{\"internalType\":\"contract ITerminalDirectory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_configuration\",\"type\":\"uint256\"}],\"name\":\"ticketModsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"preferUnstaked\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"lockedUntil\",\"type\":\"uint48\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"internalType\":\"struct TicketMod[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ModStore","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"10000","ConstructorArguments":"0000000000000000000000009b5a4053ffbb11ca9cd858aaee43cc95ab435418000000000000000000000000ab47304d987390e27ce3bc0fa4fe31e3a98b0db200000000000000000000000046c9999a2edcd5aa177ed7e8af90c68b7d75ba46","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}