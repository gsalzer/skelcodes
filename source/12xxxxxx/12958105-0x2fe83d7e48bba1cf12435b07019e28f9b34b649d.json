{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/xAAVE.sol\": {\r\n      \"content\": \"pragma solidity 0.6.2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {\\n    OwnableUpgradeSafe as Ownable\\n} from \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\nimport {\\n    ERC20UpgradeSafe as ERC20\\n} from \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\\\";\\n\\nimport \\\"./helpers/Pausable.sol\\\";\\n\\nimport \\\"./interface/IxTokenManager.sol\\\";\\n\\ninterface IAaveProtoGovernance {\\n    function submitVoteByVoter(\\n        uint256 _proposalId,\\n        uint256 _vote,\\n        IERC20 _asset\\n    ) external;\\n}\\n\\ninterface IKyberNetworkProxy {\\n    function swapEtherToToken(ERC20 token, uint256 minConversionRate)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    function swapTokenToToken(\\n        ERC20 src,\\n        uint256 srcAmount,\\n        ERC20 dest,\\n        uint256 minConversionRate\\n    ) external returns (uint256);\\n\\n    function swapTokenToEther(\\n        ERC20 token,\\n        uint256 tokenQty,\\n        uint256 minRate\\n    ) external payable returns (uint256);\\n}\\n\\ninterface IStakedAave {\\n    function stake(address to, uint256 amount) external;\\n\\n    function redeem(address to, uint256 amount) external;\\n\\n    function cooldown() external;\\n\\n    function claimRewards(address to, uint256 amount) external;\\n}\\n\\ninterface IAaveGovernanceV2 {\\n    function submitVote(uint256 proposalId, bool support) external;\\n}\\n\\ncontract xAAVE is ERC20, Pausable, Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 private constant DEC_18 = 1e18;\\n    uint256 private constant MAX_UINT = 2**256 - 1;\\n    uint256 private constant AAVE_BUFFER_TARGET = 20; // 5% target\\n    uint256 private constant INITIAL_SUPPLY_MULTIPLIER = 100;\\n    uint256 public constant LIQUIDATION_TIME_PERIOD = 4 weeks;\\n\\n    uint256 public withdrawableAaveFees;\\n    uint256 public adminActiveTimestamp;\\n\\n    address private manager;\\n\\n    IERC20 private aave;\\n    IERC20 private votingAave;\\n    IStakedAave private stakedAave;\\n    IAaveProtoGovernance private governance;\\n\\n    IKyberNetworkProxy private kyberProxy;\\n\\n    bool public cooldownActivated;\\n\\n    string public mandate;\\n\\n    struct FeeDivisors {\\n        uint256 mintFee;\\n        uint256 burnFee;\\n        uint256 claimFee;\\n    }\\n\\n    FeeDivisors public feeDivisors;\\n\\n    IAaveGovernanceV2 private governanceV2;\\n\\n    address private manager2;\\n\\n    mapping(address => bool) private whitelist;\\n\\n    uint256 private constant AFFILIATE_FEE_DIVISOR = 4;\\n\\n    // addresses are locked from transfer after minting or burning\\n    uint256 private constant BLOCK_LOCK_COUNT = 6;\\n    // last block for which this address is timelocked\\n    mapping(address => uint256) public lastLockedBlock;\\n\\n    IxTokenManager private xTokenManager;\\n\\n    function initialize(\\n        IERC20 _aave,\\n        IERC20 _votingAave,\\n        IStakedAave _stakedAave,\\n        IAaveProtoGovernance _governance,\\n        IKyberNetworkProxy _kyberProxy,\\n        uint256 _mintFeeDivisor,\\n        uint256 _burnFeeDivisor,\\n        uint256 _claimFeeDivisor,\\n        string memory _symbol,\\n        string memory _mandate\\n    ) public initializer {\\n        __Ownable_init();\\n        __ERC20_init(\\\"xAAVE\\\", _symbol);\\n\\n        aave = _aave;\\n        votingAave = _votingAave;\\n        stakedAave = _stakedAave;\\n        governance = _governance;\\n        kyberProxy = _kyberProxy;\\n        mandate = _mandate;\\n\\n        _setFeeDivisors(_mintFeeDivisor, _burnFeeDivisor, _claimFeeDivisor);\\n        _updateAdminActiveTimestamp();\\n    }\\n\\n    /* ========================================================================================= */\\n    /*                                        Investor-Facing                                    */\\n    /* ========================================================================================= */\\n\\n    /*\\n     * @dev Mint xAAVE using ETH\\n     * @param minRate: Kyber min rate ETH=>AAVE\\n     */\\n    function mint(uint256 minRate)\\n        public\\n        payable\\n        whenNotPaused\\n        notLocked(msg.sender)\\n    {\\n        require(msg.value > 0, \\\"Must send ETH\\\");\\n        lock(msg.sender);\\n\\n        (uint256 stakedBalance, uint256 bufferBalance) = getFundBalances();\\n\\n        uint256 fee = _calculateFee(msg.value, feeDivisors.mintFee);\\n\\n        uint256 incrementalAave = kyberProxy.swapEtherToToken.value(\\n            msg.value.sub(fee)\\n        )(ERC20(address(aave)), minRate);\\n        return _mintInternal(bufferBalance, stakedBalance, incrementalAave);\\n    }\\n\\n    /*\\n     * @dev Mint xAAVE using AAVE\\n     * @notice Must run ERC20 approval first\\n     * @param aaveAmount: AAVE to contribute\\n     * @param affiliate: optional recipient of 25% of fees\\n     */\\n    function mintWithToken(uint256 aaveAmount, address affiliate)\\n        public\\n        whenNotPaused\\n        notLocked(msg.sender)\\n    {\\n        require(aaveAmount > 0, \\\"Must send AAVE\\\");\\n        lock(msg.sender);\\n\\n        (uint256 stakedBalance, uint256 bufferBalance) = getFundBalances();\\n\\n        aave.safeTransferFrom(msg.sender, address(this), aaveAmount);\\n\\n        uint256 fee = _calculateFee(aaveAmount, feeDivisors.mintFee);\\n\\n        if (affiliate == address(0)) {\\n            _incrementWithdrawableAaveFees(fee);\\n        } else {\\n            require(whitelist[affiliate], \\\"Invalid address\\\");\\n\\n            uint256 affiliateFee = fee.div(AFFILIATE_FEE_DIVISOR);\\n            aave.safeTransfer(affiliate, affiliateFee);\\n            _incrementWithdrawableAaveFees(fee.sub(affiliateFee));\\n        }\\n\\n        uint256 incrementalAave = aaveAmount.sub(fee);\\n        return _mintInternal(bufferBalance, stakedBalance, incrementalAave);\\n    }\\n\\n    function _mintInternal(\\n        uint256 _bufferBalance,\\n        uint256 _stakedBalance,\\n        uint256 _incrementalAave\\n    ) internal {\\n        uint256 totalSupply = totalSupply();\\n        uint256 allocationToStake = _calculateAllocationToStake(\\n            _bufferBalance,\\n            _incrementalAave,\\n            _stakedBalance,\\n            totalSupply\\n        );\\n        _stake(allocationToStake);\\n\\n        uint256 aaveHoldings = _bufferBalance.add(_stakedBalance);\\n        uint256 mintAmount = calculateMintAmount(\\n            _incrementalAave,\\n            aaveHoldings,\\n            totalSupply\\n        );\\n        return super._mint(msg.sender, mintAmount);\\n    }\\n\\n    /*\\n     * @dev Burn xAAVE tokens\\n     * @notice Will fail if redemption value exceeds available liquidity\\n     * @param redeemAmount: xAAVE to redeem\\n     * @param redeemForEth: if true, redeem xAAVE for ETH\\n     * @param minRate: Kyber.getExpectedRate AAVE=>ETH if redeemForEth true (no-op if false)\\n     */\\n    function burn(\\n        uint256 tokenAmount,\\n        bool redeemForEth,\\n        uint256 minRate\\n    ) public notLocked(msg.sender) {\\n        require(tokenAmount > 0, \\\"Must send xAAVE\\\");\\n        lock(msg.sender);\\n\\n        (uint256 stakedBalance, uint256 bufferBalance) = getFundBalances();\\n        uint256 aaveHoldings = bufferBalance.add(stakedBalance);\\n        uint256 proRataAave = aaveHoldings.mul(tokenAmount).div(totalSupply());\\n\\n        require(proRataAave <= bufferBalance, \\\"Insufficient exit liquidity\\\");\\n        super._burn(msg.sender, tokenAmount);\\n\\n        if (redeemForEth) {\\n            uint256 ethRedemptionValue = kyberProxy.swapTokenToEther(\\n                ERC20(address(aave)),\\n                proRataAave,\\n                minRate\\n            );\\n            uint256 fee = _calculateFee(\\n                ethRedemptionValue,\\n                feeDivisors.burnFee\\n            );\\n            (bool success, ) = msg.sender.call.value(\\n                ethRedemptionValue.sub(fee)\\n            )(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n        } else {\\n            uint256 fee = _calculateFee(proRataAave, feeDivisors.burnFee);\\n            _incrementWithdrawableAaveFees(fee);\\n            aave.safeTransfer(msg.sender, proRataAave.sub(fee));\\n        }\\n    }\\n\\n    function transfer(address recipient, uint256 amount)\\n        public\\n        override\\n        notLocked(msg.sender)\\n        returns (bool)\\n    {\\n        return super.transfer(recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override notLocked(sender) returns (bool) {\\n        return super.transferFrom(sender, recipient, amount);\\n    }\\n\\n    /* ========================================================================================= */\\n    /*                                             NAV                                           */\\n    /* ========================================================================================= */\\n\\n    function getAmountOfAssetHeld() public view returns (uint256) {\\n        return getFundHoldings();\\n    }\\n\\n    function getFundHoldings() public view returns (uint256) {\\n        return getStakedBalance().add(getBufferBalance());\\n    }\\n\\n    function getStakedBalance() public view returns (uint256) {\\n        return IERC20(address(stakedAave)).balanceOf(address(this));\\n    }\\n\\n    function getBufferBalance() public view returns (uint256) {\\n        return aave.balanceOf(address(this)).sub(withdrawableAaveFees);\\n    }\\n\\n    function getFundBalances() public view returns (uint256, uint256) {\\n        return (getStakedBalance(), getBufferBalance());\\n    }\\n\\n    function getWithdrawableFees()\\n        public\\n        view\\n        returns (address[2] memory feeAssets, uint256[2] memory feeAmounts)\\n    {\\n        feeAssets[0] = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; // ETH\\n        feeAssets[1] = address(aave);\\n        feeAmounts[0] = address(this).balance;\\n        feeAmounts[1] = withdrawableAaveFees;\\n    }\\n\\n    /*\\n     * @dev Helper function for mint, mintWithToken\\n     * @param incrementalAave: AAVE contributed\\n     * @param aaveHoldingsBefore: xAAVE buffer reserve + staked balance\\n     * @param totalSupply: xAAVE.totalSupply()\\n     */\\n    function calculateMintAmount(\\n        uint256 incrementalAave,\\n        uint256 aaveHoldingsBefore,\\n        uint256 totalSupply\\n    ) public view returns (uint256 mintAmount) {\\n        if (totalSupply == 0)\\n            return incrementalAave.mul(INITIAL_SUPPLY_MULTIPLIER);\\n\\n        mintAmount = (incrementalAave).mul(totalSupply).div(aaveHoldingsBefore);\\n    }\\n\\n    /*\\n     * @dev Helper function for mint, mintWithToken\\n     * @param _bufferBalanceBefore: xAAVE AAVE buffer balance pre-mint\\n     * @param _incrementalAave: AAVE contributed\\n     * @param _stakedBalance: xAAVE stakedAave balance pre-mint\\n     * @param _totalSupply: xAAVE.totalSupply()\\n     */\\n    function _calculateAllocationToStake(\\n        uint256 _bufferBalanceBefore,\\n        uint256 _incrementalAave,\\n        uint256 _stakedBalance,\\n        uint256 _totalSupply\\n    ) internal view returns (uint256) {\\n        if (_totalSupply == 0)\\n            return\\n                _incrementalAave.sub(_incrementalAave.div(AAVE_BUFFER_TARGET));\\n\\n        uint256 bufferBalanceAfter = _bufferBalanceBefore.add(_incrementalAave);\\n        uint256 aaveHoldings = bufferBalanceAfter.add(_stakedBalance);\\n\\n        uint256 targetBufferBalance = aaveHoldings.div(AAVE_BUFFER_TARGET);\\n\\n        // allocate full incremental aave to buffer balance\\n        if (bufferBalanceAfter < targetBufferBalance) return 0;\\n\\n        return bufferBalanceAfter.sub(targetBufferBalance);\\n    }\\n\\n    /* ========================================================================================= */\\n    /*                                   Fund Management - Admin                                 */\\n    /* ========================================================================================= */\\n\\n    /*\\n     * @notice xAAVE only stakes when cooldown is not active\\n     * @param _amount: allocation to staked balance\\n     */\\n    function _stake(uint256 _amount) private {\\n        if (_amount > 0 && !cooldownActivated) {\\n            stakedAave.stake(address(this), _amount);\\n        }\\n    }\\n\\n    /*\\n     * @notice Admin-callable function in case of persistent depletion of buffer reserve\\n     * or emergency shutdown\\n     * @notice Incremental AAVE will only be allocated to buffer reserve\\n     */\\n    function cooldown() public onlyOwnerOrManager {\\n        _updateAdminActiveTimestamp();\\n        _cooldown();\\n    }\\n\\n    /*\\n     * @notice Admin-callable function disabling cooldown and returning fund to\\n     * normal course of management\\n     */\\n    function disableCooldown() public onlyOwnerOrManager {\\n        _updateAdminActiveTimestamp();\\n        cooldownActivated = false;\\n    }\\n\\n    /*\\n     * @notice Admin-callable function available once cooldown has been activated\\n     * and requisite time elapsed\\n     * @notice Called when buffer reserve is persistently insufficient to satisfy\\n     * redemption requirements\\n     * @param amount: AAVE to unstake\\n     */\\n    function redeem(uint256 amount) public onlyOwnerOrManager {\\n        _updateAdminActiveTimestamp();\\n        _redeem(amount);\\n    }\\n\\n    /*\\n     * @notice Admin-callable function claiming staking rewards\\n     * @notice Called regularly on behalf of pool in normal course of management\\n     */\\n    function claim() public onlyOwnerOrManager {\\n        _updateAdminActiveTimestamp();\\n        _claim();\\n    }\\n\\n    /*\\n     * @notice Records admin activity\\n     * @notice Because Aave staking \\\"locks\\\" capital in contract and only admin has power\\n     * to cooldown and redeem in normal course, this function certifies that admin\\n     * is still active and capital is accessible\\n     * @notice If not certified for a period exceeding LIQUIDATION_TIME_PERIOD,\\n     * emergencyCooldown and emergencyRedeem become available to non-admin caller\\n     */\\n    function _updateAdminActiveTimestamp() private {\\n        adminActiveTimestamp = block.timestamp;\\n    }\\n\\n    /*\\n     * @notice Function for participating in Aave Governance\\n     * @notice Called regularly on behalf of pool in normal course of management\\n     * @param _proposalId:\\n     * @param _vote:\\n     */\\n    function vote(uint256 _proposalId, uint256 _vote)\\n        public\\n        onlyOwnerOrManager\\n    {\\n        governance.submitVoteByVoter(_proposalId, _vote, votingAave);\\n    }\\n\\n    /*\\n     * @notice Callable in case of fee revenue or extra yield opportunities in non-AAVE ERC20s\\n     * @notice Reinvested in AAVE\\n     * @param tokens: Addresses of non-AAVE tokens with balance in xAAVE\\n     * @param minReturns: Kyber.getExpectedRate for non-AAVE tokens\\n     */\\n    function convertTokensToTarget(\\n        address[] calldata tokens,\\n        uint256[] calldata minReturns\\n    ) external onlyOwnerOrManager {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            uint256 tokenBal = IERC20(tokens[i]).balanceOf(address(this));\\n            uint256 bufferBalancerBefore = getBufferBalance();\\n\\n            kyberProxy.swapTokenToToken(\\n                ERC20(tokens[i]),\\n                tokenBal,\\n                ERC20(address(aave)),\\n                minReturns[i]\\n            );\\n            uint256 bufferBalanceAfter = getBufferBalance();\\n\\n            uint256 fee = _calculateFee(\\n                bufferBalanceAfter.sub(bufferBalancerBefore),\\n                feeDivisors.claimFee\\n            );\\n            _incrementWithdrawableAaveFees(fee);\\n        }\\n    }\\n\\n    /* ========================================================================================= */\\n    /*                                   Fund Management - Public                                */\\n    /* ========================================================================================= */\\n\\n    /*\\n     * @notice If admin doesn't certify within LIQUIDATION_TIME_PERIOD,\\n     * admin functions unlock to public\\n     */\\n    modifier liquidationTimeElapsed {\\n        require(\\n            block.timestamp > adminActiveTimestamp.add(LIQUIDATION_TIME_PERIOD),\\n            \\\"Liquidation time hasn't elapsed\\\"\\n        );\\n        _;\\n    }\\n\\n    /*\\n     * @notice First step in xAAVE unwind in event of admin failure/incapacitation\\n     */\\n    function emergencyCooldown() public liquidationTimeElapsed {\\n        _cooldown();\\n    }\\n\\n    /*\\n     * @notice Second step in xAAVE unwind in event of admin failure/incapacitation\\n     * @notice Called after cooldown period, during unwind period\\n     */\\n    function emergencyRedeem(uint256 amount) public liquidationTimeElapsed {\\n        _redeem(amount);\\n    }\\n\\n    /*\\n     * @notice Public callable function for claiming staking rewards\\n     */\\n    function claimExternal() public {\\n        _claim();\\n    }\\n\\n    /* ========================================================================================= */\\n    /*                                   Fund Management - Private                               */\\n    /* ========================================================================================= */\\n\\n    function _cooldown() private {\\n        cooldownActivated = true;\\n        stakedAave.cooldown();\\n    }\\n\\n    function _redeem(uint256 _amount) private {\\n        stakedAave.redeem(address(this), _amount);\\n    }\\n\\n    function _claim() private {\\n        uint256 bufferBalanceBefore = getBufferBalance();\\n\\n        stakedAave.claimRewards(address(this), MAX_UINT);\\n\\n        uint256 bufferBalanceAfter = getBufferBalance();\\n        uint256 claimed = bufferBalanceAfter.sub(bufferBalanceBefore);\\n\\n        uint256 fee = _calculateFee(claimed, feeDivisors.claimFee);\\n        _incrementWithdrawableAaveFees(fee);\\n    }\\n\\n    /* ========================================================================================= */\\n    /*                                         Fee Logic                                         */\\n    /* ========================================================================================= */\\n\\n    function _calculateFee(uint256 _value, uint256 _feeDivisor)\\n        internal\\n        pure\\n        returns (uint256 fee)\\n    {\\n        if (_feeDivisor > 0) {\\n            fee = _value.div(_feeDivisor);\\n        }\\n    }\\n\\n    function _incrementWithdrawableAaveFees(uint256 _feeAmount) private {\\n        withdrawableAaveFees = withdrawableAaveFees.add(_feeAmount);\\n    }\\n\\n    /*\\n     * @notice Inverse of fee i.e., a fee divisor of 100 == 1%\\n     * @notice Three fee types\\n     * @dev Mint fee 0 or <= 2%\\n     * @dev Burn fee 0 or <= 1%\\n     * @dev Claim fee 0 <= 4%\\n     */\\n    function setFeeDivisors(\\n        uint256 mintFeeDivisor,\\n        uint256 burnFeeDivisor,\\n        uint256 claimFeeDivisor\\n    ) public onlyOwner {\\n        _setFeeDivisors(mintFeeDivisor, burnFeeDivisor, claimFeeDivisor);\\n    }\\n\\n    function _setFeeDivisors(\\n        uint256 _mintFeeDivisor,\\n        uint256 _burnFeeDivisor,\\n        uint256 _claimFeeDivisor\\n    ) private {\\n        require(_mintFeeDivisor == 0 || _mintFeeDivisor >= 50, \\\"Invalid fee\\\");\\n        require(_burnFeeDivisor == 0 || _burnFeeDivisor >= 100, \\\"Invalid fee\\\");\\n        require(_claimFeeDivisor >= 25, \\\"Invalid fee\\\");\\n        feeDivisors.mintFee = _mintFeeDivisor;\\n        feeDivisors.burnFee = _burnFeeDivisor;\\n        feeDivisors.claimFee = _claimFeeDivisor;\\n    }\\n\\n    /*\\n     * @notice Public callable function for claiming staking rewards\\n     */\\n    function withdrawFees() public {\\n        require(\\n            xTokenManager.isRevenueController(msg.sender),\\n            \\\"Callable only by Revenue Controller\\\"\\n        );\\n        (bool success, ) = msg.sender.call.value(address(this).balance)(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n\\n        uint256 aaveFees = withdrawableAaveFees;\\n        withdrawableAaveFees = 0;\\n        aave.safeTransfer(msg.sender, aaveFees);\\n    }\\n\\n    /* ========================================================================================= */\\n    /*                                           Utils                                           */\\n    /* ========================================================================================= */\\n\\n    function pauseContract() public onlyOwnerOrManager returns (bool) {\\n        _pause();\\n        return true;\\n    }\\n\\n    function unpauseContract() public onlyOwnerOrManager returns (bool) {\\n        _unpause();\\n        return true;\\n    }\\n\\n    function approveStakingContract() public onlyOwnerOrManager {\\n        aave.safeApprove(address(stakedAave), MAX_UINT);\\n    }\\n\\n    function approveKyberContract(address _token) public onlyOwnerOrManager {\\n        IERC20(_token).safeApprove(address(kyberProxy), MAX_UINT);\\n    }\\n\\n    /*\\n     * @notice Callable by admin to ensure LIQUIDATION_TIME_PERIOD won't elapse\\n     */\\n    function certifyAdmin() public onlyOwnerOrManager {\\n        _updateAdminActiveTimestamp();\\n    }\\n\\n    /*\\n     * @notice Emergency function in case of errant transfer of\\n     * xAAVE token directly to contract\\n     */\\n    function withdrawNativeToken() public onlyOwnerOrManager {\\n        uint256 tokenBal = balanceOf(address(this));\\n        if (tokenBal > 0) {\\n            IERC20(address(this)).safeTransfer(msg.sender, tokenBal);\\n        }\\n    }\\n\\n    modifier onlyOwnerOrManager {\\n        require(\\n            msg.sender == owner() ||\\n                xTokenManager.isManager(msg.sender, address(this)),\\n            \\\"Non-admin caller\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     *  BlockLock logic: Implements locking of mint, burn, transfer and transferFrom\\n     *  functions via a notLocked modifier.\\n     *  Functions are locked per address.\\n     */\\n    modifier notLocked(address lockedAddress) {\\n        require(\\n            lastLockedBlock[lockedAddress] <= block.number,\\n            \\\"Function is temporarily locked for this address\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Lock mint, burn, transfer and transferFrom functions\\n     *      for _address for BLOCK_LOCK_COUNT blocks\\n     */\\n    function lock(address _address) private {\\n        lastLockedBlock[_address] = block.number + BLOCK_LOCK_COUNT;\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender != tx.origin, \\\"Errant ETH deposit\\\");\\n    }\\n\\n    function setVotingAaveAddress(IERC20 _votingAave) public onlyOwner {\\n        votingAave = _votingAave;\\n    }\\n\\n    function setGovernanceV2Address(IAaveGovernanceV2 _governanceV2)\\n        public\\n        onlyOwner\\n    {\\n        if (address(governanceV2) == address(0)) {\\n            governanceV2 = _governanceV2;\\n        }\\n    }\\n\\n    function voteV2(uint256 proposalId, bool support)\\n        public\\n        onlyOwnerOrManager\\n    {\\n        governanceV2.submitVote(proposalId, support);\\n    }\\n\\n    function addToWhitelist(address _address) external onlyOwnerOrManager {\\n        whitelist[_address] = true;\\n    }\\n\\n    function removeFromWhitelist(address _address) external onlyOwnerOrManager {\\n        whitelist[_address] = false;\\n    }\\n\\n    function setxTokenManager(IxTokenManager _manager) external onlyOwner {\\n        require(\\n            address(xTokenManager) == address(0),\\n            \\\"Cannot set manager twice\\\"\\n        );\\n        xTokenManager = _manager;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n\\n\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20MinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n\\n    function __ERC20_init(string memory name, string memory symbol) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name, symbol);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\\n\\n\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/Pausable.sol\": {\r\n      \"content\": \"pragma solidity 0.6.2;\\n\\ncontract Pausable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool public paused;\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interface/IxTokenManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.6.2;\\n\\ninterface IxTokenManager {\\n  /**\\n   * @dev Add a manager to an xAsset fund\\n   */\\n  function addManager(address manager, address fund) external;\\n\\n  /**\\n   * @dev Remove a manager from an xAsset fund\\n   */\\n  function removeManager(address manager, address fund) external;\\n\\n  /**\\n   * @dev Check if an address is a manager for a fund\\n   */\\n  function isManager(address manager, address fund) external view returns (bool);\\n\\n  /**\\n   * @dev Set revenue controller\\n   */\\n  function setRevenueController(address controller) external;\\n\\n  /**\\n   * @dev Check if address is revenue controller\\n   */\\n  function isRevenueController(address caller) external view returns (bool);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LIQUIDATION_TIME_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminActiveTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"approveKyberContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"redeemForEth\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minRate\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"incrementalAave\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aaveHoldingsBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"calculateMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"certifyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimExternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minReturns\",\"type\":\"uint256[]\"}],\"name\":\"convertTokensToTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDivisors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAmountOfAssetHeld\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBufferBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawableFees\",\"outputs\":[{\"internalType\":\"address[2]\",\"name\":\"feeAssets\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"feeAmounts\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_aave\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_votingAave\",\"type\":\"address\"},{\"internalType\":\"contract IStakedAave\",\"name\":\"_stakedAave\",\"type\":\"address\"},{\"internalType\":\"contract IAaveProtoGovernance\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"contract IKyberNetworkProxy\",\"name\":\"_kyberProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintFeeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnFeeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimFeeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_mandate\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastLockedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mandate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minRate\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"aaveAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"}],\"name\":\"mintWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintFeeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnFeeDivisor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimFeeDivisor\",\"type\":\"uint256\"}],\"name\":\"setFeeDivisors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAaveGovernanceV2\",\"name\":\"_governanceV2\",\"type\":\"address\"}],\"name\":\"setGovernanceV2Address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_votingAave\",\"type\":\"address\"}],\"name\":\"setVotingAaveAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IxTokenManager\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setxTokenManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vote\",\"type\":\"uint256\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"voteV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawableAaveFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"xAAVE","CompilerVersion":"v0.6.2+commit.bacdbe57","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}