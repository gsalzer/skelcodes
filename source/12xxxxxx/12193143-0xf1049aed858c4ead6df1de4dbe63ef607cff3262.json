{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.8.2;\r\n\r\n\r\nstruct BassetPersonal {\r\n    // Address of the bAsset\r\n    address addr;\r\n    // Address of the bAsset\r\n    address integrator;\r\n    // An ERC20 can charge transfer fee, for example USDT, DGX tokens.\r\n    bool hasTxFee; // takes a byte in storage\r\n    // Status of the bAsset\r\n    BassetStatus status;\r\n}\r\n\r\nstruct BassetData {\r\n    // 1 Basset * ratio / ratioScale == x Masset (relative value)\r\n    // If ratio == 10e8 then 1 bAsset = 10 mAssets\r\n    // A ratio is divised as 10^(18-tokenDecimals) * measurementMultiple(relative value of 1 base unit)\r\n    uint128 ratio;\r\n    // Amount of the Basset that is held in Collateral\r\n    uint128 vaultBalance;\r\n}\r\n\r\n// Status of the Basset - has it broken its peg?\r\nenum BassetStatus {\r\n    Default,\r\n    Normal,\r\n    BrokenBelowPeg,\r\n    BrokenAbovePeg,\r\n    Blacklisted,\r\n    Liquidating,\r\n    Liquidated,\r\n    Failed\r\n}\r\n\r\nstruct BasketState {\r\n    bool undergoingRecol;\r\n    bool failed;\r\n}\r\n\r\nstruct InvariantConfig {\r\n    uint256 a;\r\n    WeightLimits limits;\r\n}\r\n\r\nstruct WeightLimits {\r\n    uint128 min;\r\n    uint128 max;\r\n}\r\n\r\nstruct FeederConfig {\r\n    uint256 supply;\r\n    uint256 a;\r\n    WeightLimits limits;\r\n}\r\n\r\nstruct AmpData {\r\n    uint64 initialA;\r\n    uint64 targetA;\r\n    uint64 rampStartTime;\r\n    uint64 rampEndTime;\r\n}\r\n\r\nstruct FeederData {\r\n    uint256 swapFee;\r\n    uint256 redemptionFee;\r\n    uint256 govFee;\r\n    uint256 pendingFees;\r\n    uint256 cacheSize;\r\n    BassetPersonal[] bAssetPersonal;\r\n    BassetData[] bAssetData;\r\n    AmpData ampData;\r\n    WeightLimits weightLimits;\r\n}\r\n\r\nstruct AssetData {\r\n    uint8 idx;\r\n    uint256 amt;\r\n    BassetPersonal personal;\r\n}\r\n\r\nstruct Asset {\r\n    uint8 idx;\r\n    address addr;\r\n    bool exists;\r\n}\r\n\r\nabstract contract IFeederPool {\r\n    // Mint\r\n    function mint(\r\n        address _input,\r\n        uint256 _inputQuantity,\r\n        uint256 _minOutputQuantity,\r\n        address _recipient\r\n    ) external virtual returns (uint256 mintOutput);\r\n\r\n    function mintMulti(\r\n        address[] calldata _inputs,\r\n        uint256[] calldata _inputQuantities,\r\n        uint256 _minOutputQuantity,\r\n        address _recipient\r\n    ) external virtual returns (uint256 mintOutput);\r\n\r\n    function getMintOutput(address _input, uint256 _inputQuantity)\r\n        external\r\n        view\r\n        virtual\r\n        returns (uint256 mintOutput);\r\n\r\n    function getMintMultiOutput(address[] calldata _inputs, uint256[] calldata _inputQuantities)\r\n        external\r\n        view\r\n        virtual\r\n        returns (uint256 mintOutput);\r\n\r\n    // Swaps\r\n    function swap(\r\n        address _input,\r\n        address _output,\r\n        uint256 _inputQuantity,\r\n        uint256 _minOutputQuantity,\r\n        address _recipient\r\n    ) external virtual returns (uint256 swapOutput);\r\n\r\n    function getSwapOutput(\r\n        address _input,\r\n        address _output,\r\n        uint256 _inputQuantity\r\n    ) external view virtual returns (uint256 swapOutput);\r\n\r\n    // Redemption\r\n    function redeem(\r\n        address _output,\r\n        uint256 _fpTokenQuantity,\r\n        uint256 _minOutputQuantity,\r\n        address _recipient\r\n    ) external virtual returns (uint256 outputQuantity);\r\n\r\n    function redeemProportionately(\r\n        uint256 _fpTokenQuantity,\r\n        uint256[] calldata _minOutputQuantities,\r\n        address _recipient\r\n    ) external virtual returns (uint256[] memory outputQuantities);\r\n\r\n    function redeemExactBassets(\r\n        address[] calldata _outputs,\r\n        uint256[] calldata _outputQuantities,\r\n        uint256 _maxMassetQuantity,\r\n        address _recipient\r\n    ) external virtual returns (uint256 mAssetRedeemed);\r\n\r\n    function getRedeemOutput(address _output, uint256 _fpTokenQuantity)\r\n        external\r\n        view\r\n        virtual\r\n        returns (uint256 bAssetOutput);\r\n\r\n    function getRedeemExactBassetsOutput(\r\n        address[] calldata _outputs,\r\n        uint256[] calldata _outputQuantities\r\n    ) external view virtual returns (uint256 mAssetAmount);\r\n\r\n    // Views\r\n    function mAsset() external view virtual returns (address);\r\n\r\n    function getPrice() public view virtual returns (uint256 price, uint256 k);\r\n\r\n    function getConfig() external view virtual returns (FeederConfig memory config);\r\n\r\n    function getBasset(address _token)\r\n        external\r\n        view\r\n        virtual\r\n        returns (BassetPersonal memory personal, BassetData memory data);\r\n\r\n    function getBassets()\r\n        external\r\n        view\r\n        virtual\r\n        returns (BassetPersonal[] memory personal, BassetData[] memory data);\r\n\r\n    // SavingsManager\r\n    function collectPlatformInterest()\r\n        external\r\n        virtual\r\n        returns (uint256 mintAmount, uint256 newSupply);\r\n\r\n    function collectPendingFees() external virtual;\r\n}\r\n\r\ncontract ModuleKeys {\r\n    // Governance\r\n    // ===========\r\n    // keccak256(\"Governance\");\r\n    bytes32 internal constant KEY_GOVERNANCE =\r\n        0x9409903de1e6fd852dfc61c9dacb48196c48535b60e25abf92acc92dd689078d;\r\n    //keccak256(\"Staking\");\r\n    bytes32 internal constant KEY_STAKING =\r\n        0x1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d167034;\r\n    //keccak256(\"ProxyAdmin\");\r\n    bytes32 internal constant KEY_PROXY_ADMIN =\r\n        0x96ed0203eb7e975a4cbcaa23951943fa35c5d8288117d50c12b3d48b0fab48d1;\r\n\r\n    // mStable\r\n    // =======\r\n    // keccak256(\"OracleHub\");\r\n    bytes32 internal constant KEY_ORACLE_HUB =\r\n        0x8ae3a082c61a7379e2280f3356a5131507d9829d222d853bfa7c9fe1200dd040;\r\n    // keccak256(\"Manager\");\r\n    bytes32 internal constant KEY_MANAGER =\r\n        0x6d439300980e333f0256d64be2c9f67e86f4493ce25f82498d6db7f4be3d9e6f;\r\n    //keccak256(\"Recollateraliser\");\r\n    bytes32 internal constant KEY_RECOLLATERALISER =\r\n        0x39e3ed1fc335ce346a8cbe3e64dd525cf22b37f1e2104a755e761c3c1eb4734f;\r\n    //keccak256(\"MetaToken\");\r\n    bytes32 internal constant KEY_META_TOKEN =\r\n        0xea7469b14936af748ee93c53b2fe510b9928edbdccac3963321efca7eb1a57a2;\r\n    // keccak256(\"SavingsManager\");\r\n    bytes32 internal constant KEY_SAVINGS_MANAGER =\r\n        0x12fe936c77a1e196473c4314f3bed8eeac1d757b319abb85bdda70df35511bf1;\r\n    // keccak256(\"Liquidator\");\r\n    bytes32 internal constant KEY_LIQUIDATOR =\r\n        0x1e9cb14d7560734a61fa5ff9273953e971ff3cd9283c03d8346e3264617933d4;\r\n    // keccak256(\"InterestValidator\");\r\n    bytes32 internal constant KEY_INTEREST_VALIDATOR =\r\n        0xc10a28f028c7f7282a03c90608e38a4a646e136e614e4b07d119280c5f7f839f;\r\n}\r\n\r\ninterface INexus {\r\n    function governor() external view returns (address);\r\n\r\n    function getModule(bytes32 key) external view returns (address);\r\n\r\n    function proposeModule(bytes32 _key, address _addr) external;\r\n\r\n    function cancelProposedModule(bytes32 _key) external;\r\n\r\n    function acceptProposedModule(bytes32 _key) external;\r\n\r\n    function acceptProposedModules(bytes32[] calldata _keys) external;\r\n\r\n    function requestLockModule(bytes32 _key) external;\r\n\r\n    function cancelLockModule(bytes32 _key) external;\r\n\r\n    function lockModule(bytes32 _key) external;\r\n}\r\n\r\nabstract contract ImmutableModule is ModuleKeys {\r\n    INexus public immutable nexus;\r\n\r\n    /**\r\n     * @dev Initialization function for upgradable proxy contracts\r\n     * @param _nexus Nexus contract address\r\n     */\r\n    constructor(address _nexus) {\r\n        require(_nexus != address(0), \"Nexus address is zero\");\r\n        nexus = INexus(_nexus);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governor.\r\n     */\r\n    modifier onlyGovernor() {\r\n        _onlyGovernor();\r\n        _;\r\n    }\r\n\r\n    function _onlyGovernor() internal view {\r\n        require(msg.sender == _governor(), \"Only governor can execute\");\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Governance.\r\n     *      Governance is either Governor address or Governance address.\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(\r\n            msg.sender == _governor() || msg.sender == _governance(),\r\n            \"Only governance can execute\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the ProxyAdmin.\r\n     */\r\n    modifier onlyProxyAdmin() {\r\n        require(msg.sender == _proxyAdmin(), \"Only ProxyAdmin can execute\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to allow function calls only from the Manager.\r\n     */\r\n    modifier onlyManager() {\r\n        require(msg.sender == _manager(), \"Only manager can execute\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Governor address from the Nexus\r\n     * @return Address of Governor Contract\r\n     */\r\n    function _governor() internal view returns (address) {\r\n        return nexus.governor();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns Governance Module address from the Nexus\r\n     * @return Address of the Governance (Phase 2)\r\n     */\r\n    function _governance() internal view returns (address) {\r\n        return nexus.getModule(KEY_GOVERNANCE);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Staking Module address from the Nexus\r\n     * @return Address of the Staking Module contract\r\n     */\r\n    function _staking() internal view returns (address) {\r\n        return nexus.getModule(KEY_STAKING);\r\n    }\r\n\r\n    /**\r\n     * @dev Return ProxyAdmin Module address from the Nexus\r\n     * @return Address of the ProxyAdmin Module contract\r\n     */\r\n    function _proxyAdmin() internal view returns (address) {\r\n        return nexus.getModule(KEY_PROXY_ADMIN);\r\n    }\r\n\r\n    /**\r\n     * @dev Return MetaToken Module address from the Nexus\r\n     * @return Address of the MetaToken Module contract\r\n     */\r\n    function _metaToken() internal view returns (address) {\r\n        return nexus.getModule(KEY_META_TOKEN);\r\n    }\r\n\r\n    /**\r\n     * @dev Return OracleHub Module address from the Nexus\r\n     * @return Address of the OracleHub Module contract\r\n     */\r\n    function _oracleHub() internal view returns (address) {\r\n        return nexus.getModule(KEY_ORACLE_HUB);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Manager Module address from the Nexus\r\n     * @return Address of the Manager Module contract\r\n     */\r\n    function _manager() internal view returns (address) {\r\n        return nexus.getModule(KEY_MANAGER);\r\n    }\r\n\r\n    /**\r\n     * @dev Return SavingsManager Module address from the Nexus\r\n     * @return Address of the SavingsManager Module contract\r\n     */\r\n    function _savingsManager() internal view returns (address) {\r\n        return nexus.getModule(KEY_SAVINGS_MANAGER);\r\n    }\r\n\r\n    /**\r\n     * @dev Return Recollateraliser Module address from the Nexus\r\n     * @return  Address of the Recollateraliser Module contract (Phase 2)\r\n     */\r\n    function _recollateraliser() internal view returns (address) {\r\n        return nexus.getModule(KEY_RECOLLATERALISER);\r\n    }\r\n}\r\n\r\nabstract contract PausableModule is ImmutableModule {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by Governor\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by Governor\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool internal _paused = false;\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     * Hooks into the Module to give the Governor ability to pause\r\n     * @param _nexus Nexus contract address\r\n     */\r\n    constructor(address _nexus) ImmutableModule(_nexus) {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     * @return Returns `true` when paused, otherwise `false`\r\n     */\r\n    function paused() external view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the Governor to pause, triggers stopped state.\r\n     */\r\n    function pause() external onlyGovernor whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by Governor to unpause, returns to normal state.\r\n     */\r\n    function unpause() external onlyGovernor whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title   InterestValidator\r\n * @author  mStable\r\n * @notice  Simply validates the platform interest collection from the Feeder Pools. Normally this function\r\n *          is supported by the SavingsManager, which then distributes the inflated tokens to SAVE contracts.\r\n *          However, given that fPools collect value internally, we simply want to provide protections here\r\n *          without actually inflating supply. As such, this code is forked from `savings/SavingsManager.sol`.\r\n * @dev     VERSION: 1.0\r\n *          DATE:    2021-03-01\r\n */\r\ncontract InterestValidator is PausableModule {\r\n    event InterestCollected(\r\n        address indexed feederPool,\r\n        uint256 interest,\r\n        uint256 newTotalSupply,\r\n        uint256 apy\r\n    );\r\n    event GovFeeCollected(address indexed feederPool, address mAsset, uint256 amount);\r\n\r\n    // Utils to help keep interest under check\r\n    uint256 private constant SECONDS_IN_YEAR = 365 days;\r\n    // Theoretical cap on APY to avoid excess inflation\r\n    uint256 private constant MAX_APY = 15e18;\r\n\r\n    mapping(address => uint256) public lastBatchCollected;\r\n\r\n    constructor(address _nexus) PausableModule(_nexus) {}\r\n\r\n    /**\r\n     * @notice Collects and validates the interest of n feeder pools.\r\n     * @dev First calls to calculate the interest that has accrued, and then validates the potential inflation\r\n     * with respect to the previous timestamp.\r\n     * @param _fPools     Addresses of the feeder pools on which to accrue interest\r\n     */\r\n    function collectAndValidateInterest(address[] calldata _fPools) external whenNotPaused {\r\n        uint256 currentTime = block.timestamp;\r\n\r\n        uint256 len = _fPools.length;\r\n\r\n        for (uint256 i = 0; i < len; i++) {\r\n            address feeder = _fPools[i];\r\n\r\n            uint256 previousBatch = lastBatchCollected[feeder];\r\n            uint256 timeSincePreviousBatch = currentTime - previousBatch;\r\n            require(timeSincePreviousBatch > 12 hours, \"Cannot collect twice in 12 hours\");\r\n            lastBatchCollected[feeder] = currentTime;\r\n\r\n            // Batch collect\r\n            (uint256 interestCollected, uint256 totalSupply) =\r\n                IFeederPool(feeder).collectPlatformInterest();\r\n\r\n            if (interestCollected > 0) {\r\n                // Validate APY\r\n                uint256 apy =\r\n                    _validateCollection(totalSupply, interestCollected, timeSincePreviousBatch);\r\n\r\n                emit InterestCollected(feeder, interestCollected, totalSupply, apy);\r\n            } else {\r\n                emit InterestCollected(feeder, interestCollected, totalSupply, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Collects gov fees from fPools in the form of fPtoken, then converts to\r\n     * mAsset and sends directly to the SavingsManager, where it will be picked up and\r\n     * converted to mBPT upon the next collection\r\n     */\r\n    function collectGovFees(address[] calldata _fPools) external onlyGovernor {\r\n        uint256 len = _fPools.length;\r\n\r\n        address savingsManager = _savingsManager();\r\n        for (uint256 i = 0; i < len; i++) {\r\n            address fPool = _fPools[i];\r\n            // 1. Collect pending fees\r\n            IFeederPool(fPool).collectPendingFees();\r\n            uint256 fpTokenBal = IERC20(fPool).balanceOf(address(this));\r\n            // 2. If fpTokenBal > 0, convert to mAsset and transfer to savingsManager\r\n            if (fpTokenBal > 0) {\r\n                address mAsset = IFeederPool(fPool).mAsset();\r\n                uint256 outputAmt =\r\n                    IFeederPool(fPool).redeem(mAsset, fpTokenBal, (fpTokenBal * 7) / 10, savingsManager);\r\n                emit GovFeeCollected(fPool, mAsset, outputAmt);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Validates that an interest collection does not exceed a maximum APY. If last collection\r\n     * was under 30 mins ago, simply check it does not exceed 10bps\r\n     * @param _newSupply               New total supply of the mAsset\r\n     * @param _interest                Increase in total supply since last collection\r\n     * @param _timeSinceLastCollection Seconds since last collection\r\n     */\r\n    function _validateCollection(\r\n        uint256 _newSupply,\r\n        uint256 _interest,\r\n        uint256 _timeSinceLastCollection\r\n    ) internal pure returns (uint256 extrapolatedAPY) {\r\n        // Percentage increase in total supply\r\n        // e.g. (1e20 * 1e18) / 1e24 = 1e14 (or a 0.01% increase)\r\n        // e.g. (5e18 * 1e18) / 1.2e24 = 4.1667e12\r\n        // e.g. (1e19 * 1e18) / 1e21 = 1e16\r\n        uint256 oldSupply = _newSupply - _interest;\r\n        uint256 percentageIncrease = (_interest * 1e18) / oldSupply;\r\n\r\n        //      If over 30 mins, extrapolate APY\r\n        // e.g. day: (86400 * 1e18) / 3.154e7 = 2.74..e15\r\n        // e.g. 30 mins: (1800 * 1e18) / 3.154e7 = 5.7..e13\r\n        // e.g. epoch: (1593596907 * 1e18) / 3.154e7 = 50.4..e18\r\n        uint256 yearsSinceLastCollection = (_timeSinceLastCollection * 1e18) / SECONDS_IN_YEAR;\r\n\r\n        // e.g. 0.01% (1e14 * 1e18) / 2.74..e15 = 3.65e16 or 3.65% apr\r\n        // e.g. (4.1667e12 * 1e18) / 5.7..e13 = 7.1e16 or 7.1% apr\r\n        // e.g. (1e16 * 1e18) / 50e18 = 2e14\r\n        extrapolatedAPY = (percentageIncrease * 1e18) / yearsSinceLastCollection;\r\n\r\n        require(extrapolatedAPY < MAX_APY, \"Interest protected from inflating past maxAPY\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nexus\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feederPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GovFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feederPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interest\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"name\":\"InterestCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_fPools\",\"type\":\"address[]\"}],\"name\":\"collectAndValidateInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_fPools\",\"type\":\"address[]\"}],\"name\":\"collectGovFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBatchCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nexus\",\"outputs\":[{\"internalType\":\"contract INexus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"InterestValidator","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000afce80b19a8ce13dec0739a1aab7a028d6845eb3","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://436abad8c082d58d56e17d4d951ac6f414c37a712373bfa60a2bceea83a23fbd"}]}