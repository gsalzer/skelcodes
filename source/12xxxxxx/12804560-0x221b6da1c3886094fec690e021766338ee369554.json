{"status":"1","message":"OK","result":[{"SourceCode":"// File: node_modules\\@openzeppelin\\contracts\\utils\\Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\access\\Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @chainlink\\contracts\\src\\v0.8\\interfaces\\AggregatorV3Interface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals()\r\n    external\r\n    view\r\n    returns (\r\n      uint8\r\n    );\r\n\r\n  function description()\r\n    external\r\n    view\r\n    returns (\r\n      string memory\r\n    );\r\n\r\n  function version()\r\n    external\r\n    view\r\n    returns (\r\n      uint256\r\n    );\r\n\r\n  // getRoundData and latestRoundData should both raise \"No data present\"\r\n  // if they do not have data to report, instead of returning unset values\r\n  // which could be misinterpreted as actual reported values.\r\n  function getRoundData(\r\n    uint80 _roundId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\n\r\n// File: contracts\\TokenSwapV2.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\ncontract TokenSwapV2 is Ownable {\r\n\r\n    event PriceFeedUpdated(address addr);\r\n    event AdminWalletUpdated(address addr);\r\n    event TokenWithdrawed(uint256 amount);\r\n\r\n    event PhaseCreated(uint256 phaseId, uint256 lockPercentage, uint256 lockReleaseTime, uint256 minDeposit, uint256 totalSupply, uint256 pricePerToken, uint256 startTime, uint256 endTime);\r\n    event PhaseTimeUpdated(uint256 phaseId, uint256 startTime, uint256 endTime);\r\n    event LockInfoUpdated(uint256 phaseId, uint256 lockPercentage, uint256 lockReleaseTime);\r\n    event SaleInfoUpdated(uint256 phaseId, uint256 minDeposit, uint256 totalSupply, uint256 pricePerToken);\r\n\r\n    event Swapped(uint256 phaseId, address account, uint256 ethDeposited, uint256 ethRefunded, uint256 tokenSold, uint256 tokenLocked, int ethPrice);\r\n\r\n    event TokenClaimed(uint256 phaseId, address account, uint256 amount);\r\n\r\n    uint256 private constant ONE_HUNDRED_PERCENT = 10000; // 100%\r\n\r\n    IERC20 private _token;\r\n\r\n    AggregatorV3Interface private _priceFeed;\r\n\r\n    address private _adminWallet;\r\n\r\n    struct ReferralCodeInfo {\r\n        uint128 amount; // ETH\r\n        uint128 numSwap;\r\n    }\r\n\r\n    // Mapping referral code to statistics information\r\n    mapping(string => ReferralCodeInfo) private _referralCodes;\r\n\r\n    struct PhaseInfo {\r\n        uint128 lockPercentage;\r\n        uint128 lockReleaseTime;\r\n        uint128 minDeposit;\r\n        uint128 pricePerToken; // 100000000 <=> 1 USD\r\n        uint128 startTime;\r\n        uint128 endTime;\r\n        uint128 totalLocked;\r\n        uint128 totalSold;\r\n        uint128 totalSupply;\r\n    }\r\n\r\n    uint256 private _totalPhases;\r\n\r\n    // Mapping phase id to phase information\r\n    mapping(uint256 => PhaseInfo) private _phases;\r\n\r\n    uint256 private _totalLockBalance;\r\n\r\n    // Mapping phase id to user address and locked balance information\r\n    mapping(uint256 => mapping(address => uint256)) private _lockBalances;\r\n\r\n    /**\r\n     * @dev Throws if phase doesn't exist\r\n     */\r\n    modifier phaseExist(uint256 phaseId) {\r\n        require(_phases[phaseId].totalSupply > 0, \"TokenSwapV2: phase doesn't exist\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets initial values\r\n     */\r\n    constructor(address token, address priceFeed, address adminWallet)\r\n    {\r\n        _token = IERC20(token);\r\n\r\n        _priceFeed = AggregatorV3Interface(priceFeed);\r\n\r\n        _adminWallet = adminWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns smart contract information\r\n     */\r\n    function getContractInfo()\r\n        external\r\n        view\r\n        returns (address, address, uint256, uint256, uint256)\r\n    {\r\n        return (\r\n            _adminWallet, address(_token),\r\n            _token.balanceOf(address(this)), _totalPhases, _totalLockBalance\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Updates price feed\r\n     */\r\n    function updatePriceFeed(address priceFeed)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(priceFeed != address(0), \"TokenSwapV2: address is invalid\");\r\n\r\n        _priceFeed = AggregatorV3Interface(priceFeed);\r\n\r\n        emit PriceFeedUpdated(priceFeed);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates admin wallet address where contains ETH user deposited\r\n     * to smart contract for swapping\r\n     */\r\n    function updateAdminWallet(address adminWallet)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(adminWallet != address(0), \"TokenSwapV2: address is invalid\");\r\n\r\n        _adminWallet = adminWallet;\r\n\r\n        emit AdminWalletUpdated(adminWallet);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws token out of this smart contract and transfer to \r\n     * admin wallet\r\n     *\r\n     * Admin can withdraw all tokens that includes locked token of user in case emergency\r\n     */\r\n    function withdrawAllFund(uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(amount > 0, \"TokenSwapV2: amount is invalid\");\r\n\r\n        _token.transfer(_adminWallet, amount);\r\n\r\n        emit TokenWithdrawed(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates new phase\r\n     */\r\n    function createPhase(uint128 lockPercentage, uint128 lockReleaseTime, uint128 minDeposit, uint128 totalSupply, uint128 pricePerToken, uint128 startTime, uint128 endTime)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(lockPercentage <= ONE_HUNDRED_PERCENT, \"TokenSwapV2: percentage is invalid\");\r\n\r\n        require(minDeposit > 0 && totalSupply > 0 && pricePerToken > 0, \"TokenSwapV2: value must be greater than zero\");\r\n\r\n        require(startTime > block.timestamp && startTime < endTime, \"TokenSwapV2: time is invalid\");\r\n\r\n        uint256 id = ++_totalPhases;\r\n\r\n        PhaseInfo storage phase = _phases[id];\r\n        phase.lockPercentage = lockPercentage;\r\n        phase.lockReleaseTime = lockReleaseTime;\r\n        phase.minDeposit = minDeposit;\r\n        phase.pricePerToken = pricePerToken;\r\n        phase.startTime = startTime;\r\n        phase.endTime = endTime;\r\n        phase.totalSupply = totalSupply;\r\n\r\n        emit PhaseCreated(id, lockPercentage, lockReleaseTime, minDeposit, totalSupply, pricePerToken, startTime, endTime);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates lock information\r\n     */\r\n    function updateLockInfo(uint256 phaseId, uint128 lockPercentage, uint128 lockReleaseTime)\r\n        external\r\n        onlyOwner\r\n        phaseExist(phaseId)\r\n    {\r\n        require(lockPercentage <= ONE_HUNDRED_PERCENT, \"TokenSwapV2: percentage is invalid\");\r\n\r\n        PhaseInfo storage phase = _phases[phaseId];\r\n\r\n        require(phase.totalSold == 0, \"TokenSwapV2: can't update\");\r\n\r\n        phase.lockPercentage = lockPercentage;\r\n        phase.lockReleaseTime = lockReleaseTime;\r\n\r\n        emit LockInfoUpdated(phaseId, lockPercentage, lockReleaseTime);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates sale information\r\n     */\r\n    function updateSaleInfo(uint256 phaseId, uint128 minDeposit, uint128 totalSupply, uint128 pricePerToken)\r\n        external\r\n        onlyOwner\r\n        phaseExist(phaseId)\r\n    {\r\n        PhaseInfo storage phase = _phases[phaseId];\r\n\r\n        if (minDeposit != 0) {\r\n            phase.minDeposit = minDeposit;\r\n        }\r\n\r\n        if (totalSupply != 0) {\r\n            phase.totalSupply = totalSupply;\r\n        }\r\n\r\n        if (pricePerToken != 0) {\r\n            phase.pricePerToken = pricePerToken;\r\n        }\r\n\r\n        if (totalSupply != 0 || pricePerToken != 0) {\r\n            require(phase.totalSold == 0, \"TokenSwapV2: can't update\");\r\n        }\r\n\r\n        emit SaleInfoUpdated(phaseId, minDeposit, totalSupply, pricePerToken);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates phase time\r\n     */\r\n    function updatePhaseTime(uint256 phaseId, uint128 startTime, uint128 endTime)\r\n        external\r\n        onlyOwner\r\n        phaseExist(phaseId)\r\n    {\r\n        PhaseInfo storage phase = _phases[phaseId];\r\n\r\n        if (startTime != 0) {\r\n            phase.startTime = startTime;\r\n        }\r\n\r\n        if (endTime != 0) {\r\n            phase.endTime = endTime;\r\n        }\r\n\r\n        require((startTime == 0 || startTime > block.timestamp) && phase.startTime < phase.endTime, \"TokenSwapV2: time is invalid\");\r\n\r\n        emit PhaseTimeUpdated(phaseId, startTime, endTime);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns phase information\r\n     */\r\n    function getPhase(uint256 phaseId)\r\n        external\r\n        view\r\n        returns (PhaseInfo memory)\r\n    {\r\n        return _phases[phaseId];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns phases information\r\n     * @param filter 1: active, 2: ended, 3: all\r\n     */\r\n    function getPhases(uint256 phaseFrom, uint256 phaseTo, uint256 filter)\r\n        external\r\n        view\r\n        returns (uint256[] memory, PhaseInfo[] memory)\r\n    {\r\n        uint256 cnt = 0;\r\n        uint256 size = phaseTo - phaseFrom + 1;\r\n        uint256 currentTime = block.timestamp;\r\n\r\n        uint256[] memory tmpIds = new uint256[](size);\r\n\r\n        PhaseInfo[] memory tmpPhases = new PhaseInfo[](size);\r\n\r\n        for (uint256 i = phaseFrom; i <= phaseTo; i++) {\r\n            PhaseInfo memory phase = _phases[i];\r\n\r\n            if (phase.totalSupply == 0 || (filter == 1 && currentTime >= phase.endTime) || (filter == 2 && currentTime < phase.endTime)) {\r\n                continue;\r\n            }\r\n\r\n            tmpIds[cnt] = i;\r\n            tmpPhases[cnt] = phase;\r\n            cnt++;\r\n        }\r\n\r\n        uint256[] memory ids = new uint256[](cnt);\r\n\r\n        PhaseInfo[] memory phases = new PhaseInfo[](cnt);\r\n\r\n        for (uint256 i = 0; i < cnt; i++) {\r\n            ids[i] = tmpIds[i];\r\n            phases[i] = tmpPhases[i];\r\n        }\r\n\r\n        return (ids, phases);\r\n    }\r\n\r\n    /**\r\n     * @dev Swaps ETH to token\r\n     */\r\n    function swap(uint256 phaseId, string memory referralCode)\r\n        external\r\n        payable\r\n    {\r\n        PhaseInfo storage phase = _phases[phaseId];\r\n\r\n        require(block.timestamp >= phase.startTime && block.timestamp < phase.endTime, \"TokenSwapV2: not in swapping time\");\r\n\r\n        require(msg.value >= phase.minDeposit, \"TokenSwapV2: deposit amount isn't enough\");\r\n\r\n        uint256 remain = phase.totalSupply - phase.totalSold;\r\n\r\n        require(remain > 0, \"TokenSwapV2: total supply isn't enough\");\r\n\r\n        (, int ethPrice,,,) = _priceFeed.latestRoundData();\r\n\r\n        uint256 amount = msg.value * uint256(ethPrice) / phase.pricePerToken;\r\n\r\n        uint refund;\r\n\r\n        // Calculates redundant money\r\n        if (amount > remain) {\r\n            refund = (amount - remain) * phase.pricePerToken / uint256(ethPrice);\r\n            amount = remain;\r\n        }\r\n\r\n        require(amount <= (_token.balanceOf(address(this)) - _totalLockBalance), \"TokenSwapV2: balance isn't enough\");\r\n\r\n        // Refunds redundant money for user\r\n        if (refund > 0) {\r\n            payable(_msgSender()).transfer(refund);\r\n        }\r\n\r\n        // Transfers money to admin wallet\r\n        payable(_adminWallet).transfer(msg.value - refund);\r\n\r\n        // Calculates number of tokens that will be locked\r\n        uint256 locked = amount * phase.lockPercentage / ONE_HUNDRED_PERCENT;\r\n\r\n        // Transfers token for user\r\n        _token.transfer(_msgSender(), amount - locked);\r\n\r\n        if (locked > 0) {\r\n            _totalLockBalance += locked;\r\n\r\n            _lockBalances[phaseId][_msgSender()] += locked;\r\n\r\n            phase.totalLocked += uint128(locked);\r\n        }\r\n\r\n        phase.totalSold += uint128(amount);\r\n\r\n        // Manages referral codes\r\n        ReferralCodeInfo storage referral = _referralCodes[referralCode];\r\n        referral.amount += uint128(msg.value - refund);\r\n        referral.numSwap++;\r\n\r\n        emit Swapped(phaseId, _msgSender(), msg.value, refund, amount, locked, ethPrice);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns token balance of user in smart contract that includes\r\n     * claimable and unclaimable\r\n     */\r\n    function getUserBalance(address account, uint256 phaseFrom, uint256 phaseTo)\r\n        external\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        uint256 currentTime = block.timestamp;\r\n        uint256 balance;\r\n        uint256 lockBalance;\r\n\r\n        for (uint256 i = phaseFrom; i <= phaseTo; i++) {\r\n            uint256 amount = _lockBalances[i][account];\r\n\r\n            if (amount == 0) {\r\n                continue;\r\n            }\r\n\r\n            if (_phases[i].lockReleaseTime <= currentTime) {\r\n                balance += amount;\r\n\r\n            } else {\r\n                lockBalance += amount;\r\n            }\r\n        }\r\n\r\n        return (balance, lockBalance);\r\n    }\r\n\r\n    /**\r\n     * @dev Claims the remainning token after lock time end\r\n     */\r\n    function claimToken(uint256 phaseFrom, uint256 phaseTo)\r\n        external\r\n    {\r\n        address msgSender = _msgSender();\r\n        uint256 currentTime = block.timestamp;\r\n        uint256 balance;\r\n\r\n        for (uint256 i = phaseFrom; i <= phaseTo; i++) {\r\n            uint256 amount = _lockBalances[i][msgSender];\r\n\r\n            if (amount == 0) {\r\n                continue;\r\n            }\r\n\r\n            if (_phases[i].lockReleaseTime <= currentTime) {\r\n                balance += amount;\r\n\r\n                _phases[i].totalLocked -= uint128(amount);\r\n\r\n                emit TokenClaimed(i, msgSender, amount);\r\n\r\n                delete _lockBalances[i][msgSender];\r\n            }\r\n        }\r\n\r\n        require(balance > 0, \"TokenSwapV2: amount must be greater than zero\");\r\n\r\n        _totalLockBalance -= balance;\r\n\r\n        _token.transfer(msgSender, balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns referral code information\r\n     */\r\n    function getReferralCodeInfo(string memory referralCode)\r\n        external\r\n        view\r\n        returns (ReferralCodeInfo memory)\r\n    {\r\n        return _referralCodes[referralCode];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns ETH/USD price\r\n     */\r\n    function getEtherPrice()\r\n        external\r\n        view\r\n        returns (int)\r\n    {\r\n        (, int price,,,) = _priceFeed.latestRoundData();\r\n\r\n        return price;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adminWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AdminWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockReleaseTime\",\"type\":\"uint256\"}],\"name\":\"LockInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockPercentage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockReleaseTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"PhaseCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"PhaseTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"PriceFeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePerToken\",\"type\":\"uint256\"}],\"name\":\"SaleInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethRefunded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenLocked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"ethPrice\",\"type\":\"int256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phaseFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phaseTo\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"lockPercentage\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lockReleaseTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minDeposit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalSupply\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"pricePerToken\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"startTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endTime\",\"type\":\"uint128\"}],\"name\":\"createPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEtherPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"}],\"name\":\"getPhase\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"lockPercentage\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lockReleaseTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minDeposit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"pricePerToken\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"startTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalLocked\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalSold\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalSupply\",\"type\":\"uint128\"}],\"internalType\":\"struct TokenSwapV2.PhaseInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phaseFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phaseTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"filter\",\"type\":\"uint256\"}],\"name\":\"getPhases\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"lockPercentage\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lockReleaseTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"minDeposit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"pricePerToken\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"startTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalLocked\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalSold\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalSupply\",\"type\":\"uint128\"}],\"internalType\":\"struct TokenSwapV2.PhaseInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"}],\"name\":\"getReferralCodeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"numSwap\",\"type\":\"uint128\"}],\"internalType\":\"struct TokenSwapV2.ReferralCodeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"phaseFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phaseTo\",\"type\":\"uint256\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"referralCode\",\"type\":\"string\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adminWallet\",\"type\":\"address\"}],\"name\":\"updateAdminWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"lockPercentage\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"lockReleaseTime\",\"type\":\"uint128\"}],\"name\":\"updateLockInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"startTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endTime\",\"type\":\"uint128\"}],\"name\":\"updatePhaseTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"updatePriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"minDeposit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalSupply\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"pricePerToken\",\"type\":\"uint128\"}],\"name\":\"updateSaleInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAllFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenSwapV2","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000692accdd8b86692427e0aa4752ae917df01cc56f0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419000000000000000000000000930c2ef8a91e7c2d9703a14cfe612c8af0f970bf","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b65c2928a9fead629287e9c9ac5fa84053cfd6534599bef43c5bd50dad79a85f"}]}