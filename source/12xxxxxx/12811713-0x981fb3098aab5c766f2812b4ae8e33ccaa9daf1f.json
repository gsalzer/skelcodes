{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.5.12;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n    address internal _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address initialOwner) internal {\r\n        require(initialOwner != address(0));\r\n        _owner = initialOwner;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"New owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/**\r\n * @title SetterRole\r\n */\r\ncontract SetterRole is Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event SetterAdded(address indexed account);\r\n    event SetterRemoved(address indexed account);\r\n\r\n    Roles.Role private _setters;\r\n\r\n    modifier onlySetter() {\r\n        require(isSetter(msg.sender), \"Caller has no permission\");\r\n        _;\r\n    }\r\n\r\n    function isSetter(address account) public view returns (bool) {\r\n        return(_setters.has(account) || account == _owner);\r\n    }\r\n\r\n    function addSetter(address account) public onlyOwner {\r\n        _setters.add(account);\r\n        emit SetterAdded(account);\r\n    }\r\n\r\n    function removeSetter(address account) public onlyOwner {\r\n        _setters.remove(account);\r\n        emit SetterRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\n interface IERC20 {\r\n     function transfer(address to, uint256 value) external returns (bool);\r\n     function approve(address spender, uint256 value) external returns (bool);\r\n     function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n     function totalSupply() external view returns (uint256);\r\n     function balanceOf(address who) external view returns (uint256);\r\n     function allowance(address owner, address spender) external view returns (uint256);\r\n     function mint(address to, uint256 value) external returns (bool);\r\n     function burnFrom(address from, uint256 value) external;\r\n }\r\n\r\n interface IUSDT {\r\n     function totalSupply() external view returns (uint256);\r\n     function balanceOf(address account) external view returns (uint256);\r\n     function transfer(address recipient, uint256 amount) external;\r\n     function allowance(address owner, address spender) external view returns (uint256);\r\n     function approve(address spender, uint256 amount) external;\r\n     function transferFrom(address sender, address recipient, uint256 amount) external;\r\n     function decimals() external view returns(uint8);\r\n }\r\n\r\n/**\r\n * @title MF TokenSale contract\r\n * @author https://grox.solutions\r\n */\r\ncontract TokenSale is SetterRole {\r\n    using SafeMath for uint256;\r\n\r\n    IUSDT public USDT;\r\n    IERC20 public TOKEN;\r\n\r\n    uint256 public FEE_PERCENT = 500;\r\n    uint256 public REF_PERCENT = 2000;\r\n    uint256 public FUND_PERCENT = 7500;\r\n    uint256 public PERCENT_DIV = 10000;\r\n\r\n    uint256 internal rateMul;\r\n    uint256 internal rateDiv;\r\n    bool public rateChangeable;\r\n    bool public withdrawable;\r\n\r\n    struct User {\r\n        uint256 purchased;\r\n\r\n        address referrer;\r\n        address[] referrals;\r\n        uint256 refPercent;\r\n        uint256 totalBonuses;\r\n    }\r\n\r\n    mapping (address => User) public users;\r\n\r\n    address public fundWallet;\r\n    address public feeWallet;\r\n\r\n    address public defaultRef;\r\n\r\n    uint256 internal _tokensSold;\r\n\r\n    event Purchased(address indexed account, uint256 usdt, uint256 tokens);\r\n    event RefBonus(address indexed account, address indexed referral, uint256 refPercent, uint256 amount);\r\n    event RateChanged(uint256 oldRateMul, uint256 oldRateDiv, uint256 newRateMul, uint256 newRateDiv);\r\n    event FeeWalletChanged(address oldFeeWallet, address newFeeWallet);\r\n    event FundWalletChanged(address oldFundWallet, address newFundWallet);\r\n\r\n    constructor(address USDTAddr, address TOKENAddr, address initialOwner, address initialFeeWallet, address initialFundWallet, address defaultReferrer, uint256 _rateMul, uint256 _rateDiv, bool _rateChangeable, bool _withdrawable) public Ownable(initialOwner) {\r\n        require(USDTAddr != address(0) && TOKENAddr != address(0) && initialFeeWallet != address(0) && initialFundWallet != address(0) && defaultReferrer != address(0));\r\n\r\n        USDT = IUSDT(USDTAddr);\r\n        TOKEN = IERC20(TOKENAddr);\r\n\r\n        feeWallet = initialFeeWallet;\r\n        fundWallet = initialFundWallet;\r\n        defaultRef = defaultReferrer;\r\n\r\n        rateMul = _rateMul;\r\n        rateDiv = _rateDiv;\r\n\r\n        rateChangeable = _rateChangeable;\r\n        withdrawable = _withdrawable;\r\n\r\n        emit RateChanged(0, 0, rateMul, rateDiv);\r\n    }\r\n\r\n    function buyToken(uint256 usdtAmount, address referrer) public {\r\n        require(usdtAmount >= 100e6, \"Minimum purchase is 100$\");\r\n        require(USDT.allowance(msg.sender, address(this)) >= usdtAmount, \"Approve USDT to this contract first\");\r\n\r\n        if (users[msg.sender].referrer == address(0)) {\r\n            if (referrer == address(0)) {\r\n                referrer = defaultRef;\r\n            }\r\n            users[msg.sender].referrer = referrer;\r\n            users[referrer].referrals.push(msg.sender);\r\n        }\r\n\r\n        USDT.transferFrom(msg.sender, address(this), usdtAmount);\r\n\r\n        uint256 refBonus;\r\n        if (users[msg.sender].referrer != address(0)) {\r\n            uint256 refPercent = users[users[msg.sender].referrer].refPercent > 0 ? users[users[msg.sender].referrer].refPercent : REF_PERCENT;\r\n            refBonus = usdtAmount * refPercent / PERCENT_DIV;\r\n            USDT.transfer(users[msg.sender].referrer, refBonus);\r\n            users[msg.sender].totalBonuses = users[msg.sender].totalBonuses.add(refBonus);\r\n            emit RefBonus(users[msg.sender].referrer, msg.sender, refPercent, refBonus);\r\n        }\r\n\r\n        uint256 fee = usdtAmount.mul(FEE_PERCENT + REF_PERCENT).div(PERCENT_DIV);\r\n        if (fee.sub(refBonus) > 0) {\r\n            USDT.transfer(feeWallet, fee.sub(refBonus));\r\n        }\r\n\r\n        USDT.transfer(fundWallet, usdtAmount.mul(FUND_PERCENT).div(PERCENT_DIV));\r\n\r\n        uint256 tokens = getEstimation(usdtAmount);\r\n\r\n        TOKEN.transfer(msg.sender, tokens);\r\n\r\n        _tokensSold = _tokensSold.add(tokens);\r\n        users[msg.sender].purchased = users[msg.sender].purchased.add(tokens);\r\n\r\n        emit Purchased(msg.sender, usdtAmount, tokens);\r\n    }\r\n\r\n    function withdrawERC20(address ERC20Token, address recipient) external onlyOwner {\r\n        if (ERC20Token == address(TOKEN)) {\r\n            require(withdrawable);\r\n        }\r\n\r\n        uint256 amount = IERC20(ERC20Token).balanceOf(address(this));\r\n        IERC20(ERC20Token).transfer(recipient, amount);\r\n\r\n    }\r\n\r\n    function usdtBalanceOf(address account) public view returns(uint256 usdt) {\r\n        return USDT.balanceOf(account);\r\n    }\r\n\r\n    function tokenBalanceOf(address account) public view returns(uint256 tokens) {\r\n        return TOKEN.balanceOf(account);\r\n    }\r\n\r\n    function getPurchasedOf(address account) public view returns(uint256 tokens) {\r\n        return users[account].purchased;\r\n    }\r\n\r\n    function getEstimation(uint256 usdt) public view returns(uint256 tokens) {\r\n        require(usdt >= 100e6, \"Minimum purchase is 100$\");\r\n        return usdt.mul(rateMul).div(rateDiv);\r\n    }\r\n\r\n    function getAvailableTokens() public view returns(uint256 tokens) {\r\n        return TOKEN.balanceOf(address(this));\r\n    }\r\n\r\n    function getSoldTokens() public view returns(uint256 tokens) {\r\n        return _tokensSold;\r\n    }\r\n\r\n    function getReferrerInfo(address account) public view returns(address referrer, uint256 refPercent, uint256 amountOfReferrals, uint256 totalBonuses) {\r\n        referrer = users[account].referrer;\r\n        refPercent = users[account].refPercent > 0 ? users[account].refPercent : REF_PERCENT;\r\n        amountOfReferrals = users[account].referrals.length;\r\n        totalBonuses = users[account].totalBonuses;\r\n    }\r\n\r\n    function getReferralInfo(address account, uint256 from, uint256 to) public view returns(address[] memory referrals, uint256[] memory bonuses) {\r\n        uint256 amountOfReferrals = users[account].referrals.length;\r\n\r\n        if (to > amountOfReferrals) {\r\n            to = amountOfReferrals;\r\n        }\r\n\r\n        require(to >= from);\r\n\r\n        uint256 length = to - from;\r\n\r\n        referrals = new address[](length);\r\n        bonuses = new uint256[](length);\r\n\r\n        for (uint256 i = 0; i < length; i++) {\r\n            referrals[i] = users[account].referrals[from + i];\r\n            bonuses[i] = users[referrals[i]].totalBonuses;\r\n        }\r\n    }\r\n\r\n    function setParameters(bool _withdrawable, bool _rateChangeable) public onlyOwner {\r\n        if (withdrawable && !_withdrawable) {\r\n            withdrawable = false;\r\n        }\r\n        if (rateChangeable && !_rateChangeable) {\r\n            rateChangeable = false;\r\n        }\r\n    }\r\n\r\n    function setReferrer(address ref, uint256 refPercent) public onlySetter {\r\n        require(ref != address(0) && refPercent <= FEE_PERCENT + REF_PERCENT);\r\n        users[ref].refPercent = refPercent;\r\n    }\r\n\r\n    function setRate(uint256 newRateMul, uint256 newRateDiv) public onlySetter {\r\n        require(rateChangeable && newRateMul >= 1 && newRateDiv >= 1);\r\n\r\n        emit RateChanged(rateMul, rateDiv, newRateMul, newRateDiv);\r\n\r\n        rateMul = newRateMul;\r\n        rateDiv = newRateDiv;\r\n    }\r\n\r\n    function _bytesToAddress(bytes memory source) internal pure returns(address parsedreferrer) {\r\n        assembly {\r\n            parsedreferrer := mload(add(source,0x14))\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"USDTAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"TOKENAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialFeeWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialFundWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultReferrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rateMul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rateDiv\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_rateChangeable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_withdrawable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFeeWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeWallet\",\"type\":\"address\"}],\"name\":\"FeeWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFundWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFundWallet\",\"type\":\"address\"}],\"name\":\"FundWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRateMul\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRateDiv\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRateMul\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRateDiv\",\"type\":\"uint256\"}],\"name\":\"RateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"refPercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SetterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"SetterRemoved\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"FEE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FUND_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERCENT_DIV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REF_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IUSDT\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buyToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultRef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"fundWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAvailableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdt\",\"type\":\"uint256\"}],\"name\":\"getEstimation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPurchasedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"getReferralInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"referrals\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bonuses\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReferrerInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfReferrals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonuses\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSoldTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isSetter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rateChangeable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSetter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_withdrawable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_rateChangeable\",\"type\":\"bool\"}],\"name\":\"setParameters\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRateMul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRateDiv\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refPercent\",\"type\":\"uint256\"}],\"name\":\"setReferrer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"usdtBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"refPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBonuses\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"ERC20Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TokenSale","CompilerVersion":"v0.5.12+commit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000e2133afd46bc1f04d9ce0d1c29e738b8fa7f45840000000000000000000000004cf9f27b8bdc711b6bbb720275195c926155e2bd000000000000000000000000befac84ea0467c5f26de1cf82724830326363958000000000000000000000000aee77a3b4db2703d59e83024dd842b3f8a76947b00000000000000000000000084a869c4d502c12cee49b79ab2fcc794ef5729e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5df24442ea4eef4424f83dbfa840151397f28895c3cd4adf82968d2749ead635"}]}