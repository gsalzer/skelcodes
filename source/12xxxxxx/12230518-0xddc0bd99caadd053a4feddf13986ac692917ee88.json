{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 30000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BaseLending.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\nimport \\\"./RoleAware.sol\\\";\\n\\n/// @title Base lending behavior\\nabstract contract BaseLending {\\n    uint256 constant FP32 = 2**32;\\n    uint256 constant ACCUMULATOR_INIT = 10**18;\\n\\n    struct YieldAccumulator {\\n        uint256 accumulatorFP;\\n        uint256 lastUpdated;\\n        uint256 hourlyYieldFP;\\n    }\\n\\n    struct LendingMetadata {\\n        uint256 totalLending;\\n        uint256 totalBorrowed;\\n        uint256 lendingBuffer;\\n        uint256 lendingCap;\\n    }\\n    mapping(address => LendingMetadata) public lendingMeta;\\n\\n    /// @dev accumulate interest per issuer (like compound indices)\\n    mapping(address => YieldAccumulator) public borrowYieldAccumulators;\\n\\n    uint256 public maxHourlyYieldFP;\\n    uint256 public yieldChangePerSecondFP;\\n\\n    /// @dev simple formula for calculating interest relative to accumulator\\n    function applyInterest(\\n        uint256 balance,\\n        uint256 accumulatorFP,\\n        uint256 yieldQuotientFP\\n    ) internal pure returns (uint256) {\\n        // 1 * FP / FP = 1\\n        return (balance * accumulatorFP) / yieldQuotientFP;\\n    }\\n\\n    /// update the yield for an asset based on recent supply and demand\\n    function updatedYieldFP(\\n        // previous yield\\n        uint256 yieldFP,\\n        // timestamp\\n        uint256 lastUpdated,\\n        uint256 totalLendingInBucket,\\n        uint256 bucketTarget,\\n        uint256 buyingSpeed,\\n        uint256 withdrawingSpeed,\\n        uint256 bucketMaxYield\\n    ) internal view returns (uint256) {\\n        uint256 timeDiff = block.timestamp - lastUpdated;\\n        uint256 yieldDiff = timeDiff * yieldChangePerSecondFP;\\n\\n        if (\\n            totalLendingInBucket >= bucketTarget ||\\n            buyingSpeed >= withdrawingSpeed\\n        ) {\\n            yieldFP -= min(yieldFP, yieldDiff);\\n        } else {\\n            yieldFP += yieldDiff;\\n            if (yieldFP > bucketMaxYield) {\\n                yieldFP = bucketMaxYield;\\n            }\\n        }\\n\\n        return max(FP32, yieldFP);\\n    }\\n\\n    function updateSpeed(\\n        uint256 speed,\\n        uint256 lastAction,\\n        uint256 amount,\\n        uint256 runtime\\n    ) internal view returns (uint256 newSpeed, uint256 newLastAction) {\\n        uint256 timeDiff = block.timestamp - lastAction;\\n        uint256 updateAmount = (amount * runtime) / (timeDiff + 1);\\n\\n        uint256 oldSpeedWeight = (runtime + 120 minutes) / 3;\\n        uint256 updateWeight = timeDiff + 1;\\n        // scale adjustment relative to runtime\\n        newSpeed =\\n            (speed * oldSpeedWeight + updateAmount * updateWeight) /\\n            (oldSpeedWeight + updateWeight);\\n        newLastAction = block.timestamp;\\n    }\\n\\n    /// @dev minimum\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n\\n    /// @dev maximum\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    function _makeFallbackBond(\\n        address issuer,\\n        address holder,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function lendingTarget(LendingMetadata storage meta)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return min(meta.lendingCap, meta.totalBorrowed + meta.lendingBuffer);\\n    }\\n\\n    /// View lending target\\n    function viewLendingTarget(address issuer) external view returns (uint256) {\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        return lendingTarget(meta);\\n    }\\n\\n    /// Available tokens to this issuance\\n    function issuanceBalance(address issuance)\\n        internal\\n        view\\n        virtual\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/BondLending.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\nimport \\\"./BaseLending.sol\\\";\\n\\nstruct Bond {\\n    address holder;\\n    address issuer;\\n    uint256 originalPrice;\\n    uint256 returnAmount;\\n    uint256 maturityTimestamp;\\n    uint256 runtime;\\n    uint256 yieldFP;\\n}\\n\\n/** \\n@title Lending for fixed runtime, fixed interest\\nLenders can pick their own bond maturity date\\n@dev In order to manage interest rates for the different\\nmaturities and create a yield curve we bucket\\nbond runtimes into weighted baskets and adjust\\nrates individually per bucket, based on supply and demand.\\n*/\\nabstract contract BondLending is BaseLending {\\n    uint256 public minRuntime = 30 days;\\n    uint256 public maxRuntime = 365 days;\\n    uint256 public diffMaxMinRuntime = maxRuntime - minRuntime;\\n    /** \\n    @dev this is the numerator under runtimeWeights.\\n    any excess left over is the weight of hourly bonds\\n    */\\n    uint256 public constant WEIGHT_TOTAL_10k = 10_000;\\n\\n    struct BondBucketMetadata {\\n        uint256 runtimeWeight;\\n        uint256 buyingSpeed;\\n        uint256 lastBought;\\n        uint256 withdrawingSpeed;\\n        uint256 lastWithdrawn;\\n        uint256 yieldLastUpdated;\\n        uint256 totalLending;\\n        uint256 runtimeYieldFP;\\n    }\\n\\n    mapping(uint256 => Bond) public bonds;\\n\\n    mapping(address => BondBucketMetadata[]) public bondBucketMetadata;\\n\\n    uint256 public nextBondIndex = 1;\\n\\n    event LiquidityWarning(\\n        address indexed issuer,\\n        address indexed holder,\\n        uint256 value\\n    );\\n\\n    function _makeBond(\\n        address holder,\\n        address issuer,\\n        uint256 runtime,\\n        uint256 amount,\\n        uint256 minReturn\\n    ) internal returns (uint256 bondIndex) {\\n        uint256 bucketIndex = getBucketIndex(issuer, runtime);\\n        BondBucketMetadata storage bondMeta =\\n            bondBucketMetadata[issuer][bucketIndex];\\n\\n        uint256 yieldFP = calcBondYieldFP(issuer, amount, runtime, bondMeta);\\n\\n        uint256 bondReturn = (yieldFP * amount) / FP32;\\n        if (bondReturn >= minReturn) {\\n            uint256 interpolatedAmount = (amount + bondReturn) / 2;\\n            lendingMeta[issuer].totalLending += interpolatedAmount;\\n\\n            bondMeta.totalLending += interpolatedAmount;\\n\\n            bondIndex = nextBondIndex;\\n            nextBondIndex++;\\n\\n            bonds[bondIndex] = Bond({\\n                holder: holder,\\n                issuer: issuer,\\n                originalPrice: amount,\\n                returnAmount: bondReturn,\\n                maturityTimestamp: block.timestamp + runtime,\\n                runtime: runtime,\\n                yieldFP: yieldFP\\n            });\\n\\n            (bondMeta.buyingSpeed, bondMeta.lastBought) = updateSpeed(\\n                bondMeta.buyingSpeed,\\n                bondMeta.lastBought,\\n                amount,\\n                runtime\\n            );\\n        }\\n    }\\n\\n    function _withdrawBond(uint256 bondId, Bond storage bond)\\n        internal\\n        returns (uint256 withdrawAmount)\\n    {\\n        address issuer = bond.issuer;\\n        uint256 bucketIndex = getBucketIndex(issuer, bond.runtime);\\n        BondBucketMetadata storage bondMeta =\\n            bondBucketMetadata[issuer][bucketIndex];\\n\\n        uint256 returnAmount = bond.returnAmount;\\n        address holder = bond.holder;\\n\\n        uint256 interpolatedAmount = (bond.originalPrice + returnAmount) / 2;\\n\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        meta.totalLending -= interpolatedAmount;\\n        bondMeta.totalLending -= interpolatedAmount;\\n\\n        (bondMeta.withdrawingSpeed, bondMeta.lastWithdrawn) = updateSpeed(\\n            bondMeta.withdrawingSpeed,\\n            bondMeta.lastWithdrawn,\\n            bond.originalPrice,\\n            bond.runtime\\n        );\\n\\n        delete bonds[bondId];\\n        if (\\n            meta.totalBorrowed > meta.totalLending ||\\n            issuanceBalance(issuer) < returnAmount\\n        ) {\\n            // apparently there is a liquidity issue\\n            emit LiquidityWarning(issuer, holder, returnAmount);\\n            _makeFallbackBond(issuer, holder, returnAmount);\\n        } else {\\n            withdrawAmount = returnAmount;\\n        }\\n    }\\n\\n    function calcBondYieldFP(\\n        address issuer,\\n        uint256 addedAmount,\\n        uint256 runtime,\\n        BondBucketMetadata storage bucketMeta\\n    ) internal view returns (uint256 yieldFP) {\\n        uint256 totalLendingInBucket = addedAmount + bucketMeta.totalLending;\\n\\n        yieldFP = bucketMeta.runtimeYieldFP;\\n        uint256 lastUpdated = bucketMeta.yieldLastUpdated;\\n\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        uint256 bucketTarget =\\n            (lendingTarget(meta) * bucketMeta.runtimeWeight) / WEIGHT_TOTAL_10k;\\n\\n        uint256 buying = bucketMeta.buyingSpeed;\\n        uint256 withdrawing = bucketMeta.withdrawingSpeed;\\n\\n        YieldAccumulator storage borrowAccumulator =\\n            borrowYieldAccumulators[issuer];\\n\\n        uint256 yieldGeneratedFP =\\n            (borrowAccumulator.hourlyYieldFP * meta.totalBorrowed) /\\n                (1 + meta.totalLending);\\n        uint256 _maxHourlyYieldFP = min(maxHourlyYieldFP, yieldGeneratedFP);\\n\\n        uint256 bucketMaxYield = _maxHourlyYieldFP * (runtime / (1 hours));\\n\\n        yieldFP = updatedYieldFP(\\n            yieldFP,\\n            lastUpdated,\\n            totalLendingInBucket,\\n            bucketTarget,\\n            buying,\\n            withdrawing,\\n            bucketMaxYield\\n        );\\n    }\\n\\n    /// Get view of returns on bond\\n    function viewBondReturn(\\n        address issuer,\\n        uint256 runtime,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        uint256 bucketIndex = getBucketIndex(issuer, runtime);\\n        uint256 yieldFP =\\n            calcBondYieldFP(\\n                issuer,\\n                amount + bondBucketMetadata[issuer][bucketIndex].totalLending,\\n                runtime,\\n                bondBucketMetadata[issuer][bucketIndex]\\n            );\\n        return (yieldFP * amount) / FP32;\\n    }\\n\\n    function getBucketIndex(address issuer, uint256 runtime)\\n        internal\\n        view\\n        returns (uint256 bucketIndex)\\n    {\\n        uint256 bucketSize =\\n            diffMaxMinRuntime / bondBucketMetadata[issuer].length;\\n        bucketIndex = (runtime - minRuntime) / bucketSize;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Fund.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\n/// @title Manage funding\\ncontract Fund is RoleAware {\\n    using SafeERC20 for IERC20;\\n    /// wrapped ether\\n    address public immutable WETH;\\n\\n    constructor(address _WETH, address _roles) RoleAware(_roles) {\\n        WETH = _WETH;\\n    }\\n\\n    /// Deposit an active token\\n    function deposit(address depositToken, uint256 depositAmount) external {\\n        IERC20(depositToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            depositAmount\\n        );\\n    }\\n\\n    /// Deposit token on behalf of `sender`\\n    function depositFor(\\n        address sender,\\n        address depositToken,\\n        uint256 depositAmount\\n    ) external {\\n        require(isFundTransferer(msg.sender), \\\"Unauthorized deposit\\\");\\n        IERC20(depositToken).safeTransferFrom(\\n            sender,\\n            address(this),\\n            depositAmount\\n        );\\n    }\\n\\n    /// Deposit to wrapped ether\\n    function depositToWETH() external payable {\\n        IWETH(WETH).deposit{value: msg.value}();\\n    }\\n\\n    // withdrawers role\\n    function withdraw(\\n        address withdrawalToken,\\n        address recipient,\\n        uint256 withdrawalAmount\\n    ) external {\\n        require(isFundTransferer(msg.sender), \\\"Unauthorized withdraw\\\");\\n        IERC20(withdrawalToken).safeTransfer(recipient, withdrawalAmount);\\n    }\\n\\n    // withdrawers role\\n    function withdrawETH(address recipient, uint256 withdrawalAmount) external {\\n        require(isFundTransferer(msg.sender), \\\"Unauthorized withdraw\\\");\\n        IWETH(WETH).withdraw(withdrawalAmount);\\n        Address.sendValue(payable(recipient), withdrawalAmount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/HourlyBondSubscriptionLending.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BaseLending.sol\\\";\\n\\nstruct HourlyBond {\\n    uint256 amount;\\n    uint256 yieldQuotientFP;\\n    uint256 moduloHour;\\n}\\n\\n/// @title Here we offer subscriptions to auto-renewing hourly bonds\\n/// Funds are locked in for an 50 minutes per hour, while interest rates float\\nabstract contract HourlyBondSubscriptionLending is BaseLending {\\n    struct HourlyBondMetadata {\\n        YieldAccumulator yieldAccumulator;\\n        uint256 buyingSpeed;\\n        uint256 withdrawingSpeed;\\n        uint256 lastBought;\\n        uint256 lastWithdrawn;\\n    }\\n\\n    mapping(address => HourlyBondMetadata) hourlyBondMetadata;\\n\\n    uint256 public withdrawalWindow = 15 minutes;\\n    // issuer => holder => bond record\\n    mapping(address => mapping(address => HourlyBond))\\n        public hourlyBondAccounts;\\n\\n    uint256 public borrowingFactorPercent = 200;\\n\\n    function _makeHourlyBond(\\n        address issuer,\\n        address holder,\\n        uint256 amount\\n    ) internal {\\n        HourlyBond storage bond = hourlyBondAccounts[issuer][holder];\\n        updateHourlyBondAmount(issuer, bond);\\n\\n        HourlyBondMetadata storage bondMeta = hourlyBondMetadata[issuer];\\n        bond.yieldQuotientFP = bondMeta.yieldAccumulator.accumulatorFP;\\n        bond.moduloHour = block.timestamp % (1 hours);\\n        bond.amount += amount;\\n        lendingMeta[issuer].totalLending += amount;\\n\\n        (bondMeta.buyingSpeed, bondMeta.lastBought) = updateSpeed(\\n            bondMeta.buyingSpeed,\\n            bondMeta.lastBought,\\n            amount,\\n            1 hours\\n        );\\n    }\\n\\n    function updateHourlyBondAmount(address issuer, HourlyBond storage bond)\\n        internal\\n    {\\n        uint256 yieldQuotientFP = bond.yieldQuotientFP;\\n        if (yieldQuotientFP > 0) {\\n            YieldAccumulator storage yA =\\n                getUpdatedHourlyYield(issuer, hourlyBondMetadata[issuer]);\\n\\n            uint256 oldAmount = bond.amount;\\n\\n            bond.amount = applyInterest(\\n                bond.amount,\\n                yA.accumulatorFP,\\n                yieldQuotientFP\\n            );\\n\\n            uint256 deltaAmount = bond.amount - oldAmount;\\n            lendingMeta[issuer].totalLending += deltaAmount;\\n        }\\n    }\\n\\n    // Retrieves bond balance for issuer and holder\\n    function viewHourlyBondAmount(address issuer, address holder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        HourlyBond storage bond = hourlyBondAccounts[issuer][holder];\\n        uint256 yieldQuotientFP = bond.yieldQuotientFP;\\n\\n        uint256 cumulativeYield =\\n            viewCumulativeYieldFP(\\n                hourlyBondMetadata[issuer].yieldAccumulator,\\n                block.timestamp\\n            );\\n\\n        if (yieldQuotientFP > 0) {\\n            return applyInterest(bond.amount, cumulativeYield, yieldQuotientFP);\\n        } else {\\n            return bond.amount;\\n        }\\n    }\\n\\n    function _withdrawHourlyBond(\\n        address issuer,\\n        HourlyBond storage bond,\\n        uint256 amount\\n    ) internal {\\n        // how far the current hour has advanced (relative to acccount hourly clock)\\n        uint256 currentOffset = (block.timestamp - bond.moduloHour) % (1 hours);\\n\\n        require(\\n            withdrawalWindow >= currentOffset,\\n            \\\"Tried withdrawing outside subscription cancellation time window\\\"\\n        );\\n\\n        bond.amount -= amount;\\n        lendingMeta[issuer].totalLending -= amount;\\n\\n        HourlyBondMetadata storage bondMeta = hourlyBondMetadata[issuer];\\n        (bondMeta.withdrawingSpeed, bondMeta.lastWithdrawn) = updateSpeed(\\n            bondMeta.withdrawingSpeed,\\n            bondMeta.lastWithdrawn,\\n            bond.amount,\\n            1 hours\\n        );\\n    }\\n\\n    function calcCumulativeYieldFP(\\n        YieldAccumulator storage yieldAccumulator,\\n        uint256 timeDelta\\n    ) internal view returns (uint256 accumulatorFP) {\\n        uint256 secondsDelta = timeDelta % (1 hours);\\n        // linearly interpolate interest for seconds\\n        // FP * FP * 1 / (FP * 1) = FP\\n        accumulatorFP =\\n            yieldAccumulator.accumulatorFP +\\n            (yieldAccumulator.accumulatorFP *\\n                (yieldAccumulator.hourlyYieldFP - FP32) *\\n                secondsDelta) /\\n            (FP32 * 1 hours);\\n\\n        uint256 hoursDelta = timeDelta / (1 hours);\\n        if (hoursDelta > 0) {\\n            // This loop should hardly ever 1 or more unless something bad happened\\n            // In which case it costs gas but there isn't overflow\\n            for (uint256 i = 0; hoursDelta > i; i++) {\\n                // FP32 * FP32 / FP32 = FP32\\n                accumulatorFP =\\n                    (accumulatorFP * yieldAccumulator.hourlyYieldFP) /\\n                    FP32;\\n            }\\n        }\\n    }\\n\\n    /// @dev updates yield accumulators for both borrowing and lending\\n    function getUpdatedHourlyYield(\\n        address issuer,\\n        HourlyBondMetadata storage bondMeta\\n    ) internal returns (YieldAccumulator storage accumulator) {\\n        accumulator = bondMeta.yieldAccumulator;\\n        uint256 lastUpdated = accumulator.lastUpdated;\\n        uint256 timeDelta = (block.timestamp - lastUpdated);\\n\\n        YieldAccumulator storage borrowAccumulator =\\n            borrowYieldAccumulators[issuer];\\n\\n        if (timeDelta > (5 minutes)) {\\n            accumulator.accumulatorFP = calcCumulativeYieldFP(\\n                accumulator,\\n                timeDelta\\n            );\\n\\n            LendingMetadata storage meta = lendingMeta[issuer];\\n\\n            uint256 yieldGeneratedFP =\\n                (borrowAccumulator.hourlyYieldFP * meta.totalBorrowed) /\\n                    (1 + meta.totalLending);\\n            uint256 _maxHourlyYieldFP = min(maxHourlyYieldFP, yieldGeneratedFP);\\n\\n            accumulator.hourlyYieldFP = updatedYieldFP(\\n                accumulator.hourlyYieldFP,\\n                lastUpdated,\\n                meta.totalLending,\\n                lendingTarget(meta),\\n                bondMeta.buyingSpeed,\\n                bondMeta.withdrawingSpeed,\\n                _maxHourlyYieldFP\\n            );\\n            accumulator.lastUpdated = block.timestamp;\\n        }\\n\\n        updateBorrowYieldAccu(borrowAccumulator);\\n\\n        borrowAccumulator.hourlyYieldFP =\\n            1 +\\n            (borrowingFactorPercent * accumulator.hourlyYieldFP) /\\n            100;\\n    }\\n\\n    function updateBorrowYieldAccu(YieldAccumulator storage borrowAccumulator)\\n        internal\\n    {\\n        uint256 timeDelta = block.timestamp - borrowAccumulator.lastUpdated;\\n\\n        if (timeDelta > (5 minutes)) {\\n            borrowAccumulator.accumulatorFP = calcCumulativeYieldFP(\\n                borrowAccumulator,\\n                timeDelta\\n            );\\n\\n            borrowAccumulator.lastUpdated = block.timestamp;\\n        }\\n    }\\n\\n    function getUpdatedBorrowYieldAccuFP(address issuer)\\n        external\\n        returns (uint256)\\n    {\\n        YieldAccumulator storage yA = borrowYieldAccumulators[issuer];\\n        updateBorrowYieldAccu(yA);\\n        return yA.accumulatorFP;\\n    }\\n\\n    function viewCumulativeYieldFP(\\n        YieldAccumulator storage yA,\\n        uint256 timestamp\\n    ) internal view returns (uint256) {\\n        uint256 timeDelta = (timestamp - yA.lastUpdated);\\n        if (timeDelta > 5 minutes) {\\n            return calcCumulativeYieldFP(yA, timeDelta);\\n        } else {\\n            return yA.accumulatorFP;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IncentiveDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct Claim {\\n    uint256 startingRewardRateFP;\\n    uint256 amount;\\n    uint256 intraDayGain;\\n    uint256 intraDayLoss;\\n}\\n\\n/// @title Manage distribution of liquidity stake incentives\\n/// Some efforts have been made to reduce gas cost at claim time\\n/// and shift gas burden onto those who would want to withdraw\\ncontract IncentiveDistribution is RoleAware {\\n    // fixed point number factor\\n    uint256 internal constant FP32 = 2**32;\\n    // the amount of contraction per thousand, per day\\n    // of the overal daily incentive distribution\\n    // https://en.wikipedia.org/wiki/Per_mil\\n    uint256 public constant contractionPerMil = 999;\\n    address public immutable MFI;\\n\\n    constructor(\\n        address _MFI,\\n        uint256 startingDailyDistributionWithoutDecimals,\\n        address _roles\\n    ) RoleAware(_roles) {\\n        MFI = _MFI;\\n        currentDailyDistribution =\\n            startingDailyDistributionWithoutDecimals *\\n            (1 ether);\\n\\n        lastUpdatedDay = block.timestamp % (1 days);\\n    }\\n\\n    // how much is going to be distributed, contracts every day\\n    uint256 public currentDailyDistribution;\\n\\n    uint256 public trancheShareTotal;\\n    uint256[] public allTranches;\\n\\n    struct TrancheMeta {\\n        // portion of daily distribution per each tranche\\n        uint256 rewardShare;\\n        uint256 currentDayGains;\\n        uint256 currentDayLosses;\\n        uint256 tomorrowOngoingTotals;\\n        uint256 yesterdayOngoingTotals;\\n        // aggregate all the unclaimed intra-days\\n        uint256 intraDayGains;\\n        uint256 intraDayLosses;\\n        uint256 intraDayRewardGains;\\n        uint256 intraDayRewardLosses;\\n        // how much each claim unit would get if they had staked from the dawn of time\\n        // expressed as fixed point number\\n        // claim amounts are expressed relative to this ongoing aggregate\\n        uint256 aggregateDailyRewardRateFP;\\n        uint256 yesterdayRewardRateFP;\\n        mapping(address => Claim) claims;\\n    }\\n\\n    mapping(uint256 => TrancheMeta) public trancheMetadata;\\n\\n    // last updated day\\n    uint256 public lastUpdatedDay;\\n\\n    mapping(address => uint256) public accruedReward;\\n\\n    /// Set share of tranche\\n    function setTrancheShare(uint256 tranche, uint256 share)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        require(\\n            trancheMetadata[tranche].rewardShare > 0,\\n            \\\"Tranche not initialized\\\"\\n        );\\n        _setTrancheShare(tranche, share);\\n    }\\n\\n    function _setTrancheShare(uint256 tranche, uint256 share) internal {\\n        TrancheMeta storage tm = trancheMetadata[tranche];\\n\\n        if (share > tm.rewardShare) {\\n            trancheShareTotal += share - tm.rewardShare;\\n        } else {\\n            trancheShareTotal -= tm.rewardShare - share;\\n        }\\n        tm.rewardShare = share;\\n    }\\n\\n    /// Initialize tranche\\n    function initTranche(uint256 tranche, uint256 share)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        TrancheMeta storage tm = trancheMetadata[tranche];\\n        require(tm.rewardShare == 0, \\\"Tranche already initialized\\\");\\n        _setTrancheShare(tranche, share);\\n\\n        // simply initialize to 1.0\\n        tm.aggregateDailyRewardRateFP = FP32;\\n        allTranches.push(tranche);\\n    }\\n\\n    /// Start / increase amount of claim\\n    function addToClaimAmount(\\n        uint256 tranche,\\n        address recipient,\\n        uint256 claimAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        if (currentDailyDistribution > 0) {\\n            TrancheMeta storage tm = trancheMetadata[tranche];\\n            Claim storage claim = tm.claims[recipient];\\n\\n            uint256 currentDay =\\n                claimAmount * (1 days - (block.timestamp % (1 days)));\\n\\n            tm.currentDayGains += currentDay;\\n            claim.intraDayGain += currentDay * currentDailyDistribution;\\n\\n            tm.tomorrowOngoingTotals += claimAmount * 1 days;\\n            updateAccruedReward(tm, recipient, claim);\\n\\n            claim.amount += claimAmount * (1 days);\\n        }\\n    }\\n\\n    /// Decrease amount of claim\\n    function subtractFromClaimAmount(\\n        uint256 tranche,\\n        address recipient,\\n        uint256 subtractAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        uint256 currentDay = subtractAmount * (block.timestamp % (1 days));\\n\\n        TrancheMeta storage tm = trancheMetadata[tranche];\\n        Claim storage claim = tm.claims[recipient];\\n\\n        tm.currentDayLosses += currentDay;\\n        claim.intraDayLoss += currentDay * currentDailyDistribution;\\n\\n        tm.tomorrowOngoingTotals -= subtractAmount * 1 days;\\n\\n        updateAccruedReward(tm, recipient, claim);\\n        claim.amount -= subtractAmount * (1 days);\\n    }\\n\\n    function updateAccruedReward(\\n        TrancheMeta storage tm,\\n        address recipient,\\n        Claim storage claim\\n    ) internal returns (uint256 rewardDelta) {\\n        if (claim.startingRewardRateFP > 0) {\\n            rewardDelta = calcRewardAmount(tm, claim);\\n            accruedReward[recipient] += rewardDelta;\\n        }\\n        // don't reward for current day (approximately)\\n        claim.startingRewardRateFP =\\n            tm.yesterdayRewardRateFP +\\n            tm.aggregateDailyRewardRateFP;\\n    }\\n\\n    /// @dev additional reward accrued since last update\\n    function calcRewardAmount(TrancheMeta storage tm, Claim storage claim)\\n        internal\\n        view\\n        returns (uint256 rewardAmount)\\n    {\\n        uint256 ours = claim.startingRewardRateFP;\\n        uint256 aggregate = tm.aggregateDailyRewardRateFP;\\n        if (aggregate > ours) {\\n            rewardAmount = (claim.amount * (aggregate - ours)) / FP32;\\n        }\\n    }\\n\\n    function applyIntraDay(TrancheMeta storage tm, Claim storage claim)\\n        internal\\n        view\\n        returns (uint256 gainImpact, uint256 lossImpact)\\n    {\\n        uint256 gain = claim.intraDayGain;\\n        uint256 loss = claim.intraDayLoss;\\n\\n        if (gain + loss > 0) {\\n            gainImpact =\\n                (gain * tm.intraDayRewardGains) /\\n                (tm.intraDayGains + 1);\\n            lossImpact =\\n                (loss * tm.intraDayRewardLosses) /\\n                (tm.intraDayLosses + 1);\\n        }\\n    }\\n\\n    /// Get a view of reward amount\\n    function viewRewardAmount(uint256 tranche, address claimant)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        TrancheMeta storage tm = trancheMetadata[tranche];\\n        Claim storage claim = tm.claims[claimant];\\n\\n        uint256 rewardAmount =\\n            accruedReward[claimant] + calcRewardAmount(tm, claim);\\n        (uint256 gainImpact, uint256 lossImpact) = applyIntraDay(tm, claim);\\n\\n        return rewardAmount + gainImpact - lossImpact;\\n    }\\n\\n    /// Withdraw current reward amount\\n    function withdrawReward(uint256[] calldata tranches)\\n        external\\n        returns (uint256 withdrawAmount)\\n    {\\n        updateDayTotals();\\n\\n        withdrawAmount = accruedReward[msg.sender];\\n        for (uint256 i; tranches.length > i; i++) {\\n            uint256 tranche = tranches[i];\\n\\n            TrancheMeta storage tm = trancheMetadata[tranche];\\n            Claim storage claim = tm.claims[msg.sender];\\n\\n            withdrawAmount += updateAccruedReward(tm, msg.sender, claim);\\n\\n            (uint256 gainImpact, uint256 lossImpact) = applyIntraDay(tm, claim);\\n\\n            withdrawAmount = withdrawAmount + gainImpact - lossImpact;\\n\\n            tm.intraDayGains -= claim.intraDayGain;\\n            tm.intraDayLosses -= claim.intraDayLoss;\\n            tm.intraDayRewardGains -= gainImpact;\\n            tm.intraDayRewardLosses -= lossImpact;\\n\\n            claim.intraDayGain = 0;\\n        }\\n\\n        accruedReward[msg.sender] = 0;\\n\\n        Fund(fund()).withdraw(MFI, msg.sender, withdrawAmount);\\n    }\\n\\n    function updateDayTotals() internal {\\n        uint256 nowDay = block.timestamp / (1 days);\\n        uint256 dayDiff = nowDay - lastUpdatedDay;\\n\\n        // shrink the daily distribution for every day that has passed\\n        for (uint256 i = 0; i < dayDiff; i++) {\\n            _updateTrancheTotals();\\n\\n            currentDailyDistribution =\\n                (currentDailyDistribution * contractionPerMil) /\\n                1000;\\n\\n            lastUpdatedDay += 1;\\n        }\\n    }\\n\\n    function _updateTrancheTotals() internal {\\n        for (uint256 i; allTranches.length > i; i++) {\\n            uint256 tranche = allTranches[i];\\n            TrancheMeta storage tm = trancheMetadata[tranche];\\n\\n            uint256 todayTotal =\\n                tm.yesterdayOngoingTotals +\\n                    tm.currentDayGains -\\n                    tm.currentDayLosses;\\n\\n            uint256 todayRewardRateFP =\\n                (FP32 * (currentDailyDistribution * tm.rewardShare)) /\\n                    trancheShareTotal /\\n                    todayTotal;\\n\\n            tm.yesterdayRewardRateFP = todayRewardRateFP;\\n\\n            tm.aggregateDailyRewardRateFP += todayRewardRateFP;\\n\\n            tm.intraDayGains += tm.currentDayGains * currentDailyDistribution;\\n\\n            tm.intraDayLosses += tm.currentDayLosses * currentDailyDistribution;\\n\\n            tm.intraDayRewardGains +=\\n                (tm.currentDayGains * todayRewardRateFP) /\\n                FP32;\\n\\n            tm.intraDayRewardLosses +=\\n                (tm.currentDayLosses * todayRewardRateFP) /\\n                FP32;\\n\\n            tm.yesterdayOngoingTotals = tm.tomorrowOngoingTotals;\\n            tm.currentDayGains = 0;\\n            tm.currentDayLosses = 0;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IncentivizedHolder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IncentiveDistribution.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\n/// @title helper class to facilitate staking and unstaking\\n/// within the incentive system.\\nabstract contract IncentivizedHolder is RoleAware {\\n    /// @dev here we cache incentive tranches to save on a bit of gas\\n    mapping(address => uint256) public incentiveTranches;\\n\\n    /// Set incentive tranche\\n    function setIncentiveTranche(address token, uint8 tranche)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        incentiveTranches[token] = tranche;\\n    }\\n\\n    function stakeClaim(\\n        address claimant,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        IncentiveDistribution iD =\\n            IncentiveDistribution(incentiveDistributor());\\n\\n        uint256 tranche = incentiveTranches[token];\\n\\n        iD.addToClaimAmount(tranche, claimant, amount);\\n    }\\n\\n    function withdrawClaim(\\n        address claimant,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        uint256 tranche = incentiveTranches[token];\\n\\n        IncentiveDistribution(incentiveDistributor()).subtractFromClaimAmount(\\n            tranche,\\n            claimant,\\n            amount\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Lending.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./HourlyBondSubscriptionLending.sol\\\";\\nimport \\\"./BondLending.sol\\\";\\nimport \\\"./IncentivizedHolder.sol\\\";\\n\\n// TODO activate bonds for lending\\n\\n/// @title Manage lending for a variety of bond issuers\\ncontract Lending is\\n    RoleAware,\\n    HourlyBondSubscriptionLending,\\n    BondLending,\\n    IncentivizedHolder\\n{\\n    /// @dev IDs for all bonds held by an address\\n    mapping(address => uint256[]) public bondIds;\\n\\n    /// mapping issuers to tokens\\n    /// (in crossmargin, the issuers are tokens  themselves)\\n    mapping(address => address) public issuerTokens;\\n\\n    /// In case of shortfall, adjust debt\\n    mapping(address => uint256) public haircuts;\\n\\n    /// map of available issuers\\n    mapping(address => bool) public activeIssuers;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        uint256 APR = 899;\\n        maxHourlyYieldFP = (FP32 * APR) / 100 / (24 * 365);\\n\\n        uint256 aprChangePerMil = 3;\\n        yieldChangePerSecondFP = (FP32 * aprChangePerMil) / 1000;\\n    }\\n\\n    /// Make a issuer available for protocol\\n    function activateIssuer(address issuer) external {\\n        activateIssuer(issuer, issuer);\\n    }\\n\\n    /// Make issuer != token available for protocol (isol. margin)\\n    function activateIssuer(address issuer, address token)\\n        public\\n        onlyOwnerExecActivator\\n    {\\n        activeIssuers[issuer] = true;\\n        issuerTokens[issuer] = token;\\n    }\\n\\n    /// Remove a issuer from trading availability\\n    function deactivateIssuer(address issuer) external onlyOwnerExecActivator {\\n        activeIssuers[issuer] = false;\\n    }\\n\\n    /// Set lending cap\\n    function setLendingCap(address issuer, uint256 cap)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        lendingMeta[issuer].lendingCap = cap;\\n    }\\n\\n    /// Set lending buffer\\n    function setLendingBuffer(address issuer, uint256 buffer)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        lendingMeta[issuer].lendingBuffer = buffer;\\n    }\\n\\n    /// Set withdrawal window\\n    function setWithdrawalWindow(uint256 window) external onlyOwnerExec {\\n        withdrawalWindow = window;\\n    }\\n\\n    /// Set hourly yield APR for issuer\\n    function setHourlyYieldAPR(address issuer, uint256 aprPercent)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        HourlyBondMetadata storage bondMeta = hourlyBondMetadata[issuer];\\n\\n        if (bondMeta.yieldAccumulator.accumulatorFP == 0) {\\n            uint256 yieldFP = FP32 + (FP32 * aprPercent) / 100 / (24 * 365);\\n            bondMeta.yieldAccumulator = YieldAccumulator({\\n                accumulatorFP: FP32,\\n                lastUpdated: block.timestamp,\\n                hourlyYieldFP: yieldFP\\n            });\\n            bondMeta.buyingSpeed = 1;\\n            bondMeta.withdrawingSpeed = 1;\\n            bondMeta.lastBought = block.timestamp;\\n            bondMeta.lastWithdrawn = block.timestamp;\\n        } else {\\n            YieldAccumulator storage yA =\\n                getUpdatedHourlyYield(issuer, bondMeta);\\n            yA.hourlyYieldFP = (FP32 * (100 + aprPercent)) / 100 / (24 * 365);\\n        }\\n    }\\n\\n    /// Set maximum hourly yield in floating point\\n    function setMaxHourlyYieldFP(uint256 maxYieldFP) external onlyOwnerExec {\\n        maxHourlyYieldFP = maxYieldFP;\\n    }\\n\\n    /// Set yield change per second in floating point\\n    function setYieldChangePerSecondFP(uint256 changePerSecondFP)\\n        external\\n        onlyOwnerExec\\n    {\\n        yieldChangePerSecondFP = changePerSecondFP;\\n    }\\n\\n    /// Set runtime yields in floating point\\n    function setRuntimeYieldsFP(address issuer, uint256[] memory yieldsFP)\\n        external\\n        onlyOwnerExec\\n    {\\n        BondBucketMetadata[] storage bondMetas = bondBucketMetadata[issuer];\\n        for (uint256 i; bondMetas.length > i; i++) {\\n            bondMetas[i].runtimeYieldFP = yieldsFP[i];\\n        }\\n    }\\n\\n    /// Set miniumum runtime\\n    function setMinRuntime(uint256 runtime) external onlyOwnerExec {\\n        require(runtime > 1 hours, \\\"Min runtime > 1 hour\\\");\\n        require(maxRuntime > runtime, \\\"Runtime too long\\\");\\n        minRuntime = runtime;\\n    }\\n\\n    /// Set maximum runtime\\n    function setMaxRuntime(uint256 runtime) external onlyOwnerExec {\\n        require(runtime > minRuntime, \\\"Max > min runtime\\\");\\n        maxRuntime = runtime;\\n    }\\n\\n    /// Set runtime weights in floating point\\n    function setRuntimeWeights(address issuer, uint256[] memory weights)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        BondBucketMetadata[] storage bondMetas = bondBucketMetadata[issuer];\\n\\n        if (bondMetas.length == 0) {\\n            // we are initializing\\n\\n            uint256 hourlyYieldFP = (110 * FP32) / 100 / (24 * 365);\\n            uint256 bucketSize = diffMaxMinRuntime / weights.length;\\n\\n            for (uint256 i; weights.length > i; i++) {\\n                uint256 runtime = minRuntime + bucketSize * i;\\n                bondMetas.push(\\n                    BondBucketMetadata({\\n                        runtimeYieldFP: (hourlyYieldFP * runtime) / (1 hours),\\n                        lastBought: block.timestamp,\\n                        lastWithdrawn: block.timestamp,\\n                        yieldLastUpdated: block.timestamp,\\n                        buyingSpeed: 1,\\n                        withdrawingSpeed: 1,\\n                        runtimeWeight: weights[i],\\n                        totalLending: 0\\n                    })\\n                );\\n            }\\n        } else {\\n            require(weights.length == bondMetas.length, \\\"Weights don't match\\\");\\n            for (uint256 i; weights.length > i; i++) {\\n                bondMetas[i].runtimeWeight = weights[i];\\n            }\\n        }\\n    }\\n\\n    /// @dev how much interest has accrued to a borrowed balance over time\\n    function applyBorrowInterest(\\n        uint256 balance,\\n        address issuer,\\n        uint256 yieldQuotientFP\\n    ) external returns (uint256 balanceWithInterest, uint256 accumulatorFP) {\\n        require(isBorrower(msg.sender), \\\"Not approved call\\\");\\n\\n        YieldAccumulator storage yA = borrowYieldAccumulators[issuer];\\n        updateBorrowYieldAccu(yA);\\n        accumulatorFP = yA.accumulatorFP;\\n\\n        balanceWithInterest = applyInterest(\\n            balance,\\n            accumulatorFP,\\n            yieldQuotientFP\\n        );\\n\\n        uint256 deltaAmount = balanceWithInterest - balance;\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        meta.totalBorrowed += deltaAmount;\\n    }\\n\\n    /// @dev view function to get balance with borrowing interest applied\\n    function viewWithBorrowInterest(\\n        uint256 balance,\\n        address issuer,\\n        uint256 yieldQuotientFP\\n    ) external view returns (uint256) {\\n        uint256 accumulatorFP =\\n            viewCumulativeYieldFP(\\n                borrowYieldAccumulators[issuer],\\n                block.timestamp\\n            );\\n        return applyInterest(balance, accumulatorFP, yieldQuotientFP);\\n    }\\n\\n    /// @dev gets called by router to register if a trader borrows issuers\\n    function registerBorrow(address issuer, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not approved borrower\\\");\\n        require(activeIssuers[issuer], \\\"Not approved issuer\\\");\\n\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        meta.totalBorrowed += amount;\\n        require(\\n            meta.totalLending >= meta.totalBorrowed,\\n            \\\"Insufficient lending\\\"\\n        );\\n    }\\n\\n    /// @dev gets called by router if loan is extinguished\\n    function payOff(address issuer, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not approved borrower\\\");\\n        lendingMeta[issuer].totalBorrowed -= amount;\\n    }\\n\\n    /// @dev get the borrow yield for a specific issuer/token\\n    function viewAccumulatedBorrowingYieldFP(address issuer)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        YieldAccumulator storage yA = borrowYieldAccumulators[issuer];\\n        return viewCumulativeYieldFP(yA, block.timestamp);\\n    }\\n\\n    function viewAPRPer10k(YieldAccumulator storage yA)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 hourlyYieldFP = yA.hourlyYieldFP;\\n\\n        uint256 aprFP =\\n            ((hourlyYieldFP * 10_000 - FP32 * 10_000) * 365 days) / (1 hours);\\n\\n        return aprFP / FP32;\\n    }\\n\\n    /// @dev get current borrowing interest per 10k for a token / issuer\\n    function viewBorrowAPRPer10k(address issuer)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return viewAPRPer10k(borrowYieldAccumulators[issuer]);\\n    }\\n\\n    /// @dev get current lending APR per 10k for a token / issuer\\n    function viewHourlyBondAPRPer10k(address issuer)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return viewAPRPer10k(hourlyBondMetadata[issuer].yieldAccumulator);\\n    }\\n\\n    /// @dev In a liquidity crunch make a fallback bond until liquidity is good again\\n    function _makeFallbackBond(\\n        address issuer,\\n        address holder,\\n        uint256 amount\\n    ) internal override {\\n        _makeHourlyBond(issuer, holder, amount);\\n    }\\n\\n    /// @dev withdraw an hour bond\\n    function withdrawHourlyBond(address issuer, uint256 amount) external {\\n        HourlyBond storage bond = hourlyBondAccounts[issuer][msg.sender];\\n        // apply all interest\\n        updateHourlyBondAmount(issuer, bond);\\n        super._withdrawHourlyBond(issuer, bond, amount);\\n\\n        if (bond.amount == 0) {\\n            delete hourlyBondAccounts[issuer][msg.sender];\\n        }\\n\\n        disburse(issuer, msg.sender, amount);\\n\\n        withdrawClaim(msg.sender, issuer, amount);\\n    }\\n\\n    /// Shut down hourly bond account for `issuer`\\n    function closeHourlyBondAccount(address issuer) external {\\n        HourlyBond storage bond = hourlyBondAccounts[issuer][msg.sender];\\n        // apply all interest\\n        updateHourlyBondAmount(issuer, bond);\\n\\n        uint256 amount = bond.amount;\\n        super._withdrawHourlyBond(issuer, bond, amount);\\n\\n        disburse(issuer, msg.sender, amount);\\n\\n        delete hourlyBondAccounts[issuer][msg.sender];\\n\\n        withdrawClaim(msg.sender, issuer, amount);\\n    }\\n\\n    /// @dev buy hourly bond subscription\\n    function buyHourlyBondSubscription(address issuer, uint256 amount)\\n        external\\n    {\\n        require(activeIssuers[issuer], \\\"Not approved issuer\\\");\\n\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        if (lendingTarget(meta) >= meta.totalLending + amount) {\\n            collectToken(issuer, msg.sender, amount);\\n\\n            super._makeHourlyBond(issuer, msg.sender, amount);\\n\\n            stakeClaim(msg.sender, issuer, amount);\\n        }\\n    }\\n\\n    /// @dev buy fixed term bond that does not renew\\n    function buyBond(\\n        address issuer,\\n        uint256 runtime,\\n        uint256 amount,\\n        uint256 minReturn\\n    ) external returns (uint256 bondIndex) {\\n        require(activeIssuers[issuer], \\\"Not approved issuer\\\");\\n\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        if (\\n            lendingTarget(meta) >= meta.totalLending + amount &&\\n            maxRuntime >= runtime &&\\n            runtime >= minRuntime\\n        ) {\\n            bondIndex = super._makeBond(\\n                msg.sender,\\n                issuer,\\n                runtime,\\n                amount,\\n                minReturn\\n            );\\n            if (bondIndex > 0) {\\n                bondIds[msg.sender].push(bondIndex);\\n\\n                collectToken(issuer, msg.sender, amount);\\n                stakeClaim(msg.sender, issuer, amount);\\n            }\\n        }\\n    }\\n\\n    /// @dev send back funds of bond after maturity\\n    function withdrawBond(uint256 bondId) external {\\n        Bond storage bond = bonds[bondId];\\n        require(msg.sender == bond.holder, \\\"Not bond holder\\\");\\n        require(\\n            block.timestamp > bond.maturityTimestamp,\\n            \\\"bond is still immature\\\"\\n        );\\n        // in case of a shortfall, governance can step in to provide\\n        // additonal compensation beyond the usual incentive which\\n        // gets withdrawn here\\n        withdrawClaim(msg.sender, bond.issuer, bond.originalPrice);\\n\\n        uint256 withdrawAmount = super._withdrawBond(bondId, bond);\\n        disburse(bond.issuer, msg.sender, withdrawAmount);\\n    }\\n\\n    function initBorrowYieldAccumulator(address issuer)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        YieldAccumulator storage yA = borrowYieldAccumulators[issuer];\\n        require(yA.accumulatorFP == 0, \\\"don't re-initialize\\\");\\n\\n        yA.accumulatorFP = FP32;\\n        yA.lastUpdated = block.timestamp;\\n        yA.hourlyYieldFP = FP32 + FP32 / (365 * 24);\\n    }\\n\\n    function setBorrowingFactorPercent(uint256 borrowingFactor)\\n        external\\n        onlyOwnerExec\\n    {\\n        borrowingFactorPercent = borrowingFactor;\\n    }\\n\\n    function issuanceBalance(address issuer)\\n        internal\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        address token = issuerTokens[issuer];\\n        if (token == issuer) {\\n            // cross margin\\n            return IERC20(token).balanceOf(fund());\\n        } else {\\n            return lendingMeta[issuer].totalLending - haircuts[issuer];\\n        }\\n    }\\n\\n    function disburse(\\n        address issuer,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        uint256 haircutAmount = haircuts[issuer];\\n        if (haircutAmount > 0 && amount > 0) {\\n            uint256 totalLending = lendingMeta[issuer].totalLending;\\n            uint256 adjustment =\\n                (amount * min(totalLending, haircutAmount)) / totalLending;\\n            amount = amount - adjustment;\\n            haircuts[issuer] -= adjustment;\\n        }\\n\\n        address token = issuerTokens[issuer];\\n        Fund(fund()).withdraw(token, recipient, amount);\\n    }\\n\\n    function collectToken(\\n        address issuer,\\n        address source,\\n        uint256 amount\\n    ) internal {\\n        Fund(fund()).depositFor(source, issuer, amount);\\n    }\\n\\n    function haircut(uint256 amount) external {\\n        haircuts[msg.sender] += amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/RoleAware.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\n/// @title Role management behavior\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware {\\n    Roles public immutable roles;\\n    mapping(uint256 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint256 => bool)) public roleCache;\\n\\n    constructor(address _roles) {\\n        require(_roles != address(0), \\\"Please provide valid roles address\\\");\\n        roles = Roles(_roles);\\n    }\\n\\n    modifier noIntermediary() {\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Currently no intermediaries allowed for this function call\\\"\\n        );\\n        _;\\n    }\\n\\n    // @dev Throws if called by any account other than the owner or executor\\n    modifier onlyOwnerExec() {\\n        require(\\n            owner() == msg.sender || executor() == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerExecDisabler() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                disabler() == msg.sender,\\n            \\\"Caller is not the owner, executor or authorized disabler\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerExecActivator() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                isTokenActivator(msg.sender),\\n            \\\"Caller is not the owner, executor or authorized activator\\\"\\n        );\\n        _;\\n    }\\n\\n    function updateRoleCache(uint256 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.getRole(role, contr);\\n    }\\n\\n    function updateMainCharacterCache(uint256 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    function owner() internal view returns (address) {\\n        return roles.owner();\\n    }\\n\\n    function executor() internal returns (address) {\\n        return roles.executor();\\n    }\\n\\n    function disabler() internal view returns (address) {\\n        return mainCharacterCache[DISABLER];\\n    }\\n\\n    function fund() internal view returns (address) {\\n        return mainCharacterCache[FUND];\\n    }\\n\\n    function lending() internal view returns (address) {\\n        return mainCharacterCache[LENDING];\\n    }\\n\\n    function marginRouter() internal view returns (address) {\\n        return mainCharacterCache[MARGIN_ROUTER];\\n    }\\n\\n    function crossMarginTrading() internal view returns (address) {\\n        return mainCharacterCache[CROSS_MARGIN_TRADING];\\n    }\\n\\n    function feeController() internal view returns (address) {\\n        return mainCharacterCache[FEE_CONTROLLER];\\n    }\\n\\n    function price() internal view returns (address) {\\n        return mainCharacterCache[PRICE_CONTROLLER];\\n    }\\n\\n    function admin() internal view returns (address) {\\n        return mainCharacterCache[ADMIN];\\n    }\\n\\n    function incentiveDistributor() internal view returns (address) {\\n        return mainCharacterCache[INCENTIVE_DISTRIBUTION];\\n    }\\n\\n    function tokenAdmin() internal view returns (address) {\\n        return mainCharacterCache[TOKEN_ADMIN];\\n    }\\n\\n    function isBorrower(address contr) internal view returns (bool) {\\n        return roleCache[contr][BORROWER];\\n    }\\n\\n    function isFundTransferer(address contr) internal view returns (bool) {\\n        return roleCache[contr][FUND_TRANSFERER];\\n    }\\n\\n    function isMarginTrader(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_TRADER];\\n    }\\n\\n    function isFeeSource(address contr) internal view returns (bool) {\\n        return roleCache[contr][FEE_SOURCE];\\n    }\\n\\n    function isMarginCaller(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_CALLER];\\n    }\\n\\n    function isLiquidator(address contr) internal view returns (bool) {\\n        return roleCache[contr][LIQUIDATOR];\\n    }\\n\\n    function isAuthorizedFundTrader(address contr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return roleCache[contr][AUTHORIZED_FUND_TRADER];\\n    }\\n\\n    function isIncentiveReporter(address contr) internal view returns (bool) {\\n        return roleCache[contr][INCENTIVE_REPORTER];\\n    }\\n\\n    function isTokenActivator(address contr) internal view returns (bool) {\\n        return roleCache[contr][TOKEN_ACTIVATOR];\\n    }\\n\\n    function isStakePenalizer(address contr) internal view returns (bool) {\\n        return roleCache[contr][STAKE_PENALIZER];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Roles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IDependencyController.sol\\\";\\n\\n// we chose not to go with an enum\\n// to make this list easy to extend\\nuint256 constant FUND_TRANSFERER = 1;\\nuint256 constant MARGIN_CALLER = 2;\\nuint256 constant BORROWER = 3;\\nuint256 constant MARGIN_TRADER = 4;\\nuint256 constant FEE_SOURCE = 5;\\nuint256 constant LIQUIDATOR = 6;\\nuint256 constant AUTHORIZED_FUND_TRADER = 7;\\nuint256 constant INCENTIVE_REPORTER = 8;\\nuint256 constant TOKEN_ACTIVATOR = 9;\\nuint256 constant STAKE_PENALIZER = 10;\\n\\nuint256 constant FUND = 101;\\nuint256 constant LENDING = 102;\\nuint256 constant MARGIN_ROUTER = 103;\\nuint256 constant CROSS_MARGIN_TRADING = 104;\\nuint256 constant FEE_CONTROLLER = 105;\\nuint256 constant PRICE_CONTROLLER = 106;\\nuint256 constant ADMIN = 107;\\nuint256 constant INCENTIVE_DISTRIBUTION = 108;\\nuint256 constant TOKEN_ADMIN = 109;\\n\\nuint256 constant DISABLER = 1001;\\nuint256 constant DEPENDENCY_CONTROLLER = 1002;\\n\\n/// @title Manage permissions of contracts and ownership of everything\\n/// owned by a multisig wallet (0xEED9D1c6B4cdEcB3af070D85bfd394E7aF179CBd) during\\n/// beta and will then be transfered to governance\\n/// https://github.com/marginswap/governance\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint256 => bool)) public roles;\\n    mapping(uint256 => address) public mainCharacters;\\n\\n    constructor() Ownable() {\\n        // token activation from the get-go\\n        roles[msg.sender][TOKEN_ACTIVATOR] = true;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwnerExecDepController() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                mainCharacters[DEPENDENCY_CONTROLLER] == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function giveRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        roles[actor][role] = true;\\n    }\\n\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        roles[actor][role] = false;\\n    }\\n\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        mainCharacters[role] = actor;\\n    }\\n\\n    function getRole(uint256 role, address contr) external view returns (bool) {\\n        return roles[contr][role];\\n    }\\n\\n    /// @dev current executor\\n    function executor() public returns (address exec) {\\n        address depController = mainCharacters[DEPENDENCY_CONTROLLER];\\n        if (depController != address(0)) {\\n            exec = IDependencyController(depController).currentExecutor();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/IDependencyController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IDependencyController {\\n    function currentExecutor() external returns (address);\\n}\\n\"\r\n    },\r\n    \"interfaces/IWETH.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LiquidityWarning\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WEIGHT_TOTAL_10k\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"activateIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"activateIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeIssuers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"yieldQuotientFP\",\"type\":\"uint256\"}],\"name\":\"applyBorrowInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceWithInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatorFP\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondBucketMetadata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"runtimeWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyingSpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawingSpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldLastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runtimeYieldFP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldFP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowYieldAccumulators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulatorFP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hourlyYieldFP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowingFactorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"runtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"}],\"name\":\"buyBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bondIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyHourlyBondSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"closeHourlyBondAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"deactivateIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diffMaxMinRuntime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"getUpdatedBorrowYieldAccuFP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"haircut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"haircuts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hourlyBondAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldQuotientFP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"moduloHour\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"incentiveTranches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"initBorrowYieldAccumulator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"issuerTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendingMeta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendingBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendingCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainCharacterCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHourlyYieldFP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRuntime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRuntime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextBondIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"registerBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roleCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowingFactor\",\"type\":\"uint256\"}],\"name\":\"setBorrowingFactorPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"aprPercent\",\"type\":\"uint256\"}],\"name\":\"setHourlyYieldAPR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tranche\",\"type\":\"uint8\"}],\"name\":\"setIncentiveTranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buffer\",\"type\":\"uint256\"}],\"name\":\"setLendingBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"setLendingCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxYieldFP\",\"type\":\"uint256\"}],\"name\":\"setMaxHourlyYieldFP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runtime\",\"type\":\"uint256\"}],\"name\":\"setMaxRuntime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runtime\",\"type\":\"uint256\"}],\"name\":\"setMinRuntime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"setRuntimeWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"yieldsFP\",\"type\":\"uint256[]\"}],\"name\":\"setRuntimeYieldsFP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"changePerSecondFP\",\"type\":\"uint256\"}],\"name\":\"setYieldChangePerSecondFP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateMainCharacterCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateRoleCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"viewAccumulatedBorrowingYieldFP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"runtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"viewBondReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"viewBorrowAPRPer10k\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"viewHourlyBondAPRPer10k\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"viewHourlyBondAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"viewLendingTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"yieldQuotientFP\",\"type\":\"uint256\"}],\"name\":\"viewWithBorrowInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bondId\",\"type\":\"uint256\"}],\"name\":\"withdrawBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawHourlyBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldChangePerSecondFP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Lending","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"30000","ConstructorArguments":"000000000000000000000000c6d13a49cdc5afc7798dd0eba7698db9bfcc1d8c","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}