{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/strategies/CitadelStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ninterface ICurvePairs {\\n    function add_liquidity(uint256[2] memory _amounts, uint256 _min_mint_amount) external;\\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 _min_amount) external;\\n    function balances(uint256 i) external view returns (uint256);\\n}\\n\\ninterface IGauge {\\n    function balanceOf(address _address) external view returns (uint256);\\n    function deposit(uint256 _amount) external;\\n    function withdraw(uint256 _amount) external;\\n    function getReward() external; // For Pickle Farm only\\n}\\n\\ninterface IMintr {\\n    function mint(address _address) external;\\n}\\n\\ninterface IRouter {\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n}\\n\\ninterface IPickleJar is IERC20 {\\n    function deposit(uint256 _amount) external;\\n    function withdraw(uint256 _amount) external;\\n    function balance() external view returns (uint256);\\n}\\n\\ninterface IMasterChef {\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n    function userInfo(uint256, address) external view returns(uint256, uint256);\\n}\\n\\ninterface IWETH is IERC20 {\\n    function withdraw(uint256 _amount) external;\\n}\\n\\ninterface ICitadelVault {\\n    function getReimburseTokenAmount(uint256) external view returns (uint256);\\n}\\n\\ninterface IChainlink {\\n    function latestAnswer() external view returns (int256);\\n}\\n\\ninterface ISLPToken is IERC20 {\\n    function getReserves() external view returns (uint112, uint112, uint32);\\n}\\n\\ncontract CitadelStrategy is Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IWETH;\\n    using SafeERC20 for IPickleJar;\\n    using SafeERC20 for ISLPToken;\\n    using SafeMath for uint256;\\n\\n    IERC20 private constant WBTC = IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\\n    IWETH private constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    IERC20 private constant USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\\n    IERC20 private constant USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\n    IERC20 private constant DAI = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\\n    IRouter private constant router = IRouter(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F); // SushiSwap\\n    ICitadelVault public vault;\\n\\n    // Curve\\n    ICurvePairs private constant cPairs = ICurvePairs(0x4CA9b3063Ec5866A4B82E437059D2C43d1be596F); // HBTC/WBTC\\n    IERC20 private constant clpToken = IERC20(0xb19059ebb43466C323583928285a49f558E572Fd);\\n    IERC20 private constant CRV = IERC20(0xD533a949740bb3306d119CC777fa900bA034cd52);\\n    IGauge private constant gaugeC = IGauge(0x4c18E409Dc8619bFb6a1cB56D114C3f592E0aE79);\\n    IMintr private constant mintr = IMintr(0xd061D61a4d941c39E5453435B6345Dc261C2fcE0);\\n\\n    // Pickle\\n    ISLPToken private constant slpWBTC = ISLPToken(0xCEfF51756c56CeFFCA006cD410B03FFC46dd3a58); // WBTC/ETH\\n    ISLPToken private constant slpDAI = ISLPToken(0xC3D03e4F041Fd4cD388c549Ee2A29a9E5075882f); // DAI/ETH\\n    IERC20 private constant PICKLE = IERC20(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\\n    IPickleJar private constant pickleJarWBTC = IPickleJar(0xde74b6c547bd574c3527316a2eE30cd8F6041525);\\n    IPickleJar private constant pickleJarDAI = IPickleJar(0x55282dA27a3a02ffe599f6D11314D239dAC89135);\\n    IGauge private constant gaugeP_WBTC = IGauge(0xD55331E7bCE14709d825557E5Bca75C73ad89bFb);\\n    IGauge private constant gaugeP_DAI = IGauge(0x6092c7084821057060ce2030F9CC11B22605955F);\\n\\n    // Sushiswap Onsen\\n    IERC20 private constant DPI = IERC20(0x1494CA1F11D487c2bBe4543E90080AeBa4BA3C2b);\\n    ISLPToken private constant slpDPI = ISLPToken(0x34b13F8CD184F55d0Bd4Dd1fe6C07D46f245c7eD); // DPI/ETH\\n    IERC20 private constant SUSHI = IERC20(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2);\\n    IMasterChef private constant masterChef = IMasterChef(0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd);\\n\\n    // LP token price in ETH\\n    uint256 private _HBTCWBTCLPTokenPrice;\\n    uint256 private _WBTCETHLPTokenPrice;\\n    uint256 private _DPIETHLPTokenPrice;\\n    uint256 private _DAIETHLPTokenPrice;\\n\\n    // Pool in ETH\\n    uint256 private _poolHBTCWBTC;\\n    uint256 private _poolWBTCETH;\\n    uint256 private _poolDPIETH;\\n    uint256 private _poolDAIETH;\\n    uint256 private _pool; // For emergencyWithdraw() only\\n\\n    // Others\\n    uint256 private constant DENOMINATOR = 10000;\\n    bool public isVesting;\\n\\n    // Fees\\n    uint256 public yieldFeePerc = 1000;\\n    address public admin;\\n    address public communityWallet;\\n    address public strategist;\\n\\n    event ETHToInvest(uint256 amount);\\n    event LatestLPTokenPrice(uint256 curveHBTC, uint256 pickleWBTC, uint256 sushiSwapDPI, uint256 pickleDAI);\\n    event YieldAmount(uint256 curveHBTC, uint256 pickleWBTC, uint256 sushiSwapDPI, uint256 pickleDAI); // in ETH\\n    event CurrentComposition(uint256 curveHBTC, uint256 pickleWBTC, uint256 sushiSwapDPI, uint256 pickleDAI); // in ETH\\n    event TargetComposition(uint256 curveHBTC, uint256 pickleWBTC, uint256 sushiSwapDPI, uint256 pickleDAI); // in ETH\\n    event AddLiquidity(address pairs, uint256 amountA, uint256 amountB, uint256 lpTokenMinted); // in ETH\\n\\n    modifier onlyVault {\\n        require(msg.sender == address(vault), \\\"Only vault\\\");\\n        _;\\n    }\\n\\n    constructor(address _communityWallet, address _strategist, address _admin) {\\n        communityWallet = _communityWallet;\\n        strategist = _strategist;\\n        admin = _admin;\\n\\n        // Sushiswap router\\n        WETH.safeApprove(address(router), type(uint256).max);\\n        WBTC.safeApprove(address(router), type(uint256).max);\\n        DAI.safeApprove(address(router), type(uint256).max);\\n        slpWBTC.safeApprove(address(router), type(uint256).max);\\n        slpDAI.safeApprove(address(router), type(uint256).max);\\n        slpDPI.safeApprove(address(router), type(uint256).max);\\n        CRV.safeApprove(address(router), type(uint256).max);\\n        PICKLE.safeApprove(address(router), type(uint256).max);\\n        SUSHI.safeApprove(address(router), type(uint256).max);\\n        // Curve\\n        WBTC.safeApprove(address(cPairs), type(uint256).max);\\n        clpToken.safeApprove(address(gaugeC), type(uint256).max);\\n        // Pickle\\n        slpWBTC.safeApprove(address(pickleJarWBTC), type(uint256).max);\\n        slpDAI.safeApprove(address(pickleJarDAI), type(uint256).max);\\n        pickleJarWBTC.safeApprove(address(gaugeP_WBTC), type(uint256).max);\\n        pickleJarDAI.safeApprove(address(gaugeP_DAI), type(uint256).max);\\n        // Sushiswap Onsen\\n        DPI.safeApprove(address(router), type(uint256).max);\\n        slpDPI.safeApprove(address(masterChef), type(uint256).max);\\n\\n        // Set first LP tokens price\\n        (uint256 _clpTokenPriceHBTC, uint256 _pSlpTokenPriceWBTC, uint256 _slpTokenPriceDPI, uint256 _pSlpTokenPriceDAI) = _getLPTokenPrice();\\n        _HBTCWBTCLPTokenPrice = _clpTokenPriceHBTC;\\n        _WBTCETHLPTokenPrice = _pSlpTokenPriceWBTC;\\n        _DPIETHLPTokenPrice = _slpTokenPriceDPI;\\n        _DAIETHLPTokenPrice = _pSlpTokenPriceDAI;\\n    }\\n\\n    /// @notice Function to set vault address that interact with this contract. This function only execute once when deployment\\n    /// @param _address Address of vault contract \\n    function setVault(address _address) external onlyOwner {\\n        require(address(vault) == address(0), \\\"Vault set\\\");\\n\\n        vault = ICitadelVault(_address);\\n    }\\n\\n    /// @notice Function to invest new funds to farms based on composition\\n    /// @param _amount Amount to invest in ETH\\n    function invest(uint256 _amount) external onlyVault {\\n        _updatePoolForPriceChange();\\n\\n        WETH.safeTransferFrom(address(vault), address(this), _amount);\\n        emit ETHToInvest(_amount);\\n        _updatePoolForProvideLiquidity();\\n    }\\n\\n    /// @notice Function to update pool balance because of price change of corresponding LP token \\n    function _updatePoolForPriceChange() private {\\n        (uint256 _clpTokenPriceHBTC, uint256 _pSlpTokenPriceWBTC, uint256 _slpTokenPriceDPI, uint256 _pSlpTokenPriceDAI) = _getLPTokenPrice();\\n        _poolHBTCWBTC = _poolHBTCWBTC.mul(_clpTokenPriceHBTC).div(_HBTCWBTCLPTokenPrice);\\n        _poolWBTCETH = _poolWBTCETH.mul(_pSlpTokenPriceWBTC).div(_WBTCETHLPTokenPrice);\\n        _poolDPIETH = _poolDPIETH.mul(_slpTokenPriceDPI).div(_DPIETHLPTokenPrice);\\n        _poolDAIETH = _poolDAIETH.mul(_pSlpTokenPriceDAI).div(_DAIETHLPTokenPrice);\\n        emit CurrentComposition(_poolHBTCWBTC, _poolWBTCETH, _poolDPIETH, _poolDAIETH);\\n        // Update new LP token price\\n        _HBTCWBTCLPTokenPrice = _clpTokenPriceHBTC;\\n        _WBTCETHLPTokenPrice = _pSlpTokenPriceWBTC;\\n        _DPIETHLPTokenPrice = _slpTokenPriceDPI;\\n        _DAIETHLPTokenPrice = _pSlpTokenPriceDAI;\\n        emit LatestLPTokenPrice(_HBTCWBTCLPTokenPrice, _WBTCETHLPTokenPrice, _DPIETHLPTokenPrice, _DAIETHLPTokenPrice);\\n    }\\n\\n    /// @notice Function to harvest rewards from farms and reinvest into farms based on composition\\n    function yield() external onlyVault {\\n        _updatePoolForPriceChange();\\n\\n        uint256[] memory _yieldAmts = new uint256[](4); // For emit yield amount of each farm\\n        // 1) Claim all rewards\\n        uint256 _yieldFees;\\n        // Curve HBTC/WBTC\\n        mintr.mint(address(gaugeC)); // Claim CRV\\n        uint256 _balanceOfCRV = CRV.balanceOf(address(this));\\n        if (_balanceOfCRV > 0) {\\n            uint256[] memory _amounts = _swapExactTokensForTokens(address(CRV), address(WETH), _balanceOfCRV);\\n            _yieldAmts[0] = _amounts[1];\\n            uint256 _fee = _amounts[1].mul(yieldFeePerc).div(DENOMINATOR);\\n            _poolHBTCWBTC = _poolHBTCWBTC.add(_amounts[1].sub(_fee));\\n            _yieldFees = _yieldFees.add(_fee);\\n        }\\n        // Pickle WBTC/ETH\\n        gaugeP_WBTC.getReward(); // Claim PICKLE\\n        uint256 _balanceOfPICKLEForWETH = PICKLE.balanceOf(address(this));\\n        if (_balanceOfPICKLEForWETH > 0) {\\n            uint256[] memory _amounts = _swapExactTokensForTokens(address(PICKLE), address(WETH), _balanceOfPICKLEForWETH);\\n            _yieldAmts[1] = _amounts[1];\\n            uint256 _fee = _amounts[1].mul(yieldFeePerc).div(DENOMINATOR);\\n            _poolWBTCETH = _poolWBTCETH.add(_amounts[1].sub(_fee));\\n            _yieldFees = _yieldFees.add(_fee);\\n        }\\n        // Sushiswap DPI/ETH\\n        (uint256 _slpDPIAmt,) = masterChef.userInfo(42, address(this));\\n        if (_slpDPIAmt > 0) {\\n            // SushiSwap previous SUSHI reward is auto harvest after new deposit\\n            // Swap SUSHI to WETH\\n            uint256 _balanceOfSUSHI = SUSHI.balanceOf(address(this));\\n            if (_balanceOfSUSHI > 0) {\\n                uint256[] memory _amounts = _swapExactTokensForTokens(address(SUSHI), address(WETH), _balanceOfSUSHI);\\n                uint256 _fee = _amounts[1].mul(yieldFeePerc).div(DENOMINATOR);\\n                _yieldAmts[2] = _amounts[1];\\n                _poolDPIETH = _poolDPIETH.add(_amounts[1].sub(_fee));\\n                _yieldFees = _yieldFees.add(_fee);\\n            }\\n        }\\n        // Pickle DAI/ETH\\n        gaugeP_DAI.getReward(); // Claim PICKLE\\n        uint256 _balanceOfPICKLEForDAI = PICKLE.balanceOf(address(this));\\n        if (_balanceOfPICKLEForDAI > 0) {\\n            uint256[] memory _amounts = _swapExactTokensForTokens(address(PICKLE), address(WETH), _balanceOfPICKLEForDAI);\\n            _yieldAmts[3] = _amounts[1];\\n            uint256 _fee = _amounts[1].mul(yieldFeePerc).div(DENOMINATOR);\\n            _poolDAIETH = _poolDAIETH.add(_amounts[1].sub(_fee));\\n            _yieldFees = _yieldFees.add(_fee);\\n        }\\n        emit YieldAmount(_yieldAmts[0], _yieldAmts[1], _yieldAmts[2], _yieldAmts[3]);\\n\\n        // 2) Split yield fees\\n        _splitYieldFees(_yieldFees);\\n\\n        // 3) Reinvest rewards\\n        _updatePoolForProvideLiquidity();\\n    }\\n\\n    /// @notice Function to transfer fees that collect from yield to wallets\\n    /// @param _amount Fees to transfer in ETH\\n    function _splitYieldFees(uint256 _amount) private {\\n        WETH.withdraw(_amount);\\n        uint256 _yieldFee = (address(this).balance).mul(2).div(5);\\n        (bool _a,) = admin.call{value: _yieldFee}(\\\"\\\"); // 40%\\n        require(_a);\\n        (bool _t,) = communityWallet.call{value: _yieldFee}(\\\"\\\"); // 40%\\n        require(_t);\\n        (bool _s,) = strategist.call{value: (address(this).balance)}(\\\"\\\"); // 20%\\n        require(_s);\\n    }\\n\\n    // To enable receive ETH from WETH in _splitYieldFees()\\n    receive() external payable {}\\n\\n    /// @notice Function to provide liquidity into farms and update pool of each farms\\n    function _updatePoolForProvideLiquidity() private {\\n        uint256 _totalPool = _getTotalPool().add(WETH.balanceOf(address(this)));\\n        // Calculate target composition for each farm\\n        uint256 _thirtyPercOfPool = _totalPool.mul(3000).div(DENOMINATOR);\\n        uint256 _poolHBTCWBTCTarget = _thirtyPercOfPool; // 30% for Curve HBTC/WBTC\\n        uint256 _poolWBTCETHTarget = _thirtyPercOfPool; // 30% for Pickle WBTC/ETH\\n        uint256 _poolDPIETHTarget = _thirtyPercOfPool; // 30% for SushiSwap DPI/ETH\\n        uint256 _poolDAIETHTarget = _totalPool.sub(_thirtyPercOfPool).sub(_thirtyPercOfPool).sub(_thirtyPercOfPool); // 10% for Pickle DAI/ETH\\n        emit CurrentComposition(_poolHBTCWBTC, _poolWBTCETH, _poolDPIETH, _poolDAIETH);\\n        emit TargetComposition(_poolHBTCWBTCTarget, _poolWBTCETHTarget, _poolDPIETHTarget, _poolDAIETHTarget);\\n        // If there is no negative value(need to remove liquidity from farm in order to drive back the composition)\\n        // We proceed with split funds into 4 farms and drive composition back to target\\n        // Else, we put all the funds into the farm that is furthest from target composition\\n        if (\\n            _poolHBTCWBTCTarget > _poolHBTCWBTC &&\\n            _poolWBTCETHTarget > _poolWBTCETH &&\\n            _poolDPIETHTarget > _poolDPIETH &&\\n            _poolDAIETHTarget > _poolDAIETH\\n        ) {\\n            // invest funds into Curve HBTC/WBTC\\n            uint256 _investHBTCWBTCAmt = _poolHBTCWBTCTarget.sub(_poolHBTCWBTC);\\n            _investHBTCWBTC(_investHBTCWBTCAmt);\\n            // invest funds into Pickle WBTC/ETH\\n            uint256 _investWBTCETHAmt = _poolWBTCETHTarget.sub(_poolWBTCETH);\\n            _investWBTCETH(_investWBTCETHAmt);\\n            // invest funds into Sushiswap Onsen DPI/ETH\\n            uint256 _investDPIETHAmt = _poolDPIETHTarget.sub(_poolDPIETH);\\n            _investDPIETH(_investDPIETHAmt);\\n            // invest funds into Pickle DAI/ETH\\n            uint256 _investDAIETHAmt = _poolDAIETHTarget.sub(_poolDAIETH);\\n            _investDAIETH(_investDAIETHAmt);\\n        } else {\\n            // Put all the yield into the farm that is furthest from target composition\\n            uint256 _furthest;\\n            uint256 _farmIndex;\\n            // 1. Find out the farm that is furthest from target composition\\n            if (_poolHBTCWBTCTarget > _poolHBTCWBTC) {\\n                uint256 _diff = _poolHBTCWBTCTarget.sub(_poolHBTCWBTC);\\n                _furthest = _diff;\\n                _farmIndex = 0;\\n            }\\n            if (_poolWBTCETHTarget > _poolWBTCETH) {\\n                uint256 _diff = _poolWBTCETHTarget.sub(_poolWBTCETH);\\n                if (_diff > _furthest) {\\n                    _furthest = _diff;\\n                    _farmIndex = 1;\\n                }\\n            }\\n            if (_poolDPIETHTarget > _poolDPIETH) {\\n                uint256 _diff = _poolDPIETHTarget.sub(_poolDPIETH);\\n                if (_diff > _furthest) {\\n                    _furthest = _diff;\\n                    _farmIndex = 2;\\n                }\\n            }\\n            if (_poolDAIETHTarget > _poolDAIETH) {\\n                uint256 _diff = _poolDAIETHTarget.sub(_poolDAIETH);\\n                if (_diff > _furthest) {\\n                    _furthest = _diff;\\n                    _farmIndex = 3;\\n                }\\n            }\\n            // 2. Put all the funds into the farm that is furthest from target composition\\n            uint256 _balanceOfWETH = WETH.balanceOf(address(this));\\n            if (_farmIndex == 0) {\\n                _investHBTCWBTC(_balanceOfWETH);\\n            } else if (_farmIndex == 1) {\\n                _investWBTCETH(_balanceOfWETH);\\n            } else if (_farmIndex == 2) {\\n                _investDPIETH(_balanceOfWETH);\\n            } else {\\n                _investDAIETH(_balanceOfWETH);\\n            }\\n        }\\n        emit CurrentComposition(_poolHBTCWBTC, _poolWBTCETH, _poolDPIETH, _poolDAIETH);\\n    }\\n\\n    /// @notice Function to invest funds into Curve HBTC/WBTC pool \\n    /// @notice and stake Curve LP token into Curve Gauge(staking contract)\\n    /// @param _amount Amount to invest in ETH\\n    function _investHBTCWBTC(uint256 _amount) private {\\n        uint256[] memory _amounts = _swapExactTokensForTokens(address(WETH), address(WBTC), _amount);\\n        if (_amounts[1] > 0) {\\n            cPairs.add_liquidity([0, _amounts[1]], 0);\\n            uint256 _balanceOfClpToken = clpToken.balanceOf(address(this));\\n            gaugeC.deposit(_balanceOfClpToken);\\n            _poolHBTCWBTC = _poolHBTCWBTC.add(_amount);\\n            emit AddLiquidity(address(cPairs), _amounts[1], 0, _balanceOfClpToken);\\n        }\\n    }\\n\\n    /// @notice Function to invest funds into SushiSwap WBTC/ETH pool, deposit SLP token into Pickle Jar(vault contract)\\n    /// @notice and stake Pickle LP token into Pickle Farm(staking contract)\\n    /// @param _amount Amount to invest in ETH\\n    function _investWBTCETH(uint256 _amount) private {\\n        uint256 _amountIn = _amount.div(2);\\n        uint256[] memory _amounts = _swapExactTokensForTokens(address(WETH), address(WBTC), _amountIn);\\n        if (_amounts[1] > 0) {\\n            (uint256 _amountA, uint256 _amountB, uint256 _slpWBTC) = router.addLiquidity(\\n                address(WBTC), address(WETH), \\n                _amounts[1], _amountIn,\\n                0, 0,\\n                address(this), block.timestamp\\n            );\\n            emit AddLiquidity(address(slpWBTC), _amountA, _amountB, _slpWBTC);\\n            pickleJarWBTC.deposit(_slpWBTC);\\n            gaugeP_WBTC.deposit(pickleJarWBTC.balanceOf(address(this)));\\n            _poolWBTCETH = _poolWBTCETH.add(_amount);\\n        }\\n    }\\n\\n    /// @notice Function to invest funds into SushiSwap DPI/ETH pool \\n    /// @notice and stake SLP token into SushiSwap MasterChef(staking contract)\\n    /// @param _amount Amount to invest in ETH\\n    function _investDPIETH(uint256 _amount) private {\\n        uint256 _amountIn = _amount.div(2);\\n        uint256[] memory _amounts = _swapExactTokensForTokens(address(WETH), address(DPI), _amountIn);\\n        if (_amounts[1] > 0) {\\n            (uint256 _amountA, uint256 _amountB, uint256 _slpDPI) = router.addLiquidity(address(DPI), address(WETH), _amounts[1], _amountIn, 0, 0, address(this), block.timestamp);\\n            masterChef.deposit(42, _slpDPI);\\n            _poolDPIETH = _poolDPIETH.add(_amount);\\n            emit AddLiquidity(address(slpDPI), _amountA, _amountB, _slpDPI);\\n        }\\n    }\\n\\n    /// @notice Function to invest funds into SushiSwap DAI/ETH pool, deposit SLP token into Pickle Jar(vault contract)\\n    /// @notice and stake Pickle LP token into Pickle Farm(staking contract)\\n    /// @param _amount Amount to invest in ETH\\n    function _investDAIETH(uint256 _amount) private {\\n        uint256 _amountIn = _amount.div(2);\\n        uint256[] memory _amounts = _swapExactTokensForTokens(address(WETH), address(DAI), _amountIn);\\n        if (_amounts[1] > 0) {\\n            (uint256 _amountA, uint256 _amountB, uint256 _slpDAI) = router.addLiquidity(\\n                address(DAI), address(WETH), \\n                _amounts[1], _amountIn,\\n                0, 0,\\n                address(this), block.timestamp\\n            );\\n            emit AddLiquidity(address(slpDAI), _amountA, _amountB, _slpDAI); // 1389.083912192186144530 0.335765206816332767 17.202418926243352766\\n            pickleJarDAI.deposit(_slpDAI);\\n            gaugeP_DAI.deposit(pickleJarDAI.balanceOf(address(this)));\\n            _poolDAIETH = _poolDAIETH.add(_amount);\\n        }\\n    }\\n\\n    // @notice Function to reimburse vault minimum keep amount by removing liquidity from all farms\\n    function reimburse() external onlyVault {\\n        // Get total reimburse amount (6 decimals)\\n        uint256 _reimburseUSDT = vault.getReimburseTokenAmount(0);\\n        uint256 _reimburseUSDC = vault.getReimburseTokenAmount(1);\\n        uint256 _reimburseDAI = vault.getReimburseTokenAmount(2);\\n        uint256 _totalReimburse = _reimburseUSDT.add(_reimburseUSDC).add(_reimburseDAI.div(1e12));\\n\\n        // Get ETH needed from farm (by removing liquidity then swap to ETH)\\n        uint256[] memory _amounts = router.getAmountsOut(_totalReimburse, _getPath(address(USDT), address(WETH)));\\n        if (WETH.balanceOf(address(this)) < _amounts[1]) { // Balance of WETH > _amounts[1] when execute emergencyWithdraw()\\n            _updatePoolForPriceChange();\\n            uint256 _thirtyPercOfAmtWithdraw = _amounts[1].mul(3000).div(DENOMINATOR);\\n            _withdrawCurve(_thirtyPercOfAmtWithdraw); // 30% from Curve HBTC/WBTC\\n            _withdrawPickleWBTC(_thirtyPercOfAmtWithdraw); // 30% from Pickle WBTC/ETH\\n            _withdrawSushiswap(_thirtyPercOfAmtWithdraw); // 30% from SushiSwap DPI/ETH\\n            _withdrawPickleDAI(_amounts[1].sub(_thirtyPercOfAmtWithdraw).sub(_thirtyPercOfAmtWithdraw).sub(_thirtyPercOfAmtWithdraw)); // 10% from Pickle DAI/ETH\\n            _swapAllToETH(); // Swap WBTC, DPI & DAI that get from withdrawal above to WETH\\n        }\\n\\n        // Swap WETH to token and transfer back to vault\\n        uint256 _WETHBalance = WETH.balanceOf(address(this));\\n        _reimburse(_WETHBalance.mul(_reimburseUSDT).div(_totalReimburse), USDT);\\n        _reimburse(_WETHBalance.mul(_reimburseUSDC).div(_totalReimburse), USDC);\\n        _reimburse((WETH.balanceOf(address(this))), DAI);\\n    }\\n\\n    /// @notice reimburse() nested function\\n    /// @param _reimburseAmt Amount to reimburse in ETH\\n    /// @param _token Type of token to reimburse\\n    function _reimburse(uint256 _reimburseAmt, IERC20 _token) private {\\n        if (_reimburseAmt > 0) {\\n            uint256[] memory _amounts = _swapExactTokensForTokens(address(WETH), address(_token), _reimburseAmt);\\n            _token.safeTransfer(address(vault), _amounts[1]);\\n        }\\n    }\\n\\n    /// @notice Function to withdraw all funds from all farms \\n    function emergencyWithdraw() external onlyVault {\\n        // 1. Withdraw all token from all farms\\n        // Since to withdraw all funds, there is no need to _updatePoolForPriceChange()\\n        // Curve HBTC/WBTC\\n        mintr.mint(address(gaugeC));\\n        _withdrawCurve(_poolHBTCWBTC);\\n        // Pickle WBTC/ETH\\n        gaugeP_WBTC.getReward();\\n        _withdrawPickleWBTC(_poolWBTCETH);\\n        // Sushiswap DPI/ETH\\n        _withdrawSushiswap(_poolDPIETH);\\n        // Pickle DAI/ETH\\n        gaugeP_WBTC.getReward();\\n        _withdrawPickleDAI(_poolDAIETH);\\n\\n        // 2.1 Swap all rewards to WETH\\n        uint256 balanceOfWETHBefore = WETH.balanceOf(address(this));\\n        _swapExactTokensForTokens(address(CRV), address(WETH), CRV.balanceOf(address(this)));\\n        _swapExactTokensForTokens(address(PICKLE), address(WETH), PICKLE.balanceOf(address(this)));\\n        _swapExactTokensForTokens(address(SUSHI), address(WETH), SUSHI.balanceOf(address(this)));\\n        // Send portion rewards to admin\\n        uint256 _rewards = (WETH.balanceOf(address(this))).sub(balanceOfWETHBefore);\\n        uint256 _adminFees = _rewards.mul(yieldFeePerc).div(DENOMINATOR);\\n        _splitYieldFees(_adminFees);\\n\\n        // 2.2 Swap WBTC, DPI & DAI to WETH\\n        _swapAllToETH();\\n        _pool = WETH.balanceOf(address(this));\\n        isVesting = true;\\n    }\\n\\n    /// @notice Function to invest back WETH into farms after emergencyWithdraw()\\n    function reinvest() external onlyVault {\\n        _pool = 0;\\n        isVesting = false;\\n        _updatePoolForProvideLiquidity();\\n    }\\n\\n    /// @notice Function to swap tokens with SushiSwap\\n    /// @param _tokenA Token to be swapped\\n    /// @param _tokenB Token to be received\\n    /// @param _amountIn Amount of token to be swapped\\n    /// @return _amounts Array that contains swapped amounts\\n    function _swapExactTokensForTokens(address _tokenA, address _tokenB, uint256 _amountIn) private returns (uint256[] memory _amounts) {\\n        address[] memory _path = _getPath(_tokenA, _tokenB);\\n        uint256[] memory _amountsOut = router.getAmountsOut(_amountIn, _path);\\n        if (_amountsOut[1] > 0) {\\n            _amounts = router.swapExactTokensForTokens(_amountIn, 0, _path, address(this), block.timestamp);\\n        } else {\\n            // Not enough amount to swap\\n            uint256[] memory _zeroReturn = new uint256[](2);\\n            _zeroReturn[0] = 0;\\n            _zeroReturn[1] = 0;\\n            return _zeroReturn;\\n        }\\n    }\\n\\n    /// @notice Function to withdraw funds from farms if withdraw amount > amount keep in vault\\n    /// @param _amount Amount to withdraw in ETH\\n    function withdraw(uint256 _amount) external onlyVault {\\n        if (!isVesting) {\\n            // Update to latest pool\\n            _updatePoolForPriceChange();\\n            uint256 _totalPool = _getTotalPool();\\n            // _WETHAmtBefore: Need this because there will be leftover after provide liquidity to farms\\n            uint256 _WETHAmtBefore = WETH.balanceOf(address(this));\\n\\n            // Withdraw from Curve HBTC/WBTC\\n            _withdrawCurve(_poolHBTCWBTC.mul(_amount).div(_totalPool));\\n            // Withdraw from Pickle WBTC/ETH\\n            _withdrawPickleWBTC(_poolWBTCETH.mul(_amount).div(_totalPool));\\n            // Withdraw from Sushiswap DPI/ETH\\n            _withdrawSushiswap(_poolDPIETH.mul(_amount).div(_totalPool));\\n            // Withdraw from Pickle DAI/ETH\\n            _withdrawPickleDAI(_poolDAIETH.mul(_amount).div(_totalPool));\\n\\n            _swapAllToETH(); // Swap WBTC, DPI & DAI that get from withdrawal above to WETH\\n            WETH.safeTransfer(msg.sender, (WETH.balanceOf(address(this))).sub(_WETHAmtBefore));\\n        } else {\\n            _pool = _pool.sub(_amount);\\n            WETH.safeTransfer(msg.sender, _amount);\\n        }\\n    }\\n\\n    /// @notice Function to unstake LP token(gaugeC) and remove liquidity(cPairs) from Curve\\n    /// @param _amount Amount to withdraw in ETH\\n    function _withdrawCurve(uint256 _amount) private {\\n        uint256 _totalClpToken = gaugeC.balanceOf(address(this));\\n        uint256 _clpTokenShare = _totalClpToken.mul(_amount).div(_poolHBTCWBTC);\\n        gaugeC.withdraw(_clpTokenShare);\\n        cPairs.remove_liquidity_one_coin(_clpTokenShare, 1, 0);\\n        _poolHBTCWBTC = _poolHBTCWBTC.sub(_amount);\\n    }\\n\\n    /// @notice Function to unstake LP token from Pickle Farm(gaugeP_WBTC),\\n    /// @notice withdraw from Pickle Jar(pickleJarWBTC),\\n    /// @notice and remove liquidity(router) from SushiSwap\\n    /// @param _amount Amount to withdraw in ETH\\n    function _withdrawPickleWBTC(uint256 _amount) private {\\n        uint256 _totalPlpToken = gaugeP_WBTC.balanceOf(address(this));\\n        uint256 _plpTokenShare = _totalPlpToken.mul(_amount).div(_poolWBTCETH);\\n        gaugeP_WBTC.withdraw(_plpTokenShare);\\n        pickleJarWBTC.withdraw(_plpTokenShare);\\n        router.removeLiquidity(address(WBTC), address(WETH), slpWBTC.balanceOf(address(this)), 0, 0, address(this), block.timestamp);\\n        _poolWBTCETH = _poolWBTCETH.sub(_amount);\\n    }\\n\\n    /// @notice Function to unstake LP token(masterChef) and remove liquidity(router) from SushiSwap\\n    /// @param _amount Amount to withdraw in ETH\\n    function _withdrawSushiswap(uint256 _amount) private {\\n        (uint256 _totalSlpToken,) = masterChef.userInfo(42, address(this));\\n        uint256 _slpTokenShare = _totalSlpToken.mul(_amount).div(_poolDPIETH);\\n        masterChef.withdraw(42, _slpTokenShare);\\n        router.removeLiquidity(address(DPI), address(WETH), _slpTokenShare, 0, 0, address(this), block.timestamp);\\n        _poolDPIETH = _poolDPIETH.sub(_amount);\\n    }\\n\\n    /// @notice Function to unstake LP token from Pickle Farm(gaugeP_DAI),\\n    /// @notice withdraw from Pickle Jar(pickleJarDAI),\\n    /// @notice and remove liquidity(router) from SushiSwap\\n    /// @param _amount Amount to withdraw in ETH\\n    function _withdrawPickleDAI(uint256 _amount) private {\\n        uint256 _totalPlpToken = gaugeP_DAI.balanceOf(address(this));\\n        uint256 _plpTokenShare = _totalPlpToken.mul(_amount).div(_poolDAIETH);\\n        gaugeP_DAI.withdraw(_plpTokenShare);\\n        pickleJarDAI.withdraw(_plpTokenShare);\\n        router.removeLiquidity(address(DAI), address(WETH), slpDAI.balanceOf(address(this)), 0, 0, address(this), block.timestamp);\\n        _poolDAIETH = _poolDAIETH.sub(_amount);\\n    }\\n\\n    /// @notice Function to swap tokens that receive by removing liquidity for all farms\\n    function _swapAllToETH() private {\\n        _swapExactTokensForTokens(address(WBTC), address(WETH), WBTC.balanceOf(address(this)));\\n        _swapExactTokensForTokens(address(DPI), address(WETH), DPI.balanceOf(address(this)));\\n        _swapExactTokensForTokens(address(DAI), address(WETH), DAI.balanceOf(address(this)));\\n    }\\n\\n    /// @notice Function to set new admin address from vault contract\\n    /// @param _admin Address of new admin\\n    function setAdmin(address _admin) external onlyVault {\\n        admin = _admin;\\n    }\\n\\n    /// @notice Function to set new strategist address from vault contract\\n    /// @param _strategist Address of new strategist\\n    function setStrategist(address _strategist) external onlyVault {\\n        strategist = _strategist;\\n    }\\n\\n    /// @notice Function to approve vault to migrate funds from this contract to new strategy contract\\n    function approveMigrate() external onlyOwner {\\n        require(isVesting, \\\"Not in vesting state\\\");\\n\\n        if (WETH.allowance(address(this), address(vault)) == 0) {\\n            WETH.safeApprove(address(vault), type(uint256).max);\\n        }\\n    }\\n\\n    /// @notice Function to get path for SushiSwap swap functions\\n    /// @param _tokenA Token to be swapped\\n    /// @param _tokenB Token to be received\\n    /// @return _path Array of address\\n    function _getPath(address _tokenA, address _tokenB) private pure returns (address[] memory) {\\n        address[] memory _path = new address[](2);\\n        _path[0] = _tokenA;\\n        _path[1] = _tokenB;\\n        return _path;\\n    }\\n\\n    /// @notice Function to get latest LP token price for all farms\\n    /// @return All LP token price in ETH\\n    function _getLPTokenPrice() private view returns (uint256, uint256, uint256, uint256) {\\n        // 1. Get tokens price in ETH\\n        uint256 _wbtcPrice = (router.getAmountsOut(1e8, _getPath(address(WBTC), address(WETH))))[1];\\n        uint256 _dpiPrice = _getTokenPriceFromChainlink(0x029849bbc0b1d93b85a8b6190e979fd38F5760E2); // DPI/ETH\\n        uint256 _daiPrice = _getTokenPriceFromChainlink(0x773616E4d11A78F511299002da57A0a94577F1f4); // DAI/ETH\\n\\n        // 2. Calculate LP token price\\n        // Curve HBTC/WBTC\\n        uint256 _amountACurve = cPairs.balances(0); // HBTC, 18 decimals\\n        uint256 _amountBCurve = (cPairs.balances(1)).mul(1e10); // WBTC, 8 decimals to 18 decimals\\n        uint256 _totalValueOfHBTCWBTC = _calcTotalValueOfLiquidityPool(_amountACurve, _wbtcPrice, _amountBCurve, _wbtcPrice);\\n        uint256 _clpTokenPriceHBTC = _calcValueOf1LPToken(_totalValueOfHBTCWBTC, clpToken.totalSupply());\\n        // Pickle WBTC/ETH\\n        uint256 _pSlpTokenPriceWBTC = _calcPslpTokenPrice(pickleJarWBTC, slpWBTC, _wbtcPrice);\\n        // Sushiswap DPI/ETH\\n        uint256 _slpTokenPriceDPI = _calcSlpTokenPrice(slpDPI, _dpiPrice);\\n        // Pickle DAI/ETH\\n        uint256 _pSlpTokenPriceDAI = _calcPslpTokenPrice(pickleJarDAI, slpDAI, _daiPrice);\\n\\n        return (_clpTokenPriceHBTC, _pSlpTokenPriceWBTC, _slpTokenPriceDPI, _pSlpTokenPriceDAI);\\n    }\\n\\n    /// @notice Function to calculate price of Pickle LP token\\n    /// @param _pslpToken Type of Pickle SLP token\\n    /// @param _slpToken Type of SushiSwap LP token\\n    /// @param _tokenAPrice Price of SushiSwap LP token\\n    /// @return Price of Pickle LP token in ETH\\n    function _calcPslpTokenPrice(IPickleJar _pslpToken, ISLPToken _slpToken, uint256 _tokenAPrice) private view returns (uint256) {\\n        uint256 _slpTokenPrice = _calcSlpTokenPrice(_slpToken, _tokenAPrice);\\n        uint256 _totalValueOfPSlpToken = _calcTotalValueOfLiquidityPool(_pslpToken.balance(), _slpTokenPrice, 0, 0);\\n        return _calcValueOf1LPToken(_totalValueOfPSlpToken, _pslpToken.totalSupply());\\n    }\\n\\n    /// @notice Function to calculate price of SushiSwap LP Token\\n    /// @param _slpToken Type of SushiSwap LP token\\n    /// @param _tokenAPrice Price of SushiSwap LP token\\n    /// @return Price of SushiSwap LP Token in ETH\\n    function _calcSlpTokenPrice(ISLPToken _slpToken, uint256 _tokenAPrice) private view returns (uint256) {\\n        (uint112 _reserveA, uint112 _reserveB,) = _slpToken.getReserves();\\n        if (_slpToken == slpWBTC) { // Change WBTC to 18 decimals\\n            _reserveA * 1e10;\\n        }\\n        uint256 _totalValueOfLiquidityPool = _calcTotalValueOfLiquidityPool(uint256(_reserveA), _tokenAPrice, uint256(_reserveB), 1e18);\\n        return _calcValueOf1LPToken(_totalValueOfLiquidityPool, _slpToken.totalSupply());\\n    }\\n\\n    /// @notice Calculate total value of liquidity pool\\n    /// @param _amountA Amount of one side of reserves\\n    /// @param _priceA Price of one side of reserves\\n    /// @param _amountB Amount of another side of reserves (if available)\\n    /// @param _priceB Price of another side of reserves (if available)\\n    /// @return Total value of liquidity pool (18 decimals)\\n    function _calcTotalValueOfLiquidityPool(uint256 _amountA, uint256 _priceA, uint256 _amountB, uint256 _priceB) private pure returns (uint256) {\\n        return (_amountA.mul(_priceA)).add(_amountB.mul(_priceB));\\n    }\\n\\n    /// @notice Function to calculate price of 1 LP Token\\n    /// @param _totalValueOfLiquidityPool Amount from _calcTotalValueOfLiquidityPool()\\n    /// @param _circulatingSupplyOfLPTokens totalSupply() of LP token\\n    /// @return Price of 1 LP Token (18 decimals)\\n    function _calcValueOf1LPToken(uint256 _totalValueOfLiquidityPool, uint256 _circulatingSupplyOfLPTokens) private pure returns (uint256) {\\n        return _totalValueOfLiquidityPool.div(_circulatingSupplyOfLPTokens);\\n    }\\n\\n    /// @notice Function to get token price(only for DPI and DAI in this contract)\\n    /// @param _priceFeedProxy Address of ChainLink contract that provide oracle price\\n    /// @return Price in ETH\\n    function _getTokenPriceFromChainlink(address _priceFeedProxy) private view returns (uint256) {\\n        IChainlink _pricefeed = IChainlink(_priceFeedProxy);\\n        int256 _price = _pricefeed.latestAnswer();\\n        return uint256(_price);\\n    }\\n\\n    /// @notice Get current pool(sum of 4 pools with latest price updated)\\n    /// @return Current pool in ETH\\n    function getCurrentPool() public view returns (uint256) {\\n        if (!isVesting) {\\n            (uint256 _clpTokenPriceHBTC, uint256 _pSlpTokenPriceWBTC, uint256 _slpTokenPriceDPI, uint256 _pSlpTokenPriceDAI) = _getLPTokenPrice();\\n            uint256 poolHBTCWBTC = _poolHBTCWBTC.mul(_clpTokenPriceHBTC).div(_HBTCWBTCLPTokenPrice);\\n            uint256 poolWBTCETH = _poolWBTCETH.mul(_pSlpTokenPriceWBTC).div(_WBTCETHLPTokenPrice);\\n            uint256 poolDPIETH = _poolDPIETH.mul(_slpTokenPriceDPI).div(_DPIETHLPTokenPrice);\\n            uint256 poolDAIETH = _poolDAIETH.mul(_pSlpTokenPriceDAI).div(_DAIETHLPTokenPrice);\\n            return poolHBTCWBTC.add(poolWBTCETH).add(poolDPIETH).add(poolDAIETH);\\n        } else {\\n            return _pool;\\n        }\\n    }\\n\\n    /// @notice Get total pool(sum of 4 pools)\\n    /// @return Total pool in ETH\\n    function _getTotalPool() private view returns (uint256) {\\n        if (!isVesting) {\\n            return _poolHBTCWBTC.add(_poolWBTCETH).add(_poolDPIETH).add(_poolDAIETH);\\n        } else {\\n            return _pool;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pairs\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenMinted\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curveHBTC\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pickleWBTC\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sushiSwapDPI\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pickleDAI\",\"type\":\"uint256\"}],\"name\":\"CurrentComposition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHToInvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curveHBTC\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pickleWBTC\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sushiSwapDPI\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pickleDAI\",\"type\":\"uint256\"}],\"name\":\"LatestLPTokenPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curveHBTC\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pickleWBTC\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sushiSwapDPI\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pickleDAI\",\"type\":\"uint256\"}],\"name\":\"TargetComposition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curveHBTC\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pickleWBTC\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sushiSwapDPI\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pickleDAI\",\"type\":\"uint256\"}],\"name\":\"YieldAmount\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"communityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVesting\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reimburse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract ICitadelVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldFeePerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"CitadelStrategy","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000dd6c35aff646b2fb7d8a8955ccbe0994409348d000000000000000000000000054d003d451c973ad7693f825d5b78adfc0efe9340000000000000000000000003f68a3c1023d736d8be867ca49cb18c543373b99","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}