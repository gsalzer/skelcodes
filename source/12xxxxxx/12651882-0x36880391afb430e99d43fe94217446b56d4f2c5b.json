{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/mainnet/connectors/1proto/main.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title 1Proto.\\n * @dev On-chain and off-chian DEX Aggregator.\\n */\\n\\nimport { TokenInterface , MemoryInterface } from \\\"../../common/interfaces.sol\\\";\\nimport { Stores } from \\\"../../common/stores.sol\\\";\\nimport { OneProtoInterface, OneProtoData, OneProtoMultiData } from \\\"./interface.sol\\\";\\nimport { Helpers } from \\\"./helpers.sol\\\";\\nimport { Events } from \\\"./events.sol\\\";\\n\\nabstract contract OneProtoResolver is Helpers, Events {\\n    /**\\n     * @dev 1proto contract swap handler\\n     * @param oneProtoData - Struct with swap data defined in interfaces.sol \\n     */\\n    function oneProtoSwap(\\n        OneProtoData memory oneProtoData\\n    ) internal returns (uint buyAmt) {\\n        TokenInterface _sellAddr = oneProtoData.sellToken;\\n        TokenInterface _buyAddr = oneProtoData.buyToken;\\n        uint _sellAmt = oneProtoData._sellAmt;\\n\\n        uint _slippageAmt = getSlippageAmt(_buyAddr, _sellAddr, _sellAmt, oneProtoData.unitAmt);\\n\\n        uint ethAmt;\\n        if (address(_sellAddr) == ethAddr) {\\n            ethAmt = _sellAmt;\\n        } else {\\n            _sellAddr.approve(address(oneProto), _sellAmt);\\n        }\\n\\n\\n        uint initalBal = getTokenBal(_buyAddr);\\n        oneProto.swap{value: ethAmt}(\\n            _sellAddr,\\n            _buyAddr,\\n            _sellAmt,\\n            _slippageAmt,\\n            oneProtoData.distribution,\\n            oneProtoData.disableDexes\\n        );\\n        uint finalBal = getTokenBal(_buyAddr);\\n\\n        buyAmt = sub(finalBal, initalBal);\\n\\n        require(_slippageAmt <= buyAmt, \\\"Too much slippage\\\");\\n    }\\n\\n    /**\\n     * @dev 1proto contract multi swap handler\\n     * @param oneProtoData - Struct with multiple swap data defined in interfaces.sol \\n     */\\n    function oneProtoSwapMulti(OneProtoMultiData memory oneProtoData) internal returns (uint buyAmt) {\\n        TokenInterface _sellAddr = oneProtoData.sellToken;\\n        TokenInterface _buyAddr = oneProtoData.buyToken;\\n        uint _sellAmt = oneProtoData._sellAmt;\\n        uint _slippageAmt = getSlippageAmt(_buyAddr, _sellAddr, _sellAmt, oneProtoData.unitAmt);\\n\\n        uint ethAmt;\\n        if (address(_sellAddr) == ethAddr) {\\n            ethAmt = _sellAmt;\\n        } else {\\n            _sellAddr.approve(address(oneProto), _sellAmt);\\n        }\\n\\n        uint initalBal = getTokenBal(_buyAddr);\\n        oneProto.swapMulti{value: ethAmt}(\\n            convertToTokenInterface(oneProtoData.tokens),\\n            _sellAmt,\\n            _slippageAmt,\\n            oneProtoData.distribution,\\n            oneProtoData.disableDexes\\n        );\\n        uint finalBal = getTokenBal(_buyAddr);\\n\\n        buyAmt = sub(finalBal, initalBal);\\n\\n        require(_slippageAmt <= buyAmt, \\\"Too much slippage\\\");\\n    }\\n}\\n\\nabstract contract OneProtoResolverHelpers is OneProtoResolver {\\n    /**\\n     * @dev Gets the swapping data offchian for swaps and calls swap.\\n     * @param oneProtoData - Struct with swap data defined in interfaces.sol \\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\\n     */\\n    function _sell(\\n        OneProtoData memory oneProtoData,\\n        uint getId,\\n        uint setId\\n    ) internal returns (OneProtoData memory) {\\n        uint _sellAmt = getUint(getId, oneProtoData._sellAmt);\\n\\n        oneProtoData._sellAmt = _sellAmt == uint(-1) ?\\n            getTokenBal(oneProtoData.sellToken) :\\n            _sellAmt;\\n\\n        oneProtoData._buyAmt = oneProtoSwap(oneProtoData);\\n\\n        setUint(setId, oneProtoData._buyAmt);\\n        \\n        return oneProtoData;\\n    }\\n\\n    /**\\n     * @dev Gets the swapping data offchian for swaps and calls swap.\\n     * @param oneProtoData - Struct with multiple swap data defined in interfaces.sol \\n     * @param getId Get token amount at this ID from `InstaMemory` Contract.\\n     * @param setId Set token amount at this ID in `InstaMemory` Contract.\\n     */\\n    function _sellMulti(\\n        OneProtoMultiData memory oneProtoData,\\n        uint getId,\\n        uint setId\\n    ) internal returns (OneProtoMultiData memory) {\\n        uint _sellAmt = getUint(getId, oneProtoData._sellAmt);\\n\\n        oneProtoData._sellAmt = _sellAmt == uint(-1) ?\\n            getTokenBal(oneProtoData.sellToken) :\\n            _sellAmt;\\n\\n        oneProtoData._buyAmt = oneProtoSwapMulti(oneProtoData);\\n        setUint(setId, oneProtoData._buyAmt);\\n\\n        // emitLogSellMulti(oneProtoData, getId, setId);\\n\\n        return oneProtoData;\\n    }\\n}\\n\\nabstract contract OneProto is OneProtoResolverHelpers {\\n    /**\\n     * @dev Sell ETH/ERC20_Token using 1Proto using off-chain calculation.\\n     * @notice Swap tokens from exchanges like Uniswap, Kyber etc, with calculation done off-chain.\\n     * @param buyAddr The address of the token to buy.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param sellAddr The address of the token to sell.(For ETH: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n     * @param sellAmt The amount of the token to sell.\\n     * @param unitAmt The amount of buyAmt/sellAmt with slippage.\\n     * @param distribution The distribution of swap across different DEXs.\\n     * @param disableDexes Disable a dex. (To disable none: 0)\\n     * @param getId ID to retrieve sellAmt.\\n     * @param setId ID stores the amount of token brought.\\n    */\\n    function sell(\\n        address buyAddr,\\n        address sellAddr,\\n        uint sellAmt,\\n        uint unitAmt,\\n        uint[] calldata distribution,\\n        uint disableDexes,\\n        uint getId,\\n        uint setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        OneProtoData memory oneProtoData = OneProtoData({\\n            buyToken: TokenInterface(buyAddr),\\n            sellToken: TokenInterface(sellAddr),\\n            _sellAmt: sellAmt,\\n            unitAmt: unitAmt,\\n            distribution: distribution,\\n            disableDexes: disableDexes,\\n            _buyAmt: 0\\n        });\\n\\n        oneProtoData = _sell(oneProtoData, getId, setId);\\n\\n        _eventName = \\\"LogSell(address,address,uint256,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(buyAddr, sellAddr, oneProtoData._buyAmt, oneProtoData._sellAmt, getId, setId);\\n    }\\n\\n    /**\\n     * @dev Sell Multiple tokens using 1proto using off-chain calculation.\\n     * @notice Swap multiple tokens from exchanges like Uniswap, Kyber etc, with calculation done off-chain.\\n     * @param tokens Array of tokens.\\n     * @param sellAmt The amount of the token to sell.\\n     * @param unitAmt The amount of buyAmt/sellAmt with slippage.\\n     * @param distribution The distribution of swap across different DEXs.\\n     * @param disableDexes Disable a dex. (To disable none: 0)\\n     * @param getId ID to retrieve sellAmt.\\n     * @param setId ID stores the amount of token brought.\\n    */\\n    function sellMulti(\\n        address[] calldata tokens,\\n        uint sellAmt,\\n        uint unitAmt,\\n        uint[] calldata distribution,\\n        uint[] calldata disableDexes,\\n        uint getId,\\n        uint setId\\n    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\\n        uint _length = tokens.length;\\n        OneProtoMultiData memory oneProtoData = OneProtoMultiData({\\n            tokens: tokens,\\n            buyToken: TokenInterface(address(tokens[_length - 1])),\\n            sellToken: TokenInterface(address(tokens[0])),\\n            unitAmt: unitAmt,\\n            distribution: distribution,\\n            disableDexes: disableDexes,\\n            _sellAmt: sellAmt,\\n            _buyAmt: 0\\n        });\\n\\n        oneProtoData = _sellMulti(oneProtoData, getId, setId);\\n\\n        _eventName = \\\"LogSellMulti(address[],address,address,uint256,uint256,uint256,uint256)\\\";\\n        _eventParam = abi.encode(\\n            tokens,\\n            address(oneProtoData.buyToken),\\n            address(oneProtoData.sellToken),\\n            oneProtoData._buyAmt,\\n            oneProtoData._sellAmt,\\n            getId,\\n            setId\\n        );\\n    }\\n}\\n\\ncontract ConnectV2OneProto is OneProto {\\n    string public name = \\\"1proto-v1\\\";\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/interfaces.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ninterface TokenInterface {\\n    function approve(address, uint256) external;\\n    function transfer(address, uint) external;\\n    function transferFrom(address, address, uint) external;\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n    function balanceOf(address) external view returns (uint);\\n    function decimals() external view returns (uint);\\n}\\n\\ninterface MemoryInterface {\\n    function getUint(uint id) external returns (uint num);\\n    function setUint(uint id, uint val) external;\\n}\\n\\ninterface InstaMapping {\\n    function cTokenMapping(address) external view returns (address);\\n    function gemJoinMapping(bytes32) external view returns (address);\\n}\\n\\ninterface AccountInterface {\\n    function enable(address) external;\\n    function disable(address) external;\\n    function isAuth(address) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/stores.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { MemoryInterface, InstaMapping } from \\\"./interfaces.sol\\\";\\n\\n\\nabstract contract Stores {\\n\\n  /**\\n   * @dev Return ethereum address\\n   */\\n  address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  /**\\n   * @dev Return Wrapped ETH address\\n   */\\n  address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  /**\\n   * @dev Return memory variable address\\n   */\\n  MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\\n\\n  /**\\n   * @dev Return InstaDApp Mapping Addresses\\n   */\\n  InstaMapping constant internal instaMapping = InstaMapping(0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88);\\n\\n  /**\\n   * @dev Get Uint value from InstaMemory Contract.\\n   */\\n  function getUint(uint getId, uint val) internal returns (uint returnVal) {\\n    returnVal = getId == 0 ? val : instaMemory.getUint(getId);\\n  }\\n\\n  /**\\n  * @dev Set Uint value in InstaMemory Contract.\\n  */\\n  function setUint(uint setId, uint val) virtual internal {\\n    if (setId != 0) instaMemory.setUint(setId, val);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/1proto/interface.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { TokenInterface } from \\\"../../common/interfaces.sol\\\";\\n\\ninterface OneProtoInterface {\\n    function swap(\\n        TokenInterface fromToken,\\n        TokenInterface destToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] calldata distribution,\\n        uint256 flags // See contants in IOneSplit.sol\\n    ) external payable returns(uint256);\\n\\n    function swapMulti(\\n        TokenInterface[] calldata tokens,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] calldata distribution,\\n        uint256[] calldata flags\\n    ) external payable returns(uint256 returnAmount);\\n\\n    function getExpectedReturn(\\n        TokenInterface fromToken,\\n        TokenInterface destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags // See constants in IOneSplit.sol\\n    )\\n    external\\n    view\\n    returns(\\n        uint256 returnAmount,\\n        uint256[] memory distribution\\n    );\\n}\\n\\ninterface OneProtoMappingInterface {\\n    function oneProtoAddress() external view returns(address);\\n}\\n\\nstruct OneProtoData {\\n    TokenInterface sellToken;\\n    TokenInterface buyToken;\\n    uint _sellAmt;\\n    uint _buyAmt;\\n    uint unitAmt;\\n    uint[] distribution;\\n    uint disableDexes;\\n}\\n\\nstruct OneProtoMultiData {\\n    address[] tokens;\\n    TokenInterface sellToken;\\n    TokenInterface buyToken;\\n    uint _sellAmt;\\n    uint _buyAmt;\\n    uint unitAmt;\\n    uint[] distribution;\\n    uint[] disableDexes;\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/connectors/1proto/helpers.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { TokenInterface } from \\\"../../common/interfaces.sol\\\";\\nimport { DSMath } from \\\"../../common/math.sol\\\";\\nimport { Basic } from \\\"../../common/basic.sol\\\";\\nimport { TokenInterface, OneProtoInterface } from \\\"./interface.sol\\\";\\n\\nabstract contract Helpers is DSMath, Basic {\\n    /**\\n     * @dev 1proto Address\\n     */\\n    OneProtoInterface constant internal oneProto = OneProtoInterface(0x50FDA034C0Ce7a8f7EFDAebDA7Aa7cA21CC1267e);\\n\\n    function getSlippageAmt(\\n        TokenInterface _buyAddr,\\n        TokenInterface _sellAddr,\\n        uint _sellAmt,\\n        uint unitAmt\\n    ) internal view returns(uint _slippageAmt) {\\n        (uint _buyDec, uint _sellDec) = getTokensDec(_buyAddr, _sellAddr);\\n        uint _sellAmt18 = convertTo18(_sellDec, _sellAmt);\\n        _slippageAmt = convert18ToDec(_buyDec, wmul(unitAmt, _sellAmt18));\\n    }\\n\\n    function convertToTokenInterface(address[] memory tokens) internal pure returns(TokenInterface[] memory) {\\n        TokenInterface[] memory _tokens = new TokenInterface[](tokens.length);\\n        for (uint i = 0; i < tokens.length; i++) {\\n            _tokens[i] = TokenInterface(tokens[i]);\\n        }\\n        return _tokens;\\n    }\\n}\"\r\n    },\r\n    \"contracts/mainnet/connectors/1proto/events.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ncontract Events {\\n    event LogSell(\\n        address indexed buyToken,\\n        address indexed sellToken,\\n        uint256 buyAmt,\\n        uint256 sellAmt,\\n        uint256 getId,\\n        uint256 setId\\n    );\\n\\n    event LogSellMulti(\\n        address[] tokens,\\n        address indexed buyToken,\\n        address indexed sellToken,\\n        uint256 buyAmt,\\n        uint256 sellAmt,\\n        uint256 getId,\\n        uint256 setId\\n    );\\n}\"\r\n    },\r\n    \"contracts/mainnet/common/math.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract DSMath {\\n  uint constant WAD = 10 ** 18;\\n  uint constant RAY = 10 ** 27;\\n\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(x, y);\\n  }\\n\\n  function sub(uint x, uint y) internal virtual pure returns (uint z) {\\n    z = SafeMath.sub(x, y);\\n  }\\n\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.mul(x, y);\\n  }\\n\\n  function div(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.div(x, y);\\n  }\\n\\n  function wmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\\n  }\\n\\n  function wdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\\n  }\\n\\n  function rdiv(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\\n  }\\n\\n  function rmul(uint x, uint y) internal pure returns (uint z) {\\n    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\\n  }\\n\\n  function toInt(uint x) internal pure returns (int y) {\\n    y = int(x);\\n    require(y >= 0, \\\"int-overflow\\\");\\n  }\\n\\n  function toRad(uint wad) internal pure returns (uint rad) {\\n    rad = mul(wad, 10 ** 27);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/mainnet/common/basic.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\nimport { TokenInterface } from \\\"./interfaces.sol\\\";\\nimport { Stores } from \\\"./stores.sol\\\";\\nimport { DSMath } from \\\"./math.sol\\\";\\n\\nabstract contract Basic is DSMath, Stores {\\n\\n    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = (_amt / 10 ** (18 - _dec));\\n    }\\n\\n    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\\n        amt = mul(_amt, 10 ** (18 - _dec));\\n    }\\n\\n    function getTokenBal(TokenInterface token) internal view returns(uint _amt) {\\n        _amt = address(token) == ethAddr ? address(this).balance : token.balanceOf(address(this));\\n    }\\n\\n    function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {\\n        buyDec = address(buyAddr) == ethAddr ?  18 : buyAddr.decimals();\\n        sellDec = address(sellAddr) == ethAddr ?  18 : sellAddr.decimals();\\n    }\\n\\n    function encodeEvent(string memory eventName, bytes memory eventParam) internal pure returns (bytes memory) {\\n        return abi.encode(eventName, eventParam);\\n    }\\n\\n    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\\n        _buy = buy == ethAddr ? TokenInterface(wethAddr) : TokenInterface(buy);\\n        _sell = sell == ethAddr ? TokenInterface(wethAddr) : TokenInterface(sell);\\n    }\\n\\n    function convertEthToWeth(bool isEth, TokenInterface token, uint amount) internal {\\n        if(isEth) token.deposit{value: amount}();\\n    }\\n\\n    function convertWethToEth(bool isEth, TokenInterface token, uint amount) internal {\\n       if(isEth) {\\n            token.approve(address(token), amount);\\n            token.withdraw(amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"LogSellMulti\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"disableDexes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"sellAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"distribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"disableDexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"getId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"setId\",\"type\":\"uint256\"}],\"name\":\"sellMulti\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_eventName\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_eventParam\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"ConnectV2OneProto","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}