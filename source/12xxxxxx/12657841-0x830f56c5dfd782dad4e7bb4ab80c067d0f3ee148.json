{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPP\\r\\npragma solidity ^0.5.5;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following \\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` into `address payable`. Note that this is\\r\\n     * simply a type cast: the actual underlying value is not changed.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function toPayable(address account) internal pure returns (address payable) {\\r\\n        return address(uint160(account));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-call-value\\r\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n}\\r\\n\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPP\\r\\npragma solidity ^0.5.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    constructor () internal { }\\r\\n    // solhint-disable-previous-line no-empty-blocks\\r\\n\\r\\n    function _msgSender() internal view returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"},\"ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPP\\r\\npragma solidity ^0.5.12;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC1155TokenReceiver.sol\\\";\\r\\nimport \\\"./IERC1155.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Implementation of Multi-Token Standard contract\\r\\n */\\r\\ncontract ERC1155 is IERC165 {\\r\\n  using SafeMath for uint256;\\r\\n  using Address for address;\\r\\n\\r\\n\\r\\n  /***********************************|\\r\\n  |        Variables and Events       |\\r\\n  |__________________________________*/\\r\\n\\r\\n  // onReceive function signatures\\r\\n  bytes4 constant internal ERC1155_RECEIVED_VALUE = 0xf23a6e61;\\r\\n  bytes4 constant internal ERC1155_BATCH_RECEIVED_VALUE = 0xbc197c81;\\r\\n\\r\\n  // Objects balances\\r\\n  mapping (address =\\u003e mapping(uint256 =\\u003e uint256)) internal balances;\\r\\n\\r\\n  // Operator Functions\\r\\n  mapping (address =\\u003e mapping(address =\\u003e bool)) internal operators;\\r\\n\\r\\n  // Events\\r\\n  event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);\\r\\n  event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);\\r\\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n  event URI(string _uri, uint256 indexed _id);\\r\\n\\r\\n\\r\\n  /***********************************|\\r\\n  |     Public Transfer Functions     |\\r\\n  |__________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\r\\n   * @param _from    Source address\\r\\n   * @param _to      Target address\\r\\n   * @param _id      ID of the token type\\r\\n   * @param _amount  Transfered amount\\r\\n   * @param _data    Additional data with no specified format, sent in call to `_to`\\r\\n   */\\r\\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\\r\\n    public\\r\\n  {\\r\\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \\\"ERC1155#safeTransferFrom: INVALID_OPERATOR\\\");\\r\\n    require(_to != address(0),\\\"ERC1155#safeTransferFrom: INVALID_RECIPIENT\\\");\\r\\n    // require(_amount \\u003e= balances[_from][_id]) is not necessary since checked with safemath operations\\r\\n\\r\\n    _safeTransferFrom(_from, _to, _id, _amount);\\r\\n    _callonERC1155Received(_from, _to, _id, _amount, _data);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\r\\n   * @param _from     Source addresses\\r\\n   * @param _to       Target addresses\\r\\n   * @param _ids      IDs of each token type\\r\\n   * @param _amounts  Transfer amounts per token type\\r\\n   * @param _data     Additional data with no specified format, sent in call to `_to`\\r\\n   */\\r\\n  function safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\\r\\n    public\\r\\n  {\\r\\n    // Requirements\\r\\n    require((msg.sender == _from) || isApprovedForAll(_from, msg.sender), \\\"ERC1155#safeBatchTransferFrom: INVALID_OPERATOR\\\");\\r\\n    require(_to != address(0), \\\"ERC1155#safeBatchTransferFrom: INVALID_RECIPIENT\\\");\\r\\n\\r\\n    _safeBatchTransferFrom(_from, _to, _ids, _amounts);\\r\\n    _callonERC1155BatchReceived(_from, _to, _ids, _amounts, _data);\\r\\n  }\\r\\n\\r\\n\\r\\n  /***********************************|\\r\\n  |    Internal Transfer Functions    |\\r\\n  |__________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Transfers amount amount of an _id from the _from address to the _to address specified\\r\\n   * @param _from    Source address\\r\\n   * @param _to      Target address\\r\\n   * @param _id      ID of the token type\\r\\n   * @param _amount  Transfered amount\\r\\n   */\\r\\n  function _safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount)\\r\\n    internal\\r\\n  {\\r\\n    // Update balances\\r\\n    balances[_from][_id] = balances[_from][_id].sub(_amount); // Subtract amount\\r\\n    balances[_to][_id] = balances[_to][_id].add(_amount);     // Add amount\\r\\n\\r\\n    // Emit event\\r\\n    emit TransferSingle(msg.sender, _from, _to, _id, _amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155Received(...)\\r\\n   */\\r\\n  function _callonERC1155Received(address _from, address _to, uint256 _id, uint256 _amount, bytes memory _data)\\r\\n    internal\\r\\n  {\\r\\n    // Check if recipient is contract\\r\\n    if (_to.isContract()) {\\r\\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155Received(msg.sender, _from, _id, _amount, _data);\\r\\n      require(retval == ERC1155_RECEIVED_VALUE, \\\"ERC1155#_callonERC1155Received: INVALID_ON_RECEIVE_MESSAGE\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\r\\n   * @param _from     Source addresses\\r\\n   * @param _to       Target addresses\\r\\n   * @param _ids      IDs of each token type\\r\\n   * @param _amounts  Transfer amounts per token type\\r\\n   */\\r\\n  function _safeBatchTransferFrom(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts)\\r\\n    internal\\r\\n  {\\r\\n    require(_ids.length == _amounts.length, \\\"ERC1155#_safeBatchTransferFrom: INVALID_ARRAYS_LENGTH\\\");\\r\\n\\r\\n    // Number of transfer to execute\\r\\n    uint256 nTransfer = _ids.length;\\r\\n\\r\\n    // Executing all transfers\\r\\n    for (uint256 i = 0; i \\u003c nTransfer; i++) {\\r\\n      // Update storage balance of previous bin\\r\\n      balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\\r\\n      balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\\r\\n    }\\r\\n\\r\\n    // Emit event\\r\\n    emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Verifies if receiver is contract and if so, calls (_to).onERC1155BatchReceived(...)\\r\\n   */\\r\\n  function _callonERC1155BatchReceived(address _from, address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\\r\\n    internal\\r\\n  {\\r\\n    // Pass data if recipient is contract\\r\\n    if (_to.isContract()) {\\r\\n      bytes4 retval = IERC1155TokenReceiver(_to).onERC1155BatchReceived(msg.sender, _from, _ids, _amounts, _data);\\r\\n      require(retval == ERC1155_BATCH_RECEIVED_VALUE, \\\"ERC1155#_callonERC1155BatchReceived: INVALID_ON_RECEIVE_MESSAGE\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n\\r\\n  /***********************************|\\r\\n  |         Operator Functions        |\\r\\n  |__________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller\\u0027s tokens\\r\\n   * @param _operator  Address to add to the set of authorized operators\\r\\n   * @param _approved  True if the operator is approved, false to revoke approval\\r\\n   */\\r\\n  function setApprovalForAll(address _operator, bool _approved)\\r\\n    external\\r\\n  {\\r\\n    // Update operator status\\r\\n    operators[msg.sender][_operator] = _approved;\\r\\n    emit ApprovalForAll(msg.sender, _operator, _approved);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Queries the approval status of an operator for a given owner\\r\\n   * @param _owner     The owner of the Tokens\\r\\n   * @param _operator  Address of authorized operator\\r\\n   * @return True if the operator is approved, false if not\\r\\n   */\\r\\n  function isApprovedForAll(address _owner, address _operator)\\r\\n    public view returns (bool isOperator)\\r\\n  {\\r\\n    return operators[_owner][_operator];\\r\\n  }\\r\\n\\r\\n\\r\\n  /***********************************|\\r\\n  |         Balance Functions         |\\r\\n  |__________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Get the balance of an account\\u0027s Tokens\\r\\n   * @param _owner  The address of the token holder\\r\\n   * @param _id     ID of the Token\\r\\n   * @return The _owner\\u0027s balance of the Token type requested\\r\\n   */\\r\\n  function balanceOf(address _owner, uint256 _id)\\r\\n    public view returns (uint256)\\r\\n  {\\r\\n    return balances[_owner][_id];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Get the balance of multiple account/token pairs\\r\\n   * @param _owners The addresses of the token holders\\r\\n   * @param _ids    ID of the Tokens\\r\\n   * @return        The _owner\\u0027s balance of the Token types requested (i.e. balance for each (owner, id) pair)\\r\\n   */\\r\\n  function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)\\r\\n    public view returns (uint256[] memory)\\r\\n  {\\r\\n    require(_owners.length == _ids.length, \\\"ERC1155#balanceOfBatch: INVALID_ARRAY_LENGTH\\\");\\r\\n\\r\\n    // Variables\\r\\n    uint256[] memory batchBalances = new uint256[](_owners.length);\\r\\n\\r\\n    // Iterate over each owner and token ID\\r\\n    for (uint256 i = 0; i \\u003c _owners.length; i++) {\\r\\n      batchBalances[i] = balances[_owners[i]][_ids[i]];\\r\\n    }\\r\\n\\r\\n    return batchBalances;\\r\\n  }\\r\\n\\r\\n\\r\\n  /***********************************|\\r\\n  |          ERC165 Functions         |\\r\\n  |__________________________________*/\\r\\n\\r\\n  /**\\r\\n   * INTERFACE_SIGNATURE_ERC165 = bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\r\\n   */\\r\\n  bytes4 constant private INTERFACE_SIGNATURE_ERC165 = 0x01ffc9a7;\\r\\n\\r\\n  /**\\r\\n   * INTERFACE_SIGNATURE_ERC1155 =\\r\\n   * bytes4(keccak256(\\\"safeTransferFrom(address,address,uint256,uint256,bytes)\\\")) ^\\r\\n   * bytes4(keccak256(\\\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\\\")) ^\\r\\n   * bytes4(keccak256(\\\"balanceOf(address,uint256)\\\")) ^\\r\\n   * bytes4(keccak256(\\\"balanceOfBatch(address[],uint256[])\\\")) ^\\r\\n   * bytes4(keccak256(\\\"setApprovalForAll(address,bool)\\\")) ^\\r\\n   * bytes4(keccak256(\\\"isApprovedForAll(address,address)\\\"));\\r\\n   */\\r\\n  bytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\\r\\n\\r\\n  /**\\r\\n   * @notice Query if a contract implements an interface\\r\\n   * @param _interfaceID  The interface identifier, as specified in ERC-165\\r\\n   * @return `true` if the contract implements `_interfaceID` and\\r\\n   */\\r\\n  function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\\r\\n    if (_interfaceID == INTERFACE_SIGNATURE_ERC165 ||\\r\\n        _interfaceID == INTERFACE_SIGNATURE_ERC1155) {\\r\\n      return true;\\r\\n    }\\r\\n    return false;\\r\\n  }\\r\\n\\r\\n}\\r\\n\"},\"ERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPP\\r\\npragma solidity ^0.5.11;\\r\\n\\r\\nimport \\\"./IERC1155.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Contract that handles metadata related methods.\\r\\n * @dev Methods assume a deterministic generation of URI based on token IDs.\\r\\n *      Methods also assume that URI uses hex representation of token IDs.\\r\\n */\\r\\ncontract ERC1155Metadata {\\r\\n\\r\\n  // URI\\u0027s default URI prefix\\r\\n  string internal baseMetadataURI;\\r\\n  event URI(string _uri, uint256 indexed _id);\\r\\n\\r\\n\\r\\n  /***********************************|\\r\\n  |     Metadata Public Function s    |\\r\\n  |__________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice A distinct Uniform Resource Identifier (URI) for a given token.\\r\\n   * @dev URIs are defined in RFC 3986.\\r\\n   *      URIs are assumed to be deterministically generated based on token ID\\r\\n   *      Token IDs are assumed to be represented in their hex format in URIs\\r\\n   * @return URI string\\r\\n   */\\r\\n  function uri(uint256 _id) public view returns (string memory) {\\r\\n    return string(abi.encodePacked(baseMetadataURI, _uint2str(_id), \\\".json\\\"));\\r\\n  }\\r\\n\\r\\n\\r\\n  /***********************************|\\r\\n  |    Metadata Internal Functions    |\\r\\n  |__________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Will emit default URI log event for corresponding token _id\\r\\n   * @param _tokenIDs Array of IDs of tokens to log default URI\\r\\n   */\\r\\n  function _logURIs(uint256[] memory _tokenIDs) internal {\\r\\n    string memory baseURL = baseMetadataURI;\\r\\n    string memory tokenURI;\\r\\n\\r\\n    for (uint256 i = 0; i \\u003c _tokenIDs.length; i++) {\\r\\n      tokenURI = string(abi.encodePacked(baseURL, _uint2str(_tokenIDs[i]), \\\".json\\\"));\\r\\n      emit URI(tokenURI, _tokenIDs[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Will emit a specific URI log event for corresponding token\\r\\n   * @param _tokenIDs IDs of the token corresponding to the _uris logged\\r\\n   * @param _URIs    The URIs of the specified _tokenIDs\\r\\n   */\\r\\n  function _logURIs(uint256[] memory _tokenIDs, string[] memory _URIs) internal {\\r\\n    require(_tokenIDs.length == _URIs.length, \\\"ERC1155Metadata#_logURIs: INVALID_ARRAYS_LENGTH\\\");\\r\\n    for (uint256 i = 0; i \\u003c _tokenIDs.length; i++) {\\r\\n      emit URI(_URIs[i], _tokenIDs[i]);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Will update the base URL of token\\u0027s URI\\r\\n   * @param _newBaseMetadataURI New base URL of token\\u0027s URI\\r\\n   */\\r\\n  function _setBaseMetadataURI(string memory _newBaseMetadataURI) internal {\\r\\n    baseMetadataURI = _newBaseMetadataURI;\\r\\n  }\\r\\n\\r\\n\\r\\n  /***********************************|\\r\\n  |    Utility Internal Functions     |\\r\\n  |__________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Convert uint256 to string\\r\\n   * @param _i Unsigned integer to convert to string\\r\\n   */\\r\\n  function _uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\r\\n    if (_i == 0) {\\r\\n      return \\\"0\\\";\\r\\n    }\\r\\n\\r\\n    uint256 j = _i;\\r\\n    uint256 ii = _i;\\r\\n    uint256 len;\\r\\n\\r\\n    // Get number of bytes\\r\\n    while (j != 0) {\\r\\n      len++;\\r\\n      j /= 10;\\r\\n    }\\r\\n\\r\\n    bytes memory bstr = new bytes(len);\\r\\n    uint256 k = len - 1;\\r\\n\\r\\n    // Get each individual ASCII\\r\\n    while (ii != 0) {\\r\\n      bstr[k--] = byte(uint8(48 + ii % 10));\\r\\n      ii /= 10;\\r\\n    }\\r\\n\\r\\n    // Convert to string\\r\\n    return string(bstr);\\r\\n  }\\r\\n\\r\\n}\"},\"ERC1155MintBurn.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPP\\r\\npragma solidity ^0.5.12;\\r\\n\\r\\nimport \\\"./ERC1155.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Multi-Fungible Tokens with minting and burning methods. These methods assume\\r\\n *      a parent contract to be executed as they are `internal` functions\\r\\n */\\r\\ncontract ERC1155MintBurn is ERC1155 {\\r\\n\\r\\n\\r\\n  /****************************************|\\r\\n  |            Minting Functions           |\\r\\n  |_______________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Mint _amount of tokens of a given id\\r\\n   * @param _to      The address to mint tokens to\\r\\n   * @param _id      Token id to mint\\r\\n   * @param _amount  The amount to be minted\\r\\n   * @param _data    Data to pass if receiver is contract\\r\\n   */\\r\\n  function _mint(address _to, uint256 _id, uint256 _amount, bytes memory _data)\\r\\n    internal\\r\\n  {\\r\\n    // Add _amount\\r\\n    balances[_to][_id] = balances[_to][_id].add(_amount);\\r\\n\\r\\n    // Emit event\\r\\n    emit TransferSingle(msg.sender, address(0x0), _to, _id, _amount);\\r\\n\\r\\n    // Calling onReceive method if recipient is contract\\r\\n    _callonERC1155Received(address(0x0), _to, _id, _amount, _data);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Mint tokens for each ids in _ids\\r\\n   * @param _to       The address to mint tokens to\\r\\n   * @param _ids      Array of ids to mint\\r\\n   * @param _amounts  Array of amount of tokens to mint per id\\r\\n   * @param _data    Data to pass if receiver is contract\\r\\n   */\\r\\n  function _batchMint(address _to, uint256[] memory _ids, uint256[] memory _amounts, bytes memory _data)\\r\\n    internal\\r\\n  {\\r\\n    require(_ids.length == _amounts.length, \\\"ERC1155MintBurn#batchMint: INVALID_ARRAYS_LENGTH\\\");\\r\\n\\r\\n    // Number of mints to execute\\r\\n    uint256 nMint = _ids.length;\\r\\n\\r\\n     // Executing all minting\\r\\n    for (uint256 i = 0; i \\u003c nMint; i++) {\\r\\n      // Update storage balance\\r\\n      balances[_to][_ids[i]] = balances[_to][_ids[i]].add(_amounts[i]);\\r\\n    }\\r\\n\\r\\n    // Emit batch mint event\\r\\n    emit TransferBatch(msg.sender, address(0x0), _to, _ids, _amounts);\\r\\n\\r\\n    // Calling onReceive method if recipient is contract\\r\\n    _callonERC1155BatchReceived(address(0x0), _to, _ids, _amounts, _data);\\r\\n  }\\r\\n\\r\\n\\r\\n  /****************************************|\\r\\n  |            Burning Functions           |\\r\\n  |_______________________________________*/\\r\\n\\r\\n  /**\\r\\n   * @notice Burn _amount of tokens of a given token id\\r\\n   * @param _from    The address to burn tokens from\\r\\n   * @param _id      Token id to burn\\r\\n   * @param _amount  The amount to be burned\\r\\n   */\\r\\n  function _burn(address _from, uint256 _id, uint256 _amount)\\r\\n    internal\\r\\n  {\\r\\n    //Substract _amount\\r\\n    balances[_from][_id] = balances[_from][_id].sub(_amount);\\r\\n\\r\\n    // Emit event\\r\\n    emit TransferSingle(msg.sender, _from, address(0x0), _id, _amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Burn tokens of given token id for each (_ids[i], _amounts[i]) pair\\r\\n   * @param _from     The address to burn tokens from\\r\\n   * @param _ids      Array of token ids to burn\\r\\n   * @param _amounts  Array of the amount to be burned\\r\\n   */\\r\\n  function _batchBurn(address _from, uint256[] memory _ids, uint256[] memory _amounts)\\r\\n    internal\\r\\n  {\\r\\n    require(_ids.length == _amounts.length, \\\"ERC1155MintBurn#batchBurn: INVALID_ARRAYS_LENGTH\\\");\\r\\n\\r\\n    // Number of mints to execute\\r\\n    uint256 nBurn = _ids.length;\\r\\n\\r\\n     // Executing all minting\\r\\n    for (uint256 i = 0; i \\u003c nBurn; i++) {\\r\\n      // Update storage balance\\r\\n      balances[_from][_ids[i]] = balances[_from][_ids[i]].sub(_amounts[i]);\\r\\n    }\\r\\n\\r\\n    // Emit batch mint event\\r\\n    emit TransferBatch(msg.sender, _from, address(0x0), _ids, _amounts);\\r\\n  }\\r\\n\\r\\n}\\r\\n\\r\\n\"},\"ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPP\\r\\npragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./IERC1155TokenReceiver.sol\\\";\\r\\n\\r\\ncontract ERC1155TokenReceiver is IERC1155TokenReceiver\\r\\n{\\r\\n  function onERC1155Received(address, address, uint256, uint256, bytes calldata) external returns(bytes4)\\r\\n  {\\r\\n    return this.onERC1155Received.selector;\\r\\n  }\\r\\n\\r\\n  function onERC1155BatchReceived(address, address, uint256[] calldata, uint256[] calldata, bytes calldata) external returns(bytes4)\\r\\n  {\\r\\n    return this.onERC1155BatchReceived.selector;\\r\\n  }\\r\\n}\"},\"ERC1155Tradable.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPP\\r\\npragma solidity ^0.5.12;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\u0027./ERC1155.sol\\u0027;\\r\\nimport \\u0027./ERC1155Metadata.sol\\u0027;\\r\\nimport \\u0027./ERC1155MintBurn.sol\\u0027;\\r\\nimport \\\"./Strings.sol\\\";\\r\\n\\r\\ncontract OwnableDelegateProxy { }\\r\\n\\r\\ncontract ProxyRegistry {\\r\\n  mapping(address =\\u003e OwnableDelegateProxy) public proxies;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ERC1155Tradable\\r\\n * ERC1155Tradable - ERC1155 contract that whitelists an operator address, has create and mint functionality, and supports useful standards from OpenZeppelin,\\r\\n  like _exists(), name(), symbol(), and totalSupply()\\r\\n */\\r\\ncontract ERC1155Tradable is ERC1155, ERC1155MintBurn, ERC1155Metadata, Ownable {\\r\\n  using Strings for string;\\r\\n\\r\\n  address proxyRegistryAddress;\\r\\n  uint256 private _currentTokenID = 0;\\r\\n  mapping (uint256 =\\u003e address) public creators;\\r\\n  mapping (uint256 =\\u003e uint256) public tokenSupply;\\r\\n  // Contract name\\r\\n  string public name;\\r\\n  // Contract symbol\\r\\n  string public symbol;\\r\\n\\r\\n  /**\\r\\n   * @dev Require msg.sender to be the creator of the token id\\r\\n   */\\r\\n  modifier creatorOnly(uint256 _id) {\\r\\n    require(creators[_id] == msg.sender, \\\"ERC1155Tradable#creatorOnly: ONLY_CREATOR_ALLOWED\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Require msg.sender to own more than 0 of the token id\\r\\n   */\\r\\n  modifier ownersOnly(uint256 _id) {\\r\\n    require(balances[msg.sender][_id] \\u003e 0, \\\"ERC1155Tradable#ownersOnly: ONLY_OWNERS_ALLOWED\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(\\r\\n    string memory _name,\\r\\n    string memory _symbol,\\r\\n    address _proxyRegistryAddress\\r\\n  ) public {\\r\\n    name = _name;\\r\\n    symbol = _symbol;\\r\\n    proxyRegistryAddress = _proxyRegistryAddress;\\r\\n  }\\r\\n\\r\\n  function uri(\\r\\n    uint256 _id\\r\\n  ) public view returns (string memory) {\\r\\n    require(_exists(_id), \\\"ERC721Tradable#uri: NONEXISTENT_TOKEN\\\");\\r\\n    return Strings.strConcat(\\r\\n      baseMetadataURI,\\r\\n      Strings.uint2str(_id)\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Returns the total quantity for a token ID\\r\\n    * @param _id uint256 ID of the token to query\\r\\n    * @return amount of token in existence\\r\\n    */\\r\\n  function totalSupply(\\r\\n    uint256 _id\\r\\n  ) public view returns (uint256) {\\r\\n    return tokenSupply[_id];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Will update the base URL of token\\u0027s URI\\r\\n   * @param _newBaseMetadataURI New base URL of token\\u0027s URI\\r\\n   */\\r\\n  function setBaseMetadataURI(\\r\\n    string memory _newBaseMetadataURI\\r\\n  ) public onlyOwner {\\r\\n    _setBaseMetadataURI(_newBaseMetadataURI);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Creates a new token type and assigns _initialSupply to an address\\r\\n    * NOTE: remove onlyOwner if you want third parties to create new tokens on your contract (which may change your IDs)\\r\\n    * @param _initialOwner address of the first owner of the token\\r\\n    * @param _initialSupply amount to supply the first owner\\r\\n    * @param _uri Optional URI for this token type\\r\\n    * @param _data Data to pass if receiver is contract\\r\\n    * @return The newly created token ID\\r\\n    */\\r\\n  function create(\\r\\n    address _initialOwner,\\r\\n    uint256 _initialSupply,\\r\\n    string calldata _uri,\\r\\n    bytes calldata _data\\r\\n  ) external onlyOwner returns (uint256) {\\r\\n\\r\\n    uint256 _id = _getNextTokenID();\\r\\n    _incrementTokenTypeId();\\r\\n    creators[_id] = msg.sender;\\r\\n\\r\\n    if (bytes(_uri).length \\u003e 0) {\\r\\n      emit URI(_uri, _id);\\r\\n    }\\r\\n\\r\\n    _mint(_initialOwner, _id, _initialSupply, _data);\\r\\n    tokenSupply[_id] = _initialSupply;\\r\\n    return _id;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Mints some amount of tokens to an address\\r\\n    * @param _to          Address of the future owner of the token\\r\\n    * @param _id          Token ID to mint\\r\\n    * @param _quantity    Amount of tokens to mint\\r\\n    * @param _data        Data to pass if receiver is contract\\r\\n    */\\r\\n  function mint(\\r\\n    address _to,\\r\\n    uint256 _id,\\r\\n    uint256 _quantity,\\r\\n    bytes memory _data\\r\\n  ) public creatorOnly(_id) {\\r\\n    _mint(_to, _id, _quantity, _data);\\r\\n    tokenSupply[_id] = tokenSupply[_id].add(_quantity);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Mint tokens for each id in _ids\\r\\n    * @param _to          The address to mint tokens to\\r\\n    * @param _ids         Array of ids to mint\\r\\n    * @param _quantities  Array of amounts of tokens to mint per id\\r\\n    * @param _data        Data to pass if receiver is contract\\r\\n    */\\r\\n  function batchMint(\\r\\n    address _to,\\r\\n    uint256[] memory _ids,\\r\\n    uint256[] memory _quantities,\\r\\n    bytes memory _data\\r\\n  ) public {\\r\\n    for (uint256 i = 0; i \\u003c _ids.length; i++) {\\r\\n      uint256 _id = _ids[i];\\r\\n      require(creators[_id] == msg.sender, \\\"ERC1155Tradable#batchMint: ONLY_CREATOR_ALLOWED\\\");\\r\\n      uint256 quantity = _quantities[i];\\r\\n      tokenSupply[_id] = tokenSupply[_id].add(quantity);\\r\\n    }\\r\\n    _batchMint(_to, _ids, _quantities, _data);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Change the creator address for given tokens\\r\\n    * @param _to   Address of the new creator\\r\\n    * @param _ids  Array of Token IDs to change creator\\r\\n    */\\r\\n  function setCreator(\\r\\n    address _to,\\r\\n    uint256[] memory _ids\\r\\n  ) public {\\r\\n    require(_to != address(0), \\\"ERC1155Tradable#setCreator: INVALID_ADDRESS.\\\");\\r\\n    for (uint256 i = 0; i \\u003c _ids.length; i++) {\\r\\n      uint256 id = _ids[i];\\r\\n      _setCreator(_to, id);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Override isApprovedForAll to whitelist user\\u0027s OpenSea proxy accounts to enable gas-free listings.\\r\\n   */\\r\\n  function isApprovedForAll(\\r\\n    address _owner,\\r\\n    address _operator\\r\\n  ) public view returns (bool isOperator) {\\r\\n    // Whitelist OpenSea proxy contract for easy trading.\\r\\n    ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\r\\n    if (address(proxyRegistry.proxies(_owner)) == _operator) {\\r\\n      return true;\\r\\n    }\\r\\n\\r\\n    return ERC1155.isApprovedForAll(_owner, _operator);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Change the creator address for given token\\r\\n    * @param _to   Address of the new creator\\r\\n    * @param _id  Token IDs to change creator of\\r\\n    */\\r\\n  function _setCreator(address _to, uint256 _id) internal creatorOnly(_id)\\r\\n  {\\r\\n      creators[_id] = _to;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev Returns whether the specified token exists by checking to see if it has a creator\\r\\n    * @param _id uint256 ID of the token to query the existence of\\r\\n    * @return bool whether the token exists\\r\\n    */\\r\\n  function _exists(\\r\\n    uint256 _id\\r\\n  ) internal view returns (bool) {\\r\\n    return creators[_id] != address(0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev calculates the next token ID based on value of _currentTokenID\\r\\n    * @return uint256 for the next token ID\\r\\n    */\\r\\n  function _getNextTokenID() private view returns (uint256) {\\r\\n    return _currentTokenID.add(1);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev increments the value of _currentTokenID\\r\\n    */\\r\\n  function _incrementTokenTypeId() private  {\\r\\n    _currentTokenID++;\\r\\n  }\\r\\n}\\r\\n\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPP\\r\\npragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20Mintable}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n    \\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\r\\n     * a default value of 18.\\r\\n     *\\r\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\r\\n     *\\r\\n     * All three of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor (string memory name, string memory symbol) public {\\r\\n        _name = name;\\r\\n        _symbol = symbol;\\r\\n        _decimals = 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\r\\n     * called.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20};\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * This is internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\r\\n     * from the caller\\u0027s allowance.\\r\\n     *\\r\\n     * See {_burn} and {_approve}.\\r\\n     */\\r\\n    function _burnFrom(address account, uint256 amount) internal {\\r\\n        _burn(account, amount);\\r\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\r\\n    }\\r\\n}\\r\\n\"},\"IERC1155.sol\":{\"content\":\"pragma solidity ^0.5.12;\\r\\n\\r\\n\\r\\ninterface IERC1155 {\\r\\n  // Events\\r\\n\\r\\n  /**\\r\\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\r\\n   *   Operator MUST be msg.sender\\r\\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\r\\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\r\\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\r\\n   *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\r\\n   */\\r\\n  event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _amount);\\r\\n\\r\\n  /**\\r\\n   * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\\r\\n   *   Operator MUST be msg.sender\\r\\n   *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\\r\\n   *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\\r\\n   *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \\\"circulating supply\\\" for a given token ID\\r\\n   *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\\r\\n   */\\r\\n  event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _amounts);\\r\\n\\r\\n  /**\\r\\n   * @dev MUST emit when an approval is updated\\r\\n   */\\r\\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n\\r\\n  /**\\r\\n   * @dev MUST emit when the URI is updated for a token ID\\r\\n   *   URIs are defined in RFC 3986\\r\\n   *   The URI MUST point a JSON file that conforms to the \\\"ERC-1155 Metadata JSON Schema\\\"\\r\\n   */\\r\\n  event URI(string _amount, uint256 indexed _id);\\r\\n\\r\\n  /**\\r\\n   * @notice Transfers amount of an _id from the _from address to the _to address specified\\r\\n   * @dev MUST emit TransferSingle event on success\\r\\n   * Caller must be approved to manage the _from account\\u0027s tokens (see isApprovedForAll)\\r\\n   * MUST throw if `_to` is the zero address\\r\\n   * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\\r\\n   * MUST throw on any other error\\r\\n   * When transfer is complete, this function MUST check if `_to` is a smart contract (code size \\u003e 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\r\\n   * @param _from    Source address\\r\\n   * @param _to      Target address\\r\\n   * @param _id      ID of the token type\\r\\n   * @param _amount  Transfered amount\\r\\n   * @param _data    Additional data with no specified format, sent in call to `_to`\\r\\n   */\\r\\n  function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\\r\\n   * @dev MUST emit TransferBatch event on success\\r\\n   * Caller must be approved to manage the _from account\\u0027s tokens (see isApprovedForAll)\\r\\n   * MUST throw if `_to` is the zero address\\r\\n   * MUST throw if length of `_ids` is not the same as length of `_amounts`\\r\\n   * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\\r\\n   * MUST throw on any other error\\r\\n   * When transfer is complete, this function MUST check if `_to` is a smart contract (code size \\u003e 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\r\\n   * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\\r\\n   * @param _from     Source addresses\\r\\n   * @param _to       Target addresses\\r\\n   * @param _ids      IDs of each token type\\r\\n   * @param _amounts  Transfer amounts per token type\\r\\n   * @param _data     Additional data with no specified format, sent in call to `_to`\\r\\n  */\\r\\n  function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\\r\\n  \\r\\n  function burn(address _owner, uint256 _id, uint256 _value) external;\\r\\n  \\r\\n  /**\\r\\n   * @notice Get the balance of an account\\u0027s Tokens\\r\\n   * @param _owner  The address of the token holder\\r\\n   * @param _id     ID of the Token\\r\\n   * @return        The _owner\\u0027s balance of the Token type requested\\r\\n   */\\r\\n  function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @notice Get the balance of multiple account/token pairs\\r\\n   * @param _owners The addresses of the token holders\\r\\n   * @param _ids    ID of the Tokens\\r\\n   * @return        The _owner\\u0027s balance of the Token types requested (i.e. balance for each (owner, id) pair)\\r\\n   */\\r\\n  function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\\r\\n\\r\\n  /**\\r\\n   * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of caller\\u0027s tokens\\r\\n   * @dev MUST emit the ApprovalForAll event on success\\r\\n   * @param _operator  Address to add to the set of authorized operators\\r\\n   * @param _approved  True if the operator is approved, false to revoke approval\\r\\n   */\\r\\n  function setApprovalForAll(address _operator, bool _approved) external;\\r\\n\\r\\n  /**\\r\\n   * @notice Queries the approval status of an operator for a given owner\\r\\n   * @param _owner     The owner of the Tokens\\r\\n   * @param _operator  Address of authorized operator\\r\\n   * @return           True if the operator is approved, false if not\\r\\n   */\\r\\n  function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\\r\\n\\r\\n}\\r\\n\"},\"IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPP\\r\\npragma solidity ^0.5.12;\\r\\n\\r\\n/**\\r\\n * @dev ERC-1155 interface for accepting safe transfers.\\r\\n */\\r\\ninterface IERC1155TokenReceiver {\\r\\n\\r\\n  /**\\r\\n   * @notice Handle the receipt of a single ERC1155 token type\\r\\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\\r\\n   * This function MAY throw to revert and reject the transfer\\r\\n   * Return of other amount than the magic value MUST result in the transaction being reverted\\r\\n   * Note: The token contract address is always the message sender\\r\\n   * @param _operator  The address which called the `safeTransferFrom` function\\r\\n   * @param _from      The address which previously owned the token\\r\\n   * @param _id        The id of the token being transferred\\r\\n   * @param _amount    The amount of tokens being transferred\\r\\n   * @param _data      Additional data with no specified format\\r\\n   * @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\r\\n   */\\r\\n  function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4);\\r\\n\\r\\n  /**\\r\\n   * @notice Handle the receipt of multiple ERC1155 token types\\r\\n   * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\\r\\n   * This function MAY throw to revert and reject the transfer\\r\\n   * Return of other amount than the magic value WILL result in the transaction being reverted\\r\\n   * Note: The token contract address is always the message sender\\r\\n   * @param _operator  The address which called the `safeBatchTransferFrom` function\\r\\n   * @param _from      The address which previously owned the token\\r\\n   * @param _ids       An array containing ids of each token being transferred\\r\\n   * @param _amounts   An array containing amounts of each token being transferred\\r\\n   * @param _data      Additional data with no specified format\\r\\n   * @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\r\\n   */\\r\\n  function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4);\\r\\n}\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPP\\r\\npragma solidity ^0.5.12;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title ERC165\\r\\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\\r\\n */\\r\\ninterface IERC165 {\\r\\n\\r\\n    /**\\r\\n     * @notice Query if a contract implements an interface\\r\\n     * @dev Interface identification is specified in ERC-165. This function\\r\\n     * uses less than 30,000 gas\\r\\n     * @param _interfaceId The interface identifier, as specified in ERC-165\\r\\n     */\\r\\n    function supportsInterface(bytes4 _interfaceId)\\r\\n    external\\r\\n    view\\r\\n    returns (bool);\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPP\\r\\npragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see {ERC20Detailed}.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"},\"NFTClaimStation.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPP\\r\\npragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./IERC1155.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./ERC1155TokenReceiver.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\n\\r\\ncontract NFTClaimStation is ERC1155TokenReceiver, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    IERC1155 public nftToken;\\r\\n\\r\\n    uint256 public artId;\\r\\n    uint256 public recoverUnclaimedNftTime;\\r\\n\\r\\n    mapping (address =\\u003e bool) public eligibleUsers;\\r\\n\\r\\n    event ClaimedNFT(address ClaimedBy);\\r\\n\\r\\n    constructor(uint256 _artId, IERC1155 _nftToken) public {\\r\\n        artId = _artId;\\r\\n        nftToken = _nftToken;        \\r\\n    }\\r\\n\\r\\n    function setRecoverUnclaimedNftTime() public onlyOwner {  \\r\\n        recoverUnclaimedNftTime = block.timestamp + 696969; //you will have 8 days to claim, unclaimed NFTs will be shattered into a million pieces\\r\\n    }\\r\\n\\r\\n    function setClaimAddresses(address[] memory addresses) public onlyOwner {  \\r\\n        for (uint i = 0; i \\u003c addresses.length; i++) {\\r\\n            eligibleUsers[addresses[i]] = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimNFT() public {\\r\\n        address claimer = msg.sender;\\r\\n        require(eligibleUsers[claimer], \\\"Not eligible or your address has not been added yet\\\" );\\r\\n        require(nftToken.balanceOf(address(this), artId) \\u003e 0, \\\"NFTs not yet added\\\");\\r\\n        nftToken.safeTransferFrom(address(this), claimer, artId, 1, \\\"\\\");\\r\\n        eligibleUsers[claimer] = false;\\r\\n        emit ClaimedNFT(claimer);\\r\\n    }\\r\\n\\r\\n    function recoverUnclaimedNFTs() public onlyOwner {\\r\\n        require (block.timestamp \\u003e recoverUnclaimedNftTime);\\r\\n        uint256 amountRemaining = nftToken.balanceOf(address(this), artId);\\r\\n        nftToken.safeTransferFrom(address(this), owner(), artId, amountRemaining, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function recoverTokens(IERC20 token) public onlyOwner {\\r\\n        token.safeTransfer(msg.sender, token.balanceOf(address(this)));\\r\\n    }\\r\\n}\"},\"NFTForge.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPP\\r\\npragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./IERC1155.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./ERC1155TokenReceiver.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\n\\r\\ncontract NFTForge is ERC1155TokenReceiver, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    IERC1155 public NftToken;\\r\\n    uint256 public upgradeCost;\\r\\n\\r\\n    uint256 public commonArtId;\\r\\n    uint256 public rareArtId;\\r\\n\\r\\n    event Upgraded(address UpgradedBy);\\r\\n\\r\\n    function setNFTsAndCost(uint256 _commonArtId, uint256 _rareArtId, uint256 _upgradeCost, IERC1155 _nftToken) public onlyOwner {\\r\\n        commonArtId = _commonArtId;\\r\\n        rareArtId = _rareArtId;\\r\\n        upgradeCost = _upgradeCost;\\r\\n        NftToken = _nftToken;\\r\\n    }\\r\\n\\r\\n    function UpgradeNFT() public {\\r\\n        address upgrading = msg.sender;\\r\\n        NftToken.safeTransferFrom(upgrading, address(this), commonArtId, upgradeCost, \\\"\\\");\\r\\n        NftToken.safeTransferFrom(address(this), upgrading, rareArtId, 1, \\\"\\\");\\r\\n        NftToken.safeTransferFrom(address(this), owner(), commonArtId, 1, \\\"\\\");\\r\\n        NftToken.burn(address(this), commonArtId, upgradeCost.sub(1));\\r\\n        emit Upgraded(msg.sender);\\r\\n    }\\r\\n\\r\\n    function recoverNFTs() public onlyOwner() {\\r\\n        uint256 amountRemaining = NftToken.balanceOf(address(this), rareArtId);\\r\\n        NftToken.safeTransferFrom(address(this), owner(), rareArtId, amountRemaining, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function recoverTokens(IERC20 token) public onlyOwner() \\r\\n    {\\r\\n        token.safeTransfer(msg.sender, token.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPP\\r\\npragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the caller is the current owner.\\r\\n     */\\r\\n    function isOwner() public view returns (bool) {\\r\\n        return _msgSender() == _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"},\"RootNFTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPP\\r\\npragma solidity ^0.5.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Math operations with safety checks that throw on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n\\r\\n    /**\\r\\n    * @dev Multiplies two numbers, throws on overflow.\\r\\n    */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        // Gas optimization: this is cheaper than asserting \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        c = a * b;\\r\\n        assert(c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Integer division of two numbers, truncating the quotient.\\r\\n    */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\r\\n        // uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\r\\n    */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        assert(b \\u003c= a);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Adds two numbers, throws on overflow.\\r\\n    */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\r\\n        c = a + b;\\r\\n        assert(c \\u003e= a);\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n    Note: Simple contract to use as base for const vals\\r\\n*/\\r\\ncontract CommonConstants {\\r\\n\\r\\n    bytes4 constant internal ERC1155_ACCEPTED = 0xf23a6e61; // bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))\\r\\n    bytes4 constant internal ERC1155_BATCH_ACCEPTED = 0xbc197c81; // bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))\\r\\n}\\r\\n\\r\\n/**\\r\\n    Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\r\\n*/\\r\\ninterface ERC1155TokenReceiver {\\r\\n    /**\\r\\n        @notice Handle the receipt of a single ERC1155 token type.\\r\\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\\r\\n        This function MUST return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\\r\\n        This function MUST revert if it rejects the transfer.\\r\\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\r\\n        @param _operator  The address which initiated the transfer (i.e. msg.sender)\\r\\n        @param _from      The address which previously owned the token\\r\\n        @param _id        The ID of the token being transferred\\r\\n        @param _value     The amount of tokens being transferred\\r\\n        @param _data      Additional data with no specified format\\r\\n        @return           `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\r\\n    */\\r\\n    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _value, bytes calldata _data) external returns(bytes4);\\r\\n\\r\\n    /**\\r\\n        @notice Handle the receipt of multiple ERC1155 token types.\\r\\n        @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\\r\\n        This function MUST return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\\r\\n        This function MUST revert if it rejects the transfer(s).\\r\\n        Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\\r\\n        @param _operator  The address which initiated the batch transfer (i.e. msg.sender)\\r\\n        @param _from      The address which previously owned the token\\r\\n        @param _ids       An array containing ids of each token being transferred (order and length must match _values array)\\r\\n        @param _values    An array containing amounts of each token being transferred (order and length must match _ids array)\\r\\n        @param _data      Additional data with no specified format\\r\\n        @return           `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\r\\n    */\\r\\n    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external returns(bytes4);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\\r\\n/**\\r\\n    @title ERC-1155 Multi Token Standard\\r\\n    @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md\\r\\n    Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\r\\n */\\r\\ncontract IERC1155 is IERC165 {\\r\\n    /**\\r\\n        @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \\\"Safe Transfer Rules\\\" section of the standard).\\r\\n        The `_operator` argument MUST be msg.sender.\\r\\n        The `_from` argument MUST be the address of the holder whose balance is decreased.\\r\\n        The `_to` argument MUST be the address of the recipient whose balance is increased.\\r\\n        The `_id` argument MUST be the token type being transferred.\\r\\n        The `_value` argument MUST be the number of tokens the holder balance is decreased by and match what the recipient balance is increased by.\\r\\n        When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\\r\\n        When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\\r\\n    */\\r\\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\\r\\n\\r\\n    /**\\r\\n        @dev Either `TransferSingle` or `TransferBatch` MUST emit when tokens are transferred, including zero value transfers as well as minting or burning (see \\\"Safe Transfer Rules\\\" section of the standard).\\r\\n        The `_operator` argument MUST be msg.sender.\\r\\n        The `_from` argument MUST be the address of the holder whose balance is decreased.\\r\\n        The `_to` argument MUST be the address of the recipient whose balance is increased.\\r\\n        The `_ids` argument MUST be the list of tokens being transferred.\\r\\n        The `_values` argument MUST be the list of number of tokens (matching the list and order of tokens specified in _ids) the holder balance is decreased by and match what the recipient balance is increased by.\\r\\n        When minting/creating tokens, the `_from` argument MUST be set to `0x0` (i.e. zero address).\\r\\n        When burning/destroying tokens, the `_to` argument MUST be set to `0x0` (i.e. zero address).\\r\\n    */\\r\\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\\r\\n\\r\\n    /**\\r\\n        @dev MUST emit when approval for a second party/operator address to manage all tokens for an owner address is enabled or disabled (absense of an event assumes disabled).\\r\\n    */\\r\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n\\r\\n    /**\\r\\n        @dev MUST emit when the URI is updated for a token ID.\\r\\n        URIs are defined in RFC 3986.\\r\\n        The URI MUST point a JSON file that conforms to the \\\"ERC-1155 Metadata URI JSON Schema\\\".\\r\\n    */\\r\\n    event URI(string _value, uint256 indexed _id);\\r\\n\\r\\n    /**\\r\\n        @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\\r\\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard).\\r\\n        MUST revert if `_to` is the zero address.\\r\\n        MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\\r\\n        MUST revert on any other error.\\r\\n        MUST emit the `TransferSingle` event to reflect the balance change (see \\\"Safe Transfer Rules\\\" section of the standard).\\r\\n        After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size \\u003e 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\r\\n        @param _from    Source address\\r\\n        @param _to      Target address\\r\\n        @param _id      ID of the token type\\r\\n        @param _value   Transfer amount\\r\\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\\r\\n    */\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\\r\\n\\r\\n    /**\\r\\n        @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\\r\\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard).\\r\\n        MUST revert if `_to` is the zero address.\\r\\n        MUST revert if length of `_ids` is not the same as length of `_values`.\\r\\n        MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\\r\\n        MUST revert on any other error.\\r\\n        MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \\\"Safe Transfer Rules\\\" section of the standard).\\r\\n        Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\\r\\n        After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size \\u003e 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\r\\n        @param _from    Source address\\r\\n        @param _to      Target address\\r\\n        @param _ids     IDs of each token type (order and length must match _values array)\\r\\n        @param _values  Transfer amounts per token type (order and length must match _ids array)\\r\\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\\r\\n    */\\r\\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external;\\r\\n    \\r\\n    function burn(address _owner, uint256 _id, uint256 _value) external;\\r\\n\\r\\n    /**\\r\\n        @notice Get the balance of an account\\u0027s Tokens.\\r\\n        @param _owner  The address of the token holder\\r\\n        @param _id     ID of the Token\\r\\n        @return        The _owner\\u0027s balance of the Token type requested\\r\\n     */\\r\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n        @notice Get the balance of multiple account/token pairs\\r\\n        @param _owners The addresses of the token holders\\r\\n        @param _ids    ID of the Tokens\\r\\n        @return        The _owner\\u0027s balance of the Token types requested (i.e. balance for each (owner, id) pair)\\r\\n     */\\r\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n        @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of the caller\\u0027s tokens.\\r\\n        @dev MUST emit the ApprovalForAll event on success.\\r\\n        @param _operator  Address to add to the set of authorized operators\\r\\n        @param _approved  True if the operator is approved, false to revoke approval\\r\\n    */\\r\\n    function setApprovalForAll(address _operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n        @notice Queries the approval status of an operator for a given owner.\\r\\n        @param _owner     The owner of the Tokens\\r\\n        @param _operator  Address of authorized operator\\r\\n        @return           True if the operator is approved, false if not\\r\\n    */\\r\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts may inherit from this and call {_registerInterface} to declare\\r\\n * their support of an interface.\\r\\n */\\r\\ncontract ERC165 is IERC165 {\\r\\n    /*\\r\\n     * bytes4(keccak256(\\u0027supportsInterface(bytes4)\\u0027)) == 0x01ffc9a7\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping of interface ids to whether or not it\\u0027s supported.\\r\\n     */\\r\\n    mapping(bytes4 =\\u003e bool) private _supportedInterfaces;\\r\\n\\r\\n    constructor () internal {\\r\\n        // Derived contracts need only register support for their own interfaces,\\r\\n        // we register support for ERC165 itself here\\r\\n        _registerInterface(_INTERFACE_ID_ERC165);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     *\\r\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\r\\n        return _supportedInterfaces[interfaceId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Registers the contract as an implementer of the interface defined by\\r\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\r\\n     * registering its interface id is not required.\\r\\n     *\\r\\n     * See {IERC165-supportsInterface}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\r\\n     */\\r\\n    function _registerInterface(bytes4 interfaceId) internal {\\r\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\r\\n        _supportedInterfaces[interfaceId] = true;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following \\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` into `address payable`. Note that this is\\r\\n     * simply a type cast: the actual underlying value is not changed.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function toPayable(address account) internal pure returns (address payable) {\\r\\n        return address(uint160(account));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-call-value\\r\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n// A sample implementation of core ERC1155 function.\\r\\ncontract ERC1155 is IERC1155, ERC165, CommonConstants\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    // id =\\u003e (owner =\\u003e balance)\\r\\n    mapping (uint256 =\\u003e mapping(address =\\u003e uint256)) internal balances;\\r\\n\\r\\n    // owner =\\u003e (operator =\\u003e approved)\\r\\n    mapping (address =\\u003e mapping(address =\\u003e bool)) internal operatorApproval;\\r\\n\\r\\n/////////////////////////////////////////// ERC165 //////////////////////////////////////////////\\r\\n\\r\\n    /*\\r\\n        bytes4(keccak256(\\\"safeTransferFrom(address,address,uint256,uint256,bytes)\\\")) ^\\r\\n        bytes4(keccak256(\\\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\\\")) ^\\r\\n        bytes4(keccak256(\\\"balanceOf(address,uint256)\\\")) ^\\r\\n        bytes4(keccak256(\\\"balanceOfBatch(address[],uint256[])\\\")) ^\\r\\n        bytes4(keccak256(\\\"setApprovalForAll(address,bool)\\\")) ^\\r\\n        bytes4(keccak256(\\\"isApprovedForAll(address,address)\\\"));\\r\\n    */\\r\\n    bytes4 constant private INTERFACE_SIGNATURE_ERC1155 = 0xd9b67a26;\\r\\n\\r\\n/////////////////////////////////////////// CONSTRUCTOR //////////////////////////////////////////\\r\\n\\r\\n    constructor() public {\\r\\n        _registerInterface(INTERFACE_SIGNATURE_ERC1155);\\r\\n    }\\r\\n\\r\\n/////////////////////////////////////////// ERC1155 //////////////////////////////////////////////\\r\\n\\r\\n    /**\\r\\n        @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\\r\\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard).\\r\\n        MUST revert if `_to` is the zero address.\\r\\n        MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\\r\\n        MUST revert on any other error.\\r\\n        MUST emit the `TransferSingle` event to reflect the balance change (see \\\"Safe Transfer Rules\\\" section of the standard).\\r\\n        After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size \\u003e 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\r\\n        @param _from    Source address\\r\\n        @param _to      Target address\\r\\n        @param _id      ID of the token type\\r\\n        @param _value   Transfer amount\\r\\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\\r\\n    */\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external {\\r\\n\\r\\n        require(_to != address(0x0), \\\"_to must be non-zero.\\\");\\r\\n        require(_from == msg.sender || operatorApproval[_from][msg.sender] == true, \\\"Need operator approval for 3rd party transfers.\\\");\\r\\n\\r\\n        // SafeMath will throw with insuficient funds _from\\r\\n        // or if _id is not valid (balance will be 0)\\r\\n        balances[_id][_from] = balances[_id][_from].sub(_value);\\r\\n        balances[_id][_to]   = _value.add(balances[_id][_to]);\\r\\n\\r\\n        // MUST emit event\\r\\n        emit TransferSingle(msg.sender, _from, _to, _id, _value);\\r\\n\\r\\n        // Now that the balance is updated and the event was emitted,\\r\\n        // call onERC1155Received if the destination is a contract.\\r\\n        if (_to.isContract()) {\\r\\n            _doSafeTransferAcceptanceCheck(msg.sender, _from, _to, _id, _value, _data);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\\r\\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard).\\r\\n        MUST revert if `_to` is the zero address.\\r\\n        MUST revert if length of `_ids` is not the same as length of `_values`.\\r\\n        MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\\r\\n        MUST revert on any other error.\\r\\n        MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see \\\"Safe Transfer Rules\\\" section of the standard).\\r\\n        Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\\r\\n        After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size \\u003e 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\r\\n        @param _from    Source address\\r\\n        @param _to      Target address\\r\\n        @param _ids     IDs of each token type (order and length must match _values array)\\r\\n        @param _values  Transfer amounts per token type (order and length must match _ids array)\\r\\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\\r\\n    */\\r\\n    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external {\\r\\n\\r\\n        // MUST Throw on errors\\r\\n        require(_to != address(0x0), \\\"destination address must be non-zero.\\\");\\r\\n        require(_ids.length == _values.length, \\\"_ids and _values array lenght must match.\\\");\\r\\n        require(_from == msg.sender || operatorApproval[_from][msg.sender] == true, \\\"Need operator approval for 3rd party transfers.\\\");\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c _ids.length; ++i) {\\r\\n            uint256 id = _ids[i];\\r\\n            uint256 value = _values[i];\\r\\n\\r\\n            // SafeMath will throw with insuficient funds _from\\r\\n            // or if _id is not valid (balance will be 0)\\r\\n            balances[id][_from] = balances[id][_from].sub(value);\\r\\n            balances[id][_to]   = value.add(balances[id][_to]);\\r\\n        }\\r\\n\\r\\n        // Note: instead of the below batch versions of event and acceptance check you MAY have emitted a TransferSingle\\r\\n        // event and a subsequent call to _doSafeTransferAcceptanceCheck in above loop for each balance change instead.\\r\\n        // Or emitted a TransferSingle event for each in the loop and then the single _doSafeBatchTransferAcceptanceCheck below.\\r\\n        // However it is implemented the balance changes and events MUST match when a check (i.e. calling an external contract) is done.\\r\\n\\r\\n        // MUST emit event\\r\\n        emit TransferBatch(msg.sender, _from, _to, _ids, _values);\\r\\n\\r\\n        // Now that the balances are updated and the events are emitted,\\r\\n        // call onERC1155BatchReceived if the destination is a contract.\\r\\n        if (_to.isContract()) {\\r\\n            _doSafeBatchTransferAcceptanceCheck(msg.sender, _from, _to, _ids, _values, _data);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Get the balance of an account\\u0027s Tokens.\\r\\n        @param _owner  The address of the token holder\\r\\n        @param _id     ID of the Token\\r\\n        @return        The _owner\\u0027s balance of the Token type requested\\r\\n     */\\r\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256) {\\r\\n        // The balance of any account can be calculated from the Transfer events history.\\r\\n        // However, since we need to keep the balances to validate transfer request,\\r\\n        // there is no extra cost to also privide a querry function.\\r\\n        return balances[_id][_owner];\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n        @notice Get the balance of multiple account/token pairs\\r\\n        @param _owners The addresses of the token holders\\r\\n        @param _ids    ID of the Tokens\\r\\n        @return        The _owner\\u0027s balance of the Token types requested (i.e. balance for each (owner, id) pair)\\r\\n     */\\r\\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory) {\\r\\n\\r\\n        require(_owners.length == _ids.length);\\r\\n\\r\\n        uint256[] memory balances_ = new uint256[](_owners.length);\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c _owners.length; ++i) {\\r\\n            balances_[i] = balances[_ids[i]][_owners[i]];\\r\\n        }\\r\\n\\r\\n        return balances_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Enable or disable approval for a third party (\\\"operator\\\") to manage all of the caller\\u0027s tokens.\\r\\n        @dev MUST emit the ApprovalForAll event on success.\\r\\n        @param _operator  Address to add to the set of authorized operators\\r\\n        @param _approved  True if the operator is approved, false to revoke approval\\r\\n    */\\r\\n    function setApprovalForAll(address _operator, bool _approved) external {\\r\\n        operatorApproval[msg.sender][_operator] = _approved;\\r\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice Queries the approval status of an operator for a given owner.\\r\\n        @param _owner     The owner of the Tokens\\r\\n        @param _operator  Address of authorized operator\\r\\n        @return           True if the operator is approved, false if not\\r\\n    */\\r\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\\r\\n        return operatorApproval[_owner][_operator];\\r\\n    }\\r\\n\\r\\n/////////////////////////////////////////// Internal //////////////////////////////////////////////\\r\\n\\r\\n    function _doSafeTransferAcceptanceCheck(address _operator, address _from, address _to, uint256 _id, uint256 _value, bytes memory _data) internal {\\r\\n\\r\\n        // If this was a hybrid standards solution you would have to check ERC165(_to).supportsInterface(0x4e2312e0) here but as this is a pure implementation of an ERC-1155 token set as recommended by\\r\\n        // the standard, it is not necessary. The below should revert in all failure cases i.e. _to isn\\u0027t a receiver, or it is and either returns an unknown value or it reverts in the call to indicate non-acceptance.\\r\\n\\r\\n\\r\\n        // Note: if the below reverts in the onERC1155Received function of the _to address you will have an undefined revert reason returned rather than the one in the require test.\\r\\n        // If you want predictable revert reasons consider using low level _to.call() style instead so the revert does not bubble up and you can revert yourself on the ERC1155_ACCEPTED test.\\r\\n        require(ERC1155TokenReceiver(_to).onERC1155Received(_operator, _from, _id, _value, _data) == ERC1155_ACCEPTED, \\\"contract returned an unknown value from onERC1155Received\\\");\\r\\n    }\\r\\n\\r\\n    function _doSafeBatchTransferAcceptanceCheck(address _operator, address _from, address _to, uint256[] memory _ids, uint256[] memory _values, bytes memory _data) internal {\\r\\n\\r\\n        // If this was a hybrid standards solution you would have to check ERC165(_to).supportsInterface(0x4e2312e0) here but as this is a pure implementation of an ERC-1155 token set as recommended by\\r\\n        // the standard, it is not necessary. The below should revert in all failure cases i.e. _to isn\\u0027t a receiver, or it is and either returns an unknown value or it reverts in the call to indicate non-acceptance.\\r\\n\\r\\n        // Note: if the below reverts in the onERC1155BatchReceived function of the _to address you will have an undefined revert reason returned rather than the one in the require test.\\r\\n        // If you want predictable revert reasons consider using low level _to.call() style instead so the revert does not bubble up and you can revert yourself on the ERC1155_BATCH_ACCEPTED test.\\r\\n        require(ERC1155TokenReceiver(_to).onERC1155BatchReceived(_operator, _from, _ids, _values, _data) == ERC1155_BATCH_ACCEPTED, \\\"contract returned an unknown value from onERC1155BatchReceived\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary UintLibrary {\\r\\n    function toString(uint256 _i) internal pure returns (string memory) {\\r\\n        if (_i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint j = _i;\\r\\n        uint len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint k = len - 1;\\r\\n        while (_i != 0) {\\r\\n            bstr[k--] = byte(uint8(48 + _i % 10));\\r\\n            _i /= 10;\\r\\n        }\\r\\n        return string(bstr);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary StringLibrary {\\r\\n    using UintLibrary for uint256;\\r\\n\\r\\n    function append(string memory _a, string memory _b) internal pure returns (string memory) {\\r\\n        bytes memory _ba = bytes(_a);\\r\\n        bytes memory _bb = bytes(_b);\\r\\n        bytes memory bab = new bytes(_ba.length + _bb.length);\\r\\n        uint k = 0;\\r\\n        for (uint i = 0; i \\u003c _ba.length; i++) bab[k++] = _ba[i];\\r\\n        for (uint i = 0; i \\u003c _bb.length; i++) bab[k++] = _bb[i];\\r\\n        return string(bab);\\r\\n    }\\r\\n\\r\\n    function append(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\\r\\n        bytes memory _ba = bytes(_a);\\r\\n        bytes memory _bb = bytes(_b);\\r\\n        bytes memory _bc = bytes(_c);\\r\\n        bytes memory bbb = new bytes(_ba.length + _bb.length + _bc.length);\\r\\n        uint k = 0;\\r\\n        for (uint i = 0; i \\u003c _ba.length; i++) bbb[k++] = _ba[i];\\r\\n        for (uint i = 0; i \\u003c _bb.length; i++) bbb[k++] = _bb[i];\\r\\n        for (uint i = 0; i \\u003c _bc.length; i++) bbb[k++] = _bc[i];\\r\\n        return string(bbb);\\r\\n    }\\r\\n\\r\\n    function recover(string memory message, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\r\\n        bytes memory msgBytes = bytes(message);\\r\\n        bytes memory fullMessage = concat(\\r\\n            bytes(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\"),\\r\\n            bytes(msgBytes.length.toString()),\\r\\n            msgBytes,\\r\\n            new bytes(0), new bytes(0), new bytes(0), new bytes(0)\\r\\n        );\\r\\n        return ecrecover(keccak256(fullMessage), v, r, s);\\r\\n    }\\r\\n\\r\\n    function concat(bytes memory _ba, bytes memory _bb, bytes memory _bc, bytes memory _bd, bytes memory _be, bytes memory _bf, bytes memory _bg) internal pure returns (bytes memory) {\\r\\n        bytes memory resultBytes = new bytes(_ba.length + _bb.length + _bc.length + _bd.length + _be.length + _bf.length + _bg.length);\\r\\n        uint k = 0;\\r\\n        for (uint i = 0; i \\u003c _ba.length; i++) resultBytes[k++] = _ba[i];\\r\\n        for (uint i = 0; i \\u003c _bb.length; i++) resultBytes[k++] = _bb[i];\\r\\n        for (uint i = 0; i \\u003c _bc.length; i++) resultBytes[k++] = _bc[i];\\r\\n        for (uint i = 0; i \\u003c _bd.length; i++) resultBytes[k++] = _bd[i];\\r\\n        for (uint i = 0; i \\u003c _be.length; i++) resultBytes[k++] = _be[i];\\r\\n        for (uint i = 0; i \\u003c _bf.length; i++) resultBytes[k++] = _bf[i];\\r\\n        for (uint i = 0; i \\u003c _bg.length; i++) resultBytes[k++] = _bg[i];\\r\\n        return resultBytes;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract HasContractURI is ERC165 {\\r\\n\\r\\n    string public contractURI;\\r\\n\\r\\n    /*\\r\\n     * bytes4(keccak256(\\u0027contractURI()\\u0027)) == 0xe8a3d485\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_CONTRACT_URI = 0xe8a3d485;\\r\\n\\r\\n    constructor(string memory _contractURI) public {\\r\\n        contractURI = _contractURI;\\r\\n        _registerInterface(_INTERFACE_ID_CONTRACT_URI);\\r\\n    }\\r\\n\\r\\n    function _setContractURI(string memory _contractURI) internal {\\r\\n        contractURI = _contractURI;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract HasTokenURI {\\r\\n    using StringLibrary for string;\\r\\n\\r\\n    //Token URI prefix\\r\\n    string public tokenURIPrefix;\\r\\n\\r\\n    // Optional mapping for token URIs\\r\\n    mapping(uint256 =\\u003e string) private _tokenURIs;\\r\\n\\r\\n    constructor(string memory _tokenURIPrefix) public {\\r\\n        tokenURIPrefix = _tokenURIPrefix;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an URI for a given token ID.\\r\\n     * Throws if the token ID does not exist. May return an empty string.\\r\\n     * @param tokenId uint256 ID of the token to query\\r\\n     */\\r\\n    function _tokenURI(uint256 tokenId) internal view returns (string memory) {\\r\\n        return tokenURIPrefix.append(_tokenURIs[tokenId]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to set the token URI for a given token.\\r\\n     * Reverts if the token ID does not exist.\\r\\n     * @param tokenId uint256 ID of the token to set its URI\\r\\n     * @param uri string URI to assign\\r\\n     */\\r\\n    function _setTokenURI(uint256 tokenId, string memory uri) internal {\\r\\n        _tokenURIs[tokenId] = uri;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to set the token URI prefix.\\r\\n     * @param _tokenURIPrefix string URI prefix to assign\\r\\n     */\\r\\n    function _setTokenURIPrefix(string memory _tokenURIPrefix) internal {\\r\\n        tokenURIPrefix = _tokenURIPrefix;\\r\\n    }\\r\\n\\r\\n    function _clearTokenURI(uint256 tokenId) internal {\\r\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\r\\n            delete _tokenURIs[tokenId];\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\ncontract Context {\\r\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\r\\n    // an instance of this contract, which should be used via inheritance.\\r\\n    constructor () internal { }\\r\\n    // solhint-disable-previous-line no-empty-blocks\\r\\n\\r\\n    function _msgSender() internal view returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the caller is the current owner.\\r\\n     */\\r\\n    function isOwner() public view returns (bool) {\\r\\n        return _msgSender() == _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public onlyOwner {\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n    Note: The ERC-165 identifier for this interface is 0x0e89341c.\\r\\n*/\\r\\ninterface IERC1155Metadata_URI {\\r\\n    /**\\r\\n        @notice A distinct Uniform Resource Identifier (URI) for a given token.\\r\\n        @dev URIs are defined in RFC 3986.\\r\\n        The URI may point to a JSON file that conforms to the \\\"ERC-1155 Metadata URI JSON Schema\\\".\\r\\n        @return URI string\\r\\n    */\\r\\n    function uri(uint256 _id) external view returns (string memory);\\r\\n}\\r\\n\\r\\n/**\\r\\n    Note: The ERC-165 identifier for this interface is 0x0e89341c.\\r\\n*/\\r\\ncontract ERC1155Metadata_URI is IERC1155Metadata_URI, HasTokenURI {\\r\\n\\r\\n    constructor(string memory _tokenURIPrefix) HasTokenURI(_tokenURIPrefix) public {\\r\\n\\r\\n    }\\r\\n\\r\\n    function uri(uint256 _id) external view returns (string memory) {\\r\\n        return _tokenURI(_id);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract HasSecondarySaleFees is ERC165 {\\r\\n\\r\\n    event SecondarySaleFees(uint256 tokenId, address[] recipients, uint[] bps);\\r\\n\\r\\n    /*\\r\\n     * bytes4(keccak256(\\u0027getFeeBps(uint256)\\u0027)) == 0x0ebd4c7f\\r\\n     * bytes4(keccak256(\\u0027getFeeRecipients(uint256)\\u0027)) == 0xb9c4d9fb\\r\\n     *\\r\\n     * =\\u003e 0x0ebd4c7f ^ 0xb9c4d9fb == 0xb7799584\\r\\n     */\\r\\n    bytes4 private constant _INTERFACE_ID_FEES = 0xb7799584;\\r\\n\\r\\n    constructor() public {\\r\\n        _registerInterface(_INTERFACE_ID_FEES);\\r\\n    }\\r\\n\\r\\n    function getFeeRecipients(uint256 id) public view returns (address payable[] memory);\\r\\n    function getFeeBps(uint256 id) public view returns (uint[] memory);\\r\\n}\\r\\n\\r\\ncontract RootNftFacttory is HasSecondarySaleFees, Ownable, ERC1155Metadata_URI, HasContractURI, ERC1155 {\\r\\n\\r\\n    struct Fee {\\r\\n        address payable recipient;\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    mapping (uint256 =\\u003e address) public creators;\\r\\n    mapping (uint256 =\\u003e Fee[]) public fees;\\r\\n\\r\\n    constructor(string memory contractURI, string memory tokenURIPrefix) HasContractURI(contractURI) ERC1155Metadata_URI(tokenURIPrefix) public {\\r\\n\\r\\n    }\\r\\n\\r\\n    function getFeeRecipients(uint256 id) public view returns (address payable[] memory) {\\r\\n        Fee[] memory _fees = fees[id];\\r\\n        address payable[] memory result = new address payable[](_fees.length);\\r\\n        for (uint i = 0; i \\u003c _fees.length; i++) {\\r\\n            result[i] = _fees[i].recipient;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function getFeeBps(uint256 id) public view returns (uint[] memory) {\\r\\n        Fee[] memory _fees = fees[id];\\r\\n        uint[] memory result = new uint[](_fees.length);\\r\\n        for (uint i = 0; i \\u003c _fees.length; i++) {\\r\\n            result[i] = _fees[i].value;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function mint(uint256 _id, Fee[] memory _fees, uint256 _supply, string memory _uri) public onlyOwner {\\r\\n        require(creators[_id] == address(0x0), \\\"Token is already minted\\\");\\r\\n        require(_supply != 0, \\\"Supply should be positive\\\");\\r\\n        require(bytes(_uri).length \\u003e 0, \\\"uri should be set\\\");\\r\\n\\r\\n        creators[_id] = msg.sender;\\r\\n        address[] memory recipients = new address[](_fees.length);\\r\\n        uint[] memory bps = new uint[](_fees.length);\\r\\n        for (uint i = 0; i \\u003c _fees.length; i++) {\\r\\n            require(_fees[i].recipient != address(0x0), \\\"Recipient should be present\\\");\\r\\n            require(_fees[i].value != 0, \\\"Fee value should be positive\\\");\\r\\n            fees[_id].push(_fees[i]);\\r\\n            recipients[i] = _fees[i].recipient;\\r\\n            bps[i] = _fees[i].value;\\r\\n        }\\r\\n        if (_fees.length \\u003e 0) {\\r\\n            emit SecondarySaleFees(_id, recipients, bps);\\r\\n        }\\r\\n        balances[_id][msg.sender] = _supply;\\r\\n        _setTokenURI(_id, _uri);\\r\\n\\r\\n        emit TransferSingle(msg.sender, address(0x0), msg.sender, _id, _supply);\\r\\n        emit URI(_uri, _id);\\r\\n    }\\r\\n\\r\\n    function burn(address _owner, uint256 _id, uint256 _value) external {\\r\\n        require(_owner == msg.sender, \\\"You can only burn NFTs you currently own\\\");\\r\\n        balances[_id][_owner] = balances[_id][_owner].sub(_value);\\r\\n\\r\\n        emit TransferSingle(msg.sender, _owner, address(0x0), _id, _value);\\r\\n    }\\r\\n\\r\\n    function _setTokenURI(uint256 tokenId, string memory uri) internal {\\r\\n        require(creators[tokenId] != address(0x0), \\\"_setTokenURI: Token should exist\\\");\\r\\n        super._setTokenURI(tokenId, uri);\\r\\n    }\\r\\n\\r\\n    function resetTokenURI(uint256 tokenId, string memory uri) public onlyOwner {\\r\\n        _clearTokenURI(tokenId);\\r\\n        super._setTokenURI(tokenId, uri);\\r\\n    }\\r\\n\\r\\n    function setTokenURIPrefix(string memory tokenURIPrefix) public onlyOwner {\\r\\n        _setTokenURIPrefix(tokenURIPrefix);\\r\\n    }\\r\\n\\r\\n    function setContractURI(string memory contractURI) public onlyOwner {\\r\\n        _setContractURI(contractURI);\\r\\n    }\\r\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPP\\r\\npragma solidity ^0.5.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves.\\r\\n\\r\\n        // A Solidity high level call has three parts:\\r\\n        //  1. The target address is checked to verify it contains contract code\\r\\n        //  2. The call itself is made, and success asserted\\r\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\r\\n\\r\\n        if (returndata.length \\u003e 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPP\\r\\npragma solidity ^0.5.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: U-U-U-UPPPP\\r\\npragma solidity ^0.5.11;\\r\\n\\r\\nlibrary Strings {\\r\\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\\r\\n  function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory) {\\r\\n      bytes memory _ba = bytes(_a);\\r\\n      bytes memory _bb = bytes(_b);\\r\\n      bytes memory _bc = bytes(_c);\\r\\n      bytes memory _bd = bytes(_d);\\r\\n      bytes memory _be = bytes(_e);\\r\\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\\r\\n      bytes memory babcde = bytes(abcde);\\r\\n      uint k = 0;\\r\\n      for (uint i = 0; i \\u003c _ba.length; i++) babcde[k++] = _ba[i];\\r\\n      for (uint i = 0; i \\u003c _bb.length; i++) babcde[k++] = _bb[i];\\r\\n      for (uint i = 0; i \\u003c _bc.length; i++) babcde[k++] = _bc[i];\\r\\n      for (uint i = 0; i \\u003c _bd.length; i++) babcde[k++] = _bd[i];\\r\\n      for (uint i = 0; i \\u003c _be.length; i++) babcde[k++] = _be[i];\\r\\n      return string(babcde);\\r\\n    }\\r\\n\\r\\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory) {\\r\\n        return strConcat(_a, _b, _c, _d, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\\r\\n        return strConcat(_a, _b, _c, \\\"\\\", \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\\r\\n        return strConcat(_a, _b, \\\"\\\", \\\"\\\", \\\"\\\");\\r\\n    }\\r\\n\\r\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\r\\n        if (_i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint j = _i;\\r\\n        uint len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint k = len - 1;\\r\\n        while (_i != 0) {\\r\\n            bstr[k--] = byte(uint8(48 + _i % 10));\\r\\n            _i /= 10;\\r\\n        }\\r\\n        return string(bstr);\\r\\n    }\\r\\n}\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"UpgradedBy\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"NftToken\",\"outputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"UpgradeNFT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commonArtId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rareArtId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"recoverNFTs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_commonArtId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rareArtId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_upgradeCost\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC1155\",\"name\":\"_nftToken\",\"type\":\"address\"}],\"name\":\"setNFTsAndCost\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"NFTForge","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}