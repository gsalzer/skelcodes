{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ConjureRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./interfaces/IStakingRewards.sol\\\";\\r\\n\\r\\n\\r\\n/// @author Conjure Team\\r\\n/// @title ConjureRouter\\r\\n/// @notice The ConjureRouter which distributes the conjure fees\\r\\ncontract ConjureRouter {\\r\\n\\r\\n    // event for distribution\\r\\n    event FeeDistribution(address treasury, address stakingrewards, uint256 amount);\\r\\n    // event for new threshold\\r\\n    event NewThreshold(uint256 value);\\r\\n\\r\\n    IStakingRewards public stakingRewards;\\r\\n    address payable public treasury;\\r\\n    address public owner;\\r\\n    uint256 public threshold = 0.1 ether;\\r\\n\\r\\n    constructor(IStakingRewards _stakingRewards, address payable _treasury) {\\r\\n        require(_treasury != address(0), \\\"not zero address\\\");\\r\\n    \\r\\n        stakingRewards = _stakingRewards;\\r\\n        treasury = _treasury;\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @notice distributes the fees if the balance is 0.1 or higher\\r\\n    * sends 50% to the treasury\\r\\n    * sends 50% to the staking rewards contract\\r\\n    * calls notifyRewardAmount on the staking contract\\r\\n    */\\r\\n    function distribute() internal {\\r\\n        uint256 amount = address(this).balance;\\r\\n\\r\\n        if (amount > threshold) {\\r\\n            emit FeeDistribution(treasury, address(stakingRewards), amount);\\r\\n            \\r\\n            treasury.transfer(amount / 2);\\r\\n            payable(address(stakingRewards)).transfer(amount / 2);\\r\\n            stakingRewards.notifyRewardAmount(amount / 2);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * deposit function for collection funds\\r\\n    * only executes the distribution logic if the contract balance is more than 0.1 ETH\\r\\n    */\\r\\n    function deposit() external payable {\\r\\n        distribute();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * fallback function for collection funds\\r\\n    * only executes the distribution logic if the contract balance is more than 0.1 ETH\\r\\n    */\\r\\n    fallback() external payable {\\r\\n        distribute();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * fallback function for collection funds\\r\\n    * only executes the distribution logic if the contract balance is more than 0.1 ETH\\r\\n    */\\r\\n    receive() external payable {\\r\\n        distribute();\\r\\n    }\\r\\n\\r\\n    function newStakingrewards(IStakingRewards newRewards) external {\\r\\n        require(msg.sender == owner, \\\"Only owner\\\");\\r\\n        require(address(newRewards) != address(0), \\\"not zero address\\\");\\r\\n        stakingRewards = newRewards;\\r\\n    }\\r\\n\\r\\n    function newTreasury(address payable newTreasuryAddress) external {\\r\\n        require(msg.sender == owner, \\\"Only owner\\\");\\r\\n        require(newTreasuryAddress != address(0), \\\"not zero address\\\");\\r\\n        treasury = newTreasuryAddress;\\r\\n    }\\r\\n\\r\\n    function setNewOwner(address newOwner) external {\\r\\n        require(msg.sender == owner, \\\"Only owner\\\");\\r\\n        require(newOwner != address(0), \\\"not zero address\\\");\\r\\n        owner = newOwner;\\r\\n    }\\r\\n\\r\\n    function setNewThreshold(uint256 newthreshold) external {\\r\\n        require(msg.sender == owner, \\\"Only owner\\\");\\r\\n        threshold = newthreshold;\\r\\n        emit NewThreshold(threshold);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IStakingRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.24;\\r\\n\\r\\n// https://docs.synthetix.io/contracts/source/interfaces/istakingrewards\\r\\ninterface IStakingRewards {\\r\\n    // Views\\r\\n    function lastTimeRewardApplicable() external view returns (uint256);\\r\\n\\r\\n    function rewardPerToken() external view returns (uint256);\\r\\n\\r\\n    function earned(address account) external view returns (uint256);\\r\\n\\r\\n    function getRewardForDuration() external view returns (uint256);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    // Mutative\\r\\n\\r\\n    function stake(uint256 amount) external;\\r\\n\\r\\n    function withdraw(uint256 amount) external;\\r\\n\\r\\n    function getReward() external;\\r\\n\\r\\n    function exit() external;\\r\\n\\r\\n    function notifyRewardAmount(uint256 reward) external;\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IStakingRewards\",\"name\":\"_stakingRewards\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakingrewards\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeeDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NewThreshold\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStakingRewards\",\"name\":\"newRewards\",\"type\":\"address\"}],\"name\":\"newStakingrewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newTreasuryAddress\",\"type\":\"address\"}],\"name\":\"newTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newthreshold\",\"type\":\"uint256\"}],\"name\":\"setNewThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingRewards\",\"outputs\":[{\"internalType\":\"contract IStakingRewards\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ConjureRouter","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a71a51a4863a2f9c2a83a9feb284595020cc80a7000000000000000000000000a71a51a4863a2f9c2a83a9feb284595020cc80a7","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}