{"status":"1","message":"OK","result":[{"SourceCode":"{\"BrinkVote.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.4;\\n\\nimport \\\"./IERC20NoTransfer.sol\\\";\\n\\n/**\\n * @dev BrinkVote is a simple balance ledger created for Brink proposal voting on snapshot.org\\n *\\n * This is not an ERC20 token! It does not fully implement the ERC20 standard. Balances cannot be transfered. Balances\\n * can be minted by the owners of the contract. Once a balance is minted it becomes immutable.\\n *\\n * This contract was created solely for the purpose of vote signaling. It allows Brink community members to broadcast\\n * their opinions on Brink protocol development proposals.\\n */\\ncontract BrinkVote is IERC20NoTransfer {\\n  string private constant _symbol = \\\"BRINKVOTE\\\";\\n  string private constant _name = \\\"Brink Vote\\\";\\n  uint8 private constant _decimals = 18;\\n  uint256 private constant _cap = 5_000_000_000000000000000000; // 5 Million\\n\\n  mapping (address =\\u003e uint256) private _balances;\\n  mapping (address =\\u003e bool) private _owners;\\n\\n  uint256 private _totalSupply;\\n\\n  modifier onlyOwner() {\\n    require(_isOwner(msg.sender), \\\"NOT_OWNER\\\");\\n    _;\\n  }\\n\\n  constructor (address initialOwner) {\\n    _owners[initialOwner] = true;\\n  }\\n\\n  function totalSupply() external view override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  function balanceOf(address account) external view override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  function name() external pure returns (string memory) {\\n      return _name;\\n  }\\n\\n  function symbol() external pure returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  function decimals() external pure returns (uint8) {\\n    return _decimals;\\n  }\\n\\n  function cap() external pure returns (uint256) {\\n    return _cap;\\n  }\\n\\n  function isOwner(address owner) external view returns (bool) {\\n    return _isOwner(owner);\\n  }\\n\\n  function grant(address account, uint256 amount) external onlyOwner {\\n    _mint(account, amount);\\n  }\\n\\n  function multigrant(address[] calldata accounts, uint256 amount) external onlyOwner {\\n    for(uint8 i = 0; i \\u003c accounts.length; i++) {\\n      _mint(accounts[i], amount);\\n    }\\n  }\\n\\n  function addOwner(address owner) external onlyOwner {\\n    require(!_isOwner(owner), \\\"ALREADY_OWNER\\\");\\n    _owners[owner] = true;\\n  }\\n\\n  function removeOwner(address owner) external onlyOwner {\\n    require(_isOwner(owner), \\\"CANNOT_REMOVE_NON_OWNER\\\");\\n    require(owner != msg.sender, \\\"CANNOT_REMOVE_SELF_OWNER\\\");\\n    _owners[owner] = false;\\n  }\\n\\n  function _capExceeded() internal view returns (bool) {\\n    return _totalSupply \\u003e _cap;\\n  }\\n\\n  function _isOwner(address owner) internal view returns (bool) {\\n    return _owners[owner];\\n  }\\n\\n  function _mint(address account, uint256 amount) internal {\\n    _balances[account] = amount;\\n    _totalSupply += amount;\\n    require(!_capExceeded(), \\\"CAP_EXCEEDED\\\");\\n    emit Transfer(address(0), account, amount);\\n  }\\n}\\n\"},\"IERC20NoTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.4;\\n\\n/**\\n * @dev Partial ERC20 interface for a \\\"non-transferable\\\" implementation\\n */\\ninterface IERC20NoTransfer {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"grant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"multigrant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BrinkVote","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"000000000000000000000000c3c0515d5fb6407e167c58274d325a5aec64e9b5","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://667da97eeed74a11f33180e3b41bac5d545f14a869a74dce19330ae1339cdc27"}]}