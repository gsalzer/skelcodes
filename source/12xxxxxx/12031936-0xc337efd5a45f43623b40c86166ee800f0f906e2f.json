{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.0;\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor() internal {}\n\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() public {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed approved,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId)\n        external\n        view\n        returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator)\n        external\n        view\n        returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\ninterface IERC1155 {\n    // Events\n\n    /**\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\n     *   Operator MUST be msg.sender\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID\n     *   To broadcast the existence of a token ID with no initial balance, the contract SHOULD emit the TransferSingle event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\n     */\n    event TransferSingle(\n        address indexed _operator,\n        address indexed _from,\n        address indexed _to,\n        uint256 _id,\n        uint256 _amount\n    );\n\n    /**\n     * @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred, including zero amount transfers as well as minting or burning\n     *   Operator MUST be msg.sender\n     *   When minting/creating tokens, the `_from` field MUST be set to `0x0`\n     *   When burning/destroying tokens, the `_to` field MUST be set to `0x0`\n     *   The total amount transferred from address 0x0 minus the total amount transferred to 0x0 may be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID\n     *   To broadcast the existence of multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event from `0x0` to `0x0`, with the token creator as `_operator`, and a `_amount` of 0\n     */\n    event TransferBatch(\n        address indexed _operator,\n        address indexed _from,\n        address indexed _to,\n        uint256[] _ids,\n        uint256[] _amounts\n    );\n\n    /**\n     * @dev MUST emit when an approval is updated\n     */\n    event ApprovalForAll(\n        address indexed _owner,\n        address indexed _operator,\n        bool _approved\n    );\n\n    /**\n     * @dev MUST emit when the URI is updated for a token ID\n     *   URIs are defined in RFC 3986\n     *   The URI MUST point a JSON file that conforms to the \"ERC-1155 Metadata JSON Schema\"\n     */\n    event URI(string _amount, uint256 indexed _id);\n\n    /**\n     * @notice Transfers amount of an _id from the _from address to the _to address specified\n     * @dev MUST emit TransferSingle event on success\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\n     * MUST throw if `_to` is the zero address\n     * MUST throw if balance of sender for token `_id` is lower than the `_amount` sent\n     * MUST throw on any other error\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155Received` on `_to` and revert if the return amount is not `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * @param _from    Source address\n     * @param _to      Target address\n     * @param _id      ID of the token type\n     * @param _amount  Transfered amount\n     * @param _data    Additional data with no specified format, sent in call to `_to`\n     */\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _id,\n        uint256 _amount,\n        bytes calldata _data\n    ) external;\n\n    /**\n     * @notice Send multiple types of Tokens from the _from address to the _to address (with safety call)\n     * @dev MUST emit TransferBatch event on success\n     * Caller must be approved to manage the _from account's tokens (see isApprovedForAll)\n     * MUST throw if `_to` is the zero address\n     * MUST throw if length of `_ids` is not the same as length of `_amounts`\n     * MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_amounts` sent\n     * MUST throw on any other error\n     * When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0). If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return amount is not `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * Transfers and events MUST occur in the array order they were submitted (_ids[0] before _ids[1], etc)\n     * @param _from     Source addresses\n     * @param _to       Target addresses\n     * @param _ids      IDs of each token type\n     * @param _amounts  Transfer amounts per token type\n     * @param _data     Additional data with no specified format, sent in call to `_to`\n     */\n    function safeBatchTransferFrom(\n        address _from,\n        address _to,\n        uint256[] calldata _ids,\n        uint256[] calldata _amounts,\n        bytes calldata _data\n    ) external;\n\n    /**\n     * @notice Get the balance of an account's Tokens\n     * @param _owner  The address of the token holder\n     * @param _id     ID of the Token\n     * @return        The _owner's balance of the Token type requested\n     */\n    function balanceOf(address _owner, uint256 _id)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Get the balance of multiple account/token pairs\n     * @param _owners The addresses of the token holders\n     * @param _ids    ID of the Tokens\n     * @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\n     */\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @notice Enable or disable approval for a third party (\"operator\") to manage all of caller's tokens\n     * @dev MUST emit the ApprovalForAll event on success\n     * @param _operator  Address to add to the set of authorized operators\n     * @param _approved  True if the operator is approved, false to revoke approval\n     */\n    function setApprovalForAll(address _operator, bool _approved) external;\n\n    /**\n     * @notice Queries the approval status of an operator for a given owner\n     * @param _owner     The owner of the Tokens\n     * @param _operator  Address of authorized operator\n     * @return           True if the operator is approved, false if not\n     */\n    function isApprovedForAll(address _owner, address _operator)\n        external\n        view\n        returns (bool);\n}\n\ninterface IERC1155Metadata {\n    /***********************************|\n    |     Metadata Public Function s    |\n    |__________________________________*/\n\n    /**\n     * @notice A distinct Uniform Resource Identifier (URI) for a given token.\n     * @dev URIs are defined in RFC 3986.\n     *      URIs are assumed to be deterministically generated based on token ID\n     *      Token IDs are assumed to be represented in their hex format in URIs\n     * @return URI string\n     */\n    function uri(uint256 _id) external view returns (string memory);\n}\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath#mul: OVERFLOW\");\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath#div: DIVISION_BY_ZERO\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath#sub: UNDERFLOW\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath#add: OVERFLOW\");\n\n        return c;\n    }\n\n    /**\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n     * reverts when dividing by zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath#mod: DIVISION_BY_ZERO\");\n        return a % b;\n    }\n}\n\n/**\n * Copyright 2018 ZeroEx Intl.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *   http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        bytes32 codehash;\n\n        bytes32 accountHash =\n            0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n}\n\n// SPDX-License-Identifier: MIT\n/////////////////////////////////////////////////\n//  ____                        _   _          //\n// | __ )    ___    _ __     __| | | |  _   _  //\n// |  _ \\   / _ \\  | '_ \\   / _` | | | | | | | //\n// | |_) | | (_) | | | | | | (_| | | | | |_| | //\n// |____/   \\___/  |_| |_|  \\__,_| |_|  \\__, | //\n//                                      |___/  //\n/////////////////////////////////////////////////\ncontract BondlySwap is Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n\n    // TokenType Definition\n    enum TokenType {T20, T1155, T721}\n\n    // SwapType Definition\n    enum SwapType {TimedSwap, FixedSwap}\n\n    struct Collection {\n        uint256[2] cardTokenIds; // amount for T20\n        address[2] cardContractAddrs;\n        address collectionOwner;\n        TokenType[2] tokenTypes;\n    }\n\n    struct BSwap {\n        uint256 totalAmount;\n        uint256 currentAmount;\n        uint256 startTime;\n        uint256 endTime;\n        address allowedBidder;\n        bool isPrivate;\n        bool isActive;\n        SwapType swapType;\n    }\n\n    mapping(uint256 => Collection) public makers;\n    mapping(uint256 => Collection) public targets;\n    mapping(uint256 => BSwap) public listings;\n    uint256 public listIndex;\n\n    uint256 public platformFee;\n    address payable public feeCollector;\n    uint256 public t20Fee;\n\n    address public originCreator;\n\n    // apply 0 fee to our NFTs\n    mapping(address => bool) public whitelist;\n\n    mapping(address => bool) public supportTokens;\n\n    bool public emergencyStop;\n\n    event AddedNewToken(address indexed tokenAddress);\n    event BatchAddedNewToken(address[] tokenAddress);\n    event NFTListed(uint256 listId, address indexed lister);\n    event ListVisibilityChanged(uint256 listId, bool isPrivate);\n    event ListEndTimeChanged(uint256 listId, uint256 endTime);\n    event NFTSwapped(uint256 listId, address indexed buyer, uint256 count);\n    event NFTClosed(uint256 listId, address indexed closer);\n\n    event WhiteListAdded(address indexed addr);\n    event WhiteListRemoved(address indexed addr);\n    event BatchWhiteListAdded(address[] addr);\n    event BatchWhiteListRemoved(address[] addr);\n\n    constructor() public {\n        originCreator = msg.sender;\n        emergencyStop = false;\n        listIndex = 0;\n\n        platformFee = 1;\n        feeCollector = msg.sender;\n        t20Fee = 5;\n    }\n\n    modifier onlyNotEmergency() {\n        require(emergencyStop == false, \"BSwap: emergency stop\");\n        _;\n    }\n\n    modifier onlyValidList(uint256 listId) {\n        require(listIndex >= listId, \"Bswap: list not found\");\n        _;\n    }\n\n    modifier onlyListOwner(uint256 listId) {\n        require(\n            makers[listId].collectionOwner == msg.sender || isOwner(),\n            \"Bswap: not your list\"\n        );\n        _;\n    }\n\n    function clearEmergency() external onlyOwner {\n        emergencyStop = true;\n    }\n\n    function stopEmergency() external onlyOwner {\n        emergencyStop = false;\n    }\n\n    function _addNewToken(address contractAddr) external onlyOwner {\n        require(\n            supportTokens[contractAddr] == false,\n            \"BSwap: already supported\"\n        );\n        supportTokens[contractAddr] = true;\n\n        emit AddedNewToken(contractAddr);\n    }\n\n    function _batchAddNewToken(address[] calldata contractAddrs)\n        external\n        onlyOwner\n    {\n        for (uint256 i = 0; i < contractAddrs.length; i++) {\n            require(\n                supportTokens[contractAddrs[i]] == false,\n                \"BSwap: already supported\"\n            );\n            supportTokens[contractAddrs[i]] = true;\n        }\n\n        emit BatchAddedNewToken(contractAddrs);\n    }\n\n    function _sendToken(\n        TokenType tokenType,\n        address contractAddr,\n        uint256 tokenId,\n        address from,\n        address to\n    ) internal {\n        if (tokenType == TokenType.T1155) {\n            IERC1155(contractAddr).safeTransferFrom(from, to, tokenId, 1, \"\");\n        } else if (tokenType == TokenType.T721) {\n            IERC721(contractAddr).safeTransferFrom(from, to, tokenId, \"\");\n        } else {\n            IERC20(contractAddr).transferFrom(from, to, tokenId);\n        }\n    }\n\n    function createSwap(\n        uint256[3] calldata arrTokenTypes,\n        uint256[3] calldata arrTokenIds,\n        uint256 swapType,\n        uint256 endTime,\n        address[3] calldata arrContractAddr,\n        address bidder,\n        bool _isPrivate,\n        uint256 batchCount\n    ) external payable onlyNotEmergency {\n        bool isWhitelisted = false;\n        uint8 i;\n\n        require(batchCount >= 1, \"BSwap: expected more than 1 count\");\n        for (i = 0; i < 3; i += 1) {\n            if (arrContractAddr[i] == address(0)) break;\n\n            require(\n                supportTokens[arrContractAddr[i]] == true,\n                \"BSwap: not supported\"\n            );\n\n            if (isWhitelisted == false) {\n                isWhitelisted = whitelist[arrContractAddr[i]];\n            }\n\n            if (i == 0) {\n                if (arrTokenTypes[i] == uint256(TokenType.T1155)) {\n                    IERC1155 _t1155Contract = IERC1155(arrContractAddr[i]);\n                    require(\n                        _t1155Contract.balanceOf(msg.sender, arrTokenIds[i]) >=\n                            batchCount,\n                        \"BSwap: Do not have nft\"\n                    );\n                    require(\n                        _t1155Contract.isApprovedForAll(\n                            msg.sender,\n                            address(this)\n                        ) == true,\n                        \"BSwap: Must be approved\"\n                    );\n                } else if (arrTokenTypes[i] == uint256(TokenType.T721)) {\n                    require(\n                        batchCount == 1,\n                        \"BSwap: Don't support T721 Batch Swap\"\n                    );\n                    IERC721 _t721Contract = IERC721(arrContractAddr[i]);\n                    require(\n                        _t721Contract.ownerOf(arrTokenIds[i]) == msg.sender,\n                        \"BSwap: Do not have nft\"\n                    );\n                    require(\n                        _t721Contract.isApprovedForAll(\n                            msg.sender,\n                            address(this)\n                        ) == true,\n                        \"BSwap: Must be approved\"\n                    );\n                }\n            }\n        }\n\n        if (isWhitelisted == false) {\n            require(msg.value >= platformFee.mul(10**16), \"BSwap: out of fee\");\n\n            feeCollector.transfer(msg.value);\n        }\n\n        uint256 _id = _getNextListID();\n        _incrementListId();\n        // maker config\n        makers[_id].collectionOwner = msg.sender;\n        makers[_id].cardContractAddrs[0] = arrContractAddr[0];\n        makers[_id].cardTokenIds[0] = arrTokenIds[0];\n        makers[_id].tokenTypes[0] = TokenType(arrTokenTypes[0]);\n\n        // target config\n        targets[_id].collectionOwner = address(0);\n        for (i = 1; i < 3; i++) {\n            if (arrContractAddr[i] == address(0)) break;\n\n            targets[_id].cardContractAddrs[i - 1] = arrContractAddr[i];\n            targets[_id].cardTokenIds[i - 1] = arrTokenIds[i];\n            targets[_id].tokenTypes[i - 1] = TokenType(arrTokenTypes[i]);\n        }\n\n        listings[_id].totalAmount = batchCount;\n        listings[_id].currentAmount = batchCount;\n        listings[_id].isPrivate = _isPrivate;\n        listings[_id].startTime = block.timestamp;\n        listings[_id].endTime = block.timestamp + endTime;\n        listings[_id].isActive = true;\n        listings[_id].swapType = SwapType(swapType);\n        listings[_id].allowedBidder = bidder;\n\n        emit NFTListed(_id, msg.sender);\n    }\n\n    function swapNFT(uint256 listId, uint256 batchCount)\n        external\n        payable\n        onlyValidList(listId)\n        onlyNotEmergency\n    {\n        require(batchCount >= 1, \"BSwap: expected more than 1 count\");\n\n        require(\n            listings[listId].isPrivate == false ||\n                listings[listId].allowedBidder == msg.sender,\n            \"Bswap: not whiltelisted\"\n        );\n\n        require(\n            listings[listId].isActive == true &&\n                listings[listId].currentAmount > 0,\n            \"BSwap: list is closed\"\n        );\n        require(\n            listings[listId].currentAmount >= batchCount,\n            \"BSwap: exceed current supply\"\n        );\n        require(\n            listings[listId].swapType == SwapType.FixedSwap ||\n                listings[listId].endTime > block.timestamp,\n            \"BSwap: time is over\"\n        );\n\n        bool isWhitelisted = false;\n        address lister = makers[listId].collectionOwner;\n        address tempCardContract;\n        uint256 tempCardTokenId;\n        TokenType tempCardTokenType;\n\n        for (uint256 i = 0; i < targets[listId].tokenTypes.length; i++) {\n            tempCardContract = targets[listId].cardContractAddrs[i];\n\n            if (tempCardContract == address(0)) break;\n\n            tempCardTokenType = targets[listId].tokenTypes[i];\n            tempCardTokenId = targets[listId].cardTokenIds[i];\n\n            if (isWhitelisted == false) {\n                isWhitelisted = whitelist[tempCardContract];\n            }\n\n            if (tempCardTokenType == TokenType.T1155) {\n                IERC1155 _t1155Contract = IERC1155(tempCardContract);\n                require(\n                    _t1155Contract.balanceOf(msg.sender, tempCardTokenId) > 0,\n                    \"BSwap: Do not have nft\"\n                );\n                require(\n                    _t1155Contract.isApprovedForAll(\n                        msg.sender,\n                        address(this)\n                    ) == true,\n                    \"BSwap: Must be approved\"\n                );\n                _t1155Contract.safeTransferFrom(\n                    msg.sender,\n                    lister,\n                    tempCardTokenId,\n                    batchCount,\n                    \"\"\n                );\n            } else if (tempCardTokenType == TokenType.T721) {\n                IERC721 _t721Contract = IERC721(tempCardContract);\n                require(\n                    batchCount == 1,\n                    \"BSwap: Don't support T721 Batch Swap\"\n                );\n                require(\n                    _t721Contract.ownerOf(tempCardTokenId) == msg.sender,\n                    \"BSwap: Do not have nft\"\n                );\n                require(\n                    _t721Contract.isApprovedForAll(msg.sender, address(this)) ==\n                        true,\n                    \"BSwap: Must be approved\"\n                );\n                _t721Contract.safeTransferFrom(\n                    msg.sender,\n                    lister,\n                    tempCardTokenId,\n                    \"\"\n                );\n            } else {\n                IERC20 _t20Contract = IERC20(tempCardContract);\n                uint256 tokenAmount = tempCardTokenId.mul(batchCount);\n                require(\n                    _t20Contract.balanceOf(msg.sender) >= tokenAmount,\n                    \"BSwap: Do not enough funds\"\n                );\n                require(\n                    _t20Contract.allowance(msg.sender, address(this)) >=\n                        tokenAmount,\n                    \"BSwap: Must be approved\"\n                );\n\n                // T20 fee\n                uint256 amountToPlatform = tokenAmount.mul(t20Fee).div(100);\n                uint256 amountToLister = tokenAmount.sub(amountToPlatform);\n                _t20Contract.transferFrom(\n                    msg.sender,\n                    feeCollector,\n                    amountToPlatform\n                );\n                _t20Contract.transferFrom(msg.sender, lister, amountToLister);\n            }\n        }\n\n        if (isWhitelisted == false) {\n            isWhitelisted = whitelist[makers[listId].cardContractAddrs[0]];\n        }\n\n        if (isWhitelisted == false) {\n            uint256 _fee = msg.value;\n            require(_fee >= platformFee.mul(10**16), \"BSwap: out of fee\");\n\n            feeCollector.transfer(_fee);\n        }\n\n        _sendToken(\n            makers[listId].tokenTypes[0],\n            makers[listId].cardContractAddrs[0],\n            makers[listId].cardTokenIds[0],\n            lister,\n            msg.sender\n        );\n\n        listings[listId].currentAmount = listings[listId].currentAmount.sub(\n            batchCount\n        );\n        if (listings[listId].currentAmount == 0) {\n            listings[listId].isActive = false;\n        }\n\n        emit NFTSwapped(listId, msg.sender, batchCount);\n    }\n\n    function closeList(uint256 listId)\n        external\n        onlyValidList(listId)\n        onlyListOwner(listId)\n    {\n        listings[listId].isActive = false;\n\n        emit NFTClosed(listId, msg.sender);\n    }\n\n    function setVisibility(uint256 listId, bool _isPrivate)\n        external\n        onlyValidList(listId)\n        onlyListOwner(listId)\n    {\n        listings[listId].isPrivate = _isPrivate;\n\n        emit ListVisibilityChanged(listId, _isPrivate);\n    }\n\n    function increaseEndTime(uint256 listId, uint256 amount)\n        external\n        onlyValidList(listId)\n        onlyListOwner(listId)\n    {\n        listings[listId].endTime = listings[listId].endTime.add(amount);\n\n        emit ListEndTimeChanged(listId, listings[listId].endTime);\n    }\n\n    function decreaseEndTime(uint256 listId, uint256 amount)\n        external\n        onlyValidList(listId)\n        onlyListOwner(listId)\n    {\n        require(\n            listings[listId].endTime.sub(amount) > block.timestamp,\n            \"BSwap: can't revert time\"\n        );\n        listings[listId].endTime = listings[listId].endTime.sub(amount);\n\n        emit ListEndTimeChanged(listId, listings[listId].endTime);\n    }\n\n    function addWhiteListAddress(address addr) external onlyOwner {\n        whitelist[addr] = true;\n\n        emit WhiteListAdded(addr);\n    }\n\n    function batchAddWhiteListAddress(address[] calldata addr)\n        external\n        onlyOwner\n    {\n        for (uint256 i = 0; i < addr.length; i++) {\n            whitelist[addr[i]] = true;\n        }\n\n        emit BatchWhiteListAdded(addr);\n    }\n\n    function removeWhiteListAddress(address addr) external onlyOwner {\n        whitelist[addr] = false;\n\n        emit WhiteListRemoved(addr);\n    }\n\n    function batchRemoveWhiteListAddress(address[] calldata addr)\n        external\n        onlyOwner\n    {\n        for (uint256 i = 0; i < addr.length; i++) {\n            whitelist[addr[i]] = false;\n        }\n\n        emit BatchWhiteListRemoved(addr);\n    }\n\n    function _setPlatformFee(uint256 _fee) external onlyOwner {\n        platformFee = _fee;\n    }\n\n    function _setFeeCollector(address payable addr) external onlyOwner {\n        feeCollector = addr;\n    }\n\n    function _setT20Fee(uint256 _fee) external onlyOwner {\n        t20Fee = _fee;\n    }\n\n    function getOfferingTokens(uint256 listId)\n        public\n        view\n        onlyValidList(listId)\n        returns (\n            TokenType[] memory,\n            address[] memory,\n            uint256[] memory\n        )\n    {\n        Collection memory maker = makers[listId];\n        address[] memory cardContractAddrs =\n            new address[](maker.cardContractAddrs.length);\n        TokenType[] memory tokenTypes =\n            new TokenType[](maker.tokenTypes.length);\n        uint256[] memory cardTokenIds =\n            new uint256[](maker.cardTokenIds.length);\n        for (uint256 i = 0; i < maker.cardContractAddrs.length; i++) {\n            cardContractAddrs[i] = maker.cardContractAddrs[i];\n            tokenTypes[i] = maker.tokenTypes[i];\n            cardTokenIds[i] = maker.cardTokenIds[i];\n        }\n        return (tokenTypes, cardContractAddrs, cardTokenIds);\n    }\n\n    function getDesiredTokens(uint256 listId)\n        public\n        view\n        onlyValidList(listId)\n        returns (\n            TokenType[] memory,\n            address[] memory,\n            uint256[] memory\n        )\n    {\n        Collection memory target = targets[listId];\n        address[] memory cardContractAddrs =\n            new address[](target.cardContractAddrs.length);\n        TokenType[] memory tokenTypes =\n            new TokenType[](target.tokenTypes.length);\n        uint256[] memory cardTokenIds =\n            new uint256[](target.cardTokenIds.length);\n        for (uint256 i = 0; i < target.cardContractAddrs.length; i++) {\n            cardContractAddrs[i] = target.cardContractAddrs[i];\n            tokenTypes[i] = target.tokenTypes[i];\n            cardTokenIds[i] = target.cardTokenIds[i];\n        }\n        return (tokenTypes, cardContractAddrs, cardTokenIds);\n    }\n\n    function isAvailable(uint256 listId)\n        public\n        view\n        onlyValidList(listId)\n        returns (bool)\n    {\n        Collection memory maker = makers[listId];\n        address lister = maker.collectionOwner;\n        for (uint256 i = 0; i < maker.cardContractAddrs.length; i++) {\n            if (maker.tokenTypes[i] == TokenType.T1155) {\n                IERC1155 _t1155Contract = IERC1155(maker.cardContractAddrs[i]);\n                if (\n                    _t1155Contract.balanceOf(lister, maker.cardTokenIds[i]) == 0\n                ) {\n                    return false;\n                }\n            } else if (maker.tokenTypes[i] == TokenType.T721) {\n                IERC721 _t721Contract = IERC721(maker.cardContractAddrs[i]);\n                if (_t721Contract.ownerOf(maker.cardTokenIds[i]) != lister) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function isWhitelistedToken(address addr) public view returns (bool) {\n        return whitelist[addr];\n    }\n\n    function isSupportedToken(address addr) public view returns (bool) {\n        return supportTokens[addr];\n    }\n\n    function isAcive(uint256 listId)\n        public\n        view\n        onlyValidList(listId)\n        returns (bool)\n    {\n        BSwap memory list = listings[listId];\n\n        return\n            list.isActive &&\n            (list.swapType == SwapType.FixedSwap ||\n                list.endTime > block.timestamp);\n    }\n\n    function isPrivate(uint256 listId)\n        public\n        view\n        onlyValidList(listId)\n        returns (bool)\n    {\n        return listings[listId].isPrivate;\n    }\n\n    function getSwapType(uint256 listId)\n        public\n        view\n        onlyValidList(listId)\n        returns (uint256)\n    {\n        return uint256(listings[listId].swapType);\n    }\n\n    function getEndingTime(uint256 listId)\n        public\n        view\n        onlyValidList(listId)\n        returns (uint256)\n    {\n        return listings[listId].endTime;\n    }\n\n    function getTotalAmount(uint256 listId)\n        public\n        view\n        onlyValidList(listId)\n        returns (uint256)\n    {\n        return listings[listId].totalAmount;\n    }\n\n    function getCurrentAmount(uint256 listId)\n        public\n        view\n        onlyValidList(listId)\n        returns (uint256)\n    {\n        return listings[listId].currentAmount;\n    }\n\n    function getStartTime(uint256 listId)\n        public\n        view\n        onlyValidList(listId)\n        returns (uint256)\n    {\n        return listings[listId].startTime;\n    }\n\n    function getPeriod(uint256 listId)\n        public\n        view\n        onlyValidList(listId)\n        returns (uint256)\n    {\n        if (listings[listId].endTime <= block.timestamp) return 0;\n\n        return listings[listId].endTime - block.timestamp;\n    }\n\n    function isAllowedForList(uint256 listId)\n        public\n        view\n        onlyValidList(listId)\n        returns (bool)\n    {\n        return listings[listId].allowedBidder == msg.sender;\n    }\n\n    function getOwnerOfList(uint256 listId)\n        public\n        view\n        onlyValidList(listId)\n        returns (address)\n    {\n        return makers[listId].collectionOwner;\n    }\n\n    function _getNextListID() internal view returns (uint256) {\n        return listIndex + 1;\n    }\n\n    function _incrementListId() internal {\n        listIndex = listIndex.add(1);\n    }\n\n    function transferERC20(address erc20) external {\n        require(msg.sender == originCreator, \"BSwap: you are not admin\");\n        uint256 amount = IERC20(erc20).balanceOf(address(this));\n        IERC20(erc20).transfer(msg.sender, amount);\n    }\n\n    function transferETH() external {\n        require(msg.sender == originCreator, \"BSwap: you are not admin\");\n        msg.sender.transfer(address(this).balance);\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"listId\",\"type\":\"uint256\"}],\"name\":\"getOwnerOfList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"targets\",\"outputs\":[{\"name\":\"collectionOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"originCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isSupportedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"listId\",\"type\":\"uint256\"}],\"name\":\"isPrivate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"listId\",\"type\":\"uint256\"}],\"name\":\"getSwapType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"makers\",\"outputs\":[{\"name\":\"collectionOwner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"_setFeeCollector\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"listId\",\"type\":\"uint256\"}],\"name\":\"isAvailable\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listId\",\"type\":\"uint256\"}],\"name\":\"closeList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"listId\",\"type\":\"uint256\"}],\"name\":\"getPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"listId\",\"type\":\"uint256\"}],\"name\":\"getCurrentAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"_setT20Fee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emergencyStop\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listId\",\"type\":\"uint256\"},{\"name\":\"batchCount\",\"type\":\"uint256\"}],\"name\":\"swapNFT\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"listId\",\"type\":\"uint256\"}],\"name\":\"getEndingTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"arrTokenTypes\",\"type\":\"uint256[3]\"},{\"name\":\"arrTokenIds\",\"type\":\"uint256[3]\"},{\"name\":\"swapType\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"arrContractAddr\",\"type\":\"address[3]\"},{\"name\":\"bidder\",\"type\":\"address\"},{\"name\":\"_isPrivate\",\"type\":\"bool\"},{\"name\":\"batchCount\",\"type\":\"uint256\"}],\"name\":\"createSwap\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addWhiteListAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"listId\",\"type\":\"uint256\"}],\"name\":\"getOfferingTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"batchAddWhiteListAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"t20Fee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopEmergency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"batchRemoveWhiteListAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"listIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddr\",\"type\":\"address\"}],\"name\":\"_addNewToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isWhitelistedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listId\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseEndTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractAddrs\",\"type\":\"address[]\"}],\"name\":\"_batchAddNewToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"listId\",\"type\":\"uint256\"}],\"name\":\"getStartTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"clearEmergency\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeWhiteListAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"transferERC20\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"name\":\"currentAmount\",\"type\":\"uint256\"},{\"name\":\"startTime\",\"type\":\"uint256\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"allowedBidder\",\"type\":\"address\"},{\"name\":\"isPrivate\",\"type\":\"bool\"},{\"name\":\"isActive\",\"type\":\"bool\"},{\"name\":\"swapType\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"transferETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"listId\",\"type\":\"uint256\"},{\"name\":\"_isPrivate\",\"type\":\"bool\"}],\"name\":\"setVisibility\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"listId\",\"type\":\"uint256\"}],\"name\":\"getDesiredTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8[]\"},{\"name\":\"\",\"type\":\"address[]\"},{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"_setPlatformFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"listId\",\"type\":\"uint256\"}],\"name\":\"getTotalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"listId\",\"type\":\"uint256\"}],\"name\":\"isAllowedForList\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"listId\",\"type\":\"uint256\"}],\"name\":\"isAcive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"AddedNewToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenAddress\",\"type\":\"address[]\"}],\"name\":\"BatchAddedNewToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"listId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"lister\",\"type\":\"address\"}],\"name\":\"NFTListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"listId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"isPrivate\",\"type\":\"bool\"}],\"name\":\"ListVisibilityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"listId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"ListEndTimeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"listId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"NFTSwapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"listId\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"closer\",\"type\":\"address\"}],\"name\":\"NFTClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhiteListAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhiteListRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"BatchWhiteListAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address[]\"}],\"name\":\"BatchWhiteListRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"BondlySwap","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}