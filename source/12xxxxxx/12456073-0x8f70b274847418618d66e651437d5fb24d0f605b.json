{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n// Sources flattened with hardhat v2.0.5 https://hardhat.org\r\n// File contracts/interface/IFlashloanExecutor.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IFlashloanExecutor {\r\n    function executeOperation(\r\n        address reserve,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        bytes memory data\r\n    ) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol@v3.3.0\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMathUpgradeable {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/library/SafeRatioMath.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\nlibrary SafeRatioMath {\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    uint256 private constant BASE = 10**18;\r\n    uint256 private constant DOUBLE = 10**36;\r\n\r\n    function divup(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x.add(y.sub(1)).div(y);\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x.mul(y).div(BASE);\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x.mul(BASE).div(y);\r\n    }\r\n\r\n    function rdivup(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x.mul(BASE).add(y.sub(1)).div(y);\r\n    }\r\n\r\n    function tmul(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 z\r\n    ) internal pure returns (uint256 result) {\r\n        result = x.mul(y).mul(z).div(DOUBLE);\r\n    }\r\n\r\n    function rpow(\r\n        uint256 x,\r\n        uint256 n,\r\n        uint256 base\r\n    ) internal pure returns (uint256 z) {\r\n        assembly {\r\n            switch x\r\n                case 0 {\r\n                    switch n\r\n                        case 0 {\r\n                            z := base\r\n                        }\r\n                        default {\r\n                            z := 0\r\n                        }\r\n                }\r\n                default {\r\n                    switch mod(n, 2)\r\n                        case 0 {\r\n                            z := base\r\n                        }\r\n                        default {\r\n                            z := x\r\n                        }\r\n                    let half := div(base, 2) // for rounding.\r\n\r\n                    for {\r\n                        n := div(n, 2)\r\n                    } n {\r\n                        n := div(n, 2)\r\n                    } {\r\n                        let xx := mul(x, x)\r\n                        if iszero(eq(div(xx, x), x)) {\r\n                            revert(0, 0)\r\n                        }\r\n                        let xxRound := add(xx, half)\r\n                        if lt(xxRound, xx) {\r\n                            revert(0, 0)\r\n                        }\r\n                        x := div(xxRound, base)\r\n                        if mod(n, 2) {\r\n                            let zx := mul(z, x)\r\n                            if and(\r\n                                iszero(iszero(x)),\r\n                                iszero(eq(div(zx, x), z))\r\n                            ) {\r\n                                revert(0, 0)\r\n                            }\r\n                            let zxRound := add(zx, half)\r\n                            if lt(zxRound, zx) {\r\n                                revert(0, 0)\r\n                            }\r\n                            z := div(zxRound, base)\r\n                        }\r\n                    }\r\n                }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol@v3.3.0\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/library/Initializable.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(\r\n            !_initialized,\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n\r\n        _;\r\n\r\n        _initialized = true;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/library/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\n// abstract contract ReentrancyGuardUpgradeable is Initializable {\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function __ReentrancyGuard_init() internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// File contracts/library/Ownable.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {_setPendingOwner} and {_acceptOwner}.\r\n */\r\ncontract Ownable {\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    address payable public owner;\r\n\r\n    /**\r\n     * @dev Returns the address of the current pending owner.\r\n     */\r\n    address payable public pendingOwner;\r\n\r\n    event NewOwner(address indexed previousOwner, address indexed newOwner);\r\n    event NewPendingOwner(\r\n        address indexed oldPendingOwner,\r\n        address indexed newPendingOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"onlyOwner: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal {\r\n        owner = msg.sender;\r\n        emit NewOwner(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Base on the inputing parameter `newPendingOwner` to check the exact error reason.\r\n     * @dev Transfer contract control to a new owner. The newPendingOwner must call `_acceptOwner` to finish the transfer.\r\n     * @param newPendingOwner New pending owner.\r\n     */\r\n    function _setPendingOwner(address payable newPendingOwner)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            newPendingOwner != address(0) && newPendingOwner != pendingOwner,\r\n            \"_setPendingOwner: New owenr can not be zero address and owner has been set!\"\r\n        );\r\n\r\n        // Gets current owner.\r\n        address oldPendingOwner = pendingOwner;\r\n\r\n        // Sets new pending owner.\r\n        pendingOwner = newPendingOwner;\r\n\r\n        emit NewPendingOwner(oldPendingOwner, newPendingOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Accepts the admin rights, but only for pendingOwenr.\r\n     */\r\n    function _acceptOwner() external {\r\n        require(\r\n            msg.sender == pendingOwner,\r\n            \"_acceptOwner: Only for pending owner!\"\r\n        );\r\n\r\n        // Gets current values for events.\r\n        address oldOwner = owner;\r\n        address oldPendingOwner = pendingOwner;\r\n\r\n        // Set the new contract owner.\r\n        owner = pendingOwner;\r\n\r\n        // Clear the pendingOwner.\r\n        pendingOwner = address(0);\r\n\r\n        emit NewOwner(oldOwner, owner);\r\n        emit NewPendingOwner(oldPendingOwner, pendingOwner);\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File contracts/library/ERC20.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 {\r\n    using SafeMathUpgradeable for uint256;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n    uint256 public totalSupply;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function __ERC20_init(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint8 decimals_\r\n    ) internal {\r\n        name = name_;\r\n        symbol = symbol_;\r\n        decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, allowance[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            allowance[msg.sender][spender].add(addedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        virtual\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            allowance[msg.sender][spender].sub(subtractedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        balanceOf[sender] = balanceOf[sender].sub(amount);\r\n        balanceOf[recipient] = balanceOf[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        totalSupply = totalSupply.add(amount);\r\n        balanceOf[account] = balanceOf[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        balanceOf[account] = balanceOf[account].sub(amount);\r\n        totalSupply = totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance if caller is not the `account`.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller other than `msg.sender` must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal virtual {\r\n        if (msg.sender != account)\r\n            _approve(\r\n                account,\r\n                msg.sender,\r\n                allowance[account][msg.sender].sub(amount)\r\n            );\r\n\r\n        _burn(account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        allowance[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File contracts/interface/IInterestRateModelInterface.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title dForce Lending Protocol's InterestRateModel Interface.\r\n * @author dForce Team.\r\n */\r\ninterface IInterestRateModelInterface {\r\n    function isInterestRateModel() external view returns (bool);\r\n\r\n    /**\r\n     * @dev Calculates the current borrow interest rate per block.\r\n     * @param cash The total amount of cash the market has.\r\n     * @param borrows The total amount of borrows the market has.\r\n     * @param reserves The total amnount of reserves the market has.\r\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18).\r\n     */\r\n    function getBorrowRate(\r\n        uint256 cash,\r\n        uint256 borrows,\r\n        uint256 reserves\r\n    ) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Calculates the current supply interest rate per block.\r\n     * @param cash The total amount of cash the market has.\r\n     * @param borrows The total amount of borrows the market has.\r\n     * @param reserves The total amnount of reserves the market has.\r\n     * @param reserveRatio The current reserve factor the market has.\r\n     * @return The supply rate per block (as a percentage, and scaled by 1e18).\r\n     */\r\n    function getSupplyRate(\r\n        uint256 cash,\r\n        uint256 borrows,\r\n        uint256 reserves,\r\n        uint256 reserveRatio\r\n    ) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/interface/IControllerInterface.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface IControllerAdminInterface {\r\n    /// @notice Emitted when an admin supports a market\r\n    event MarketAdded(\r\n        address iToken,\r\n        uint256 collateralFactor,\r\n        uint256 borrowFactor,\r\n        uint256 supplyCapacity,\r\n        uint256 borrowCapacity,\r\n        uint256 distributionFactor\r\n    );\r\n\r\n    function _addMarket(\r\n        address _iToken,\r\n        uint256 _collateralFactor,\r\n        uint256 _borrowFactor,\r\n        uint256 _supplyCapacity,\r\n        uint256 _borrowCapacity,\r\n        uint256 _distributionFactor\r\n    ) external;\r\n\r\n    /// @notice Emitted when new price oracle is set\r\n    event NewPriceOracle(address oldPriceOracle, address newPriceOracle);\r\n\r\n    function _setPriceOracle(address newOracle) external;\r\n\r\n    /// @notice Emitted when close factor is changed by admin\r\n    event NewCloseFactor(\r\n        uint256 oldCloseFactorMantissa,\r\n        uint256 newCloseFactorMantissa\r\n    );\r\n\r\n    function _setCloseFactor(uint256 newCloseFactorMantissa) external;\r\n\r\n    /// @notice Emitted when liquidation incentive is changed by admin\r\n    event NewLiquidationIncentive(\r\n        uint256 oldLiquidationIncentiveMantissa,\r\n        uint256 newLiquidationIncentiveMantissa\r\n    );\r\n\r\n    function _setLiquidationIncentive(uint256 newLiquidationIncentiveMantissa)\r\n        external;\r\n\r\n    /// @notice Emitted when iToken's collateral factor is changed by admin\r\n    event NewCollateralFactor(\r\n        address iToken,\r\n        uint256 oldCollateralFactorMantissa,\r\n        uint256 newCollateralFactorMantissa\r\n    );\r\n\r\n    function _setCollateralFactor(\r\n        address iToken,\r\n        uint256 newCollateralFactorMantissa\r\n    ) external;\r\n\r\n    /// @notice Emitted when iToken's borrow factor is changed by admin\r\n    event NewBorrowFactor(\r\n        address iToken,\r\n        uint256 oldBorrowFactorMantissa,\r\n        uint256 newBorrowFactorMantissa\r\n    );\r\n\r\n    function _setBorrowFactor(address iToken, uint256 newBorrowFactorMantissa)\r\n        external;\r\n\r\n    /// @notice Emitted when iToken's borrow capacity is changed by admin\r\n    event NewBorrowCapacity(\r\n        address iToken,\r\n        uint256 oldBorrowCapacity,\r\n        uint256 newBorrowCapacity\r\n    );\r\n\r\n    function _setBorrowCapacity(address iToken, uint256 newBorrowCapacity)\r\n        external;\r\n\r\n    /// @notice Emitted when iToken's supply capacity is changed by admin\r\n    event NewSupplyCapacity(\r\n        address iToken,\r\n        uint256 oldSupplyCapacity,\r\n        uint256 newSupplyCapacity\r\n    );\r\n\r\n    function _setSupplyCapacity(address iToken, uint256 newSupplyCapacity)\r\n        external;\r\n\r\n    /// @notice Emitted when pause guardian is changed by admin\r\n    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\r\n\r\n    function _setPauseGuardian(address newPauseGuardian) external;\r\n\r\n    /// @notice Emitted when mint is paused/unpaused by admin or pause guardian\r\n    event MintPaused(address iToken, bool paused);\r\n\r\n    function _setMintPaused(address iToken, bool paused) external;\r\n\r\n    function _setAllMintPaused(bool paused) external;\r\n\r\n    /// @notice Emitted when redeem is paused/unpaused by admin or pause guardian\r\n    event RedeemPaused(address iToken, bool paused);\r\n\r\n    function _setRedeemPaused(address iToken, bool paused) external;\r\n\r\n    function _setAllRedeemPaused(bool paused) external;\r\n\r\n    /// @notice Emitted when borrow is paused/unpaused by admin or pause guardian\r\n    event BorrowPaused(address iToken, bool paused);\r\n\r\n    function _setBorrowPaused(address iToken, bool paused) external;\r\n\r\n    function _setAllBorrowPaused(bool paused) external;\r\n\r\n    /// @notice Emitted when transfer is paused/unpaused by admin or pause guardian\r\n    event TransferPaused(bool paused);\r\n\r\n    function _setTransferPaused(bool paused) external;\r\n\r\n    /// @notice Emitted when seize is paused/unpaused by admin or pause guardian\r\n    event SeizePaused(bool paused);\r\n\r\n    function _setSeizePaused(bool paused) external;\r\n\r\n    function _setiTokenPaused(address iToken, bool paused) external;\r\n\r\n    function _setProtocolPaused(bool paused) external;\r\n\r\n    event NewRewardDistributor(\r\n        address oldRewardDistributor,\r\n        address _newRewardDistributor\r\n    );\r\n\r\n    function _setRewardDistributor(address _newRewardDistributor) external;\r\n}\r\n\r\ninterface IControllerPolicyInterface {\r\n    function beforeMint(\r\n        address iToken,\r\n        address account,\r\n        uint256 mintAmount\r\n    ) external;\r\n\r\n    function afterMint(\r\n        address iToken,\r\n        address minter,\r\n        uint256 mintAmount,\r\n        uint256 mintedAmount\r\n    ) external;\r\n\r\n    function beforeRedeem(\r\n        address iToken,\r\n        address redeemer,\r\n        uint256 redeemAmount\r\n    ) external;\r\n\r\n    function afterRedeem(\r\n        address iToken,\r\n        address redeemer,\r\n        uint256 redeemAmount,\r\n        uint256 redeemedAmount\r\n    ) external;\r\n\r\n    function beforeBorrow(\r\n        address iToken,\r\n        address borrower,\r\n        uint256 borrowAmount\r\n    ) external;\r\n\r\n    function afterBorrow(\r\n        address iToken,\r\n        address borrower,\r\n        uint256 borrowedAmount\r\n    ) external;\r\n\r\n    function beforeRepayBorrow(\r\n        address iToken,\r\n        address payer,\r\n        address borrower,\r\n        uint256 repayAmount\r\n    ) external;\r\n\r\n    function afterRepayBorrow(\r\n        address iToken,\r\n        address payer,\r\n        address borrower,\r\n        uint256 repayAmount\r\n    ) external;\r\n\r\n    function beforeLiquidateBorrow(\r\n        address iTokenBorrowed,\r\n        address iTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 repayAmount\r\n    ) external;\r\n\r\n    function afterLiquidateBorrow(\r\n        address iTokenBorrowed,\r\n        address iTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 repaidAmount,\r\n        uint256 seizedAmount\r\n    ) external;\r\n\r\n    function beforeSeize(\r\n        address iTokenBorrowed,\r\n        address iTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 seizeAmount\r\n    ) external;\r\n\r\n    function afterSeize(\r\n        address iTokenBorrowed,\r\n        address iTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 seizedAmount\r\n    ) external;\r\n\r\n    function beforeTransfer(\r\n        address iToken,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function afterTransfer(\r\n        address iToken,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function beforeFlashloan(\r\n        address iToken,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function afterFlashloan(\r\n        address iToken,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n\r\ninterface IControllerAccountEquityInterface {\r\n    function calcAccountEquity(address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function liquidateCalculateSeizeTokens(\r\n        address iTokenBorrowed,\r\n        address iTokenCollateral,\r\n        uint256 actualRepayAmount\r\n    ) external view returns (uint256);\r\n}\r\n\r\ninterface IControllerAccountInterface {\r\n    function hasEnteredMarket(address account, address iToken)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function getEnteredMarkets(address account)\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n\r\n    /// @notice Emitted when an account enters a market\r\n    event MarketEntered(address iToken, address account);\r\n\r\n    function enterMarkets(address[] calldata iTokens)\r\n        external\r\n        returns (bool[] memory);\r\n\r\n    /// @notice Emitted when an account exits a market\r\n    event MarketExited(address iToken, address account);\r\n\r\n    function exitMarkets(address[] calldata iTokens)\r\n        external\r\n        returns (bool[] memory);\r\n\r\n    /// @notice Emitted when an account add a borrow asset\r\n    event BorrowedAdded(address iToken, address account);\r\n\r\n    /// @notice Emitted when an account remove a borrow asset\r\n    event BorrowedRemoved(address iToken, address account);\r\n\r\n    function hasBorrowed(address account, address iToken)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function getBorrowedAssets(address account)\r\n        external\r\n        view\r\n        returns (address[] memory);\r\n}\r\n\r\ninterface IControllerInterface is\r\n    IControllerAdminInterface,\r\n    IControllerPolicyInterface,\r\n    IControllerAccountEquityInterface,\r\n    IControllerAccountInterface\r\n{\r\n    /**\r\n     * @notice Security checks when updating the comptroller of a market, always expect to return true.\r\n     */\r\n    function isController() external view returns (bool);\r\n\r\n    /**\r\n     * @notice Return all of the iTokens\r\n     * @return The list of iToken addresses\r\n     */\r\n    function getAlliTokens() external view returns (address[] memory);\r\n\r\n    /**\r\n     * @notice Check whether a iToken is listed in controller\r\n     * @param _iToken The iToken to check for\r\n     * @return true if the iToken is listed otherwise false\r\n     */\r\n    function hasiToken(address _iToken) external view returns (bool);\r\n}\r\n\r\n\r\n// File contracts/TokenBase/TokenStorage.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title dForce's lending Token storage Contract\r\n * @author dForce\r\n */\r\ncontract TokenStorage is Initializable, ReentrancyGuard, Ownable, ERC20 {\r\n    //----------------------------------\r\n    //********* Token Storage **********\r\n    //----------------------------------\r\n\r\n    uint256 constant BASE = 1e18;\r\n\r\n    /**\r\n     * @dev Whether this token is supported in the market or not.\r\n     */\r\n    bool public constant isSupported = true;\r\n\r\n    /**\r\n     * @dev Maximum borrow rate(0.1% per block, scaled by 1e18).\r\n     */\r\n    uint256 constant maxBorrowRate = 0.001e18;\r\n\r\n    /**\r\n     * @dev Interest ratio set aside for reserves(scaled by 1e18).\r\n     */\r\n    uint256 public reserveRatio;\r\n\r\n    /**\r\n     * @dev Maximum interest ratio that can be set aside for reserves(scaled by 1e18).\r\n     */\r\n    uint256 constant maxReserveRatio = 1e18;\r\n\r\n    /**\r\n     * @notice This ratio is relative to the total flashloan fee.\r\n     * @dev Flash loan fee rate(scaled by 1e18).\r\n     */\r\n    uint256 public flashloanFeeRatio;\r\n\r\n    /**\r\n     * @notice This ratio is relative to the total flashloan fee.\r\n     * @dev Protocol fee rate when a flashloan happens(scaled by 1e18);\r\n     */\r\n    uint256 public protocolFeeRatio;\r\n\r\n    /**\r\n     * @dev Underlying token address.\r\n     */\r\n    IERC20Upgradeable public underlying;\r\n\r\n    /**\r\n     * @dev Current interest rate model contract.\r\n     */\r\n    IInterestRateModelInterface public interestRateModel;\r\n\r\n    /**\r\n     * @dev Core control of the contract.\r\n     */\r\n    IControllerInterface public controller;\r\n\r\n    /**\r\n     * @dev Initial exchange rate(scaled by 1e18).\r\n     */\r\n    uint256 constant initialExchangeRate = 1e18;\r\n\r\n    /**\r\n     * @dev The interest index for borrows of asset as of blockNumber.\r\n     */\r\n    uint256 public borrowIndex;\r\n\r\n    /**\r\n     * @dev Block number that interest was last accrued at.\r\n     */\r\n    uint256 public accrualBlockNumber;\r\n\r\n    /**\r\n     * @dev Total amount of this reserve borrowed.\r\n     */\r\n    uint256 public totalBorrows;\r\n\r\n    /**\r\n     * @dev Total amount of this reserves accrued.\r\n     */\r\n    uint256 public totalReserves;\r\n\r\n    /**\r\n     * @dev Container for user balance information written to storage.\r\n     * @param principal User total balance with accrued interest after applying the user's most recent balance-changing action.\r\n     * @param interestIndex The total interestIndex as calculated after applying the user's most recent balance-changing action.\r\n     */\r\n    struct BorrowSnapshot {\r\n        uint256 principal;\r\n        uint256 interestIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev 2-level map: userAddress -> assetAddress -> balance for borrows.\r\n     */\r\n    mapping(address => BorrowSnapshot) internal accountBorrows;\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n    // keccak256(\"Permit(address owner,address spender,uint256 chainId, uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH =\r\n        0x576144ed657c8304561e56ca632e17751956250114636e8c01f64a7f2c6d98cf;\r\n    mapping(address => uint256) public nonces;\r\n}\r\n\r\n\r\n// File contracts/TokenBase/TokenEvent.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title dForce's lending Token event Contract\r\n * @author dForce\r\n */\r\ncontract TokenEvent is TokenStorage {\r\n    //----------------------------------\r\n    //********** User Events ***********\r\n    //----------------------------------\r\n\r\n    event UpdateInterest(\r\n        uint256 currentBlockNumber,\r\n        uint256 interestAccumulated,\r\n        uint256 borrowIndex,\r\n        uint256 cash,\r\n        uint256 totalBorrows,\r\n        uint256 totalReserves\r\n    );\r\n\r\n    event Mint(\r\n        address spender,\r\n        address recipient,\r\n        uint256 mintAmount,\r\n        uint256 mintTokens\r\n    );\r\n\r\n    event Redeem(\r\n        address from,\r\n        address recipient,\r\n        uint256 redeemiTokenAmount,\r\n        uint256 redeemUnderlyingAmount\r\n    );\r\n\r\n    /**\r\n     * @dev Emits when underlying is borrowed.\r\n     */\r\n    event Borrow(\r\n        address borrower,\r\n        uint256 borrowAmount,\r\n        uint256 accountBorrows,\r\n        uint256 accountInterestIndex,\r\n        uint256 totalBorrows\r\n    );\r\n\r\n    event RepayBorrow(\r\n        address payer,\r\n        address borrower,\r\n        uint256 repayAmount,\r\n        uint256 accountBorrows,\r\n        uint256 accountInterestIndex,\r\n        uint256 totalBorrows\r\n    );\r\n\r\n    event LiquidateBorrow(\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 repayAmount,\r\n        address iTokenCollateral,\r\n        uint256 seizeTokens\r\n    );\r\n\r\n    event Flashloan(\r\n        address loaner,\r\n        uint256 loanAmount,\r\n        uint256 flashloanFee,\r\n        uint256 protocolFee,\r\n        uint256 timestamp\r\n    );\r\n\r\n    //----------------------------------\r\n    //********** Owner Events **********\r\n    //----------------------------------\r\n\r\n    event NewReserveRatio(uint256 oldReserveRatio, uint256 newReserveRatio);\r\n    event NewFlashloanFeeRatio(\r\n        uint256 oldFlashloanFeeRatio,\r\n        uint256 newFlashloanFeeRatio\r\n    );\r\n    event NewProtocolFeeRatio(\r\n        uint256 oldProtocolFeeRatio,\r\n        uint256 newProtocolFeeRatio\r\n    );\r\n    event NewFlashloanFee(\r\n        uint256 oldFlashloanFeeRatio,\r\n        uint256 newFlashloanFeeRatio,\r\n        uint256 oldProtocolFeeRatio,\r\n        uint256 newProtocolFeeRatio\r\n    );\r\n\r\n    event NewInterestRateModel(\r\n        IInterestRateModelInterface oldInterestRateModel,\r\n        IInterestRateModelInterface newInterestRateModel\r\n    );\r\n\r\n    event NewController(\r\n        IControllerInterface oldController,\r\n        IControllerInterface newController\r\n    );\r\n\r\n    event ReservesWithdrawn(\r\n        address admin,\r\n        uint256 amount,\r\n        uint256 newTotalReserves,\r\n        uint256 oldTotalReserves\r\n    );\r\n}\r\n\r\n\r\n// File contracts/TokenBase/TokenAdmin.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title dForce's lending Token admin Contract\r\n * @author dForce\r\n */\r\nabstract contract TokenAdmin is TokenEvent {\r\n    //----------------------------------\r\n    //********* Owner Actions **********\r\n    //----------------------------------\r\n\r\n    modifier settleInterest() {\r\n        // Accrues interest.\r\n        _updateInterest();\r\n        require(\r\n            accrualBlockNumber == block.number,\r\n            \"settleInterest: Fail to accrue interest!\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new controller.\r\n     */\r\n    function _setController(IControllerInterface _newController)\r\n        external\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        IControllerInterface _oldController = controller;\r\n        // Ensures the input address is a controller contract.\r\n        require(\r\n            _newController.isController(),\r\n            \"_setController: This is not the controller contract!\"\r\n        );\r\n\r\n        // Sets to new controller.\r\n        controller = _newController;\r\n\r\n        emit NewController(_oldController, _newController);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new interest rate model.\r\n     * @param _newInterestRateModel The new interest rate model.\r\n     */\r\n    function _setInterestRateModel(\r\n        IInterestRateModelInterface _newInterestRateModel\r\n    ) external virtual onlyOwner {\r\n        // Gets current interest rate model.\r\n        IInterestRateModelInterface _oldInterestRateModel = interestRateModel;\r\n\r\n        // Ensures the input address is the interest model contract.\r\n        require(\r\n            _newInterestRateModel.isInterestRateModel(),\r\n            \"_setInterestRateModel: This is not the rate model contract!\"\r\n        );\r\n\r\n        // Set to the new interest rate model.\r\n        interestRateModel = _newInterestRateModel;\r\n\r\n        emit NewInterestRateModel(_oldInterestRateModel, _newInterestRateModel);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new reserve ratio.\r\n     */\r\n    function _setNewReserveRatio(uint256 _newReserveRatio)\r\n        external\r\n        virtual\r\n        onlyOwner\r\n        settleInterest\r\n    {\r\n        require(\r\n            _newReserveRatio <= maxReserveRatio,\r\n            \"_setNewReserveRatio: New reserve ratio too large!\"\r\n        );\r\n\r\n        // Gets current reserve ratio.\r\n        uint256 _oldReserveRatio = reserveRatio;\r\n\r\n        // Sets new reserve ratio.\r\n        reserveRatio = _newReserveRatio;\r\n\r\n        emit NewReserveRatio(_oldReserveRatio, _newReserveRatio);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new flashloan fee ratio.\r\n     */\r\n    function _setNewFlashloanFeeRatio(uint256 _newFlashloanFeeRatio)\r\n        external\r\n        virtual\r\n        onlyOwner\r\n        settleInterest\r\n    {\r\n        require(\r\n            _newFlashloanFeeRatio <= BASE,\r\n            \"setNewFlashloanFeeRatio: New flashloan ratio too large!\"\r\n        );\r\n\r\n        // Gets current reserve ratio.\r\n        uint256 _oldFlashloanFeeRatio = flashloanFeeRatio;\r\n\r\n        // Sets new reserve ratio.\r\n        flashloanFeeRatio = _newFlashloanFeeRatio;\r\n\r\n        emit NewFlashloanFeeRatio(_oldFlashloanFeeRatio, _newFlashloanFeeRatio);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new protocol fee ratio.\r\n     */\r\n    function _setNewProtocolFeeRatio(uint256 _newProtocolFeeRatio)\r\n        external\r\n        virtual\r\n        onlyOwner\r\n        settleInterest\r\n    // nonReentrant\r\n    {\r\n        require(\r\n            _newProtocolFeeRatio <= BASE,\r\n            \"_setNewProtocolFeeRatio: New protocol ratio too large!\"\r\n        );\r\n\r\n        // Gets current reserve ratio.\r\n        uint256 _oldProtocolFeeRatio = protocolFeeRatio;\r\n\r\n        // Sets new reserve ratio.\r\n        protocolFeeRatio = _newProtocolFeeRatio;\r\n\r\n        emit NewProtocolFeeRatio(_oldProtocolFeeRatio, _newProtocolFeeRatio);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin withdraws `_withdrawAmount` of the iToken.\r\n     * @param _withdrawAmount Amount of reserves to withdraw.\r\n     */\r\n    function _withdrawReserves(uint256 _withdrawAmount)\r\n        external\r\n        virtual\r\n        onlyOwner\r\n        settleInterest\r\n    // nonReentrant\r\n    {\r\n        require(\r\n            _withdrawAmount <= totalReserves &&\r\n                _withdrawAmount <= _getCurrentCash(),\r\n            \"_withdrawReserves: Invalid withdraw amount and do not have enough cash!\"\r\n        );\r\n\r\n        uint256 _oldTotalReserves = totalReserves;\r\n        // Updates total amount of the reserves.\r\n        totalReserves = totalReserves.sub(_withdrawAmount);\r\n\r\n        // Transfers reserve to the owner.\r\n        _doTransferOut(owner, _withdrawAmount);\r\n\r\n        emit ReservesWithdrawn(\r\n            owner,\r\n            _withdrawAmount,\r\n            totalReserves,\r\n            _oldTotalReserves\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates interest and update total borrows and reserves.\r\n     * @dev Updates total borrows and reserves with any accumulated interest.\r\n     */\r\n    function _updateInterest() internal virtual;\r\n\r\n    /**\r\n     * @dev Transfers underlying token out.\r\n     */\r\n    function _doTransferOut(address payable _recipient, uint256 _amount)\r\n        internal\r\n        virtual;\r\n\r\n    /**\r\n     * @dev Total amount of reserves owned by this contract.\r\n     */\r\n    function _getCurrentCash() internal view virtual returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/TokenBase/TokenERC20.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n/**\r\n * @title dForce's lending Token ERC20 Contract\r\n * @author dForce\r\n */\r\nabstract contract TokenERC20 is TokenAdmin {\r\n    /**\r\n     * @dev Transfers `_amount` tokens from `_spender` to `_recipient`.\r\n     * @param _spender The address of the source account.\r\n     * @param _recipient The address of the destination account.\r\n     * @param _amount The number of tokens to transfer.\r\n     */\r\n    function _transferTokens(\r\n        address _spender,\r\n        address _recipient,\r\n        uint256 _amount\r\n    ) internal returns (bool) {\r\n        require(\r\n            _spender != _recipient,\r\n            \"_transferTokens: Do not self-transfer!\"\r\n        );\r\n\r\n        controller.beforeTransfer(\r\n            address(this),\r\n            msg.sender,\r\n            _recipient,\r\n            _amount\r\n        );\r\n\r\n        _transfer(_spender, _recipient, _amount);\r\n\r\n        controller.afterTransfer(address(this), _spender, _recipient, _amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    //----------------------------------\r\n    //********* ERC20 Actions **********\r\n    //----------------------------------\r\n\r\n    /**\r\n     * @notice Cause iToken is an ERC20 token, so users can `transfer` them,\r\n     *         but this action is only allowed when after transferring tokens, the caller\r\n     *         does not have a shortfall.\r\n     * @dev Moves `_amount` tokens from caller to `_recipient`.\r\n     * @param _recipient The address of the destination account.\r\n     * @param _amount The number of tokens to transfer.\r\n     */\r\n    function transfer(address _recipient, uint256 _amount)\r\n        public\r\n        virtual\r\n        override\r\n        nonReentrant\r\n        returns (bool)\r\n    {\r\n        return _transferTokens(msg.sender, _recipient, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Cause iToken is an ERC20 token, so users can `transferFrom` them,\r\n     *         but this action is only allowed when after transferring tokens, the `_spender`\r\n     *         does not have a shortfall.\r\n     * @dev Moves `_amount` tokens from `_spender` to `_recipient`.\r\n     * @param _spender The address of the source account.\r\n     * @param _recipient The address of the destination account.\r\n     * @param _amount The number of tokens to transfer.\r\n     */\r\n    function transferFrom(\r\n        address _spender,\r\n        address _recipient,\r\n        uint256 _amount\r\n    ) public virtual override nonReentrant returns (bool) {\r\n        _approve(\r\n            _spender,\r\n            msg.sender,\r\n            allowance[_spender][msg.sender].sub(_amount)\r\n        );\r\n        return _transferTokens(_spender, _recipient, _amount);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/TokenBase/Base.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n * @title dForce's lending Base Contract\r\n * @author dForce\r\n */\r\nabstract contract Base is TokenERC20 {\r\n    using SafeRatioMath for uint256;\r\n\r\n    /**\r\n     * @notice Expects to call only once to create a new lending market.\r\n     * @param _name Token name.\r\n     * @param _symbol Token symbol.\r\n     * @param _controller Core controller contract address.\r\n     * @param _interestRateModel Token interest rate model contract address.\r\n     */\r\n    function _initialize(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals,\r\n        IControllerInterface _controller,\r\n        IInterestRateModelInterface _interestRateModel\r\n    ) internal virtual {\r\n        controller = _controller;\r\n        interestRateModel = _interestRateModel;\r\n        accrualBlockNumber = block.number;\r\n        borrowIndex = BASE;\r\n        flashloanFeeRatio = 0.0008e18;\r\n        protocolFeeRatio = 0.25e18;\r\n        __Ownable_init();\r\n        __ERC20_init(_name, _symbol, _decimals);\r\n        __ReentrancyGuard_init();\r\n\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\r\n                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n                ),\r\n                keccak256(bytes(_name)),\r\n                keccak256(bytes(\"1\")),\r\n                _getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    /*********************************/\r\n    /******** Security Check *********/\r\n    /*********************************/\r\n\r\n    /**\r\n     * @notice Check whether is a iToken contract, return false for iMSD contract.\r\n     */\r\n    function isiToken() external pure virtual returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    //----------------------------------\r\n    //******** Main calculation ********\r\n    //----------------------------------\r\n\r\n    struct InterestLocalVars {\r\n        uint256 borrowRate;\r\n        uint256 currentBlockNumber;\r\n        uint256 currentCash;\r\n        uint256 totalBorrows;\r\n        uint256 totalReserves;\r\n        uint256 borrowIndex;\r\n        uint256 blockDelta;\r\n        uint256 simpleInterestFactor;\r\n        uint256 interestAccumulated;\r\n        uint256 newTotalBorrows;\r\n        uint256 newTotalReserves;\r\n        uint256 newBorrowIndex;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates interest and update total borrows and reserves.\r\n     * @dev Updates total borrows and reserves with any accumulated interest.\r\n     */\r\n    function _updateInterest() internal virtual override {\r\n        // When more calls in the same block, only the first one takes effect, so for the\r\n        // following calls, nothing updates.\r\n        if (block.number != accrualBlockNumber) {\r\n            InterestLocalVars memory _vars;\r\n            _vars.currentCash = _getCurrentCash();\r\n            _vars.totalBorrows = totalBorrows;\r\n            _vars.totalReserves = totalReserves;\r\n\r\n            // Gets the current borrow interest rate.\r\n            _vars.borrowRate = interestRateModel.getBorrowRate(\r\n                _vars.currentCash,\r\n                _vars.totalBorrows,\r\n                _vars.totalReserves\r\n            );\r\n            require(\r\n                _vars.borrowRate <= maxBorrowRate,\r\n                \"_updateInterest: Borrow rate is too high!\"\r\n            );\r\n\r\n            // Records the current block number.\r\n            _vars.currentBlockNumber = block.number;\r\n\r\n            // Calculates the number of blocks elapsed since the last accrual.\r\n            _vars.blockDelta = _vars.currentBlockNumber.sub(accrualBlockNumber);\r\n\r\n            /**\r\n            * Calculates the interest accumulated into borrows and reserves and the new index:\r\n            *  simpleInterestFactor = borrowRate * blockDelta\r\n            *  interestAccumulated = simpleInterestFactor * totalBorrows\r\n            *  newTotalBorrows = interestAccumulated + totalBorrows\r\n            *  newTotalReserves = interestAccumulated * reserveFactor + totalReserves\r\n            *  newBorrowIndex = simpleInterestFactor * borrowIndex + borrowIndex\r\n            */\r\n            _vars.simpleInterestFactor = _vars.borrowRate.mul(_vars.blockDelta);\r\n            _vars.interestAccumulated = _vars.simpleInterestFactor.rmul(\r\n                _vars.totalBorrows\r\n            );\r\n            _vars.newTotalBorrows = _vars.interestAccumulated.add(\r\n                _vars.totalBorrows\r\n            );\r\n            _vars.newTotalReserves = reserveRatio\r\n                .rmul(_vars.interestAccumulated)\r\n                .add(_vars.totalReserves);\r\n\r\n            _vars.borrowIndex = borrowIndex;\r\n            _vars.newBorrowIndex = _vars\r\n                .simpleInterestFactor\r\n                .rmul(_vars.borrowIndex)\r\n                .add(_vars.borrowIndex);\r\n\r\n            // Writes the previously calculated values into storage.\r\n            accrualBlockNumber = _vars.currentBlockNumber;\r\n            borrowIndex = _vars.newBorrowIndex;\r\n            totalBorrows = _vars.newTotalBorrows;\r\n            totalReserves = _vars.newTotalReserves;\r\n\r\n            // Emits an `UpdateInterest` event.\r\n            emit UpdateInterest(\r\n                _vars.currentBlockNumber,\r\n                _vars.interestAccumulated,\r\n                _vars.newBorrowIndex,\r\n                _vars.currentCash,\r\n                _vars.newTotalBorrows,\r\n                _vars.newTotalReserves\r\n            );\r\n        }\r\n    }\r\n\r\n    struct MintLocalVars {\r\n        uint256 exchangeRate;\r\n        uint256 mintTokens;\r\n        uint256 actualMintAmout;\r\n    }\r\n\r\n    /**\r\n     * @dev User deposits token into the market and `_recipient` gets iToken.\r\n     * @param _recipient The address of the user to get iToken.\r\n     * @param _mintAmount The amount of the underlying token to deposit.\r\n     */\r\n    function _mintInternal(address _recipient, uint256 _mintAmount)\r\n        internal\r\n        virtual\r\n    {\r\n        controller.beforeMint(address(this), _recipient, _mintAmount);\r\n\r\n        MintLocalVars memory _vars;\r\n\r\n        /**\r\n         * Gets the current exchange rate and calculate the number of iToken to be minted:\r\n         *  mintTokens = mintAmount / exchangeRate\r\n         */\r\n        _vars.exchangeRate = _exchangeRateInternal();\r\n\r\n        // Transfers `_mintAmount` from caller to contract, and returns the actual amount the contract\r\n        // get, cause some tokens may be charged.\r\n\r\n        _vars.actualMintAmout = _doTransferIn(msg.sender, _mintAmount);\r\n\r\n        // Supports deflationary tokens.\r\n        _vars.mintTokens = _vars.actualMintAmout.rdiv(_vars.exchangeRate);\r\n\r\n        // Mints `mintTokens` iToken to `_recipient`.\r\n        _mint(_recipient, _vars.mintTokens);\r\n\r\n        controller.afterMint(\r\n            address(this),\r\n            _recipient,\r\n            _mintAmount,\r\n            _vars.mintTokens\r\n        );\r\n\r\n        emit Mint(msg.sender, _recipient, _mintAmount, _vars.mintTokens);\r\n    }\r\n\r\n    /**\r\n     * @notice This is a common function to redeem, so only one of `_redeemiTokenAmount` or\r\n     *         `_redeemUnderlyingAmount` may be non-zero.\r\n     * @dev Caller redeems undelying token based on the input amount of iToken or underlying token.\r\n     * @param _from The address of the account which will spend underlying token.\r\n     * @param _redeemiTokenAmount The number of iTokens to redeem into underlying.\r\n     * @param _redeemUnderlyingAmount The number of underlying tokens to receive.\r\n     */\r\n    function _redeemInternal(\r\n        address _from,\r\n        uint256 _redeemiTokenAmount,\r\n        uint256 _redeemUnderlyingAmount\r\n    ) internal virtual {\r\n        require(\r\n            _redeemiTokenAmount > 0,\r\n            \"_redeemInternal: Redeem iToken amount should be greater than zero!\"\r\n        );\r\n\r\n        controller.beforeRedeem(address(this), _from, _redeemiTokenAmount);\r\n\r\n        _burnFrom(_from, _redeemiTokenAmount);\r\n\r\n        /**\r\n         * Transfers `_redeemUnderlyingAmount` underlying token to caller.\r\n         */\r\n        _doTransferOut(msg.sender, _redeemUnderlyingAmount);\r\n\r\n        controller.afterRedeem(\r\n            address(this),\r\n            _from,\r\n            _redeemiTokenAmount,\r\n            _redeemUnderlyingAmount\r\n        );\r\n\r\n        emit Redeem(\r\n            _from,\r\n            msg.sender,\r\n            _redeemiTokenAmount,\r\n            _redeemUnderlyingAmount\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Caller borrows assets from the protocol.\r\n     * @param _borrower The account that will borrow tokens.\r\n     * @param _borrowAmount The amount of the underlying asset to borrow.\r\n     */\r\n    function _borrowInternal(address payable _borrower, uint256 _borrowAmount)\r\n        internal\r\n        virtual\r\n    {\r\n        controller.beforeBorrow(address(this), _borrower, _borrowAmount);\r\n\r\n        // Calculates the new borrower and total borrow balances:\r\n        //  newAccountBorrows = accountBorrows + borrowAmount\r\n        //  newTotalBorrows = totalBorrows + borrowAmount\r\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[_borrower];\r\n        borrowSnapshot.principal = _borrowBalanceInternal(_borrower).add(\r\n            _borrowAmount\r\n        );\r\n        borrowSnapshot.interestIndex = borrowIndex;\r\n        totalBorrows = totalBorrows.add(_borrowAmount);\r\n\r\n        // Transfers token to borrower.\r\n        _doTransferOut(_borrower, _borrowAmount);\r\n\r\n        controller.afterBorrow(address(this), _borrower, _borrowAmount);\r\n\r\n        emit Borrow(\r\n            _borrower,\r\n            _borrowAmount,\r\n            borrowSnapshot.principal,\r\n            borrowSnapshot.interestIndex,\r\n            totalBorrows\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Please approve enough amount at first!!! If not,\r\n     *         maybe you will get an error: `SafeMath: subtraction overflow`\r\n     * @dev `_payer` repays `_repayAmount` tokens for `_borrower`.\r\n     * @param _payer The account to pay for the borrowed.\r\n     * @param _borrower The account with the debt being payed off.\r\n     * @param _repayAmount The amount to repay (or -1 for max).\r\n     */\r\n    function _repayInternal(\r\n        address _payer,\r\n        address _borrower,\r\n        uint256 _repayAmount\r\n    ) internal virtual returns (uint256) {\r\n        controller.beforeRepayBorrow(\r\n            address(this),\r\n            _payer,\r\n            _borrower,\r\n            _repayAmount\r\n        );\r\n\r\n        // Calculates the latest borrowed amount by the new market borrowed index.\r\n        uint256 _accountBorrows = _borrowBalanceInternal(_borrower);\r\n\r\n        // Transfers the token into the market to repay.\r\n        uint256 _actualRepayAmount =\r\n            _doTransferIn(\r\n                _payer,\r\n                _repayAmount > _accountBorrows ? _accountBorrows : _repayAmount\r\n            );\r\n\r\n        // Calculates the `_borrower` new borrow balance and total borrow balances:\r\n        //  accountBorrows[_borrower].principal = accountBorrows - actualRepayAmount\r\n        //  newTotalBorrows = totalBorrows - actualRepayAmount\r\n\r\n        // Saves borrower updates.\r\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[_borrower];\r\n        borrowSnapshot.principal = _accountBorrows.sub(_actualRepayAmount);\r\n        borrowSnapshot.interestIndex = borrowIndex;\r\n\r\n        totalBorrows = totalBorrows < _actualRepayAmount\r\n            ? 0\r\n            : totalBorrows.sub(_actualRepayAmount);\r\n\r\n        // Defense hook.\r\n        controller.afterRepayBorrow(\r\n            address(this),\r\n            _payer,\r\n            _borrower,\r\n            _actualRepayAmount\r\n        );\r\n\r\n        emit RepayBorrow(\r\n            _payer,\r\n            _borrower,\r\n            _actualRepayAmount,\r\n            borrowSnapshot.principal,\r\n            borrowSnapshot.interestIndex,\r\n            totalBorrows\r\n        );\r\n\r\n        return _actualRepayAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev The caller repays some of borrow and receive collateral.\r\n     * @param _borrower The account whose borrow should be liquidated.\r\n     * @param _repayAmount The amount to repay.\r\n     * @param _assetCollateral The market in which to seize collateral from the borrower.\r\n     */\r\n    function _liquidateBorrowInternal(\r\n        address _borrower,\r\n        uint256 _repayAmount,\r\n        address _assetCollateral\r\n    ) internal virtual {\r\n        require(\r\n            msg.sender != _borrower,\r\n            \"_liquidateBorrowInternal: Liquidator can not be borrower!\"\r\n        );\r\n        // According to the parameter `_repayAmount` to see what is the exact error.\r\n        require(\r\n            _repayAmount != 0,\r\n            \"_liquidateBorrowInternal: Liquidate amount should be greater than 0!\"\r\n        );\r\n\r\n        // Accrues interest for collateral asset.\r\n        Base _dlCollateral = Base(_assetCollateral);\r\n        _dlCollateral.updateInterest();\r\n\r\n        controller.beforeLiquidateBorrow(\r\n            address(this),\r\n            _assetCollateral,\r\n            msg.sender,\r\n            _borrower,\r\n            _repayAmount\r\n        );\r\n\r\n        require(\r\n            _dlCollateral.accrualBlockNumber() == block.number,\r\n            \"_liquidateBorrowInternal: Failed to update block number in collateral asset!\"\r\n        );\r\n\r\n        uint256 _actualRepayAmount =\r\n            _repayInternal(msg.sender, _borrower, _repayAmount);\r\n\r\n        // Calculates the number of collateral tokens that will be seized\r\n        uint256 _seizeTokens =\r\n            controller.liquidateCalculateSeizeTokens(\r\n                address(this),\r\n                _assetCollateral,\r\n                _actualRepayAmount\r\n            );\r\n\r\n        // If this is also the collateral, calls seizeInternal to avoid re-entrancy,\r\n        // otherwise make an external call.\r\n        if (_assetCollateral == address(this)) {\r\n            _seizeInternal(address(this), msg.sender, _borrower, _seizeTokens);\r\n        } else {\r\n            _dlCollateral.seize(msg.sender, _borrower, _seizeTokens);\r\n        }\r\n\r\n        controller.afterLiquidateBorrow(\r\n            address(this),\r\n            _assetCollateral,\r\n            msg.sender,\r\n            _borrower,\r\n            _actualRepayAmount,\r\n            _seizeTokens\r\n        );\r\n\r\n        emit LiquidateBorrow(\r\n            msg.sender,\r\n            _borrower,\r\n            _actualRepayAmount,\r\n            _assetCollateral,\r\n            _seizeTokens\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers this token to the liquidator.\r\n     * @param _seizerToken The contract seizing the collateral.\r\n     * @param _liquidator The account receiving seized collateral.\r\n     * @param _borrower The account having collateral seized.\r\n     * @param _seizeTokens The number of iTokens to seize.\r\n     */\r\n    function _seizeInternal(\r\n        address _seizerToken,\r\n        address _liquidator,\r\n        address _borrower,\r\n        uint256 _seizeTokens\r\n    ) internal virtual {\r\n        require(\r\n            _borrower != _liquidator,\r\n            \"seize: Liquidator can not be borrower!\"\r\n        );\r\n\r\n        controller.beforeSeize(\r\n            address(this),\r\n            _seizerToken,\r\n            _liquidator,\r\n            _borrower,\r\n            _seizeTokens\r\n        );\r\n\r\n        /**\r\n         * Calculates the new _borrower and _liquidator token balances,\r\n         * that is transfer `_seizeTokens` iToken from `_borrower` to `_liquidator`.\r\n         */\r\n        _transfer(_borrower, _liquidator, _seizeTokens);\r\n\r\n        // Hook checks.\r\n        controller.afterSeize(\r\n            address(this),\r\n            _seizerToken,\r\n            _liquidator,\r\n            _borrower,\r\n            _seizeTokens\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param _account The address whose balance should be calculated.\r\n     */\r\n    function _borrowBalanceInternal(address _account)\r\n        internal\r\n        view\r\n        virtual\r\n        returns (uint256)\r\n    {\r\n        // Gets stored borrowed data of the `_account`.\r\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[_account];\r\n\r\n        // If borrowBalance = 0, return 0 directly.\r\n        if (borrowSnapshot.principal == 0 || borrowSnapshot.interestIndex == 0)\r\n            return 0;\r\n\r\n        // Calculate new borrow balance with market new borrow index:\r\n        //   recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\r\n        return\r\n            borrowSnapshot.principal.mul(borrowIndex).divup(\r\n                borrowSnapshot.interestIndex\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the exchange rate from the underlying token to the iToken.\r\n     */\r\n    function _exchangeRateInternal() internal view virtual returns (uint256) {\r\n        if (totalSupply == 0) {\r\n            // This is the first time to mint, so current exchange rate is equal to initial exchange rate.\r\n            return initialExchangeRate;\r\n        } else {\r\n            // exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\r\n            return\r\n                _getCurrentCash().add(totalBorrows).sub(totalReserves).rdiv(\r\n                    totalSupply\r\n                );\r\n        }\r\n    }\r\n\r\n    function updateInterest() external virtual returns (bool);\r\n\r\n    /**\r\n     * @dev EIP2612 permit function. For more details, please look at here:\r\n     * https://eips.ethereum.org/EIPS/eip-2612\r\n     * @param _owner The owner of the funds.\r\n     * @param _spender The spender.\r\n     * @param _value The amount.\r\n     * @param _deadline The deadline timestamp, type(uint256).max for max deadline.\r\n     * @param _v Signature param.\r\n     * @param _s Signature param.\r\n     * @param _r Signature param.\r\n     */\r\n    function permit(\r\n        address _owner,\r\n        address _spender,\r\n        uint256 _value,\r\n        uint256 _deadline,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) external {\r\n        require(_deadline >= block.timestamp, \"permit: EXPIRED!\");\r\n        uint256 _currentNonce = nonces[_owner];\r\n\r\n        bytes32 _digest =\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    \"\\x19\\x01\",\r\n                    DOMAIN_SEPARATOR,\r\n                    keccak256(\r\n                        abi.encode(\r\n                            PERMIT_TYPEHASH,\r\n                            _owner,\r\n                            _spender,\r\n                            _getChainId(),\r\n                            _value,\r\n                            _currentNonce,\r\n                            _deadline\r\n                        )\r\n                    )\r\n                )\r\n            );\r\n        address _recoveredAddress = ecrecover(_digest, _v, _r, _s);\r\n        require(\r\n            _recoveredAddress != address(0) && _recoveredAddress == _owner,\r\n            \"permit: INVALID_SIGNATURE!\"\r\n        );\r\n        nonces[_owner] = _currentNonce.add(1);\r\n        _approve(_owner, _spender, _value);\r\n    }\r\n\r\n    function _getChainId() internal pure returns (uint256) {\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        return chainId;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers this tokens to the liquidator.\r\n     * @param _liquidator The account receiving seized collateral.\r\n     * @param _borrower The account having collateral seized.\r\n     * @param _seizeTokens The number of iTokens to seize.\r\n     */\r\n    function seize(\r\n        address _liquidator,\r\n        address _borrower,\r\n        uint256 _seizeTokens\r\n    ) external virtual;\r\n\r\n    /**\r\n     * @notice Users are expected to have enough allowance and balance before calling.\r\n     * @dev Transfers asset in.\r\n     */\r\n    function _doTransferIn(address _spender, uint256 _amount)\r\n        internal\r\n        virtual\r\n        returns (uint256);\r\n\r\n    function exchangeRateStored() external view virtual returns (uint256);\r\n\r\n    function borrowBalanceStored(address _account)\r\n        external\r\n        view\r\n        virtual\r\n        returns (uint256);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/EnumerableSetUpgradeable.sol@v3.3.0\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSetUpgradeable {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/msd/MSD.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n/**\r\n * @title dForce's Multi-currency Stable Debt Token\r\n * @author dForce\r\n */\r\ncontract MSD is Initializable, Ownable, ERC20 {\r\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n    // keccak256(\"Permit(address owner,address spender,uint256 chainId, uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH =\r\n        0x576144ed657c8304561e56ca632e17751956250114636e8c01f64a7f2c6d98cf;\r\n    mapping(address => uint256) public nonces;\r\n\r\n    /// @dev EnumerableSet of minters\r\n    EnumerableSetUpgradeable.AddressSet internal minters;\r\n\r\n    /**\r\n     * @dev Emitted when `minter` is added as `minter`.\r\n     */\r\n    event MinterAdded(address minter);\r\n\r\n    /**\r\n     * @dev Emitted when `minter` is removed from `minters`.\r\n     */\r\n    event MinterRemoved(address minter);\r\n\r\n    /**\r\n     * @notice Expects to call only once to initialize the MSD token.\r\n     * @param _name Token name.\r\n     * @param _symbol Token symbol.\r\n     */\r\n    function initialize(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        uint8 _decimals\r\n    ) external initializer {\r\n        __Ownable_init();\r\n        __ERC20_init(_name, _symbol, _decimals);\r\n\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\r\n                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n                ),\r\n                keccak256(bytes(_name)),\r\n                keccak256(bytes(\"1\")),\r\n                _getChainId(),\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the minters.\r\n     */\r\n    modifier onlyMinter() {\r\n        require(\r\n            minters.contains(msg.sender),\r\n            \"onlyMinter: caller is not minter\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Add `minter` into minters.\r\n     * If `minter` have not been a minter, emits a `MinterAdded` event.\r\n     *\r\n     * @param _minter The minter to add\r\n     *\r\n     * Requirements:\r\n     * - the caller must be `owner`.\r\n     */\r\n    function _addMinter(address _minter) external onlyOwner {\r\n        require(_minter != address(0), \"_addMinter: _minter the zero address\");\r\n        if (minters.add(_minter)) {\r\n            emit MinterAdded(_minter);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Remove `minter` from minters.\r\n     * If `minter` is a minter, emits a `MinterRemoved` event.\r\n     *\r\n     * @param _minter The minter to remove\r\n     *\r\n     * Requirements:\r\n     * - the caller must be `owner`.\r\n     */\r\n    function _removeMinter(address _minter) external onlyOwner {\r\n        require(\r\n            _minter != address(0),\r\n            \"_removeMinter: _minter the zero address\"\r\n        );\r\n        if (minters.remove(_minter)) {\r\n            emit MinterRemoved(_minter);\r\n        }\r\n    }\r\n\r\n    function mint(address to, uint256 amount) external onlyMinter {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    function burn(address from, uint256 amount) external {\r\n        _burnFrom(from, amount);\r\n    }\r\n\r\n    function _getChainId() internal pure returns (uint256) {\r\n        uint256 chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        return chainId;\r\n    }\r\n\r\n    /**\r\n     * @dev EIP2612 permit function. For more details, please look at here:\r\n     * https://eips.ethereum.org/EIPS/eip-2612\r\n     * @param _owner The owner of the funds.\r\n     * @param _spender The spender.\r\n     * @param _value The amount.\r\n     * @param _deadline The deadline timestamp, type(uint256).max for max deadline.\r\n     * @param _v Signature param.\r\n     * @param _s Signature param.\r\n     * @param _r Signature param.\r\n     */\r\n    function permit(\r\n        address _owner,\r\n        address _spender,\r\n        uint256 _value,\r\n        uint256 _deadline,\r\n        uint8 _v,\r\n        bytes32 _r,\r\n        bytes32 _s\r\n    ) external {\r\n        require(_deadline >= block.timestamp, \"permit: EXPIRED!\");\r\n        uint256 _currentNonce = nonces[_owner];\r\n        bytes32 _digest =\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    \"\\x19\\x01\",\r\n                    DOMAIN_SEPARATOR,\r\n                    keccak256(\r\n                        abi.encode(\r\n                            PERMIT_TYPEHASH,\r\n                            _owner,\r\n                            _spender,\r\n                            _getChainId(),\r\n                            _value,\r\n                            _currentNonce,\r\n                            _deadline\r\n                        )\r\n                    )\r\n                )\r\n            );\r\n        address _recoveredAddress = ecrecover(_digest, _v, _r, _s);\r\n        require(\r\n            _recoveredAddress != address(0) && _recoveredAddress == _owner,\r\n            \"permit: INVALID_SIGNATURE!\"\r\n        );\r\n        nonces[_owner] = _currentNonce.add(1);\r\n        _approve(_owner, _spender, _value);\r\n    }\r\n\r\n    /**\r\n     * @notice Return all minters of this MSD token\r\n     * @return _minters The list of minter addresses\r\n     */\r\n    function getMinters() public view returns (address[] memory _minters) {\r\n        uint256 _len = minters.length();\r\n        _minters = new address[](_len);\r\n        for (uint256 i = 0; i < _len; i++) {\r\n            _minters[i] = minters.at(i);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/msd/MSDController.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n * @dev Interface for Minters, minters now can be iMSD and MSDS\r\n */\r\ninterface IMinter {\r\n    function updateInterest() external returns (bool);\r\n}\r\n\r\n/**\r\n * @title dForce's Multi-currency Stable Debt Token Controller\r\n * @author dForce\r\n */\r\n\r\ncontract MSDController is Initializable, Ownable {\r\n    using SafeMathUpgradeable for uint256;\r\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\r\n\r\n    /// @dev EnumerableSet of all msdTokens\r\n    EnumerableSetUpgradeable.AddressSet internal msdTokens;\r\n\r\n    // @notice Mapping of msd tokens to corresponding minters\r\n    mapping(address => EnumerableSetUpgradeable.AddressSet) internal msdMinters;\r\n\r\n    struct TokenData {\r\n        // System earning from borrow interest\r\n        uint256 earning;\r\n        // System debt from saving interest\r\n        uint256 debt;\r\n    }\r\n\r\n    // @notice Mapping of msd tokens to corresponding TokenData\r\n    mapping(address => TokenData) public msdTokenData;\r\n\r\n    /**\r\n     * @dev Emitted when `token` is added into msdTokens.\r\n     */\r\n    event MSDAdded(address token);\r\n\r\n    /**\r\n     * @dev Emitted when `minter` is added into `tokens`'s minters.\r\n     */\r\n    event MinterAdded(address token, address minter);\r\n\r\n    /**\r\n     * @dev Emitted when `minter` is removed from `tokens`'s minters.\r\n     */\r\n    event MinterRemoved(address token, address minter);\r\n\r\n    /**\r\n     * @dev Emitted when reserve is withdrawn from `token`.\r\n     */\r\n    event ReservesWithdrawn(\r\n        address owner,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 oldTotalReserves,\r\n        uint256 newTotalReserves\r\n    );\r\n\r\n    /**\r\n     * @notice Expects to call only once to initialize the MSD controller.\r\n     */\r\n    function initialize() external initializer {\r\n        __Ownable_init();\r\n    }\r\n\r\n    /**\r\n     * @notice Ensure this is a MSD Controller contract.\r\n     */\r\n    function isMSDController() external pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if token is not in msdTokens\r\n     */\r\n    function _checkMSD(address _token) internal view {\r\n        require(hasMSD(_token), \"token is not a valid MSD token\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if token is not a valid MSD token.\r\n     */\r\n    modifier onlyMSD(address _token) {\r\n        _checkMSD(_token);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the _token's minters.\r\n     */\r\n    modifier onlyMSDMinter(address _token, address caller) {\r\n        _checkMSD(_token);\r\n\r\n        require(\r\n            msdMinters[_token].contains(caller),\r\n            \"onlyMinter: caller is not the token's minter\"\r\n        );\r\n\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Add `_token` into msdTokens.\r\n     * If `_token` have not been in msdTokens, emits a `MSDTokenAdded` event.\r\n     *\r\n     * @param _token The token to add\r\n     * @param _minters The addresses to add as token's minters\r\n     *\r\n     * Requirements:\r\n     * - the caller must be `owner`.\r\n     */\r\n    function _addMSD(address _token, address[] calldata _minters)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_token != address(0), \"MSD token cannot be a zero address\");\r\n        if (msdTokens.add(_token)) {\r\n            emit MSDAdded(_token);\r\n        }\r\n\r\n        _addMinters(_token, _minters);\r\n    }\r\n\r\n    /**\r\n     * @notice Add `_minters` into minters.\r\n     * If `_minters` have not been in minters, emits a `MinterAdded` event.\r\n     *\r\n     * @param _minters The addresses to add as minters\r\n     *\r\n     * Requirements:\r\n     * - the caller must be `owner`.\r\n     */\r\n    function _addMinters(address _token, address[] memory _minters)\r\n        public\r\n        onlyOwner\r\n        onlyMSD(_token)\r\n    {\r\n        uint256 _len = _minters.length;\r\n\r\n        for (uint256 i = 0; i < _len; i++) {\r\n            require(\r\n                _minters[i] != address(0),\r\n                \"minter cannot be a zero address\"\r\n            );\r\n\r\n            if (msdMinters[_token].add(_minters[i])) {\r\n                emit MinterAdded(_token, _minters[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Remove `minter` from minters.\r\n     * If `minter` is a minter, emits a `MinterRemoved` event.\r\n     *\r\n     * @param _minter The minter to remove\r\n     *\r\n     * Requirements:\r\n     * - the caller must be `owner`, `_token` must be a MSD Token.\r\n     */\r\n    function _removeMinter(address _token, address _minter)\r\n        external\r\n        onlyOwner\r\n        onlyMSD(_token)\r\n    {\r\n        require(_minter != address(0), \"_minter cannot be a zero address\");\r\n\r\n        if (msdMinters[_token].remove(_minter)) {\r\n            emit MinterRemoved(_token, _minter);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw the reserve of `_token`.\r\n     * @param _token The MSD token to withdraw\r\n     * @param _amount The amount of token to withdraw\r\n     *\r\n     * Requirements:\r\n     * - the caller must be `owner`, `_token` must be a MSD Token.\r\n     */\r\n    function _withdrawReserves(address _token, uint256 _amount)\r\n        external\r\n        onlyOwner\r\n        onlyMSD(_token)\r\n    {\r\n        (uint256 _equity, ) = calcEquity(_token);\r\n\r\n        require(_equity >= _amount, \"Token do not have enough reserve\");\r\n\r\n        // Increase the token debt\r\n        msdTokenData[_token].debt = msdTokenData[_token].debt.add(_amount);\r\n\r\n        // Directly mint the token to owner\r\n        MSD(_token).mint(owner, _amount);\r\n\r\n        emit ReservesWithdrawn(\r\n            owner,\r\n            _token,\r\n            _amount,\r\n            _equity,\r\n            _equity.sub(_amount)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Mint `amount` of `_token` to `_to`.\r\n     * @param _token The MSD token to mint\r\n     * @param _to The account to mint to\r\n     * @param _amount The amount of token to mint\r\n     *\r\n     * Requirements:\r\n     * - the caller must be `minter` of `_token`.\r\n     */\r\n    function mintMSD(\r\n        address _token,\r\n        address _to,\r\n        uint256 _amount\r\n    ) external onlyMSDMinter(_token, msg.sender) {\r\n        MSD(_token).mint(_to, _amount);\r\n    }\r\n\r\n    /*********************************/\r\n    /******** MSD Token Equity *******/\r\n    /*********************************/\r\n\r\n    /**\r\n     * @notice Add `amount` of debt to `_token`.\r\n     * @param _token The MSD token to add debt\r\n     * @param _debt The amount of debt to add\r\n     *\r\n     * Requirements:\r\n     * - the caller must be `minter` of `_token`.\r\n     */\r\n    function addDebt(address _token, uint256 _debt)\r\n        external\r\n        onlyMSDMinter(_token, msg.sender)\r\n    {\r\n        msdTokenData[_token].debt = msdTokenData[_token].debt.add(_debt);\r\n    }\r\n\r\n    /**\r\n     * @notice Add `amount` of earning to `_token`.\r\n     * @param _token The MSD token to add earning\r\n     * @param _earning The amount of earning to add\r\n     *\r\n     * Requirements:\r\n     * - the caller must be `minter` of `_token`.\r\n     */\r\n    function addEarning(address _token, uint256 _earning)\r\n        external\r\n        onlyMSDMinter(_token, msg.sender)\r\n    {\r\n        msdTokenData[_token].earning = msdTokenData[_token].earning.add(\r\n            _earning\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Get the MSD token equity\r\n     * @param _token The MSD token to query\r\n     * @return token equity, token debt, will call `updateInterest()` on its minters\r\n     *\r\n     * Requirements:\r\n     * - `_token` must be a MSD Token.\r\n     *\r\n     */\r\n    function calcEquity(address _token)\r\n        public\r\n        onlyMSD(_token)\r\n        returns (uint256, uint256)\r\n    {\r\n        // Call `updateInterest()` on all minters to get the latest token data\r\n        EnumerableSetUpgradeable.AddressSet storage _msdMinters =\r\n            msdMinters[_token];\r\n\r\n        uint256 _len = _msdMinters.length();\r\n        for (uint256 i = 0; i < _len; i++) {\r\n            IMinter(_msdMinters.at(i)).updateInterest();\r\n        }\r\n\r\n        TokenData storage _tokenData = msdTokenData[_token];\r\n\r\n        return\r\n            _tokenData.earning > _tokenData.debt\r\n                ? (_tokenData.earning.sub(_tokenData.debt), uint256(0))\r\n                : (uint256(0), _tokenData.debt.sub(_tokenData.earning));\r\n    }\r\n\r\n    /*********************************/\r\n    /****** General Information ******/\r\n    /*********************************/\r\n\r\n    /**\r\n     * @notice Return all of the MSD tokens\r\n     * @return _allMSDs The list of MSD token addresses\r\n     */\r\n    function getAllMSDs() public view returns (address[] memory _allMSDs) {\r\n        EnumerableSetUpgradeable.AddressSet storage _msdTokens = msdTokens;\r\n\r\n        uint256 _len = _msdTokens.length();\r\n        _allMSDs = new address[](_len);\r\n        for (uint256 i = 0; i < _len; i++) {\r\n            _allMSDs[i] = _msdTokens.at(i);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether a address is a valid MSD\r\n     * @param _token The token address to check for\r\n     * @return true if the _token is a valid MSD otherwise false\r\n     */\r\n    function hasMSD(address _token) public view returns (bool) {\r\n        return msdTokens.contains(_token);\r\n    }\r\n\r\n    /**\r\n     * @notice Return all minter of a MSD token\r\n     * @param _token The MSD token address to get minters for\r\n     * @return _minters The list of MSD token minter addresses\r\n     * Will retuen empty if `_token` is not a valid MSD token\r\n     */\r\n    function getMSDMinters(address _token)\r\n        public\r\n        view\r\n        returns (address[] memory _minters)\r\n    {\r\n        EnumerableSetUpgradeable.AddressSet storage _msdMinters =\r\n            msdMinters[_token];\r\n\r\n        uint256 _len = _msdMinters.length();\r\n        _minters = new address[](_len);\r\n        for (uint256 i = 0; i < _len; i++) {\r\n            _minters[i] = _msdMinters.at(i);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/msd/iMSD.sol\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n/**\r\n * @title dForce's Lending Protocol Contract.\r\n * @notice dForce lending token for the Multi-currency Stable Debt Token.\r\n * @author dForce Team.\r\n */\r\ncontract iMSD is Base {\r\n    MSDController public msdController;\r\n\r\n    event NewMSDController(\r\n        MSDController oldMSDController,\r\n        MSDController newMSDController\r\n    );\r\n\r\n    /**\r\n     * @notice Expects to call only once to initialize a new market.\r\n     * @param _underlyingToken The underlying token address.\r\n     * @param _name Token name.\r\n     * @param _symbol Token symbol.\r\n     * @param _lendingController Lending controller contract address.\r\n     * @param _interestRateModel Token interest rate model contract address.\r\n     * @param _msdController MSD controller contract address.\r\n     */\r\n    function initialize(\r\n        address _underlyingToken,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        IControllerInterface _lendingController,\r\n        IInterestRateModelInterface _interestRateModel,\r\n        MSDController _msdController\r\n    ) external initializer {\r\n        require(\r\n            address(_underlyingToken) != address(0),\r\n            \"initialize: underlying address should not be zero address!\"\r\n        );\r\n        require(\r\n            address(_lendingController) != address(0),\r\n            \"initialize: controller address should not be zero address!\"\r\n        );\r\n        require(\r\n            address(_msdController) != address(0),\r\n            \"initialize: MSD controller address should not be zero address!\"\r\n        );\r\n        require(\r\n            address(_interestRateModel) != address(0),\r\n            \"initialize: interest model address should not be zero address!\"\r\n        );\r\n        _initialize(\r\n            _name,\r\n            _symbol,\r\n            ERC20(_underlyingToken).decimals(),\r\n            _lendingController,\r\n            _interestRateModel\r\n        );\r\n\r\n        underlying = IERC20Upgradeable(_underlyingToken);\r\n        msdController = _msdController;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new reserve ratio.\r\n     * iMSD hold no reserve, all borrow interest goes to MSD controller\r\n     * Therefore, reserveRatio can not be changed\r\n     */\r\n    function _setNewReserveRatio(uint256 _newReserveRatio)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        _newReserveRatio;\r\n        revert(\"Reserve Ratio of iMSD Token can not be changed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new MSD controller.\r\n     * @param _newMSDController The new MSD controller\r\n     */\r\n    function _setMSDController(MSDController _newMSDController)\r\n        external\r\n        onlyOwner\r\n    {\r\n        MSDController _oldMSDController = msdController;\r\n\r\n        // Ensures the input address is a MSDController contract.\r\n        require(\r\n            _newMSDController.isMSDController(),\r\n            \"_setMSDController: This is not MSD controller contract!\"\r\n        );\r\n\r\n        msdController = _newMSDController;\r\n\r\n        emit NewMSDController(_oldMSDController, _newMSDController);\r\n    }\r\n\r\n    /**\r\n     * @notice Supposed to transfer underlying token into this contract\r\n     * @dev iMSD burns the amount of underlying rather than transfering.\r\n     */\r\n    function _doTransferIn(address _spender, uint256 _amount)\r\n        internal\r\n        override\r\n        returns (uint256)\r\n    {\r\n        MSD(address(underlying)).burn(_spender, _amount);\r\n        return _amount;\r\n    }\r\n\r\n    /**\r\n     * @notice Supposed to transfer underlying token to `_recipient`\r\n     * @dev iMSD mint the amount of underlying rather than transfering.\r\n     * this can be called by `borrow()` and `_withdrawReserves()`\r\n     * Reserves should stay 0 for iMSD\r\n     */\r\n    function _doTransferOut(address payable _recipient, uint256 _amount)\r\n        internal\r\n        override\r\n    {\r\n        msdController.mintMSD(address(underlying), _recipient, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates interest and update total borrows and reserves.\r\n     * @dev Updates total borrows and reserves with any accumulated interest.\r\n     * With 0 reserveRatio, all interest goes to totalBorrows and notify MSD Controller\r\n     */\r\n    function _updateInterest() internal virtual override {\r\n        // When more calls in the same block, only the first one takes effect, so for the\r\n        // following calls, nothing updates.\r\n        if (block.number != accrualBlockNumber) {\r\n            uint256 _totalBorrows = totalBorrows;\r\n\r\n            Base._updateInterest();\r\n\r\n            uint256 _interestAccumulated = totalBorrows.sub(_totalBorrows);\r\n\r\n            // Notify the MSD controller to update earning\r\n            if (_interestAccumulated > 0) {\r\n                msdController.addEarning(address(underlying), _interestAccumulated);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev iMSD does not hold any underlying in cash, returning 0\r\n     */\r\n    function _getCurrentCash() internal view override returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Caller borrows tokens from the protocol to their own address.\r\n     * @param _borrowAmount The amount of the underlying token to borrow.\r\n     */\r\n    function borrow(uint256 _borrowAmount)\r\n        external\r\n        nonReentrant\r\n        settleInterest\r\n    {\r\n        _borrowInternal(msg.sender, _borrowAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Caller repays their own borrow.\r\n     * @param _repayAmount The amount to repay.\r\n     */\r\n    function repayBorrow(uint256 _repayAmount)\r\n        external\r\n        nonReentrant\r\n        settleInterest\r\n    {\r\n        _repayInternal(msg.sender, msg.sender, _repayAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Caller repays a borrow belonging to borrower.\r\n     * @param _borrower the account with the debt being payed off.\r\n     * @param _repayAmount The amount to repay.\r\n     */\r\n    function repayBorrowBehalf(address _borrower, uint256 _repayAmount)\r\n        external\r\n        nonReentrant\r\n        settleInterest\r\n    {\r\n        _repayInternal(msg.sender, _borrower, _repayAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev The caller liquidates the borrowers collateral.\r\n     * @param _borrower The account whose borrow should be liquidated.\r\n     * @param _assetCollateral The market in which to seize collateral from the borrower.\r\n     * @param _repayAmount The amount to repay.\r\n     */\r\n    function liquidateBorrow(\r\n        address _borrower,\r\n        uint256 _repayAmount,\r\n        address _assetCollateral\r\n    ) external nonReentrant settleInterest {\r\n        // Liquidate and seize the same token will call _seizeInternal() instead of seize()\r\n        require(\r\n            _assetCollateral != address(this),\r\n            \"iMSD Token can not be seized\"\r\n        );\r\n\r\n        _liquidateBorrowInternal(_borrower, _repayAmount, _assetCollateral);\r\n    }\r\n\r\n    /**\r\n     * @dev iMSD does not support seize(), but it is required by liquidateBorrow()\r\n     * @param _liquidator The account receiving seized collateral.\r\n     * @param _borrower The account having collateral seized.\r\n     * @param _seizeTokens The number of iMSDs to seize.\r\n     */\r\n    function seize(\r\n        address _liquidator,\r\n        address _borrower,\r\n        uint256 _seizeTokens\r\n    ) external override {\r\n        _liquidator;\r\n        _borrower;\r\n        _seizeTokens;\r\n\r\n        revert(\"iMSD Token can not be seized\");\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates interest and update total borrows and reserves.\r\n     * @dev Updates total borrows and reserves with any accumulated interest.\r\n     */\r\n    function updateInterest() external override returns (bool) {\r\n        _updateInterest();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the newest exchange rate by accruing interest.\r\n     * iMSD returns the initial exchange rate 1.0\r\n     */\r\n    function exchangeRateCurrent() external pure returns (uint256) {\r\n        return initialExchangeRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the exchange rate without accruing interest.\r\n     * iMSD returns the initial exchange rate 1.0\r\n     */\r\n    function exchangeRateStored() external view override returns (uint256) {\r\n        return initialExchangeRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the underlying balance of the `_account`.\r\n     * @param _account The address of the account to query.\r\n     * iMSD just returns 0\r\n     */\r\n    function balanceOfUnderlying(address _account)\r\n        external\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        _account;\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the user's borrow balance with the latest `borrowIndex`.\r\n     */\r\n    function borrowBalanceCurrent(address _account)\r\n        external\r\n        nonReentrant\r\n        returns (uint256)\r\n    {\r\n        // Accrues interest.\r\n        _updateInterest();\r\n\r\n        return _borrowBalanceInternal(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the borrow balance of user without accruing interest.\r\n     */\r\n    function borrowBalanceStored(address _account)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _borrowBalanceInternal(_account);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets user borrowing information.\r\n     */\r\n    function borrowSnapshot(address _account)\r\n        external\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        return (\r\n            accountBorrows[_account].principal,\r\n            accountBorrows[_account].interestIndex\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the current total borrows by accruing interest.\r\n     */\r\n    function totalBorrowsCurrent() external returns (uint256) {\r\n        // Accrues interest.\r\n        _updateInterest();\r\n\r\n        return totalBorrows;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current per-block borrow interest rate.\r\n     * iMSD uses fixed interest rate model\r\n     */\r\n    function borrowRatePerBlock() public view returns (uint256) {\r\n        return\r\n            interestRateModel.getBorrowRate(\r\n                _getCurrentCash(),\r\n                totalBorrows,\r\n                totalReserves\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Get cash balance of this iToken in the underlying token.\r\n     */\r\n    function getCash() external view returns (uint256) {\r\n        return _getCurrentCash();\r\n    }\r\n\r\n    /**\r\n     * @notice Check whether is a iToken contract, return false for iMSD contract.\r\n     */\r\n    function isiToken() external pure override returns (bool) {\r\n        return false;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountInterestIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loaner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flashloanFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Flashloan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"iTokenCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"LiquidateBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IControllerInterface\",\"name\":\"oldController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IControllerInterface\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"NewController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFlashloanFeeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFlashloanFeeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProtocolFeeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProtocolFeeRatio\",\"type\":\"uint256\"}],\"name\":\"NewFlashloanFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFlashloanFeeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFlashloanFeeRatio\",\"type\":\"uint256\"}],\"name\":\"NewFlashloanFeeRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IInterestRateModelInterface\",\"name\":\"oldInterestRateModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IInterestRateModelInterface\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"NewInterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract MSDController\",\"name\":\"oldMSDController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract MSDController\",\"name\":\"newMSDController\",\"type\":\"address\"}],\"name\":\"NewMSDController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPendingOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProtocolFeeRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProtocolFeeRatio\",\"type\":\"uint256\"}],\"name\":\"NewProtocolFeeRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReserveRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReserveRatio\",\"type\":\"uint256\"}],\"name\":\"NewReserveRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemiTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemUnderlyingAmount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountInterestIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"RepayBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalReserves\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBlockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAccumulated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"}],\"name\":\"UpdateInterest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_acceptOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IControllerInterface\",\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"_setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IInterestRateModelInterface\",\"name\":\"_newInterestRateModel\",\"type\":\"address\"}],\"name\":\"_setInterestRateModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MSDController\",\"name\":\"_newMSDController\",\"type\":\"address\"}],\"name\":\"_setMSDController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFlashloanFeeRatio\",\"type\":\"uint256\"}],\"name\":\"_setNewFlashloanFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newProtocolFeeRatio\",\"type\":\"uint256\"}],\"name\":\"_setNewProtocolFeeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newReserveRatio\",\"type\":\"uint256\"}],\"name\":\"_setNewReserveRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"_setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"_withdrawReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrualBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"borrowBalanceCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"borrowBalanceStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"borrowSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IControllerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashloanFeeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"contract IControllerInterface\",\"name\":\"_lendingController\",\"type\":\"address\"},{\"internalType\":\"contract IInterestRateModelInterface\",\"name\":\"_interestRateModel\",\"type\":\"address\"},{\"internalType\":\"contract MSDController\",\"name\":\"_msdController\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract IInterestRateModelInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isiToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_assetCollateral\",\"type\":\"address\"}],\"name\":\"liquidateBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"msdController\",\"outputs\":[{\"internalType\":\"contract MSDController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrowBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrowsCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateInterest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"iMSD","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://09a090bfc2cdcfef43bb06b1e3fc65082e27d38b80f2da12ac033efdb79e0bad"}]}