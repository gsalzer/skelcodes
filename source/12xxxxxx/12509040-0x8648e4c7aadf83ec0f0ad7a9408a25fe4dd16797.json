{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *SPDX-License-Identifier: UNLICENSED\r\n*/\r\npragma solidity >=0.6.8 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/TellorProxy.sol\r\n\r\ninterface ITellor {\r\n    function addTip(uint256 _requestId, uint256 _tip) external;\r\n\r\n    function submitMiningSolution(\r\n        string calldata _nonce,\r\n        uint256[5] calldata _requestId,\r\n        uint256[5] calldata _value\r\n    ) external;\r\n\r\n    function depositStake() external;\r\n\r\n    function requestStakingWithdraw() external;\r\n\r\n    function withdrawStake() external;\r\n\r\n    function getUintVar(bytes32 _data) external view returns (uint256);\r\n\r\n    function vote(uint256 _disputeId, bool _supportsDispute) external;\r\n\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n}\r\n\r\ncontract TellorProxy is Ownable {\r\n    address tellorAddress; // Address of Tellor Oracle\r\n\r\n    constructor(address _tellorAddress) public\r\n    {\r\n        tellorAddress = _tellorAddress;\r\n    }\r\n\r\n    function addTip(uint256 _requestId, uint256 _tip) external onlyOwner {\r\n        ITellor(tellorAddress).addTip(_requestId, _tip);\r\n    }\r\n\r\n    function changeTRB(address _tellorAddress) external onlyOwner {\r\n        tellorAddress = _tellorAddress;\r\n    }\r\n\r\n    function submitMiningSolution(\r\n        string calldata _nonce,\r\n        uint256[5] calldata _requestId,\r\n        uint256[5] calldata _value,\r\n        uint256 _pass\r\n    ) external onlyOwner {\r\n        if (_pass == 0) {\r\n            bytes32 slotProgress =\r\n                0xdfbec46864bc123768f0d134913175d9577a55bb71b9b2595fda21e21f36b082;\r\n            uint256 _soltNum = ITellor(tellorAddress).getUintVar(slotProgress);\r\n            require(_soltNum != 4, \"out-ooff-gas\");\r\n        }\r\n        ITellor(tellorAddress).submitMiningSolution(_nonce, _requestId, _value);\r\n    }\r\n\r\n    function depositStake() external onlyOwner {\r\n        ITellor(tellorAddress).depositStake();\r\n    }\r\n\r\n    function requestStakingWithdraw() external onlyOwner {\r\n        ITellor(tellorAddress).requestStakingWithdraw();\r\n    }\r\n\r\n    function payment(address _to, uint256 _amount) external onlyOwner {\r\n        ITellor(tellorAddress).transfer(_to, _amount);\r\n    }\r\n\r\n    function getSlotProgress() external view returns (uint256) {\r\n        bytes32 slotProgress =\r\n            0xdfbec46864bc123768f0d134913175d9577a55bb71b9b2595fda21e21f36b082;\r\n        return ITellor(tellorAddress).getUintVar(slotProgress);\r\n    }\r\n\r\n    function withdrawStake() external onlyOwner {\r\n        ITellor(tellorAddress).withdrawStake();\r\n    }\r\n\r\n    function vote(uint256 _disputeId, bool _supportsDispute) external onlyOwner\r\n    {\r\n        ITellor(tellorAddress).vote(_disputeId, _supportsDispute);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tellorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tip\",\"type\":\"uint256\"}],\"name\":\"addTip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tellorAddress\",\"type\":\"address\"}],\"name\":\"changeTRB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlotProgress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"payment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestStakingWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_nonce\",\"type\":\"string\"},{\"internalType\":\"uint256[5]\",\"name\":\"_requestId\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256[5]\",\"name\":\"_value\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256\",\"name\":\"_pass\",\"type\":\"uint256\"}],\"name\":\"submitMiningSolution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_supportsDispute\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TellorProxy","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000088df592f8eb5d7bd38bfef7deb0fbc02cf3778a0","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://70bc095bd3e273262e05049bf50d1fdb6ea3b1a78d0d163162a8e6d3a11e9c7a"}]}