{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\n\r\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published\r\n// by the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity >=0.6.12;\r\n\r\ninterface Abacus {\r\n    // 1st arg: initial price               [ray]\r\n    // 2nd arg: seconds since auction start [seconds]\r\n    // returns: current auction price       [ray]\r\n    function price(uint256, uint256) external view returns (uint256);\r\n}\r\n\r\ncontract StairstepExponentialDecrease is Abacus {\r\n\r\n    // --- Auth ---\r\n    mapping (address => uint256) public wards;\r\n    function rely(address usr) external auth { wards[usr] = 1; emit Rely(usr); }\r\n    function deny(address usr) external auth { wards[usr] = 0; emit Deny(usr); }\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"StairstepExponentialDecrease/not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Data ---\r\n    uint256 public step; // Length of time between price drops [seconds]\r\n    uint256 public cut;  // Per-step multiplicative factor     [ray]\r\n\r\n    // --- Events ---\r\n    event Rely(address indexed usr);\r\n    event Deny(address indexed usr);\r\n\r\n    event File(bytes32 indexed what, uint256 data);\r\n\r\n    // --- Init ---\r\n    // @notice: `cut` and `step` values must be correctly set for\r\n    //     this contract to return a valid price\r\n    constructor() public {\r\n        wards[msg.sender] = 1;\r\n        emit Rely(msg.sender);\r\n    }\r\n\r\n    // --- Administration ---\r\n    function file(bytes32 what, uint256 data) external auth {\r\n        if      (what ==  \"cut\") require((cut = data) <= RAY, \"StairstepExponentialDecrease/cut-gt-RAY\");\r\n        else if (what == \"step\") step = data;\r\n        else revert(\"StairstepExponentialDecrease/file-unrecognized-param\");\r\n        emit File(what, data);\r\n    }\r\n\r\n    // --- Math ---\r\n    uint256 constant RAY = 10 ** 27;\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x * y;\r\n        require(y == 0 || z / y == x);\r\n        z = z / RAY;\r\n    }\r\n    // optimized version from dss PR #78\r\n    function rpow(uint256 x, uint256 n, uint256 b) internal pure returns (uint256 z) {\r\n        assembly {\r\n            switch n case 0 { z := b }\r\n            default {\r\n                switch x case 0 { z := 0 }\r\n                default {\r\n                    switch mod(n, 2) case 0 { z := b } default { z := x }\r\n                    let half := div(b, 2)  // for rounding.\r\n                    for { n := div(n, 2) } n { n := div(n,2) } {\r\n                        let xx := mul(x, x)\r\n                        if shr(128, x) { revert(0,0) }\r\n                        let xxRound := add(xx, half)\r\n                        if lt(xxRound, xx) { revert(0,0) }\r\n                        x := div(xxRound, b)\r\n                        if mod(n,2) {\r\n                            let zx := mul(z, x)\r\n                            if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\r\n                            let zxRound := add(zx, half)\r\n                            if lt(zxRound, zx) { revert(0,0) }\r\n                            z := div(zxRound, b)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // top: initial price\r\n    // dur: seconds since the auction has started\r\n    // step: seconds between a price drop\r\n    // cut: cut encodes the percentage to decrease per step.\r\n    //   For efficiency, the values is set as (1 - (% value / 100)) * RAY\r\n    //   So, for a 1% decrease per step, cut would be (1 - 0.01) * RAY\r\n    //\r\n    // returns: top * (cut ^ dur)\r\n    //\r\n    //\r\n    function price(uint256 top, uint256 dur) override external view returns (uint256) {\r\n        return rmul(top, rpow(cut, dur / step, RAY));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"top\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dur\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"step\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StairstepExponentialDecrease","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4ae8e0fe98f28f7158108adb1ba14001e0158ee55a0a4c48548493c9f69e4926"}]}