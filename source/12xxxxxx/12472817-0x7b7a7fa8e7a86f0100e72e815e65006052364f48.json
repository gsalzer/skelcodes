{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/haythem96/Projects/Opyn/GammaProtocol/contracts/interfaces/ERC20Interface.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity 0.6.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface ERC20Interface {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"/Users/haythem96/Projects/Opyn/GammaProtocol/contracts/interfaces/OpynPricerInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface OpynPricerInterface {\\n    function getPrice() external view returns (uint256);\\n\\n    function getHistoricalPrice(uint80 _roundId) external view returns (uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"/Users/haythem96/Projects/Opyn/GammaProtocol/contracts/interfaces/OracleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\ninterface OracleInterface {\\n    function isLockingPeriodOver(address _asset, uint256 _expiryTimestamp) external view returns (bool);\\n\\n    function isDisputePeriodOver(address _asset, uint256 _expiryTimestamp) external view returns (bool);\\n\\n    function getExpiryPrice(address _asset, uint256 _expiryTimestamp) external view returns (uint256, bool);\\n\\n    function getDisputer() external view returns (address);\\n\\n    function getPricer(address _asset) external view returns (address);\\n\\n    function getPrice(address _asset) external view returns (uint256);\\n\\n    function getPricerLockingPeriod(address _pricer) external view returns (uint256);\\n\\n    function getPricerDisputePeriod(address _pricer) external view returns (uint256);\\n\\n    function getChainlinkRoundData(address _asset, uint80 _roundId) external view returns (uint256, uint256);\\n\\n    // Non-view function\\n\\n    function setAssetPricer(address _asset, address _pricer) external;\\n\\n    function setLockingPeriod(address _pricer, uint256 _lockingPeriod) external;\\n\\n    function setDisputePeriod(address _pricer, uint256 _disputePeriod) external;\\n\\n    function setExpiryPrice(\\n        address _asset,\\n        uint256 _expiryTimestamp,\\n        uint256 _price\\n    ) external;\\n\\n    function disputeExpiryPrice(\\n        address _asset,\\n        uint256 _expiryTimestamp,\\n        uint256 _price\\n    ) external;\\n\\n    function setDisputer(address _disputer) external;\\n}\\n\"\r\n    },\r\n    \"/Users/haythem96/Projects/Opyn/GammaProtocol/contracts/interfaces/YearnVaultInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.10;\\n\\ninterface YearnVaultInterface {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function deposit(uint256) external;\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"/Users/haythem96/Projects/Opyn/GammaProtocol/contracts/libs/FixedPointInt256.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity 0.6.10;\\n\\nimport \\\"../packages/oz/SignedSafeMath.sol\\\";\\nimport \\\"../libs/SignedConverter.sol\\\";\\nimport \\\"../packages/oz/SafeMath.sol\\\";\\n\\n/**\\n * @title FixedPointInt256\\n * @author Opyn Team\\n * @notice FixedPoint library\\n */\\nlibrary FixedPointInt256 {\\n    using SignedSafeMath for int256;\\n    using SignedConverter for int256;\\n    using SafeMath for uint256;\\n    using SignedConverter for uint256;\\n\\n    int256 private constant SCALING_FACTOR = 1e27;\\n    uint256 private constant BASE_DECIMALS = 27;\\n\\n    struct FixedPointInt {\\n        int256 value;\\n    }\\n\\n    /**\\n     * @notice constructs an `FixedPointInt` from an unscaled int, e.g., `b=5` gets stored internally as `5**27`.\\n     * @param a int to convert into a FixedPoint.\\n     * @return the converted FixedPoint.\\n     */\\n    function fromUnscaledInt(int256 a) internal pure returns (FixedPointInt memory) {\\n        return FixedPointInt(a.mul(SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice constructs an FixedPointInt from an scaled uint with {_decimals} decimals\\n     * Examples:\\n     * (1)  USDC    decimals = 6\\n     *      Input:  5 * 1e6 USDC  =>    Output: 5 * 1e27 (FixedPoint 8.0 USDC)\\n     * (2)  cUSDC   decimals = 8\\n     *      Input:  5 * 1e6 cUSDC =>    Output: 5 * 1e25 (FixedPoint 0.08 cUSDC)\\n     * @param _a uint256 to convert into a FixedPoint.\\n     * @param _decimals  original decimals _a has\\n     * @return the converted FixedPoint, with 27 decimals.\\n     */\\n    function fromScaledUint(uint256 _a, uint256 _decimals) internal pure returns (FixedPointInt memory) {\\n        FixedPointInt memory fixedPoint;\\n\\n        if (_decimals == BASE_DECIMALS) {\\n            fixedPoint = FixedPointInt(_a.uintToInt());\\n        } else if (_decimals > BASE_DECIMALS) {\\n            uint256 exp = _decimals.sub(BASE_DECIMALS);\\n            fixedPoint = FixedPointInt((_a.div(10**exp)).uintToInt());\\n        } else {\\n            uint256 exp = BASE_DECIMALS - _decimals;\\n            fixedPoint = FixedPointInt((_a.mul(10**exp)).uintToInt());\\n        }\\n\\n        return fixedPoint;\\n    }\\n\\n    /**\\n     * @notice convert a FixedPointInt number to an uint256 with a specific number of decimals\\n     * @param _a FixedPointInt to convert\\n     * @param _decimals number of decimals that the uint256 should be scaled to\\n     * @param _roundDown True to round down the result, False to round up\\n     * @return the converted uint256\\n     */\\n    function toScaledUint(\\n        FixedPointInt memory _a,\\n        uint256 _decimals,\\n        bool _roundDown\\n    ) internal pure returns (uint256) {\\n        uint256 scaledUint;\\n\\n        if (_decimals == BASE_DECIMALS) {\\n            scaledUint = _a.value.intToUint();\\n        } else if (_decimals > BASE_DECIMALS) {\\n            uint256 exp = _decimals - BASE_DECIMALS;\\n            scaledUint = (_a.value).intToUint().mul(10**exp);\\n        } else {\\n            uint256 exp = BASE_DECIMALS - _decimals;\\n            uint256 tailing;\\n            if (!_roundDown) {\\n                uint256 remainer = (_a.value).intToUint().mod(10**exp);\\n                if (remainer > 0) tailing = 1;\\n            }\\n            scaledUint = (_a.value).intToUint().div(10**exp).add(tailing);\\n        }\\n\\n        return scaledUint;\\n    }\\n\\n    /**\\n     * @notice add two signed integers, a + b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return sum of the two signed integers\\n     */\\n    function add(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\\n        return FixedPointInt(a.value.add(b.value));\\n    }\\n\\n    /**\\n     * @notice subtract two signed integers, a-b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return difference of two signed integers\\n     */\\n    function sub(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\\n        return FixedPointInt(a.value.sub(b.value));\\n    }\\n\\n    /**\\n     * @notice multiply two signed integers, a by b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return mul of two signed integers\\n     */\\n    function mul(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\\n        return FixedPointInt((a.value.mul(b.value)) / SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice divide two signed integers, a by b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return div of two signed integers\\n     */\\n    function div(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\\n        return FixedPointInt((a.value.mul(SCALING_FACTOR)) / b.value);\\n    }\\n\\n    /**\\n     * @notice minimum between two signed integers, a and b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return min of two signed integers\\n     */\\n    function min(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\\n        return a.value < b.value ? a : b;\\n    }\\n\\n    /**\\n     * @notice maximum between two signed integers, a and b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return max of two signed integers\\n     */\\n    function max(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (FixedPointInt memory) {\\n        return a.value > b.value ? a : b;\\n    }\\n\\n    /**\\n     * @notice is a is equal to b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return True if equal, False if not\\n     */\\n    function isEqual(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\\n        return a.value == b.value;\\n    }\\n\\n    /**\\n     * @notice is a greater than b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return True if a > b, False if not\\n     */\\n    function isGreaterThan(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\\n        return a.value > b.value;\\n    }\\n\\n    /**\\n     * @notice is a greater than or equal to b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return True if a >= b, False if not\\n     */\\n    function isGreaterThanOrEqual(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\\n        return a.value >= b.value;\\n    }\\n\\n    /**\\n     * @notice is a is less than b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return True if a < b, False if not\\n     */\\n    function isLessThan(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\\n        return a.value < b.value;\\n    }\\n\\n    /**\\n     * @notice is a less than or equal to b\\n     * @param a FixedPointInt\\n     * @param b FixedPointInt\\n     * @return True if a <= b, False if not\\n     */\\n    function isLessThanOrEqual(FixedPointInt memory a, FixedPointInt memory b) internal pure returns (bool) {\\n        return a.value <= b.value;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/haythem96/Projects/Opyn/GammaProtocol/contracts/libs/SignedConverter.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: UNLICENSED\\n */\\npragma solidity 0.6.10;\\n\\n/**\\n * @title SignedConverter\\n * @author Opyn Team\\n * @notice A library to convert an unsigned integer to signed integer or signed integer to unsigned integer.\\n */\\nlibrary SignedConverter {\\n    /**\\n     * @notice convert an unsigned integer to a signed integer\\n     * @param a uint to convert into a signed integer\\n     * @return converted signed integer\\n     */\\n    function uintToInt(uint256 a) internal pure returns (int256) {\\n        require(a < 2**255, \\\"FixedPointInt256: out of int range\\\");\\n\\n        return int256(a);\\n    }\\n\\n    /**\\n     * @notice convert a signed integer to an unsigned integer\\n     * @param a int to convert into an unsigned integer\\n     * @return converted unsigned integer\\n     */\\n    function intToUint(int256 a) internal pure returns (uint256) {\\n        if (a < 0) {\\n            return uint256(-a);\\n        } else {\\n            return uint256(a);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/haythem96/Projects/Opyn/GammaProtocol/contracts/packages/oz/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/haythem96/Projects/Opyn/GammaProtocol/contracts/packages/oz/SignedSafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity ^0.6.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 private constant _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/haythem96/Projects/Opyn/GammaProtocol/contracts/pricers/YearnPricer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.10;\\n\\nimport {FixedPointInt256 as FPI} from \\\"../libs/FixedPointInt256.sol\\\";\\nimport {OracleInterface} from \\\"../interfaces/OracleInterface.sol\\\";\\nimport {OpynPricerInterface} from \\\"../interfaces/OpynPricerInterface.sol\\\";\\nimport {YearnVaultInterface} from \\\"../interfaces/YearnVaultInterface.sol\\\";\\nimport {ERC20Interface} from \\\"../interfaces/ERC20Interface.sol\\\";\\nimport {SafeMath} from \\\"../packages/oz/SafeMath.sol\\\";\\n\\n/**\\n * @notice A Pricer contract for a Yearn yToken\\n */\\ncontract YearnPricer is OpynPricerInterface {\\n    using SafeMath for uint256;\\n\\n    /// @notice opyn oracle address\\n    OracleInterface public oracle;\\n\\n    /// @notice yToken that this pricer will a get price for\\n    YearnVaultInterface public yToken;\\n\\n    /// @notice underlying asset for this yToken\\n    ERC20Interface public underlying;\\n\\n    /// @notice decimals for the underlying asset\\n    uint8 public underlyingDecimals;\\n\\n    /**\\n     * @param _yToken yToken asset\\n     * @param _underlying underlying asset for this yToken\\n     * @param _oracle Opyn Oracle contract address\\n     */\\n    constructor(\\n        address _yToken,\\n        address _underlying,\\n        address _oracle\\n    ) public {\\n        require(_yToken != address(0), \\\"YearnPricer: yToken address can not be 0\\\");\\n        require(_underlying != address(0), \\\"YearnPricer: underlying address can not be 0\\\");\\n        require(_oracle != address(0), \\\"YearnPricer: oracle address can not be 0\\\");\\n\\n        ERC20Interface underlyingToken = ERC20Interface(_underlying);\\n        underlyingDecimals = underlyingToken.decimals();\\n        yToken = YearnVaultInterface(_yToken);\\n        underlying = underlyingToken;\\n        oracle = OracleInterface(_oracle);\\n    }\\n\\n    /**\\n     * @notice get the live price for the asset\\n     * @dev overrides the getPrice function in OpynPricerInterface\\n     * @return price of 1e8 yToken in USD, scaled by 1e8\\n     */\\n    function getPrice() external override view returns (uint256) {\\n        uint256 underlyingPrice = oracle.getPrice(address(underlying));\\n        require(underlyingPrice > 0, \\\"YearnPricer: underlying price is 0\\\");\\n        return _underlyingPriceToYtokenPrice(underlyingPrice);\\n    }\\n\\n    /**\\n     * @notice set the expiry price in the oracle\\n     * @dev requires that the underlying price has been set before setting a yToken price\\n     * @param _expiryTimestamp expiry to set a price for\\n     */\\n    function setExpiryPriceInOracle(uint256 _expiryTimestamp) external {\\n        (uint256 underlyingPriceExpiry, ) = oracle.getExpiryPrice(address(underlying), _expiryTimestamp);\\n        require(underlyingPriceExpiry > 0, \\\"YearnPricer: underlying price not set yet\\\");\\n        uint256 yTokenPrice = _underlyingPriceToYtokenPrice(underlyingPriceExpiry);\\n        oracle.setExpiryPrice(address(yToken), _expiryTimestamp, yTokenPrice);\\n    }\\n\\n    /**\\n     * @dev convert underlying price to yToken price with the yToken to underlying exchange rate\\n     * @param _underlyingPrice price of 1 underlying token (ie 1e6 USDC, 1e18 WETH) in USD, scaled by 1e8\\n     * @return price of 1e8 yToken in USD, scaled by 1e8\\n     */\\n    function _underlyingPriceToYtokenPrice(uint256 _underlyingPrice) private view returns (uint256) {\\n        uint256 pricePerShare = yToken.pricePerShare();\\n        return pricePerShare.mul(_underlyingPrice).div(10**uint256(underlyingDecimals));\\n    }\\n\\n    function getHistoricalPrice(uint80 _roundId) external override view returns (uint256, uint256) {\\n        revert(\\\"YearnPricer: Deprecated\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getHistoricalPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract OracleInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"setExpiryPriceInOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract ERC20Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yToken\",\"outputs\":[{\"internalType\":\"contract YearnVaultInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"YearnPricer","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a9fe4601811213c340e850ea305481aff02f5b28000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000c497f40d1b7db6fa5017373f1a0ec6d53126da23","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}