{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/utils/Signer.sol\": {\r\n      \"content\": \"/*\\r\\n\\r\\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\\r\\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\\r\\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\\r\\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\\r\\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\\r\\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\n// solium-disable linebreak-style\\r\\npragma solidity 0.8.6;\\r\\n\\r\\n\\r\\nimport \\\"./interface/Safe.sol\\\";\\r\\nimport \\\"@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title PrimeDAO Signer Contract\\r\\n * @dev   Enables signing SeedFactory.deploySeed() transaction before sending it to Gnosis Safe.\\r\\n */\\r\\ncontract Signer is ISignatureValidator {\\r\\n\\r\\n    // SeedFactory.deploySeed() byte hash\\r\\n    bytes4 internal constant SEED_FACTORY_MAGIC_VALUE  = 0xda235e6e;\\r\\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH =\\r\\n    0x7a9f5b2bf4dbb53eb85e012c6094a3d71d76e5bfe821f44ab63ed59311264e35;\\r\\n    bytes32 private constant SEED_MSG_TYPEHASH         =\\r\\n    0xa1a7ad659422d5fc08fdc481fd7d8af8daf7993bc4e833452b0268ceaab66e5d;\\r\\n\\r\\n    mapping(bytes32 => bytes32) public approvedSignatures;\\r\\n\\r\\n    /* solium-disable */\\r\\n    address public immutable safe;\\r\\n    address public immutable seedFactory;\\r\\n    /* solium-enable */\\r\\n\\r\\n    event SignatureCreated(bytes signature, bytes32 indexed hash);\\r\\n\\r\\n    /**\\r\\n     * @dev                Signer Constructor\\r\\n     * @param _safe        Gnosis Safe address.\\r\\n     * @param _seedFactory Seed Factory address.\\r\\n     */\\r\\n    constructor (address _safe, address _seedFactory) {\\r\\n        require(\\r\\n            _safe != address(0) && _seedFactory != address(0),\\r\\n            \\\"Signer: Safe and SeedFactory address cannot be zero\\\"\\r\\n            );\\r\\n        safe = _safe;\\r\\n        seedFactory = _seedFactory;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev                   Signature generator\\r\\n     * @param _to             receiver address.\\r\\n     * @param _value          value in wei.\\r\\n     * @param _data           encoded transaction data.\\r\\n     * @param _operation      type of operation call.\\r\\n     * @param _safeTxGas      safe transaction gas for gnosis safe.\\r\\n     * @param _baseGas        base gas for gnosis safe.\\r\\n     * @param _gasPrice       gas price for gnosis safe transaction.\\r\\n     * @param _gasToken       token which gas needs to paid for gnosis safe transaction.\\r\\n     * @param _refundReceiver address account to receive refund for remaining gas.\\r\\n     * @param _nonce          gnosis safe contract nonce.\\r\\n     */\\r\\n    function generateSignature(\\r\\n        address _to,\\r\\n        uint256 _value,\\r\\n        bytes calldata _data,\\r\\n        Enum.Operation _operation,\\r\\n        uint256 _safeTxGas,\\r\\n        uint256 _baseGas,\\r\\n        uint256 _gasPrice,\\r\\n        address _gasToken,\\r\\n        address _refundReceiver,\\r\\n        uint256 _nonce\\r\\n    ) external returns(bytes memory signature, bytes32 hash)\\r\\n    {\\r\\n\\r\\n        // check if transaction parameters are correct\\r\\n        require(\\r\\n            _to == seedFactory,\\r\\n            \\\"Signer: cannot sign transaction transaction to invalid seedFactory\\\"\\r\\n        );\\r\\n        require(\\r\\n            _getFunctionHashFromData(_data) == SEED_FACTORY_MAGIC_VALUE,\\r\\n            \\\"Signer: can only sign calls to deploySeed\\\"\\r\\n        );\\r\\n        require(\\r\\n            _value == 0 &&\\r\\n            _refundReceiver == address(0) &&\\r\\n            _operation == Enum.Operation.Call,\\r\\n            \\\"Signer: invalid arguments provided\\\"\\r\\n        );\\r\\n\\r\\n        // get contractTransactionHash from gnosis safe\\r\\n        hash = Safe(safe).getTransactionHash(\\r\\n            _to,\\r\\n            0,\\r\\n            _data,\\r\\n            _operation,\\r\\n            _safeTxGas,\\r\\n            _baseGas,\\r\\n            _gasPrice,\\r\\n            _gasToken,\\r\\n            _refundReceiver,\\r\\n            _nonce\\r\\n            );\\r\\n\\r\\n        bytes memory paddedAddress = bytes.concat(bytes12(0), bytes20(address(this)));\\r\\n        bytes memory messageHash = _encodeMessageHash(hash);\\r\\n        // check if transaction is not signed before\\r\\n        require(\\r\\n            approvedSignatures[hash] != keccak256(messageHash),\\r\\n            \\\"Signer: transaction already signed\\\"\\r\\n            );\\r\\n\\r\\n        // generate signature and add it to approvedSignatures mapping\\r\\n        signature = bytes.concat(paddedAddress, bytes32(uint256(65)), bytes1(0), bytes32(uint256(messageHash.length)), messageHash);\\r\\n        approvedSignatures[hash] = keccak256(messageHash);\\r\\n        emit SignatureCreated(signature, hash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev                Validate signature using EIP1271\\r\\n     * @param _data        Encoded transaction hash supplied to verify signature.\\r\\n     * @param _signature   Signature that needs to be verified.\\r\\n     */\\r\\n    function isValidSignature(bytes memory _data, bytes memory _signature) public virtual override view returns(bytes4) {\\r\\n        if (_data.length==32) {\\r\\n            bytes32 hash;\\r\\n            assembly {\\r\\n                hash := mload(add(_data, 32))\\r\\n            }\\r\\n            if (approvedSignatures[hash] == keccak256(_signature)) {\\r\\n                return EIP1271_MAGIC_VALUE;\\r\\n            }\\r\\n        } else {\\r\\n            if (approvedSignatures[keccak256(_data)] == keccak256(_signature)) {\\r\\n                return EIP1271_MAGIC_VALUE;\\r\\n            }\\r\\n        }\\r\\n        return \\\"0x\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev               Get the byte hash of function call i.e. first four bytes of data\\r\\n     * @param data        encoded transaction data.\\r\\n     */\\r\\n    function _getFunctionHashFromData(bytes memory data) private pure returns(bytes4 functionHash) {\\r\\n        assembly {\\r\\n            functionHash := mload(add(data, 32))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev                encode message with contants\\r\\n     * @param message      the message that needs to be encoded\\r\\n     */\\r\\n    function _encodeMessageHash(bytes32 message) private pure returns (bytes memory) {\\r\\n        bytes32 safeMessageHash = keccak256(abi.encode(SEED_MSG_TYPEHASH, message));\\r\\n        return\\r\\n            abi.encodePacked(\\r\\n                bytes1(0x19), bytes1(0x23), keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, safeMessageHash)));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/utils/interface/Safe.sol\": {\r\n      \"content\": \"/*\\r\\n\\r\\n██████╗░██████╗░██╗███╗░░░███╗███████╗██████╗░░█████╗░░█████╗░\\r\\n██╔══██╗██╔══██╗██║████╗░████║██╔════╝██╔══██╗██╔══██╗██╔══██╗\\r\\n██████╔╝██████╔╝██║██╔████╔██║█████╗░░██║░░██║███████║██║░░██║\\r\\n██╔═══╝░██╔══██╗██║██║╚██╔╝██║██╔══╝░░██║░░██║██╔══██║██║░░██║\\r\\n██║░░░░░██║░░██║██║██║░╚═╝░██║███████╗██████╔╝██║░░██║╚█████╔╝\\r\\n╚═╝░░░░░╚═╝░░╚═╝╚═╝╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═╝░░╚═╝░╚════╝░\\r\\n\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: GPL-3.0-or-later\\r\\n\\r\\n/* solium-disable */\\r\\npragma solidity 0.8.6;\\r\\n\\r\\ncontract Enum {\\r\\n    enum Operation {Call, DelegateCall}\\r\\n}\\r\\n\\r\\ninterface Safe{\\r\\n    function getTransactionHash(\\r\\n        address to,\\r\\n        uint256 value,\\r\\n        bytes calldata data,\\r\\n        Enum.Operation operation,\\r\\n        uint256 safeTxGas,\\r\\n        uint256 baseGas,\\r\\n        uint256 gasPrice,\\r\\n        address gasToken,\\r\\n        address refundReceiver,\\r\\n        uint256 _nonce\\r\\n    ) external view returns (bytes32);\\r\\n}\"\r\n    },\r\n    \"@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract ISignatureValidatorConstants {\\n    // bytes4(keccak256(\\\"isValidSignature(bytes,bytes)\\\")\\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;\\n}\\n\\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param _data Arbitrary length data signed on the behalf of address(this)\\n     * @param _signature Signature byte array associated with _data\\n     *\\n     * MUST return the bytes4 magic value 0x20c13b0b when function passes.\\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n     * MUST allow external calls\\n     */\\n    function isValidSignature(bytes memory _data, bytes memory _signature) public view virtual returns (bytes4);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_seedFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"SignatureCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"approvedSignatures\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"_operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_safeTxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gasToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_refundReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"generateSignature\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Signer","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000052f50f557704938df066ec4db7426d66538e779600000000000000000000000016967ba683bfa5bd545aa196f30bd7fdc6e32e76","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}