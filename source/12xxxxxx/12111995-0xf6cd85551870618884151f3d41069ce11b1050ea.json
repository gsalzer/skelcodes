{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity = 0.5.16;\r\n\r\ncontract Ownable {\r\n\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"YouSwap: CALLER_IS_NOT_THE_OWNER\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"YouSwap: NEW_OWNER_IS_THE_ZERO_ADDRESS\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract MultiSigWallet is Ownable {\r\n\r\n    mapping(address => uint8) private _managers;\r\n    mapping(address => uint8) private _cashiers;\r\n\r\n    modifier isManager{\r\n        require(_managers[msg.sender] == 1);\r\n        _;\r\n    }\r\n\r\n    modifier isCashier{\r\n        require(_cashiers[msg.sender] == 1 || _managers[msg.sender] == 1);\r\n        _;\r\n    }\r\n\r\n    uint private constant MIN_SIGNATURES = 2;\r\n    uint private _nonce = 0;\r\n\r\n    address private constant _youToken = 0x1d32916CFA6534D261AD53E2498AB95505bd2510;\r\n\r\n    struct Transaction {\r\n        uint8 state;\r\n        address creator;\r\n        address recipient;\r\n        uint amount;\r\n        uint8 signatureCount;\r\n        mapping(address => uint8) signatures;\r\n    }\r\n\r\n    mapping(uint => Transaction) private _pendingTransactions;\r\n    uint[] private _pendingTxIDs;\r\n\r\n    constructor() public {\r\n        _managers[0xf3c5C84E69163bD60D49A90cC4d4b7f12bb592d2] = 1;\r\n        _managers[0xD391FF3F474478aB9517aabD8cA22c599c6E6314] = 1;\r\n\r\n\r\n        _cashiers[0xfCa8243ADc135E043D73a6F68DEc771F086277F2] = 1;\r\n    }\r\n\r\n    event WithdrawFunds(address recipient, uint amount);\r\n    event TransactionCreated(\r\n        address creator,\r\n        address recipient,\r\n        uint amount,\r\n        uint transactionId\r\n    );\r\n\r\n    function addManager(address manager) external onlyOwner {\r\n        _managers[manager] = 1;\r\n    }\r\n\r\n    function removeManager(address manager) external onlyOwner {\r\n        _managers[manager] = 0;\r\n    }\r\n\r\n    function manager(address account) external view returns (bool) {\r\n        return _managers[account] == 1;\r\n    }\r\n\r\n    function addCashier(address cashier) external isManager {\r\n        _cashiers[cashier] = 1;\r\n    }\r\n\r\n    function removeCashier(address cashier) external isManager {\r\n        _cashiers[cashier] = 0;\r\n    }\r\n\r\n    function cashier(address account) external view returns (bool) {\r\n        return _cashiers[account] == 1;\r\n    }\r\n\r\n    function withdraw(address recipient, uint amount) isCashier external returns (uint){\r\n        uint transactionId = ++_nonce;\r\n\r\n        Transaction storage transaction = _pendingTransactions[transactionId];\r\n        transaction.state = 1;\r\n        transaction.creator = msg.sender;\r\n        transaction.recipient = recipient;\r\n        transaction.amount = amount;\r\n        transaction.signatureCount = 0;\r\n        if (_managers[msg.sender] == 1)\r\n        {\r\n            transaction.signatureCount = 1;\r\n            transaction.signatures[msg.sender] = 1;\r\n        }\r\n\r\n        _pendingTxIDs.push(transactionId);\r\n        emit TransactionCreated(msg.sender, recipient, amount, transactionId);\r\n\r\n        return transactionId;\r\n    }\r\n\r\n    function getPendingTxIDs() public view returns (uint[] memory){\r\n        return _pendingTxIDs;\r\n    }\r\n\r\n    function getPendingTransaction(uint transactionId) external view returns\r\n    (\r\n        address creator,\r\n        address recipient,\r\n        uint256 amount,\r\n        uint8 signatureCount\r\n    ){\r\n        require(_pendingTransactions[transactionId].state == 1, 'YouSwap:NOT_EXIST');\r\n\r\n        return (\r\n        _pendingTransactions[transactionId].creator,\r\n        _pendingTransactions[transactionId].recipient,\r\n        _pendingTransactions[transactionId].amount,\r\n        _pendingTransactions[transactionId].signatureCount\r\n        );\r\n    }\r\n\r\n    function signTransaction(uint transactionId) external isManager {\r\n        require(_pendingTransactions[transactionId].state == 1, 'YouSwap:NOT_EXIST');\r\n        Transaction storage transaction = _pendingTransactions[transactionId];\r\n        require(transaction.signatures[msg.sender] != 1, \"YouSwap: SIGNED_ALREADY\");\r\n        transaction.signatures[msg.sender] = 1;\r\n        transaction.signatureCount++;\r\n\r\n        if (transaction.signatureCount >= MIN_SIGNATURES) {\r\n            _transfer(_youToken, transaction.recipient, transaction.amount);\r\n            emit WithdrawFunds(transaction.recipient, transaction.amount);\r\n            deleteTransaction(transactionId);\r\n        }\r\n    }\r\n\r\n    function deleteTransaction(uint transactionId) public isCashier {\r\n        require(_pendingTransactions[transactionId].state == 1, 'YouSwap:NOT_EXIST');\r\n        _pendingTransactions[transactionId].state = 0;\r\n        uint8 replace = 0;\r\n        for (uint i = 0; i < _pendingTxIDs.length; i++) {\r\n            if (1 == replace) {\r\n                _pendingTxIDs[i - 1] = _pendingTxIDs[i];\r\n            }\r\n\r\n            if (transactionId == _pendingTxIDs[i]) {\r\n                replace = 1;\r\n            }\r\n        }\r\n        delete _pendingTxIDs[_pendingTxIDs.length - 1];\r\n        _pendingTxIDs.length--;\r\n\r\n        delete _pendingTransactions[transactionId];\r\n\r\n        _nonce--;\r\n    }\r\n\r\n    function _transfer(address token, address recipient, uint amount) private {\r\n        bytes4 methodId = bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(methodId, recipient, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'YouSwap: TRANSFER_FAILED');\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"TransactionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFunds\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cashier\",\"type\":\"address\"}],\"name\":\"addCashier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"cashier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"deleteTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getPendingTransaction\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"signatureCount\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPendingTxIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"cashier\",\"type\":\"address\"}],\"name\":\"removeCashier\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"signTransaction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MultiSigWallet","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://dfc51cedbd378321f774030fa24d267e5afe89b04145febbaacaa91f73bed49b"}]}