{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.11 https://hardhat.org\r\n\r\n// File contracts/solidity/testing/Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/util/Ownable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/solidity/interface/IAdminUpgradeabilityProxy.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IAdminUpgradeabilityProxy {\r\n    // Read functions.\r\n    function admin() external view returns (address);\r\n    function implementation() external view returns (address);\r\n\r\n    // Write functions.\r\n    function changeAdmin(address newAdmin) external;\r\n    function upgradeTo(address newImplementation) external;\r\n}\r\n\r\n\r\n// File contracts/solidity/proxy/ProxyController.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\ncontract ProxyController is Ownable {\r\n    address public vaultFactoryImpl;\r\n    address public eligManagerImpl;\r\n    address public stakingProviderImpl;\r\n    address public stakingImpl;\r\n    address public feeDistribImpl;\r\n\r\n    IAdminUpgradeabilityProxy private vaultFactoryProxy;\r\n    IAdminUpgradeabilityProxy private eligManagerProxy;\r\n    IAdminUpgradeabilityProxy private stakingProviderProxy;\r\n    IAdminUpgradeabilityProxy private stakingProxy;\r\n    IAdminUpgradeabilityProxy private feeDistribProxy;\r\n\r\n    event ImplAddressSet(uint256 index, address impl);\r\n    event ProxyAdminChanged(uint256 index, address newAdmin);\r\n\r\n    constructor(\r\n        address vaultFactory,\r\n        address eligManager,\r\n        address stakingProvider,\r\n        address staking,\r\n        address feeDistrib\r\n    ) {\r\n        vaultFactoryProxy = IAdminUpgradeabilityProxy(vaultFactory);\r\n        eligManagerProxy = IAdminUpgradeabilityProxy(eligManager);\r\n        stakingProviderProxy = IAdminUpgradeabilityProxy(stakingProvider);\r\n        stakingProxy = IAdminUpgradeabilityProxy(staking);\r\n        feeDistribProxy = IAdminUpgradeabilityProxy(feeDistrib);\r\n    }\r\n\r\n    function getAdmin(uint256 index) public view returns (address admin) {\r\n        if (index == 0) {\r\n            return vaultFactoryProxy.admin();\r\n        } else if (index == 1) {\r\n            return eligManagerProxy.admin();\r\n        } else if (index == 2) {\r\n            return stakingProviderProxy.admin();\r\n        } else if (index == 3) {\r\n            return stakingProxy.admin();\r\n        } else if (index == 4) {\r\n            return feeDistribProxy.admin();\r\n        }\r\n    }\r\n\r\n    function fetchImplAddress(uint256 index) public {\r\n        if (index == 0) {\r\n            vaultFactoryImpl = vaultFactoryProxy.implementation();\r\n            emit ImplAddressSet(0, vaultFactoryImpl);\r\n        } else if (index == 1) {\r\n            eligManagerImpl = eligManagerProxy.implementation();\r\n            emit ImplAddressSet(index, eligManagerImpl);\r\n        } else if (index == 2) {\r\n            stakingProviderImpl = stakingProviderProxy.implementation();\r\n            emit ImplAddressSet(index, stakingProviderImpl);\r\n        } else if (index == 3) {\r\n            stakingImpl = stakingProxy.implementation();\r\n            emit ImplAddressSet(index, stakingImpl);\r\n        } else if (index == 4) {\r\n            feeDistribImpl = feeDistribProxy.implementation();\r\n            emit ImplAddressSet(index, feeDistribImpl);\r\n        }\r\n    }\r\n\r\n    function changeAllProxyAdmins(address newAdmin) public onlyOwner {\r\n        changeProxyAdmin(0, newAdmin);\r\n        changeProxyAdmin(1, newAdmin);\r\n        changeProxyAdmin(2, newAdmin);\r\n        changeProxyAdmin(3, newAdmin);\r\n        changeProxyAdmin(4, newAdmin);\r\n    }\r\n\r\n    function changeProxyAdmin(uint256 index, address newAdmin)\r\n        public\r\n        onlyOwner\r\n    {\r\n        if (index == 0) {\r\n            vaultFactoryProxy.changeAdmin(newAdmin);\r\n        } else if (index == 1) {\r\n            eligManagerProxy.changeAdmin(newAdmin);\r\n        } else if (index == 2) {\r\n            stakingProviderProxy.changeAdmin(newAdmin);\r\n        } else if (index == 3) {\r\n            stakingProxy.changeAdmin(newAdmin);\r\n        } else if (index == 4) {\r\n            feeDistribProxy.changeAdmin(newAdmin);\r\n        }\r\n        emit ProxyAdminChanged(index, newAdmin);\r\n    }\r\n\r\n    function upgradeProxyTo(uint256 index, address newImpl) public onlyOwner {\r\n        if (index == 0) {\r\n            vaultFactoryProxy.upgradeTo(newImpl);\r\n        } else if (index == 1) {\r\n            eligManagerProxy.upgradeTo(newImpl);\r\n        } else if (index == 2) {\r\n            stakingProviderProxy.upgradeTo(newImpl);\r\n        } else if (index == 3) {\r\n            stakingProxy.upgradeTo(newImpl);\r\n        } else if (index == 4) {\r\n            feeDistribProxy.upgradeTo(newImpl);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"eligManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeDistrib\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"name\":\"ImplAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"ProxyAdminChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAllProxyAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeProxyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligManagerImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistribImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"fetchImplAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingProviderImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"}],\"name\":\"upgradeProxyTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultFactoryImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ProxyController","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000be86f647b167567525ccaafcd6f881f1ee5582160000000000000000000000004086e98cce041d286112d021612fd894cfed94d50000000000000000000000005fad0e4cc9925365b9b0bbec9e0c3536c0b1a5c7000000000000000000000000688c3e4658b5367da06fd629e41879beab538e370000000000000000000000007ae9d7ee8489cad7afc84111b8b185ee594ae090","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b1a0ef54cfb79c43a94a24553fe6328b89e48355d0d07dcacd5ef16a635f79d2"}]}