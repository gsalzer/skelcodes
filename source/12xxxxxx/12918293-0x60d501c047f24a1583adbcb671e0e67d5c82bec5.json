{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.3.0 https://hardhat.org\r\n\r\n// File contracts/interfaces/ICoFiXMapping.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev The interface defines methods for CoFiX builtin contract address mapping\r\ninterface ICoFiXMapping {\r\n\r\n    /// @dev Set the built-in contract address of the system\r\n    /// @param cofiToken Address of CoFi token contract\r\n    /// @param cofiNode Address of CoFi Node contract\r\n    /// @param cofixDAO ICoFiXDAO implementation contract address\r\n    /// @param cofixRouter ICoFiXRouter implementation contract address for CoFiX\r\n    /// @param cofixController ICoFiXController implementation contract address\r\n    /// @param cofixVaultForStaking ICoFiXVaultForStaking implementation contract address\r\n    function setBuiltinAddress(\r\n        address cofiToken,\r\n        address cofiNode,\r\n        address cofixDAO,\r\n        address cofixRouter,\r\n        address cofixController,\r\n        address cofixVaultForStaking\r\n    ) external;\r\n\r\n    /// @dev Get the built-in contract address of the system\r\n    /// @return cofiToken Address of CoFi token contract\r\n    /// @return cofiNode Address of CoFi Node contract\r\n    /// @return cofixDAO ICoFiXDAO implementation contract address\r\n    /// @return cofixRouter ICoFiXRouter implementation contract address for CoFiX\r\n    /// @return cofixController ICoFiXController implementation contract address\r\n    function getBuiltinAddress() external view returns (\r\n        address cofiToken,\r\n        address cofiNode,\r\n        address cofixDAO,\r\n        address cofixRouter,\r\n        address cofixController,\r\n        address cofixVaultForStaking\r\n    );\r\n\r\n    /// @dev Get address of CoFi token contract\r\n    /// @return Address of CoFi Node token contract\r\n    function getCoFiTokenAddress() external view returns (address);\r\n\r\n    /// @dev Get address of CoFi Node contract\r\n    /// @return Address of CoFi Node contract\r\n    function getCoFiNodeAddress() external view returns (address);\r\n\r\n    /// @dev Get ICoFiXDAO implementation contract address\r\n    /// @return ICoFiXDAO implementation contract address\r\n    function getCoFiXDAOAddress() external view returns (address);\r\n\r\n    /// @dev Get ICoFiXRouter implementation contract address for CoFiX\r\n    /// @return ICoFiXRouter implementation contract address for CoFiX\r\n    function getCoFiXRouterAddress() external view returns (address);\r\n\r\n    /// @dev Get ICoFiXController implementation contract address\r\n    /// @return ICoFiXController implementation contract address\r\n    function getCoFiXControllerAddress() external view returns (address);\r\n\r\n    /// @dev Get ICoFiXVaultForStaking implementation contract address\r\n    /// @return ICoFiXVaultForStaking implementation contract address\r\n    function getCoFiXVaultForStakingAddress() external view returns (address);\r\n\r\n    /// @dev Registered address. The address registered here is the address accepted by CoFiX system\r\n    /// @param key The key\r\n    /// @param addr Destination address. 0 means to delete the registration information\r\n    function registerAddress(string calldata key, address addr) external;\r\n\r\n    /// @dev Get registered address\r\n    /// @param key The key\r\n    /// @return Destination address. 0 means empty\r\n    function checkAddress(string calldata key) external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/interfaces/ICoFiXGovernance.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev This interface defines the governance methods\r\ninterface ICoFiXGovernance is ICoFiXMapping {\r\n\r\n    /// @dev Set governance authority\r\n    /// @param addr Destination address\r\n    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function setGovernance(address addr, uint flag) external;\r\n\r\n    /// @dev Get governance rights\r\n    /// @param addr Destination address\r\n    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function getGovernance(address addr) external view returns (uint);\r\n\r\n    /// @dev Check whether the target address has governance rights for the given target\r\n    /// @param addr Destination address\r\n    /// @param flag Permission weight. The permission of the target address must be greater than this weight \r\n    /// to pass the check\r\n    /// @return True indicates permission\r\n    function checkGovernance(address addr, uint flag) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.1.0\r\n\r\n// MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/libs/TransferHelper.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/ICoFiXDAO.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n\r\n/// @dev This interface defines the DAO methods\r\ninterface ICoFiXDAO {\r\n\r\n    /// @dev Application Flag Changed event\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    event ApplicationChanged(address addr, uint flag);\r\n    \r\n    /// @dev Configuration structure of CoFiXDAO contract\r\n    struct Config {\r\n        // Redeem status, 1 means normal\r\n        uint8 status;\r\n\r\n        // The number of CoFi redeem per block. 100\r\n        uint16 cofiPerBlock;\r\n\r\n        // The maximum number of CoFi in a single redeem. 30000\r\n        uint32 cofiLimit;\r\n\r\n        // Price deviation limit, beyond this upper limit stop redeem (10000 based). 1000\r\n        uint16 priceDeviationLimit;\r\n    }\r\n\r\n    /// @dev Modify configuration\r\n    /// @param config Configuration object\r\n    function setConfig(Config calldata config) external;\r\n\r\n    /// @dev Get configuration\r\n    /// @return Configuration object\r\n    function getConfig() external view returns (Config memory);\r\n\r\n    /// @dev Set DAO application\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function setApplication(address addr, uint flag) external;\r\n\r\n    /// @dev Check DAO application flag\r\n    /// @param addr DAO application contract address\r\n    /// @return Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function checkApplication(address addr) external view returns (uint);\r\n\r\n    /// @dev Set the exchange relationship between the token and the price of the anchored target currency.\r\n    /// For example, set USDC to anchor usdt, because USDC is 18 decimal places and usdt is 6 decimal places. \r\n    /// so exchange = 1e6 * 1 ether / 1e18 = 1e6\r\n    /// @param token Address of origin token\r\n    /// @param target Address of target anchor token\r\n    /// @param exchange Exchange rate of token and target\r\n    function setTokenExchange(address token, address target, uint exchange) external;\r\n\r\n    /// @dev Get the exchange relationship between the token and the price of the anchored target currency.\r\n    /// For example, set USDC to anchor usdt, because USDC is 18 decimal places and usdt is 6 decimal places. \r\n    /// so exchange = 1e6 * 1 ether / 1e18 = 1e6\r\n    /// @param token Address of origin token\r\n    /// @return target Address of target anchor token\r\n    /// @return exchange Exchange rate of token and target\r\n    function getTokenExchange(address token) external view returns (address target, uint exchange);\r\n\r\n    /// @dev Add reward\r\n    /// @param pool Destination pool\r\n    function addETHReward(address pool) external payable;\r\n\r\n    /// @dev The function returns eth rewards of specified pool\r\n    /// @param pool Destination pool\r\n    function totalETHRewards(address pool) external view returns (uint);\r\n\r\n    /// @dev Settlement\r\n    /// @param pool Destination pool. Indicates which pool to pay with\r\n    /// @param tokenAddress Token address of receiving funds (0 means ETH)\r\n    /// @param to Address to receive\r\n    /// @param value Amount to receive\r\n    function settle(address pool, address tokenAddress, address to, uint value) external payable;\r\n\r\n    /// @dev Redeem CoFi for ethers\r\n    /// @notice Eth fee will be charged\r\n    /// @param amount The amount of CoFi\r\n    /// @param payback As the charging fee may change, it is suggested that the caller pay more fees, \r\n    /// and the excess fees will be returned through this address\r\n    function redeem(uint amount, address payback) external payable;\r\n\r\n    /// @dev Redeem CoFi for Token\r\n    /// @notice Eth fee will be charged\r\n    /// @param token The target token\r\n    /// @param amount The amount of CoFi\r\n    /// @param payback As the charging fee may change, it is suggested that the caller pay more fees, \r\n    /// and the excess fees will be returned through this address\r\n    function redeemToken(address token, uint amount, address payback) external payable;\r\n\r\n    /// @dev Get the current amount available for repurchase\r\n    function quotaOf() external view returns (uint);\r\n}\r\n\r\n\r\n// File contracts/CoFiXBase.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n// Router contract to interact with each CoFiXPair, no owner or governance\r\n/// @dev Base contract of CoFiX\r\ncontract CoFiXBase {\r\n\r\n    // Address of CoFiToken contract\r\n    address constant COFI_TOKEN_ADDRESS = 0x1a23a6BfBAdB59fa563008c0fB7cf96dfCF34Ea1;\r\n\r\n    // Address of CoFiNode contract\r\n    address constant CNODE_TOKEN_ADDRESS = 0x558201DC4741efc11031Cdc3BC1bC728C23bF512;\r\n\r\n    // Genesis block number of CoFi\r\n    // CoFiToken contract is created at block height 11040156. However, because the mining algorithm of CoFiX1.0\r\n    // is different from that at present, a new mining algorithm is adopted from CoFiX2.1. The new algorithm\r\n    // includes the attenuation logic according to the block. Therefore, it is necessary to trace the block\r\n    // where the CoFi begins to decay. According to the circulation when CoFi2.0 is online, the new mining\r\n    // algorithm is used to deduce and convert the CoFi, and the new algorithm is used to mine the CoFiX2.1\r\n    // on-line flow, the actual block is 11040688\r\n    uint constant COFI_GENESIS_BLOCK = 11040688;\r\n\r\n    /// @dev ICoFiXGovernance implementation contract address\r\n    address public _governance;\r\n\r\n    /// @dev To support open-zeppelin/upgrades\r\n    /// @param governance ICoFiXGovernance implementation contract address\r\n    function initialize(address governance) virtual public {\r\n        require(_governance == address(0), \"CoFiX:!initialize\");\r\n        _governance = governance;\r\n    }\r\n\r\n    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \r\n    ///      super.update(newGovernance) when overriding, and override method without onlyGovernance\r\n    /// @param newGovernance ICoFiXGovernance implementation contract address\r\n    function update(address newGovernance) public virtual {\r\n\r\n        address governance = _governance;\r\n        require(governance == msg.sender || ICoFiXGovernance(governance).checkGovernance(msg.sender, 0), \"CoFiX:!gov\");\r\n        _governance = newGovernance;\r\n    }\r\n\r\n    /// @dev Migrate funds from current contract to CoFiXDAO\r\n    /// @param tokenAddress Destination token address.(0 means eth)\r\n    /// @param value Migrate amount\r\n    function migrate(address tokenAddress, uint value) external onlyGovernance {\r\n\r\n        address to = ICoFiXGovernance(_governance).getCoFiXDAOAddress();\r\n        if (tokenAddress == address(0)) {\r\n            ICoFiXDAO(to).addETHReward { value: value } (address(0));\r\n        } else {\r\n            TransferHelper.safeTransfer(tokenAddress, to, value);\r\n        }\r\n    }\r\n\r\n    //---------modifier------------\r\n\r\n    modifier onlyGovernance() {\r\n        require(ICoFiXGovernance(_governance).checkGovernance(msg.sender, 0), \"CoFiX:!gov\");\r\n        _;\r\n    }\r\n\r\n    modifier noContract() {\r\n        require(msg.sender == tx.origin, \"CoFiX:!contract\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/CoFiXMapping.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev The contract is for CoFiX builtin contract address mapping\r\nabstract contract CoFiXMapping is CoFiXBase, ICoFiXMapping {\r\n\r\n    /// @dev Address of CoFi token contract\r\n    address _cofiToken;\r\n\r\n    /// @dev Address of CoFi Node contract\r\n    address _cofiNode;\r\n\r\n    /// @dev ICoFiXDAO implementation contract address\r\n    address _cofixDAO;\r\n\r\n    /// @dev ICoFiXRouter implementation contract address for CoFiX\r\n    address _cofixRouter;\r\n\r\n    /// @dev ICoFiXController implementation contract address\r\n    address _cofixController;\r\n\r\n    /// @dev ICoFiXVaultForStaking implementation contract address\r\n    address _cofixVaultForStaking;\r\n\r\n    /// @dev Address registered in the system\r\n    mapping(string=>address) _registeredAddress;\r\n\r\n    /// @dev Set the built-in contract address of the system\r\n    /// @param cofiToken Address of CoFi token contract\r\n    /// @param cofiNode Address of CoFi Node contract\r\n    /// @param cofixDAO ICoFiXDAO implementation contract address\r\n    /// @param cofixRouter ICoFiXRouter implementation contract address for CoFiX\r\n    /// @param cofixController ICoFiXController implementation contract address\r\n    /// @param cofixVaultForStaking ICoFiXVaultForStaking implementation contract address\r\n    function setBuiltinAddress(\r\n        address cofiToken,\r\n        address cofiNode,\r\n        address cofixDAO,\r\n        address cofixRouter,\r\n        address cofixController,\r\n        address cofixVaultForStaking\r\n    ) external override onlyGovernance {\r\n\r\n        if (cofiToken != address(0)) {\r\n            _cofiToken = cofiToken;\r\n        }\r\n        if (cofiNode != address(0)) {\r\n            _cofiNode = cofiNode;\r\n        }\r\n        if (cofixDAO != address(0)) {\r\n            _cofixDAO = cofixDAO;\r\n        }\r\n        if (cofixRouter != address(0)) {\r\n            _cofixRouter = cofixRouter;\r\n        }\r\n        if (cofixController != address(0)) {\r\n            _cofixController = cofixController;\r\n        }\r\n        if (cofixVaultForStaking != address(0)) {\r\n            _cofixVaultForStaking = cofixVaultForStaking;\r\n        }\r\n    }\r\n\r\n    /// @dev Get the built-in contract address of the system\r\n    /// @return cofiToken Address of CoFi token contract\r\n    /// @return cofiNode Address of CoFi Node contract\r\n    /// @return cofixDAO ICoFiXDAO implementation contract address\r\n    /// @return cofixRouter ICoFiXRouter implementation contract address for CoFiX\r\n    /// @return cofixController ICoFiXController implementation contract address\r\n    function getBuiltinAddress() external view override returns (\r\n        address cofiToken,\r\n        address cofiNode,\r\n        address cofixDAO,\r\n        address cofixRouter,\r\n        address cofixController,\r\n        address cofixVaultForStaking\r\n    ) {\r\n        return (\r\n            _cofiToken,\r\n            _cofiNode,\r\n            _cofixDAO,\r\n            _cofixRouter,\r\n            _cofixController,\r\n            _cofixVaultForStaking\r\n        );\r\n    }\r\n\r\n    /// @dev Get address of CoFi token contract\r\n    /// @return Address of CoFi Node token contract\r\n    function getCoFiTokenAddress() external view override returns (address) { return _cofiToken; }\r\n\r\n    /// @dev Get address of CoFi Node contract\r\n    /// @return Address of CoFi Node contract\r\n    function getCoFiNodeAddress() external view override returns (address) { return _cofiNode; }\r\n\r\n    /// @dev Get ICoFiXDAO implementation contract address\r\n    /// @return ICoFiXDAO implementation contract address\r\n    function getCoFiXDAOAddress() external view override returns (address) { return _cofixDAO; }\r\n\r\n    /// @dev Get ICoFiXRouter implementation contract address for CoFiX\r\n    /// @return ICoFiXRouter implementation contract address for CoFiX\r\n    function getCoFiXRouterAddress() external view override returns (address) { return _cofixRouter; }\r\n\r\n    /// @dev Get ICoFiXController implementation contract address\r\n    /// @return ICoFiXController implementation contract address\r\n    function getCoFiXControllerAddress() external view override returns (address) { return _cofixController; }\r\n\r\n    /// @dev Get ICoFiXVaultForStaking implementation contract address\r\n    /// @return ICoFiXVaultForStaking implementation contract address\r\n    function getCoFiXVaultForStakingAddress() external view override returns (address) { return _cofixVaultForStaking; }\r\n\r\n    /// @dev Registered address. The address registered here is the address accepted by CoFiX system\r\n    /// @param key The key\r\n    /// @param addr Destination address. 0 means to delete the registration information\r\n    function registerAddress(string calldata key, address addr) external override onlyGovernance {\r\n        _registeredAddress[key] = addr;\r\n    }\r\n\r\n    /// @dev Get registered address\r\n    /// @param key The key\r\n    /// @return Destination address. 0 means empty\r\n    function checkAddress(string calldata key) external view override returns (address) {\r\n        return _registeredAddress[key];\r\n    }\r\n}\r\n\r\n\r\n// File contracts/CoFiXGovernance.sol\r\n\r\n// GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.6;\r\n/// @dev CoFiX governance contract\r\ncontract CoFiXGovernance is CoFiXMapping, ICoFiXGovernance {\r\n\r\n    /// @dev To support open-zeppelin/upgrades\r\n    /// @param governance ICoFiXGovernance implementation contract address\r\n    function initialize(address governance) public override {\r\n\r\n        // While initialize CoFiXGovernance, newGovernance is address(this),\r\n        // So must let newGovernance to 0\r\n        require(governance == address(0), \"CoFiXGovernance:!address\");\r\n\r\n        // newGovernance is address(this)\r\n        super.initialize(address(this));\r\n\r\n        // Add msg.sender to governance\r\n        _governanceMapping[msg.sender] = GovernanceInfo(msg.sender, uint96(0xFFFFFFFFFFFFFFFFFFFFFFFF));\r\n    }\r\n\r\n    /// @dev Structure of governance address information\r\n    struct GovernanceInfo {\r\n        address addr;\r\n        uint96 flag;\r\n    }\r\n\r\n    /// @dev Governance address information\r\n    mapping(address=>GovernanceInfo) _governanceMapping;\r\n\r\n    /// @dev Set governance authority\r\n    /// @param addr Destination address\r\n    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function setGovernance(address addr, uint flag) external override onlyGovernance {\r\n        \r\n        if (flag > 0) {\r\n            _governanceMapping[addr] = GovernanceInfo(addr, uint96(flag));\r\n        } else {\r\n            _governanceMapping[addr] = GovernanceInfo(address(0), uint96(0));\r\n        }\r\n    }\r\n\r\n    /// @dev Get governance rights\r\n    /// @param addr Destination address\r\n    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function getGovernance(address addr) external view override returns (uint) {\r\n        return _governanceMapping[addr].flag;\r\n    }\r\n\r\n    /// @dev Check whether the target address has governance rights for the given target\r\n    /// @param addr Destination address\r\n    /// @param flag Permission weight. The permission of the target address must be greater than this \r\n    /// weight to pass the check\r\n    /// @return True indicates permission\r\n    function checkGovernance(address addr, uint flag) public view override returns (bool) {\r\n        return _governanceMapping[addr].flag > flag;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"checkAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"checkGovernance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuiltinAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cofiToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cofiNode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cofixDAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cofixRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cofixController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cofixVaultForStaking\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCoFiNodeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCoFiTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCoFiXControllerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCoFiXDAOAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCoFiXRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCoFiXVaultForStakingAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"registerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cofiToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cofiNode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cofixDAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cofixRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cofixController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cofixVaultForStaking\",\"type\":\"address\"}],\"name\":\"setBuiltinAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CoFiXGovernance","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"888888","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c6699742fd18abe4337fa0204c20c0511f40604959c35458a62f6d0a36a2487d"}]}