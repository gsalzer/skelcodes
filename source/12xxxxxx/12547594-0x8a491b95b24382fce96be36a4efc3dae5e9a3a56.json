{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/UserProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.5;\\n\\nimport \\\"./utils/lib_storage/UserProxyStorage.sol\\\";\\n\\n/**\\n * @dev UserProxy contract\\n */\\ncontract UserProxy {\\n    // Below are the variables which consume storage slots.\\n    address public operator;\\n    string public version;  // Current version of the contract\\n\\n    receive() external payable {}\\n\\n\\n    /************************************************************\\n    *          Access control and ownership management          *\\n    *************************************************************/\\n    modifier onlyOperator() {\\n        require(operator == msg.sender, \\\"UserProxy: not the operator\\\");\\n        _;\\n    }\\n\\n    function transferOwnership(address _newOperator) external onlyOperator {\\n        require(_newOperator != address(0), \\\"UserProxy: operator can not be zero address\\\");\\n        operator = _newOperator;\\n    }\\n\\n\\n    /************************************************************\\n    *              Constructor and init functions               *\\n    *************************************************************/\\n    /// @dev Replacing constructor and initialize the contract. This function should only be called once.\\n    function initialize() external {\\n        require(\\n            keccak256(abi.encodePacked(version)) == keccak256(abi.encodePacked(\\\"5.0.0\\\")),\\n            \\\"UserProxy: not upgrading from 5.0.0 version\\\"\\n        );\\n\\n        // Upgrade version\\n        version = \\\"5.1.1\\\";\\n    }\\n\\n\\n    /************************************************************\\n    *                     Getter functions                      *\\n    *************************************************************/\\n    function ammWrapperAddr() public view returns (address) {\\n        return AMMWrapperStorage.getStorage().ammWrapperAddr;\\n    }\\n\\n    function isAMMEnabled() public view returns (bool) {\\n        return AMMWrapperStorage.getStorage().isEnabled;\\n    }\\n\\n    function pmmAddr() public view returns (address) {\\n        return PMMStorage.getStorage().pmmAddr;\\n    }\\n\\n    function isPMMEnabled() public view returns (bool) {\\n        return PMMStorage.getStorage().isEnabled;\\n    }\\n\\n\\n    /************************************************************\\n    *           Management functions for Operator               *\\n    *************************************************************/\\n    function setAMMStatus(bool _enable) public onlyOperator {\\n        AMMWrapperStorage.getStorage().isEnabled = _enable;\\n    }\\n\\n    /**\\n     * @dev Update AMMWrapper contract address. Used only when ABI of AMMWrapeer remain unchanged.\\n     * Otherwise, UserProxy contract should be upgraded altogether.\\n     */\\n    function upgradeAMMWrapper(address _newAMMWrapperAddr, bool _enable) external onlyOperator {\\n        AMMWrapperStorage.getStorage().ammWrapperAddr = _newAMMWrapperAddr;\\n        AMMWrapperStorage.getStorage().isEnabled = _enable;\\n    }\\n\\n    function setPMMStatus(bool _enable) public onlyOperator {\\n        PMMStorage.getStorage().isEnabled = _enable;\\n    }\\n\\n    /**\\n     * @dev Update PMM contract address. Used only when ABI of PMM remain unchanged.\\n     * Otherwise, UserProxy contract should be upgraded altogether.\\n     */\\n    function upgradePMM(address _newPMMAddr, bool _enable) external onlyOperator {\\n        PMMStorage.getStorage().pmmAddr = _newPMMAddr;\\n        PMMStorage.getStorage().isEnabled = _enable;\\n    }\\n\\n\\n    /************************************************************\\n    *                   External functions                      *\\n    *************************************************************/\\n    /**\\n     * @dev proxy the call to AMM\\n     */\\n    function toAMM(bytes calldata _payload) external payable {\\n        require(isAMMEnabled(), \\\"UserProxy: AMM is disabled\\\");\\n\\n        (bool callSucceed,) = ammWrapperAddr().call{value: msg.value}(_payload);\\n        if (callSucceed == false) {\\n            // Get the error message returned\\n            assembly {\\n                let ptr := mload(0x40)\\n                let size := returndatasize()\\n                returndatacopy(ptr, 0, size)\\n                revert(ptr, size)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev proxy the call to PMM\\n     */\\n    function toPMM(bytes calldata _payload) external payable {\\n        require(isPMMEnabled(), \\\"UserProxy: PMM is disabled\\\");\\n        require(msg.sender == tx.origin, \\\"UserProxy: only EOA\\\");\\n\\n        (bool callSucceed,) = pmmAddr().call{value: msg.value}(_payload);\\n        if (callSucceed == false) {\\n            // Get the error message returned\\n            assembly {\\n                let ptr := mload(0x40)\\n                let size := returndatasize()\\n                returndatacopy(ptr, 0, size)\\n                revert(ptr, size)\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/lib_storage/UserProxyStorage.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.5;\\npragma experimental ABIEncoderV2;\\n\\nlibrary AMMWrapperStorage {\\n    bytes32 private constant STORAGE_SLOT = 0xbf49677e3150252dfa801a673d2d5ec21eaa360a4674864e55e79041e3f65a6b;\\n\\n\\n    /// @dev Storage bucket for proxy contract.\\n    struct Storage {\\n        // The address of the AMMWrapper contract.\\n        address ammWrapperAddr;\\n        // Is AMM enabled\\n        bool isEnabled;\\n    }\\n\\n    /// @dev Get the storage bucket for this contract.\\n    function getStorage() internal pure returns (Storage storage stor) {\\n        assert(STORAGE_SLOT == bytes32(uint256(keccak256(\\\"userproxy.ammwrapper.storage\\\")) - 1));\\n        bytes32 slot = STORAGE_SLOT;\\n\\n        // Dip into assembly to change the slot pointed to by the local\\n        // variable `stor`.\\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\\n        assembly { stor_slot := slot }\\n    }\\n}\\n\\nlibrary PMMStorage {\\n    bytes32 private constant STORAGE_SLOT = 0x8f135983375ba6442123d61647e7325c1753eabc2e038e44d3b888a970def89a;\\n\\n\\n    /// @dev Storage bucket for proxy contract.\\n    struct Storage {\\n        // The address of the PMM contract.\\n        address pmmAddr;\\n        // Is PMM enabled\\n        bool isEnabled;\\n    }\\n\\n    /// @dev Get the storage bucket for this contract.\\n    function getStorage() internal pure returns (Storage storage stor) {\\n        assert(STORAGE_SLOT == bytes32(uint256(keccak256(\\\"userproxy.pmm.storage\\\")) - 1));\\n        bytes32 slot = STORAGE_SLOT;\\n\\n        // Dip into assembly to change the slot pointed to by the local\\n        // variable `stor`.\\n        // See https://solidity.readthedocs.io/en/v0.6.8/assembly.html?highlight=slot#access-to-external-variables-functions-and-libraries\\n        assembly { stor_slot := slot }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"name\":\"ammWrapperAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAMMEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPMMEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pmmAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setAMMStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"setPMMStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"toAMM\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"toPMM\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAMMWrapperAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"upgradeAMMWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPMMAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enable\",\"type\":\"bool\"}],\"name\":\"upgradePMM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"UserProxy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}