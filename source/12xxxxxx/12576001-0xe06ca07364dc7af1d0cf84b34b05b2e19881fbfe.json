{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: Apache-2.0\r\n// 2021 (c) Cryptollama\r\npragma solidity >=0.4.0 <0.7.0;\r\n\r\ninterface IWool {\r\n    \r\n    function mint(address who, uint amount) external;\r\n    function burnFrom(address who, uint amount) external;\r\n    function balanceOf(address tokenOwner) external returns (uint256);\r\n    \r\n}\r\n\r\ncontract Token {\r\n    \r\n    address private wool = 0x0000000000000000000000000000000000000000;\r\n    address private exchange = 0x0000000000000000000000000000000000000000;\r\n    address private deployer = 0x0000000000000000000000000000000000000000;\r\n\r\n    string public constant name = \"Llama token\";\r\n    string public constant symbol = \"LLAMA\";\r\n    uint8 public constant decimals = 0;\r\n    uint256 public totalSupply = 100000000;\r\n\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    \r\n    mapping(address => uint256) public checkpointTimestamp;\r\n    mapping(address => uint256) public checkpointAmount;\r\n    mapping(address => uint256) public checkpointUnclaimedReward;\r\n    mapping(address => uint256) public checkpointWolfTimer;\r\n    \r\n    uint256 public wolfTimer = 0;\r\n    uint256 public lastWolfTimestamp = now + 604800;\r\n    uint256 public lastaccountedWolfTimestamp = now;\r\n    uint256 public llamasBought = 0;\r\n    bool public isWolf = false;\r\n\r\n    using SafeMath for uint256;\r\n\r\n    constructor() public{\r\n        balances[msg.sender] = totalSupply;\r\n        deployer = msg.sender;\r\n        checkout(msg.sender);\r\n    }\r\n    \r\n    function setExchange(address exchangeAddress) public {\r\n        require(msg.sender == deployer);\r\n        require(exchange == 0x0000000000000000000000000000000000000000);\r\n        exchange = exchangeAddress;\r\n    }\r\n    \r\n    function setWool(address woolAddress) public {\r\n        require(msg.sender == deployer);\r\n        require(wool == 0x0000000000000000000000000000000000000000);\r\n        wool = woolAddress;\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public view returns (uint) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function transfer(address receiver, uint numTokens) public returns (bool) {\r\n        require(numTokens <= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n        balances[receiver] = balances[receiver].add(numTokens);\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        if (msg.sender == exchange) {\r\n            llamasBought += numTokens;\r\n        }\r\n        checkout(msg.sender);\r\n        checkout(receiver);\r\n        checkWolf();\r\n        return true;\r\n    }\r\n\r\n    function approve(address delegate, uint numTokens) public returns (bool) {\r\n        allowed[msg.sender][delegate] = numTokens;\r\n        emit Approval(msg.sender, delegate, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address delegate) public view returns (uint) {\r\n        return allowed[owner][delegate];\r\n    }\r\n\r\n    function transferFrom(address owner, address buyer, uint numTokens) public returns (bool) {\r\n        require(numTokens <= balances[owner]);\r\n        require(numTokens <= allowed[owner][msg.sender]);\r\n\r\n        balances[owner] = balances[owner].sub(numTokens);\r\n        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\r\n        balances[buyer] = balances[buyer].add(numTokens);\r\n        emit Transfer(owner, buyer, numTokens);\r\n        if (owner == exchange) {\r\n            llamasBought += numTokens;\r\n        }\r\n        checkout(owner);\r\n        checkout(buyer);\r\n        checkWolf();\r\n        return true;\r\n    }\r\n    \r\n    function checkout(address who) private {\r\n        uint256 pendingReward = calculatePendingReward(who);\r\n        checkpointUnclaimedReward[who] += pendingReward;\r\n        checkpointTimestamp[who] = now;\r\n        checkpointWolfTimer[who] = wolfTimer;\r\n        checkpointAmount[who] = balances[who];\r\n        \r\n    }\r\n    \r\n    function calculatePendingReward(address who) public view returns (uint256) {\r\n        uint256 timer = now.add(checkpointWolfTimer[who]);\r\n        uint256 timerDecrement = checkpointTimestamp[who].add(wolfTimer);\r\n        if (timer < timerDecrement) {\r\n            return 0;\r\n        }\r\n        return checkpointAmount[who].mul(timer.sub(timerDecrement)).mul(16530000000);\r\n    }\r\n    \r\n    function claim() public {\r\n        require(!isWolf);\r\n        uint256 pendingReward = calculatePendingReward(msg.sender);\r\n        IWool(wool).mint(msg.sender, pendingReward.add(checkpointUnclaimedReward[msg.sender]));\r\n        checkout(msg.sender);\r\n        checkpointUnclaimedReward[msg.sender] = 0;\r\n    }\r\n    \r\n    function breed(uint256 amount) public {\r\n        require (IWool(wool).balanceOf(msg.sender).div(10000000000000000000) >= amount);\r\n        balances[msg.sender] += amount;\r\n        totalSupply += amount;\r\n        IWool(wool).burnFrom(msg.sender, amount.mul(10000000000000000000));\r\n        checkout(msg.sender);\r\n    }\r\n    \r\n    function checkWolf() private {\r\n        if (now > lastWolfTimestamp) {\r\n            lastWolfTimestamp = lastWolfTimestamp + 604800;\r\n            if (llamasBought < 100000) {\r\n                isWolf = true;\r\n                lastaccountedWolfTimestamp = lastWolfTimestamp - 604800;\r\n            } else {\r\n                llamasBought = 0;\r\n            }\r\n        }\r\n        if (isWolf) {\r\n            wolfTimer += now - lastaccountedWolfTimestamp;\r\n            lastaccountedWolfTimestamp = now;\r\n            if (llamasBought > 100000) {\r\n                isWolf = false;\r\n                llamasBought = 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"breed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"calculatePendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkpointAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkpointTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkpointUnclaimedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkpointWolfTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWolf\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWolfTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastaccountedWolfTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"llamasBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"}],\"name\":\"setExchange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"woolAddress\",\"type\":\"address\"}],\"name\":\"setWool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wolfTimer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Token","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"9999","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://bdc632b65f0bf6c1dcc0ae0a6553d008be84c1f6f60a92a216eeabd505ded25d"}]}