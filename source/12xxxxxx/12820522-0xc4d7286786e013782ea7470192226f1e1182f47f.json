{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\ncontract ChizDispenserV2 {\r\n    struct Claim {\r\n        bool claimed;\r\n        uint256 ratId;\r\n    }\r\n\r\n    mapping(uint256 => Claim) existingClaims;\r\n\r\n    ChizDispenser chizDispenser = ChizDispenser(0x5e7fDe13483e5b51da88D2898e0f6a6d7B0c6899);\r\n    ERC721 ratContract = ERC721(0xd21a23606D2746f086f6528Cd6873bAD3307b903);\r\n    ERC20 chizContract = ERC20(0x5c761c1a21637362374204000e383204d347064C);\r\n\r\n    bool paused = false;\r\n    address deployer;\r\n    uint256 amount = 10000 * 1 ether;\r\n\r\n    event Dispense(uint256 amount, uint256 ratId);\r\n\r\n    constructor() {\r\n        deployer = msg.sender;\r\n    }\r\n\r\n    modifier onlyDeployer() {\r\n        require(msg.sender == deployer);\r\n        _;\r\n    }\r\n\r\n    modifier pauseable() {\r\n        require(paused == false, 'contract is paused');\r\n        _;\r\n    }\r\n\r\n    modifier isNotClaimed(uint256 ratId) {\r\n        bool claimed = isClaimed(ratId);\r\n        require(claimed == false, 'tokens for this rat have already been claimed');\r\n        _;\r\n    }\r\n\r\n    function isClaimed(uint256 ratId) public view returns (bool) {\r\n        Claim memory claim = existingClaims[ratId];\r\n        if (claim.claimed) return true;\r\n        (bool claimed, ) = chizDispenser.existingClaims(ratId);\r\n        if (claimed) return true;\r\n        return false;\r\n    }\r\n\r\n    function pause() public onlyDeployer {\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() public onlyDeployer {\r\n        paused = false;\r\n    }\r\n\r\n    function setAmount(uint256 newAmount) public onlyDeployer pauseable {\r\n        amount = newAmount;\r\n    }\r\n\r\n    function withdraw(uint256 withdrawAmount) public onlyDeployer pauseable {\r\n        chizContract.transfer(msg.sender, withdrawAmount);\r\n    }\r\n\r\n    function claimChiz(uint256 ratId) public pauseable isNotClaimed(ratId) {\r\n        address ratOwner = ratContract.ownerOf(ratId);\r\n        require(msg.sender == ratOwner, 'caller is not owner of this rat');\r\n\r\n        existingClaims[ratId] = Claim(true, ratId);\r\n        chizContract.transfer(msg.sender, amount);\r\n\r\n        emit Dispense(amount, ratId);\r\n    }\r\n\r\n    function multiClaimChiz(uint256[] memory ratIds) public pauseable {\r\n        for (uint256 i = 0; i < ratIds.length; i++) {\r\n            bool claimed = isClaimed(ratIds[i]);\r\n            if (!claimed) claimChiz(ratIds[i]);\r\n        }\r\n    }\r\n\r\n    function megaClaimChiz() public pauseable {\r\n        uint256 ratBalance = ratContract.balanceOf(msg.sender);\r\n        for (uint256 i = 0; i < ratBalance; i++) {\r\n            uint256 tokenId = ratContract.tokenOfOwnerByIndex(msg.sender, i);\r\n            bool claimed = isClaimed(tokenId);\r\n            if (!claimed) claimChiz(tokenId);\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract ChizDispenser {\r\n    struct Claim {\r\n        bool claimed;\r\n        uint256 ratId;\r\n    }\r\n    mapping(uint256 => Claim) public existingClaims;\r\n\r\n    function claimChiz(uint256 ratId) public virtual;\r\n}\r\n\r\nabstract contract ERC721 {\r\n    function ownerOf(uint256 id) public virtual returns (address owner);\r\n\r\n    function balanceOf(address owner) public virtual returns (uint256 balance);\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public virtual returns (uint256 id);\r\n}\r\n\r\nabstract contract ERC20 {\r\n    function transfer(address to, uint256 value) public virtual;\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ratId\",\"type\":\"uint256\"}],\"name\":\"Dispense\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratId\",\"type\":\"uint256\"}],\"name\":\"claimChiz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratId\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"megaClaimChiz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ratIds\",\"type\":\"uint256[]\"}],\"name\":\"multiClaimChiz\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"setAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ChizDispenserV2","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d23d7b6cee1956346b503a9b146e5c13d50e5041ddd80768da1ab0e4f0be585b"}]}