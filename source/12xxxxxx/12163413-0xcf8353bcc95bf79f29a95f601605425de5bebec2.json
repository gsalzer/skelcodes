{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.0\r\n// License-Identifier: MIT\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /// @notice EIP 2612\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n\r\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol@v1.2.0\r\n// License-Identifier: MIT\r\n\r\nlibrary BoringERC20 {\r\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\r\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\r\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\r\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\r\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\r\n\r\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\r\n    /// Reverts on a failed transfer.\r\n    /// @param token The address of the ERC-20 token.\r\n    /// @param to Transfer tokens to.\r\n    /// @param amount The token amount.\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: Transfer failed\");\r\n    }\r\n\r\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\r\n    /// Reverts on a failed transfer.\r\n    /// @param token The address of the ERC-20 token.\r\n    /// @param from Transfer tokens from.\r\n    /// @param to Transfer tokens to.\r\n    /// @param amount The token amount.\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal {\r\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: TransferFrom failed\");\r\n    }\r\n}\r\n\r\n/// @notice Interface for AAVE deposit and withdraw.\r\ninterface IAaveBridge {\r\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\r\n\r\n    function deposit( \r\n        address asset, \r\n        uint256 amount, \r\n        address onBehalfOf, \r\n        uint16 referralCode\r\n    ) external;\r\n\r\n    function withdraw( \r\n        address token, \r\n        uint256 amount, \r\n        address destination\r\n    ) external;\r\n}\r\n\r\n/// @notice Interface for BENTO deposit and withdraw.\r\ninterface IBentoBridge {\r\n    function registerProtocol() external;\r\n\r\n    function deposit( \r\n        IERC20 token_,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 share\r\n    ) external payable returns (uint256 amountOut, uint256 shareOut);\r\n\r\n    function withdraw(\r\n        IERC20 token_,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 share\r\n    ) external returns (uint256 amountOut, uint256 shareOut);\r\n}\r\n\r\n/// @notice Interface for COMPOUND deposit and withdraw.\r\ninterface ICompoundBridge {\r\n    function underlying() external view returns (address);\r\n    function mint(uint mintAmount) external returns (uint);\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n}\r\n\r\n/// @notice Interface for DAI deposit via `permit()` primitive.\r\ninterface IDaiPermit {\r\n    function permit(\r\n        address holder,\r\n        address spender,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        bool allowed,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n\r\n/// @notice Contract to bridge underlying defi tokens and BENTO.\r\ncontract BentoBridge {\r\n    using BoringERC20 for IERC20;\r\n\r\n    IAaveBridge immutable aave; // AAVE lending contract - 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9\r\n    IBentoBridge immutable bento; // BENTO vault contract - 0xF5BCE5077908a1b7370B9ae04AdC565EBd643966\r\n    address immutable dai; // DAI token contract - 0x6B175474E89094C44Da98b954EedeAC495271d0F\r\n\r\n    constructor(IAaveBridge _aave, IBentoBridge _bento, address _dai) public {\r\n        _bento.registerProtocol();\r\n        aave = _aave;\r\n        bento = _bento;\r\n        dai = _dai;\r\n    }\r\n\r\n    function approveTokenBridge(IERC20[] calldata underlying, address[] calldata cToken) external {\r\n        for (uint256 i = 0; i < underlying.length; i++) {\r\n            underlying[i].approve(address(aave), type(uint256).max); // max approve `aave` spender to pull `underlying` from this contract\r\n            underlying[i].approve(address(bento), type(uint256).max); // max approve `bento` spender to pull `underlying` from this contract\r\n            underlying[i].approve(cToken[i], type(uint256).max); // max approve `cToken` spender to pull `underlying` from this contract\r\n        }\r\n    }\r\n\r\n    /// - AAVE - ///\r\n    function aaveToBento(address aToken, uint256 amount) external {\r\n        IERC20(aToken).safeTransferFrom(msg.sender, address(this), amount);\r\n        address underlying = IAaveBridge(aToken).UNDERLYING_ASSET_ADDRESS();\r\n        aave.withdraw(underlying, amount, address(this));\r\n        bento.deposit(IERC20(underlying), address(this), msg.sender, amount, 0);\r\n    }\r\n\r\n    function aaveToBentoWithPermit(\r\n        address aToken, uint256 amount, uint256 deadline,\r\n        uint8 v, bytes32 r, bytes32 s\r\n    ) external {\r\n        IERC20(aToken).permit(msg.sender, address(this), amount, deadline, v, r, s);\r\n        IERC20(aToken).safeTransferFrom(msg.sender, address(this), amount);\r\n        address underlying = IAaveBridge(aToken).UNDERLYING_ASSET_ADDRESS();\r\n        aave.withdraw(underlying, amount, address(this));\r\n        bento.deposit(IERC20(underlying), address(this), msg.sender, amount, 0);\r\n    }\r\n\r\n    function bentoToAave(IERC20 underlying, uint256 amount) external {\r\n        bento.withdraw(underlying, msg.sender, address(this), amount, 0);\r\n        aave.deposit(address(underlying), amount, msg.sender, 0); \r\n    }\r\n\r\n    /// - COMPOUND/CREAM - ///\r\n    function compoundToBento(address cToken, uint256 cTokenAmount) external {\r\n        IERC20(cToken).safeTransferFrom(msg.sender, address(this), cTokenAmount);\r\n        IERC20 underlying = IERC20(ICompoundBridge(cToken).underlying());\r\n        ICompoundBridge(cToken).redeem(cTokenAmount);\r\n        bento.deposit(underlying, address(this), msg.sender, underlying.balanceOf(address(this)), 0);\r\n    }\r\n\r\n    function bentoToCompound(address cToken, uint256 underlyingAmount) external {\r\n        IERC20 underlying = IERC20(ICompoundBridge(cToken).underlying());\r\n        bento.withdraw(underlying, msg.sender, address(this), underlyingAmount, 0);\r\n        ICompoundBridge(cToken).mint(underlyingAmount);\r\n        IERC20(cToken).safeTransfer(msg.sender, IERC20(cToken).balanceOf(address(this))); \r\n    }\r\n\r\n    /// - DAI - ///\r\n    function daiToBentoWithPermit(\r\n        uint256 amount, uint256 nonce, uint256 deadline,\r\n        uint8 v, bytes32 r, bytes32 s\r\n    ) external {\r\n        IDaiPermit(dai).permit(msg.sender, address(this), nonce, deadline, true, v, r, s);\r\n        IERC20(dai).safeTransferFrom(msg.sender, address(this), amount);\r\n        bento.deposit(IERC20(dai), address(this), msg.sender, amount, 0);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IAaveBridge\",\"name\":\"_aave\",\"type\":\"address\"},{\"internalType\":\"contract IBentoBridge\",\"name\":\"_bento\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dai\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"aaveToBento\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"aaveToBentoWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"underlying\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"cToken\",\"type\":\"address[]\"}],\"name\":\"approveTokenBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bentoToAave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"underlyingAmount\",\"type\":\"uint256\"}],\"name\":\"bentoToCompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cTokenAmount\",\"type\":\"uint256\"}],\"name\":\"compoundToBento\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"daiToBentoWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BentoBridge","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007d2768de32b0b80b7a3454c06bdac94a69ddc7a9000000000000000000000000f5bce5077908a1b7370b9ae04adc565ebd6439660000000000000000000000006b175474e89094c44da98b954eedeac495271d0f","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://576d90932bb9fa694c507ae6ac7d8000bdc4516c19f692e9dbd87cf8a365223b"}]}