{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.4.3 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol@v4.2.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File contracts/ChizShop.sol\r\n\r\npragma solidity ^0.8.6;\r\n\r\ncontract ChizShop is IERC721Receiver {\r\n    struct Product {\r\n        bool exists;\r\n        uint256 price;\r\n        uint256 tokenId;\r\n        address contractAddress;\r\n        bool multiple;\r\n    }\r\n\r\n    mapping(string => Product) public Products;\r\n\r\n    address shopManager;\r\n    bool paused;\r\n\r\n    event ProductCreated(string slug);\r\n    event ProductSold(string slug);\r\n    event ProductDeleted(string slug);\r\n    event ProductPurchased(string slug, address owner);\r\n\r\n    ERC20 chizToken = ERC20(0x5c761c1a21637362374204000e383204d347064C);\r\n\r\n    modifier onlyShopManager() {\r\n        require(\r\n            msg.sender == shopManager,\r\n            \"you must be the shop manager to use this function\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier pauseable() {\r\n        require(paused == false, \"contract is paused\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        shopManager = msg.sender;\r\n    }\r\n\r\n    function pause() public onlyShopManager {\r\n        paused = true;\r\n    }\r\n\r\n    function unpause() public onlyShopManager {\r\n        paused = false;\r\n    }\r\n\r\n    function setToken(address contractAddress)\r\n        public\r\n        pauseable\r\n        onlyShopManager\r\n    {\r\n        chizToken = ERC20(contractAddress);\r\n    }\r\n\r\n    function setShopManager(address newShopManager)\r\n        public\r\n        pauseable\r\n        onlyShopManager\r\n    {\r\n        shopManager = newShopManager;\r\n    }\r\n\r\n    function withdraw(uint256 withdrawAmount) public pauseable onlyShopManager {\r\n        chizToken.transfer(msg.sender, withdrawAmount);\r\n    }\r\n\r\n    function createProduct(\r\n        string memory slug,\r\n        uint256 price,\r\n        uint256 tokenId,\r\n        address contractAddress,\r\n        bool multiple\r\n    ) public pauseable onlyShopManager {\r\n        Product memory product = Products[slug];\r\n        require(\r\n            product.exists == false,\r\n            \"a product with this slug already exists\"\r\n        );\r\n\r\n        ERC721 tokenContract = ERC721(contractAddress);\r\n\r\n        if (!multiple) {\r\n            address tokenOwner = tokenContract.ownerOf(tokenId);\r\n            require(\r\n                tokenOwner == address(this),\r\n                \"contract is not the owner of this token\"\r\n            );\r\n        } else {\r\n            uint256 balance = tokenContract.balanceOf(address(this));\r\n            require(balance != 0, \"contract does not own any of these tokens\");\r\n        }\r\n\r\n        Products[slug] = Product(\r\n            true,\r\n            price,\r\n            tokenId,\r\n            contractAddress,\r\n            multiple\r\n        );\r\n        emit ProductCreated(slug);\r\n    }\r\n\r\n    function deleteProduct(string memory slug)\r\n        public\r\n        pauseable\r\n        onlyShopManager\r\n    {\r\n        delete Products[slug];\r\n        emit ProductDeleted(slug);\r\n    }\r\n\r\n    function purchaseProduct(string memory slug) public payable pauseable {\r\n        Product memory product = Products[slug];\r\n        require(\r\n            product.exists == true,\r\n            \"a product with this slug does not exist\"\r\n        );\r\n\r\n        ERC721 tokenContract = ERC721(product.contractAddress);\r\n        uint256 tokenId;\r\n\r\n        if (product.multiple) {\r\n            tokenId = tokenContract.tokenOfOwnerByIndex(address(this), 0);\r\n        } else {\r\n            tokenId = product.tokenId;\r\n            address tokenOwner = tokenContract.ownerOf(tokenId);\r\n            require(\r\n                tokenOwner == address(this),\r\n                \"contract is sold out of these tokens\"\r\n            );\r\n        }\r\n\r\n        chizToken.transferFrom(msg.sender, address(this), product.price);\r\n        tokenContract.transferFrom(address(this), msg.sender, tokenId);\r\n\r\n        Products[slug] = Product(\r\n            true,\r\n            product.price,\r\n            product.tokenId,\r\n            product.contractAddress,\r\n            product.multiple\r\n        );\r\n        emit ProductPurchased(slug, msg.sender);\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes memory\r\n    ) public virtual override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\nabstract contract ERC721 {\r\n    function ownerOf(uint256 id) public virtual returns (address owner);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id\r\n    ) public virtual;\r\n\r\n    function balanceOf(address owner) public virtual returns (uint256 amount);\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 tokenId)\r\n        public\r\n        virtual\r\n        returns (uint256 index);\r\n}\r\n\r\nabstract contract ERC20 {\r\n    function allowance(address owner, address spender) public virtual;\r\n\r\n    function transfer(address to, uint256 value) public virtual;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual;\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"}],\"name\":\"ProductCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"}],\"name\":\"ProductDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ProductPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"}],\"name\":\"ProductSold\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"Products\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"multiple\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"multiple\",\"type\":\"bool\"}],\"name\":\"createProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"}],\"name\":\"deleteProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"slug\",\"type\":\"string\"}],\"name\":\"purchaseProduct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newShopManager\",\"type\":\"address\"}],\"name\":\"setShopManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ChizShop","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ced79da7b9a272da02c387a0b3d9554221235794a57471a4f2046fcc407327e9"}]}