{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/StakingFactory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"./interfaces/IStakingFactory.sol\\\";\\nimport \\\"./StakingRewards.sol\\\";\\nimport \\\"./interfaces/IStakingRewards.sol\\\";\\n\\n/// @title StakingFactory, A contract where users can create their own staking pool\\ncontract StakingFactory is IStakingFactory {\\n    address[] private allPools;\\n    mapping(address => bool) private isOurs;\\n\\n    /**\\n     * @notice Caller creates a new StakingRewards pool and it gets added to this factory\\n     * @param _stakingToken token address that needs to be staked to earn rewards\\n     * @param _startBlock block number when rewards start\\n     * @param _endBlock block number when rewards end\\n     * @param _bufferBlocks no. of blocks after which owner can reclaim any unclaimed rewards\\n     * @return listaddr address of newly created contract\\n     */\\n    function createPool(\\n        address _stakingToken,\\n        uint256 _startBlock,\\n        uint256 _endBlock,\\n        uint256 _bufferBlocks\\n    ) external override returns (address listaddr) {\\n        listaddr = address(\\n            new StakingRewards(\\n                _stakingToken,\\n                _startBlock,\\n                _endBlock,\\n                _bufferBlocks\\n            )\\n        );\\n\\n        StakingRewards(listaddr).transferOwnership(msg.sender);\\n\\n        allPools.push(listaddr);\\n        isOurs[listaddr] = true;\\n\\n        emit PoolCreated(msg.sender, listaddr);\\n    }\\n\\n    /**\\n     * @notice Checks if a address belongs to this contract' pools\\n     */\\n    function ours(address _a) external view override returns (bool) {\\n        return isOurs[_a];\\n    }\\n\\n    /**\\n     * @notice Returns no. of pools stored in contract\\n     */\\n    function listCount() external view override returns (uint256) {\\n        return allPools.length;\\n    }\\n\\n    /**\\n     * @notice Returns address of the pool located at given id\\n     */\\n    function listAt(uint256 _idx) external view override returns (address) {\\n        require(_idx < allPools.length, \\\"Index exceeds list length\\\");\\n        return allPools[_idx];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakingFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\ninterface IStakingFactory {\\n    event PoolCreated(address indexed sender, address indexed newPool);\\n\\n    function createPool(\\n        address _stakingToken,\\n        uint256 _startBlock,\\n        uint256 _endBlock,\\n        uint256 _bufferBlocks\\n    ) external returns (address);\\n\\n    function ours(address _a) external view returns (bool);\\n\\n    function listCount() external view returns (uint256);\\n\\n    function listAt(uint256 _idx) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/StakingRewards.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/IStakingRewards.sol\\\";\\n\\n/// @title StakingRewards, A contract where users can stake a token X \\\"stakingToken\\\" and get Y..X..Z as rewards\\n/// @notice Based on https://github.com/sushiswap/sushiswap/blob/master/contracts/MasterChef.sol but better\\ncontract StakingRewards is Ownable, ReentrancyGuard, IStakingRewards {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    modifier notStopped {\\n        require(!isStopped, \\\"Rewards have stopped\\\");\\n        _;\\n    }\\n\\n    modifier onlyRewardsPeriod {\\n        require(block.number < endBlock, \\\"Rewards period ended\\\");\\n        _;\\n    }\\n\\n    struct RewardInfo {\\n        IERC20 rewardToken;\\n        uint256 lastRewardBlock; // Last block number that reward token distribution occurs.\\n        uint256 rewardPerBlock; // How many reward tokens to distribute per block.\\n        uint256 totalRewards;\\n        uint256 accTokenPerShare; // Accumulated token per share, times 1e18.\\n    }\\n    RewardInfo[] private rewardInfo;\\n\\n    IERC20 public immutable stakingToken; // token to be staked for rewards\\n\\n    uint256 public immutable startBlock; // block number when reward period starts\\n    uint256 public endBlock; // block number when reward period ends\\n\\n    // how many blocks to wait after owner can reclaim unclaimed tokens\\n    uint256 public immutable bufferBlocks;\\n\\n    // indicates that rewards have stopped forever and can't be extended anymore\\n    // also means that owner recovered all unclaimed rewards after a certain amount of bufferBlocks has passed\\n    // new users won't be able to deposit and everyone left can withdraw his/her stake\\n    bool public isStopped;\\n\\n    mapping(address => uint256) private userAmount;\\n    mapping(uint256 => mapping(address => uint256)) private rewardDebt; // rewardDebt[rewardId][user] = N\\n    mapping(uint256 => mapping(address => uint256)) private rewardPaid; // rewardPaid[rewardId][user] = N\\n\\n    EnumerableSet.AddressSet private pooledTokens;\\n\\n    uint8 private constant MAX_POOLED_TOKENS = 5;\\n\\n    constructor(\\n        address _stakingToken,\\n        uint256 _startBlock,\\n        uint256 _endBlock,\\n        uint256 _bufferBlocks\\n    ) {\\n        _startBlock = (_startBlock == 0) ? block.number : _startBlock;\\n\\n        require(\\n            _endBlock > block.number && _endBlock > _startBlock,\\n            \\\"Invalid end block\\\"\\n        );\\n\\n        stakingToken = IERC20(_stakingToken);\\n        startBlock = _startBlock;\\n        endBlock = _endBlock;\\n        bufferBlocks = _bufferBlocks;\\n    }\\n\\n    /**\\n     * @notice Caller deposits the staking token to start earning rewards\\n     * @param _amount amount of staking token to deposit\\n     */\\n    function deposit(uint256 _amount)\\n        external\\n        override\\n        notStopped\\n        nonReentrant\\n    {\\n        updateAllRewards();\\n\\n        uint256 _currentAmount = userAmount[msg.sender];\\n        uint256 _balanceBefore = stakingToken.balanceOf(address(this));\\n\\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        _amount = stakingToken.balanceOf(address(this)) - _balanceBefore;\\n\\n        uint256 _newUserAmount = _currentAmount + _amount;\\n\\n        if (_currentAmount > 0) {\\n            for (uint256 i = 0; i < rewardInfo.length; i++) {\\n                RewardInfo memory _reward = rewardInfo[i];\\n\\n                uint256 _pending =\\n                    ((_currentAmount * _reward.accTokenPerShare) / 1e18) -\\n                        rewardDebt[i][msg.sender];\\n\\n                rewardDebt[i][msg.sender] =\\n                    (_newUserAmount * _reward.accTokenPerShare) /\\n                    1e18;\\n\\n                rewardPaid[i][msg.sender] += _pending;\\n\\n                _reward.rewardToken.safeTransfer(msg.sender, _pending);\\n            }\\n        } else {\\n            for (uint256 i = 0; i < rewardInfo.length; i++) {\\n                RewardInfo memory _reward = rewardInfo[i];\\n\\n                rewardDebt[i][msg.sender] =\\n                    (_amount * _reward.accTokenPerShare) /\\n                    1e18;\\n            }\\n        }\\n\\n        userAmount[msg.sender] = _newUserAmount;\\n\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Caller withdraws the staking token and its pending rewards, if any\\n     * @param _amount amount of staking token to withdraw\\n     */\\n    function withdraw(uint256 _amount) external override nonReentrant {\\n        updateAllRewards();\\n\\n        uint256 _currentAmount = userAmount[msg.sender];\\n\\n        require(_currentAmount >= _amount, \\\"withdraw: not good\\\");\\n\\n        uint256 newUserAmount = _currentAmount - _amount;\\n\\n        if (!isStopped) {\\n            for (uint256 i = 0; i < rewardInfo.length; i++) {\\n                RewardInfo memory _reward = rewardInfo[i];\\n\\n                uint256 _pending =\\n                    ((_currentAmount * _reward.accTokenPerShare) / 1e18) -\\n                        rewardDebt[i][msg.sender];\\n\\n                rewardDebt[i][msg.sender] =\\n                    (newUserAmount * _reward.accTokenPerShare) /\\n                    1e18;\\n\\n                rewardPaid[i][msg.sender] += _pending;\\n\\n                _reward.rewardToken.safeTransfer(msg.sender, _pending);\\n            }\\n        }\\n\\n        userAmount[msg.sender] = newUserAmount;\\n\\n        stakingToken.safeTransfer(msg.sender, _amount);\\n\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Caller withdraws tokens staked by user without caring about rewards\\n     */\\n    function emergencyWithdraw() external override nonReentrant {\\n        for (uint256 i = 0; i < rewardInfo.length; i++) {\\n            rewardDebt[i][msg.sender] = 0;\\n        }\\n\\n        stakingToken.safeTransfer(msg.sender, userAmount[msg.sender]);\\n        userAmount[msg.sender] = 0;\\n        emit EmergencyWithdraw(msg.sender, userAmount[msg.sender]);\\n    }\\n\\n    /**\\n     * @notice Caller claims its pending rewards without having to withdraw its stake\\n     */\\n    function claimRewards() external override notStopped nonReentrant {\\n        for (uint256 i = 0; i < rewardInfo.length; i++) _claimReward(i);\\n    }\\n\\n    /**\\n     * @notice Caller claims a single pending reward without having to withdraw its stake\\n     * @dev _rid is the index of rewardInfo array\\n     * @param _rid reward id\\n     */\\n    function claimReward(uint256 _rid)\\n        external\\n        override\\n        notStopped\\n        nonReentrant\\n    {\\n        _claimReward(_rid);\\n    }\\n\\n    /**\\n     * @notice Adds a reward token to the pool, only contract owner can call this\\n     * @param _rewardToken address of the ERC20 token\\n     * @param _totalRewards amount of total rewards to distribute from startBlock to endBlock\\n     */\\n    function add(IERC20 _rewardToken, uint256 _totalRewards)\\n        external\\n        override\\n        nonReentrant\\n        onlyOwner\\n        onlyRewardsPeriod\\n    {\\n        require(rewardInfo.length < MAX_POOLED_TOKENS, \\\"Pool is full\\\");\\n        _add(_rewardToken, _totalRewards);\\n    }\\n\\n    /**\\n     * @notice Adds multiple reward tokens to the pool in a single call, only contract owner can call this\\n     * @param _rewardSettings array of struct composed of \\\"IERC20 rewardToken\\\" and \\\"uint256 totalRewards\\\"\\n     */\\n    function addMulti(RewardSettings[] memory _rewardSettings)\\n        external\\n        override\\n        nonReentrant\\n        onlyOwner\\n        onlyRewardsPeriod\\n    {\\n        require(\\n            rewardInfo.length + _rewardSettings.length < MAX_POOLED_TOKENS,\\n            \\\"Pool is full\\\"\\n        );\\n        for (uint8 i = 0; i < _rewardSettings.length; i++)\\n            _add(\\n                _rewardSettings[i].rewardToken,\\n                _rewardSettings[i].totalRewards\\n            );\\n    }\\n\\n    /**\\n     * @notice Owner can recover any ERC20 that's not the staking token neither a pooledToken\\n     * @param _tokenAddress address of the ERC20 mistakenly sent to this contract\\n     * @param _tokenAmount amount to recover\\n     */\\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        require(\\n            _tokenAddress != address(stakingToken) &&\\n                !pooledTokens.contains(_tokenAddress),\\n            \\\"Cannot recover\\\"\\n        );\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n        emit Recovered(_tokenAddress, _tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Owner can recover rewards that's not been claimed after endBlock + bufferBlocks\\n     * @dev Warning: it will set isStopped to true, so no more deposits, extensions or rewards claim but only withdrawals\\n     */\\n    function recoverUnclaimedRewards() external override onlyOwner notStopped {\\n        require(\\n            block.number > endBlock + bufferBlocks,\\n            \\\"Not allowed to reclaim\\\"\\n        );\\n        isStopped = true;\\n        for (uint8 i = 0; i < rewardInfo.length; i++) {\\n            IERC20 _token = IERC20(rewardInfo[i].rewardToken);\\n            uint256 _amount = _token.balanceOf(address(this));\\n            rewardInfo[i].lastRewardBlock = block.number;\\n            _token.safeTransfer(msg.sender, _amount);\\n            emit UnclaimedRecovered(address(_token), _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice After a reward period has ended owner can decide to extend it by adding more rewards\\n     * @dev totalRewards will be distributed from block.number to newEndBlock\\n     * @param _newEndBlock block number when new rewards end\\n     * @param _newTotalRewards array of new total rewards for each pooled token\\n     */\\n    function extendRewards(\\n        uint256 _newEndBlock,\\n        uint256[] memory _newTotalRewards\\n    ) external override onlyOwner notStopped nonReentrant {\\n        require(block.number > endBlock, \\\"Rewards not ended\\\");\\n        require(_newEndBlock > block.number, \\\"Invalid end block\\\");\\n        require(\\n            _newTotalRewards.length == rewardInfo.length,\\n            \\\"Pool length mismatch\\\"\\n        );\\n\\n        for (uint8 i = 0; i < _newTotalRewards.length; i++) {\\n            updateReward(i);\\n            uint256 _balanceBefore =\\n                IERC20(rewardInfo[i].rewardToken).balanceOf(address(this));\\n            IERC20(rewardInfo[i].rewardToken).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _newTotalRewards[i]\\n            );\\n            _newTotalRewards[i] =\\n                IERC20(rewardInfo[i].rewardToken).balanceOf(address(this)) -\\n                _balanceBefore;\\n            uint256 _rewardPerBlock =\\n                _newTotalRewards[i] / (_newEndBlock - block.number);\\n            rewardInfo[i].rewardPerBlock = _rewardPerBlock;\\n            rewardInfo[i].totalRewards += _newTotalRewards[i];\\n        }\\n\\n        endBlock = _newEndBlock;\\n\\n        emit RewardsExtended(_newEndBlock);\\n    }\\n\\n    /**\\n     * @notice Gets the number of pooled reward tokens in contract\\n     */\\n    function rewardsLength() external view override returns (uint256) {\\n        return rewardInfo.length;\\n    }\\n\\n    /**\\n     * @notice Gets the amount of staked tokens for a given user\\n     * @param _user address of given user\\n     */\\n    function balanceOf(address _user) external view override returns (uint256) {\\n        return userAmount[_user];\\n    }\\n\\n    /**\\n     * @notice Gets the total amount of staked tokens in contract\\n     */\\n    function totalSupply() external view override returns (uint256) {\\n        return stakingToken.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Caller can see pending rewards for a given reward id and user\\n     * @dev _rid is the index of rewardInfo array\\n     * @param _rid reward id\\n     * @param _user address of a user\\n     * @return amount of pending rewards\\n     */\\n    function getPendingRewards(uint256 _rid, address _user)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _getPendingRewards(_rid, _user);\\n    }\\n\\n    /**\\n     * @notice Caller can see pending rewards for a given user\\n     * @param _user address of a user\\n     * @return array of struct containing rewardToken and pendingReward\\n     */\\n    function getAllPendingRewards(address _user)\\n        external\\n        view\\n        override\\n        returns (PendingRewards[] memory)\\n    {\\n        PendingRewards[] memory _pendingRewards =\\n            new PendingRewards[](rewardInfo.length);\\n        for (uint8 i = 0; i < rewardInfo.length; i++) {\\n            _pendingRewards[i] = PendingRewards({\\n                rewardToken: rewardInfo[i].rewardToken,\\n                pendingReward: _getPendingRewards(i, _user)\\n            });\\n        }\\n        return _pendingRewards;\\n    }\\n\\n    /**\\n     * @notice Caller can see pending rewards for a given user\\n     * @param _user address of a user\\n     * @return array of struct containing rewardToken and pendingReward\\n     */\\n    function earned(address _user)\\n        external\\n        view\\n        override\\n        returns (EarnedRewards[] memory)\\n    {\\n        EarnedRewards[] memory earnedRewards =\\n            new EarnedRewards[](rewardInfo.length);\\n        for (uint8 i = 0; i < rewardInfo.length; i++) {\\n            earnedRewards[i] = EarnedRewards({\\n                rewardToken: rewardInfo[i].rewardToken,\\n                earnedReward: rewardPaid[i][_user] +\\n                    _getPendingRewards(i, _user)\\n            });\\n        }\\n        return earnedRewards;\\n    }\\n\\n    /**\\n     * @notice Caller can see total rewards for every pooled token\\n     * @return array of struct containing rewardToken and totalRewards\\n     */\\n    function getRewardsForDuration()\\n        external\\n        view\\n        override\\n        returns (RewardSettings[] memory)\\n    {\\n        RewardSettings[] memory _rewardSettings =\\n            new RewardSettings[](rewardInfo.length);\\n        for (uint8 i = 0; i < rewardInfo.length; i++) {\\n            _rewardSettings[i] = RewardSettings({\\n                rewardToken: rewardInfo[i].rewardToken,\\n                totalRewards: rewardInfo[i].totalRewards\\n            });\\n        }\\n        return _rewardSettings;\\n    }\\n\\n    /**\\n     * @notice Update reward variables of the given pool to be up-to-date.\\n     * @dev _rid is the index of rewardInfo array\\n     * @param _rid reward id\\n     */\\n    function updateReward(uint256 _rid) public {\\n        RewardInfo storage _reward = rewardInfo[_rid];\\n\\n        if (block.number <= _reward.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 _lpSupply = stakingToken.balanceOf(address(this));\\n\\n        if (_lpSupply == 0) {\\n            _reward.lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 _tokenReward = getMultiplier(_reward) * _reward.rewardPerBlock;\\n\\n        _reward.accTokenPerShare += (_tokenReward * 1e18) / _lpSupply;\\n\\n        _reward.lastRewardBlock = block.number;\\n    }\\n\\n    /**\\n     * @notice Mass updates reward variables\\n     */\\n    function updateAllRewards() public {\\n        uint256 _length = rewardInfo.length;\\n        for (uint256 pid = 0; pid < _length; pid++) {\\n            updateReward(pid);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the correct multiplier of rewardPerBlock for a given RewardInfo\\n     */\\n    function getMultiplier(RewardInfo memory _reward)\\n        internal\\n        view\\n        returns (uint256 _multiplier)\\n    {\\n        uint256 _lastBlock =\\n            (block.number > endBlock) ? endBlock : block.number;\\n        _multiplier = (_lastBlock > _reward.lastRewardBlock)\\n            ? _lastBlock - _reward.lastRewardBlock\\n            : 0;\\n    }\\n\\n    /**\\n     * @notice Pending rewards for a given reward id and user\\n     * @dev _rid is the index of rewardInfo array\\n     * @param _rid reward id\\n     * @param _user address of a user\\n     * @return amount of pending rewards\\n     */\\n    function _getPendingRewards(uint256 _rid, address _user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (isStopped) return 0;\\n\\n        RewardInfo storage _reward = rewardInfo[_rid];\\n\\n        uint256 _amount = userAmount[_user];\\n        uint256 _debt = rewardDebt[_rid][_user];\\n\\n        uint256 _rewardPerBlock = _reward.rewardPerBlock;\\n\\n        uint256 _accTokenPerShare = _reward.accTokenPerShare;\\n\\n        uint256 _lpSupply = stakingToken.balanceOf(address(this));\\n\\n        if (block.number > _reward.lastRewardBlock && _lpSupply != 0) {\\n            uint256 reward = getMultiplier(_reward) * _rewardPerBlock;\\n            _accTokenPerShare += ((reward * 1e18) / _lpSupply);\\n        }\\n\\n        return ((_amount * _accTokenPerShare) / 1e18) - _debt;\\n    }\\n\\n    /**\\n     * @notice Adds a reward token to the rewards pool\\n     * @param _rewardToken address of the ERC20 token\\n     * @param _totalRewards amount of total rewards to distribute from startBlock to endBlock\\n     */\\n    function _add(IERC20 _rewardToken, uint256 _totalRewards) internal {\\n        require(\\n            address(_rewardToken) != address(stakingToken),\\n            \\\"rewardToken = stakingToken\\\"\\n        );\\n        require(!pooledTokens.contains(address(_rewardToken)), \\\"pool exists\\\");\\n\\n        uint256 _balanceBefore = _rewardToken.balanceOf(address(this));\\n        _rewardToken.safeTransferFrom(msg.sender, address(this), _totalRewards);\\n        _totalRewards = _rewardToken.balanceOf(address(this)) - _balanceBefore;\\n\\n        require(_totalRewards != 0, \\\"No rewards\\\");\\n\\n        uint256 _lastRewardBlock =\\n            block.number > startBlock ? block.number : startBlock;\\n\\n        pooledTokens.add(address(_rewardToken));\\n\\n        uint256 _rewardPerBlock = _totalRewards / (endBlock - _lastRewardBlock);\\n\\n        rewardInfo.push(\\n            RewardInfo({\\n                rewardToken: _rewardToken,\\n                rewardPerBlock: _rewardPerBlock,\\n                totalRewards: _totalRewards,\\n                lastRewardBlock: _lastRewardBlock,\\n                accTokenPerShare: 0\\n            })\\n        );\\n    }\\n\\n    /**\\n     * @notice Caller claims a single pending reward without having to withdraw its stake\\n     * @dev _rid is the index of rewardInfo array\\n     * @param _rid reward id\\n     */\\n    function _claimReward(uint256 _rid) internal {\\n        updateReward(_rid);\\n\\n        uint256 _amount = userAmount[msg.sender];\\n\\n        uint256 _debt = rewardDebt[_rid][msg.sender];\\n\\n        RewardInfo memory _reward = rewardInfo[_rid];\\n\\n        uint256 pending = ((_amount * _reward.accTokenPerShare) / 1e18) - _debt;\\n\\n        rewardPaid[_rid][msg.sender] += pending;\\n\\n        rewardDebt[_rid][msg.sender] =\\n            (_amount * _reward.accTokenPerShare) /\\n            1e18;\\n\\n        _reward.rewardToken.safeTransfer(msg.sender, pending);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakingRewards.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nstruct RewardSettings {\\n    IERC20 rewardToken;\\n    uint256 totalRewards;\\n}\\n\\nstruct PendingRewards {\\n    IERC20 rewardToken;\\n    uint256 pendingReward;\\n}\\n\\nstruct EarnedRewards {\\n    IERC20 rewardToken;\\n    uint256 earnedReward;\\n}\\n\\ninterface IStakingRewards {\\n    event Deposit(address indexed user, uint256 amount);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n    event Recovered(address token, uint256 amount);\\n    event UnclaimedRecovered(address token, uint256 amount);\\n    event RewardsExtended(uint256 newEndBlock);\\n\\n    function deposit(uint256 _amount) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function emergencyWithdraw() external;\\n\\n    function claimRewards() external;\\n\\n    function claimReward(uint256 _rid) external;\\n\\n    function add(IERC20 _rewardToken, uint256 _totalRewards) external;\\n\\n    function addMulti(RewardSettings[] memory _poolSettings) external;\\n\\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external;\\n\\n    function recoverUnclaimedRewards() external;\\n\\n    function extendRewards(\\n        uint256 _newEndBlock,\\n        uint256[] memory _newTotalRewards\\n    ) external;\\n\\n    function rewardsLength() external view returns (uint256);\\n\\n    function balanceOf(address _user) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function getPendingRewards(uint256 _rid, address _user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAllPendingRewards(address _user)\\n        external\\n        view\\n        returns (PendingRewards[] memory);\\n\\n    function getRewardsForDuration()\\n        external\\n        view\\n        returns (RewardSettings[] memory);\\n\\n    function earned(address _user)\\n        external\\n        view\\n        returns (EarnedRewards[] memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bufferBlocks\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"listaddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"listAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"ours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StakingFactory","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}