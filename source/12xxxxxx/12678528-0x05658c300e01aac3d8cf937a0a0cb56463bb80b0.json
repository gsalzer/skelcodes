{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n/// SPDX-License-Identifier: MIT\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IBZx {\r\n    function underlyingToLoanPool(address underlying)\r\n        external\r\n        returns (address loanPool);\r\n\r\n    function swapsImpl()\r\n        external\r\n        returns (address);\r\n\r\n    function setupLoanParams(LoanParams[] calldata loanParamsList)\r\n        external\r\n        returns (bytes32[] memory loanParamsIdList);\r\n\r\n    function disableLoanParams(bytes32[] calldata loanParamsIdList) external;\r\n\r\n    function getLoanParams(bytes32[] calldata loanParamsIdList)\r\n        external\r\n        view\r\n        returns (LoanParams[] memory loanParamsList);\r\n\r\n    function getLoanParamsList(\r\n        address owner,\r\n        uint256 start,\r\n        uint256 count\r\n    ) external view returns (bytes32[] memory loanParamsList);\r\n\r\n    function getTotalPrincipal(address lender, address loanToken)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function borrowOrTradeFromPool(\r\n        bytes32 loanParamsId,\r\n        bytes32 loanId,\r\n        bool isTorqueLoan,\r\n        uint256 initialMargin,\r\n        address[4] calldata sentAddresses,\r\n        uint256[5] calldata sentValues,\r\n        bytes calldata loanDataBytes\r\n    ) external payable returns (LoanOpenData memory);\r\n\r\n    function setDelegatedManager(\r\n        bytes32 loanId,\r\n        address delegated,\r\n        bool toggle\r\n    ) external;\r\n\r\n    function getEstimatedMarginExposure(\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 loanTokenSent,\r\n        uint256 collateralTokenSent,\r\n        uint256 interestRate,\r\n        uint256 newPrincipal\r\n    ) external view returns (uint256);\r\n\r\n    function getRequiredCollateral(\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 newPrincipal,\r\n        uint256 marginAmount,\r\n        bool isTorqueLoan\r\n    ) external view returns (uint256 collateralAmountRequired);\r\n\r\n    function getRequiredCollateralByParams(\r\n        bytes32 loanParamsId,\r\n        uint256 newPrincipal\r\n    ) external view returns (uint256 collateralAmountRequired);\r\n\r\n    function getBorrowAmount(\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 collateralTokenAmount,\r\n        uint256 marginAmount,\r\n        bool isTorqueLoan\r\n    ) external view returns (uint256 borrowAmount);\r\n\r\n    function getBorrowAmountByParams(\r\n        bytes32 loanParamsId,\r\n        uint256 collateralTokenAmount\r\n    ) external view returns (uint256 borrowAmount);\r\n\r\n    function liquidate(\r\n        bytes32 loanId,\r\n        address receiver,\r\n        uint256 closeAmount\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 loanCloseAmount,\r\n            uint256 seizedAmount,\r\n            address seizedToken\r\n        );\r\n\r\n    function rollover(bytes32 loanId, bytes calldata loanDataBytes)\r\n        external\r\n        returns (address rebateToken, uint256 gasRebate);\r\n\r\n    function closeWithDeposit(\r\n        bytes32 loanId,\r\n        address receiver,\r\n        uint256 depositAmount // denominated in loanToken\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 loanCloseAmount,\r\n            uint256 withdrawAmount,\r\n            address withdrawToken\r\n        );\r\n\r\n    function closeWithSwap(\r\n        bytes32 loanId,\r\n        address receiver,\r\n        uint256 swapAmount, // denominated in collateralToken\r\n        bool returnTokenIsCollateral, // true: withdraws collateralToken, false: withdraws loanToken\r\n        bytes calldata loanDataBytes\r\n    )\r\n        external\r\n        returns (\r\n            uint256 loanCloseAmount,\r\n            uint256 withdrawAmount,\r\n            address withdrawToken\r\n        );\r\n\r\n    function liquidateWithGasToken(\r\n        bytes32 loanId,\r\n        address receiver,\r\n        address gasTokenUser,\r\n        uint256 closeAmount // denominated in loanToken\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 loanCloseAmount,\r\n            uint256 seizedAmount,\r\n            address seizedToken\r\n        );\r\n\r\n    function rolloverWithGasToken(\r\n        bytes32 loanId,\r\n        address gasTokenUser,\r\n        bytes calldata /*loanDataBytes*/\r\n    ) external returns (address rebateToken, uint256 gasRebate);\r\n\r\n    function closeWithDepositWithGasToken(\r\n        bytes32 loanId,\r\n        address receiver,\r\n        address gasTokenUser,\r\n        uint256 depositAmount\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 loanCloseAmount,\r\n            uint256 withdrawAmount,\r\n            address withdrawToken\r\n        );\r\n\r\n    function closeWithSwapWithGasToken(\r\n        bytes32 loanId,\r\n        address receiver,\r\n        address gasTokenUser,\r\n        uint256 swapAmount,\r\n        bool returnTokenIsCollateral,\r\n        bytes memory /*loanDataBytes*/\r\n    )\r\n        external\r\n        returns (\r\n            uint256 loanCloseAmount,\r\n            uint256 withdrawAmount,\r\n            address withdrawToken\r\n        );\r\n\r\n    function depositCollateral(bytes32 loanId, uint256 depositAmount)\r\n        external\r\n        payable;\r\n\r\n    function withdrawCollateral(\r\n        bytes32 loanId,\r\n        address receiver,\r\n        uint256 withdrawAmount\r\n    ) external returns (uint256 actualWithdrawAmount);\r\n\r\n    function withdrawAccruedInterest(address loanToken) external;\r\n\r\n    function extendLoanDuration(\r\n        bytes32 loanId,\r\n        uint256 depositAmount,\r\n        bool useCollateral,\r\n        bytes calldata // for future use /*loanDataBytes*/\r\n    ) external payable returns (uint256 secondsExtended);\r\n\r\n    function reduceLoanDuration(\r\n        bytes32 loanId,\r\n        address receiver,\r\n        uint256 withdrawAmount\r\n    ) external returns (uint256 secondsReduced);\r\n\r\n    function claimRewards(address receiver)\r\n        external\r\n        returns (uint256 claimAmount);\r\n\r\n    function rewardsBalanceOf(address user)\r\n        external\r\n        view\r\n        returns (uint256 rewardsBalance);\r\n\r\n    function getLenderInterestData(address lender, address loanToken)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 interestPaid,\r\n            uint256 interestPaidDate,\r\n            uint256 interestOwedPerDay,\r\n            uint256 interestUnPaid,\r\n            uint256 interestFeePercent,\r\n            uint256 principalTotal\r\n        );\r\n\r\n    function getLoanInterestData(bytes32 loanId)\r\n        external\r\n        view\r\n        returns (\r\n            address loanToken,\r\n            uint256 interestOwedPerDay,\r\n            uint256 interestDepositTotal,\r\n            uint256 interestDepositRemaining\r\n        );\r\n\r\n    function getUserLoans(\r\n        address user,\r\n        uint256 start,\r\n        uint256 count,\r\n        LoanType loanType,\r\n        bool isLender,\r\n        bool unsafeOnly\r\n    ) external view returns (LoanReturnData[] memory loansData);\r\n\r\n    function getUserLoansCount(address user, bool isLender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getLoan(bytes32 loanId)\r\n        external\r\n        view\r\n        returns (LoanReturnData memory loanData);\r\n\r\n    function getActiveLoans(\r\n        uint256 start,\r\n        uint256 count,\r\n        bool unsafeOnly\r\n    ) external view returns (LoanReturnData[] memory loansData);\r\n\r\n    function getActiveLoansCount() external view returns (uint256);\r\n\r\n    function swapExternal(\r\n        address sourceToken,\r\n        address destToken,\r\n        address receiver,\r\n        address returnToSender,\r\n        uint256 sourceTokenAmount,\r\n        uint256 requiredDestTokenAmount,\r\n        bytes calldata swapData\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 destTokenAmountReceived,\r\n            uint256 sourceTokenAmountUsed\r\n        );\r\n\r\n    function swapExternalWithGasToken(\r\n        address sourceToken,\r\n        address destToken,\r\n        address receiver,\r\n        address returnToSender,\r\n        address gasTokenUser,\r\n        uint256 sourceTokenAmount,\r\n        uint256 requiredDestTokenAmount,\r\n        bytes calldata swapData\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 destTokenAmountReceived,\r\n            uint256 sourceTokenAmountUsed\r\n        );\r\n\r\n    function getSwapExpectedReturn(\r\n        address sourceToken,\r\n        address destToken,\r\n        uint256 sourceTokenAmount\r\n    ) external view returns (uint256);\r\n\r\n    struct LoanReturnData {\r\n        bytes32 loanId; // id of the loan\r\n        uint96 endTimestamp; // loan end timestamp\r\n        address loanToken; // loan token address\r\n        address collateralToken; // collateral token address\r\n        uint256 principal; // principal amount of the loan\r\n        uint256 collateral; // collateral amount of the loan\r\n        uint256 interestOwedPerDay; // interest owned per day\r\n        uint256 interestDepositRemaining; // remaining unspent interest\r\n        uint256 startRate; // collateralToLoanRate\r\n        uint256 startMargin; // margin with which loan was open\r\n        uint256 maintenanceMargin; // maintenance margin\r\n        uint256 currentMargin; // current margin\r\n        uint256 maxLoanTerm; // maximum term of the loan\r\n        uint256 maxLiquidatable; // is the collateral you can get liquidating\r\n        uint256 maxSeizable; // is the loan you available for liquidation\r\n        uint256 depositValue; // value of loan opening deposit\r\n        uint256 withdrawalValue; // value of loan closing withdrawal\r\n    }\r\n    struct LoanParams {\r\n        bytes32 id; // id of loan params object\r\n        bool active; // if false, this object has been disabled by the owner and can't be used for future loans\r\n        address owner; // owner of this object\r\n        address loanToken; // the token being loaned\r\n        address collateralToken; // the required collateral token\r\n        uint256 minInitialMargin; // the minimum allowed initial margin\r\n        uint256 maintenanceMargin; // an unhealthy loan when current margin is at or below this value\r\n        uint256 maxLoanTerm; // the maximum term for new loans (0 means there's no max term)\r\n    }\r\n\r\n    struct LoanOpenData {\r\n        bytes32 loanId;\r\n        uint256 principal;\r\n        uint256 collateral;\r\n    }\r\n\r\n    enum LoanType {All, Margin, NonMargin}\r\n}\r\n\r\ninterface IToken {\r\n    function flashBorrow(\r\n        uint256 borrowAmount,\r\n        address borrower,\r\n        address target,\r\n        string calldata signature,\r\n        bytes calldata data\r\n    ) external payable returns (bytes memory);\r\n}\r\n\r\ninterface ISwapsImpl {\r\n    function dexSwap(\r\n        address sourceTokenAddress,\r\n        address destTokenAddress,\r\n        address receiverAddress,\r\n        address returnToSenderAddress,\r\n        uint256 minSourceTokenAmount,\r\n        uint256 maxSourceTokenAmount,\r\n        uint256 requiredDestTokenAmount)\r\n        external\r\n        returns (uint256 destTokenAmountReceived, uint256 sourceTokenAmountUsed);\r\n\r\n    function dexExpectedRate(\r\n        address sourceTokenAddress,\r\n        address destTokenAddress,\r\n        uint256 sourceTokenAmount)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ninterface IKyber {\r\n    function swapTokenToToken(\r\n        IERC20 src,\r\n        uint256 srcAmount,\r\n        IERC20 dest,\r\n        uint256 minConversionRate\r\n    ) external returns (uint256);\r\n\r\n    function getExpectedRate(\r\n        IERC20 src,\r\n        IERC20 dest,\r\n        uint256 srcQty\r\n    ) external view returns (uint256 expectedRate, uint256 slippageRate);\r\n}\r\n\r\ninterface KeeperCompatibleInterface {\r\n    /**\r\n     * @notice method that is simulated by the keepers to see if any work actually\r\n     * needs to be performed. This method does does not actually need to be\r\n     * executable, and since it is only ever simulated it can consume lots of gas.\r\n     * @dev To ensure that it is never called, you may want to add the\r\n     * cannotExecute modifier from KeeperBase to your implementation of this\r\n     * method.\r\n     * @param checkData specified in the upkeep registration so it is always the\r\n     * same for a registered upkeep. This can easily be broken down into specific\r\n     * arguments using `abi.decode`, so multiple upkeeps can be registered on the\r\n     * same contract and easily differentiated by the contract.\r\n     * @return upkeepNeeded boolean to indicate whether the keeper should call\r\n     * performUpkeep or not.\r\n     * @return performData bytes that the keeper should call performUpkeep with, if\r\n     * upkeep is needed. If you would like to encode data to decode later, try\r\n     * `abi.encode`.\r\n     */\r\n    function checkUpkeep(bytes calldata checkData)\r\n        external\r\n        returns (bool upkeepNeeded, bytes memory performData);\r\n\r\n    /**\r\n     * @notice method that is actually executed by the keepers, via the registry.\r\n     * The data returned by the checkUpkeep simulation will be passed into\r\n     * this method to actually be executed.\r\n     * @dev The input to this method should not be trusted, and the caller of the\r\n     * method should not even be restricted to any single registry. Anyone should\r\n     * be able call it, and the input should be validated, there is no guarantee\r\n     * that the data passed in is the performData returned from checkUpkeep. This\r\n     * could happen due to malicious keepers, racing keepers, or simply a state\r\n     * change while the performUpkeep transaction is waiting for confirmation.\r\n     * Always validate the data passed in.\r\n     * @param performData is the data which was passed back from the checkData\r\n     * simulation. If it is encoded, it can easily be decoded into other types by\r\n     * calling `abi.decode`. This data should not be trusted, and should be\r\n     * validated against the contract's current state.\r\n     */\r\n    function performUpkeep(bytes calldata performData) external;\r\n}\r\n\r\ninterface IKeep3rV1 {\r\n    function isKeeper(address) external returns (bool);\r\n\r\n    function worked(address keeper) external;\r\n}\r\n\r\ninterface IWeth {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 wad) external;\r\n}\r\n\r\ncontract BzxLiquidateV2 is Ownable, KeeperCompatibleInterface {\r\n    using SafeERC20 for IERC20;\r\n    IBZx public constant BZX = IBZx(0xD8Ee69652E4e4838f2531732a46d1f7F584F0b7f);\r\n\r\n    IKyber public constant KYBER_PROXY =\r\n        IKyber(0x9AAb3f75489902f3a48495025729a0AF77d4b11e);\r\n\r\n    IKeep3rV1 public constant KP3R =\r\n        IKeep3rV1(0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44);\r\n\r\n    IWeth public constant WETH =\r\n        IWeth(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n    modifier upkeep() {\r\n        require(\r\n            KP3R.isKeeper(msg.sender),\r\n            \"::isKeeper: keeper is not registered\"\r\n        );\r\n        _;\r\n        KP3R.worked(msg.sender);\r\n    }\r\n\r\n    fallback() external payable {}\r\n\r\n    receive() external payable {}\r\n\r\n    function liquidateInternal(\r\n        bytes32 loanId,\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 maxLiquidatable,\r\n        address flashLoanToken,\r\n        bool allowLoss,\r\n        bool checkBeforeExecuting\r\n    ) internal returns (address, uint256) {\r\n        if (checkBeforeExecuting) {\r\n            IBZx.LoanReturnData memory loan = BZX.getLoan(loanId);\r\n            require(\r\n                loan.maxLiquidatable > 0 && loan.maxSeizable > 0,\r\n                \"healty loan\"\r\n            );\r\n        }\r\n\r\n        bytes memory b =\r\n            IToken(flashLoanToken).flashBorrow(\r\n                maxLiquidatable,\r\n                address(this),\r\n                address(this),\r\n                \"\",\r\n                abi.encodeWithSignature(\r\n                    \"executeOperation(bytes32,address,address,uint256,address,bool,address)\",\r\n                    loanId,\r\n                    loanToken,\r\n                    collateralToken,\r\n                    maxLiquidatable,\r\n                    flashLoanToken,\r\n                    allowLoss,\r\n                    msg.sender\r\n                )\r\n            );\r\n\r\n        (, , , uint256 profitAmount) =\r\n            abi.decode(b, (uint256, uint256, address, uint256));\r\n        return (loanToken, profitAmount);\r\n    }\r\n\r\n    function liquidate(\r\n        bytes32 loanId,\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 maxLiquidatable,\r\n        address flashLoanToken\r\n    ) external upkeep returns (address, uint256) {\r\n        return\r\n            liquidateInternal(\r\n                loanId,\r\n                loanToken,\r\n                collateralToken,\r\n                maxLiquidatable,\r\n                flashLoanToken,\r\n                false,\r\n                false\r\n            );\r\n    }\r\n\r\n    function liquidateCheckBeforeExecuting(\r\n        bytes32 loanId,\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 maxLiquidatable,\r\n        address flashLoanToken\r\n    ) external upkeep returns (address, uint256) {\r\n        return\r\n            liquidateInternal(\r\n                loanId,\r\n                loanToken,\r\n                collateralToken,\r\n                maxLiquidatable,\r\n                flashLoanToken,\r\n                false,\r\n                true\r\n            );\r\n    }\r\n\r\n    function liquidatePublic(\r\n        bytes32 loanId,\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 maxLiquidatable,\r\n        address flashLoanToken\r\n    ) external returns (address, uint256) {\r\n        return\r\n            liquidateInternal(\r\n                loanId,\r\n                loanToken,\r\n                collateralToken,\r\n                maxLiquidatable,\r\n                flashLoanToken,\r\n                false,\r\n                false\r\n            );\r\n    }\r\n\r\n    function liquidateAllowLoss(\r\n        bytes32 loanId,\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 maxLiquidatable,\r\n        address flashLoanToken,\r\n        bool checkBeforeExecuting\r\n    ) external onlyOwner returns (address, uint256) {\r\n        return\r\n            liquidateInternal(\r\n                loanId,\r\n                loanToken,\r\n                collateralToken,\r\n                maxLiquidatable,\r\n                flashLoanToken,\r\n                true,\r\n                checkBeforeExecuting\r\n            );\r\n    }\r\n\r\n    function executeOperation(\r\n        bytes32 loanId,\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 maxLiquidatable,\r\n        address iToken,\r\n        bool allowLoss,\r\n        address gasTokenUser\r\n    ) external returns (bytes memory) {\r\n        (uint256 _liquidatedLoanAmount, uint256 _liquidatedCollateral, ) =\r\n            BZX.liquidate(loanId, address(this), uint256(-1));\r\n\r\n        if (collateralToken == address(WETH) && address(this).balance != 0) {\r\n            WETH.deposit{value: address(this).balance}();\r\n        }\r\n        // his is testnet\r\n        // (uint256 _realLiquidatedLoanAmount,) = ISwapsImpl(BZX.swapsImpl()).dexSwap(\r\n        //     collateralToken,\r\n        //     loanToken,\r\n        //     address(this),\r\n        //     address(this),\r\n        //     _liquidatedCollateral,\r\n        //     _liquidatedCollateral,\r\n        //     0\r\n        // );\r\n        uint256 _realLiquidatedLoanAmount =\r\n            KYBER_PROXY.swapTokenToToken(\r\n                IERC20(collateralToken),\r\n                _liquidatedCollateral,\r\n                IERC20(loanToken),\r\n                0\r\n            );\r\n\r\n        if (!allowLoss) {\r\n            require(\r\n                _realLiquidatedLoanAmount > _liquidatedLoanAmount,\r\n                \"no profit\"\r\n            );\r\n        }\r\n\r\n        // repay flash loan\r\n        IERC20(loanToken).safeTransfer(iToken, maxLiquidatable);\r\n\r\n        return\r\n            abi.encode(\r\n                loanToken,\r\n                uint256(_realLiquidatedLoanAmount - _liquidatedLoanAmount)\r\n            );\r\n    }\r\n\r\n    function wrapEther() public onlyOwner {\r\n        if (address(this).balance != 0) {\r\n            WETH.deposit{value: address(this).balance}();\r\n        }\r\n    }\r\n\r\n    function withdrawIERC20(IERC20 token) public onlyOwner {\r\n        token.safeTransfer(msg.sender, token.balanceOf(address(this)));\r\n    }\r\n\r\n    function infiniteApproveIERC20(IERC20[] calldata tokens) public onlyOwner {\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            if (tokens[i].allowance(address(this), address(BZX)) != 0) {\r\n                tokens[i].safeApprove(address(BZX), 0);\r\n            }\r\n            tokens[i].safeApprove(address(BZX), uint256(-1));\r\n\r\n            if (tokens[i].allowance(address(this), address(KYBER_PROXY)) != 0) {\r\n                tokens[i].safeApprove(address(KYBER_PROXY), 0);\r\n            }\r\n            tokens[i].safeApprove(address(KYBER_PROXY), uint256(-1));\r\n        }\r\n    }\r\n    // chainlink registry mainnet 0x109A81F1E0A35D4c1D0cae8aCc6597cd54b47Bc6\r\n    // chainlink registry kovan 0xAaaD7966EBE0663b8C9C6f683FB9c3e66E03467F\r\n    // link token mainnet 0x514910771AF9Ca656af840dff83E8264EcF986CA\r\n    // link token kovan 0xa36085F69e2889c224210F603D836748e7dC0088\r\n    function infiniteApproveLinkRegistry(address registry, IERC20 token) public onlyOwner {\r\n        if (\r\n            token.allowance(\r\n                address(this),\r\n                registry\r\n            ) != 0\r\n        ) {\r\n            token.safeApprove(\r\n                registry,\r\n                0\r\n            );\r\n        }\r\n        token.safeApprove(\r\n            registry,\r\n            uint256(-1)\r\n        );\r\n    }\r\n\r\n    function getLiquidatableLoans()\r\n        public\r\n        view\r\n        returns (bytes32[] memory liquidatableLoans)\r\n    {\r\n        IBZx.LoanReturnData[] memory loans;\r\n        loans = BZX.getActiveLoans(0, 500, true);\r\n        liquidatableLoans = new bytes32[](loans.length);\r\n        for (uint256 i = 0; i < loans.length; i++) {\r\n            if (\r\n                isProfitalbe(\r\n                    loans[i].loanToken,\r\n                    loans[i].collateralToken,\r\n                    loans[i].maxLiquidatable,\r\n                    loans[i].maxSeizable\r\n                )\r\n            ) {\r\n                liquidatableLoans[i] = loans[i].loanId;\r\n            }\r\n        }\r\n    }\r\n\r\n    function isProfitalbe(\r\n        address loanToken,\r\n        address collateralToken,\r\n        uint256 maxLiquidatable,\r\n        uint256 maxSeizable\r\n    ) public view returns (bool) {\r\n        (uint256 rate, ) =\r\n            KYBER_PROXY.getExpectedRate(\r\n                IERC20(collateralToken),\r\n                IERC20(loanToken),\r\n                maxLiquidatable\r\n            );\r\n        return\r\n            (rate * maxLiquidatable) /\r\n                10**uint256(ERC20(collateralToken).decimals()) >\r\n            maxSeizable;\r\n    }\r\n\r\n\r\n    function checkUpkeep(bytes calldata checkData)\r\n        external override\r\n        returns (bool upkeepNeeded, bytes memory performData)\r\n    {\r\n        bytes32 [] memory liquidatableLoans = getLiquidatableLoans();\r\n        \r\n        return (liquidatableLoans.length > 0, abi.encodePacked(liquidatableLoans));\r\n    }\r\n\r\n    function performUpkeep(bytes calldata performData) external override {\r\n        bytes32[] memory loanIds = abi.decode(performData, (bytes32[]));\r\n        require(loanIds.length > 0, \"Cannot execute\");\r\n\r\n        // liquidation uses approximately 1.6m gas lets round to 2m. current ethereum gasLimit ~12.5m\r\n        uint256 numberOfLiquidaitonsFitInBlock = 6;\r\n        if (loanIds.length < numberOfLiquidaitonsFitInBlock) {\r\n            numberOfLiquidaitonsFitInBlock = loanIds.length;\r\n        }\r\n        for (uint256 i = 0; i < numberOfLiquidaitonsFitInBlock; i++) {\r\n            IBZx.LoanReturnData memory loan = BZX.getLoan(loanIds[0]);\r\n            // solhint-disable-next-line\r\n            address(this).call(\r\n                abi.encodeWithSignature(\r\n                    \"liquidateCheckBeforeExecuting(bytes32,address,address,uint256,address,bool)\",\r\n                    loan.loanId,\r\n                    loan.loanToken,\r\n                    loan.collateralToken,\r\n                    loan.maxLiquidatable,\r\n                    BZX.underlyingToLoanPool(loan.loanToken),\r\n                    true\r\n                )\r\n            );\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"BZX\",\"outputs\":[{\"internalType\":\"contract IBZx\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KP3R\",\"outputs\":[{\"internalType\":\"contract IKeep3rV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KYBER_PROXY\",\"outputs\":[{\"internalType\":\"contract IKyber\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWeth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidatable\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"iToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowLoss\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"gasTokenUser\",\"type\":\"address\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidatableLoans\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"liquidatableLoans\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"infiniteApproveIERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"infiniteApproveLinkRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidatable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSeizable\",\"type\":\"uint256\"}],\"name\":\"isProfitalbe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidatable\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"flashLoanToken\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidatable\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"flashLoanToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"checkBeforeExecuting\",\"type\":\"bool\"}],\"name\":\"liquidateAllowLoss\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidatable\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"flashLoanToken\",\"type\":\"address\"}],\"name\":\"liquidateCheckBeforeExecuting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"loanId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidatable\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"flashLoanToken\",\"type\":\"address\"}],\"name\":\"liquidatePublic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawIERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BzxLiquidateV2","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6946f8c3b54265b81a9b60223930473f59eef8b9a9a43290ad5a3aae94f3618b"}]}