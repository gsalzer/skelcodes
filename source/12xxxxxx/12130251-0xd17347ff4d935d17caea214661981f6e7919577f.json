{"status":"1","message":"OK","result":[{"SourceCode":"\"\"\"\r\n@title Greenwood Router\r\n@notice Used to calculate instantaneous APR for Aave V2 and Compound\r\n@author Greenwood Labs\r\n\"\"\"\r\n\r\n# define the interfaces used by the contract\r\ninterface CTOKEN:\r\n    def borrowRatePerBlock() -> uint256: view\r\n\r\ninterface REGISTRY:\r\n    def getAddress(_contract: String[20], _version: String[11], ) -> address: nonpayable\r\n    def governance() -> address: nonpayable\r\n\r\ninterface STORE:\r\n    def getAssetContext(_ticker: String[10]) -> AssetContext: view\r\n\r\n# define the constants used by the contract\r\nBLOCKS_PER_DAY: constant(decimal) = 5760.0\r\nCONTRACT_PRECISION: constant(decimal) = 10000000000.0\r\nETH_PRECISION: constant(decimal) = 1000000000000000000.0\r\n\r\n# define the events used by the contract\r\nevent SetRegistry:\r\n    previousRegistry: address\r\n    newRegistry: address\r\n    governance: address\r\n    blockNumber: uint256\r\n\r\n# define the structs used by the contract\r\nstruct AssetContext:\r\n    aToken: address\r\n    aaveV2PriceFeed: address\r\n    aaveV2LendingPool: address\r\n    cToken: address\r\n    compoundPriceFeed: address\r\n    comptroller: address\r\n    decimals: uint256\r\n    underlying: address\r\n\r\nstruct Split:\r\n    compoundSplit: uint256\r\n    aaveV2Split: uint256\r\n    borrowContext: AssetContext\r\n    collateralContext: AssetContext\r\n\r\n# define the storage variables used by the contract\r\nregistry: public(address)\r\n\r\n@external\r\ndef __init__(_registry: address):\r\n    \"\"\"\r\n    @notice Contract constructor\r\n    @param _registry The address of the Greenwood Registry\r\n    \"\"\"\r\n\r\n    # set the address of the Escrow\r\n    self.registry = _registry\r\n\r\n@internal\r\ndef isAuthorized(_caller: address, _role: String[20], _version: String[11]) -> bool:\r\n    \"\"\"\r\n    @notice Method for role-based security\r\n    @param _caller The address that called the permissioned method\r\n    @param _role The requested authorization level\r\n    @param _version The version of Greenwood to use\r\n    @return True if the caller is authorized, False otherwise\r\n    \"\"\"\r\n\r\n    # check if the requested role is \"controller\"\r\n    if keccak256(_role) == keccak256(\"controller\"):\r\n\r\n        # get the address of the Controller from the Registry\r\n        controller: address = REGISTRY(self.registry).getAddress(\"controller\", _version)\r\n\r\n        # return the equality comparison\r\n        return controller == _caller\r\n    \r\n    # check if the requested role is \"governance\"\r\n    elif keccak256(_role) == keccak256(\"governance\"):\r\n\r\n        # get the address of the Governance from the Registry\r\n        governance: address = REGISTRY(self.registry).governance()\r\n\r\n        # return the equality comparison\r\n        return governance == _caller\r\n\r\n    # catch extraneous role arguments\r\n    else:\r\n\r\n        # revert\r\n        raise \"Unhandled role argument\"\r\n\r\n\r\n\r\n@external\r\ndef split(_borrow_ticker: String[10], _collateral_ticker: String[10], _amount: uint256, _protocol: String[10], _store: address, _version: String[11]) -> Split:\r\n    \"\"\"\r\n    @notice Calculate which lending protocol has the lowest APR for the given borrow request\r\n    @param _borrow_ticker The ticker string of the asset that is being borrowed\r\n    @param _collateral_ticker The ticker string of the asset that is being used as collateral\r\n    @param _amount The amount of asset being borrowed scaled by the asset's decimals\r\n    @param _protocol The name of the underlying lending protocol for the loan\r\n    @param _store The address of the Greenwood Store to use\r\n    @param _version The version of the Greenwood Protocol to use\r\n    @dev Only the Controller or the Governance can call this method\r\n    @return Split struct\r\n    \"\"\"\r\n\r\n    # require that the method is being called by the Controller or the Governance\r\n    assert self.isAuthorized(msg.sender, \"controller\", _version) == True or self.isAuthorized(msg.sender, \"governance\", _version) == True, \"Only Controller or Governance can call this method\"\r\n\r\n    # get the borrow asset context and the collateral asset context from the Store\r\n    borrowContext: AssetContext = STORE(_store).getAssetContext(_borrow_ticker)\r\n    collateralContext: AssetContext = STORE(_store).getAssetContext(_collateral_ticker)\r\n\r\n    # assert that the contexts were returned from the Store\r\n    assert borrowContext.underlying != ZERO_ADDRESS, \"Borrow asset context has ZERO_ADDRESS for underlying\"\r\n    assert collateralContext.underlying != ZERO_ADDRESS, \"Collateral asset context has ZERO_ADDRESS for underlying\"\r\n\r\n    # check if the specified lending protocol was Compound\r\n    if keccak256(_protocol) == keccak256(\"compound\"):\r\n        \r\n        # route 100% of the borrow to Compound\r\n        return Split({\r\n            compoundSplit: 100, \r\n            aaveV2Split: 0,                    \r\n            borrowContext: borrowContext,\r\n            collateralContext: collateralContext\r\n        })\r\n\r\n    # check if the specified lending protocol was Aave V2\r\n    elif keccak256(_protocol) == keccak256(\"aavev2\"):\r\n        \r\n        # route 100% of the borrow to Aave V2\r\n        return Split({\r\n            compoundSplit: 0, \r\n            aaveV2Split: 100,                    \r\n            borrowContext: borrowContext,\r\n            collateralContext: collateralContext\r\n        })\r\n        \r\n    # check if no lending protocol was specified\r\n    elif keccak256(_protocol) == keccak256(\"\"):\r\n\r\n        # check if the borrow asset is supported by both protocols\r\n        if borrowContext.aToken != ZERO_ADDRESS and borrowContext.cToken != ZERO_ADDRESS:\r\n\r\n            # call borrowRatePerBlock on the cToken contract and calculate instantaneous APR for Compound\r\n            rate: decimal = convert(CTOKEN(borrowContext.cToken).borrowRatePerBlock(), decimal)\r\n            t0: decimal = rate / ETH_PRECISION * BLOCKS_PER_DAY + 1.0\r\n            t1: decimal = t0 * t0\r\n            for i in range(362):\r\n                t1 = t1 * t0\r\n            t2: decimal = t1 - 1.0\r\n            compoundAPR: uint256 = convert(t2 * CONTRACT_PRECISION, uint256)\r\n            \r\n            # call getReserveData on the Aave V2 LendingPool\r\n            _response: Bytes[768] = raw_call(\r\n                borrowContext.aaveV2LendingPool,\r\n                concat(\r\n                    method_id(\"getReserveData(address)\"),\r\n                    convert(borrowContext.underlying, bytes32)\r\n                ),\r\n                max_outsize=768\r\n            )\r\n\r\n            # parse the instantaneous APR for Aave V2\r\n            # @dev getReserveData returns 12 items. currentVariableBorrowRate is the 5th item. each item is given 32 bytes in the list\r\n            aaveAPR: uint256 = convert((convert(slice(_response, 128, 32), decimal) / convert(10 ** 26, decimal)) * CONTRACT_PRECISION, uint256)\r\n\r\n            # check if the instantaneous APR for Aave V2 is less than the instantaneous APR for Compound\r\n            if aaveAPR < compoundAPR:\r\n\r\n                # route 100% of the borrow to Aave V2\r\n                return Split({\r\n                    compoundSplit: 0, \r\n                    aaveV2Split: 100,                    \r\n                    borrowContext: borrowContext,\r\n                    collateralContext: collateralContext\r\n                })\r\n\r\n            # check if the instantaneous APR for Compound is less than the instantaneous APR for Aave V2\r\n            elif compoundAPR < aaveAPR:\r\n\r\n                # route 100% of the borrow to Compound \r\n                return Split({\r\n                    compoundSplit: 100,\r\n                    aaveV2Split: 0,\r\n                    borrowContext: borrowContext,\r\n                    collateralContext: collateralContext\r\n                })\r\n\r\n            # handle matching instantaneous APRs\r\n            else:\r\n\r\n                # route 100% of the borrow to Compound \r\n                return Split({\r\n                    compoundSplit: 100,\r\n                    aaveV2Split: 0,\r\n                    borrowContext: borrowContext,\r\n                    collateralContext: collateralContext\r\n                })\r\n\r\n        # check if the borrow asset is only supported by Compound\r\n        elif borrowContext.aToken == ZERO_ADDRESS and borrowContext.cToken != ZERO_ADDRESS:\r\n\r\n            # route 100% of the borrow to Compound \r\n            return Split({\r\n                compoundSplit: 100,\r\n                aaveV2Split: 0,\r\n                borrowContext: borrowContext,\r\n                collateralContext: collateralContext\r\n            })\r\n\r\n        # check if the borrow asset is only supported by Aave V2\r\n        elif borrowContext.aToken != ZERO_ADDRESS and borrowContext.cToken == ZERO_ADDRESS:\r\n\r\n            # route 100% of the borrow to Aave V2 \r\n            return Split({\r\n                compoundSplit: 0,\r\n                aaveV2Split: 100,\r\n                borrowContext: borrowContext,\r\n                collateralContext: collateralContext\r\n            })\r\n\r\n        # catch unsupported assets\r\n        else:\r\n\r\n            # revert\r\n            raise \"Unsupported borrow asset\"\r\n\r\n    # catch unsupported lending protocols\r\n    else:\r\n\r\n        # revert\r\n        raise \"Unsupported protocol\"\r\n\r\n@external\r\ndef setRegistry(_new_registry: address):\r\n    \"\"\"\r\n    @notice Updates the address of the Registry\r\n    @param _new_registry The address of the new Greenwood Registry\r\n    @dev Only the Governance can call this method\r\n    @dev Only call this method with a valid Greenwood Registry or subsequent calls will fail!\r\n    \"\"\"\r\n\r\n    # require that the method caller is the Governance\r\n    assert self.isAuthorized(msg.sender, \"governance\", \"\") == True, \"Only Governance can call this method\"\r\n\r\n    # get the previous Registry\r\n    previousRegistry: address = self.registry\r\n\r\n    # update the address of the Registry\r\n    self.registry = _new_registry\r\n\r\n    # emit a SetRegistry event\r\n    log SetRegistry(previousRegistry, _new_registry, msg.sender, block.number)","ABI":"[{\"name\":\"SetRegistry\",\"inputs\":[{\"type\":\"address\",\"name\":\"previousRegistry\",\"indexed\":false},{\"type\":\"address\",\"name\":\"newRegistry\",\"indexed\":false},{\"type\":\"address\",\"name\":\"governance\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"blockNumber\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_registry\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"name\":\"split\",\"outputs\":[{\"type\":\"tuple\",\"name\":\"\",\"components\":[{\"type\":\"uint256\",\"name\":\"compoundSplit\"},{\"type\":\"uint256\",\"name\":\"aaveV2Split\"},{\"type\":\"tuple\",\"name\":\"borrowContext\",\"components\":[{\"type\":\"address\",\"name\":\"aToken\"},{\"type\":\"address\",\"name\":\"aaveV2PriceFeed\"},{\"type\":\"address\",\"name\":\"aaveV2LendingPool\"},{\"type\":\"address\",\"name\":\"cToken\"},{\"type\":\"address\",\"name\":\"compoundPriceFeed\"},{\"type\":\"address\",\"name\":\"comptroller\"},{\"type\":\"uint256\",\"name\":\"decimals\"},{\"type\":\"address\",\"name\":\"underlying\"}]},{\"type\":\"tuple\",\"name\":\"collateralContext\",\"components\":[{\"type\":\"address\",\"name\":\"aToken\"},{\"type\":\"address\",\"name\":\"aaveV2PriceFeed\"},{\"type\":\"address\",\"name\":\"aaveV2LendingPool\"},{\"type\":\"address\",\"name\":\"cToken\"},{\"type\":\"address\",\"name\":\"compoundPriceFeed\"},{\"type\":\"address\",\"name\":\"comptroller\"},{\"type\":\"uint256\",\"name\":\"decimals\"},{\"type\":\"address\",\"name\":\"underlying\"}]}]}],\"inputs\":[{\"type\":\"string\",\"name\":\"_borrow_ticker\"},{\"type\":\"string\",\"name\":\"_collateral_ticker\"},{\"type\":\"uint256\",\"name\":\"_amount\"},{\"type\":\"string\",\"name\":\"_protocol\"},{\"type\":\"address\",\"name\":\"_store\"},{\"type\":\"string\",\"name\":\"_version\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":176763},{\"name\":\"setRegistry\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_new_registry\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"gas\":46838},{\"name\":\"registry\",\"outputs\":[{\"type\":\"address\",\"name\":\"\"}],\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"gas\":1241}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.3","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"0000000000000000000000001ddbb7a21905c6a8dbd76b20b7c6b3a55d1af24f","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":""}]}