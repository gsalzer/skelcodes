{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FixedPriceAggregator.sol\": {\r\n      \"content\": \"pragma solidity 0.5.17;\\n\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @notice An aggregator that does one thing: return a fixed price, in fixed decimals, as set in the contructor.\\n * @dev Must return Token/USD price and conform to AggregatorV3Interface for use with ChainlinkReporter\\n */\\ncontract FixedPriceAggregator is AggregatorV3Interface {\\n  /// @notice The number of decimals the fixed price is represented in\\n  uint8 public decimals;\\n\\n  /// @notice The fixed price, in the decimals indicated, returned by this oracle\\n  int256 private price;\\n\\n  /**\\n   * @param _decimals The number of decimals the fixed price is represented in\\n   * @param _price The fixed price, in the decimals indicated, to be returned by this oracle\\n   */\\n  constructor(uint8 _decimals, int256 _price) public {\\n    price = _price;\\n    decimals = _decimals;\\n  }\\n\\n  /**\\n   * @return A description indicating this is a fixed price oracle\\n   */\\n  function description() external view returns (string memory) {\\n    return \\\"Fixed price oracle\\\";\\n  }\\n\\n  /**\\n   * @return A version number of 0\\n   */\\n  function version() external view returns (uint256) {\\n    return 0;\\n  }\\n\\n  /**\\n   * @param _roundId This parameter is ignored\\n   * @return roundId 0\\n   * @return answer The fixed price returned by this oracle, represented in appropriate decimals\\n   * @return startedAt 0\\n   * @return updatedAt Since price is fixed, we always return the current block timestamp\\n   * @return answeredInRound 0\\n   */\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    _roundId; // silence unused variable compiler warning\\n    return (uint80(0), price, uint256(0), block.timestamp, uint80(0));\\n  }\\n\\n  /**\\n   * @return roundId 0\\n   * @return answer The fixed price returned by this oracle, represented in appropriate decimals\\n   * @return startedAt 0\\n   * @return updatedAt Since price is fixed, we always return the current block timestamp\\n   * @return answeredInRound 0\\n   */\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return (uint80(0), price, uint256(0), block.timestamp, uint80(0));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n/**\\n * @notice Chainlink AggregatorV3Interface\\n * @dev This interface was copied from AggregatorV3Interface.sol within the @chainlink/contracts\\n * package. We copy it here instead of importing it for two reasons:\\n *   1. The package specified solidity >= 0.6.0, but we're using 0.5.x\\n *   2. It's an easy way to work around the \\\"File outside of allowed directories\\\" error that shows\\n *      up when compiling with current solc settings\\n */\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"int256\",\"name\":\"_price\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FixedPriceAggregator","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000f4240","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}