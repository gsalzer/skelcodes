{"status":"1","message":"OK","result":[{"SourceCode":"{\"Ownable.sol\":{\"content\":\"pragma solidity = 0.5.16;\\n\\ncontract Ownable {\\n\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"YouSwap: CALLER_IS_NOT_THE_OWNER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        require(newOwner != address(0), \\\"YouSwap: NEW_OWNER_IS_THE_ZERO_ADDRESS\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"},\"Pausable.sol\":{\"content\":\"pragma solidity = 0.5.16;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\ncontract Pausable is Ownable {\\n    event Paused(address account);\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"YouSwap:PAUSED\\\");\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        require(_paused, \\\"YouSwap:NOT_PAUSED\\\");\\n        _;\\n    }\\n\\n    function pause() external onlyOwner whenNotPaused {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function unpause() external onlyOwner whenPaused {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"pragma solidity = 0.5.16;\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"},\"YouBridge.sol\":{\"content\":\"pragma solidity = 0.5.16;\\nimport \\\"SafeMath.sol\\\";\\nimport \\\"Pausable.sol\\\";\\ncontract Management is Pausable {\\n    mapping(address =\\u003e uint8) private _managers;\\n    modifier isManager{\\n        require(_managers[msg.sender] == 1, \\\"CALLER_IS_NOT_A_MANAGER\\\");\\n        _;\\n    }\\n\\n    function addManager(address manager) external onlyOwner {\\n        _managers[manager] = 1;\\n    }\\n\\n    function removeManager(address manager) external onlyOwner {\\n        _managers[manager] = 0;\\n    }\\n\\n    function manager(address account) external view returns (bool) {\\n        return _managers[account] == 1;\\n    }\\n}\\n\\ncontract YouBridge is Management {\\n    using SafeMath for uint256;\\n\\n    struct Order {\\n        uint8 toChain;// 1:ETH 2:HECO 3:BSC 4:TRX\\n        address sender;\\n        address recipient;\\n        uint256 amount;\\n        uint256 fee;\\n        uint8 state;// 1:WAITING 2:TRANSFERRED 101:CANCELED\\n    }\\n\\n    struct Ledger {\\n        uint8 fromChain;//1:ETH 2:HECO 3:BSC 4:TRX\\n        address recipient;\\n        uint256 amount;\\n        uint8 state;// 2:TRANSFERRED\\n        string proof;\\n    }\\n\\n    event OrderConsumed(\\n        uint256 orderId,\\n        uint8 fromChain, //1:ETH 2:HECO 3:BSC 4:TRX\\n        address recipient,\\n        uint256 amount,\\n        string proof\\n    );\\n\\n    mapping(uint256 =\\u003e Order) public orders;\\n    mapping(uint256 =\\u003e Ledger) public ledgers;\\n    address public feeTo;\\n    uint256 public feeRate = 30;// 30/10000\\n    uint256 _nonce = 0;\\n\\n    uint256 private constant oneDay = 1 days;\\n    uint256 private _dayBegin;\\n    uint256 private _limitOfOneDay = 10 ** 10;//200 000YOU\\n    uint256 private _remainingOfDay;\\n\\n    address public constant youToken = 0x1d32916CFA6534D261AD53E2498AB95505bd2510;\\n\\n    event Transfer(\\n        uint256 orderId,\\n        uint8 chainId,\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount\\n    );\\n\\n    event Transferred(\\n        uint256 orderId,\\n        uint8 chainId,\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount\\n    );\\n\\n    event OrderCanceled(\\n        uint256 orderId,\\n        uint8 chainId,\\n        address indexed recipient,\\n        uint256 amount\\n    );\\n\\n    uint private unlocked = 1;\\n    modifier lock() {\\n        require(unlocked == 1, \\u0027YouSwap: LOCKED\\u0027);\\n        unlocked = 0;\\n        _;\\n        unlocked = 1;\\n    }\\n\\n    constructor() public {\\n        feeTo = 0x19B571eB4FbaD642b08E932055ca0e4dbc32fF69;\\n        _remainingOfDay = _limitOfOneDay;\\n        _dayBegin = 1617984000;\\n    }\\n\\n    function limitOfOneDay() external view returns (uint256) {\\n        return _limitOfOneDay;\\n    }\\n\\n    function remainingOfDay() external view returns (uint256) {\\n        if (now.sub(_dayBegin) \\u003e oneDay) {\\n            return _limitOfOneDay;\\n        }\\n        return _remainingOfDay;\\n    }\\n\\n    function setLimitOfOneDay(uint256 newVal) onlyOwner external {\\n        require(newVal \\u003e= 10 ** 9, \\u0027YouSwap:1000YOU_AT_LEAST\\u0027);\\n        _limitOfOneDay = newVal;\\n    }\\n\\n    function setFeeTo(address account) onlyOwner external {\\n        feeTo = account;\\n    }\\n\\n    function setFeeRate(uint256 rate) onlyOwner external {\\n        require(rate \\u003c 10000, \\u0027YouSwap: NOT_ALLOWED\\u0027);\\n        feeRate = rate;\\n    }\\n\\n    function exchange(uint8 chainId, address recipient, uint256 amount) external lock whenNotPaused returns (bool)  {\\n        require(amount \\u003e= 10 ** 9, \\u0027YouSwap:1000YOU_AT_LEAST\\u0027);\\n        if (now.sub(_dayBegin) \\u003e oneDay) {\\n            _remainingOfDay = _limitOfOneDay;\\n            uint256 deltaDays = now.sub(_dayBegin).div(oneDay);\\n            _dayBegin = _dayBegin.add(oneDay.mul(deltaDays));\\n        }\\n\\n        _remainingOfDay = _remainingOfDay.sub(amount);\\n        require(_remainingOfDay \\u003e= 0, \\u0027YouSwap:EXCEEDS_THE_LIMIT_OF_ONE_DAY\\u0027);\\n\\n        uint256 orderId = ++_nonce;\\n        Order storage order = orders[orderId];\\n        require(order.state == 0, \\u0027YouSwap:FORBIDDEN\\u0027);\\n\\n        order.toChain = chainId;\\n        order.state = 1;\\n        order.sender = msg.sender;\\n        order.recipient = recipient;\\n        order.fee = amount.mul(feeRate).div(10000);\\n        order.amount = amount.sub(order.fee);\\n\\n        _burnFrom(msg.sender, order.amount);\\n        _transferFrom(msg.sender, feeTo, order.fee);\\n\\n        emit Transfer(orderId, chainId, order.sender, order.recipient, order.amount);\\n\\n        return true;\\n    }\\n\\n    function cancelOrder(uint256 orderId) public onlyOwner whenPaused returns (bool)  {\\n        Order storage order = orders[orderId];\\n        require(order.state == 1, \\u0027YouSwap:FORBIDDEN\\u0027);\\n        order.state = 101;\\n\\n        _mint(order.sender, order.amount);\\n        emit OrderCanceled(orderId, order.toChain, order.recipient, order.amount);\\n\\n        return true;\\n    }\\n\\n    function completeOrder(uint256 orderId) isManager public returns (bool)  {\\n        Order storage order = orders[orderId];\\n        require(order.state == 1, \\u0027YouSwap:NOT_AVAILABLE\\u0027);\\n        order.state = 2;\\n        emit Transferred(orderId, order.toChain, order.sender, order.recipient, order.amount);\\n\\n        return true;\\n    }\\n\\n    function completeOrders(uint256[] calldata orderIds) external returns (bool)  {\\n        require(orderIds.length \\u003c 256, \\u0027YouSwap:NOT_ALLOWED\\u0027);\\n        for (uint8 i = 0; i \\u003c orderIds.length; i++) {\\n            completeOrder(orderIds[i]);\\n        }\\n        return true;\\n    }\\n\\n    function consumeOrder(uint256 orderId, uint8 fromChain, address recipient, uint256 amount, string calldata proof, bytes32 orderHash) isManager external lock whenNotPaused {\\n        require(orderHash == keccak256((abi.encodePacked(orderId, fromChain, recipient, amount, proof))), \\\"YouSwap:WRONG_ORDER_HASH\\\");\\n        Ledger storage ledger = ledgers[orderId];\\n        require(ledger.state != 2, \\u0027YouSwap:CONSUMED_ALREADY\\u0027);\\n        ledger.fromChain = fromChain;\\n        ledger.recipient = recipient;\\n        ledger.amount = amount;\\n        ledger.state = 2;\\n        ledger.proof = proof;\\n\\n        _mint(recipient, amount);\\n        emit OrderConsumed(orderId, fromChain, recipient, amount, proof);\\n    }\\n\\n    function _mint(address recipient, uint256 amount) private {\\n        bytes4 methodId = bytes4(keccak256(bytes(\\u0027mint(address,uint256)\\u0027)));\\n\\n        (bool success, bytes memory data) = youToken.call(abi.encodeWithSelector(methodId, recipient, amount));\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027YouSwap: MINT_FAILED\\u0027);\\n    }\\n\\n    function _burnFrom(address account, uint256 amount) private {\\n        bytes4 methodId = bytes4(keccak256(bytes(\\u0027burnFrom(address,uint256)\\u0027)));\\n\\n        (bool success, bytes memory data) = youToken.call(abi.encodeWithSelector(methodId, account, amount));\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027YouSwap: BURN_FROM_FAILED\\u0027);\\n    }\\n\\n    function _transferFrom(address sender, address recipient, uint256 amount) private {\\n        bytes4 methodId = bytes4(keccak256(bytes(\\u0027transferFrom(address,address,uint256)\\u0027)));\\n\\n        (bool success, bytes memory data) = youToken.call(abi.encodeWithSelector(methodId, sender, recipient, amount));\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027YouSwap: TRANSFER_FROM_FAILED\\u0027);\\n    }\\n\\n    function _transfer(address recipient, uint amount) private {\\n        bytes4 methodId = bytes4(keccak256(bytes(\\u0027transfer(address,uint256)\\u0027)));\\n\\n        (bool success, bytes memory data) = youToken.call(abi.encodeWithSelector(methodId, recipient, amount));\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027YouSwap: TRANSFER_FAILED\\u0027);\\n    }\\n}\"}}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"chainId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"OrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"fromChain\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"OrderConsumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"chainId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"chainId\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"completeOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIds\",\"type\":\"uint256[]\"}],\"name\":\"completeOrders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"fromChain\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"consumeOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ledgers\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"fromChain\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"limitOfOneDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orders\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"toChain\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"remainingOfDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVal\",\"type\":\"uint256\"}],\"name\":\"setLimitOfOneDay\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"youToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"YouBridge","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f75a9feec5ca2aad10cad7ade660a816b4bfa91619f9561746c80f7603aa865e"}]}