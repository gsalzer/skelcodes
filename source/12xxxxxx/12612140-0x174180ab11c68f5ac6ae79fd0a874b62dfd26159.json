{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Conjure.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport {IERC20} from \\\"./interfaces/IERC20.sol\\\";\\r\\nimport \\\"./lib/FixedPoint.sol\\\";\\r\\nimport \\\"./interfaces/IEtherCollateral.sol\\\";\\r\\n\\r\\n/// @author Conjure Finance Team\\r\\n/// @title Conjure\\r\\n/// @notice Contract to define and track the price of an arbitrary synth\\r\\ncontract Conjure is IERC20, ReentrancyGuard {\\r\\n\\r\\n    // using Openzeppelin contracts for SafeMath and Address\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n    using FixedPoint for FixedPoint.uq112x112;\\r\\n    using FixedPoint for FixedPoint.uq144x112;\\r\\n\\r\\n    // presenting the total supply\\r\\n    uint256 internal _totalSupply;\\r\\n\\r\\n    // representing the name of the token\\r\\n    string internal _name;\\r\\n\\r\\n    // representing the symbol of the token\\r\\n    string internal _symbol;\\r\\n\\r\\n    // representing the decimals of the token\\r\\n    uint8 internal constant DECIMALS = 18;\\r\\n\\r\\n    // a record of balance of a specific account by address\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    // a record of allowances for a specific address by address to address mapping\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    // the owner of the contract\\r\\n    address payable public _owner;\\r\\n\\r\\n    // the type of the arb asset (single asset, arb asset)\\r\\n    // 0... single asset     (uses median price)\\r\\n    // 1... basket asset     (uses weighted average price)\\r\\n    // 2... index asset      (uses token address and oracle to get supply and price and calculates supply * price / divisor)\\r\\n    // 3 .. sqrt index asset (uses token address and oracle to get supply and price and calculates sqrt(supply * price) / divisor)\\r\\n    uint256 public _assetType;\\r\\n\\r\\n    // the address of the collateral contract factory\\r\\n    address public _factoryContract;\\r\\n\\r\\n    // the address of the collateral contract\\r\\n    address public _collateralContract;\\r\\n\\r\\n    // struct for oracles\\r\\n    struct _oracleStruct {\\r\\n        address oracleaddress;\\r\\n        address tokenaddress;\\r\\n        // 0... chainLink, 1... UniSwap T-wap, 2... custom\\r\\n        uint256 oracleType;\\r\\n        string signature;\\r\\n        bytes calldatas;\\r\\n        uint256 weight;\\r\\n        uint256 decimals;\\r\\n        uint256 values;\\r\\n    }\\r\\n\\r\\n    // array for oracles\\r\\n    _oracleStruct[] public _oracleData;\\r\\n\\r\\n    // number of oracles\\r\\n    uint256 public _numoracles;\\r\\n\\r\\n    // the latest observed price\\r\\n    uint256 internal _latestobservedprice;\\r\\n\\r\\n    // the latest observed price timestamp\\r\\n    uint256 internal _latestobservedtime;\\r\\n\\r\\n    // the divisor for the index\\r\\n    uint256 public _indexdivisor;\\r\\n\\r\\n    // the modifier if the asset type is an inverse type\\r\\n    bool public _inverse;\\r\\n\\r\\n    // shows the init state of the contract\\r\\n    bool public _inited;\\r\\n\\r\\n    // the modifier if the asset type is an inverse type\\r\\n    uint256 public _deploymentPrice;\\r\\n\\r\\n    // maximum decimal size for the used prices\\r\\n    uint256 private constant MAXIMUM_DECIMALS = 18;\\r\\n\\r\\n    // The number representing 1.0\\r\\n    uint256 private constant UNIT = 10**18;\\r\\n\\r\\n    // chainLink aggregator decimals to give back\\r\\n    uint256 private constant CHAINLINK_RETURN_DECIMALS = 8;\\r\\n\\r\\n    // the eth usd price feed chainLink oracle address\\r\\n    address public ethUsdChainLinkOracle;\\r\\n\\r\\n    // lower boundary for inverse assets (10% of deployment price)\\r\\n    uint256 public inverseLowerCap;\\r\\n\\r\\n    // ========== EVENTS ==========\\r\\n    event NewOwner(address newOwner);\\r\\n    event Issued(address indexed account, uint256 value);\\r\\n    event Burned(address indexed account, uint256 value);\\r\\n    event AssetTypeSet(uint256 value);\\r\\n    event IndexDivisorSet(uint256 value);\\r\\n    event PriceUpdated(uint256 value);\\r\\n    event InverseSet(bool value);\\r\\n    event NumOraclesSet(uint256 value);\\r\\n\\r\\n    // only owner modifier\\r\\n    modifier onlyOwner {\\r\\n        _onlyOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // only owner view\\r\\n    function _onlyOwner() private view {\\r\\n        require(msg.sender == _owner, \\\"Only the contract owner may perform this action\\\");\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        // Don't allow implementation to be initialized.\\r\\n        _factoryContract = address(1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev initializes the clone implementation and the Conjure contract\\r\\n     *\\r\\n     * @param nameSymbol array holding the name and the symbol of the asset\\r\\n     * @param conjureAddresses array holding the owner, indexed UniSwap oracle and ethUsdChainLinkOracle address\\r\\n     * @param factoryAddress_ the address of the factory\\r\\n     * @param collateralContract the EtherCollateral contract of the asset\\r\\n    */\\r\\n    function initialize(\\r\\n        string[2] memory nameSymbol,\\r\\n        address[] memory conjureAddresses,\\r\\n        address factoryAddress_,\\r\\n        address collateralContract\\r\\n    ) external\\r\\n    {\\r\\n        require(_factoryContract == address(0), \\\"already initialized\\\");\\r\\n        require(factoryAddress_ != address(0), \\\"factory can not be null\\\");\\r\\n        require(collateralContract != address(0), \\\"collateralContract can not be null\\\");\\r\\n\\r\\n        _owner = payable(conjureAddresses[0]);\\r\\n        _name = nameSymbol[0];\\r\\n        _symbol = nameSymbol[1];\\r\\n\\r\\n        ethUsdChainLinkOracle = conjureAddresses[1];\\r\\n        _factoryContract = factoryAddress_;\\r\\n\\r\\n        // mint new EtherCollateral contract\\r\\n        _collateralContract = collateralContract;\\r\\n\\r\\n        emit NewOwner(_owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev inits the conjure asset can only be called by the factory address\\r\\n     *\\r\\n     * @param inverse_ indicated it the asset is an inverse asset or not\\r\\n     * @param divisorAssetType array containing the divisor and the asset type\\r\\n     * @param oracleAddresses_ the array holding the oracle addresses 1. address to call,\\r\\n     *        2. address of the token for supply if needed\\r\\n     * @param oracleTypesValuesWeightsDecimals array holding the oracle types,values,weights and decimals\\r\\n     * @param signatures_ array holding the oracle signatures\\r\\n     * @param callData_ array holding the oracle callData\\r\\n    */\\r\\n    function init(\\r\\n        bool inverse_,\\r\\n        uint256[2] memory divisorAssetType,\\r\\n        address[][2] memory oracleAddresses_,\\r\\n        uint256[][4] memory oracleTypesValuesWeightsDecimals,\\r\\n        string[] memory signatures_,\\r\\n        bytes[] memory callData_\\r\\n    ) external {\\r\\n        require(msg.sender == _factoryContract, \\\"can only be called by factory contract\\\");\\r\\n        require(!_inited, \\\"Contract already inited\\\");\\r\\n        require(divisorAssetType[0] != 0, \\\"Divisor should not be 0\\\");\\r\\n\\r\\n        _assetType = divisorAssetType[1];\\r\\n        _numoracles = oracleAddresses_[0].length;\\r\\n        _indexdivisor = divisorAssetType[0];\\r\\n        _inverse = inverse_;\\r\\n        \\r\\n        emit AssetTypeSet(_assetType);\\r\\n        emit IndexDivisorSet(_indexdivisor);\\r\\n        emit InverseSet(_inverse);\\r\\n        emit NumOraclesSet(_numoracles);\\r\\n\\r\\n        uint256 weightCheck;\\r\\n\\r\\n        // push the values into the oracle struct for further processing\\r\\n        for (uint i = 0; i < oracleAddresses_[0].length; i++) {\\r\\n            require(oracleTypesValuesWeightsDecimals[3][i] <= 18, \\\"Decimals too high\\\");\\r\\n            _oracleData.push(_oracleStruct({\\r\\n                oracleaddress: oracleAddresses_[0][i],\\r\\n                tokenaddress: oracleAddresses_[1][i],\\r\\n                oracleType: oracleTypesValuesWeightsDecimals[0][i],\\r\\n                signature: signatures_[i],\\r\\n                calldatas: callData_[i],\\r\\n                weight: oracleTypesValuesWeightsDecimals[2][i],\\r\\n                values: oracleTypesValuesWeightsDecimals[1][i],\\r\\n                decimals: oracleTypesValuesWeightsDecimals[3][i]\\r\\n            }));\\r\\n\\r\\n            weightCheck += oracleTypesValuesWeightsDecimals[2][i];\\r\\n        }\\r\\n\\r\\n        // for basket assets weights must add up to 100\\r\\n        if (_assetType == 1) {\\r\\n            require(weightCheck == 100, \\\"Weights not 100\\\");\\r\\n        }\\r\\n\\r\\n        updatePrice();\\r\\n        _deploymentPrice = getLatestPrice();\\r\\n\\r\\n        // for inverse assets set boundaries\\r\\n        if (_inverse) {\\r\\n            inverseLowerCap = _deploymentPrice.div(10);\\r\\n        }\\r\\n\\r\\n        _inited = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev lets the EtherCollateral contract instance burn synths\\r\\n     *\\r\\n     * @param account the account address where the synths should be burned to\\r\\n     * @param amount the amount to be burned\\r\\n    */\\r\\n    function burn(address account, uint amount) external {\\r\\n        require(msg.sender == _collateralContract, \\\"Only Collateral Contract\\\");\\r\\n        _internalBurn(account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev lets the EtherCollateral contract instance mint new synths\\r\\n     *\\r\\n     * @param account the account address where the synths should be minted to\\r\\n     * @param amount the amount to be minted\\r\\n    */\\r\\n    function mint(address account, uint amount) external {\\r\\n        require(msg.sender == _collateralContract, \\\"Only Collateral Contract\\\");\\r\\n        _internalIssue(account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to mint new synths\\r\\n     *\\r\\n     * @param account the account address where the synths should be minted to\\r\\n     * @param amount the amount to be minted\\r\\n    */\\r\\n    function _internalIssue(address account, uint amount) internal {\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n\\r\\n        emit Transfer(address(0), account, amount);\\r\\n        emit Issued(account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to burn synths\\r\\n     *\\r\\n     * @param account the account address where the synths should be burned to\\r\\n     * @param amount the amount to be burned\\r\\n    */\\r\\n    function _internalBurn(address account, uint amount) internal {\\r\\n        _balances[account] = _balances[account].sub(amount);\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n        emit Burned(account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev lets the owner change the contract owner\\r\\n     *\\r\\n     * @param _newOwner the new owner address of the contract\\r\\n    */\\r\\n    function changeOwner(address payable _newOwner) external onlyOwner {\\r\\n        require(_newOwner != address(0), \\\"_newOwner can not be null\\\");\\r\\n    \\r\\n        _owner = _newOwner;\\r\\n        emit NewOwner(_newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev lets the owner collect the fees accrued\\r\\n    */\\r\\n    function collectFees() external onlyOwner {\\r\\n        _owner.transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev gets the latest price of an oracle asset\\r\\n     * uses chainLink oracles to get the price\\r\\n     *\\r\\n     * @return the current asset price\\r\\n    */\\r\\n    function getLatestPrice(AggregatorV3Interface priceFeed) internal view returns (uint) {\\r\\n        (\\r\\n        ,\\r\\n        int price,\\r\\n        ,\\r\\n        ,\\r\\n        ) = priceFeed.latestRoundData();\\r\\n\\r\\n        return uint(price);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev gets the latest ETH USD Price from the given oracle\\r\\n     *\\r\\n     * @return the current eth usd price\\r\\n    */\\r\\n    function getLatestETHUSDPrice() public view returns (uint) {\\r\\n        (\\r\\n        ,\\r\\n        int price,\\r\\n        ,\\r\\n        ,\\r\\n        ) = AggregatorV3Interface(ethUsdChainLinkOracle).latestRoundData();\\r\\n\\r\\n        return uint(price) * 10 ** (MAXIMUM_DECIMALS - CHAINLINK_RETURN_DECIMALS);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev implementation of a quicksort algorithm\\r\\n    *\\r\\n    * @param arr the array to be sorted\\r\\n    * @param left the left outer bound element to start the sort\\r\\n    * @param right the right outer bound element to stop the sort\\r\\n    */\\r\\n    function quickSort(uint[] memory arr, int left, int right) internal pure {\\r\\n        int i = left;\\r\\n        int j = right;\\r\\n        if (i == j) return;\\r\\n        uint pivot = arr[uint(left + (right - left) / 2)];\\r\\n        while (i <= j) {\\r\\n            while (arr[uint(i)] < pivot) i++;\\r\\n            while (pivot < arr[uint(j)]) j--;\\r\\n            if (i <= j) {\\r\\n                (arr[uint(i)], arr[uint(j)]) = (arr[uint(j)], arr[uint(i)]);\\r\\n                i++;\\r\\n                j--;\\r\\n            }\\r\\n        }\\r\\n        if (left < j)\\r\\n            quickSort(arr, left, j);\\r\\n        if (i < right)\\r\\n            quickSort(arr, i, right);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev implementation to get the average value of an array\\r\\n    *\\r\\n    * @param arr the array to be averaged\\r\\n    * @return the (weighted) average price of an asset\\r\\n    */\\r\\n    function getAverage(uint[] memory arr) internal view returns (uint) {\\r\\n        uint sum = 0;\\r\\n\\r\\n        // do the sum of all array values\\r\\n        for (uint i = 0; i < arr.length; i++) {\\r\\n            sum += arr[i];\\r\\n        }\\r\\n        // if we dont have any weights (single asset with even array members)\\r\\n        if (_assetType == 0) {\\r\\n            return (sum / arr.length);\\r\\n        }\\r\\n        // index pricing we do division by divisor\\r\\n        if ((_assetType == 2) || (_assetType == 3)) {\\r\\n            return sum / _indexdivisor;\\r\\n        }\\r\\n        // divide by 100 cause the weights sum up to 100 and divide by the divisor if set (defaults to 1)\\r\\n        return ((sum / 100) / _indexdivisor);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev sort implementation which calls the quickSort function\\r\\n    *\\r\\n    * @param data the array to be sorted\\r\\n    * @return the sorted array\\r\\n    */\\r\\n    function sort(uint[] memory data) internal pure returns (uint[] memory) {\\r\\n        quickSort(data, int(0), int(data.length - 1));\\r\\n        return data;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev implementation of a square rooting algorithm\\r\\n    * babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\r\\n    *\\r\\n    * @param y the value to be square rooted\\r\\n    * @return z the square rooted value\\r\\n    */\\r\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\r\\n        if (y > 3) {\\r\\n            z = y;\\r\\n            uint256 x = (y + 1) / 2;\\r\\n            while (x < z) {\\r\\n                z = x;\\r\\n                x = (y / x + x) / 2;\\r\\n            }\\r\\n        } else if (y != 0) {\\r\\n            z = 1;\\r\\n        }\\r\\n        else {\\r\\n            z = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev gets the latest recorded price of the synth in USD\\r\\n     *\\r\\n     * @return the last recorded synths price\\r\\n    */\\r\\n    function getLatestPrice() public view returns (uint) {\\r\\n        return _latestobservedprice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev gets the latest recorded price time\\r\\n     *\\r\\n     * @return the last recorded time of a synths price\\r\\n    */\\r\\n    function getLatestPriceTime() external view returns (uint) {\\r\\n        return _latestobservedtime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev gets the latest price of the synth in USD by calculation and write the checkpoints for view functions\\r\\n    */\\r\\n    function updatePrice() public {\\r\\n        uint256 returnPrice = updateInternalPrice();\\r\\n        bool priceLimited;\\r\\n\\r\\n        // if it is an inverse asset we do price = _deploymentPrice - (current price - _deploymentPrice)\\r\\n        // --> 2 * deployment price - current price\\r\\n        // but only if the asset is inited otherwise we return the normal price calculation\\r\\n        if (_inverse && _inited) {\\r\\n            if (_deploymentPrice.mul(2) <= returnPrice) {\\r\\n                returnPrice = 0;\\r\\n            } else {\\r\\n                returnPrice = _deploymentPrice.mul(2).sub(returnPrice);\\r\\n\\r\\n                // limit to lower cap\\r\\n                if (returnPrice <= inverseLowerCap) {\\r\\n                    priceLimited = true;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _latestobservedprice = returnPrice;\\r\\n        _latestobservedtime = block.timestamp;\\r\\n\\r\\n        emit PriceUpdated(_latestobservedprice);\\r\\n\\r\\n        // if price reaches 0 we close the collateral contract and no more loans can be opened\\r\\n        if ((returnPrice <= 0) || (priceLimited)) {\\r\\n            IEtherCollateral(_collateralContract).setAssetClosed(true);\\r\\n        } else {\\r\\n            // if the asset was set closed we open it again for loans\\r\\n            if (IEtherCollateral(_collateralContract).getAssetClosed()) {\\r\\n                IEtherCollateral(_collateralContract).setAssetClosed(false);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev gets the latest price of the synth in USD by calculation --> internal calculation\\r\\n     *\\r\\n     * @return the current synths price\\r\\n    */\\r\\n    function updateInternalPrice() internal returns (uint) {\\r\\n        require(_oracleData.length > 0, \\\"No oracle feeds supplied\\\");\\r\\n        // storing all in an array for further processing\\r\\n        uint[] memory prices = new uint[](_oracleData.length);\\r\\n\\r\\n        for (uint i = 0; i < _oracleData.length; i++) {\\r\\n\\r\\n            // chainLink oracle\\r\\n            if (_oracleData[i].oracleType == 0) {\\r\\n                AggregatorV3Interface priceFeed = AggregatorV3Interface(_oracleData[i].oracleaddress);\\r\\n                prices[i] = getLatestPrice(priceFeed);\\r\\n\\r\\n                // norming price\\r\\n                if (MAXIMUM_DECIMALS != _oracleData[i].decimals) {\\r\\n                    prices[i] = prices[i] * 10 ** (MAXIMUM_DECIMALS - _oracleData[i].decimals);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // custom oracle and UniSwap\\r\\n            else {\\r\\n                string memory signature = _oracleData[i].signature;\\r\\n                bytes memory callDatas = _oracleData[i].calldatas;\\r\\n\\r\\n                bytes memory callData;\\r\\n\\r\\n                if (bytes(signature).length == 0) {\\r\\n                    callData = callDatas;\\r\\n                } else {\\r\\n                    callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), callDatas);\\r\\n                }\\r\\n\\r\\n                (bool success, bytes memory data) = _oracleData[i].oracleaddress.call{value:_oracleData[i].values}(callData);\\r\\n                require(success, \\\"Call unsuccessful\\\");\\r\\n\\r\\n                // UniSwap V2 use NDX Custom Oracle call\\r\\n                if (_oracleData[i].oracleType == 1) {\\r\\n                    FixedPoint.uq112x112 memory price = abi.decode(data, (FixedPoint.uq112x112));\\r\\n\\r\\n                    // since this oracle is using token / eth prices we have to norm it to usd prices\\r\\n                    prices[i] = price.mul(getLatestETHUSDPrice()).decode144();\\r\\n                }\\r\\n                else {\\r\\n                    prices[i] = abi.decode(data, (uint));\\r\\n\\r\\n                    // norming price\\r\\n                    if (MAXIMUM_DECIMALS != _oracleData[i].decimals) {\\r\\n                        prices[i] = prices[i] * 10 ** (MAXIMUM_DECIMALS - _oracleData[i].decimals);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // for market cap and sqrt market cap asset types\\r\\n            if (_assetType == 2 || _assetType == 3) {\\r\\n                // get total supply for indexes\\r\\n                uint tokenTotalSupply = IERC20(_oracleData[i].tokenaddress).totalSupply();\\r\\n                uint tokenDecimals = IERC20(_oracleData[i].tokenaddress).decimals();\\r\\n\\r\\n                // norm total supply\\r\\n                if (MAXIMUM_DECIMALS != tokenDecimals) {\\r\\n                    require(tokenDecimals <= 18, \\\"Decimals too high\\\");\\r\\n                    tokenTotalSupply = tokenTotalSupply * 10 ** (MAXIMUM_DECIMALS - tokenDecimals);\\r\\n                }\\r\\n\\r\\n                // index use market cap\\r\\n                if (_assetType == 2) {\\r\\n                    prices[i] = (prices[i].mul(tokenTotalSupply) / UNIT);\\r\\n                }\\r\\n\\r\\n                // sqrt market cap\\r\\n                if (_assetType == 3) {\\r\\n                    // market cap\\r\\n                    prices[i] =prices[i].mul(tokenTotalSupply) / UNIT;\\r\\n                    // sqrt market cap\\r\\n                    prices[i] = sqrt(prices[i]);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // if we have a basket asset we use weights provided\\r\\n            if (_assetType == 1) {\\r\\n                prices[i] = prices[i] * _oracleData[i].weight;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint[] memory sorted = sort(prices);\\r\\n\\r\\n        /// for single assets return median\\r\\n        if (_assetType == 0) {\\r\\n\\r\\n            // uneven so we can take the middle\\r\\n            if (sorted.length % 2 == 1) {\\r\\n                uint sizer = (sorted.length + 1) / 2;\\r\\n\\r\\n                return sorted[sizer-1];\\r\\n            // take average of the 2 most inner numbers\\r\\n            } else {\\r\\n                uint size1 = (sorted.length) / 2;\\r\\n                uint[] memory sortedMin = new uint[](2);\\r\\n\\r\\n                sortedMin[0] = sorted[size1-1];\\r\\n                sortedMin[1] = sorted[size1];\\r\\n\\r\\n                return getAverage(sortedMin);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // else return average for arb assets\\r\\n        return getAverage(sorted);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * ERC 20 Specific Functions\\r\\n    */\\r\\n\\r\\n    /**\\r\\n    * receive function to receive funds\\r\\n    */\\r\\n    receive() external payable {}\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external override view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() external override view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() external override pure returns (uint8) {\\r\\n        return DECIMALS;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev See {IERC20-totalSupply}.\\r\\n    */\\r\\n    function totalSupply() external override view returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev See {IERC20-balanceOf}. Uses burn abstraction for balance updates without gas and universally.\\r\\n    */\\r\\n    function balanceOf(address account) external override view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev See {IERC20-transfer}.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `recipient` cannot be the zero address.\\r\\n    * - the caller must have a balance of at least `amount`.\\r\\n    */\\r\\n    function transfer(address dst, uint256 rawAmount) external override returns (bool) {\\r\\n        uint256 amount = rawAmount;\\r\\n        _transfer(msg.sender, dst, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n    external\\r\\n    override\\r\\n    view\\r\\n    returns (uint256)\\r\\n    {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount)\\r\\n    external\\r\\n    override\\r\\n    returns (bool)\\r\\n    {\\r\\n        _approve(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20};\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address src, address dst, uint256 rawAmount) external override returns (bool) {\\r\\n        address spender = msg.sender;\\r\\n        uint256 spenderAllowance = _allowances[src][spender];\\r\\n        uint256 amount = rawAmount;\\r\\n\\r\\n        if (spender != src && spenderAllowance != uint256(-1)) {\\r\\n            uint256 newAllowance = spenderAllowance.sub(\\r\\n                amount,\\r\\n                    \\\"CONJURE::transferFrom: transfer amount exceeds spender allowance\\\"\\r\\n            );\\r\\n\\r\\n            _allowances[src][spender] = newAllowance;\\r\\n        }\\r\\n\\r\\n        _transfer(src, dst, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * This is internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    )\\r\\n        internal\\r\\n    {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    )\\r\\n        internal\\r\\n    {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        _balances[sender] = _balances[sender].sub(\\r\\n            amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/FixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.7.6;\\r\\n\\r\\n/************************************************************************************************\\r\\nFrom https://github.com/Uniswap/uniswap-lib/blob/master/contracts/libraries/FixedPoint.sol\\r\\n\\r\\nCopied from the github repository at commit hash 9642a0705fdaf36b477354a4167a8cd765250860.\\r\\n\\r\\nModifications:\\r\\n- Removed `sqrt` function\\r\\n\\r\\nSubject to the GPL-3.0 license\\r\\n*************************************************************************************************/\\r\\n\\r\\n\\r\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\r\\nlibrary FixedPoint {\\r\\n    // range: [0, 2**112 - 1]\\r\\n    // resolution: 1 / 2**112\\r\\n    struct uq112x112 {\\r\\n        uint224 _x;\\r\\n    }\\r\\n\\r\\n    // range: [0, 2**144 - 1]\\r\\n    // resolution: 1 / 2**112\\r\\n    struct uq144x112 {\\r\\n        uint _x;\\r\\n    }\\r\\n\\r\\n    uint8 private constant RESOLUTION = 112;\\r\\n    uint private constant Q112 = uint(1) << RESOLUTION;\\r\\n    uint private constant Q224 = Q112 << RESOLUTION;\\r\\n\\r\\n    // encode a uint112 as a UQ112x112\\r\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\r\\n        return uq112x112(uint224(x) << RESOLUTION);\\r\\n    }\\r\\n\\r\\n    // encodes a uint144 as a UQ144x112\\r\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\r\\n        return uq144x112(uint256(x) << RESOLUTION);\\r\\n    }\\r\\n\\r\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\r\\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\\r\\n        require(x != 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\r\\n        return uq112x112(self._x / uint224(x));\\r\\n    }\\r\\n\\r\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\r\\n    // reverts on overflow\\r\\n    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\\r\\n        uint z;\\r\\n        require(\\r\\n            y == 0 || (z = uint(self._x) * y) / y == uint(self._x),\\r\\n            \\\"FixedPoint: MULTIPLICATION_OVERFLOW\\\"\\r\\n        );\\r\\n        return uq144x112(z);\\r\\n    }\\r\\n\\r\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\r\\n    // equivalent to encode(numerator).div(denominator)\\r\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\r\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\r\\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\\r\\n    }\\r\\n\\r\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\r\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\r\\n        return uint112(self._x >> RESOLUTION);\\r\\n    }\\r\\n\\r\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\r\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\r\\n        return uint144(self._x >> RESOLUTION);\\r\\n    }\\r\\n\\r\\n    // take the reciprocal of a UQ112x112\\r\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\r\\n        require(self._x != 0, \\\"FixedPoint: ZERO_RECIPROCAL\\\");\\r\\n        return uq112x112(uint224(Q224 / self._x));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IEtherCollateral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.6;\\r\\n\\r\\n/// @author Conjure Finance Team\\r\\n/// @title IEtherCollateral\\r\\n/// @notice Interface for interacting with the EtherCollateral Contract\\r\\ninterface IEtherCollateral {\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the assetClosed indicator if loan opening is allowed or not\\r\\n     * Called by the Conjure contract if the asset price reaches 0.\\r\\n    */\\r\\n    function setAssetClosed(bool) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gets the assetClosed indicator\\r\\n    */\\r\\n    function getAssetClosed() external view returns (bool);\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AssetTypeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"IndexDivisorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"InverseSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Issued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NumOraclesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_assetType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_collateralContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_deploymentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_factoryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_indexdivisor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inverse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_numoracles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_oracleData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oracleaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oracleType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"signature\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"calldatas\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"values\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethUsdChainLinkOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestETHUSDPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"inverse_\",\"type\":\"bool\"},{\"internalType\":\"uint256[2]\",\"name\":\"divisorAssetType\",\"type\":\"uint256[2]\"},{\"internalType\":\"address[][2]\",\"name\":\"oracleAddresses_\",\"type\":\"address[][2]\"},{\"internalType\":\"uint256[][4]\",\"name\":\"oracleTypesValuesWeightsDecimals\",\"type\":\"uint256[][4]\"},{\"internalType\":\"string[]\",\"name\":\"signatures_\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"callData_\",\"type\":\"bytes[]\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[2]\",\"name\":\"nameSymbol\",\"type\":\"string[2]\"},{\"internalType\":\"address[]\",\"name\":\"conjureAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"factoryAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inverseLowerCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Conjure","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}