{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"temp-contracts/interfaces/ICirculatingMarketCapOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n\\ninterface ICirculatingMarketCapOracle {\\n  function getCirculatingMarketCap(address) external view returns (uint256);\\n\\n  function getCirculatingMarketCaps(address[] calldata) external view returns (uint256[] memory);\\n\\n  function updateCirculatingMarketCaps(address[] calldata) external;\\n}\"\r\n    },\r\n    \"temp-contracts/interfaces/IScoringStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.0;\\n\\n\\ninterface IScoringStrategy {\\n  function getTokenScores(address[] calldata tokens) external view returns (uint256[] memory scores);\\n}\"\r\n    },\r\n    \"temp-contracts/scoring/ScoreByCMCBarbell6.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../interfaces/IScoringStrategy.sol\\\";\\nimport \\\"../interfaces/ICirculatingMarketCapOracle.sol\\\";\\n\\n\\ncontract ScoreByCMCBarbell6 is Ownable, IScoringStrategy {\\n  // Chainlink or other circulating market cap oracle\\n  address public circulatingMarketCapOracle;\\n\\n  constructor(address circulatingMarketCapOracle_) public Ownable() {\\n    circulatingMarketCapOracle = circulatingMarketCapOracle_;\\n  }\\n\\n  function getTokenScores(address[] calldata tokens)\\n    external\\n    view\\n    override\\n    returns (uint256[] memory scores)\\n  {\\n    require(tokens.length >= 6, \\\"Not enough tokens\\\");\\n    uint256[] memory marketCaps = ICirculatingMarketCapOracle(circulatingMarketCapOracle).getCirculatingMarketCaps(tokens);\\n    uint256[] memory positions = sortAndReturnPositions(marketCaps);\\n    uint256 len = positions.length;\\n    scores = new uint256[](len);\\n    scores[positions[0]] = 25;\\n    scores[positions[1]] = 15;\\n    scores[positions[2]] = 10;\\n    scores[positions[3]] = 10;\\n    scores[positions[4]] = 15;\\n    scores[positions[5]] = 25;\\n    for (uint256 i = 6; i < len; i++) {\\n      scores[positions[i]] = 0;\\n    }\\n  }\\n\\n  /**\\n   * @dev Sort a list of market caps and return an array with the index each\\n   * sorted market cap occupied in the unsorted list.\\n   *\\n   * Example: [1, 2, 3] => [2, 1, 0]\\n   *\\n   * Note: This modifies the original list.\\n   */\\n  function sortAndReturnPositions(uint256[] memory marketCaps) internal pure returns(uint256[] memory positions) {\\n    uint256 len = marketCaps.length;\\n    positions = new uint256[](len);\\n    for (uint256 i = 0; i < len; i++) positions[i] = i;\\n    for (uint256 i = 0; i < len; i++) {\\n      uint256 marketCap = marketCaps[i];\\n      uint256 position = positions[i];\\n      uint256 j = i - 1;\\n      while (int(j) >= 0 && marketCaps[j] < marketCap) {\\n        marketCaps[j + 1] = marketCaps[j];\\n        positions[j+1] = positions[j];\\n        j--;\\n      }\\n      marketCaps[j+1] = marketCap;\\n      positions[j+1] = position;\\n    }\\n  }\\n\\n  /**\\n   * @dev Update the address of the circulating market cap oracle.\\n   */\\n  function setCirculatingMarketCapOracle(address circulatingMarketCapOracle_) external onlyOwner {\\n    circulatingMarketCapOracle = circulatingMarketCapOracle_;\\n  }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"circulatingMarketCapOracle_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"circulatingMarketCapOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getTokenScores\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"scores\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"circulatingMarketCapOracle_\",\"type\":\"address\"}],\"name\":\"setCirculatingMarketCapOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ScoreByCMCBarbell6","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002a7efa194482703541da4913dfdc3b2ced1d3691","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}