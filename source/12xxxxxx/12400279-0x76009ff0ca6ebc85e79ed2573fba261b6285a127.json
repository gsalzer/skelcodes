{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\n// import \\\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\\\";\\n// import {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IStakingPoolsVesting.sol\\\";\\nimport \\\"./interfaces/IUniswapV2RouterMinimal.sol\\\";\\nimport \\\"./interfaces/IERC20Minimal.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\ncontract TokenVesting is OwnableUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    struct Schedule {\\n        // the total amount that has been vested\\n        uint256 totalAmount;\\n        // the total amount that has been claimed\\n        uint256 claimedAmount;\\n        uint256 startTime;\\n        uint256 cliffTime;\\n        uint256 endTime;\\n        uint256 cliffWeeks;\\n        // amount of vesting kko staked in the kko staking pool\\n        uint256 totalStakedKko;\\n        // the amount of eth lp tokens owned by the account\\n        uint256 kkoEthLpTokens;\\n        // tracks the amount of kko tokens that are in active LP\\n        uint256 kkoInLp;\\n    }\\n\\n    mapping (address => mapping(uint => Schedule)) public schedules;\\n    mapping (address => uint) public numberOfSchedules;\\n\\n    modifier onlyConfigured() {\\n        require(configured, \\\"Vesting: only configured\\\"); \\n        _;\\n    }\\n\\n    /// @dev total kko locked in the contract\\n    uint256 public valueLocked;\\n    IERC20Minimal private kko;\\n    IERC20Minimal private lpToken;\\n    IUniswapV2RouterMinimal private router;\\n    IStakingPoolsVesting private stakingPools;\\n    bool private configured;\\n    uint256 public kkoPoolsId;\\n    uint256 public kkoLpPoolsId;\\n    event Claim(uint amount, address claimer);\\n\\n    function initialize(address _kko, address _lpToken, address _router) public initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        kko = IERC20Minimal(_kko);\\n        lpToken = IERC20Minimal(_lpToken);\\n        router = IUniswapV2RouterMinimal(_router);\\n        // approve the router to spend kko\\n        require(kko.approve(_router, 2**256-1));\\n        require(lpToken.approve(_router, 2**256-1));\\n    }\\n\\n    fallback() external payable {}\\n\\n    function setStakingPools(address _contract, uint256 _kkoPoolsId, uint256 _kkoLpPoolsId) external onlyOwner {\\n        require(configured == false, \\\"must not be configured\\\");\\n        stakingPools = IStakingPoolsVesting(_contract);\\n        kkoPoolsId = _kkoPoolsId;\\n        kkoLpPoolsId = _kkoLpPoolsId;\\n        configured = true;\\n        // approve max uint256 value\\n        require(kko.approve(_contract, 2**256-1));\\n        require(lpToken.approve(_contract, 2**256-1));\\n    }\\n\\n    /**\\n    * @notice Sets up a vesting schedule for a set user.\\n    * @notice at the moment this only supports staking of the kko staking\\n    * @dev adds a new Schedule to the schedules mapping.\\n    * @param account the account that a vesting schedule is being set up for. Will be able to claim tokens after\\n    *                the cliff period.\\n    * @param amount the amount of tokens being vested for the user.\\n    * @param cliffWeeks the number of weeks that the cliff will be present at.\\n    * @param vestingWeeks the number of weeks the tokens will vest over (linearly)\\n    */\\n    function setVestingSchedule(\\n        address account,\\n        uint256 amount,\\n        uint256 cliffWeeks,\\n        uint256 vestingWeeks\\n    ) public onlyOwner onlyConfigured {\\n        require(\\n            kko.balanceOf(address(this)).sub(valueLocked) >= amount,\\n            \\\"Vesting: amount > tokens leftover\\\"\\n        );\\n        require(\\n            vestingWeeks >= cliffWeeks,\\n            \\\"Vesting: cliff after vesting period\\\"\\n        );\\n        uint256 currentNumSchedules = numberOfSchedules[account];\\n        schedules[account][currentNumSchedules] = Schedule(\\n            amount,\\n            0,\\n            block.timestamp,\\n            block.timestamp.add(cliffWeeks * 1 weeks),\\n            block.timestamp.add(vestingWeeks * 1 weeks),\\n            cliffWeeks,\\n            0, // amount staked in kko pool\\n            0, // amount of lp tokens\\n            0 // amount of kko lp'd\\n        );\\n        numberOfSchedules[account] = currentNumSchedules + 1;\\n        valueLocked = valueLocked.add(amount);\\n    }\\n\\n    /// @dev allows staking vesting KKO tokens in the kko single staking pool\\n    function stakeSingle(uint256 scheduleNumber, uint256 _amountToStake) public onlyConfigured {\\n        Schedule storage schedule = schedules[msg.sender][scheduleNumber];\\n        require(\\n            // ensure that the total amount of staked kko including the amount we are staking and lp'ing\\n            // is less than the total available amount\\n            schedule.totalStakedKko.add(_amountToStake).add(schedule.kkoInLp) < schedule.totalAmount.sub(schedule.claimedAmount),\\n            \\\"Vesting: total staked must be less than available amount (totalAmount - claimedAmount)\\\"\\n        );\\n        schedule.totalStakedKko = schedule.totalStakedKko.add(_amountToStake);\\n        require(\\n            stakingPools.depositVesting(\\n                msg.sender,\\n                kkoPoolsId,\\n                _amountToStake\\n            ),\\n            \\\"Vesting: depositVesting failed\\\"\\n        );\\n    }\\n\\n    function stakePool2(\\n        uint256 scheduleNumber, \\n        uint256 _amountKko, \\n        uint256 _amountEther,\\n        uint256 _amountTokenMin,\\n        uint256 _amountETHMin,\\n        uint _deadline\\n    ) public payable onlyConfigured {\\n        Schedule storage schedule = schedules[msg.sender][scheduleNumber];\\n        require(\\n            schedule.totalStakedKko.add(_amountKko).add(schedule.kkoInLp) < schedule.totalAmount.sub(schedule.claimedAmount),\\n            \\\"Vesting: total staked must be less than available amount (totalAmount - claimedAmount)\\\"\\n        );\\n        require(msg.value == _amountEther, \\\"Vesting: sending not supplying enough ether\\\");\\n        schedule.kkoInLp = schedule.kkoInLp.add(_amountKko);\\n        // amountToken = The amount of token sent to the pool.\\n        // amountETH = The amount of ETH converted to WETH and sent to the pool.\\n        // liquidity = The amount of liquidity tokens minted.\\n        (uint amountToken, uint amountETH, uint liquidity) = router.addLiquidityETH{value: msg.value}(\\n            address(kko),\\n            _amountKko, // the amount of token to add as liquidity if the WETH/token price is <= msg.value/amountTokenDesired (token depreciates).\\n            _amountTokenMin, // Bounds the extent to which the WETH/token price can go up before the transaction reverts. Must be <= amountTokenDesired.\\n            _amountETHMin, // Bounds the extent to which the token/WETH price can go up before the transaction reverts. Must be <= msg.value.\\n            address(this),\\n            _deadline\\n        );\\n        // if we didnt add the fully amount requested, reduce the amount staked\\n        if (amountToken < _amountKko) {\\n            schedule.kkoInLp = schedule.kkoInLp.sub(amountToken);\\n        }\\n        schedule.kkoEthLpTokens = schedule.kkoEthLpTokens.add(liquidity);\\n        require(\\n            stakingPools.depositVesting(\\n                msg.sender,\\n                kkoLpPoolsId,\\n                liquidity\\n            ),\\n            \\\"Vesting: depositVesting failed\\\"\\n        );\\n        if (amountETH < _amountEther) {\\n            msg.sender.transfer(_amountEther.sub(amountETH));\\n        }\\n    }\\n\\n\\n    function exitStakePool2(\\n        uint256 scheduleNumber,\\n        uint256 _amountLpTokens,\\n        uint256 _amountTokenMin,\\n        uint256 _amountETHMin,\\n        uint _deadline    \\n    ) public payable onlyConfigured {\\n        Schedule storage schedule = schedules[msg.sender][scheduleNumber];\\n        require(\\n            _amountLpTokens <= schedule.kkoEthLpTokens,\\n            \\\"Vesting: insufficient lp token balance\\\"\\n        );\\n        (bool ok,) = stakingPools.withdrawOrClaimOrExitVesting(\\n            msg.sender,\\n            kkoLpPoolsId,\\n            0,\\n            true,\\n            true\\n        );\\n        require(ok, \\\"Vesting exitStakePool2 failed\\\");\\n        // amountToken is the amount of tokens received\\n        // amountETH is the maount of ETH received\\n        (uint256 amountToken, uint256 amountETH) = router.removeLiquidityETH(\\n            address(kko),\\n            schedule.kkoEthLpTokens,\\n            _amountTokenMin,\\n            _amountETHMin,\\n            address(this),\\n            _deadline\\n        );\\n\\n        // due to lp fees they may be withdrawing more kko than they originally deposited\\n        // in this case we will send the difference directly to their wallet\\n        if (amountToken > schedule.kkoInLp) {\\n            uint256 difference = amountToken.sub(schedule.kkoInLp);\\n            schedule.kkoInLp = 0;\\n            require(kko.transfer(msg.sender, difference));\\n        } else {\\n            schedule.kkoInLp = schedule.kkoInLp.sub(amountToken);\\n        }\\n        msg.sender.transfer(amountETH);\\n    }\\n\\n    /// @dev used to exit from the single staking pool\\n    /// @dev this does not transfer the unstaked tokens to the msg.sender, but rather this contract\\n    function exitStakeSingle(uint256 scheduleNumber) public onlyConfigured {\\n        Schedule storage schedule = schedules[msg.sender][scheduleNumber];\\n        (bool ok,) = stakingPools.withdrawOrClaimOrExitVesting(\\n            msg.sender,\\n            kkoPoolsId,\\n            0, // we are exiting the pool so withdrawing all kko\\n            true,\\n            true\\n        );\\n        require(ok, \\\"Vesting: exitStakeSingle failed\\\");\\n        uint256 totalStaked = schedule.totalStakedKko;\\n        // we're exiting this pool so set to 0\\n        schedule.totalStakedKko = schedule.totalStakedKko.sub(totalStaked);\\n    }\\n\\n    /// @dev allows claiming staking rewards without exiting the staking pool\\n    function claimStakingRewards(uint256 _poolId) public onlyConfigured {\\n        require(_poolId == kkoPoolsId || _poolId == kkoLpPoolsId);\\n        (bool ok, uint256 reward) = stakingPools.withdrawOrClaimOrExitVesting(\\n            msg.sender,\\n            _poolId,\\n            0, // we are solely claiming rewards\\n            false,\\n            false\\n        );\\n        require(ok);\\n        require(kko.transfer(msg.sender, reward));\\n    }\\n\\n    /**\\n    * @notice allows users to claim vested tokens if the cliff time has passed.\\n    * @notice needs to handle claiming from kko and kkoeth-lp staking\\n    */\\n    function claim(uint256 scheduleNumber) public onlyConfigured {\\n        Schedule storage schedule = schedules[msg.sender][scheduleNumber];\\n        require(\\n            schedule.cliffTime <= block.timestamp,\\n            \\\"Vesting: cliffTime not reached\\\"\\n        );\\n        require(schedule.totalAmount > 0, \\\"Vesting: No claimable tokens\\\");\\n\\n        // Get the amount to be distributed\\n        uint amount = calcDistribution(schedule.totalAmount, block.timestamp, schedule.startTime, schedule.endTime);\\n        \\n        // Cap the amount at the total amount\\n        amount = amount > schedule.totalAmount ? schedule.totalAmount : amount;\\n        uint amountToTransfer = amount.sub(schedule.claimedAmount);\\n        // set the previous amount claimed \\n        uint prevClaimed = schedule.claimedAmount;\\n        schedule.claimedAmount = amount; // set new claimed amount based off the curve\\n        // if the amount that is unstaked is smaller than the amount being transffered\\n        // destake first\\n        require(\\n            // amountToTransfer < (schedule.claimedAmount - (schedule.totalStakedKkoPool2 + schedule.totalStakedKkoSingle)),\\n            amountToTransfer <= (schedule.totalAmount - prevClaimed),\\n            \\\"Vesting: amount unstaked too small for claim please destake\\\"\\n        );\\n\\n        require(kko.transfer(msg.sender, amountToTransfer));\\n        // as it doesnt factor in staking rewards\\n        emit Claim(amount, msg.sender);\\n    }\\n\\n    /**\\n    * @notice returns the total amount and total claimed amount of a users vesting schedule.\\n    * @param account the user to retrieve the vesting schedule for.\\n    */\\n    function getVesting(address account, uint256 scheduleId)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        Schedule memory schedule = schedules[account][scheduleId];\\n        return (schedule.totalAmount, schedule.claimedAmount);\\n    }\\n\\n    /**\\n    * @notice calculates the amount of tokens to distribute to an account at any instance in time, based off some\\n    *         total claimable amount.\\n    * @param amount the total outstanding amount to be claimed for this vesting schedule.\\n    * @param currentTime the current timestamp.\\n    * @param startTime the timestamp this vesting schedule started.\\n    * @param endTime the timestamp this vesting schedule ends.\\n    */\\n    function calcDistribution(uint amount, uint currentTime, uint startTime, uint endTime) public pure returns(uint256) {\\n        return amount.mul(currentTime.sub(startTime)).div(endTime.sub(startTime));\\n    }\\n\\n    /* \\n    * @notice this doesn't handle withdrawing from staking pools\\n    * @notice Withdraws KKO tokens from the contract.\\n    * @dev blocks withdrawing locked tokens.\\n    */\\n    function withdraw(uint amount) public onlyOwner {\\n        require(\\n            kko.balanceOf(address(this)).sub(valueLocked) >= amount,\\n            \\\"Vesting: amount > tokens leftover\\\"\\n        );\\n        require(kko.transfer(msg.sender, amount));\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakingPoolsVesting.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\n/// @title interfaces used by the vesting contract\\n\\ninterface IStakingPoolsVesting {\\n    function depositVesting(address _account, uint256 _poolId, uint256 _depositAmount) external returns (bool);\\n    function withdrawOrClaimOrExitVesting(address _account, uint256 _poolId, uint256 _withdrawAmount, bool _doWithdraw, bool _doExit) external returns (bool, uint256);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2RouterMinimal.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ninterface IUniswapV2RouterMinimal {\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20Minimal.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.0;\\n\\ninterface IERC20Minimal {\\n    function transfer(address recipient, uint256 amount) external returns (bool);    \\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function balanceOf(address account) external view returns (uint256);\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"calcDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scheduleNumber\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"claimStakingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scheduleNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountLpTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"exitStakePool2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scheduleNumber\",\"type\":\"uint256\"}],\"name\":\"exitStakeSingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scheduleId\",\"type\":\"uint256\"}],\"name\":\"getVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kko\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kkoLpPoolsId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kkoPoolsId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numberOfSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"schedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffWeeks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStakedKko\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kkoEthLpTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"kkoInLp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_kkoPoolsId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_kkoLpPoolsId\",\"type\":\"uint256\"}],\"name\":\"setStakingPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffWeeks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingWeeks\",\"type\":\"uint256\"}],\"name\":\"setVestingSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scheduleNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountKko\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountEther\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"stakePool2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scheduleNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToStake\",\"type\":\"uint256\"}],\"name\":\"stakeSingle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valueLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenVesting","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}