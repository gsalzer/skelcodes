{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/ExchangeContract.sol\r\n\r\npragma solidity ^0.5.0;\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () public{\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract NFTBANK721 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n    function balanceOf(address owner) public view returns (uint256 balance);    \r\n    function tokenTransfer(address from, address to, uint256 tokenId) public;\r\n    function _mint(address to, uint256 tokenId, string memory uri) public;\r\n    function setApprovalForAll(address from, address to, bool approved, uint256 tokenId) public ;\r\n    function _burn(uint256 tokenId, address from, address admin) public;\r\n    function _transferOwnership(address newOwner) public;\r\n}\r\ncontract NFTBANK1155{\r\n   \r\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n    event URI(string _value, uint256 indexed _id);\r\n\r\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value) public;\r\n\r\n    function balanceOf(address _owner, uint256 _id) public view returns (uint256);\r\n\r\n    function setApprovalForAll(address from, address _operator, bool _approved) public;\r\n    function isApprovedForAll(address _owner, address _operator) public view returns (bool);\r\n    function mint(address from, uint256 _id, uint256 _supply, string memory _uri) public;\r\n    function burn(address from, address admin, uint256 _id, uint256 _value) public ;\r\n    function _transferOwnership(address newOwner) public;\r\n}\r\ncontract BEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\ncontract Sale is Ownable{\r\n    event CancelOrder(address indexed from, uint256 indexed tokenId);\r\n    event ChangePrice(address indexed from, uint256 indexed tokenId, uint256 indexed value);\r\n    event OrderPlace(address indexed from, uint256 indexed tokenId, uint256 indexed value);\r\n    event FeeDetails(uint256 indexed owner, uint256 indexed admin, uint256 indexed admin2);\r\n    event Calcu(uint256 indexed owner, uint256 indexed admin, uint256 indexed admin2);\r\n    event FeeDiv(uint256 indexed owner, uint256 indexed admin, uint256 indexed admin2);\r\n    using SafeMath for uint256;\r\n    struct Order{\r\n        uint256 tokenId;\r\n        uint256 price;\r\n    }\r\n    uint256 public serviceValue;\r\n    mapping (address => mapping (uint256 => Order)) public order_place;\r\n    mapping (uint256 => mapping (address => bool)) public checkOrder;\r\n    mapping (uint256 =>  bool) public _operatorApprovals;\r\n    mapping (uint256 => address) public _creator;\r\n    mapping (uint256 => uint256) public _royal; \r\n    mapping (uint256 => mapping(address => uint256)) public balances;\r\n    constructor(uint256 _serviceValue) public{\r\n        serviceValue = _serviceValue * 2;\r\n    }\r\n    function _orderPlace(address from, uint256 tokenId, uint256 _price) internal{\r\n        require( balances[tokenId][from] > 0, \"Is Not a Owner\");\r\n        Order memory order;\r\n        order.tokenId = tokenId;\r\n        order.price = _price;\r\n        order_place[from][tokenId] = order;\r\n        checkOrder[tokenId][from] = true;\r\n        emit OrderPlace(from, tokenId, _price);\r\n    }\r\n    function _cancelOrder(address from, uint256 tokenId) internal{\r\n        require(balances[tokenId][msg.sender] > 0, \"Is Not a Owner\");\r\n        delete order_place[msg.sender][tokenId];\r\n        checkOrder[tokenId][from] = false;\r\n        emit CancelOrder(msg.sender, tokenId);\r\n    }\r\n    function _changePrice(uint256 value, uint256 tokenId) internal{\r\n        require( balances[tokenId][msg.sender] > 0, \"Is Not a Owner\");\r\n        require( value < order_place[msg.sender][tokenId].price);\r\n        order_place[msg.sender][tokenId].price = value;\r\n        emit ChangePrice(msg.sender, tokenId, value);\r\n    }\r\n    function _acceptBId(address token,address from, address admin, uint256 amount, uint256 tokenId) internal{\r\n        require(_operatorApprovals[tokenId], \"Token Not approved\");\r\n        require(balances[tokenId][msg.sender] > 0, \"Is Not a Owner\");\r\n        (uint256 _adminfee, uint256 roy, uint256 netamount) = calc(amount, _royal[tokenId], serviceValue);\r\n        BEP20 t = BEP20(token);\r\n        t.transferFrom(from,admin,_adminfee);\r\n        t.transferFrom(from,_creator[tokenId],roy);\r\n        t.transferFrom(from,msg.sender,netamount);\r\n    }\r\n    function checkTokenApproval(uint256 tokenId, address from) internal view returns (bool result){\r\n        require(checkOrder[tokenId][from], \"This Token Not for Sale\");\r\n        require(_operatorApprovals[tokenId], \"Token Not approved\");\r\n        return true;\r\n    }\r\n    function _saleToken(address payable from, address payable admin,uint256 tokenId, uint256 amount) internal{\r\n        require(amount> order_place[from][tokenId].price , \"Insufficent found\");\r\n        require(checkTokenApproval(tokenId, from));\r\n        address payable create = address(uint160(_creator[tokenId]));\r\n        (uint256 _adminfee, uint256 roy, uint256 netamount) = calc(amount, _royal[tokenId], serviceValue);\r\n        admin.transfer(_adminfee);\r\n        create.transfer(roy);\r\n        from.transfer(netamount);\r\n    }\r\n    function calc(uint256 amount, uint256 royal, uint256 _serviceValue) internal pure returns(uint256, uint256, uint256){\r\n        uint256 fee = percent(amount, _serviceValue.div(10));\r\n        uint256 ser=fee.div(2);\r\n        uint256 or_am = amount.sub(ser);\r\n        uint256 roy = percent(or_am, royal);\r\n        uint256 netamount = or_am.sub(ser.add(roy));\r\n        return (fee, roy, netamount);\r\n    }\r\n\r\n    function percent(uint256 value1, uint256 value2) internal pure returns(uint256){\r\n        uint256 result = value1.mul(value2).div(100);\r\n        return(result);\r\n    }\r\n    function setServiceValue(uint256 _serviceValue) internal{\r\n        serviceValue = _serviceValue.mul(2);\r\n    }\r\n\r\n\r\n}\r\ncontract ExchangeContract is Sale{\r\n    uint256 public tokenCount;\r\n    constructor(uint256 _serviceValue) Sale(_serviceValue) public{\r\n        \r\n    }\r\n    function serviceFunction(uint256 _serviceValue) public onlyOwner{\r\n        setServiceValue(_serviceValue);\r\n    }\r\n\r\n    function transferOwnershipForColle(address newOwner, address token721, address token1155) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        NFTBANK721 tok= NFTBANK721(token721);\r\n        NFTBANK1155 tok1155= NFTBANK1155(token1155);\r\n        tok._transferOwnership(newOwner);\r\n        tok1155._transferOwnership(newOwner);\r\n    }\r\n    function mint(address token ,string memory tokenuri, uint256 value, uint256 tokenId, uint256 royal, uint256 _type, uint256 supply) public{\r\n       require(_creator[tokenId] == address(0), \"Token Already Minted\");\r\n       if(_type == 721){\r\n           NFTBANK721 tok= NFTBANK721(token);\r\n           _creator[tokenId]=msg.sender;\r\n           _royal[tokenId]=royal;\r\n           tok._mint(msg.sender, tokenId, tokenuri);\r\n           balances[tokenId][msg.sender] = supply;\r\n           if(value != 0){\r\n                _orderPlace(msg.sender, tokenId, value);\r\n            }\r\n        }\r\n        else{\r\n            NFTBANK1155 tok = NFTBANK1155(token);\r\n            tok.mint(msg.sender, tokenId, supply, tokenuri);\r\n            _creator[tokenId]=msg.sender;\r\n            _royal[tokenId]=royal;\r\n            balances[tokenId][msg.sender] = supply;\r\n            if(value != 0){\r\n                _orderPlace(msg.sender, tokenId, value);\r\n            }\r\n       }\r\n       tokenCount++;\r\n       \r\n    }\r\n    function setApprovalForAll(address token, uint256 _type, address to, bool approved, uint256 tokenId) public {\r\n        _operatorApprovals[tokenId] = true;\r\n        if(_type == 721){\r\n            NFTBANK721 tok= NFTBANK721(token);\r\n            tok.setApprovalForAll(msg.sender, to,approved,tokenId);\r\n        }\r\n        else{\r\n            NFTBANK1155 tok = NFTBANK1155(token);\r\n            tok.setApprovalForAll(msg.sender, to, approved);\r\n        }\r\n    }\r\n    function saleToken(address payable from, address payable admin,uint256 tokenId, uint256 amount, address token, uint256 _type, uint256 NOFToken) public payable{\r\n       _saleToken(from, admin, tokenId, amount);\r\n       if(_type == 721){\r\n           NFTBANK721 tok= NFTBANK721(token);\r\n            if(checkOrder[tokenId][from]==true){\r\n                delete order_place[from][tokenId];\r\n                checkOrder[tokenId][from] = false;\r\n            }\r\n           tok.tokenTransfer(from, msg.sender, tokenId);\r\n           balances[tokenId][from] = balances[tokenId][from] - NOFToken;\r\n           balances[tokenId][msg.sender] = NOFToken;\r\n       }\r\n       else{\r\n            NFTBANK1155 tok= NFTBANK1155(token);\r\n            tok.safeTransferFrom(from, msg.sender, tokenId, NOFToken);\r\n            balances[tokenId][from] = balances[tokenId][from] - NOFToken;\r\n            balances[tokenId][msg.sender] = balances[tokenId][msg.sender] + NOFToken;\r\n            if(checkOrder[tokenId][from] == true){\r\n                if(balances[tokenId][from] == 0){\r\n                    delete order_place[from][tokenId];\r\n                    checkOrder[tokenId][from] = false;\r\n                }\r\n            }\r\n            \r\n       }\r\n        \r\n\r\n    }\r\n    function acceptBId(address bittoken,address from, address admin, uint256 amount, uint256 tokenId, address token, uint256 _type, uint256 NOFToken) public{\r\n        _acceptBId(bittoken, from, admin, amount, tokenId);\r\n        if(_type == 721){\r\n           NFTBANK721 tok= NFTBANK721(token);\r\n           if(checkOrder[tokenId][msg.sender]==true){\r\n                delete order_place[msg.sender][tokenId];\r\n                checkOrder[tokenId][msg.sender] = false;\r\n           }\r\n           tok.tokenTransfer(msg.sender, from, tokenId);\r\n           balances[tokenId][msg.sender] = balances[tokenId][msg.sender] - NOFToken;\r\n           balances[tokenId][from] = NOFToken;\r\n        }\r\n        else{\r\n            NFTBANK1155 tok= NFTBANK1155(token);\r\n            tok.safeTransferFrom(msg.sender, from, tokenId, NOFToken);\r\n            balances[tokenId][from] = balances[tokenId][from] + NOFToken;\r\n            balances[tokenId][msg.sender] = balances[tokenId][msg.sender] - NOFToken;\r\n            if(checkOrder[tokenId][msg.sender] == true){\r\n                if(balances[tokenId][msg.sender] == 0){   \r\n                    delete order_place[msg.sender][tokenId];\r\n                    checkOrder[tokenId][msg.sender] = false;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n    function orderPlace(uint256 tokenId, uint256 _price) public{\r\n        _orderPlace(msg.sender, tokenId, _price);\r\n    }\r\n    function cancelOrder(uint256 tokenId) public{\r\n        _cancelOrder(msg.sender, tokenId);\r\n    }\r\n    function changePrice(uint256 value, uint256 tokenId) public{\r\n        _changePrice(value, tokenId);\r\n    }\r\n\r\n    function burn(address admin, uint256 tokenId, address token, uint256 _type, uint256 NOFToken ) public{\r\n        require( balances[tokenId][msg.sender] >= NOFToken || msg.sender == admin, \"Your Not a Token Owner or insuficient Token Balance\");\r\n        if(_type == 721){\r\n            NFTBANK721 tok= NFTBANK721(token);\r\n            tok._burn(tokenId, msg.sender, admin);\r\n            balances[tokenId][msg.sender] = balances[tokenId][msg.sender].sub(NOFToken);\r\n            if(checkOrder[tokenId][msg.sender]==true){\r\n                delete order_place[msg.sender][tokenId];\r\n                checkOrder[tokenId][msg.sender] = false;\r\n            }\r\n            delete _creator[tokenId];\r\n            delete _royal[tokenId];\r\n        }\r\n        else{\r\n            NFTBANK1155 tok= NFTBANK1155(token);\r\n            tok.burn(msg.sender, admin, tokenId, NOFToken);\r\n            balances[tokenId][msg.sender] = balances[tokenId][msg.sender].sub(NOFToken);\r\n            if(balances[tokenId][msg.sender] == NOFToken){\r\n                if(checkOrder[tokenId][msg.sender]==true){\r\n                    delete order_place[msg.sender][tokenId];\r\n                    checkOrder[tokenId][msg.sender] = false;\r\n                }\r\n            }\r\n\r\n        }\r\n        tokenCount--;\r\n\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serviceValue\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"owner\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"admin\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"admin2\",\"type\":\"uint256\"}],\"name\":\"Calcu\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"CancelOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ChangePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"owner\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"admin\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"admin2\",\"type\":\"uint256\"}],\"name\":\"FeeDetails\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"owner\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"admin\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"admin2\",\"type\":\"uint256\"}],\"name\":\"FeeDiv\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OrderPlace\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_operatorApprovals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_royal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"bittoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NOFToken\",\"type\":\"uint256\"}],\"name\":\"acceptBId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NOFToken\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenuri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"orderPlace\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"order_place\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NOFToken\",\"type\":\"uint256\"}],\"name\":\"saleToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serviceValue\",\"type\":\"uint256\"}],\"name\":\"serviceFunction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"serviceValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_type\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token721\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1155\",\"type\":\"address\"}],\"name\":\"transferOwnershipForColle\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ExchangeContract","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000014","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://af6ef8212c5be0a4a7c06b250eb6f59ee21420923d860f8682248a9cd4ce7a98"}]}