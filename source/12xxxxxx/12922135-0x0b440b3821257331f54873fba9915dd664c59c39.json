{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\ninterface Receiver {\r\n\tfunction onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns (bytes4);\r\n}\r\n\r\ncontract Metadata {\r\n\tstring public name = \"Yat NFT (preview)\";\r\n\tstring public symbol = \"Yats\";\r\n\tfunction contractURI() external pure returns (string memory) {\r\n\t\treturn \"\";\r\n\t}\r\n\tfunction baseTokenURI() public pure returns (string memory) {\r\n\t\treturn \"https://a.yat.fyi/nft_transfers/metadata/\";\r\n\t}\r\n\tfunction tokenURI(uint256 _tokenId) external pure returns (string memory) {\r\n\t\tbytes memory _base = bytes(baseTokenURI());\r\n\t\tuint256 _digits = 1;\r\n\t\tuint256 _n = _tokenId;\r\n\t\twhile (_n > 9) {\r\n\t\t\t_n /= 10;\r\n\t\t\t_digits++;\r\n\t\t}\r\n\t\tbytes memory _uri = new bytes(_base.length + _digits);\r\n\t\tfor (uint256 i = 0; i < _uri.length; i++) {\r\n\t\t\tif (i < _base.length) {\r\n\t\t\t\t_uri[i] = _base[i];\r\n\t\t\t} else {\r\n\t\t\t\tuint256 _dec = (_tokenId / (10**(_uri.length - i - 1))) % 10;\r\n\t\t\t\t_uri[i] = bytes1(uint8(_dec) + 48);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn string(_uri);\r\n\t}\r\n}\r\n\r\ncontract YAT {\r\n\r\n\taddress constant private USE_GLOBAL_SIGNER = address(type(uint160).max);\r\n\r\n\tstruct User {\r\n\t\tuint256 balance;\r\n\t\tmapping(uint256 => uint256) list;\r\n\t\tmapping(address => bool) approved;\r\n\t\tmapping(uint256 => uint256) indexOf;\r\n\t}\r\n\r\n\tstruct Token {\r\n\t\taddress owner;\r\n\t\taddress cosigner;\r\n\t\taddress approved;\r\n\t\taddress pointsTo;\r\n\t\taddress resolvesTo;\r\n\t\tstring token;\r\n\t\tuint256 records;\r\n\t\tmapping(uint256 => bytes32) keys;\r\n\t\tmapping(bytes32 => string) values;\r\n\t\tmapping(bytes32 => uint256) indexOf;\r\n\t\tuint256 nonce;\r\n\t}\r\n\r\n\tstruct Info {\r\n\t\tuint256 totalSupply;\r\n\t\tmapping(uint256 => Token) list;\r\n\t\tmapping(bytes32 => uint256) idOf;\r\n\t\tmapping(bytes32 => string) dictionary;\r\n\t\tmapping(address => string) resolve;\r\n\t\tmapping(address => User) users;\r\n\t\tMetadata metadata;\r\n\t\taddress owner;\r\n\t\taddress signer;\r\n\t}\r\n\tInfo private info;\r\n\r\n\tmapping(bytes4 => bool) public supportsInterface;\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\tevent Transfer(address indexed from, address indexed to, bytes32 indexed tokenHash, string token);\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n\tevent Mint(bytes32 indexed tokenHash, uint256 indexed tokenId, address indexed account, string token);\r\n\tevent Burn(bytes32 indexed tokenHash, uint256 indexed tokenId, address indexed account, string token);\r\n\tevent RecordUpdated(bytes32 indexed tokenHash, address indexed manager, bytes32 indexed keyHash, string token, string key, string value);\r\n\tevent RecordAdded(bytes32 indexed tokenHash, address indexed manager, bytes32 indexed keyHash, string token, string key);\r\n\tevent RecordDeleted(bytes32 indexed tokenHash, address indexed manager, bytes32 indexed keyHash, string token, string key);\r\n\r\n\r\n\tmodifier _onlyOwner() {\r\n\t\trequire(msg.sender == owner());\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier _onlyTokenOwner(uint256 _tokenId) {\r\n\t\trequire(msg.sender == ownerOf(_tokenId));\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier _onlyTokenOwnerOrCosigner(uint256 _tokenId) {\r\n\t\trequire(msg.sender == ownerOf(_tokenId) || msg.sender == cosignerOf(_tokenId));\r\n\t\t_;\r\n\t}\r\n\r\n\r\n\tconstructor(address _signer) {\r\n\t\tinfo.metadata = new Metadata();\r\n\t\tinfo.owner = msg.sender;\r\n\t\tinfo.signer = _signer;\r\n\t\tsupportsInterface[0x01ffc9a7] = true; // ERC-165\r\n\t\tsupportsInterface[0x80ac58cd] = true; // ERC-721\r\n\t\tsupportsInterface[0x5b5e139f] = true; // Metadata\r\n\t\tsupportsInterface[0x780e9d63] = true; // Enumerable\r\n\t}\r\n\r\n\tfunction setOwner(address _owner) external _onlyOwner {\r\n\t\tinfo.owner = _owner;\r\n\t}\r\n\r\n\tfunction setSigner(address _signer) external _onlyOwner {\r\n\t\tinfo.signer = _signer;\r\n\t}\r\n\r\n\tfunction setMetadata(Metadata _metadata) external _onlyOwner {\r\n\t\tinfo.metadata = _metadata;\r\n\t}\r\n\r\n\r\n\tfunction mint(string calldata _token, address _account, uint256 _expiry, bytes memory _signature) external {\r\n\t\trequire(block.timestamp < _expiry);\r\n\t\trequire(_verifyMint(_token, _account, _expiry, _signature));\r\n\t\t_mint(_token, _account);\r\n\t}\r\n\r\n\t/**\r\n     *  \"Soft-burns\" the NFT by transferring the token to the contract address.\r\n    **/\r\n\tfunction burn(uint256 _tokenId) external _onlyTokenOwner(_tokenId) {\r\n\t\t_transfer(msg.sender, address(this), _tokenId);\r\n\t\temit Burn(hashOf(tokenOf(_tokenId)), _tokenId, msg.sender, tokenOf(_tokenId));\r\n\t}\r\n\t\r\n\tfunction setCosigner(address _cosigner, uint256 _tokenId) public _onlyTokenOwner(_tokenId) {\r\n\t\tinfo.list[_tokenId].cosigner = _cosigner;\r\n\t}\r\n\r\n\tfunction resetCosigner(uint256 _tokenId) external {\r\n\t\tsetCosigner(USE_GLOBAL_SIGNER, _tokenId);\r\n\t}\r\n\r\n\tfunction revokeCosigner(uint256 _tokenId) external {\r\n\t\tsetCosigner(address(0x0), _tokenId);\r\n\t}\r\n\t\r\n\tfunction setPointsTo(address _pointsTo, uint256 _tokenId) public _onlyTokenOwner(_tokenId) {\r\n\t\tinfo.list[_tokenId].pointsTo = _pointsTo;\r\n\t}\r\n\t\r\n\tfunction resolveTo(address _resolvesTo, uint256 _tokenId) public _onlyTokenOwner(_tokenId) {\r\n\t\t_updateResolvesTo(_resolvesTo, _tokenId);\r\n\t}\r\n\r\n\tfunction unresolve(uint256 _tokenId) external {\r\n\t\tresolveTo(address(0x0), _tokenId);\r\n\t}\r\n\r\n\tfunction updateRecord(uint256 _tokenId, string memory _key, string memory _value, bytes memory _signature) external {\r\n\t\trequire(_verifyRecordUpdate(_tokenId, _key, _value, info.list[_tokenId].nonce++, _signature));\r\n\t\t_updateRecord(_tokenId, _key, _value);\r\n\t}\r\n\r\n\tfunction updateRecord(uint256 _tokenId, string memory _key, string memory _value) public _onlyTokenOwnerOrCosigner(_tokenId) {\r\n\t\t_updateRecord(_tokenId, _key, _value);\r\n\t}\r\n\r\n\tfunction deleteRecord(uint256 _tokenId, string memory _key) external {\r\n\t\tupdateRecord(_tokenId, _key, \"\");\r\n\t}\r\n\r\n\tfunction deleteAllRecords(uint256 _tokenId) external _onlyTokenOwnerOrCosigner(_tokenId) {\r\n\t\t_deleteAllRecords(_tokenId);\r\n\t}\r\n\t\r\n\tfunction approve(address _approved, uint256 _tokenId) external _onlyTokenOwner(_tokenId) {\r\n\t\tinfo.list[_tokenId].approved = _approved;\r\n\t\temit Approval(msg.sender, _approved, _tokenId);\r\n\t}\r\n\r\n\tfunction setApprovalForAll(address _operator, bool _approved) external {\r\n\t\tinfo.users[msg.sender].approved[_operator] = _approved;\r\n\t\temit ApprovalForAll(msg.sender, _operator, _approved);\r\n\t}\r\n\r\n\tfunction transferFrom(address _from, address _to, uint256 _tokenId) external {\r\n\t\t_transfer(_from, _to, _tokenId);\r\n\t}\r\n\r\n\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId) external {\r\n\t\tsafeTransferFrom(_from, _to, _tokenId, \"\");\r\n\t}\r\n\r\n\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) public {\r\n\t\t_transfer(_from, _to, _tokenId);\r\n\t\tuint32 _size;\r\n\t\tassembly {\r\n\t\t\t_size := extcodesize(_to)\r\n\t\t}\r\n\t\tif (_size > 0) {\r\n\t\t\trequire(Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data) == 0x150b7a02);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction name() external view returns (string memory) {\r\n\t\treturn info.metadata.name();\r\n\t}\r\n\r\n\tfunction symbol() external view returns (string memory) {\r\n\t\treturn info.metadata.symbol();\r\n\t}\r\n\r\n\tfunction contractURI() external view returns (string memory) {\r\n\t\treturn info.metadata.contractURI();\r\n\t}\r\n\r\n\tfunction baseTokenURI() external view returns (string memory) {\r\n\t\treturn info.metadata.baseTokenURI();\r\n\t}\r\n\r\n\tfunction tokenURI(uint256 _tokenId) external view returns (string memory) {\r\n\t\treturn info.metadata.tokenURI(_tokenId);\r\n\t}\r\n\r\n\tfunction owner() public view returns (address) {\r\n\t\treturn info.owner;\r\n\t}\r\n\r\n\tfunction signer() public view returns (address) {\r\n\t\treturn info.signer;\r\n\t}\r\n\r\n\tfunction totalSupply() public view returns (uint256) {\r\n\t\treturn info.totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address _owner) public view returns (uint256) {\r\n\t\treturn info.users[_owner].balance;\r\n\t}\r\n\r\n\tfunction resolve(address _account) public view returns (string memory) {\r\n\t\treturn info.resolve[_account];\r\n\t}\r\n\r\n\tfunction reverseResolve(string memory _token) public view returns (address) {\r\n\t\treturn info.list[idOf(_token)].resolvesTo;\r\n\t}\r\n\r\n\tfunction hashOf(string memory _token) public pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(_token));\r\n\t}\r\n\r\n\tfunction idOf(string memory _token) public view returns (uint256) {\r\n\t\tbytes32 _hash = hashOf(_token);\r\n\t\trequire(info.idOf[_hash] != 0);\r\n\t\treturn info.idOf[_hash] - 1;\r\n\t}\r\n\r\n\tfunction tokenOf(uint256 _tokenId) public view returns (string memory) {\r\n\t\trequire(_tokenId < totalSupply());\r\n\t\treturn info.list[_tokenId].token;\r\n\t}\r\n\r\n\tfunction ownerOf(uint256 _tokenId) public view returns (address) {\r\n\t\trequire(_tokenId < totalSupply());\r\n\t\treturn info.list[_tokenId].owner;\r\n\t}\r\n\r\n\tfunction cosignerOf(uint256 _tokenId) public view returns (address) {\r\n\t\trequire(_tokenId < totalSupply());\r\n\t\taddress _cosigner = info.list[_tokenId].cosigner;\r\n\t\tif (_cosigner == USE_GLOBAL_SIGNER) {\r\n\t\t\t_cosigner = signer();\r\n\t\t}\r\n\t\treturn _cosigner;\r\n\t}\r\n\r\n\tfunction pointsTo(uint256 _tokenId) public view returns (address) {\r\n\t\trequire(_tokenId < totalSupply());\r\n\t\treturn info.list[_tokenId].pointsTo;\r\n\t}\r\n\r\n\tfunction nonceOf(uint256 _tokenId) public view returns (uint256) {\r\n\t\trequire(_tokenId < totalSupply());\r\n\t\treturn info.list[_tokenId].nonce;\r\n\t}\r\n\r\n\tfunction recordsOf(uint256 _tokenId) public view returns (uint256) {\r\n\t\trequire(_tokenId < totalSupply());\r\n\t\treturn info.list[_tokenId].records;\r\n\t}\r\n\r\n\tfunction getApproved(uint256 _tokenId) public view returns (address) {\r\n\t\trequire(_tokenId < totalSupply());\r\n\t\treturn info.list[_tokenId].approved;\r\n\t}\r\n\r\n\tfunction isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n\t\treturn info.users[_owner].approved[_operator];\r\n\t}\r\n\r\n\tfunction tokenByIndex(uint256 _index) public view returns (uint256) {\r\n\t\trequire(_index < totalSupply());\r\n\t\treturn _index;\r\n\t}\r\n\r\n\tfunction tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\r\n\t\trequire(_index < balanceOf(_owner));\r\n\t\treturn info.users[_owner].list[_index];\r\n\t}\r\n\r\n\tfunction getKey(bytes32 _hash) public view returns (string memory) {\r\n\t\treturn info.dictionary[_hash];\r\n\t}\r\n\r\n\tfunction getRecord(string memory _token, string memory _key) public view returns (string memory) {\r\n\t\treturn getRecord(idOf(_token), _key);\r\n\t}\r\n\r\n\tfunction getRecord(uint256 _tokenId, string memory _key) public view returns (string memory) {\r\n\t\tbytes32 _hash = keccak256(abi.encodePacked(_key));\r\n\t\treturn getRecord(_tokenId, _hash);\r\n\t}\r\n\r\n\tfunction getRecord(uint256 _tokenId, bytes32 _hash) public view returns (string memory) {\r\n\t\trequire(_tokenId < totalSupply());\r\n\t\treturn info.list[_tokenId].values[_hash];\r\n\t}\r\n\r\n\tfunction getFullRecord(uint256 _tokenId, bytes32 _hash) public view returns (string memory, string memory) {\r\n\t\treturn (getKey(_hash), getRecord(_tokenId, _hash));\r\n\t}\r\n\r\n\tfunction getRecords(uint256 _tokenId, bytes32[] memory _hashes) public view returns (bytes32[] memory values, bool[] memory trimmed) {\r\n\t\trequire(_tokenId < totalSupply());\r\n\t\tuint256 _length = _hashes.length;\r\n\t\tvalues = new bytes32[](_length);\r\n\t\ttrimmed = new bool[](_length);\r\n\t\tfor (uint256 i = 0; i < _length; i++) {\r\n\t\t\tstring memory _value = info.list[_tokenId].values[_hashes[i]];\r\n\t\t\tvalues[i] = _stringToBytes32(_value);\r\n\t\t\ttrimmed[i] = bytes(_value).length > 32;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getRecordsTable(uint256 _tokenId, uint256 _limit, uint256 _page, bool _isAsc) public view returns (bytes32[] memory hashes, bytes32[] memory keys, bool[] memory keysTrimmed, bytes32[] memory values, bool[] memory valuesTrimmed, uint256 totalRecords, uint256 totalPages) {\r\n\t\trequire(_limit > 0);\r\n\t\ttotalRecords = recordsOf(_tokenId);\r\n\r\n\t\tif (totalRecords > 0) {\r\n\t\t\ttotalPages = (totalRecords / _limit) + (totalRecords % _limit == 0 ? 0 : 1);\r\n\t\t\trequire(_page < totalPages);\r\n\r\n\t\t\tuint256 _offset = _limit * _page;\r\n\t\t\tif (_page == totalPages - 1 && totalRecords % _limit != 0) {\r\n\t\t\t\t_limit = totalRecords % _limit;\r\n\t\t\t}\r\n\r\n\t\t\thashes = new bytes32[](_limit);\r\n\t\t\tkeys = new bytes32[](_limit);\r\n\t\t\tkeysTrimmed = new bool[](_limit);\r\n\t\t\tfor (uint256 i = 0; i < _limit; i++) {\r\n\t\t\t\thashes[i] = info.list[_tokenId].keys[_isAsc ? _offset + i : totalRecords - _offset - i - 1];\r\n\t\t\t\tstring memory _key = getKey(hashes[i]);\r\n\t\t\t\tkeys[i] = _stringToBytes32(_key);\r\n\t\t\t\tkeysTrimmed[i] = bytes(_key).length > 32;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttotalPages = 0;\r\n\t\t\thashes = new bytes32[](0);\r\n\t\t\tkeys = new bytes32[](0);\r\n\t\t\tkeysTrimmed = new bool[](0);\r\n\t\t}\r\n\t\t(values, valuesTrimmed) = getRecords(_tokenId, hashes);\r\n\t}\r\n\r\n\tfunction getYAT(string memory _token) public view returns (uint256 tokenId, address tokenOwner, address tokenCosigner, address pointer, address approved, uint256 nonce, uint256 records) {\r\n\t\ttokenId = idOf(_token);\r\n\t\t( , tokenOwner, tokenCosigner, pointer, approved, nonce, records) = getYAT(tokenId);\r\n\t}\r\n\r\n\tfunction getYAT(uint256 _tokenId) public view returns (string memory token, address tokenOwner, address tokenCosigner, address pointer, address approved, uint256 nonce, uint256 records) {\r\n\t\treturn (tokenOf(_tokenId), ownerOf(_tokenId), cosignerOf(_tokenId), pointsTo(_tokenId), getApproved(_tokenId), nonceOf(_tokenId), recordsOf(_tokenId));\r\n\t}\r\n\r\n\tfunction getYATs(uint256[] memory _tokenIds) public view returns (bytes32[] memory tokens, address[] memory owners, address[] memory cosigners, address[] memory pointers, address[] memory approveds) {\r\n\t\tuint256 _length = _tokenIds.length;\r\n\t\ttokens = new bytes32[](_length);\r\n\t\towners = new address[](_length);\r\n\t\tcosigners = new address[](_length);\r\n\t\tpointers = new address[](_length);\r\n\t\tapproveds = new address[](_length);\r\n\t\tfor (uint256 i = 0; i < _length; i++) {\r\n\t\t\tstring memory _token;\r\n\t\t\t(_token, owners[i], cosigners[i], pointers[i], approveds[i], , ) = getYAT(_tokenIds[i]);\r\n\t\t\ttokens[i] = _stringToBytes32(_token);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getYATsTable(uint256 _limit, uint256 _page, bool _isAsc) public view returns (uint256[] memory tokenIds, bytes32[] memory tokens, address[] memory owners, address[] memory cosigners, address[] memory pointers, address[] memory approveds, uint256 totalYATs, uint256 totalPages) {\r\n\t\trequire(_limit > 0);\r\n\t\ttotalYATs = totalSupply();\r\n\r\n\t\tif (totalYATs > 0) {\r\n\t\t\ttotalPages = (totalYATs / _limit) + (totalYATs % _limit == 0 ? 0 : 1);\r\n\t\t\trequire(_page < totalPages);\r\n\r\n\t\t\tuint256 _offset = _limit * _page;\r\n\t\t\tif (_page == totalPages - 1 && totalYATs % _limit != 0) {\r\n\t\t\t\t_limit = totalYATs % _limit;\r\n\t\t\t}\r\n\r\n\t\t\ttokenIds = new uint256[](_limit);\r\n\t\t\tfor (uint256 i = 0; i < _limit; i++) {\r\n\t\t\t\ttokenIds[i] = tokenByIndex(_isAsc ? _offset + i : totalYATs - _offset - i - 1);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttotalPages = 0;\r\n\t\t\ttokenIds = new uint256[](0);\r\n\t\t}\r\n\t\t(tokens, owners, cosigners, pointers, approveds) = getYATs(tokenIds);\r\n\t}\r\n\r\n\tfunction getOwnerYATsTable(address _owner, uint256 _limit, uint256 _page, bool _isAsc) public view returns (uint256[] memory tokenIds, bytes32[] memory tokens, address[] memory cosigners, address[] memory pointers, address[] memory approveds, uint256 totalYATs, uint256 totalPages) {\r\n\t\trequire(_limit > 0);\r\n\t\ttotalYATs = balanceOf(_owner);\r\n\r\n\t\tif (totalYATs > 0) {\r\n\t\t\ttotalPages = (totalYATs / _limit) + (totalYATs % _limit == 0 ? 0 : 1);\r\n\t\t\trequire(_page < totalPages);\r\n\r\n\t\t\tuint256 _offset = _limit * _page;\r\n\t\t\tif (_page == totalPages - 1 && totalYATs % _limit != 0) {\r\n\t\t\t\t_limit = totalYATs % _limit;\r\n\t\t\t}\r\n\r\n\t\t\ttokenIds = new uint256[](_limit);\r\n\t\t\tfor (uint256 i = 0; i < _limit; i++) {\r\n\t\t\t\ttokenIds[i] = tokenOfOwnerByIndex(_owner, _isAsc ? _offset + i : totalYATs - _offset - i - 1);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\ttotalPages = 0;\r\n\t\t\ttokenIds = new uint256[](0);\r\n\t\t}\r\n\t\t(tokens, , cosigners, pointers, approveds) = getYATs(tokenIds);\r\n\t}\r\n\r\n\tfunction allInfoFor(address _owner) external view returns (uint256 supply, uint256 ownerBalance) {\r\n\t\treturn (totalSupply(), balanceOf(_owner));\r\n\t}\r\n\r\n\r\n\tfunction _mint(string memory _token, address _account) internal {\r\n\t\tuint256 _tokenId;\r\n\t\tbytes32 _hash = hashOf(_token);\r\n\t\tif (info.idOf[_hash] == 0) {\r\n\t\t\t_tokenId = info.totalSupply++;\r\n\t\t\tinfo.idOf[_hash] = _tokenId + 1;\r\n\t\t\tToken storage _newToken = info.list[_tokenId];\r\n\t\t\t_newToken.owner = _account;\r\n\t\t\t_newToken.cosigner = USE_GLOBAL_SIGNER;\r\n\t\t\t_newToken.token = _token;\r\n\t\t\tuint256 _index = info.users[_account].balance++;\r\n\t\t\tinfo.users[_account].indexOf[_tokenId] = _index + 1;\r\n\t\t\tinfo.users[_account].list[_index] = _tokenId;\r\n\t\t\temit Transfer(address(0x0), _account, _tokenId);\r\n\t\t\temit Transfer(address(0x0), _account, _hash, _token);\r\n\t\t} else {\r\n\t\t\t_tokenId = idOf(_token);\r\n\t\t\tinfo.list[_tokenId].approved = msg.sender;\r\n\t\t\t_transfer(address(this), _account, _tokenId);\r\n\t\t}\r\n\t\temit Mint(_hash, _tokenId, _account, _token);\r\n\t}\r\n\t\r\n\tfunction _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n\t\taddress _owner = ownerOf(_tokenId);\r\n\t\taddress _approved = getApproved(_tokenId);\r\n\t\trequire(_from == _owner);\r\n\t\trequire(msg.sender == _owner || msg.sender == _approved || isApprovedForAll(_owner, msg.sender));\r\n\r\n\t\tinfo.list[_tokenId].owner = _to;\r\n\t\tinfo.list[_tokenId].cosigner = USE_GLOBAL_SIGNER;\r\n\t\tinfo.list[_tokenId].pointsTo = _to;\r\n\t\tif (_approved != address(0x0)) {\r\n\t\t\tinfo.list[_tokenId].approved = address(0x0);\r\n\t\t\temit Approval(_to, address(0x0), _tokenId);\r\n\t\t}\r\n\t\t_updateResolvesTo(address(0x0), _tokenId);\r\n\t\t_deleteAllRecords(_tokenId);\r\n\r\n\t\tuint256 _index = info.users[_from].indexOf[_tokenId] - 1;\r\n\t\tuint256 _moved = info.users[_from].list[info.users[_from].balance - 1];\r\n\t\tinfo.users[_from].list[_index] = _moved;\r\n\t\tinfo.users[_from].indexOf[_moved] = _index + 1;\r\n\t\tinfo.users[_from].balance--;\r\n\t\tdelete info.users[_from].indexOf[_tokenId];\r\n\t\tuint256 _newIndex = info.users[_to].balance++;\r\n\t\tinfo.users[_to].indexOf[_tokenId] = _newIndex + 1;\r\n\t\tinfo.users[_to].list[_newIndex] = _tokenId;\r\n\t\temit Transfer(_from, _to, _tokenId);\r\n\t\temit Transfer(_from, _to, hashOf(tokenOf(_tokenId)), tokenOf(_tokenId));\r\n\t}\r\n\r\n\tfunction _updateResolvesTo(address _resolvesTo, uint256 _tokenId) internal {\r\n\t\tif (_resolvesTo == address(0x0)) {\r\n\t\t\tdelete info.resolve[info.list[_tokenId].resolvesTo];\r\n\t\t\tinfo.list[_tokenId].resolvesTo = _resolvesTo;\r\n\t\t} else {\r\n\t\t\trequire(bytes(resolve(_resolvesTo)).length == 0);\r\n\t\t\trequire(info.list[_tokenId].resolvesTo == address(0x0));\r\n\t\t\tinfo.resolve[_resolvesTo] = tokenOf(_tokenId);\r\n\t\t\tinfo.list[_tokenId].resolvesTo = _resolvesTo;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _updateRecord(uint256 _tokenId, string memory _key, string memory _value) internal {\r\n\t\trequire(bytes(_key).length > 0);\r\n\t\tbytes32 _hash = keccak256(abi.encodePacked(_key));\r\n\t\tif (bytes(getKey(_hash)).length == 0) {\r\n\t\t\tinfo.dictionary[_hash] = _key;\r\n\t\t}\r\n\r\n\t\tToken storage _token = info.list[_tokenId];\r\n\t\tif (bytes(_value).length == 0) {\r\n\t\t\t_deleteRecord(_tokenId, _key, _hash);\r\n\t\t} else {\r\n\t\t\tif (_token.indexOf[_hash] == 0) {\r\n\t\t\t\tuint256 _index = _token.records++;\r\n\t\t\t\t_token.indexOf[_hash] = _index + 1;\r\n\t\t\t\t_token.keys[_index] = _hash;\r\n\t\t\t\temit RecordAdded(hashOf(tokenOf(_tokenId)), msg.sender, hashOf(_key), tokenOf(_tokenId), _key);\r\n\t\t\t}\r\n\t\t\t_token.values[_hash] = _value;\r\n\t\t}\r\n\t\temit RecordUpdated(hashOf(tokenOf(_tokenId)), msg.sender, hashOf(_key), tokenOf(_tokenId), _key, _value);\r\n\t}\r\n\r\n\tfunction _deleteRecord(uint256 _tokenId, string memory _key, bytes32 _hash) internal {\r\n\t\tToken storage _token = info.list[_tokenId];\r\n\t\trequire(_token.indexOf[_hash] != 0);\r\n\t\tuint256 _index = _token.indexOf[_hash] - 1;\r\n\t\tbytes32 _moved = _token.keys[_token.records - 1];\r\n\t\t_token.keys[_index] = _moved;\r\n\t\t_token.indexOf[_moved] = _index + 1;\r\n\t\t_token.records--;\r\n\t\tdelete _token.indexOf[_hash];\r\n\t\tdelete _token.values[_hash];\r\n\t\temit RecordDeleted(hashOf(tokenOf(_tokenId)), msg.sender, hashOf(_key), tokenOf(_tokenId), _key);\r\n\t}\r\n\r\n\tfunction _deleteAllRecords(uint256 _tokenId) internal {\r\n\t\tToken storage _token = info.list[_tokenId];\r\n\t\twhile (_token.records > 0) {\r\n\t\t\tbytes32 _hash = _token.keys[_token.records - 1];\r\n\t\t\t_deleteRecord(_tokenId, getKey(_hash), _hash);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction _getEthSignedMessageHash(bytes32 _messageHash) internal pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", _messageHash));\r\n\t}\r\n\r\n\tfunction _splitSignature(bytes memory _signature) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\r\n\t\trequire(_signature.length == 65);\r\n\t\tassembly {\r\n\t\t\tr := mload(add(_signature, 32))\r\n\t\t\ts := mload(add(_signature, 64))\r\n\t\t\tv := byte(0, mload(add(_signature, 96)))\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature) internal pure returns (address) {\r\n\t\t(bytes32 r, bytes32 s, uint8 v) = _splitSignature(_signature);\r\n\t\treturn ecrecover(_ethSignedMessageHash, v, r, s);\r\n\t}\r\n\r\n\tfunction _verifyMint(string calldata _token, address _account, uint256 _expiry, bytes memory _signature) internal view returns (bool) {\r\n\t\tbytes32 _hash = keccak256(abi.encodePacked(\"gogo\", _token, _account, _expiry));\r\n\t\treturn _recoverSigner(_getEthSignedMessageHash(_hash), _signature) == signer();\r\n\t}\r\n\r\n\tfunction _verifyRecordUpdate(uint256 _tokenId, string memory _key, string memory _value, uint256 _nonce, bytes memory _signature) internal view returns (bool) {\r\n\t\tbytes32 _hash = keccak256(abi.encodePacked(_tokenId, _key, _value, _nonce));\r\n\t\taddress _signer = _recoverSigner(_getEthSignedMessageHash(_hash), _signature);\r\n\t\treturn _signer == ownerOf(_tokenId) || _signer == cosignerOf(_tokenId);\r\n\t}\r\n\r\n\tfunction _stringToBytes32(string memory _in) internal pure returns (bytes32 out) {\r\n\t\tif (bytes(_in).length == 0) {\r\n\t\t\treturn 0x0;\r\n\t\t}\r\n\t\tassembly {\r\n\t\t\tout := mload(add(_in, 32))\r\n\t\t}\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"token\",\"type\":\"string\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"token\",\"type\":\"string\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"token\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"RecordAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"token\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"RecordDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"token\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"RecordUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"token\",\"type\":\"string\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"allInfoFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownerBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cosignerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"deleteAllRecords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"deleteRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getFullRecord\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getKey\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAsc\",\"type\":\"bool\"}],\"name\":\"getOwnerYATsTable\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"tokens\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"cosigners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pointers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"approveds\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"totalYATs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPages\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"getRecord\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_token\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"getRecord\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getRecord\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_hashes\",\"type\":\"bytes32[]\"}],\"name\":\"getRecords\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"values\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"trimmed\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAsc\",\"type\":\"bool\"}],\"name\":\"getRecordsTable\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"hashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"keys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"keysTrimmed\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"values\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"valuesTrimmed\",\"type\":\"bool[]\"},{\"internalType\":\"uint256\",\"name\":\"totalRecords\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPages\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getYAT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"token\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenCosigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pointer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"records\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_token\",\"type\":\"string\"}],\"name\":\"getYAT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenCosigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pointer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"records\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getYATs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"tokens\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"cosigners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pointers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"approveds\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAsc\",\"type\":\"bool\"}],\"name\":\"getYATsTable\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"tokens\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"cosigners\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pointers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"approveds\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"totalYATs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPages\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_token\",\"type\":\"string\"}],\"name\":\"hashOf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_token\",\"type\":\"string\"}],\"name\":\"idOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_token\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"nonceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"pointsTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"recordsOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"resetCosigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_resolvesTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"resolveTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_token\",\"type\":\"string\"}],\"name\":\"reverseResolve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"revokeCosigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cosigner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setCosigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Metadata\",\"name\":\"_metadata\",\"type\":\"address\"}],\"name\":\"setMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pointsTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setPointsTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unresolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"updateRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"updateRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"YAT","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005A3E36eA8A734C641ebbA1474E70edEeB59024EE","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cc6a9b77205170caabdfd99d5ec97a890cd921d3a2720672533f8b210c6ac700"}]}