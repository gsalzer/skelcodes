{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/ICarbonInventoryControl.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\ninterface ICarbonInventoryControl {\r\n\r\n     /**\r\n     * @dev function to offset carbon foot print on token and inventory.\r\n     * @param _to Wallet from whom will be burned tokens.\r\n     * @param _broker Broker who will burn tokens.\r\n     * @param _carbonTon Amount to burn on carbon tons.\r\n     * @param _receiptId Transaction identifier that represent the offset.\r\n     * @param _onBehalfOf Broker is burning on behalf of someone.\r\n     * @param _token Commmercial carbon credit token which will be burned.\r\n     */\r\n    function offsetTransaction(address _to, address _broker, uint256 _carbonTon, string memory _receiptId, string memory _onBehalfOf, address _token )\r\n        external;\r\n\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/CarbonInstantOffset.sol\r\n\r\n\r\n\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\ncontract CarbonInstantOffset is Ownable {\r\n\r\n    ICarbonInventoryControl public carbonInventoryControl;\r\n       \r\n    address private MCO2;  \r\n    address private broker;\r\n\r\n    event BrokerChanged(address newBroker);\r\n    event MCO2Changed(address newMCO2); \r\n    \r\n    constructor(address _carbonInventoryControl, address _MCO2, address _broker)\r\n        public\r\n        {\r\n            MCO2 = _MCO2;\r\n            broker = _broker;\r\n            carbonInventoryControl = ICarbonInventoryControl(_carbonInventoryControl);\r\n        }\r\n              \r\n     /**\r\n     * @dev function to offset carbon foot print on token and inventory.\r\n     * @param _carbonTon Amount to burn on carbon tons.\r\n     * @param _receiptId Transaction identifier that represent the offset.\r\n     * @param _onBehalfOf Broker is burning on behalf of someone.\r\n     */\r\n    function offsetTransaction( uint256 _carbonTon, string memory _receiptId, string memory _onBehalfOf)\r\n        public  {\r\n        require (_carbonTon > 0, \"CarbonInstantOffset: Carbon ton should be greater than zero\");\r\n        carbonInventoryControl.offsetTransaction(msg.sender, broker, _carbonTon, _receiptId, _onBehalfOf, MCO2);\r\n    }\r\n\r\n    /**\r\n    * @dev Changes a the cMCO2 address on eth network\r\n    * @param newMCO2 New cMCO2 address on eth network\r\n    */\r\n    function changeMCO2(address newMCO2) external onlyOwner returns(bool) {\r\n        _changeMCO2(newMCO2);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Changes a the cMCO2 address on eth network (internal)\r\n    * @param newMCO2 New cMCO2 address on eth network\r\n    */\r\n    function _changeMCO2(address newMCO2) internal {\r\n        require(newMCO2 != address(0), \"CarbonInstantOffset: Contract is empty\");\r\n        MCO2 = newMCO2;\r\n        emit MCO2Changed(MCO2);\r\n    }\r\n\r\n    function getMCO2() external view returns(address) {\r\n        return MCO2;\r\n    }\r\n\r\n\r\n   /**\r\n    * @dev Changes a the broker address on eth network\r\n    * @param newBroker New broker address on eth network\r\n    */\r\n    function changeBroker(address newBroker) external onlyOwner returns(bool) {\r\n        _changeBroker(newBroker);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Changes a the Broker address on eth network (internal)\r\n    * @param newBroker New Broker address on eth network\r\n    */\r\n    function _changeBroker (address newBroker) internal {\r\n        require(newBroker != address(0), \"CarbonInstantOffset: Contract is empty\");\r\n        broker = newBroker;\r\n        emit BrokerChanged(broker);\r\n    }\r\n\r\n    function getBroker() external view returns(address) {\r\n        return broker;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_carbonInventoryControl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MCO2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_broker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBroker\",\"type\":\"address\"}],\"name\":\"BrokerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMCO2\",\"type\":\"address\"}],\"name\":\"MCO2Changed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"carbonInventoryControl\",\"outputs\":[{\"internalType\":\"contract ICarbonInventoryControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBroker\",\"type\":\"address\"}],\"name\":\"changeBroker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMCO2\",\"type\":\"address\"}],\"name\":\"changeMCO2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBroker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMCO2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_carbonTon\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_receiptId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_onBehalfOf\",\"type\":\"string\"}],\"name\":\"offsetTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CarbonInstantOffset","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000dcf28c0e90e375098e9edec758078c4586421daf000000000000000000000000fc98e825a2264d890f9a1e68ed50e1526abccacd00000000000000000000000070d5eadcb367bcf733fc98b441def1c7c5eec187","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5076e54fce9c7195bc744a8bd9283e20f3c6dac5b7fc3305585853aa349d22cc"}]}