{"status":"1","message":"OK","result":[{"SourceCode":"# @version 0.2.11\r\n# @author banteg\r\n# @notice Calculate voting power from productive YFI\r\nfrom vyper.interfaces import ERC20\r\n\r\nstruct VotingBalances:\r\n    wallet: uint256\r\n    vault: uint256\r\n    bancor: uint256\r\n    balancer: uint256\r\n    uniswap: uint256\r\n    sushiswap: uint256\r\n    makerdao: uint256\r\n    unit: uint256\r\n\r\n\r\nstruct List:\r\n    prev: uint256\r\n    next: uint256\r\n\r\n\r\nstruct Urn:\r\n    ink: uint256\r\n    art: uint256\r\n\r\n\r\nstruct ProtectedLiquidity:\r\n    provider: address\r\n    poolToken: address\r\n    reserveToken: address\r\n    poolAmount: uint256\r\n    reserveAmount: uint256\r\n    reserveRateN: uint256\r\n    reserveRateD: uint256\r\n    time: uint256\r\n\r\n\r\nstruct UserInfo:\r\n    amount: uint256\r\n    rewardDebt: uint256\r\n\r\n\r\ninterface Vault:\r\n    def pricePerShare() -> uint256: view\r\n\r\n\r\ninterface DSProxyRegistry:\r\n    def proxies(user: address) -> address: view\r\n\r\n\r\ninterface DssCdpManager:\r\n    def count(user: address) -> uint256: view\r\n    def first(user: address) -> uint256: view\r\n    def list(cdp: uint256) -> List: view\r\n    def ilks(cdp: uint256) -> bytes32: view\r\n    def urns(cdp: uint256) -> address: view\r\n\r\n\r\ninterface Vat:\r\n    def urns(ilk: bytes32, user: address) -> Urn: view\r\n\r\n\r\ninterface Bancor:\r\n    def protectedLiquidityCount(provider: address) -> uint256: view\r\n    def protectedLiquidityId(provider: address, index: uint256) -> uint256: view\r\n    def protectedLiquidity(_id: uint256) -> ProtectedLiquidity: view\r\n\r\n\r\ninterface MasterChef:\r\n    def userInfo(pid: uint256, user: address) -> UserInfo: view\r\n\r\n\r\ninterface Unit:\r\n    def collaterals(token: address, user: address) -> uint256: view\r\n\r\n\r\nyfi: constant(address) = 0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e\r\nvault: constant(address) = 0xE14d13d8B3b85aF791b2AADD661cDBd5E6097Db1\r\nbalancer: constant(address) = 0x41284a88D970D3552A26FaE680692ED40B34010C\r\nmasterchef: constant(address) = 0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd\r\nsushiswap: constant(address) = 0x088ee5007C98a9677165D78dD2109AE4a3D04d0C\r\nuniswap: constant(address) = 0x2fDbAdf3C4D5A8666Bc06645B8358ab803996E28\r\nbancor: constant(address) = 0xf5FAB5DBD2f3bf675dE4cB76517d4767013cfB55\r\nunit: constant(address) = 0xb1cFF81b9305166ff1EFc49A129ad2AfCd7BCf19\r\nproxy_registry: constant(address) = 0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4\r\ncdp_manager: constant(address) = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39\r\nvat: constant(address) = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B\r\n\r\n\r\n@view\r\n@internal\r\ndef makerdao_collateral(user: address) -> uint256:\r\n    yfi_a: bytes32 = 0x5946492d41000000000000000000000000000000000000000000000000000000\r\n    proxy: address = DSProxyRegistry(proxy_registry).proxies(user)\r\n    if proxy == ZERO_ADDRESS:\r\n        return 0\r\n    cdp: uint256 = DssCdpManager(cdp_manager).first(proxy)\r\n    urn: address = ZERO_ADDRESS\r\n    total: uint256 = 0\r\n    for i in range(100):\r\n        if cdp == 0:\r\n            break\r\n        if DssCdpManager(cdp_manager).ilks(cdp) == yfi_a:\r\n            urn = DssCdpManager(cdp_manager).urns(cdp)\r\n            total += Vat(vat).urns(yfi_a, urn).ink\r\n        cdp = DssCdpManager(cdp_manager).list(cdp).next\r\n    return total\r\n\r\n\r\n@view\r\n@internal\r\ndef lp_balance(pool: address, user: address) -> uint256:\r\n    return ERC20(yfi).balanceOf(pool) * ERC20(pool).balanceOf(user) / ERC20(pool).totalSupply()\r\n\r\n\r\n@view\r\n@internal\r\ndef sushiswap_balance(user: address) -> uint256:\r\n    # yfi balance of slp * slp in masterchef / slp total supply\r\n    staked: uint256 = MasterChef(masterchef).userInfo(11, user).amount + ERC20(sushiswap).balanceOf(user)\r\n    return ERC20(yfi).balanceOf(sushiswap) * staked / ERC20(sushiswap).totalSupply()\r\n\r\n\r\n@view\r\n@internal\r\ndef vault_balance(user: address) -> uint256:\r\n    return ERC20(vault).balanceOf(user) * Vault(vault).pricePerShare() / 10 ** 18\r\n\r\n\r\n@view\r\n@internal\r\ndef yfi_in_bancor(user: address) -> uint256:\r\n    total: uint256 = 0\r\n    id: uint256 = 0\r\n    count: uint256 = Bancor(bancor).protectedLiquidityCount(user)\r\n    liquidity: ProtectedLiquidity = empty(ProtectedLiquidity)\r\n    for i in range(100):\r\n        if i == count:\r\n            break\r\n        id = Bancor(bancor).protectedLiquidityId(user, i)\r\n        liquidity = Bancor(bancor).protectedLiquidity(id)\r\n        if liquidity.reserveToken == yfi:\r\n            total += liquidity.reserveAmount\r\n    return total\r\n\r\n\r\n@view\r\n@internal\r\ndef _voting_balances(user: address) -> VotingBalances:\r\n    return VotingBalances({\r\n        wallet: ERC20(yfi).balanceOf(user),\r\n        vault: self.vault_balance(user),\r\n        bancor: self.yfi_in_bancor(user),\r\n        balancer: self.lp_balance(balancer, user),\r\n        uniswap: self.lp_balance(uniswap, user),\r\n        sushiswap: self.sushiswap_balance(user),\r\n        makerdao: self.makerdao_collateral(user),\r\n        unit: Unit(unit).collaterals(yfi, user),\r\n    })\r\n\r\n\r\n@view\r\n@external\r\ndef balanceOf(user: address) -> uint256:\r\n    bal: VotingBalances = self._voting_balances(user)\r\n    return (\r\n        bal.wallet\r\n        + bal.vault\r\n        + bal.bancor\r\n        + bal.balancer\r\n        + bal.uniswap\r\n        + bal.sushiswap\r\n        + bal.makerdao\r\n        + bal.unit\r\n    )\r\n\r\n\r\n@view\r\n@external\r\ndef voting_balances(user: address) -> VotingBalances:\r\n    return self._voting_balances(user)","ABI":"[{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":959611},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"voting_balances\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"wallet\",\"type\":\"uint256\"},{\"name\":\"vault\",\"type\":\"uint256\"},{\"name\":\"bancor\",\"type\":\"uint256\"},{\"name\":\"balancer\",\"type\":\"uint256\"},{\"name\":\"uniswap\",\"type\":\"uint256\"},{\"name\":\"sushiswap\",\"type\":\"uint256\"},{\"name\":\"makerdao\",\"type\":\"uint256\"},{\"name\":\"unit\",\"type\":\"uint256\"}],\"gas\":959020}]","ContractName":"Vyper_contract","CompilerVersion":"vyper:0.2.11","OptimizationUsed":"0","Runs":"0","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}