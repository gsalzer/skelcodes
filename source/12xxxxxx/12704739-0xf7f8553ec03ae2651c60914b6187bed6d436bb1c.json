{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n/*\r\nhttps://t.me/moondogofficial\r\nMoon Dog\r\n$MDOG\r\n\r\nCompletely dynamic fees - able to be changed when the community chooses.\r\nJoin us and join a community that will have more power and control over their\r\necosystem than any other community in meme coin history.\r\n\r\n***Original source code - separate voting contract deployed soon***\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMdhhhyhmMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMdddyohhoohNMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMddhy-.-smy/osyhdmNMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMdym/+yhso+:::::/oyyyydmNMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMmhmhs/::::``.::::::://oyyyyyyyyhmNMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNho+/::/yys///+//::-..:::/shyyyydhdMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmhyydNNdo/:::::://ymmNNmmy/-..::::/hh---dhdMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmy/````:sh+::.``````.mNNNNNmhyyys+:::/hy-odhmMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMys`       -ho`  -/.   +mNNmh:.y//+o::::/dsdydNMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNyy+`       .d:  hNd:-:+dd+.`  `..-::::::omhdmMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNmdmmddddddhhhhhhhdo-`     `h+  dNNmmNNNNdo.``.::``-:::::+hmMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmmmddhhhhhyyyyyyyyyyyyyyyyy:--..om:` +NNmhydmhdmmddmNm-  .:::::ydMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMNNmmdhhyyyyyyssssooooooooosssssyyyyyyhhhyshsosyhs+oymNNNNm+    -::::sdMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMNmddhhhyo+++oo+++///////////////+++oossyyyyyms+yys++ymNNNmds-      .::/dmMMMMMM\r\nMMMMMMMMMMMMMMMMMMNmddhhyyyss+/////////////////////////////++osyyyhhyyyhy/-::--`         .:ydMMMMMMM\r\nMMMMMMMMMMMMMMMMNmdhhhyyyso+///////////////////////////////////+osyyyyyhho-`             `odNMMMMMMM\r\nMMMMMMMMMMMMMMNmdhhyyyso+/////////////////////////////////////////+osyyyyhhy+.   `.--.``.ymMMMMMMMMM\r\nMMMMMMMMMMMMNmdhhyyyso+/////////////////////////////////////////////+ossoooshhs/os++++osddNMMMMMMMMM\r\nMMMMMMMMMMMmddhyyyyo+/////////////////////////////////////////////////+/////+yhd:`     `-ohNMMMMMMMM\r\nMMMMMMMMMNddhhyyys+//////////////////////////////////////////////////////////oyd/         /mNMMMMMMM\r\nMMMMMMMMNddhyyyyo////////////////////////////////////////////////////////////oyyd-`       -dNMMMMMMM\r\nMMMMMMMmdhhyyyyo//////////////////////////////////++++++++//////////////////oyyyyhys-..` -hdMMMMMMMM\r\nMMMMMMNmhhyyyy+//////////////////////////////++osssyyyyyyssoo+//////////////oyyyyyyhdddyydmMMMMMMMMM\r\nMMMMMmdhhyyyyo/////////////////////////////+osyyyyyyyyyyyyyyyyso+////////////oyyyyyyhhhhmmmMMMMMMMMM\r\nMMMMNmhhyyyys/////////////////////////////oyyyyyyyyyyyyyyyyyyyyys+//////////++ssyyyyhhhhdNmmMMMMMMMM\r\nMMMNddhhyyyy+///////////////////////////+syyyyyyyyyyyyyyyyyyyyyyyyo+sss+/+ossyyssssyyhhhhmNmNMMMMMMM\r\nMMMmmhhysooo+++/////////////////////////syyyyyyyyyyyyyyyyyyyyyyyyyyyyyyooyyyyyyyyysoyyhhhhmNmMMMMMMM\r\nMMNmdhhs+syyyyys+//////////////////////+yyyyyyyyyyyyyyyyyyyyyyyyyyyyooo+yyyyyyyyyyysoyhhhhdNmmMMMMMM\r\nMMmmhhy+syyyyyyyy+/////////////////////oyyyyyyyyyyyyyyyyyyyyyyyyyyyy+//+yyyyyyyyyyyyoyyhhhhmNmMMMMMM\r\nMNddhhy+syyyyyyyy+/////////////////////+yyyyyyyyyyyyyyyyyyyyyyyyyyyy+//+syyyyyyyyyyssyyhhhhmNmmMMMMM\r\nMmmdhhyyosyyyyys+//////////////////////+syyyyyyyyyyyyyyyyyyyyyyyyyys////+syyyyyyyyooyyyhhhhdNNdMMMMM\r\nMNmhhhyyyys++++/////////////////////////+yyyyyyyyyyyyyyyyyyyyyyyyys+//////+oossooosyyyyhhhhdNNdMMMMM\r\nMNmhhhyyyyy+/////////////////////////////+syyyyyyyyyyyyyyyyyyyyyys+////////////oyyyyyyyhhhhdNNhMMMMM\r\nMNmhhhyyyyyo///////////////////////////////osyyyyyyyyyyyyyyyyyys+//////////////syyyyyyyhhhhdNNhMMMMM\r\nMNNhhhyyyyyy+////////////////////////////////+osyyyyyyyyyyyyso+///////////////+yyyyyyyyhhhhdNNhMMMMM\r\nMNNdhhyyyyyyo///////////////////////////////////+++oooooo+++//////////////////syyyyyyyhhhhhmNNdMMMMM\r\nMmmmhhhysssyyo////////////////////////////////////////+ossso+////////////////oyyyyyyyyhhhhhmNNdMMMMM\r\nMNdmhhhyoyyyyyo//////////////////////////////////////oyyyyyys+//////////////oyyyyyyyyhhhhhdNNmNMMMMM\r\nMMdNdhhhosyyyys+/////////////////////////////////////syyyyyyy+/////////////oyyyyyyyyyhhhhhmNNmMMMMMM\r\nMMNmmdhhhsssssyyo////////////////++oosssssoo++///////+osyyss+/////////////oyyyyyyyyyhhhhhdNNmmMMMMMM\r\nMMMmmmhhhhyyyyyyyo+///////////+ossyyyyyyyyyyyyso+//////++++///////++////+syyyyyyyyyhhhhhdmNNmMMMMMMM\r\nMMMMdNmhhhhyyyyyyyso/////////+syyyyyyyyyyyyyyyyyso//////////////+sssso+osyyyyyyyyyhhhhhhmNNdNMMMMMMM\r\nMMMMNdNdhhhhyyyyyyyys+//////+yyyyyyyyyyyyyyyyyyyyyo////////////+yyyyyyssyyyyyyyyyhhhhhhmNNmmMMMMMMMM\r\nMMMMMmmNdhhhhyyyyyyyyys++///syyyyyyyyyyyyyyyyyyyyyy+///////////+yyyyyysoyyyyyyyyhhhhhhmNNmmMMMMMMMMM\r\nMMMMMMNmNmhhhhyyyyyyyyyyso++yyyyyyyyyyyyyyyyyyyyyyyo///////////+osyyysosyyyyyyhhhhhhdmNNmNMMMMMMMMMM\r\nMMMMMMMmmNmdhhhhyyyyyyyyyyyssyyyyyyyyyyyyyyyyyyyyys+///////++osssoosssyyyyyyyhhhhhhdmNNmmMMMMMMMMMMM\r\nMMMMMMMMNmmmdhhhhhyyyyyyyyyyssyyyyyyyyyyyyyyyyyyys+///+++ossyyyyyyyyyyyyyyyhhhhhhdmNNmmNMMMMMMMMMMMM\r\nMMMMMMMMMMmmNmdhhhhhyyyyyyyyyyssyyyyyyyyyyyyyyyso++osssyyyyyyyyyyyyyyyyyyhhhhhhhdmNNmmNMMMMMMMMMMMMM\r\nMMMMMMMMMMMNmmNmdhhhhhhyyyyyyyysssssyyyyyyyysso++oyyyyyyyyyyyyyyyyyyyyhhhhhhhhdmNNmmNMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMNmmmNmdhhhhhhhyyyyyyyyssoooooooooossyyyyyyyyyyyyyyyyyyyhhhhhhhhhdmNNNmmNMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMmmmNmmdhhhhhhhyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyhhhhhhhhhhdmmNNmmmMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMmmmNNmddhhhhhhhhhhyyyyyyyyyyyyyyyyyyyyyyyhhhhhhhhhhhhdmmNNNmmmNMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMNmmmNNmmdhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhddmmNNNNmmmMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMNNdmNNNmmddhhhhhhhhhhhhhhhhhhhhhhhhhhhhdddmmNNNNNmmNNMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMNNmmNNNNNmmmdddddhhhhhhhhhhhddddmmmmNNNNNNmmNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNmmdmmNNNNNNNNNNNmmmNNNNNNNNNNmNmmmdNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNmmddmmmmmmmmmmmmmmdmNmNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n*/\r\n\r\n//Note: Moon Dog isn't relying on SafeMath as recent versions of solidity \r\n//      have implicit under/over-flow checking.\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}  \r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amount_in,\r\n        uint amount_out_min,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amount_token_desired,\r\n        uint amount_token_min,\r\n        uint amount_eth_min,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amount_token, uint amount_eth, uint liquidity);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract MoonDog is IERC20, Ownable {\r\n    string public constant name = \"Moon Dog\";\r\n    string public constant symbol = \"MDOG\";\r\n    uint8 public constant decimals = 9;\r\n    uint256 uint256_max = ~uint256(0);\r\n    uint256 private token_total = 1 * 10**9 * 10**9; //max-supply: 1 billion tokens\r\n    uint256 private reserve_total = (uint256_max - (uint256_max % token_total)); //max divisor\r\n    address public burn_address = address(0);\r\n    mapping(address => uint256) private reserves_owned;\r\n    mapping(address => uint256) private tokens_owned;\r\n    mapping(address => bool) private excluded_from_fees;\r\n    mapping(address => mapping (address => uint256)) private allowances;\r\n    mapping(address => bool) private bots;\r\n    mapping(address => uint) private cooldowns;\r\n    uint256 public liquidity_fee = 5;\r\n    uint256 public reflection_fee = 3;\r\n    uint256 public burn_fee = 0;\r\n    uint256 private team_fee = 8;\r\n    uint256 private max_tx_amount = token_total;\r\n    uint256 private liquify_threshold = 1*10**5 * 10**9;\r\n    uint256 private liquidity_tokens = 0;\r\n    uint256 private fee_tokens = 0;\r\n    bool private swap_locked = false;\r\n    bool private trading_open = false;\r\n    bool private cooldown_enabled = false;\r\n    bool private exclude_burn_address = false;\r\n    address private fee_tweaker;\r\n    address payable private fee_addr;\r\n    address public uniswapV2_pair;\r\n    IUniswapV2Router02 private uniswapv2_router;\r\n\r\n    event FeesTweaked(\r\n        uint256 liquidity_fee, \r\n        uint256 reflection_fee, \r\n        uint256 burn_fee\r\n    );\r\n\r\n    constructor(address fee_tweaker_, address payable fee_addr_) {\r\n        fee_addr = fee_addr_;\r\n        reserves_owned[msg.sender] = reserve_total;\r\n        fee_tweaker = fee_tweaker_;\r\n        IUniswapV2Router02 uniswap_router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapv2_router = uniswap_router;\r\n        uniswapV2_pair = IUniswapV2Factory(uniswapv2_router.factory()).createPair(\r\n            address(this), uniswapv2_router.WETH()\r\n        );\r\n        excluded_from_fees[msg.sender] = true;\r\n        excluded_from_fees[address(this)] = true;\r\n        excluded_from_fees[fee_addr] = true;\r\n        emit Transfer(address(0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B), _msgSender(), token_total);\r\n    }\r\n    \r\n    function openSwap() external onlyOwner {\r\n        require(!trading_open, \"Trading has already been opened\");\r\n        max_tx_amount = 5 * 10**6 * 10**9; // 0.5%\r\n        trading_open = true;\r\n        cooldown_enabled = true;\r\n    }\r\n\r\n    modifier onlyFeeTweaker() {\r\n        require(fee_tweaker == _msgSender(), \"You are not the fee tweaker\");\r\n        _;\r\n    }\r\n\r\n    function tweakFees(uint256 new_liquidity_fee, \r\n                       uint256 new_reflection_fee, \r\n                       uint256 new_burn_fee) public onlyFeeTweaker() {\r\n        //The max fee (15%) cannot be changed\r\n        //This is so the community doesn't have to trust the fee tweaker that much\r\n        //Malicious behaviour is thus limited\r\n        require((new_liquidity_fee + new_reflection_fee + new_burn_fee) <= 15);\r\n        liquidity_fee = new_liquidity_fee;\r\n        reflection_fee = new_reflection_fee;\r\n        burn_fee = new_burn_fee;\r\n        emit FeesTweaked(new_liquidity_fee, new_reflection_fee, new_burn_fee);\r\n    }\r\n\r\n    function banBots(address[] memory bots_to_ban) public onlyOwner {\r\n        for (uint i = 0; i < bots_to_ban.length; ++i) {\r\n            bots[bots_to_ban[i]] = true;\r\n        }\r\n    }\r\n\r\n    function unbanBot(address unban_me) public onlyOwner {\r\n        bots[unban_me] = false;\r\n    }\r\n\r\n    function totalSupply() public override view returns (uint256) {\r\n        return token_total;\r\n    }\r\n\r\n    function balanceOf(address token_owner) public override view returns (uint256) {\r\n        if (token_owner == burn_address && exclude_burn_address) \r\n            return tokens_owned[burn_address];\r\n        return tokenFromReflection(reserves_owned[token_owner]);\r\n    }\r\n\r\n    function transfer(address receiver, uint256 num_tokens) public override returns (bool) {\r\n        require(\r\n            excluded_from_fees[msg.sender] || \r\n            excluded_from_fees[receiver] || \r\n            trading_open\r\n        );\r\n        transferStageInitialChecks(msg.sender, receiver, num_tokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address delegate, uint256 num_tokens) public override returns (bool) {\r\n        approveOthers(msg.sender, delegate, num_tokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address delegate) public override view returns (uint) {\r\n        return allowances[owner][delegate];\r\n    }\r\n\r\n    function transferFrom(address owner, address buyer, uint256 num_tokens) public override returns (bool) {\r\n        require(num_tokens <= allowances[owner][msg.sender], \"Cannot spend more tokens than the allowance\");\r\n        transferStageInitialChecks(owner, buyer, num_tokens);\r\n        approve(owner, allowances[owner][msg.sender] - num_tokens);\r\n        return true;\r\n    }\r\n\r\n    function approveOthers(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function editFeesOnAddress(address addr, bool true_or_false) external onlyOwner {\r\n        excluded_from_fees[addr] = true_or_false;\r\n    }\r\n\r\n    modifier swapLock {\r\n        swap_locked = true;\r\n        _;\r\n        swap_locked = false;\r\n    }\r\n\r\n    function setMaxTXPercentage(uint256 new_max_tx) public onlyOwner {\r\n        require(new_max_tx > 0);\r\n        max_tx_amount = ((token_total * new_max_tx) / 100);\r\n\r\n    }\r\n\r\n    function transferStageInitialChecks(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"Can't transfer from 0 address\");\r\n        require(to != address(0), \"Can't transfer to 0 address\");\r\n        require(amount > 0, \"Must transfer more than 0 tokens\");\r\n        require(!bots[from] && !bots[to], \"Not on my watch\");\r\n        if (from != owner() && to != owner()) {\r\n            if (!swap_locked) {\r\n                if (from == uniswapV2_pair && to != address(uniswapv2_router) && cooldown_enabled && !excluded_from_fees[to]) {\r\n                    require(amount <= max_tx_amount, \"Transfer amount exceeds maximum amount\");\r\n                    require(cooldowns[to] < block.timestamp);\r\n                    cooldowns[to] = block.timestamp + (30 seconds);\r\n                }\r\n                if (from != uniswapV2_pair && trading_open) {\r\n                    swapAndLiquify();\r\n                }\r\n            }\r\n        }\r\n        transferStageToken(from, to, amount);\r\n    }\r\n    \r\n    function swapAndLiquify() private swapLock {\r\n        uint256 fee_balance = balanceOf(address(this)) - liquidity_tokens;\r\n        bool over_liquify_threshold = (liquidity_tokens >= liquify_threshold);\r\n        if (liquidity_fee != 0 && over_liquify_threshold) {\r\n            uint256 half = liquidity_tokens / 2;\r\n            uint256 other_half = liquidity_tokens - half;\r\n            uint256 swap_this = half + fee_balance;\r\n            swapTokensForETH(swap_this);\r\n            uint256 eth_balance = address(this).balance;\r\n            uint256 fee_total = (((liquidity_fee*10)/2) + team_fee*10);\r\n            uint256 liq_share = (eth_balance / fee_total) * (liquidity_fee*10);\r\n            addLiquidity(other_half, liq_share);\r\n            liquidity_tokens = 0;\r\n        }\r\n        if (fee_tokens > 0) { \r\n            if (!over_liquify_threshold) {\r\n                swapTokensForETH(fee_balance);\r\n            }\r\n            fee_tokens = 0;\r\n            uint256 balance = address(this).balance;\r\n            if (balance > 0)\r\n                fee_addr.transfer(balance);\r\n        }\r\n    }\r\n\r\n    //This function is to circumvent uniswap maximum slippage values\r\n    //just incase tokens back up and the swap gets jammed\r\n    //this shouldn't happen, but if it does, this fixes it\r\n    function manualLiquify() public onlyFeeTweaker {\r\n        swapAndLiquify();\r\n    }\r\n\r\n    function transferStageToken(address from, address to, uint256 amount) private {\r\n        bool cancel_fees = false;\r\n        if (excluded_from_fees[from] || excluded_from_fees[to]) {\r\n            cancel_fees = true;\r\n        }\r\n        transferStageStandard(from, to, amount, cancel_fees);\r\n    }\r\n\r\n    function transferStageStandard(address from, address to, uint256 t_initial, bool cancel_fees) private {\r\n        uint256 current_rate = getRate();\r\n        uint256 r_amount = t_initial * current_rate;\r\n        uint256 r_xfer_amount = r_amount;\r\n        if (!cancel_fees) {\r\n            uint256 one_percent = t_initial / 100;\r\n            if (team_fee != 0) {\r\n                uint256 rteam_fee;\r\n                uint256 tteam_fee;\r\n                (tteam_fee, rteam_fee) = calcRTValue(current_rate, team_fee, one_percent);\r\n                fee_tokens += tteam_fee;\r\n                r_xfer_amount -= rteam_fee;\r\n            }\r\n            if (liquidity_fee != 0) {\r\n                uint256 rliq_fee;\r\n                uint256 tliq_fee;\r\n                (tliq_fee, rliq_fee) = calcRTValue(current_rate, liquidity_fee, one_percent);\r\n                liquidity_tokens += tliq_fee;\r\n                r_xfer_amount -= rliq_fee;\r\n            }\r\n            if (burn_fee != 0) {\r\n                uint256 tburn_fee = one_percent * burn_fee;\r\n                uint256 rburn_fee = tburn_fee * current_rate;\r\n                r_xfer_amount -= rburn_fee;\r\n                reserves_owned[burn_address] = reserves_owned[burn_address] + rburn_fee;\r\n                if (exclude_burn_address)\r\n                    tokens_owned[burn_address] = tokens_owned[burn_address] + tburn_fee;\r\n                emit Transfer(from, burn_address, tburn_fee);\r\n            }\r\n            if (reflection_fee != 0) {\r\n                uint256 rrefl_fee;\r\n                rrefl_fee = (one_percent * reflection_fee) * current_rate;\r\n                reserve_total = reserve_total - rrefl_fee;\r\n                r_xfer_amount -= rrefl_fee;\r\n            }\r\n        }\r\n        reserves_owned[from] = reserves_owned[from] - r_amount;\r\n        reserves_owned[to] = reserves_owned[to] + r_xfer_amount;\r\n        emit Transfer(from, to, (r_xfer_amount / current_rate));\r\n    }\r\n\r\n    function calcRTValue(uint256 current_rate, uint256 fee, uint256 one_percent) private returns (uint256, uint256) {\r\n        uint256 tfee = one_percent * fee;\r\n        uint256 rfee = tfee * current_rate;\r\n        reserves_owned[address(this)] += rfee;\r\n        return (tfee, rfee);\r\n    }\r\n    \r\n    function enableCooldown(bool torf) external onlyOwner {\r\n        cooldown_enabled = torf;\r\n    }\r\n\r\n    function swapTokensForETH(uint256 token_amount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapv2_router.WETH();\r\n        approveOthers(address(this), address(uniswapv2_router), token_amount);\r\n        uniswapv2_router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            token_amount, \r\n            0, \r\n            path, \r\n            address(this), \r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 token_amount, uint256 eth_amount) private {\r\n        approveOthers(address(this), address(uniswapv2_router), token_amount);\r\n        uniswapv2_router.addLiquidityETH{value: eth_amount}(\r\n            address(this), \r\n            token_amount, \r\n            0, \r\n            0, \r\n            owner(), \r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function tokenFromReflection(uint256 reserve_amount) private view returns (uint256) {\r\n        require (reserve_amount <= reserve_total, \"Amount must be less than reserve total\");\r\n        uint256 current_rate = getRate();\r\n        return reserve_amount / current_rate;\r\n    }\r\n\r\n    function getRate() private view returns (uint256) {\r\n        (uint256 reserve_supply, uint256 token_supply) = getSupply();\r\n        return reserve_supply / token_supply;\r\n    }\r\n\r\n    function getSupply() private view returns(uint256, uint256) {\r\n        uint256 r_supply = reserve_total;\r\n        uint256 t_supply = token_total;\r\n        if (exclude_burn_address) {\r\n            if (reserves_owned[burn_address] > r_supply || tokens_owned[burn_address] > t_supply)\r\n                return (reserve_total, token_total);\r\n            r_supply = r_supply - reserves_owned[burn_address];\r\n            t_supply = t_supply - tokens_owned[burn_address];\r\n        }\r\n        if (r_supply < (reserve_total / token_total))\r\n            return (reserve_total, token_total);\r\n        return (r_supply, t_supply);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function excludeBurnAddress() public onlyFeeTweaker {\r\n        require(!exclude_burn_address, \"Already excluded\");\r\n        if (reserves_owned[burn_address] > 0)\r\n            tokens_owned[burn_address] = tokenFromReflection(reserves_owned[burn_address]);\r\n        exclude_burn_address = true;\r\n    }\r\n\r\n    function includeBurnAddress() public onlyFeeTweaker {\r\n        require(exclude_burn_address, \"Already included\");\r\n        tokens_owned[burn_address] = 0;\r\n        exclude_burn_address = false;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fee_tweaker_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"fee_addr_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity_fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reflection_fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burn_fee\",\"type\":\"uint256\"}],\"name\":\"FeesTweaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"num_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_to_ban\",\"type\":\"address[]\"}],\"name\":\"banBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"true_or_false\",\"type\":\"bool\"}],\"name\":\"editFeesOnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"torf\",\"type\":\"bool\"}],\"name\":\"enableCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"includeBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reflection_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_max_tx\",\"type\":\"uint256\"}],\"name\":\"setMaxTXPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"num_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"num_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_liquidity_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_reflection_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_burn_fee\",\"type\":\"uint256\"}],\"name\":\"tweakFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"unban_me\",\"type\":\"address\"}],\"name\":\"unbanBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2_pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"MoonDog","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"25000","ConstructorArguments":"000000000000000000000000af2de1d368a6128cd0c0c23df2ef38c4b9c562f2000000000000000000000000ab2e295476c4d721852aa9227cfe278191182ba7","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ee5c6af13d60d19a05ee075a61e9c711dcb1698c6a40aee63927bdfedd7f7598"}]}