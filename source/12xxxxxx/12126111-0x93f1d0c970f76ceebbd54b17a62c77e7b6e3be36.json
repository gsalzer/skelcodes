{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.3;\r\npragma experimental ABIEncoderV2;\r\ncontract ethereumbillboard {\r\n    bytes32[] private tags;\r\n    bytes32[] private urls;\r\n    bytes32[] private imgs;\r\n    address private owner;\r\n    uint256 private cost = 0.005 ether; //per char\r\n    modifier ceo {\r\n        require(owner == msg.sender);\r\n        _;\r\n    }\r\n   constructor ()  {\r\n    owner = msg.sender;\r\n   }\r\n   function changeOwner(address newO) public ceo {\r\n        owner = newO;\r\n    }\r\n    receive() external payable {}\r\n    function addTag(string calldata tag_weight, string calldata url, string calldata imgUrl, uint256 weight) external payable {\r\n        require(weight>0);\r\n        if(msg.sender!=owner) require(msg.value>=(bytes(tag_weight).length-2) * cost * weight );\r\n        tags.push(sToB32(tag_weight));\r\n        urls.push(sToB32(url));\r\n        imgs.push(sToB32(imgUrl));\r\n    }\r\n    function withdraw() ceo public  {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n    function chgCost(uint256 price) ceo public {\r\n        cost=price;\r\n    }\r\n    function sToB32(string memory source) internal pure returns (bytes32 result) {\r\n        bytes memory tempEmptyStringTest = bytes(source);\r\n        if (tempEmptyStringTest.length == 0) {\r\n            return 0x0;\r\n        }\r\n        assembly {\r\n            result := mload(add(source, 32))\r\n        }\r\n    }\r\n    function strA(bytes32[] memory bA) internal pure returns (string[]  memory){\r\n        string[] memory sA = new string[](bA.length);\r\n            for (uint i = 0; i < bA.length; i++) {\r\n                sA[i] = string(abi.encodePacked(bA[i]));\r\n            }\r\n            return sA;\r\n    }\r\n   function getTags()  public view returns ( string[] memory tagsA, string[] memory urlsA, string[] memory imgUrlsA,uint256 price) {\r\n      tagsA = strA(tags);\r\n      urlsA = strA(urls);\r\n      imgUrlsA = strA(imgs);\r\n      price = cost;\r\n   }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tag_weight\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imgUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"addTag\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newO\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"chgCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTags\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"tagsA\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"urlsA\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"imgUrlsA\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ethereumbillboard","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"10","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fe8ffe63661769d21d6701342953a230ab8e931220ed32c1fa9d9ce71e356af2"}]}