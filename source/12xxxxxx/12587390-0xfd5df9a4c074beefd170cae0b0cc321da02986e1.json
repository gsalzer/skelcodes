{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/boss/Documents/Plasma-contracts-main/Spaceport-IDO-LaunchPad/contracts/Spaceport-v1-periphery/contracts/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/GSN/Context.sol\\n// Subject to the MIT license.\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"/Users/boss/Documents/Plasma-contracts-main/Spaceport-IDO-LaunchPad/contracts/Spaceport-v1-periphery/contracts/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/EnumerableSet.sol\\r\\n// Subject to the MIT license.\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n */\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping (bytes32 => uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\r\\n\\r\\n            bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n            // Move the last value to the index where the value to delete is\\r\\n            set._values[toDeleteIndex] = lastvalue;\\r\\n            // Update the index for the moved value\\r\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint256(_at(set._inner, index)));\\r\\n    }\\r\\n\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/Users/boss/Documents/Plasma-contracts-main/Spaceport-IDO-LaunchPad/contracts/Spaceport-v1-periphery/contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\"\r\n    },\r\n    \"/Users/boss/Documents/Plasma-contracts-main/Spaceport-IDO-LaunchPad/contracts/Spaceport-v1-periphery/contracts/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n// Subject to the MIT license.\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"/Users/boss/Documents/Plasma-contracts-main/Spaceport-IDO-LaunchPad/contracts/Spaceport-v1-periphery/contracts/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\r\\n// Subject to the MIT license.\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor () internal {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and make it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/Users/boss/Documents/Plasma-contracts-main/Spaceport-IDO-LaunchPad/contracts/Spaceport-v1-periphery/contracts/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\\r\\n// Subject to the MIT license.\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/Users/boss/Documents/Plasma-contracts-main/Spaceport-IDO-LaunchPad/contracts/Spaceport-v1-periphery/contracts/SpaceportGeneratorv1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// Generates SpacePort contracts and registers them in the SpaceFactory \\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./Spaceportv1.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./TransferHelper.sol\\\";\\r\\nimport \\\"./SpaceportHelper.sol\\\";\\r\\n\\r\\ninterface ISpaceportFactory {\\r\\n    function registerSpaceport (address _spaceportAddress) external;\\r\\n    function spaceportIsRegistered(address _spaceportAddress) external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface IPlasmaswapLocker {\\r\\n    function lockLPToken (address _lpToken, uint256 _amount, uint256 _unlock_date, address payable _withdrawer) external payable;\\r\\n}\\r\\n\\r\\ncontract SpaceportGeneratorv1 is Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    \\r\\n    ISpaceportFactory public SPACEPORT_FACTORY;\\r\\n    ISpaceportSettings public SPACEPORT_SETTINGS;\\r\\n    \\r\\n    struct SpaceportParams {\\r\\n        uint256 amount; // the amount of spaceport tokens up for presale\\r\\n        uint256 tokenPrice; // 1 base token = ? s_tokens, fixed pricev\\r\\n        uint256 maxSpendPerBuyer; // maximum base token BUY amount per account\\r\\n        uint256 hardcap;\\r\\n        uint256 softcap;\\r\\n        uint256 liquidityPercent; // divided by 1000\\r\\n        uint256 listingRate; // sale token listing price on plasmaswap\\r\\n        uint256 startblock;\\r\\n        uint256 endblock;\\r\\n        uint256 lockPeriod; // unix timestamp -> e.g. 2 weeks\\r\\n    }\\r\\n    \\r\\n    constructor() public {\\r\\n        SPACEPORT_FACTORY = ISpaceportFactory(0x67019Edf7E115d17086e1660b577CAdccc57dFf3);\\r\\n        SPACEPORT_SETTINGS = ISpaceportSettings(0x90De443BDC372f9aA944cF18fb6c82980807Cb0a);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @notice Creates a new Spaceport contract and verify it in the SpaceportFactory.sol.\\r\\n     */\\r\\n    function createSpaceport (\\r\\n      address payable _spaceportOwner,\\r\\n      IERC20 _spaceportToken,\\r\\n      IERC20 _baseToken,\\r\\n      uint256[10] memory uint_params,\\r\\n      uint256[2] memory vesting_params\\r\\n      ) public payable {\\r\\n        \\r\\n        SpaceportParams memory params;\\r\\n        params.amount = uint_params[0];\\r\\n        params.tokenPrice = uint_params[1];\\r\\n        params.maxSpendPerBuyer = uint_params[2];\\r\\n        params.hardcap = uint_params[3];\\r\\n        params.softcap = uint_params[4];\\r\\n        params.liquidityPercent = uint_params[5];\\r\\n        params.listingRate = uint_params[6];\\r\\n        params.startblock = uint_params[7];\\r\\n        params.endblock = uint_params[8];\\r\\n        params.lockPeriod = uint_params[9];\\r\\n        \\r\\n        if (params.lockPeriod < 4 weeks) {\\r\\n            params.lockPeriod = 4 weeks;\\r\\n        }\\r\\n        \\r\\n        // Charge ETH fee for contract creation\\r\\n        require(msg.value == SPACEPORT_SETTINGS.getEthCreationFee(), 'FEE NOT MET');\\r\\n        SPACEPORT_SETTINGS.getEthAddress().transfer(SPACEPORT_SETTINGS.getEthCreationFee());\\r\\n        \\r\\n        \\r\\n        require(params.amount >= 10000, 'MIN DIVIS'); // minimum divisibility\\r\\n        require(params.endblock.sub(params.startblock) <= SPACEPORT_SETTINGS.getMaxSpaceportLength());\\r\\n        require(params.tokenPrice.mul(params.hardcap) > 0, 'INVALID PARAMS'); // ensure no overflow for future calculations\\r\\n        require(params.liquidityPercent >= 300 && params.liquidityPercent <= 1000, 'MIN LIQUIDITY'); // 30% minimum liquidity lock\\r\\n        \\r\\n        uint256 tokensRequiredForSpaceport = SpaceportHelper.calculateAmountRequired(params.amount, params.tokenPrice, params.listingRate, params.liquidityPercent, SPACEPORT_SETTINGS.getTokenFee());\\r\\n      \\r\\n        Spaceportv1 newSpaceport = new Spaceportv1(address(this));\\r\\n        TransferHelper.safeTransferFrom(address(_spaceportToken), address(msg.sender), address(newSpaceport), tokensRequiredForSpaceport);\\r\\n        newSpaceport.init1(_spaceportOwner, params.amount, params.tokenPrice, params.maxSpendPerBuyer, params.hardcap, params.softcap, \\r\\n        params.liquidityPercent, params.listingRate, params.startblock, params.endblock, params.lockPeriod);\\r\\n        newSpaceport.init2(_baseToken, _spaceportToken, SPACEPORT_SETTINGS.getBaseFee(), SPACEPORT_SETTINGS.getTokenFee(), SPACEPORT_SETTINGS.getEthAddress(), SPACEPORT_SETTINGS.getTokenAddress(), vesting_params[0], vesting_params[1]);\\r\\n        SPACEPORT_FACTORY.registerSpaceport(address(newSpaceport));\\r\\n    }\\r\\n    \\r\\n}\"\r\n    },\r\n    \"/Users/boss/Documents/Plasma-contracts-main/Spaceport-IDO-LaunchPad/contracts/Spaceport-v1-periphery/contracts/SpaceportHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\nlibrary SpaceportHelper {\\r\\n    using SafeMath for uint256;\\r\\n    \\r\\n    function calculateAmountRequired (uint256 _amount, uint256 _tokenPrice, uint256 _listingRate, uint256 _liquidityPercent, uint256 _tokenFee) public pure returns (uint256) {\\r\\n        uint256 listingRatePercent = _listingRate.mul(1000).div(_tokenPrice);\\r\\n        uint256 plfiTokenFee = _amount.mul(_tokenFee).div(1000);\\r\\n        uint256 amountMinusFee = _amount.sub(plfiTokenFee);\\r\\n        uint256 liquidityRequired = amountMinusFee.mul(_liquidityPercent).mul(listingRatePercent).div(1000000);\\r\\n        uint256 tokensRequiredForSpaceport = _amount.add(liquidityRequired).add(plfiTokenFee);\\r\\n        return tokensRequiredForSpaceport;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/Users/boss/Documents/Plasma-contracts-main/Spaceport-IDO-LaunchPad/contracts/Spaceport-v1-periphery/contracts/Spaceportv1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// SpacePort v.1\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./TransferHelper.sol\\\";\\r\\nimport \\\"./EnumerableSet.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./ReentrancyGuard.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IPlasmaswapFactory {\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\\r\\n\\r\\ninterface ISpaceportLockForwarder {\\r\\n    function lockLiquidity (IERC20 _baseToken, IERC20 _saleToken, uint256 _baseAmount, uint256 _saleAmount, uint256 _unlock_date, address payable _withdrawer) external;\\r\\n    function plasmaswapPairIsInitialised (address _token0, address _token1) external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface IWETH {\\r\\n    function deposit() external payable;\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function withdraw(uint) external;\\r\\n}\\r\\n\\r\\ninterface ISpaceportSettings {\\r\\n    function getMaxSpaceportLength () external view returns (uint256);\\r\\n    function getRound1Length () external view returns (uint256);\\r\\n    function userHoldsSufficientRound1Token (address _user) external view returns (bool);\\r\\n    function getBaseFee () external view returns (uint256);\\r\\n    function getTokenFee () external view returns (uint256);\\r\\n    function getEthAddress () external view returns (address payable);\\r\\n    function getTokenAddress () external view returns (address payable);\\r\\n    function getEthCreationFee () external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract Spaceportv1 is ReentrancyGuard {\\r\\n  using SafeMath for uint256;\\r\\n  using EnumerableSet for EnumerableSet.AddressSet;\\r\\n  \\r\\n  event spaceportUserDeposit(uint256 value);\\r\\n  event spaceportUserWithdrawTokens(uint256 value);\\r\\n  event spaceportUserWithdrawBaseTokens(uint256 value);\\r\\n  event spaceportOwnerWithdrawTokens();\\r\\n  event spaceportAddLiquidity();\\r\\n\\r\\n  /// @notice Spaceport Contract Version, used to choose the correct ABI to decode the contract\\r\\n  uint256 public CONTRACT_VERSION = 1;\\r\\n  \\r\\n  struct SpaceportInfo {\\r\\n    address payable SPACEPORT_OWNER;\\r\\n    IERC20 S_TOKEN; // sale token\\r\\n    IERC20 B_TOKEN; // base token // usually WETH (ETH)\\r\\n    uint256 TOKEN_PRICE; // 1 base token = ? s_tokens, fixed price\\r\\n    uint256 MAX_SPEND_PER_BUYER; // maximum base token BUY amount per account\\r\\n    uint256 AMOUNT; // the amount of spaceport tokens up for presale\\r\\n    uint256 HARDCAP;\\r\\n    uint256 SOFTCAP;\\r\\n    uint256 LIQUIDITY_PERCENT; // divided by 1000 - to be locked !\\r\\n    uint256 LISTING_RATE; // fixed rate at which the token will list on plasmaswap - start rate\\r\\n    uint256 START_BLOCK;\\r\\n    uint256 END_BLOCK;\\r\\n    uint256 LOCK_PERIOD; // unix timestamp -> e.g. 2 weeks\\r\\n    bool SPACEPORT_IN_ETH; // if this flag is true the Spaceport is raising ETH, otherwise an ERC20 token such as DAI\\r\\n  }\\r\\n\\r\\n  struct SpaceportVesting {\\r\\n    uint256 vestingCliff;\\r\\n    uint256 vestingEnd;\\r\\n  }\\r\\n\\r\\n  struct SpaceportFeeInfo {\\r\\n    uint256 PLFI_BASE_FEE; // divided by 1000\\r\\n    uint256 PLFI_TOKEN_FEE; // divided by 1000\\r\\n    address payable BASE_FEE_ADDRESS;\\r\\n    address payable TOKEN_FEE_ADDRESS;\\r\\n  }\\r\\n  \\r\\n  struct SpaceportStatus {\\r\\n    bool WHITELIST_ONLY; // if set to true only whitelisted members may participate\\r\\n    bool LP_GENERATION_COMPLETE; // final flag required to end a Spaceport and enable withdrawls\\r\\n    bool FORCE_FAILED; // set this flag to force fail the Spaceport\\r\\n    uint256 TOTAL_BASE_COLLECTED; // total base currency raised (usually ETH)\\r\\n    uint256 TOTAL_TOKENS_SOLD; // total Spaceport tokens sold\\r\\n    uint256 TOTAL_TOKENS_WITHDRAWN; // total tokens withdrawn post successful Spaceport\\r\\n    uint256 TOTAL_BASE_WITHDRAWN; // total base tokens withdrawn on Spaceport failure\\r\\n    uint256 ROUND1_LENGTH; // in blocks\\r\\n    uint256 NUM_BUYERS; // number of unique participants\\r\\n    uint256 LP_GENERATION_COMPLETE_TIME;  //  the date when LP is done\\r\\n  }\\r\\n\\r\\n  struct BuyerInfo {\\r\\n    uint256 baseDeposited; // total base token (usually ETH) deposited by user, can be withdrawn on presale failure\\r\\n    uint256 tokensOwed; // num Spaceport tokens a user is owed, can be withdrawn on presale success\\r\\n    uint256 lastUpdate;\\r\\n    uint256 vestingTokens;\\r\\n    uint256 vestingTokensOwed;\\r\\n    bool vestingRunning;\\r\\n  }\\r\\n  \\r\\n  SpaceportVesting public SPACEPORT_VESTING;\\r\\n  SpaceportInfo public SPACEPORT_INFO;\\r\\n  SpaceportFeeInfo public SPACEPORT_FEE_INFO;\\r\\n  SpaceportStatus public STATUS;\\r\\n  address public SPACEPORT_GENERATOR;\\r\\n  ISpaceportLockForwarder public SPACEPORT_LOCK_FORWARDER;\\r\\n  ISpaceportSettings public SPACEPORT_SETTINGS;\\r\\n  address PLFI_DEV_ADDRESS;\\r\\n  IPlasmaswapFactory public PLASMASWAP_FACTORY;\\r\\n  IWETH public WETH;\\r\\n  mapping(address => BuyerInfo) public BUYERS;\\r\\n  EnumerableSet.AddressSet private WHITELIST;\\r\\n\\r\\n  constructor(address _spaceportGenerator) public {\\r\\n    SPACEPORT_GENERATOR = _spaceportGenerator;\\r\\n    PLASMASWAP_FACTORY = IPlasmaswapFactory(0xd87Ad19db2c4cCbf897106dE034D52e3DD90ea60);\\r\\n    WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\r\\n    SPACEPORT_SETTINGS = ISpaceportSettings(0x90De443BDC372f9aA944cF18fb6c82980807Cb0a);\\r\\n    SPACEPORT_LOCK_FORWARDER = ISpaceportLockForwarder(0x5AD2A6181B1bc6aCAbd7bad268102d68DE54A4eE);\\r\\n    PLFI_DEV_ADDRESS = 0x37CB8941348f04E783f67E19AD937f48DD7355D9;\\r\\n  }\\r\\n  \\r\\n  function init1 (\\r\\n    address payable _spaceportOwner, \\r\\n    uint256 _amount,\\r\\n    uint256 _tokenPrice, \\r\\n    uint256 _maxEthPerBuyer, \\r\\n    uint256 _hardcap, \\r\\n    uint256 _softcap,\\r\\n    uint256 _liquidityPercent,\\r\\n    uint256 _listingRate,\\r\\n    uint256 _startblock,\\r\\n    uint256 _endblock,\\r\\n    uint256 _lockPeriod\\r\\n    ) external {\\r\\n          \\r\\n      require(msg.sender == SPACEPORT_GENERATOR, 'FORBIDDEN');\\r\\n      SPACEPORT_INFO.SPACEPORT_OWNER = _spaceportOwner;\\r\\n      SPACEPORT_INFO.AMOUNT = _amount;\\r\\n      SPACEPORT_INFO.TOKEN_PRICE = _tokenPrice;\\r\\n      SPACEPORT_INFO.MAX_SPEND_PER_BUYER = _maxEthPerBuyer;\\r\\n      SPACEPORT_INFO.HARDCAP = _hardcap;\\r\\n      SPACEPORT_INFO.SOFTCAP = _softcap;\\r\\n      SPACEPORT_INFO.LIQUIDITY_PERCENT = _liquidityPercent;\\r\\n      SPACEPORT_INFO.LISTING_RATE = _listingRate;\\r\\n      SPACEPORT_INFO.START_BLOCK = _startblock;\\r\\n      SPACEPORT_INFO.END_BLOCK = _endblock;\\r\\n      SPACEPORT_INFO.LOCK_PERIOD = _lockPeriod;\\r\\n  }\\r\\n  \\r\\n  function init2 (\\r\\n    IERC20 _baseToken,\\r\\n    IERC20 _spaceportToken,\\r\\n    uint256 _plfiBaseFee,\\r\\n    uint256 _plfiTokenFee,\\r\\n    address payable _baseFeeAddress,\\r\\n    address payable _tokenFeeAddress,\\r\\n    uint256 _vestingCliff,\\r\\n    uint256 _vestingEnd\\r\\n    ) external {\\r\\n          \\r\\n      require(msg.sender == SPACEPORT_GENERATOR, 'FORBIDDEN');\\r\\n      // require(!SPACEPORT_LOCK_FORWARDER.plasmaswapPairIsInitialised(address(_spaceportToken), address(_baseToken)), 'PAIR INITIALISED');\\r\\n      \\r\\n      SPACEPORT_INFO.SPACEPORT_IN_ETH = address(_baseToken) == address(WETH);\\r\\n      SPACEPORT_INFO.S_TOKEN = _spaceportToken;\\r\\n      SPACEPORT_INFO.B_TOKEN = _baseToken;\\r\\n      SPACEPORT_FEE_INFO.PLFI_BASE_FEE = _plfiBaseFee;\\r\\n      SPACEPORT_FEE_INFO.PLFI_TOKEN_FEE = _plfiTokenFee;\\r\\n      \\r\\n      SPACEPORT_FEE_INFO.BASE_FEE_ADDRESS = _baseFeeAddress;\\r\\n      SPACEPORT_FEE_INFO.TOKEN_FEE_ADDRESS = _tokenFeeAddress;\\r\\n      STATUS.ROUND1_LENGTH = SPACEPORT_SETTINGS.getRound1Length();\\r\\n\\r\\n      SPACEPORT_VESTING.vestingCliff = _vestingCliff;\\r\\n      SPACEPORT_VESTING.vestingEnd = _vestingEnd;\\r\\n  }\\r\\n  \\r\\n  modifier onlySpaceportOwner() {\\r\\n    require(SPACEPORT_INFO.SPACEPORT_OWNER == msg.sender, \\\"NOT SPACEPORT OWNER\\\");\\r\\n    _;\\r\\n  }\\r\\n  \\r\\n  function spaceportStatus () public view returns (uint256) {\\r\\n    if (STATUS.FORCE_FAILED) {\\r\\n      return 3; // FAILED - force fail\\r\\n    }\\r\\n    if ((block.number > SPACEPORT_INFO.END_BLOCK) && (STATUS.TOTAL_BASE_COLLECTED < SPACEPORT_INFO.SOFTCAP)) {\\r\\n      return 3; // FAILED - softcap not met by end block\\r\\n    }\\r\\n    if (STATUS.TOTAL_BASE_COLLECTED >= SPACEPORT_INFO.HARDCAP) {\\r\\n      return 2; // SUCCESS - hardcap met\\r\\n    }\\r\\n    if ((block.number > SPACEPORT_INFO.END_BLOCK) && (STATUS.TOTAL_BASE_COLLECTED >= SPACEPORT_INFO.SOFTCAP)) {\\r\\n      return 2; // SUCCESS - endblock and soft cap reached\\r\\n    }\\r\\n    if ((block.number >= SPACEPORT_INFO.START_BLOCK) && (block.number <= SPACEPORT_INFO.END_BLOCK)) {\\r\\n      return 1; // ACTIVE - deposits enabled\\r\\n    }\\r\\n    return 0; // QUED - awaiting start block\\r\\n  }\\r\\n  \\r\\n  // accepts msg.value for eth or _amount for ERC20 tokens\\r\\n  function userDeposit (uint256 _amount) external payable nonReentrant {\\r\\n    require(spaceportStatus() == 1, 'NOT ACTIVE'); // ACTIVE\\r\\n    if (STATUS.WHITELIST_ONLY) {\\r\\n      require(WHITELIST.contains(msg.sender), 'NOT WHITELISTED');\\r\\n    }\\r\\n    // Spaceport Round 1 - require participant to hold a certain token and balance\\r\\n    if (block.number < SPACEPORT_INFO.START_BLOCK + STATUS.ROUND1_LENGTH) { // 276 blocks = 1 hour\\r\\n        require(SPACEPORT_SETTINGS.userHoldsSufficientRound1Token(msg.sender), 'INSUFFICENT ROUND 1 TOKEN BALANCE');\\r\\n    }\\r\\n    BuyerInfo storage buyer = BUYERS[msg.sender];\\r\\n    uint256 amount_in = SPACEPORT_INFO.SPACEPORT_IN_ETH ? msg.value : _amount;\\r\\n    uint256 allowance = SPACEPORT_INFO.MAX_SPEND_PER_BUYER.sub(buyer.baseDeposited);\\r\\n    uint256 remaining = SPACEPORT_INFO.HARDCAP - STATUS.TOTAL_BASE_COLLECTED;\\r\\n    allowance = allowance > remaining ? remaining : allowance;\\r\\n    if (amount_in > allowance) {\\r\\n      amount_in = allowance;\\r\\n    }\\r\\n    uint256 tokensSold = amount_in.mul(SPACEPORT_INFO.TOKEN_PRICE).div(10 ** uint256(SPACEPORT_INFO.B_TOKEN.decimals()));\\r\\n    require(tokensSold > 0, 'ZERO TOKENS');\\r\\n    if (buyer.baseDeposited == 0) {\\r\\n        STATUS.NUM_BUYERS++;\\r\\n    }\\r\\n\\r\\n    buyer.baseDeposited = buyer.baseDeposited.add(amount_in);\\r\\n    buyer.tokensOwed = buyer.tokensOwed.add(tokensSold);\\r\\n    buyer.vestingRunning = false;\\r\\n\\r\\n    STATUS.TOTAL_BASE_COLLECTED = STATUS.TOTAL_BASE_COLLECTED.add(amount_in);\\r\\n    STATUS.TOTAL_TOKENS_SOLD = STATUS.TOTAL_TOKENS_SOLD.add(tokensSold);\\r\\n    \\r\\n    // return unused ETH\\r\\n    if (SPACEPORT_INFO.SPACEPORT_IN_ETH && amount_in < msg.value) {\\r\\n      msg.sender.transfer(msg.value.sub(amount_in));\\r\\n    }\\r\\n    // deduct non ETH token from user\\r\\n    if (!SPACEPORT_INFO.SPACEPORT_IN_ETH) {\\r\\n      TransferHelper.safeTransferFrom(address(SPACEPORT_INFO.B_TOKEN), msg.sender, address(this), amount_in);\\r\\n    }\\r\\n    emit spaceportUserDeposit(amount_in);\\r\\n  }\\r\\n  \\r\\n  // withdraw spaceport tokens\\r\\n  // percentile withdrawls allows fee on transfer or rebasing tokens to still work\\r\\n  function userWithdrawTokens () external nonReentrant {\\r\\n    require(STATUS.LP_GENERATION_COMPLETE, 'AWAITING LP GENERATION');\\r\\n    BuyerInfo storage buyer = BUYERS[msg.sender];\\r\\n    require(STATUS.LP_GENERATION_COMPLETE_TIME + SPACEPORT_VESTING.vestingCliff < block.timestamp, \\\"vesting cliff : not time yet\\\");\\r\\n\\r\\n    uint256 tokensRemainingDenominator = STATUS.TOTAL_TOKENS_SOLD.sub(STATUS.TOTAL_TOKENS_WITHDRAWN);\\r\\n    require(tokensRemainingDenominator > 0, 'NOTHING TO WITHDRAW');\\r\\n\\r\\n    uint256 tokensOwed = SPACEPORT_INFO.S_TOKEN.balanceOf(address(this)).mul(buyer.tokensOwed).div(tokensRemainingDenominator);\\r\\n    require(tokensOwed > 0, 'OWED TOKENS NOT FOUND');\\r\\n    \\r\\n    if(!buyer.vestingRunning)\\r\\n    {\\r\\n      buyer.vestingTokens = tokensOwed;\\r\\n      buyer.vestingTokensOwed = buyer.tokensOwed;\\r\\n      buyer.lastUpdate = STATUS.LP_GENERATION_COMPLETE_TIME;\\r\\n      buyer.vestingRunning = true;\\r\\n    }\\r\\n\\r\\n    if(STATUS.LP_GENERATION_COMPLETE_TIME + SPACEPORT_VESTING.vestingEnd < block.timestamp) {\\r\\n      STATUS.TOTAL_TOKENS_WITHDRAWN = STATUS.TOTAL_TOKENS_WITHDRAWN.add(buyer.tokensOwed);\\r\\n      buyer.tokensOwed = 0;\\r\\n    } \\r\\n    else {\\r\\n      tokensOwed = buyer.vestingTokens.mul(block.timestamp - buyer.lastUpdate).div(SPACEPORT_VESTING.vestingEnd);\\r\\n      buyer.lastUpdate = block.timestamp;\\r\\n\\r\\n      uint256 diff = tokensOwed.div(buyer.vestingTokens);\\r\\n      STATUS.TOTAL_TOKENS_WITHDRAWN = STATUS.TOTAL_TOKENS_WITHDRAWN.add(buyer.vestingTokensOwed.mul(diff));\\r\\n\\r\\n      buyer.tokensOwed = buyer.tokensOwed.sub(buyer.vestingTokensOwed.mul(diff));\\r\\n      require(buyer.tokensOwed > 0, 'NOTHING TO CLAIM');\\r\\n    }\\r\\n\\r\\n    TransferHelper.safeTransfer(address(SPACEPORT_INFO.S_TOKEN), msg.sender, tokensOwed);\\r\\n    emit spaceportUserWithdrawTokens(tokensOwed);\\r\\n  }\\r\\n  \\r\\n  // on spaceport failure\\r\\n  // percentile withdrawls allows fee on transfer or rebasing tokens to still work\\r\\n  function userWithdrawBaseTokens () external nonReentrant {\\r\\n    require(spaceportStatus() == 3, 'NOT FAILED'); // FAILED\\r\\n    BuyerInfo storage buyer = BUYERS[msg.sender];\\r\\n    uint256 baseRemainingDenominator = STATUS.TOTAL_BASE_COLLECTED.sub(STATUS.TOTAL_BASE_WITHDRAWN);\\r\\n    uint256 remainingBaseBalance = SPACEPORT_INFO.SPACEPORT_IN_ETH ? address(this).balance : SPACEPORT_INFO.B_TOKEN.balanceOf(address(this));\\r\\n    uint256 tokensOwed = remainingBaseBalance.mul(buyer.baseDeposited).div(baseRemainingDenominator);\\r\\n    require(tokensOwed > 0, 'NOTHING TO WITHDRAW');\\r\\n    STATUS.TOTAL_BASE_WITHDRAWN = STATUS.TOTAL_BASE_WITHDRAWN.add(buyer.baseDeposited);\\r\\n    buyer.baseDeposited = 0;\\r\\n    TransferHelper.safeTransferBaseToken(address(SPACEPORT_INFO.B_TOKEN), msg.sender, tokensOwed, !SPACEPORT_INFO.SPACEPORT_IN_ETH);\\r\\n    emit spaceportUserWithdrawBaseTokens(tokensOwed);\\r\\n  }\\r\\n  \\r\\n  // failure\\r\\n  // allows the owner to withdraw the tokens they sent for presale & initial liquidity\\r\\n  function ownerWithdrawTokens () external onlySpaceportOwner {\\r\\n    require(spaceportStatus() == 3); // FAILED\\r\\n    TransferHelper.safeTransfer(address(SPACEPORT_INFO.S_TOKEN), SPACEPORT_INFO.SPACEPORT_OWNER, SPACEPORT_INFO.S_TOKEN.balanceOf(address(this)));\\r\\n    emit spaceportOwnerWithdrawTokens();\\r\\n  }\\r\\n  \\r\\n\\r\\n  // Can be called at any stage before or during the presale to cancel it before it ends.\\r\\n  // If the pair already exists on plasmaswap and it contains the presale token as liquidity \\r\\n  // the final stage of the presale 'addLiquidity()' will fail. This function \\r\\n  // allows anyone to end the presale prematurely to release funds in such a case.\\r\\n  function forceFailIfPairExists () external {\\r\\n    require(!STATUS.LP_GENERATION_COMPLETE && !STATUS.FORCE_FAILED);\\r\\n    if (SPACEPORT_LOCK_FORWARDER.plasmaswapPairIsInitialised(address(SPACEPORT_INFO.S_TOKEN), address(SPACEPORT_INFO.B_TOKEN))) {\\r\\n        STATUS.FORCE_FAILED = true;\\r\\n    }\\r\\n  }\\r\\n  \\r\\n  // if something goes wrong in LP generation\\r\\n  function forceFailByPlfi () external {\\r\\n      require(msg.sender == PLFI_DEV_ADDRESS);\\r\\n      STATUS.FORCE_FAILED = true;\\r\\n  }\\r\\n  \\r\\n  // on spaceport success, this is the final step to end the spaceport, lock liquidity and enable withdrawls of the sale token.\\r\\n  // This function does not use percentile distribution. Rebasing mechanisms, fee on transfers, or any deflationary logic\\r\\n  // are not taken into account at this stage to ensure stated liquidity is locked and the pool is initialised according to \\r\\n  // the spaceport parameters and fixed prices.\\r\\n  function addLiquidity() external nonReentrant {\\r\\n    require(!STATUS.LP_GENERATION_COMPLETE, 'GENERATION COMPLETE');\\r\\n    require(spaceportStatus() == 2, 'NOT SUCCESS'); // SUCCESS\\r\\n    // Fail the spaceport if the pair exists and contains spaceport token liquidity\\r\\n    if (SPACEPORT_LOCK_FORWARDER.plasmaswapPairIsInitialised(address(SPACEPORT_INFO.S_TOKEN), address(SPACEPORT_INFO.B_TOKEN))) {\\r\\n        STATUS.FORCE_FAILED = true;\\r\\n        return;\\r\\n    }\\r\\n    \\r\\n    uint256 plfiBaseFee = STATUS.TOTAL_BASE_COLLECTED.mul(SPACEPORT_FEE_INFO.PLFI_BASE_FEE).div(1000);\\r\\n    \\r\\n    // base token liquidity\\r\\n    uint256 baseLiquidity = STATUS.TOTAL_BASE_COLLECTED.sub(plfiBaseFee).mul(SPACEPORT_INFO.LIQUIDITY_PERCENT).div(1000);\\r\\n    if (SPACEPORT_INFO.SPACEPORT_IN_ETH) {\\r\\n        WETH.deposit{value : baseLiquidity}();\\r\\n    }\\r\\n    TransferHelper.safeApprove(address(SPACEPORT_INFO.B_TOKEN), address(SPACEPORT_LOCK_FORWARDER), baseLiquidity);\\r\\n    \\r\\n    // sale token liquidity\\r\\n    uint256 tokenLiquidity = baseLiquidity.mul(SPACEPORT_INFO.LISTING_RATE).div(10 ** uint256(SPACEPORT_INFO.B_TOKEN.decimals()));\\r\\n    TransferHelper.safeApprove(address(SPACEPORT_INFO.S_TOKEN), address(SPACEPORT_LOCK_FORWARDER), tokenLiquidity);\\r\\n    \\r\\n    SPACEPORT_LOCK_FORWARDER.lockLiquidity(SPACEPORT_INFO.B_TOKEN, SPACEPORT_INFO.S_TOKEN, baseLiquidity, tokenLiquidity, block.timestamp + SPACEPORT_INFO.LOCK_PERIOD, SPACEPORT_INFO.SPACEPORT_OWNER);\\r\\n    \\r\\n    // transfer fees\\r\\n    uint256 plfiTokenFee = STATUS.TOTAL_TOKENS_SOLD.mul(SPACEPORT_FEE_INFO.PLFI_TOKEN_FEE).div(1000);\\r\\n    TransferHelper.safeTransferBaseToken(address(SPACEPORT_INFO.B_TOKEN), SPACEPORT_FEE_INFO.BASE_FEE_ADDRESS, plfiBaseFee, !SPACEPORT_INFO.SPACEPORT_IN_ETH);\\r\\n    TransferHelper.safeTransfer(address(SPACEPORT_INFO.S_TOKEN), SPACEPORT_FEE_INFO.TOKEN_FEE_ADDRESS, plfiTokenFee);\\r\\n    \\r\\n    // burn unsold tokens\\r\\n    uint256 remainingSBalance = SPACEPORT_INFO.S_TOKEN.balanceOf(address(this));\\r\\n    if (remainingSBalance > STATUS.TOTAL_TOKENS_SOLD) {\\r\\n        uint256 burnAmount = remainingSBalance.sub(STATUS.TOTAL_TOKENS_SOLD);\\r\\n        TransferHelper.safeTransfer(address(SPACEPORT_INFO.S_TOKEN), 0x000000000000000000000000000000000000dEaD, burnAmount);\\r\\n    }\\r\\n    \\r\\n    // send remaining base tokens to spaceport owner\\r\\n    uint256 remainingBaseBalance = SPACEPORT_INFO.SPACEPORT_IN_ETH ? address(this).balance : SPACEPORT_INFO.B_TOKEN.balanceOf(address(this));\\r\\n    TransferHelper.safeTransferBaseToken(address(SPACEPORT_INFO.B_TOKEN), SPACEPORT_INFO.SPACEPORT_OWNER, remainingBaseBalance, !SPACEPORT_INFO.SPACEPORT_IN_ETH);\\r\\n    \\r\\n    STATUS.LP_GENERATION_COMPLETE = true;\\r\\n    STATUS.LP_GENERATION_COMPLETE_TIME = block.timestamp;\\r\\n    \\r\\n    emit spaceportAddLiquidity();\\r\\n  }\\r\\n  \\r\\n  function updateMaxSpendLimit(uint256 _maxSpend) external onlySpaceportOwner {\\r\\n    SPACEPORT_INFO.MAX_SPEND_PER_BUYER = _maxSpend;\\r\\n  }\\r\\n  \\r\\n  // postpone or bring a spaceport forward, this will only work when a presale is inactive.\\r\\n  function updateBlocks(uint256 _startBlock, uint256 _endBlock) external onlySpaceportOwner {\\r\\n    require(SPACEPORT_INFO.START_BLOCK > block.number);\\r\\n    require(_endBlock.sub(_startBlock) <= SPACEPORT_SETTINGS.getMaxSpaceportLength());\\r\\n    SPACEPORT_INFO.START_BLOCK = _startBlock;\\r\\n    SPACEPORT_INFO.END_BLOCK = _endBlock;\\r\\n  }\\r\\n\\r\\n  // editable at any stage of the presale\\r\\n  function setWhitelistFlag(bool _flag) external onlySpaceportOwner {\\r\\n    STATUS.WHITELIST_ONLY = _flag;\\r\\n  }\\r\\n\\r\\n  // editable at any stage of the presale\\r\\n  function editWhitelist(address[] memory _users, bool _add) external onlySpaceportOwner {\\r\\n    if (_add) {\\r\\n        for (uint i = 0; i < _users.length; i++) {\\r\\n          WHITELIST.add(_users[i]);\\r\\n        }\\r\\n    } else {\\r\\n        for (uint i = 0; i < _users.length; i++) {\\r\\n          WHITELIST.remove(_users[i]);\\r\\n        }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // whitelist getters\\r\\n  function getWhitelistedUsersLength () external view returns (uint256) {\\r\\n    return WHITELIST.length();\\r\\n  }\\r\\n  \\r\\n  function getWhitelistedUserAtIndex (uint256 _index) external view returns (address) {\\r\\n    return WHITELIST.at(_index);\\r\\n  }\\r\\n  \\r\\n  function getUserWhitelistStatus (address _user) external view returns (bool) {\\r\\n    return WHITELIST.contains(_user);\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"/Users/boss/Documents/Plasma-contracts-main/Spaceport-IDO-LaunchPad/contracts/Spaceport-v1-periphery/contracts/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/**\\r\\n    helper methods for interacting with ERC20 tokens that do not consistently return true/false\\r\\n    with the addition of a transfer function to send eth or an erc20 token\\r\\n*/\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\r\\n    }\\r\\n    \\r\\n    // sends ETH or an erc20 token\\r\\n    function safeTransferBaseToken(address token, address payable to, uint value, bool isERC20) internal {\\r\\n        if (!isERC20) {\\r\\n            to.transfer(value);\\r\\n        } else {\\r\\n            (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n            require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"/Users/boss/Documents/Plasma-contracts-main/Spaceport-IDO-LaunchPad/contracts/Spaceport-v1-periphery/contracts/SpaceportHelper.sol\": {\r\n        \"SpaceportHelper\": \"0x2Ce742a4158E16066F012cd1D311068013a9100C\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SPACEPORT_FACTORY\",\"outputs\":[{\"internalType\":\"contract ISpaceportFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPACEPORT_SETTINGS\",\"outputs\":[{\"internalType\":\"contract ISpaceportSettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_spaceportOwner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_spaceportToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"uint256[10]\",\"name\":\"uint_params\",\"type\":\"uint256[10]\"},{\"internalType\":\"uint256[2]\",\"name\":\"vesting_params\",\"type\":\"uint256[2]\"}],\"name\":\"createSpaceport\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SpaceportGeneratorv1","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}