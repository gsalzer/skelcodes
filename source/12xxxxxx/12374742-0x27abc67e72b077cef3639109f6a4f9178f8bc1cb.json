{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.7.6;\r\n\r\nabstract contract DistributorBase {\r\n    event Distribute(address indexed from, address indexed to, uint256 amount);\r\n\r\n    function _distribute(\r\n        address payable[] calldata addresses,\r\n        uint256[] calldata amounts\r\n    ) internal {\r\n        require(\r\n            addresses.length == amounts.length,\r\n            \"Address array and amount array must have the same length\"\r\n        );\r\n        uint256 n = addresses.length;\r\n        for (uint256 i = 0; i < n; i++) {\r\n            addresses[i].transfer(amounts[i]);\r\n            emit Distribute(msg.sender, addresses[i], amounts[i]);\r\n        }\r\n        require(\r\n            address(this).balance == 0,\r\n            \"Ether input must equal the sum of outputs\"\r\n        );\r\n    }\r\n}\r\n\r\ncontract DistributorOwned is DistributorBase {\r\n    address owner = msg.sender;\r\n    mapping(address => bool) public whitelisted;\r\n    bool public initialized = false;\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(whitelisted[msg.sender], \"Only whitelisted addresses\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner\");\r\n        _;\r\n    }\r\n\r\n    function initialize(address[] calldata addresses) public onlyOwner {\r\n        require(!initialized, \"Already initialized\");\r\n        uint256 n = addresses.length;\r\n        for (uint256 i = 0; i < n; i++) {\r\n            whitelisted[addresses[i]] = true;\r\n        }\r\n        initialized = true;\r\n    }\r\n\r\n    function distribute(\r\n        address payable[] calldata addresses,\r\n        uint256[] calldata amounts\r\n    ) public payable onlyWhitelisted {\r\n        // A check on initialized is not necessary since `onlyWhitelisted`\r\n        // is guaranteed to fail if the contract is not initialized\r\n        _distribute(addresses, amounts);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distribute\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DistributorOwned","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://59159de8d2000a7b74ea1ff6f92c60190169ba3e046c2fa5d913847b095cf2f7"}]}