{"status":"1","message":"OK","result":[{"SourceCode":"// Dependency file: contracts/token/IERC20.sol\r\n\r\n// pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\n// Dependency file: contracts/IToken.sol\r\n\r\n// pragma solidity ^0.5.0;\r\n\r\ninterface IToken {\r\n    function mint(address to, uint256 amount) external;\r\n\r\n    function updateAdmin(address newAdmin) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/GSN/Context.sol\r\n\r\n// pragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/BridgeBase.sol\r\n\r\n// pragma solidity ^0.5.0;\r\n\r\n// import 'contracts/token/IERC20.sol';\r\n// import 'contracts/IToken.sol';\r\n// import 'contracts/GSN/Context.sol';\r\n\r\ncontract BridgeBase is Context {\r\n    address public admin;\r\n    IToken public token;\r\n    mapping(uint256 => bool) public processedNonces;\r\n\r\n    enum Step {Burn, Mint}\r\n    event CrossTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 date,\r\n        uint256 nonce,\r\n        Step indexed step\r\n    );\r\n\r\n    constructor(address _token) public {\r\n        admin = _msgSender();\r\n        token = IToken(_token);\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(\r\n            _msgSender() == admin,\r\n            'Only admin is allowed to execute this operation.'\r\n        );\r\n        _;\r\n    }\r\n\r\n    function updateAdmin(address newAdmin) external onlyAdmin {\r\n        admin = newAdmin;\r\n    }\r\n\r\n    function updateTokenAdmin(address newAdmin) external onlyAdmin {\r\n        token.updateAdmin(newAdmin);\r\n    }\r\n\r\n    function isProcessed(uint256 _nonce) external view returns (bool) {\r\n        return processedNonces[_nonce];\r\n    }\r\n\r\n    function mint(\r\n        address to,\r\n        uint256 amount,\r\n        uint256 otherChainNonce\r\n    ) external onlyAdmin {\r\n        require(\r\n            processedNonces[otherChainNonce] == false,\r\n            'transfer already processed'\r\n        );\r\n        processedNonces[otherChainNonce] = true;\r\n        token.mint(to, amount);\r\n        emit CrossTransfer(\r\n            _msgSender(),\r\n            to,\r\n            amount,\r\n            block.timestamp,\r\n            otherChainNonce,\r\n            Step.Mint\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// Root file: contracts/BridgeEth.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n// import \"contracts/BridgeBase.sol\";\r\n\r\ncontract BridgeEth is BridgeBase {\r\n    constructor(address token) public BridgeBase(token) {}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"otherChainNonce\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"processedNonces\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"isProcessed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"updateTokenAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"date\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"step\",\"type\":\"uint8\"}],\"name\":\"CrossTransfer\",\"type\":\"event\"}]","ContractName":"BridgeEth","CompilerVersion":"v0.5.0+commit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000099c6e435ec259a7e8d65e1955c9423db624ba54c","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://bb1c760493fcac48f9a0b931372e8edc8cd42656ac112b940678e3840eb4bf94"}]}