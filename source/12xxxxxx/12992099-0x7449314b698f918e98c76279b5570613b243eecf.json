{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/EmiStaking02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.5.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/ownership/Ownable.sol\\\";\\nimport \\\"./interface/IEmiERC20.sol\\\";\\nimport \\\"./interface/IEmiRouter.sol\\\";\\nimport \\\"./interface/IEmiswap.sol\\\";\\n\\ncontract EmiStaking02 is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    //-----------------------------------------------------------------------------------\\n    // Data Structures\\n    //-----------------------------------------------------------------------------------\\n    struct LockRecord {\\n        uint256 amountLocked; // Amount of locked tokens in total\\n        uint64 lockDate; // when lock is made\\n        uint64 unlockDate; // when lock is made\\n        uint128 isWithdrawn; // whether or not it is withdrawn already\\n        uint256 id;\\n    }\\n\\n    event StartStaking(\\n        address wallet,\\n        uint256 startDate,\\n        uint256 stopDate,\\n        uint256 stakeID,\\n        address token,\\n        uint256 amount\\n    );\\n\\n    event StakesClaimed(address indexed beneficiary, uint256 stakeId, uint256 amount);\\n    event LockPeriodUpdated(uint256 oldPeriod, uint256 newPeriod);\\n\\n    //-----------------------------------------------------------------------------------\\n    // Variables, Instances, Mappings\\n    //-----------------------------------------------------------------------------------\\n    /* Real beneficiary address is a param to this mapping */\\n    mapping(address => LockRecord[]) private locksTable;\\n\\n    address public lockToken;\\n    uint256 public lockPeriod;\\n    uint256 public stakingEndDate;\\n    uint256 public stakingLastUnlock;\\n    uint256 public maxUSDStakes;\\n\\n    address public emiRouter;\\n    address[] public pathToStables;\\n    uint8 public tokenMode; // 0 = simple ERC20 token, 1 = Emiswap LP-token\\n\\n    /**\\n     * @dev Constructor for the smartcontract\\n     * @param _token Token to stake\\n     * @param _lockPeriod Amount of days to stake (30 days, 60 days etc.)\\n     * @param _maxUSDValue Maximum stakes value in USD per single staker (value in $)\\n     * @param _router EmiRouter address\\n     * @param _path Path to stable coins from stake token\\n     */\\n    constructor(\\n        address _token,\\n        uint256 _lockPeriod,\\n        uint256 _maxUSDValue,\\n        address _router,\\n        address [] memory _path\\n    ) public {\\n        require(_token != address(0), \\\"Token address cannot be empty\\\");\\n        require(_router != address(0), \\\"Router address cannot be empty\\\");\\n        require(_path.length > 0, \\\"Path to stable coins must exist\\\");\\n        require(_lockPeriod > 0, \\\"Lock period cannot be 0\\\");\\n        lockToken = _token;\\n        stakingEndDate = block.timestamp + _lockPeriod;\\n        lockPeriod = _lockPeriod;\\n        emiRouter = _router;\\n        stakingLastUnlock = stakingEndDate + _lockPeriod;\\n        pathToStables = _path;\\n        maxUSDStakes = _maxUSDValue; // 100000 by default\\n        tokenMode = 0; // simple ERC20 token by default\\n    }\\n\\n    /**\\n     * @dev Stake tokens to contract\\n     * @param amount Amount of tokens to stake\\n     */\\n    function stake(uint256 amount) external {\\n        require(block.timestamp < stakingEndDate, \\\"Staking is over\\\");\\n        require(_checkMaxUSDCondition(msg.sender, amount) == true, \\\"Max stakes values in USD reached\\\");\\n        IERC20(lockToken).safeTransferFrom(msg.sender, address(this), amount);\\n        uint256 stakeId = uint256(\\n            keccak256(abi.encodePacked(\\\"Emiswap\\\", block.timestamp, block.difficulty, block.gaslimit))\\n        );\\n        locksTable[msg.sender].push(\\n            LockRecord({\\n                amountLocked: amount,\\n                lockDate: uint64(block.timestamp),\\n                unlockDate: uint64(block.timestamp + lockPeriod),\\n                id: stakeId,\\n                isWithdrawn: 0\\n            })\\n        );\\n        emit StartStaking(msg.sender, block.timestamp, block.timestamp + lockPeriod, stakeId, lockToken, amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw all unlocked tokens not withdrawn already\\n     */\\n    function withdraw() external {\\n        LockRecord[] memory t = locksTable[msg.sender];\\n        uint256 _bal;\\n\\n        for (uint256 i = 0; i < t.length; i++) {\\n            if (t[i].isWithdrawn == 0 && (block.timestamp >= t[i].unlockDate || block.timestamp >= stakingLastUnlock)) {\\n                _bal = _bal.add(t[i].amountLocked);\\n                locksTable[msg.sender][i].isWithdrawn = 1;\\n                emit StakesClaimed(msg.sender, t[i].id, t[i].amountLocked);\\n            }\\n        }\\n\\n        require(_bal > 0, \\\"No stakes to withdraw\\\");\\n\\n        IERC20(lockToken).safeTransfer(msg.sender, _bal);\\n    }\\n\\n    /**\\n     * @dev Return length of stakers' stake array. Admin only\\n     * @param staker Address of staker to pull data for\\n     */\\n    function getStakesLen(address staker) external view onlyOwner returns (uint256) {\\n        return locksTable[staker].length;\\n    }\\n\\n    /**\\n     * @dev Return stake record for the specified staker. Admin only\\n     * @param staker Address of staker to pull data for\\n     * @param idx Index of stake record in array\\n     */\\n    function getStake(address staker, uint256 idx) external view onlyOwner returns (LockRecord memory) {\\n        require(idx < locksTable[staker].length, \\\"Idx is wrong\\\");\\n\\n        return locksTable[staker][idx];\\n    }\\n\\n    /**\\n     * @dev Return length of callee stake array.\\n     */\\n    function getMyStakesLen() external view returns (uint256) {\\n        return locksTable[msg.sender].length;\\n    }\\n\\n    /**\\n     * @dev Return stake record for the callee.\\n     * @param idx Index of stake record in array\\n     */\\n    function getMyStake(uint256 idx) external view returns (LockRecord memory) {\\n        require(idx < locksTable[msg.sender].length, \\\"Idx is wrong\\\");\\n\\n        return locksTable[msg.sender][idx];\\n    }\\n\\n    /**\\n     * @dev Return amount of unlocked tokens ready to be claimed for the specified staker. Admin only\\n     * @param staker Address of staker to pull data for\\n     */\\n    function unlockedBalanceOf(address staker) external view onlyOwner returns (uint256, uint256) {\\n        uint256 _bal = _getBalance(staker, true);\\n        return (_bal, _getUSDValue(_bal));\\n    }\\n\\n    /**\\n     * @dev Return amount of all staked tokens for the callee staker.\\n     */\\n    function balanceOf() external view returns (uint256, uint256) {\\n        uint256 _bal = _getBalance(msg.sender, false);\\n        return (_bal, _getUSDValue(_bal));\\n    }\\n\\n    /**\\n     * @dev Return amount of unlocked tokens ready to be claimed by the callee\\n     */\\n    function myUnlockedBalance() external view returns (uint256, uint256) {\\n        uint256 _bal = _getBalance(msg.sender, true);\\n        return (_bal, _getUSDValue(_bal));\\n    }\\n\\n    /**\\n     * @dev Return amount of unlocked tokens ready to be claimed for the specified staker\\n     * @param staker Address of staker to pull data for\\n     * @param unlockedOnly Only count unlocked balance ready to be withdrawn\\n     */\\n    function _getBalance(address staker, bool unlockedOnly) internal view returns (uint256) {\\n        LockRecord[] memory t = locksTable[staker];\\n        uint256 _bal;\\n\\n        for (uint256 i = 0; i < t.length; i++) {\\n            if (t[i].isWithdrawn == 0) {\\n                if (!unlockedOnly || (unlockedOnly && (block.timestamp >= t[i].unlockDate || block.timestamp >= stakingLastUnlock))) {\\n                  _bal = _bal.add(t[i].amountLocked);\\n                }\\n            }\\n        }\\n        return _bal;\\n    }\\n\\n    /**\\n     * @dev Checks whether USD value of all staker stakes exceed MaxUSD condition\\n     * @param staker Address of staker to pull data for\\n     * @param amount Amount of tokens to make a new stake\\n     */\\n    function _checkMaxUSDCondition(address staker, uint256 amount) internal view returns (bool) {\\n       // calc total token balance for staker\\n        LockRecord[] memory t = locksTable[staker];\\n        uint256 _bal;\\n\\n        for (uint256 i = 0; i < t.length; i++) {\\n            if (t[i].isWithdrawn == 0) { // count only existing tokens -- both locked and unlocked\\n                _bal = _bal.add(t[i].amountLocked);\\n            }\\n        }\\n\\n        return (_getUSDValue(_bal.add(amount)) <= maxUSDStakes);\\n    }\\n\\n    \\n    function getTotals() external view returns (uint256, uint256)\\n    {\\n      uint256 _bal = IERC20(lockToken).balanceOf(address(this));\\n      return (_bal, _getUSDValue(_bal));\\n    }\\n\\n    /**\\n     * @dev Checks whether USD value of all staker stakes exceed MaxUSD condition\\n     * @param amount Amount of tokens to make a new stake\\n     */\\n    function _getUSDValue(uint256 amount) internal view returns (uint256 stakesTotal) {\\n        if (tokenMode==0) { // straight token\\n          uint256 tokenDec = IEmiERC20(pathToStables[pathToStables.length-1]).decimals();\\n          uint256 [] memory tokenAmounts = IEmiRouter(emiRouter).getAmountsOut(amount, pathToStables);\\n          stakesTotal = tokenAmounts[tokenAmounts.length-1].div(10**tokenDec);\\n        } else if (tokenMode==1) {\\n          stakesTotal = _getStakesForLPToken(amount);\\n        } else {\\n          return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return price of all stakes calculated by LP token scheme: price(token0)*2\\n     * @param amount Amount of tokens to stake\\n     */\\n    function _getStakesForLPToken(uint256 amount) internal view returns(uint256)\\n    {\\n       uint256 lpFraction = amount.mul(10**18).div(IERC20(lockToken).totalSupply());\\n       uint256 tokenIdx = 0;\\n\\n       if (pathToStables[0]!=address(IEmiswap(lockToken).tokens(0))) {\\n         tokenIdx = 1;\\n       }\\n\\n       uint256 rsv = IEmiswap(lockToken).getBalanceForAddition(\\n            IEmiswap(lockToken).tokens(tokenIdx)\\n       );\\n\\n       uint256 tokenSrcDec = IEmiERC20(pathToStables[0]).decimals();\\n       uint256 tokenDstDec = IEmiERC20(pathToStables[pathToStables.length-1]).decimals();\\n\\n       uint256 [] memory tokenAmounts = IEmiRouter(emiRouter).getAmountsOut(10**tokenSrcDec, pathToStables);\\n       return tokenAmounts[tokenAmounts.length-1].mul(rsv).mul(2).mul(lpFraction).div(10**(18+tokenSrcDec+tokenDstDec));\\n    }\\n\\n    /**\\n     * @dev Return lock records ready to be unlocked\\n     * @param staker Address of staker to pull data for\\n     */\\n    function getUnlockedRecords(address staker) external view onlyOwner returns (LockRecord[] memory) {\\n        LockRecord[] memory t = locksTable[staker];\\n        uint256 l;\\n\\n        for (uint256 i = 0; i < t.length; i++) {\\n            if (t[i].isWithdrawn == 0 && (block.timestamp >= t[i].unlockDate  || block.timestamp >= stakingLastUnlock)) {\\n                l++;\\n            }\\n        }\\n        if (l==0) {\\n          return new LockRecord[](0);\\n        }\\n        LockRecord[] memory r = new LockRecord[](l);\\n        uint256 j = 0;\\n        for (uint256 i = 0; i < t.length; i++) {\\n            if (t[i].isWithdrawn == 0 && (block.timestamp >= t[i].unlockDate  || block.timestamp >= stakingLastUnlock)) {\\n                r[j++] = t[i];\\n            }\\n        }\\n\\n        return r;\\n    }\\n\\n    /**\\n     * @dev Update lock period\\n     * @param _lockPeriod Lock period to set (is seconds)\\n     */\\n    function updateLockPeriod(uint256 _lockPeriod) external onlyOwner {\\n        emit LockPeriodUpdated(lockPeriod, _lockPeriod);\\n        lockPeriod = _lockPeriod;\\n    }\\n\\n    /**\\n     * @dev Update last unlock date\\n     * @param _unlockTime Last unlock time (unix timestamp)\\n     */\\n    function updateLastUnlock(uint256 _unlockTime) external onlyOwner {\\n        stakingLastUnlock = _unlockTime;\\n    }\\n\\n    /**\\n     * @dev Update path to stables\\n     * @param _path Path to stable coins\\n     */\\n    function updatePathToStables(address [] calldata _path) external onlyOwner {\\n        pathToStables = _path;\\n    }\\n\\n    /**\\n     * @dev Update maxUSD value\\n     * @param _value Max USD value in USD (ex. 40000 for $40000)\\n     */\\n    function updateMaxUSD(uint256 _value) external onlyOwner {\\n        maxUSDStakes = _value;\\n    }\\n\\n    /**\\n     * @dev Update tokenMode\\n     * @param _mode Token mode to set (0 for ERC20 token, 1 for Emiswap LP-token)\\n     */\\n    function updateTokenMode(uint8 _mode) external onlyOwner {\\n        require(_mode < 2, \\\"Wrong token mode\\\");\\n        tokenMode = _mode;\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    //\\n    // ------------------------------------------------------------------------\\n    /**\\n     * @dev Owner can transfer out any accidentally sent ERC20 tokens\\n     * @param tokenAddress Address of ERC-20 token to transfer\\n     * @param beneficiary Address to transfer to\\n     * @param tokens Amount of tokens to transfer\\n     */\\n    function transferAnyERC20Token(\\n        address tokenAddress,\\n        address beneficiary,\\n        uint256 tokens\\n    ) external onlyOwner returns (bool success) {\\n        require(tokenAddress != address(0), \\\"Token address cannot be 0\\\");\\n        require(tokenAddress != lockToken, \\\"Token cannot be ours\\\");\\n\\n        return IERC20(tokenAddress).transfer(beneficiary, tokens);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/ownership/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return _msgSender() == _owner;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IEmiERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.5.0;\\n\\ninterface IEmiERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IEmiRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IEmiRouter {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function getReserves(IERC20 token0, IERC20 token1)\\n        external\\n        view\\n        returns (\\n            uint256 _reserve0,\\n            uint256 _reserve1,\\n            address poolAddresss\\n        );\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address ref\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        address ref\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address[] calldata pathDAI\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address[] calldata pathDAI\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address[] calldata pathDAI\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address[] calldata pathDAI\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address[] calldata pathDAI\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external view returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external view returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address[] calldata pathDAI\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address[] calldata pathDAI\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address[] calldata pathDAI\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IEmiswap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IEmiswapRegistry {\\n    function pools(IERC20 token1, IERC20 token2)\\n        external\\n        view\\n        returns (IEmiswap);\\n\\n    function isPool(address addr) external view returns (bool);\\n\\n    function deploy(IERC20 tokenA, IERC20 tokenB) external returns (IEmiswap);\\n    function getAllPools() external view returns (IEmiswap[] memory);\\n}\\n\\ninterface IEmiswap {\\n    function fee() external view returns (uint256);\\n\\n    function tokens(uint256 i) external view returns (IERC20);\\n\\n    function deposit(\\n        uint256[] calldata amounts,\\n        uint256[] calldata minAmounts,\\n        address referral\\n    ) external payable returns (uint256 fairSupply);\\n\\n    function withdraw(uint256 amount, uint256[] calldata minReturns) external;\\n\\n    function getBalanceForAddition(IERC20 token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getBalanceForRemoval(IERC20 token) external view returns (uint256);\\n\\n    function getReturn(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount\\n    ) external view returns (uint256, uint256);\\n\\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        address to,\\n        address referral\\n    ) external payable returns (uint256 returnAmount);\\n\\n    function initialize(IERC20[] calldata assets) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () internal { }\\n    // solhint-disable-previous-line no-empty-blocks\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxUSDValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"}],\"name\":\"LockPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakesClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stopDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StartStaking\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"emiRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getMyStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"unlockDate\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"isWithdrawn\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct EmiStaking02.LockRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getMyStakesLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"unlockDate\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"isWithdrawn\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct EmiStaking02.LockRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getStakesLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getUnlockedRecords\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"lockDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"unlockDate\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"isWithdrawn\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"internalType\":\"struct EmiStaking02.LockRecord[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxUSDStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"myUnlockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pathToStables\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingEndDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stakingLastUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenMode\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"unlockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"updateLastUnlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"}],\"name\":\"updateLockPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateMaxUSD\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"updatePathToStables\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"updateTokenMode\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EmiStaking02","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002580c9c5a57975b5820e471ef141deffd729d5d3000000000000000000000000000000000000000000000000000000000041eb0000000000000000000000000000000000000000000000000000000000001158be00000000000000000000000022b8ccdeeeacb1f3879e36e06af413d44fd79f0100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000005a75a093747b72a0e14056352751edf03518031d000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}