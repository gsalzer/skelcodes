{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: UNLICENSED\r\n\r\n// Copyright (c) 2021 0xdev0 - All rights reserved\r\n// https://twitter.com/0xdev0\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n  function initialize() external;\r\n  function totalSupply() external view returns (uint);\r\n  function balanceOf(address account) external view returns (uint);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint);\r\n  function symbol() external view returns (string memory);\r\n  function decimals() external view returns (uint);\r\n  function approve(address spender, uint amount) external returns (bool);\r\n  function mint(address account, uint amount) external;\r\n  function burn(address account, uint amount) external;\r\n  function transferFrom(address sender, address recipient, uint amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint value);\r\n  event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface IPairFactory {\r\n  function pairByTokens(address _tokenA, address _tokenB) external view returns(address);\r\n}\r\n\r\ninterface ILendingPair {\r\n  function checkAccountHealth(address _account) external view;\r\n  function totalDebt(address _token) external view returns(uint);\r\n  function lpToken(address _token) external view returns(IERC20);\r\n  function debtOf(address _account, address _token) external view returns(uint);\r\n  function deposit(address _token, uint _amount) external;\r\n  function withdraw(address _token, uint _amount) external;\r\n  function borrow(address _token, uint _amount) external;\r\n  function repay(address _token, uint _amount) external;\r\n  function withdrawRepay(address _token, uint _amount) external;\r\n  function withdrawBorrow(address _token, uint _amount) external;\r\n  function controller() external view returns(IController);\r\n\r\n  function swapTokenToToken(\r\n    address  _fromToken,\r\n    address  _toToken,\r\n    address  _recipient,\r\n    uint     _inputAmount,\r\n    uint     _minOutput,\r\n    uint     _deadline\r\n  ) external returns(uint);\r\n}\r\n\r\ninterface IInterestRateModel {\r\n  function systemRate(ILendingPair _pair) external view returns(uint);\r\n  function supplyRate(ILendingPair _pair, address _token) external view returns(uint);\r\n  function borrowRate(ILendingPair _pair, address _token) external view returns(uint);\r\n}\r\n\r\ninterface IController {\r\n  function interestRateModel() external view returns(IInterestRateModel);\r\n  function feeRecipient() external view returns(address);\r\n  function priceDelay() external view returns(uint);\r\n  function slowPricePeriod() external view returns(uint);\r\n  function slowPriceRange() external view returns(uint);\r\n  function liqMinHealth() external view returns(uint);\r\n  function liqFeePool() external view returns(uint);\r\n  function liqFeeSystem() external view returns(uint);\r\n  function liqFeeCaller() external view returns(uint);\r\n  function liqFeesTotal() external view returns(uint);\r\n  function depositLimit(address _lendingPair, address _token) external view returns(uint);\r\n}\r\n\r\ninterface IWETH {\r\n  function deposit() external payable;\r\n  function withdraw(uint wad) external;\r\n  function balanceOf(address account) external view returns (uint);\r\n  function transfer(address recipient, uint amount) external returns (bool);\r\n  function approve(address spender, uint amount) external returns (bool);\r\n}\r\n\r\ncontract TransferHelper {\r\n\r\n  // Mainnet\r\n  IWETH internal constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n  // Ropsten\r\n  // IWETH internal constant WETH = IWETH(0xc778417E063141139Fce010982780140Aa0cD5Ab);\r\n\r\n  function _safeTransferFrom(address _token, address _sender, uint _amount) internal returns(uint) {\r\n    IERC20(_token).transferFrom(_sender, address(this), _amount);\r\n    require(_amount > 0, \"TransferHelper: amount must be > 0\");\r\n  }\r\n\r\n  function _wethWithdrawTo(address _to, uint _amount) internal {\r\n    require(_amount > 0, \"TransferHelper: amount must be > 0\");\r\n    WETH.withdraw(_amount);\r\n    (bool success, ) = _to.call { value: _amount }(new bytes(0));\r\n    require(success, 'TransferHelper: ETH transfer failed');\r\n  }\r\n}\r\n\r\ncontract Router is TransferHelper {\r\n\r\n  uint MAX_INT = 2**256 - 1;\r\n\r\n  IPairFactory public pairFactory;\r\n\r\n  receive() external payable {}\r\n\r\n  constructor(IPairFactory _pairFactory) {\r\n    pairFactory = _pairFactory;\r\n  }\r\n\r\n  function swapETHToToken(\r\n      address[] memory _path,\r\n      address  _recipient,\r\n      uint     _minOutput,\r\n      uint     _deadline\r\n  ) public payable returns(uint) {\r\n\r\n    WETH.deposit { value: msg.value }();\r\n    (IERC20 outputToken, uint outputAmount) = _swap(_path, _minOutput, _deadline);\r\n    outputToken.transfer(_recipient, outputAmount);\r\n\r\n    return outputAmount;\r\n  }\r\n\r\n  function swapTokenToETH(\r\n      address[] memory _path,\r\n      address  _recipient,\r\n      uint     _inputAmount,\r\n      uint     _minOutput,\r\n      uint     _deadline\r\n  ) public returns(uint) {\r\n\r\n    _safeTransferFrom(_path[0], msg.sender, _inputAmount);\r\n    (, uint outputAmount) = _swap(_path, _minOutput, _deadline);\r\n    _wethWithdrawTo(_recipient, outputAmount);\r\n\r\n    return outputAmount;\r\n  }\r\n\r\n  function swapTokenToToken(\r\n      address[] memory _path,\r\n      address  _recipient,\r\n      uint     _inputAmount,\r\n      uint     _minOutput,\r\n      uint     _deadline\r\n  ) public returns(uint) {\r\n\r\n    _safeTransferFrom(_path[0], msg.sender, _inputAmount);\r\n    (IERC20 outputToken, uint outputAmount) = _swap(_path, _minOutput, _deadline);\r\n    outputToken.transfer(_recipient, outputAmount);\r\n\r\n    return outputAmount;\r\n  }\r\n\r\n  function addLiquidity(\r\n    address _tokenA,\r\n    address _tokenB,\r\n    uint _amountA,\r\n    uint _amountB\r\n  ) public {\r\n\r\n    _safeTransferFrom(_tokenA, msg.sender, _amountA);\r\n    _safeTransferFrom(_tokenB, msg.sender, _amountB);\r\n\r\n    _addLiquidity(_tokenA, _tokenB, _amountA, _amountB);\r\n  }\r\n\r\n  function addLiquidityETH(address _token, uint _amount) public payable {\r\n\r\n    _safeTransferFrom(_token, msg.sender, _amount);\r\n    WETH.deposit { value: msg.value }();\r\n\r\n    _addLiquidity(_token, address(WETH), _amount, msg.value);\r\n  }\r\n\r\n  function _addLiquidity(\r\n    address _tokenA,\r\n    address _tokenB,\r\n    uint _amountA,\r\n    uint _amountB\r\n  ) internal {\r\n    ILendingPair lendingPair = ILendingPair(pairFactory.pairByTokens(_tokenA, _tokenB));\r\n\r\n    IERC20(_tokenA).approve(address(lendingPair), MAX_INT);\r\n    IERC20(_tokenB).approve(address(lendingPair), MAX_INT);\r\n\r\n    lendingPair.deposit(_tokenA, _amountA);\r\n    lendingPair.deposit(_tokenB, _amountB);\r\n\r\n    lendingPair.lpToken(_tokenA).transfer(msg.sender, _amountA);\r\n    lendingPair.lpToken(_tokenB).transfer(msg.sender, _amountB);\r\n  }\r\n\r\n  function _swap(address[] memory _path, uint _minOutput, uint _deadline) internal returns(IERC20, uint) {\r\n\r\n    for (uint i; i < _path.length - 1; i++) {\r\n\r\n      (address fromToken, address toToken) = (_path[i], _path[i + 1]);\r\n      address lendingPair = pairFactory.pairByTokens(fromToken, toToken);\r\n\r\n      uint inputAmount = IERC20(fromToken).balanceOf(address(this));\r\n\r\n      IERC20(fromToken).approve(lendingPair, MAX_INT);\r\n\r\n      ILendingPair(lendingPair).swapTokenToToken(\r\n        fromToken,\r\n        toToken,\r\n        address(this),\r\n        inputAmount,\r\n        0,\r\n        _deadline\r\n      );\r\n    }\r\n\r\n    IERC20 outputToken = IERC20(_path[_path.length - 1]);\r\n    uint outputAmount = outputToken.balanceOf(address(this));\r\n    require(outputAmount >= _minOutput, \"Router: insufficient return amount\");\r\n\r\n    return (outputToken, outputAmount);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IPairFactory\",\"name\":\"_pairFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountB\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairFactory\",\"outputs\":[{\"internalType\":\"contract IPairFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokenToETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokenToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Router","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002fa8bb9bcad729272e3f8728b012513e88b0e019","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1281ac81795d06fc531daeb3678997376e625f5700a96e8de983457b78525e9d"}]}