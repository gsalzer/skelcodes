{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.1.1 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.2.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/INFTPoke.sol\r\n\r\n\r\npragma solidity ^0.8.5;\r\n\r\ninterface INFTPoke is IERC721 {\r\n    function getTokensOf(address owner)\r\n        external\r\n        view\r\n        returns (uint256[] memory);\r\n\r\n    function getCurrentNumberOfNFTs() external view returns (uint256);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external override;\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external override;\r\n}\r\n\r\n\r\n// File contracts/ICommon.sol\r\n\r\n\r\npragma solidity ^0.8.5;\r\n\r\ninterface ICommon {\r\n    struct NFTDetails {\r\n        uint256 stakePosition;\r\n        uint256 stakeTime;\r\n        uint256 tokenId;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/INFTPokeStakeController.sol\r\n\r\n\r\npragma solidity ^0.8.5;\r\n\r\ninterface INFTPokeStakeController is ICommon {}\r\n\r\n\r\n// File contracts/INFTPokeStakeControllerProxy.sol\r\n\r\n\r\npragma solidity ^0.8.5;\r\n\r\ninterface INFTPokeStakeControllerProxy is ICommon {\r\n    function mintNewToken(address owner, NFTDetails memory token) external;\r\n\r\n    function mintNewTokens(address owner, NFTDetails[] memory tokens) external;\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Strings.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/ERC721.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver(to).onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Counters.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev ERC721 token with storage based token URI management.\r\n */\r\nabstract contract ERC721URIStorage is ERC721 {\r\n    using Strings for uint256;\r\n\r\n    // Optional mapping for token URIs\r\n    mapping(uint256 => string) private _tokenURIs;\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\r\n\r\n        string memory _tokenURI = _tokenURIs[tokenId];\r\n        string memory base = _baseURI();\r\n\r\n        // If there is no base URI, return the token URI.\r\n        if (bytes(base).length == 0) {\r\n            return _tokenURI;\r\n        }\r\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\r\n        if (bytes(_tokenURI).length > 0) {\r\n            return string(abi.encodePacked(base, _tokenURI));\r\n        }\r\n\r\n        return super.tokenURI(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\r\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\r\n        _tokenURIs[tokenId] = _tokenURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual override {\r\n        super._burn(tokenId);\r\n\r\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\r\n            delete _tokenURIs[tokenId];\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/Pausable.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev ERC721 token with pausable token transfers, minting and burning.\r\n *\r\n * Useful for scenarios such as preventing trades until the end of an evaluation\r\n * period, or having an emergency switch for freezing all token transfers in the\r\n * event of a large bug.\r\n */\r\nabstract contract ERC721Pausable is ERC721, Pausable {\r\n    /**\r\n     * @dev See {ERC721-_beforeTokenTransfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the contract must not be paused.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        require(!paused(), \"ERC721Pausable: token transfer while paused\");\r\n    }\r\n}\r\n\r\n\r\n// File contracts/MerkleProof.sol\r\n\r\n\r\npragma solidity ^0.8.5;\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle trees (hash trees),\r\n */\r\ncontract MerkleProof {\r\n    bytes32 public root;\r\n\r\n    constructor(bytes32 _root) {\r\n        root = _root;\r\n    }\r\n\r\n    function verifyURI(string memory tokenURI, bytes32[] memory proof)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        bytes32 leaf = keccak256(abi.encodePacked(tokenURI));\r\n        return verify(leaf, proof);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(bytes32 leaf, bytes32[] memory proof)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        bytes32 computedHash = leaf;\r\n\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n\r\n            if (computedHash <= proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = keccak256(\r\n                    abi.encodePacked(computedHash, proofElement)\r\n                );\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = keccak256(\r\n                    abi.encodePacked(proofElement, computedHash)\r\n                );\r\n            }\r\n        }\r\n\r\n        // Check if the computed hash (root) is equal to the provided root\r\n        return computedHash == root;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/NFTPoke.sol\r\n\r\n\r\npragma solidity ^0.8.5;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract NFTPoke is\r\n    Ownable,\r\n    ERC721URIStorage,\r\n    MerkleProof,\r\n    ERC721Pausable,\r\n    INFTPoke\r\n{\r\n    using Counters for Counters.Counter;\r\n    Counters.Counter private _tokenIds;\r\n\r\n    string public baseURI = \"https://ipfs.io/ipfs/\";\r\n\r\n    //  marks the token as being minted\r\n    mapping(bytes32 => bool) public mintedTokens;\r\n    //  find tokenId by tokenURI\r\n    mapping(bytes32 => uint256) public uriToTokenId;\r\n    //  find all tokens of an address\r\n    mapping(address => uint256[]) public tokensByAddress;\r\n\r\n    //  the starting price to mint an NFT\r\n    uint256 public currentPrice;\r\n    //  the price increase after each NFT is minted\r\n    uint256 public priceIncrease;\r\n    //  the number of tokens that will not get price increases\r\n    uint256 public numberOfTokensAtSamePrice = 200;\r\n    //  maximum number of hard minted tokens\r\n    uint256 public maxHardMinted = 242;\r\n    //  the current number of hard minted tokens\r\n    uint256 public hardMinted;\r\n    //  maximum number of tokens that can be minted\r\n    uint256 public maxMinted = 13000 + maxHardMinted;\r\n\r\n    event SetBaseUri(\r\n        address indexed _owner,\r\n        string initialBaseURI,\r\n        string finalBaseURI\r\n    );\r\n    event MintedOwner(string tokenURI, uint256 tokenId);\r\n    event Minted(\r\n        address indexed _owner,\r\n        uint256 price,\r\n        string tokenURI,\r\n        uint256 tokenId\r\n    );\r\n    event MintedMultiple(\r\n        address indexed _owner,\r\n        uint256 price,\r\n        uint256 tokenLength\r\n    );\r\n    event TransferToken(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokenId\r\n    );\r\n\r\n    constructor(\r\n        string memory nftName,\r\n        string memory nftSymbol,\r\n        bytes32 root,\r\n        uint256 _currentPrice,\r\n        uint256 _priceIncrease\r\n    ) ERC721(nftName, nftSymbol) MerkleProof(root) {\r\n        currentPrice = _currentPrice;\r\n        priceIncrease = _priceIncrease;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId)\r\n        public\r\n        view\r\n        virtual\r\n        override(ERC721, ERC721URIStorage)\r\n        returns (string memory)\r\n    {\r\n        return super.tokenURI(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC721-_beforeTokenTransfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the contract must not be paused.\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override(ERC721, ERC721Pausable) {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId)\r\n        internal\r\n        virtual\r\n        override(ERC721, ERC721URIStorage)\r\n    {\r\n        super._burn(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     * @param from address from which to transfer the token\r\n     * @param to address to which to transfer the token\r\n     * @param tokenId to transfer\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override(INFTPoke, ERC721) {\r\n        changeTokenOwners(from, to, tokenId);\r\n        super.safeTransferFrom(from, to, tokenId);\r\n        emit TransferToken(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     * @param from address from which to transfer the token\r\n     * @param to address to which to transfer the token\r\n     * @param tokenId to transfer\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override(INFTPoke, ERC721) {\r\n        changeTokenOwners(from, to, tokenId);\r\n        super.transferFrom(from, to, tokenId);\r\n        emit TransferToken(from, to, tokenId);\r\n    }\r\n\r\n    function changeTokenOwners(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal {\r\n        uint256 length = tokensByAddress[from].length;\r\n        for (uint256 i = 0; i < length; i++) {\r\n            if (tokensByAddress[from][i] == tokenId) {\r\n                tokensByAddress[from][i] = tokensByAddress[from][length - 1];\r\n                tokensByAddress[from].pop();\r\n                tokensByAddress[to].push(tokenId);\r\n                return;\r\n            }\r\n        }\r\n        revert(\"There was not found any token\");\r\n    }\r\n\r\n    /**\r\n     * @dev Return the list of tokenIds assigned for a specific address\r\n     * @param owner address for which we return the token list\r\n     * @return list value of 'number'\r\n     */\r\n    function getTokensOf(address owner)\r\n        public\r\n        view\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        return tokensByAddress[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Return if a specific token URI was already minted\r\n     * @param tokenURIValue string to be verified\r\n     * @return bool value\r\n     */\r\n    function isMinted(string memory tokenURIValue) public view returns (bool) {\r\n        return mintedTokens[hashed(tokenURIValue)];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the hash of the given tokenURI\r\n     * @param tokenURIValue string for which to calculate the hash\r\n     * @return bytes32 hash value\r\n     */\r\n    function hashed(string memory tokenURIValue)\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(tokenURIValue));\r\n    }\r\n\r\n    /**\r\n     * @dev Mint by owner a given list of hashes\r\n     * @param hashes string list to mint\r\n     */\r\n    function mintByOwner(string[] memory hashes) public onlyOwner {\r\n        require(\r\n            hardMinted + hashes.length <= maxHardMinted,\r\n            \"There are too many hard minted tokens\"\r\n        );\r\n        for (uint256 i = 0; i < hashes.length; i++) {\r\n            mintItemWithoutProof(hashes[i]);\r\n            hardMinted++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the baseURI to a given tokenURI\r\n     * @param uri string to save\r\n     */\r\n    function setBaseURI(string memory uri) public onlyOwner {\r\n        baseURI = uri;\r\n        emit SetBaseUri(msg.sender, baseURI, uri);\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overwritten\r\n     * in child contracts.\r\n     */\r\n    function _baseURI() internal view override returns (string memory) {\r\n        return baseURI;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the current number of minted NFTs\r\n     * @return uint256 value\r\n     */\r\n    function getCurrentNumberOfNFTs() public view override returns (uint256) {\r\n        return _tokenIds.current();\r\n    }\r\n\r\n    /**\r\n     * @dev Return a tokenId given a string tokenURI\r\n     * @param tokenURIValue string to be verified\r\n     * @return uint256 value\r\n     */\r\n    function getTokenIdByTokenURI(string memory tokenURIValue)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return uriToTokenId[hashed(tokenURIValue)];\r\n    }\r\n\r\n    /**\r\n     * @dev Verify that the current tokenURI is part of the root merkleTree\r\n     * @param tokenURIValue string to be verified\r\n     */\r\n    modifier validURI(string memory tokenURIValue, bytes32[] memory proof) {\r\n        require(verifyURI(tokenURIValue, proof), \"Not valid tokenURI\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Mint a list of NFTs as owner\r\n     * @param tokenURIValue string\r\n     */\r\n    function mintItemWithoutProof(string memory tokenURIValue) internal {\r\n        bytes32 uriHash = hashed(tokenURIValue);\r\n\r\n        //  increment the number of tokens minted\r\n        _tokenIds.increment();\r\n        //  get a new token id\r\n        uint256 id = _tokenIds.current();\r\n        //  mint the new id to the sender\r\n        _mint(msg.sender, id);\r\n        //  set the tokenURI for the minted token\r\n        _setTokenURI(id, tokenURIValue);\r\n        //  link the tokenURI with the token id\r\n        uriToTokenId[uriHash] = id;\r\n        //  mark the tokenURI token as minted\r\n        mintedTokens[uriHash] = true;\r\n\r\n        tokensByAddress[msg.sender].push(id);\r\n\r\n        emit MintedOwner(tokenURIValue, id);\r\n    }\r\n\r\n    /**\r\n     * @dev It is possible that funds were sent to this address before the contract was deployed.\r\n     * We can flush those funds to the destination address.\r\n     */\r\n    function flush() public onlyOwner {\r\n        address payable ownerAddress = payable(owner());\r\n        ownerAddress.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Mint a list of tokenURIs\r\n     * @param tokenURIs string list of\r\n     * @param proofs bytes32 list\r\n     */\r\n    function mintItems(string[] memory tokenURIs, bytes32[][] memory proofs)\r\n        public\r\n        payable\r\n        returns (uint256[] memory)\r\n    {\r\n        require(\r\n            tokenURIs.length == proofs.length,\r\n            \"The input number of token URIs length is not the same as the number of proofs\"\r\n        );\r\n        require(\r\n            msg.value >= currentPrice * tokenURIs.length,\r\n            \"value is smaller than current price\"\r\n        );\r\n        require(\r\n            _tokenIds.current() < maxMinted,\r\n            \"No more tokens can be minted\"\r\n        );\r\n        require(\r\n            _tokenIds.current() + tokenURIs.length <= maxMinted,\r\n            \"The number of tokens to mint is greater than maximum allowed\"\r\n        );\r\n\r\n        uint256[] memory rez = new uint256[](tokenURIs.length);\r\n\r\n        uint256 oldId = _tokenIds.current();\r\n\r\n        for (uint256 i = 0; i < tokenURIs.length; i++) {\r\n            require(verifyURI(tokenURIs[i], proofs[i]), \"Not valid tokenURI\");\r\n\r\n            bytes32 uriHash = hashed(tokenURIs[i]);\r\n            //make sure they are only minting something that is not already minted\r\n            require(!mintedTokens[uriHash], \"Token already minted\");\r\n\r\n            //  get a new token id\r\n            uint256 id = _tokenIds.current() + 1;\r\n            //  mint the new id to the sender\r\n            _mint(msg.sender, id);\r\n            //  set the tokenURI for the minted token\r\n            _setTokenURI(id, tokenURIs[i]);\r\n            //  link the tokenURI with the token id\r\n            uriToTokenId[uriHash] = id;\r\n            //  mark the tokenURI token as minted\r\n            mintedTokens[uriHash] = true;\r\n            //  increment the number of tokens minted\r\n            _tokenIds.increment();\r\n\r\n            tokensByAddress[msg.sender].push(id);\r\n\r\n            rez[i] = id;\r\n        }\r\n\r\n        uint256 maxStableId = numberOfTokensAtSamePrice + hardMinted;\r\n\r\n        if (_tokenIds.current() >= maxStableId) {\r\n            if (oldId < maxStableId) {\r\n                uint256 mintedTokensWithPriceIncrease = tokenURIs.length -\r\n                    (maxStableId - oldId);\r\n                //  increase price of the next token to be minted\r\n                currentPrice =\r\n                    currentPrice +\r\n                    priceIncrease *\r\n                    mintedTokensWithPriceIncrease;\r\n            } else {\r\n                //  increase price of the next token to be minted\r\n                currentPrice = currentPrice + priceIncrease * tokenURIs.length;\r\n            }\r\n        }\r\n\r\n        address payable ownerAddress = payable(owner());\r\n        ownerAddress.transfer(msg.value);\r\n\r\n        emit MintedMultiple(msg.sender, currentPrice, tokenURIs.length);\r\n\r\n        return rez;\r\n    }\r\n\r\n    /**\r\n     * @dev Mint a NFT based on the tokenURIValue\r\n     * @param tokenURIValue string\r\n     * @param proof bytes32 list\r\n     */\r\n    function mintItem(string memory tokenURIValue, bytes32[] memory proof)\r\n        public\r\n        payable\r\n        validURI(tokenURIValue, proof)\r\n        returns (uint256)\r\n    {\r\n        require(\r\n            msg.value >= currentPrice,\r\n            \"value is smaller than current price\"\r\n        );\r\n        require(\r\n            _tokenIds.current() < maxMinted,\r\n            \"No more tokens can be minted\"\r\n        );\r\n\r\n        bytes32 uriHash = hashed(tokenURIValue);\r\n\r\n        //make sure they are only minting something that is not already minted\r\n        require(!mintedTokens[uriHash], \"Token already minted\");\r\n\r\n        //  get a new token id\r\n        uint256 id = _tokenIds.current() + 1;\r\n        //  mint the new id to the sender\r\n        _mint(msg.sender, id);\r\n        //  set the tokenURI for the minted token\r\n        _setTokenURI(id, tokenURIValue);\r\n        //  link the tokenURI with the token id\r\n        uriToTokenId[uriHash] = id;\r\n        //  mark the tokenURI token as minted\r\n        mintedTokens[uriHash] = true;\r\n        //  increment the number of tokens minted\r\n        _tokenIds.increment();\r\n\r\n        tokensByAddress[msg.sender].push(id);\r\n\r\n        if (id >= numberOfTokensAtSamePrice + hardMinted) {\r\n            //  increase price of the next token to be minted\r\n            currentPrice = currentPrice + priceIncrease;\r\n        }\r\n\r\n        address payable ownerAddress = payable(owner());\r\n        ownerAddress.transfer(msg.value);\r\n\r\n        emit Minted(msg.sender, currentPrice, tokenURIValue, id);\r\n\r\n        //  returns the current minted token id\r\n        return id;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\r\n     * allowance.\r\n     *\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have allowance for ``accounts``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public virtual {\r\n        uint256 currentAllowance = allowance(account, _msgSender());\r\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(account, _msgSender(), currentAllowance - amount);\r\n        }\r\n        _burn(account, amount);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\r\n */\r\nabstract contract ERC20Capped is ERC20 {\r\n    uint256 private immutable _cap;\r\n\r\n    /**\r\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\r\n     * set once during construction.\r\n     */\r\n    constructor(uint256 cap_) {\r\n        require(cap_ > 0, \"ERC20Capped: cap is 0\");\r\n        _cap = cap_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the cap on the token's total supply.\r\n     */\r\n    function cap() public view virtual returns (uint256) {\r\n        return _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_mint}.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual override {\r\n        require(ERC20.totalSupply() + amount <= cap(), \"ERC20Capped: cap exceeded\");\r\n        super._mint(account, amount);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/math/Math.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute.\r\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a / b + (a % b == 0 ? 0 : 1);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Arrays.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to array types.\r\n */\r\nlibrary Arrays {\r\n    /**\r\n     * @dev Searches a sorted `array` and returns the first index that contains\r\n     * a value greater or equal to `element`. If no such index exists (i.e. all\r\n     * values in the array are strictly less than `element`), the array length is\r\n     * returned. Time complexity O(log n).\r\n     *\r\n     * `array` is expected to be sorted in ascending order, and to contain no\r\n     * repeated elements.\r\n     */\r\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\r\n        if (array.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 low = 0;\r\n        uint256 high = array.length;\r\n\r\n        while (low < high) {\r\n            uint256 mid = Math.average(low, high);\r\n\r\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\r\n            // because Math.average rounds down (it does integer division with truncation).\r\n            if (array[mid] > element) {\r\n                high = mid;\r\n            } else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n\r\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\r\n        if (low > 0 && array[low - 1] == element) {\r\n            return low - 1;\r\n        } else {\r\n            return low;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\r\n * total supply at the time are recorded for later access.\r\n *\r\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\r\n * In naive implementations it's possible to perform a \"double spend\" attack by reusing the same balance from different\r\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\r\n * used to create an efficient ERC20 forking mechanism.\r\n *\r\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\r\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\r\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\r\n * and the account address.\r\n *\r\n * NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\r\n * return `block.number` will trigger the creation of snapshot at the begining of each new block. When overridding this\r\n * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\r\n *\r\n * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\r\n * alternative consider {ERC20Votes}.\r\n *\r\n * ==== Gas Costs\r\n *\r\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\r\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\r\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\r\n *\r\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\r\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\r\n * transfers will have normal cost until the next snapshot, and so on.\r\n */\r\n\r\nabstract contract ERC20Snapshot is ERC20 {\r\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\r\n    // https://github.com/Giveth/minimd/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\r\n\r\n    using Arrays for uint256[];\r\n    using Counters for Counters.Counter;\r\n\r\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\r\n    // Snapshot struct, but that would impede usage of functions that work on an array.\r\n    struct Snapshots {\r\n        uint256[] ids;\r\n        uint256[] values;\r\n    }\r\n\r\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\r\n    Snapshots private _totalSupplySnapshots;\r\n\r\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\r\n    Counters.Counter private _currentSnapshotId;\r\n\r\n    /**\r\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\r\n     */\r\n    event Snapshot(uint256 id);\r\n\r\n    /**\r\n     * @dev Creates a new snapshot and returns its snapshot id.\r\n     *\r\n     * Emits a {Snapshot} event that contains the same id.\r\n     *\r\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\r\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\r\n     * you must consider that it can potentially be used by attackers in two ways.\r\n     *\r\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\r\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\r\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\r\n     * section above.\r\n     *\r\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\r\n     * ====\r\n     */\r\n    function _snapshot() internal virtual returns (uint256) {\r\n        _currentSnapshotId.increment();\r\n\r\n        uint256 currentId = _getCurrentSnapshotId();\r\n        emit Snapshot(currentId);\r\n        return currentId;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the current snapshotId\r\n     */\r\n    function _getCurrentSnapshotId() internal view virtual returns (uint256) {\r\n        return _currentSnapshotId.current();\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\r\n     */\r\n    function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {\r\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\r\n\r\n        return snapshotted ? value : balanceOf(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\r\n     */\r\n    function totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {\r\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\r\n\r\n        return snapshotted ? value : totalSupply();\r\n    }\r\n\r\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\r\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n\r\n        if (from == address(0)) {\r\n            // mint\r\n            _updateAccountSnapshot(to);\r\n            _updateTotalSupplySnapshot();\r\n        } else if (to == address(0)) {\r\n            // burn\r\n            _updateAccountSnapshot(from);\r\n            _updateTotalSupplySnapshot();\r\n        } else {\r\n            // transfer\r\n            _updateAccountSnapshot(from);\r\n            _updateAccountSnapshot(to);\r\n        }\r\n    }\r\n\r\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {\r\n        require(snapshotId > 0, \"ERC20Snapshot: id is 0\");\r\n        require(snapshotId <= _getCurrentSnapshotId(), \"ERC20Snapshot: nonexistent id\");\r\n\r\n        // When a valid snapshot is queried, there are three possibilities:\r\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\r\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\r\n        //  to this id is the current one.\r\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\r\n        //  requested id, and its value is the one to return.\r\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\r\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\r\n        //  larger than the requested one.\r\n        //\r\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\r\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\r\n        // exactly this.\r\n\r\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\r\n\r\n        if (index == snapshots.ids.length) {\r\n            return (false, 0);\r\n        } else {\r\n            return (true, snapshots.values[index]);\r\n        }\r\n    }\r\n\r\n    function _updateAccountSnapshot(address account) private {\r\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\r\n    }\r\n\r\n    function _updateTotalSupplySnapshot() private {\r\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\r\n    }\r\n\r\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\r\n        uint256 currentId = _getCurrentSnapshotId();\r\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\r\n            snapshots.ids.push(currentId);\r\n            snapshots.values.push(currentValue);\r\n        }\r\n    }\r\n\r\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\r\n        if (ids.length == 0) {\r\n            return 0;\r\n        } else {\r\n            return ids[ids.length - 1];\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165Storage.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Storage based implementation of the {IERC165} interface.\r\n *\r\n * Contracts may inherit from this and call {_registerInterface} to declare\r\n * their support of an interface.\r\n */\r\nabstract contract ERC165Storage is ERC165 {\r\n    /**\r\n     * @dev Mapping of interface ids to whether or not it's supported.\r\n     */\r\n    mapping(bytes4 => bool) private _supportedInterfaces;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev Registers the contract as an implementer of the interface defined by\r\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\r\n     * registering its interface id is not required.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal virtual {\r\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/ERC165Checker.sol@v4.2.0\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library used to query support of an interface declared via {IERC165}.\r\n *\r\n * Note that these functions return the actual result of the query: they do not\r\n * `revert` if an interface is not supported. It is up to the caller to decide\r\n * what to do in these cases.\r\n */\r\nlibrary ERC165Checker {\r\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\r\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the {IERC165} interface,\r\n     */\r\n    function supportsERC165(address account) internal view returns (bool) {\r\n        // Any contract that implements ERC165 must explicitly indicate support of\r\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\r\n        return\r\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\r\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports the interface defined by\r\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\r\n        // query support of both ERC165 as per the spec and support of _interfaceId\r\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns a boolean array where each value corresponds to the\r\n     * interfaces passed in and whether they're supported or not. This allows\r\n     * you to batch check interfaces for a contract where your expectation\r\n     * is that some interfaces may not be supported.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\r\n        internal\r\n        view\r\n        returns (bool[] memory)\r\n    {\r\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\r\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\r\n\r\n        // query support of ERC165 itself\r\n        if (supportsERC165(account)) {\r\n            // query support of each interface in interfaceIds\r\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\r\n            }\r\n        }\r\n\r\n        return interfaceIdsSupported;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if `account` supports all the interfaces defined in\r\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\r\n     *\r\n     * Batch-querying can lead to gas savings by skipping repeated checks for\r\n     * {IERC165} support.\r\n     *\r\n     * See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\r\n        // query support of ERC165 itself\r\n        if (!supportsERC165(account)) {\r\n            return false;\r\n        }\r\n\r\n        // query support of each interface in _interfaceIds\r\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\r\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // all interfaces supported\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Query if a contract implements an interface, does not check ERC165 support\r\n     * @param account The address of the contract to query for support of an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @return true if the contract at account indicates support of the interface with\r\n     * identifier interfaceId, false otherwise\r\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\r\n     * the behavior of this method is undefined. This precondition can be checked\r\n     * with {supportsERC165}.\r\n     * Interface identification is specified in ERC-165.\r\n     */\r\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\r\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165(account).supportsInterface.selector, interfaceId);\r\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\r\n        if (result.length < 32) return false;\r\n        return success && abi.decode(result, (bool));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Utility.sol\r\n\r\npragma solidity 0.8.5;\r\n\r\ncontract Utility is Ownable {\r\n    event FallbackCalled(bool called);\r\n    event ReceiveCalled(bool called);\r\n\r\n    fallback() external payable {\r\n        emit FallbackCalled(true);\r\n    }\r\n\r\n    receive() external payable {\r\n        emit ReceiveCalled(true);\r\n    }\r\n\r\n    function flush(bool canBeReverted) external {\r\n        uint256 balance = address(this).balance;\r\n\r\n        if (canBeReverted) {\r\n            require(balance > 0, \"Contract has no balance\");\r\n        } else if (balance == 0) {\r\n            return;\r\n        }\r\n\r\n        address payable to = payable(owner());\r\n        to.transfer(balance);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/NFTPokeGovernance.sol\r\n\r\npragma solidity 0.8.5;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract NFTPokeGovernance is\r\n    Utility,\r\n    ERC20Burnable,\r\n    ERC20Capped,\r\n    ERC165Storage,\r\n    ERC20Snapshot,\r\n    INFTPokeStakeControllerProxy\r\n{\r\n    using ERC165Checker for address;\r\n\r\n    event TokenMinterAdded(address tokenMinter);\r\n    event TokenMinted(address owner, uint256 mintedTokens);\r\n    event TokenBurned(address owner, uint256 burnedTokens);\r\n    event TokenBurnedFrom(address owner, address account, uint256 burnedTokens);\r\n\r\n    address public stakeMinter;\r\n\r\n    uint256 public rewardStakeMax = 81791963015494100000000000;\r\n    uint256 public rewardPerSecond = 300000000000000;\r\n    uint256 public rewardTokenPerSecond = 300000000000000;\r\n    uint256 public rewardStakePositionPerSecond = 100000000000000;\r\n\r\n    uint256 private constantValue = 1324200000;\r\n    uint256 private constantValue2 = 113242;\r\n\r\n    /**\r\n     * @dev NFTPokeGovernance constructor\r\n     * Supports the IERC20 and IStakeProxy interfaces\r\n     * @param name_ of the token\r\n     * @param symbol_ of the token\r\n     * @param cap_ is the total supply\r\n     */\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 cap_\r\n    ) ERC20(name_, symbol_) ERC20Capped(cap_) {\r\n        _registerInterface(type(IERC20).interfaceId);\r\n        _registerInterface(ERC20.name.selector);\r\n        _registerInterface(ERC20.symbol.selector);\r\n        _registerInterface(ERC20.decimals.selector);\r\n        _registerInterface(type(INFTPokeStakeControllerProxy).interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_mint and ERC20Capped-_mint}.\r\n     * @param account for who to mint new tokens\r\n     * @param amount amount to mint\r\n     */\r\n    function _mint(address account, uint256 amount)\r\n        internal\r\n        virtual\r\n        override(ERC20, ERC20Capped)\r\n    {\r\n        super._mint(account, amount);\r\n        emit TokenMinted(account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_beforeTokenTransfer and ERC20Snapshot-_beforeTokenTransfer }.\r\n     * @param from who to send the tokens\r\n     * @param to who to send the tokens\r\n     * @param amount to be transferred\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override(ERC20, ERC20Snapshot) {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20Snapshot-takeSnapshot}.\r\n     */\r\n    function takeSnapshot() external onlyOwner returns (uint256) {\r\n        return super._snapshot();\r\n    }\r\n\r\n    /**\r\n     * @dev Add a new contract that can mint tokens for users\r\n     * @param minter that has access to mint new tokens for a specific user\r\n     */\r\n    function addTokenMinter(address minter) external onlyOwner {\r\n        require(stakeMinter == address(0), \"Can't assign a new token minter\");\r\n        require(\r\n            minter.supportsInterface(type(INFTPokeStakeController).interfaceId),\r\n            \"Token doesn't implement INFTPokeStakeController\"\r\n        );\r\n        stakeMinter = minter;\r\n        emit TokenMinterAdded(minter);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public override {\r\n        super.burn(amount);\r\n        emit TokenBurned(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public override {\r\n        super.burnFrom(account, amount);\r\n        emit TokenBurnedFrom(msg.sender, account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier that checks to see if address who wants to mint has access\r\n     */\r\n    modifier verifyStakeMinter() {\r\n        require(\r\n            msg.sender == stakeMinter,\r\n            \"The minter is not the stake contract\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Mint new tokens for a single NFT token\r\n     * @param owner that will receive new minted tokens\r\n     * @param token details for the NFT token\r\n     */\r\n    function mintNewToken(address owner, NFTDetails memory token)\r\n        external\r\n        override\r\n        verifyStakeMinter\r\n    {\r\n        uint256 stakedTime = block.timestamp - token.stakeTime;\r\n\r\n        uint256 reward = rewardPerSecond * stakedTime;\r\n        uint256 rewardToken = rewardTokenPerSecond * stakedTime;\r\n        uint256 rewardPosition = rewardStakePositionPerSecond * stakedTime;\r\n\r\n        uint256 rewardTokenId = (rewardToken *\r\n            (constantValue - token.tokenId * constantValue2)) / constantValue;\r\n        uint256 rewardStakePosition = (rewardPosition *\r\n            (constantValue - (token.stakePosition + 1) * constantValue2)) /\r\n            constantValue;\r\n\r\n        reward += rewardTokenId + rewardStakePosition;\r\n\r\n        if (totalSupply() + reward > rewardStakeMax) {\r\n            reward = rewardStakeMax - totalSupply();\r\n        }\r\n        require(reward > 0, \"No rewards to mint\");\r\n        _mint(owner, reward);\r\n    }\r\n\r\n    /**\r\n     * @dev Mint new tokens for multiple NFT tokens\r\n     * @param owner that will receive new minted tokens\r\n     * @param tokens details for the NFT tokens\r\n     */\r\n    function mintNewTokens(address owner, NFTDetails[] memory tokens)\r\n        external\r\n        override\r\n        verifyStakeMinter\r\n    {\r\n        uint256 totalReward = 0;\r\n\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            NFTDetails memory token = tokens[i];\r\n\r\n            uint256 stakedTime = block.timestamp - token.stakeTime;\r\n\r\n            uint256 reward = rewardPerSecond * stakedTime;\r\n            uint256 rewardToken = rewardTokenPerSecond * stakedTime;\r\n            uint256 rewardPosition = rewardStakePositionPerSecond * stakedTime;\r\n\r\n            uint256 rewardTokenId = (rewardToken *\r\n                (constantValue - token.tokenId * constantValue2)) /\r\n                constantValue;\r\n            uint256 rewardStakePosition = (rewardPosition *\r\n                (constantValue - (token.stakePosition + 1) * constantValue2)) /\r\n                constantValue;\r\n\r\n            totalReward += reward + rewardTokenId + rewardStakePosition;\r\n        }\r\n        if (totalSupply() + totalReward > rewardStakeMax) {\r\n            totalReward = rewardStakeMax - totalSupply();\r\n        }\r\n        require(totalReward > 0, \"No rewards to mint\");\r\n        _mint(owner, totalReward);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/NFTPokeStakeController.sol\r\n\r\n\r\npragma solidity ^0.8.5;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract NFTPokeStakeController is\r\n    Ownable,\r\n    ERC165Storage,\r\n    IERC721Receiver,\r\n    INFTPokeStakeController\r\n{\r\n    using ERC165Checker for address;\r\n\r\n    address public contractAddress;\r\n    INFTPoke public nft;\r\n    INFTPokeStakeControllerProxy[] public tokens;\r\n\r\n    event RewardTokenAdded(address rewardToken);\r\n    event RewardTokenRemoved(address rewardToken);\r\n    event ReceivedToken(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes data\r\n    );\r\n    event StakeToken(\r\n        address owner,\r\n        uint256 tokenId,\r\n        uint256 stakeIndex,\r\n        uint256 timestamp\r\n    );\r\n    event UnstakeToken(address owner, uint256 tokenId, uint256 timestamp);\r\n\r\n    constructor(address nftAddress) {\r\n        require(\r\n            nftAddress.supportsInterface(type(IERC721).interfaceId),\r\n            \"Token doesn't implement IERC721\"\r\n        );\r\n        _registerInterface(type(INFTPokeStakeController).interfaceId);\r\n        nft = INFTPoke(nftAddress);\r\n        contractAddress = address(this);\r\n    }\r\n\r\n    function getRewardTokenAddresses() public view returns (address[] memory) {\r\n        address[] memory tokenAddresses = new address[](tokens.length);\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            tokenAddresses[i] = address(tokens[i]);\r\n        }\r\n        return tokenAddresses;\r\n    }\r\n\r\n    function getCurrentNumberOfNFTs() external view returns (uint256) {\r\n        return nft.getCurrentNumberOfNFTs();\r\n    }\r\n\r\n    function tokensByAddress() public view returns (uint256[] memory) {\r\n        return nft.getTokensOf(msg.sender);\r\n    }\r\n\r\n    function addRewardToken(address newRewardToken) external onlyOwner {\r\n        require(\r\n            newRewardToken.supportsInterface(\r\n                type(INFTPokeStakeControllerProxy).interfaceId\r\n            ),\r\n            \"Token doesn't implement INFTPokeStakeControllerProxy\"\r\n        );\r\n        bool exists = false;\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            if (address(tokens[i]) == newRewardToken) {\r\n                exists = true;\r\n                break;\r\n            }\r\n        }\r\n        require(!exists, \"The reward token already exists\");\r\n        tokens.push(INFTPokeStakeControllerProxy(newRewardToken));\r\n        emit RewardTokenAdded(newRewardToken);\r\n    }\r\n\r\n    function removeRewardToken(address rewardToken) external onlyOwner {\r\n        require(\r\n            rewardToken.supportsInterface(\r\n                type(INFTPokeStakeControllerProxy).interfaceId\r\n            ),\r\n            \"Token doesn't implement INFTPokeStakeControllerProxy\"\r\n        );\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            if (address(tokens[i]) == rewardToken) {\r\n                tokens[i] = tokens[tokens.length - 1];\r\n                tokens.pop();\r\n                emit RewardTokenRemoved(rewardToken);\r\n                return;\r\n            }\r\n        }\r\n        revert(\"The rewardToken doesn't exists\");\r\n    }\r\n\r\n    function transferTokenBack(address to, uint256 tokenId) public onlyOwner {\r\n        require(\r\n            nft.ownerOf(tokenId) == contractAddress,\r\n            \"The contract is not owner of this token\"\r\n        );\r\n        require(!_allTokensStakeFlag[tokenId], \"Token is already stacked\");\r\n        nft.safeTransferFrom(contractAddress, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Receiver-onERC721Received}.\r\n     * this can be used just when the user is sending directly to the contract\r\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) public virtual override returns (bytes4) {\r\n        emit ReceivedToken(operator, from, tokenId, data);\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    /**\r\n     * @dev stake a single token by transferring from the owner to the stake contract and start earning rewards\r\n     */\r\n    function stake(uint256 tokenId) external {\r\n        require(\r\n            nft.ownerOf(tokenId) == msg.sender,\r\n            \"The sender is not the owner of this token\"\r\n        );\r\n        nft.safeTransferFrom(msg.sender, contractAddress, tokenId);\r\n        require(\r\n            nft.ownerOf(tokenId) == contractAddress,\r\n            \"The owner of this token is not the contract\"\r\n        );\r\n        stakeProcess(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev stake a single token by transferring from the owner to the stake contract and start earning rewards\r\n     */\r\n    function stakeAll() external {\r\n        uint256[] memory userTokens = tokensByAddress();\r\n        require(userTokens.length > 0, \"There are tokens to staked for sender\");\r\n\r\n        for (uint256 i = 0; i < userTokens.length; i++) {\r\n            uint256 tokenId = userTokens[i];\r\n            nft.safeTransferFrom(msg.sender, contractAddress, tokenId);\r\n            require(\r\n                nft.ownerOf(tokenId) == contractAddress,\r\n                \"The owner of this token is not the contract\"\r\n            );\r\n        }\r\n        stakeAllInit(userTokens);\r\n    }\r\n\r\n    /**\r\n     * @dev stake a single token by transferring from the owner to the stake contract and start earning rewards\r\n     */\r\n    function unstake(uint256 tokenId) external {\r\n        require(\r\n            nft.ownerOf(tokenId) == contractAddress,\r\n            \"The owner of this token is not the contract\"\r\n        );\r\n        require(\r\n            isStakedByOwner(msg.sender, tokenId),\r\n            \"The sender is not owner of tokenId to unstake\"\r\n        );\r\n        NFTDetails memory tokenDetails = unstakeProcess(tokenId);\r\n        nft.safeTransferFrom(contractAddress, msg.sender, tokenId);\r\n        require(\r\n            nft.ownerOf(tokenId) == msg.sender,\r\n            \"The sender is not the owner of this token\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            INFTPokeStakeControllerProxy token = tokens[i];\r\n            token.mintNewToken(msg.sender, tokenDetails);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev stake a single token by transferring from the owner to the stake contract and start earning rewards\r\n     */\r\n    function unstakeAll() external {\r\n        uint256[] memory userTokens = getStackedTokens();\r\n        require(userTokens.length > 0, \"There are no staked tokens for sender\");\r\n        NFTDetails[] memory stakedTokenDetails = unstakeAllInit(userTokens);\r\n\r\n        for (uint256 i = 0; i < userTokens.length; i++) {\r\n            uint256 tokenId = userTokens[i];\r\n            nft.safeTransferFrom(contractAddress, msg.sender, tokenId);\r\n            require(\r\n                nft.ownerOf(tokenId) == msg.sender,\r\n                \"The sender is not the owner of this token\"\r\n            );\r\n        }\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            INFTPokeStakeControllerProxy token = tokens[i];\r\n            token.mintNewTokens(msg.sender, stakedTokenDetails);\r\n        }\r\n    }\r\n\r\n    struct NFTStakeDetails {\r\n        uint256 index;\r\n        uint256 stakePosition;\r\n        uint256 stakeTime;\r\n    }\r\n    // Array with all token ids that are stacked\r\n    uint256[] public allTokensStaked;\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => bool) private _allTokensStakeFlag;\r\n\r\n    // mapping from owner to list of staked token ids\r\n    mapping(address => uint256[]) private _ownerTokenList;\r\n    // Mapping from token ID to token details of the owner tokens list\r\n    mapping(uint256 => NFTStakeDetails) public _ownedTokensDetails;\r\n\r\n    function getStackedTokens() public view returns (uint256[] memory) {\r\n        return _ownerTokenList[msg.sender];\r\n    }\r\n\r\n    function getStackedTokensOf(address owner)\r\n        public\r\n        view\r\n        returns (uint256[] memory)\r\n    {\r\n        return _ownerTokenList[owner];\r\n    }\r\n\r\n    function getTokenDetails() public view returns (NFTDetails[] memory) {\r\n        return getTokenDetailsOf(msg.sender);\r\n    }\r\n\r\n    function getTokenDetailsOf(address owner)\r\n        public\r\n        view\r\n        returns (NFTDetails[] memory)\r\n    {\r\n        uint256[] memory tokenIds = getStackedTokensOf(owner);\r\n\r\n        NFTDetails[] memory tokenDetails = new NFTDetails[](tokenIds.length);\r\n\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            NFTStakeDetails memory tokenDetail = _ownedTokensDetails[tokenId];\r\n            tokenDetails[i] = NFTDetails(\r\n                tokenDetail.stakePosition,\r\n                tokenDetail.stakeTime,\r\n                tokenId\r\n            );\r\n        }\r\n\r\n        return tokenDetails;\r\n    }\r\n\r\n    function isStakedByOwner(address owner, uint256 tokenId)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        NFTStakeDetails memory details = _ownedTokensDetails[tokenId];\r\n        return\r\n            details.stakeTime > 0 &&\r\n            _ownerTokenList[owner].length > details.index;\r\n    }\r\n\r\n    function stakeAllInit(uint256[] memory tokenIds) internal {\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            stakeProcess(tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    function stakeProcess(uint256 tokenId) internal {\r\n        require(!_allTokensStakeFlag[tokenId], \"Token is already stacked\");\r\n\r\n        uint256 insertIndex = allTokensStaked.length;\r\n        _allTokensStakeFlag[tokenId] = true;\r\n        _allTokensIndex[tokenId] = insertIndex;\r\n        allTokensStaked.push(tokenId);\r\n\r\n        uint256 currentOwnerIndex = _ownerTokenList[msg.sender].length;\r\n        _ownerTokenList[msg.sender].push(tokenId);\r\n        _ownedTokensDetails[tokenId] = NFTStakeDetails(\r\n            currentOwnerIndex,\r\n            insertIndex,\r\n            block.timestamp\r\n        );\r\n        emit StakeToken(msg.sender, tokenId, insertIndex, block.timestamp);\r\n    }\r\n\r\n    function unstakeProcess(uint256 tokenId)\r\n        internal\r\n        returns (NFTDetails memory)\r\n    {\r\n        require(_allTokensStakeFlag[tokenId], \"Token is not staked\");\r\n\r\n        _allTokensStakeFlag[tokenId] = false;\r\n        uint256 index = _allTokensIndex[tokenId];\r\n        _allTokensIndex[tokenId] = 0;\r\n        allTokensStaked[index] = allTokensStaked[allTokensStaked.length - 1];\r\n        allTokensStaked.pop();\r\n\r\n        NFTStakeDetails memory tokenDetails = _ownedTokensDetails[tokenId];\r\n        uint256[] storage tokenOwnedList = _ownerTokenList[msg.sender];\r\n        uint256 lastTokenId = tokenOwnedList[tokenOwnedList.length - 1];\r\n        tokenOwnedList[tokenDetails.index] = lastTokenId;\r\n        tokenOwnedList.pop();\r\n        _ownedTokensDetails[lastTokenId].index = tokenDetails.index;\r\n        delete _ownedTokensDetails[tokenId];\r\n\r\n        emit UnstakeToken(msg.sender, tokenId, block.timestamp);\r\n        return\r\n            NFTDetails(\r\n                tokenDetails.stakePosition,\r\n                tokenDetails.stakeTime,\r\n                tokenId\r\n            );\r\n    }\r\n\r\n    function unstakeAllInit(uint256[] memory tokenIds)\r\n        internal\r\n        returns (NFTDetails[] memory)\r\n    {\r\n        NFTDetails[] memory tokenDetails = getTokenDetailsOf(msg.sender);\r\n        for (uint256 i = 0; i < tokenIds.length; i++) {\r\n            uint256 tokenId = tokenIds[i];\r\n            require(_allTokensStakeFlag[tokenId], \"Token is not staked\");\r\n\r\n            _allTokensStakeFlag[tokenId] = false;\r\n            uint256 index = _allTokensIndex[tokenId];\r\n            _allTokensIndex[tokenId] = 0;\r\n            uint256 lastToken = allTokensStaked[allTokensStaked.length - 1];\r\n            allTokensStaked[index] = lastToken;\r\n            _allTokensIndex[lastToken] = index;\r\n            allTokensStaked.pop();\r\n            delete _ownedTokensDetails[tokenId];\r\n            emit UnstakeToken(msg.sender, tokenId, block.timestamp);\r\n        }\r\n        delete _ownerTokenList[msg.sender];\r\n        return tokenDetails;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/NFTPokeUtility.sol\r\n\r\npragma solidity 0.8.5;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract NFTPokeUtility is\r\n    Utility,\r\n    ERC20Burnable,\r\n    ERC20Capped,\r\n    ERC165Storage,\r\n    ERC20Snapshot,\r\n    INFTPokeStakeControllerProxy\r\n{\r\n    using ERC165Checker for address;\r\n\r\n    event TokenMinterAdded(address tokenMinter);\r\n    event TokenMinted(address owner, uint256 mintedTokens);\r\n    event TokenBurned(address owner, uint256 burnedTokens);\r\n    event TokenBurnedFrom(address owner, address account, uint256 burnedTokens);\r\n\r\n    address public stakeMinter;\r\n\r\n    uint256 public liquidityPoolTokens = 70107396870423500000000000;\r\n    uint256 public publicSellTokens = 46738264580282300000000000;\r\n    uint256 public privateSellTokens = 23369132290141200000000000;\r\n    uint256 public inGameRewardTokens = 11684566145070600000000000;\r\n\r\n    uint256 public rewardStakeMax = 81791963015494100000000000;\r\n    uint256 public rewardPerSecond = 300000000000000;\r\n    uint256 public rewardTokenPerSecond = 300000000000000;\r\n    uint256 public rewardStakePositionPerSecond = 100000000000000;\r\n\r\n    uint256 private constantValue = 1324200000;\r\n    uint256 private constantValue2 = 113242;\r\n\r\n    /**\r\n     * @dev NFTPokeUtility constructor\r\n     * Supports the IERC20 and IStakeProxy interfaces\r\n     * @param name_ of the token\r\n     * @param symbol_ of the token\r\n     * @param cap_ is the total supply\r\n     */\r\n    constructor(\r\n        string memory name_,\r\n        string memory symbol_,\r\n        uint256 cap_\r\n    ) ERC20(name_, symbol_) ERC20Capped(cap_) {\r\n        _registerInterface(type(IERC20).interfaceId);\r\n        _registerInterface(ERC20.name.selector);\r\n        _registerInterface(ERC20.symbol.selector);\r\n        _registerInterface(ERC20.decimals.selector);\r\n        _registerInterface(type(INFTPokeStakeControllerProxy).interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_mint and ERC20Capped-_mint}.\r\n     * @param account for who to mint new tokens\r\n     * @param amount amount to mint\r\n     */\r\n    function _mint(address account, uint256 amount)\r\n        internal\r\n        virtual\r\n        override(ERC20, ERC20Capped)\r\n    {\r\n        super._mint(account, amount);\r\n        emit TokenMinted(account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_beforeTokenTransfer and ERC20Snapshot-_beforeTokenTransfer }.\r\n     * @param from who to send the tokens\r\n     * @param to who to send the tokens\r\n     * @param amount to be transferred\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override(ERC20, ERC20Snapshot) {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20Snapshot-takeSnapshot}.\r\n     */\r\n    function takeSnapshot() external onlyOwner returns (uint256) {\r\n        return super._snapshot();\r\n    }\r\n\r\n    /**\r\n     * @dev Add a new contract that can mint tokens for users\r\n     * @param minter that has access to mint new tokens for a specific user\r\n     */\r\n    function addTokenMinter(address minter) external onlyOwner {\r\n        require(stakeMinter == address(0), \"Can't assign a new token minter\");\r\n        require(\r\n            minter.supportsInterface(type(INFTPokeStakeController).interfaceId),\r\n            \"Token doesn't implement INFTPokeStakeController\"\r\n        );\r\n        stakeMinter = minter;\r\n        emit TokenMinterAdded(minter);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public override {\r\n        super.burn(amount);\r\n        emit TokenBurned(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * See {ERC20-_burn} and {ERC20-allowance}.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public override {\r\n        super.burnFrom(account, amount);\r\n        emit TokenBurnedFrom(msg.sender, account, amount);\r\n    }\r\n\r\n    bool public privateSellTokensMinted = false;\r\n    bool public publicSellTokensMinted = false;\r\n    bool public liquidityPoolTokensMinted = false;\r\n    bool public inGameRewardTokensMinted = false;\r\n\r\n    function mintForPrivateSell() external onlyOwner {\r\n        require(!privateSellTokensMinted, \"Private sell tokens already minted\");\r\n        privateSellTokensMinted = true;\r\n        _mint(msg.sender, privateSellTokens);\r\n    }\r\n\r\n    function mintForPublicSell() external onlyOwner {\r\n        require(!publicSellTokensMinted, \"Public sell tokens already minted\");\r\n        publicSellTokensMinted = true;\r\n        _mint(msg.sender, publicSellTokens);\r\n    }\r\n\r\n    function mintForLiquidityPoll() external onlyOwner {\r\n        require(\r\n            !liquidityPoolTokensMinted,\r\n            \"Liquidity pool tokens already minted\"\r\n        );\r\n        liquidityPoolTokensMinted = true;\r\n        _mint(msg.sender, liquidityPoolTokens);\r\n    }\r\n\r\n    function mintForInGameRewards() external onlyOwner {\r\n        require(\r\n            !inGameRewardTokensMinted,\r\n            \"In game reward tokens already minted\"\r\n        );\r\n        inGameRewardTokensMinted = true;\r\n        _mint(msg.sender, inGameRewardTokens);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier that checks to see if address who wants to mint has access\r\n     */\r\n    modifier verifyStakeMinter() {\r\n        require(\r\n            msg.sender == stakeMinter,\r\n            \"The minter is not the stake contract\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Mint new tokens for a single NFT token\r\n     * @param owner that will receive new minted tokens\r\n     * @param token details for the NFT token\r\n     */\r\n    function mintNewToken(address owner, NFTDetails memory token)\r\n        external\r\n        override\r\n        verifyStakeMinter\r\n    {\r\n        uint256 stakedTime = block.timestamp - token.stakeTime;\r\n\r\n        uint256 reward = rewardPerSecond * stakedTime;\r\n        uint256 rewardToken = rewardTokenPerSecond * stakedTime;\r\n        uint256 rewardPosition = rewardStakePositionPerSecond * stakedTime;\r\n\r\n        uint256 rewardTokenId = (rewardToken *\r\n            (constantValue - token.tokenId * constantValue2)) / constantValue;\r\n        uint256 rewardStakePosition = (rewardPosition *\r\n            (constantValue - (token.stakePosition + 1) * constantValue2)) /\r\n            constantValue;\r\n\r\n        reward += rewardTokenId + rewardStakePosition;\r\n\r\n        if (totalSupply() + reward > rewardStakeMax) {\r\n            reward = rewardStakeMax - totalSupply();\r\n        }\r\n        require(reward > 0, \"No rewards to mint\");\r\n        _mint(owner, reward);\r\n    }\r\n\r\n    /**\r\n     * @dev Mint new tokens for multiple NFT tokens\r\n     * @param owner that will receive new minted tokens\r\n     * @param tokens details for the NFT tokens\r\n     */\r\n    function mintNewTokens(address owner, NFTDetails[] memory tokens)\r\n        external\r\n        override\r\n        verifyStakeMinter\r\n    {\r\n        uint256 totalReward = 0;\r\n\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            NFTDetails memory token = tokens[i];\r\n\r\n            uint256 stakedTime = block.timestamp - token.stakeTime;\r\n\r\n            uint256 reward = rewardPerSecond * stakedTime;\r\n            uint256 rewardToken = rewardTokenPerSecond * stakedTime;\r\n            uint256 rewardPosition = rewardStakePositionPerSecond * stakedTime;\r\n\r\n            uint256 rewardTokenId = (rewardToken *\r\n                (constantValue - token.tokenId * constantValue2)) /\r\n                constantValue;\r\n            uint256 rewardStakePosition = (rewardPosition *\r\n                (constantValue - (token.stakePosition + 1) * constantValue2)) /\r\n                constantValue;\r\n\r\n            totalReward += reward + rewardTokenId + rewardStakePosition;\r\n        }\r\n        if (totalSupply() + totalReward > rewardStakeMax) {\r\n            totalReward = rewardStakeMax - totalSupply();\r\n        }\r\n        require(totalReward > 0, \"No rewards to mint\");\r\n        _mint(owner, totalReward);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cap_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"called\",\"type\":\"bool\"}],\"name\":\"FallbackCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"called\",\"type\":\"bool\"}],\"name\":\"ReceiveCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Snapshot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedTokens\",\"type\":\"uint256\"}],\"name\":\"TokenBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnedTokens\",\"type\":\"uint256\"}],\"name\":\"TokenBurnedFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintedTokens\",\"type\":\"uint256\"}],\"name\":\"TokenMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenMinter\",\"type\":\"address\"}],\"name\":\"TokenMinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"addTokenMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"canBeReverted\",\"type\":\"bool\"}],\"name\":\"flush\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inGameRewardTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inGameRewardTokensMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPoolTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPoolTokensMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintForInGameRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintForLiquidityPoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintForPrivateSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintForPublicSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakePosition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct ICommon.NFTDetails\",\"name\":\"token\",\"type\":\"tuple\"}],\"name\":\"mintNewToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakePosition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct ICommon.NFTDetails[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"name\":\"mintNewTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSellTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSellTokensMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSellTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSellTokensMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardStakeMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardStakePositionPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"NFTPokeUtility","CompilerVersion":"v0.8.5+commit.a4f2e591","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000c14e0fffc0d4c826ee4000000000000000000000000000000000000000000000000000000000000000000e4e4654506f6b655574696c69747900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044e46505500000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b4b05c2c23000156d631e2154583627c0ea887a5b01d70a1ddd0c780c856f9ff"}]}