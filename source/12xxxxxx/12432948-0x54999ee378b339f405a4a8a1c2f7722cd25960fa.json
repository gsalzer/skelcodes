{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\ncontract GebMath {\r\n    uint256 public constant RAY = 10 ** 27;\r\n    uint256 public constant WAD = 10 ** 18;\r\n\r\n    function ray(uint x) public pure returns (uint z) {\r\n        z = multiply(x, 10 ** 9);\r\n    }\r\n    function rad(uint x) public pure returns (uint z) {\r\n        z = multiply(x, 10 ** 27);\r\n    }\r\n    function minimum(uint x, uint y) public pure returns (uint z) {\r\n        z = (x <= y) ? x : y;\r\n    }\r\n    function addition(uint x, uint y) public pure returns (uint z) {\r\n        z = x + y;\r\n        require(z >= x, \"uint-uint-add-overflow\");\r\n    }\r\n    function subtract(uint x, uint y) public pure returns (uint z) {\r\n        z = x - y;\r\n        require(z <= x, \"uint-uint-sub-underflow\");\r\n    }\r\n    function multiply(uint x, uint y) public pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"uint-uint-mul-overflow\");\r\n    }\r\n    function rmultiply(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, y) / RAY;\r\n    }\r\n    function rdivide(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, RAY) / y;\r\n    }\r\n    function wdivide(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, WAD) / y;\r\n    }\r\n    function wmultiply(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, y) / WAD;\r\n    }\r\n    function rpower(uint x, uint n, uint base) public pure returns (uint z) {\r\n        assembly {\r\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\r\n            default {\r\n                switch mod(n, 2) case 0 { z := base } default { z := x }\r\n                let half := div(base, 2)  // for rounding.\r\n                for { n := div(n, 2) } n { n := div(n,2) } {\r\n                    let xx := mul(x, x)\r\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\r\n                    let xxRound := add(xx, half)\r\n                    if lt(xxRound, xx) { revert(0,0) }\r\n                    x := div(xxRound, base)\r\n                    if mod(n,2) {\r\n                        let zx := mul(z, x)\r\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\r\n                        let zxRound := add(zx, half)\r\n                        if lt(zxRound, zx) { revert(0,0) }\r\n                        z := div(zxRound, base)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nabstract contract StabilityFeeTreasuryLike {\r\n    function getAllowance(address) virtual external view returns (uint, uint);\r\n    function systemCoin() virtual external view returns (address);\r\n    function pullFunds(address, address, uint) virtual external;\r\n    function setTotalAllowance(address, uint256) external virtual;\r\n    function setPerBlockAllowance(address, uint256) external virtual;\r\n}\r\n\r\ncontract IncreasingTreasuryReimbursement is GebMath {\r\n    // --- Auth ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) virtual external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) virtual external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"IncreasingTreasuryReimbursement/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Variables ---\r\n    // Starting reward for the fee receiver/keeper\r\n    uint256 public baseUpdateCallerReward;          // [wad]\r\n    // Max possible reward for the fee receiver/keeper\r\n    uint256 public maxUpdateCallerReward;           // [wad]\r\n    // Max delay taken into consideration when calculating the adjusted reward\r\n    uint256 public maxRewardIncreaseDelay;          // [seconds]\r\n    // Rate applied to baseUpdateCallerReward every extra second passed beyond a certain point (e.g next time when a specific function needs to be called)\r\n    uint256 public perSecondCallerRewardIncrease;   // [ray]\r\n\r\n    // SF treasury\r\n    StabilityFeeTreasuryLike  public treasury;\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event ModifyParameters(\r\n      bytes32 parameter,\r\n      address addr\r\n    );\r\n    event ModifyParameters(\r\n      bytes32 parameter,\r\n      uint256 val\r\n    );\r\n    event FailRewardCaller(bytes revertReason, address feeReceiver, uint256 amount);\r\n\r\n    constructor(\r\n      address treasury_,\r\n      uint256 baseUpdateCallerReward_,\r\n      uint256 maxUpdateCallerReward_,\r\n      uint256 perSecondCallerRewardIncrease_\r\n    ) public {\r\n        if (address(treasury_) != address(0)) {\r\n          require(StabilityFeeTreasuryLike(treasury_).systemCoin() != address(0), \"IncreasingTreasuryReimbursement/treasury-coin-not-set\");\r\n        }\r\n        require(maxUpdateCallerReward_ >= baseUpdateCallerReward_, \"IncreasingTreasuryReimbursement/invalid-max-caller-reward\");\r\n        require(perSecondCallerRewardIncrease_ >= RAY, \"IncreasingTreasuryReimbursement/invalid-per-second-reward-increase\");\r\n        authorizedAccounts[msg.sender] = 1;\r\n\r\n        treasury                        = StabilityFeeTreasuryLike(treasury_);\r\n        baseUpdateCallerReward          = baseUpdateCallerReward_;\r\n        maxUpdateCallerReward           = maxUpdateCallerReward_;\r\n        perSecondCallerRewardIncrease   = perSecondCallerRewardIncrease_;\r\n        maxRewardIncreaseDelay          = uint(-1);\r\n\r\n        emit AddAuthorization(msg.sender);\r\n        emit ModifyParameters(\"treasury\", treasury_);\r\n        emit ModifyParameters(\"baseUpdateCallerReward\", baseUpdateCallerReward);\r\n        emit ModifyParameters(\"maxUpdateCallerReward\", maxUpdateCallerReward);\r\n        emit ModifyParameters(\"perSecondCallerRewardIncrease\", perSecondCallerRewardIncrease);\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n\r\n    // --- Treasury ---\r\n    /**\r\n    * @notice This returns the stability fee treasury allowance for this contract by taking the minimum between the per block and the total allowances\r\n    **/\r\n    function treasuryAllowance() public view returns (uint256) {\r\n        (uint total, uint perBlock) = treasury.getAllowance(address(this));\r\n        return minimum(total, perBlock);\r\n    }\r\n    /*\r\n    * @notice Get the SF reward that can be sent to a function caller right now\r\n    * @param timeOfLastUpdate The last time when the function that the treasury pays for has been updated\r\n    * @param defaultDelayBetweenCalls Enforced delay between calls to the function for which the treasury reimburses callers\r\n    */\r\n    function getCallerReward(uint256 timeOfLastUpdate, uint256 defaultDelayBetweenCalls) public view returns (uint256) {\r\n        // If the rewards are null or if the time of the last update is in the future or present, return 0\r\n        bool nullRewards = (baseUpdateCallerReward == 0 && maxUpdateCallerReward == 0);\r\n        if (either(timeOfLastUpdate >= now, nullRewards)) return 0;\r\n\r\n        // If the time elapsed is smaller than defaultDelayBetweenCalls or if the base reward is zero, return 0\r\n        uint256 timeElapsed = (timeOfLastUpdate == 0) ? defaultDelayBetweenCalls : subtract(now, timeOfLastUpdate);\r\n        if (either(timeElapsed < defaultDelayBetweenCalls, baseUpdateCallerReward == 0)) {\r\n            return 0;\r\n        }\r\n\r\n        // If too much time elapsed, return the max reward\r\n        uint256 adjustedTime      = subtract(timeElapsed, defaultDelayBetweenCalls);\r\n        uint256 maxPossibleReward = minimum(maxUpdateCallerReward, treasuryAllowance() / RAY);\r\n        if (adjustedTime > maxRewardIncreaseDelay) {\r\n            return maxPossibleReward;\r\n        }\r\n\r\n        // Calculate the reward\r\n        uint256 calculatedReward = baseUpdateCallerReward;\r\n        if (adjustedTime > 0) {\r\n            calculatedReward = rmultiply(rpower(perSecondCallerRewardIncrease, adjustedTime, RAY), calculatedReward);\r\n        }\r\n\r\n        // If the reward is higher than max, set it to max\r\n        if (calculatedReward > maxPossibleReward) {\r\n            calculatedReward = maxPossibleReward;\r\n        }\r\n        return calculatedReward;\r\n    }\r\n    /**\r\n    * @notice Send a stability fee reward to an address\r\n    * @param proposedFeeReceiver The SF receiver\r\n    * @param reward The system coin amount to send\r\n    **/\r\n    function rewardCaller(address proposedFeeReceiver, uint256 reward) internal {\r\n        // If the receiver is the treasury itself or if the treasury is null or if the reward is zero, return\r\n        if (address(treasury) == proposedFeeReceiver) return;\r\n        if (either(address(treasury) == address(0), reward == 0)) return;\r\n\r\n        // Determine the actual receiver and send funds\r\n        address finalFeeReceiver = (proposedFeeReceiver == address(0)) ? msg.sender : proposedFeeReceiver;\r\n        try treasury.pullFunds(finalFeeReceiver, treasury.systemCoin(), reward) {}\r\n        catch(bytes memory revertReason) {\r\n            emit FailRewardCaller(revertReason, finalFeeReceiver, reward);\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract SAFEEngineLike {\r\n    function collateralTypes(bytes32) virtual public view returns (\r\n        uint256 debtAmount,        // [wad]\r\n        uint256 accumulatedRate,   // [ray]\r\n        uint256 safetyPrice,       // [ray]\r\n        uint256 debtCeiling,       // [rad]\r\n        uint256 debtFloor          // [rad]\r\n    );\r\n    function globalDebtCeiling() virtual public view returns (uint256);\r\n    function modifyParameters(\r\n        bytes32 parameter,\r\n        uint256 data\r\n    ) virtual external;\r\n    function modifyParameters(\r\n        bytes32 collateralType,\r\n        bytes32 parameter,\r\n        uint256 data\r\n    ) virtual external;\r\n    function addAuthorization(address) external virtual;\r\n    function removeAuthorization(address) external virtual;\r\n}\r\nabstract contract OracleRelayerLike {\r\n    function redemptionRate() virtual public view returns (uint256);\r\n}\r\n\r\ncontract SingleSpotDebtCeilingSetter is IncreasingTreasuryReimbursement {\r\n    // --- Auth ---\r\n    // Mapping of addresses that are allowed to manually recompute the debt ceiling (without being rewarded for it)\r\n    mapping (address => uint256) public manualSetters;\r\n    /*\r\n    * @notify Add a new manual setter\r\n    * @param account The address of the new manual setter\r\n    */\r\n    function addManualSetter(address account) external isAuthorized {\r\n        manualSetters[account] = 1;\r\n        emit AddManualSetter(account);\r\n    }\r\n    /*\r\n    * @notify Remove a manual setter\r\n    * @param account The address of the manual setter to remove\r\n    */\r\n    function removeManualSetter(address account) external isAuthorized {\r\n        manualSetters[account] = 0;\r\n        emit RemoveManualSetter(account);\r\n    }\r\n    /*\r\n    * @notice Modifier for checking that the msg.sender is a whitelisted manual setter\r\n    */\r\n    modifier isManualSetter {\r\n        require(manualSetters[msg.sender] == 1, \"SingleSpotDebtCeilingSetter/not-manual-setter\");\r\n        _;\r\n    }\r\n\r\n    // --- Variables ---\r\n    // The max amount of system coins that can be generated using this collateral type\r\n    uint256 public maxCollateralCeiling;            // [rad]\r\n    // The min amount of system coins that must be generated using this collateral type\r\n    uint256 public minCollateralCeiling;            // [rad]\r\n    // Premium on top of the current amount of debt (backed by the collateral type with collateralName) minted. This is used to calculate a new ceiling\r\n    uint256 public ceilingPercentageChange;         // [hundred]\r\n    // When the debt ceiling was last updated\r\n    uint256 public lastUpdateTime;                  // [timestamp]\r\n    // Enforced time gap between calls\r\n    uint256 public updateDelay;                     // [seconds]\r\n    // Last timestamp of a manual update\r\n    uint256 public lastManualUpdateTime;            // [seconds]\r\n    // Flag that blocks an increase in the debt ceiling when the redemption rate is positive\r\n    uint256 public blockIncreaseWhenRevalue;\r\n    // Flag that blocks a decrease in the debt ceiling when the redemption rate is negative\r\n    uint256 public blockDecreaseWhenDevalue;\r\n    // The collateral's name\r\n    bytes32 public collateralName;\r\n\r\n    // The SAFEEngine contract\r\n    SAFEEngineLike    public safeEngine;\r\n    // The OracleRelayer contract\r\n    OracleRelayerLike public oracleRelayer;\r\n\r\n    // --- Events ---\r\n    event AddManualSetter(address account);\r\n    event RemoveManualSetter(address account);\r\n    event UpdateCeiling(uint256 nextCeiling);\r\n\r\n    constructor(\r\n      address safeEngine_,\r\n      address oracleRelayer_,\r\n      address treasury_,\r\n      bytes32 collateralName_,\r\n      uint256 baseUpdateCallerReward_,\r\n      uint256 maxUpdateCallerReward_,\r\n      uint256 perSecondCallerRewardIncrease_,\r\n      uint256 updateDelay_,\r\n      uint256 ceilingPercentageChange_,\r\n      uint256 maxCollateralCeiling_,\r\n      uint256 minCollateralCeiling_\r\n    ) public IncreasingTreasuryReimbursement(treasury_, baseUpdateCallerReward_, maxUpdateCallerReward_, perSecondCallerRewardIncrease_) {\r\n        require(safeEngine_ != address(0), \"SingleSpotDebtCeilingSetter/invalid-safe-engine\");\r\n        require(oracleRelayer_ != address(0), \"SingleSpotDebtCeilingSetter/invalid-oracle-relayer\");\r\n        require(updateDelay_ > 0, \"SingleSpotDebtCeilingSetter/invalid-update-delay\");\r\n        require(both(ceilingPercentageChange_ > HUNDRED, ceilingPercentageChange_ <= THOUSAND), \"SingleSpotDebtCeilingSetter/invalid-percentage-change\");\r\n        require(minCollateralCeiling_ > 0, \"SingleSpotDebtCeilingSetter/invalid-min-ceiling\");\r\n        require(both(maxCollateralCeiling_ > 0, maxCollateralCeiling_ > minCollateralCeiling_), \"SingleSpotDebtCeilingSetter/invalid-max-ceiling\");\r\n\r\n        manualSetters[msg.sender] = 1;\r\n\r\n        safeEngine                = SAFEEngineLike(safeEngine_);\r\n        oracleRelayer             = OracleRelayerLike(oracleRelayer_);\r\n        collateralName            = collateralName_;\r\n        updateDelay               = updateDelay_;\r\n        ceilingPercentageChange   = ceilingPercentageChange_;\r\n        maxCollateralCeiling      = maxCollateralCeiling_;\r\n        minCollateralCeiling      = minCollateralCeiling_;\r\n        lastManualUpdateTime      = now;\r\n\r\n        // Check that the oracleRelayer has the redemption rate in it\r\n        oracleRelayer.redemptionRate();\r\n\r\n\temit AddManualSetter(msg.sender);\r\n        emit ModifyParameters(\"updateDelay\", updateDelay);\r\n        emit ModifyParameters(\"ceilingPercentageChange\", ceilingPercentageChange);\r\n        emit ModifyParameters(\"maxCollateralCeiling\", maxCollateralCeiling);\r\n        emit ModifyParameters(\"minCollateralCeiling\", minCollateralCeiling);\r\n    }\r\n\r\n    // --- Math ---\r\n    uint256 constant HUNDRED  = 100;\r\n    uint256 constant THOUSAND = 1000;\r\n\r\n    function maximum(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = (x <= y) ? y : x;\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n\r\n    // --- Management ---\r\n    /*\r\n    * @notify Modify the treasury or the oracle relayer address\r\n    * @param parameter The contract address to modify\r\n    * @param addr The new address for the contract\r\n    */\r\n    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\r\n        if (parameter == \"treasury\") {\r\n          require(StabilityFeeTreasuryLike(addr).systemCoin() != address(0), \"SingleSpotDebtCeilingSetter/treasury-coin-not-set\");\r\n          treasury = StabilityFeeTreasuryLike(addr);\r\n        }\r\n        else if (parameter == \"oracleRelayer\") {\r\n          require(addr != address(0), \"SingleSpotDebtCeilingSetter/null-addr\");\r\n          oracleRelayer = OracleRelayerLike(addr);\r\n          // Check that it has the redemption rate\r\n          oracleRelayer.redemptionRate();\r\n        }\r\n        else revert(\"SingleSpotDebtCeilingSetter/modify-unrecognized-param\");\r\n        emit ModifyParameters(\r\n          parameter,\r\n          addr\r\n        );\r\n    }\r\n    /*\r\n    * @notify Modify an uint256 param\r\n    * @param parameter The name of the parameter to modify\r\n    * @param val The new parameter value\r\n    */\r\n    function modifyParameters(bytes32 parameter, uint256 val) external isAuthorized {\r\n        if (parameter == \"baseUpdateCallerReward\") {\r\n          require(val <= maxUpdateCallerReward, \"SingleSpotDebtCeilingSetter/invalid-base-caller-reward\");\r\n          baseUpdateCallerReward = val;\r\n        }\r\n        else if (parameter == \"maxUpdateCallerReward\") {\r\n          require(val >= baseUpdateCallerReward, \"SingleSpotDebtCeilingSetter/invalid-max-caller-reward\");\r\n          maxUpdateCallerReward = val;\r\n        }\r\n        else if (parameter == \"perSecondCallerRewardIncrease\") {\r\n          require(val >= RAY, \"SingleSpotDebtCeilingSetter/invalid-caller-reward-increase\");\r\n          perSecondCallerRewardIncrease = val;\r\n        }\r\n        else if (parameter == \"maxRewardIncreaseDelay\") {\r\n          require(val > 0, \"SingleSpotDebtCeilingSetter/invalid-max-increase-delay\");\r\n          maxRewardIncreaseDelay = val;\r\n        }\r\n        else if (parameter == \"updateDelay\") {\r\n          require(val >= 0, \"SingleSpotDebtCeilingSetter/invalid-call-gap-length\");\r\n          updateDelay = val;\r\n        }\r\n        else if (parameter == \"maxCollateralCeiling\") {\r\n          require(both(val > 0, val > minCollateralCeiling), \"SingleSpotDebtCeilingSetter/invalid-max-ceiling\");\r\n          maxCollateralCeiling = val;\r\n        }\r\n        else if (parameter == \"minCollateralCeiling\") {\r\n          require(both(val > 0, val < maxCollateralCeiling), \"SingleSpotDebtCeilingSetter/invalid-min-ceiling\");\r\n          minCollateralCeiling = val;\r\n        }\r\n        else if (parameter == \"ceilingPercentageChange\") {\r\n          require(both(val > HUNDRED, val <= THOUSAND), \"SingleSpotDebtCeilingSetter/invalid-percentage-change\");\r\n          ceilingPercentageChange = val;\r\n        }\r\n        else if (parameter == \"lastUpdateTime\") {\r\n          require(val > now, \"SingleSpotDebtCeilingSetter/invalid-update-time\");\r\n          lastUpdateTime = val;\r\n        }\r\n        else if (parameter == \"blockIncreaseWhenRevalue\") {\r\n          require(either(val == 1, val == 0), \"SingleSpotDebtCeilingSetter/invalid-block-increase-value\");\r\n          blockIncreaseWhenRevalue = val;\r\n        }\r\n        else if (parameter == \"blockDecreaseWhenDevalue\") {\r\n          require(either(val == 1, val == 0), \"SingleSpotDebtCeilingSetter/invalid-block-decrease-value\");\r\n          blockDecreaseWhenDevalue = val;\r\n        }\r\n        else revert(\"SingleSpotDebtCeilingSetter/modify-unrecognized-param\");\r\n        emit ModifyParameters(\r\n          parameter,\r\n          val\r\n        );\r\n    }\r\n\r\n    // --- Utils ---\r\n    /*\r\n    * @notify Internal function meant to modify the collateral's debt ceiling as well as the global debt ceiling (if needed)\r\n    * @param nextDebtCeiling The new ceiling to set\r\n    */\r\n    function setCeiling(uint256 nextDebtCeiling) internal {\r\n        (uint256 debtAmount, uint256 accumulatedRate, uint256 safetyPrice, uint256 currentDebtCeiling,) = safeEngine.collateralTypes(collateralName);\r\n\r\n        if (safeEngine.globalDebtCeiling() < nextDebtCeiling) {\r\n            safeEngine.modifyParameters(\"globalDebtCeiling\", nextDebtCeiling);\r\n        }\r\n\r\n        if (currentDebtCeiling != nextDebtCeiling) {\r\n            safeEngine.modifyParameters(collateralName, \"debtCeiling\", nextDebtCeiling);\r\n            emit UpdateCeiling(nextDebtCeiling);\r\n        }\r\n    }\r\n\r\n    // --- Auto Updates ---\r\n    /*\r\n    * @notify Periodically updates the debt ceiling. Can be called by anyone\r\n    * @param feeReceiver The address that will receive the reward for updating the ceiling\r\n    */\r\n    function autoUpdateCeiling(address feeReceiver) external {\r\n        // Check that the update time is not in the future\r\n        require(lastUpdateTime < now, \"SingleSpotDebtCeilingSetter/update-time-in-the-future\");\r\n        // Check delay between calls\r\n        require(either(subtract(now, lastUpdateTime) >= updateDelay, lastUpdateTime == 0), \"SingleSpotDebtCeilingSetter/wait-more\");\r\n\r\n        // Get the caller's reward\r\n        uint256 callerReward = getCallerReward(lastUpdateTime, updateDelay);\r\n        // Update lastUpdateTime\r\n        lastUpdateTime = now;\r\n\r\n        // Get the next ceiling and set it\r\n        uint256 nextCollateralCeiling = getNextCollateralCeiling();\r\n        setCeiling(nextCollateralCeiling);\r\n\r\n        // Pay the caller for updating the ceiling\r\n        rewardCaller(feeReceiver, callerReward);\r\n    }\r\n\r\n    // --- Manual Updates ---\r\n    /*\r\n    * @notify Authed function that allows manualSetters to update the debt ceiling whenever they want\r\n    */\r\n    function manualUpdateCeiling() external isManualSetter {\r\n        require(now > lastManualUpdateTime, \"SingleSpotDebtCeilingSetter/cannot-update-twice-same-block\");\r\n        uint256 nextCollateralCeiling = getNextCollateralCeiling();\r\n        lastManualUpdateTime = now;\r\n        setCeiling(nextCollateralCeiling);\r\n    }\r\n\r\n    // --- Getters ---\r\n    /*\r\n    * @notify View function meant to return the new and upcoming debt ceiling. It also applies checks regarding re or devaluation blocks\r\n    */\r\n    function getNextCollateralCeiling() public view returns (uint256) {\r\n        (uint256 debtAmount, uint256 accumulatedRate, uint256 safetyPrice, uint256 currentDebtCeiling, uint256 debtFloor) = safeEngine.collateralTypes(collateralName);\r\n        uint256 adjustedCurrentDebt   = multiply(debtAmount, accumulatedRate);\r\n        uint256 lowestPossibleCeiling = maximum(debtFloor, minCollateralCeiling);\r\n\r\n        if (debtAmount == 0) return lowestPossibleCeiling;\r\n\r\n        uint256 updatedCeiling = multiply(adjustedCurrentDebt, ceilingPercentageChange) / HUNDRED;\r\n        if (updatedCeiling <= lowestPossibleCeiling) return lowestPossibleCeiling;\r\n        else if (updatedCeiling >= maxCollateralCeiling) return maxCollateralCeiling;\r\n\r\n        uint256 redemptionRate = oracleRelayer.redemptionRate();\r\n\r\n        if (either(\r\n          allowsIncrease(redemptionRate, currentDebtCeiling, updatedCeiling),\r\n          allowsDecrease(redemptionRate, currentDebtCeiling, updatedCeiling))\r\n        ) return updatedCeiling;\r\n\r\n        return currentDebtCeiling;\r\n    }\r\n    /*\r\n    * @notify View function meant to return the new and upcoming debt ceiling. It does not perform checks for boundaries\r\n    */\r\n    function getRawUpdatedCeiling() external view returns (uint256) {\r\n        (uint256 debtAmount, uint256 accumulatedRate, uint256 safetyPrice, uint256 currentDebtCeiling, uint256 debtFloor) = safeEngine.collateralTypes(collateralName);\r\n        uint256 adjustedCurrentDebt = multiply(debtAmount, accumulatedRate);\r\n        return multiply(adjustedCurrentDebt, ceilingPercentageChange) / HUNDRED;\r\n    }\r\n    /*\r\n    * @notify View function meant to return whether an increase in the debt ceiling is currently allowed\r\n    * @param redemptionRate A custom redemption rate\r\n    * @param currentDebtCeiling The current debt ceiling for the collateral type with collateralName\r\n    * @param updatedCeiling The new ceiling computed for the collateral type with collateralName\r\n    */\r\n    function allowsIncrease(uint256 redemptionRate, uint256 currentDebtCeiling, uint256 updatedCeiling) public view returns (bool allowIncrease) {\r\n        allowIncrease = either(redemptionRate <= RAY, both(redemptionRate > RAY, blockIncreaseWhenRevalue == 0));\r\n        allowIncrease = both(currentDebtCeiling <= updatedCeiling, allowIncrease);\r\n    }\r\n    /*\r\n    * @notify View function meant to return whether a decrease in the debt ceiling is currently allowed\r\n    * @param redemptionRate A custom redemption rate\r\n    * @param currentDebtCeiling The current debt ceiling for the collateral type with collateralName\r\n    * @param updatedCeiling The new ceiling computed for the collateral type with collateralName\r\n    */\r\n    function allowsDecrease(uint256 redemptionRate, uint256 currentDebtCeiling, uint256 updatedCeiling) public view returns (bool allowDecrease) {\r\n        allowDecrease = either(redemptionRate >= RAY, both(redemptionRate < RAY, blockDecreaseWhenDevalue == 0));\r\n        allowDecrease = both(currentDebtCeiling >= updatedCeiling, allowDecrease);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"safeEngine_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracleRelayer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"collateralName_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUpdateCallerReward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUpdateCallerReward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perSecondCallerRewardIncrease_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateDelay_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ceilingPercentageChange_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCollateralCeiling_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCollateralCeiling_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddManualSetter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailRewardCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveManualSetter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextCeiling\",\"type\":\"uint256\"}],\"name\":\"UpdateCeiling\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addManualSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"addition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentDebtCeiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedCeiling\",\"type\":\"uint256\"}],\"name\":\"allowsDecrease\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowDecrease\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redemptionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentDebtCeiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedCeiling\",\"type\":\"uint256\"}],\"name\":\"allowsIncrease\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowIncrease\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"autoUpdateCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseUpdateCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockDecreaseWhenDevalue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockIncreaseWhenRevalue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ceilingPercentageChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeOfLastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultDelayBetweenCalls\",\"type\":\"uint256\"}],\"name\":\"getCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextCollateralCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRawUpdatedCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastManualUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"manualSetters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualUpdateCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCollateralCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRewardIncreaseDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUpdateCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCollateralCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"minimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"multiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRelayer\",\"outputs\":[{\"internalType\":\"contract OracleRelayerLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perSecondCallerRewardIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"rad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"ray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rdivide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeManualSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rmultiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"}],\"name\":\"rpower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract SAFEEngineLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"subtract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract StabilityFeeTreasuryLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"wdivide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"wmultiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"SingleSpotDebtCeilingSetter","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cc88a9d330da1133df3a7bd823b95e52511a69620000000000000000000000004ed9c0dca0479bc64d8f4eb3007126d5791f785100000000000000000000000083533fdd3285f48204215e9cf38c785371258e764554482d4100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005af3107a400000000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000000000000000000033b2e3c9fd0803ce80000000000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000000000000007dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000000000000001aba4714957d300d0e549208b31adb10000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://94f88ff30dac873013afe99851bbb1deaa3f43388102394c63320ba989efffcc"}]}