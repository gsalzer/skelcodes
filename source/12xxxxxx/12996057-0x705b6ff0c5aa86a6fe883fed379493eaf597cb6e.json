{"status":"1","message":"OK","result":[{"SourceCode":"{\"BlockchainCutiesERC1155Interface.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\ninterface BlockchainCutiesERC1155Interface {\\n    function mintNonFungibleSingleShort(uint128 _type, address _to) external;\\n    function mintNonFungibleSingle(uint256 _type, address _to) external;\\n    function mintNonFungibleShort(uint128 _type, address[] calldata _to) external;\\n    function mintNonFungible(uint256 _type, address[] calldata _to) external;\\n    function mintFungibleSingle(uint256 _id, address _to, uint256 _quantity) external;\\n    function mintFungible(uint256 _id, address[] calldata _to, uint256[] calldata _quantities) external;\\n    function isNonFungible(uint256 _id) external pure returns(bool);\\n    function ownerOf(uint256 _id) external view returns (address);\\n    function totalSupplyNonFungible(uint256 _type) view external returns (uint256);\\n    function totalSupplyNonFungibleShort(uint128 _type) view external returns (uint256);\\n\\n    /**\\n        @notice A distinct Uniform Resource Identifier (URI) for a given token.\\n        @dev URIs are defined in RFC 3986.\\n        The URI may point to a JSON file that conforms to the \\\"ERC-1155 Metadata URI JSON Schema\\\".\\n        @return URI string\\n    */\\n    function uri(uint256 _id) external view returns (string memory);\\n    function proxyTransfer721(address _from, address _to, uint256 _tokenId, bytes calldata _data) external;\\n    function proxyTransfer20(address _from, address _to, uint256 _tokenId, uint256 _value) external;\\n    /**\\n        @notice Get the balance of an account\\u0027s Tokens.\\n        @param _owner  The address of the token holder\\n        @param _id     ID of the Token\\n        @return        The _owner\\u0027s balance of the Token type requested\\n     */\\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\\n    /**\\n        @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\\n        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see \\\"Approval\\\" section of the standard).\\n        MUST revert if `_to` is the zero address.\\n        MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\\n        MUST revert on any other error.\\n        MUST emit the `TransferSingle` event to reflect the balance change (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size \\u003e 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see \\\"Safe Transfer Rules\\\" section of the standard).\\n        @param _from    Source address\\n        @param _to      Target address\\n        @param _id      ID of the token type\\n        @param _value   Transfer amount\\n        @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\\n    */\\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\\n}\\n\"},\"ERC20.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\ncontract ERC20 {\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address tokenOwner) external view returns (uint balance);\\n    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\\n    function transfer(address to, uint tokens) external returns (bool success);\\n    function approve(address spender, uint tokens) external returns (bool success);\\n    function transferFrom(address from, address to, uint tokens) external returns (bool success);\\n\\n    event Transfer(address indexed from, address indexed to, uint tokens);\\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\\n\\n    function onTransfer(address _from, address _to, uint256 _value) external;\\n}\\n\"},\"Operators.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\ncontract Operators {\\n\\n    mapping(address =\\u003e bool) ownerAddress;\\n    mapping(address =\\u003e bool) operatorAddress;\\n\\n    constructor() public {\\n        ownerAddress[msg.sender] = true;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(ownerAddress[msg.sender], \\\"Access denied\\\");\\n        _;\\n    }\\n\\n    function isOwner(address _addr) public view returns (bool) {\\n        return ownerAddress[_addr];\\n    }\\n\\n    function addOwner(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"Owner cannot be zero\\\");\\n\\n        ownerAddress[_newOwner] = true;\\n    }\\n\\n    function removeOwner(address _oldOwner) external onlyOwner {\\n        delete(ownerAddress[_oldOwner]);\\n    }\\n\\n    modifier onlyOperator() {\\n        require(isOperator(msg.sender), \\\"Access denied\\\");\\n        _;\\n    }\\n\\n    function isOperator(address _addr) public view returns (bool) {\\n        return operatorAddress[_addr] || ownerAddress[_addr];\\n    }\\n\\n    function addOperator(address _newOperator) external onlyOwner {\\n        require(_newOperator != address(0), \\\"Operator cannot be zero\\\");\\n\\n        operatorAddress[_newOperator] = true;\\n    }\\n\\n    function removeOperator(address _oldOperator) external onlyOwner {\\n        delete(operatorAddress[_oldOperator]);\\n    }\\n}\\n\"},\"Proxy20_1155.sol\":{\"content\":\"pragma solidity ^0.5.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./Operators.sol\\\";\\nimport \\\"./BlockchainCutiesERC1155Interface.sol\\\";\\n\\ncontract Proxy20_1155 is ERC20, Operators {\\n\\n    BlockchainCutiesERC1155Interface public erc1155;\\n\\n    uint256 public tokenId;\\n    string public tokenName;\\n    string public tokenSymbol;\\n    bool public canSetup = true;\\n    uint256 totalTokens = 0;\\n\\n    modifier canBeStoredIn128Bits(uint256 _value) {\\n        require(_value \\u003c= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, \\\"ERC20: id overflow\\\");\\n        _;\\n    }\\n\\n    function setup(\\n        BlockchainCutiesERC1155Interface _erc1155,\\n        uint256 _tokenId,\\n        string calldata _tokenSymbol,\\n        string calldata _tokenName\\n    ) external onlyOwner canBeStoredIn128Bits(_tokenId) {\\n        require(canSetup, \\\"Contract already initialized\\\");\\n        erc1155 = _erc1155;\\n        tokenId = _tokenId;\\n        tokenSymbol = _tokenSymbol;\\n        tokenName = _tokenName;\\n    }\\n\\n    function disableSetup() external onlyOwner {\\n        canSetup = false;\\n    }\\n\\n    /// @notice A descriptive name for a collection of NFTs in this contract\\n    function name() external view returns (string memory) {\\n        return tokenName;\\n    }\\n\\n    /// @notice An abbreviated name for NFTs in this contract\\n    function symbol() external view returns (string memory) {\\n        return tokenSymbol;\\n    }\\n\\n    function totalSupply() external view returns (uint) {\\n        return totalTokens;\\n    }\\n\\n    function balanceOf(address tokenOwner) external view returns (uint) {\\n        return erc1155.balanceOf(tokenOwner, tokenId);\\n    }\\n\\n    function allowance(address, address) external view returns (uint) {\\n        return 0;\\n    }\\n\\n    function transfer(address _to, uint _value) external returns (bool) {\\n        _transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    function _transfer(address _from, address _to, uint256 _value) internal {\\n        erc1155.proxyTransfer20(_from, _to, tokenId, _value);\\n    }\\n\\n    function approve(address, uint) external returns (bool) {\\n        revert(\\\"ERC20: direct approve is not allowed\\\");\\n    }\\n\\n    function transferFrom(address _from, address _to, uint _value) external returns (bool) {\\n        _transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    function onTransfer(address _from, address _to, uint256 _value) external {\\n        require(msg.sender == address(erc1155), \\\"ERC1155-ERC20: Access denied\\\");\\n        emit Transfer(_from, _to, _value);\\n        if (_from == address(0x0)) {\\n            totalTokens += _value;\\n        }\\n        if (_to == address(0x0)) {\\n            totalTokens -= _value;\\n        }\\n    }\\n}\\n\"}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldOwner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_erc1155\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"name\":\"_tokenName\",\"type\":\"string\"}],\"name\":\"setup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canSetup\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disableSetup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oldOperator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"erc1155\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"Proxy20_1155","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://f1b827457bea08f7738bb72828961a88bc54e2ca8abb9dd3f5178174f18d9347"}]}