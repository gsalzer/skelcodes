{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\ninterface ManagementList {\r\n    function isManager(address accountAddress) external returns (bool);\r\n}\r\n\r\ncontract Manageable {\r\n    ManagementList public managementList;\r\n\r\n    constructor(address _managementListAddress) {\r\n        managementList = ManagementList(_managementListAddress);\r\n    }\r\n\r\n    modifier onlyManagers() {\r\n        bool isManager = managementList.isManager(msg.sender);\r\n        require(isManager, \"ManagementList: caller is not a manager\");\r\n        _;\r\n    }\r\n}\r\n\r\n/*******************************************************\r\n *                       Interfaces                    *\r\n *******************************************************/\r\ninterface IEarnRegistry {\r\n    function assets() external view returns (address[] memory);\r\n\r\n    function numAssets() external view returns (uint256);\r\n}\r\n\r\n/*******************************************************\r\n *                    Generator Logic                  *\r\n *******************************************************/\r\ncontract AddressesGeneratorEarn is Manageable {\r\n    mapping(address => bool) public assetDeprecated; // Support for deprecating assets. If an asset is deprecated it will not appear is results\r\n    uint256 public numberOfDeprecatedAssets; // Used to keep track of the number of deprecated assets for an adapter\r\n    address[] public positionSpenderAddresses; // A settable list of spender addresses with which to fetch asset allowances\r\n    IEarnRegistry public registry; // The registry is used to fetch the list of assets\r\n\r\n    /**\r\n     * Information about the generator\r\n     */\r\n    struct GeneratorInfo {\r\n        address id; // Generator address\r\n        string typeId; // Generator typeId (for example \"VAULT_V2\" or \"IRON_BANK_MARKET\")\r\n        string categoryId; // Generator categoryId (for example \"VAULT\")\r\n    }\r\n\r\n    /**\r\n     * Configure generator\r\n     */\r\n    constructor(address _registryAddress, address _managementListAddress)\r\n        Manageable(_managementListAddress)\r\n    {\r\n        require(\r\n            _managementListAddress != address(0),\r\n            \"Missing management list address\"\r\n        );\r\n        require(_registryAddress != address(0), \"Missing registry address\");\r\n        registry = IEarnRegistry(_registryAddress);\r\n    }\r\n\r\n    /**\r\n     * Deprecate or undeprecate an asset. Deprecated assets will not appear in any adapter or generator method call responses\r\n     */\r\n    function setAssetDeprecated(address assetAddress, bool newDeprecationStatus)\r\n        public\r\n        onlyManagers\r\n    {\r\n        bool currentDeprecationStatus = assetDeprecated[assetAddress];\r\n        if (currentDeprecationStatus == newDeprecationStatus) {\r\n            revert(\"Generator: Unable to change asset deprecation status\");\r\n        }\r\n        if (newDeprecationStatus == true) {\r\n            numberOfDeprecatedAssets++;\r\n        } else {\r\n            numberOfDeprecatedAssets--;\r\n        }\r\n        assetDeprecated[assetAddress] = newDeprecationStatus;\r\n    }\r\n\r\n    /**\r\n     * Set position spender addresses. Used by `adapter.assetAllowances(address,address)`.\r\n     */\r\n    function setPositionSpenderAddresses(address[] memory addresses)\r\n        public\r\n        onlyManagers\r\n    {\r\n        positionSpenderAddresses = addresses;\r\n    }\r\n\r\n    /**\r\n     * Set registry address\r\n     */\r\n    function setRegistryAddress(address _registryAddress) public onlyManagers {\r\n        require(_registryAddress != address(0), \"Missing registry address\");\r\n        registry = IEarnRegistry(_registryAddress);\r\n    }\r\n\r\n    /**\r\n     * Fetch a list of position spender addresses\r\n     */\r\n    function getPositionSpenderAddresses()\r\n        external\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        return positionSpenderAddresses;\r\n    }\r\n\r\n    /**\r\n     * Fetch generator info\r\n     */\r\n    function generatorInfo() public view returns (GeneratorInfo memory) {\r\n        return\r\n            GeneratorInfo({\r\n                id: address(this),\r\n                typeId: \"EARN\",\r\n                categoryId: \"SAFE\"\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Fetch the total number of assets\r\n     */\r\n    function assetsLength() public view returns (uint256) {\r\n        return registry.numAssets() - numberOfDeprecatedAssets;\r\n    }\r\n\r\n    /**\r\n     * Fetch all asset addresses\r\n     */\r\n    function assetsAddresses() public view returns (address[] memory) {\r\n        uint256 _numberOfAssets = registry.numAssets();\r\n        uint256 _filteredAssetsLength = assetsLength();\r\n        address[] memory originalAddresses = registry.assets();\r\n        if (_numberOfAssets == _filteredAssetsLength) {\r\n            return originalAddresses;\r\n        }\r\n        uint256 currentAssetIdx;\r\n        for (uint256 assetIdx = 0; assetIdx < _numberOfAssets; assetIdx++) {\r\n            address currentAssetAddress = originalAddresses[assetIdx];\r\n            bool assetIsNotDeprecated =\r\n                assetDeprecated[currentAssetAddress] == false;\r\n            if (assetIsNotDeprecated) {\r\n                originalAddresses[currentAssetIdx] = currentAssetAddress;\r\n                currentAssetIdx++;\r\n            }\r\n        }\r\n        bytes memory encodedAddresses = abi.encode(originalAddresses);\r\n        assembly {\r\n            // Manually truncate the filtered list\r\n            mstore(add(encodedAddresses, 0x40), _filteredAssetsLength)\r\n        }\r\n        address[] memory filteredAddresses =\r\n            abi.decode(encodedAddresses, (address[]));\r\n\r\n        return filteredAddresses;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_managementListAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetDeprecated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generatorInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"typeId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"categoryId\",\"type\":\"string\"}],\"internalType\":\"struct AddressesGeneratorEarn.GeneratorInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPositionSpenderAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementList\",\"outputs\":[{\"internalType\":\"contract ManagementList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfDeprecatedAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positionSpenderAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IEarnRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newDeprecationStatus\",\"type\":\"bool\"}],\"name\":\"setAssetDeprecated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"setPositionSpenderAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryAddress\",\"type\":\"address\"}],\"name\":\"setRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AddressesGeneratorEarn","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000062a4e0e7574e5407656a65cc8dbdf70f3c6eb04b000000000000000000000000f64e58ee8c7badc741a7ea98fb65488084385674","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dd6c661cca5e17f1560011faa29751a9da8eca3ef46b4c6a48e11459bdc33d4d"}]}