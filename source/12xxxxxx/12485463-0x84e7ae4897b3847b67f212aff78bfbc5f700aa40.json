{"status":"1","message":"OK","result":[{"SourceCode":"{\"VirtualBitcoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./VirtualBitcoinInterface.sol\\\";\\r\\n\\r\\ncontract VirtualBitcoin is VirtualBitcoinInterface {\\r\\n\\r\\n    string  constant public NAME = \\\"Virtual Bitcoin\\\";\\r\\n    string  constant public SYMBOL = \\\"VBTC\\\";\\r\\n    uint256 constant public COIN = 10 ** uint256(DECIMALS);\\r\\n    uint8   constant public DECIMALS = 8;\\r\\n    uint32  constant public SUBSIDY_HALVING_INTERVAL = 210000 * 20;\\r\\n    uint256 constant public MAX_COIN = 21000000 * COIN;\\r\\n    uint256 constant public PIZZA_POWER_PRICE = 10000 * COIN;\\r\\n    uint256 constant public PRECISION = 1e4;\\r\\n\\r\\n    uint256 immutable public genesisEthBlock;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n    mapping(address =\\u003e uint256) private balances;\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private allowed;\\r\\n\\r\\n    struct Pizza {\\r\\n        address owner;\\r\\n        uint256 power;\\r\\n        uint256 accSubsidy;\\r\\n    }\\r\\n    Pizza[] public pizzas;\\r\\n\\r\\n    uint256 public accSubsidyBlock;\\r\\n    uint256 public accSubsidy;\\r\\n    uint256 public totalPower;\\r\\n\\r\\n    constructor() {\\r\\n        genesisEthBlock = block.number;\\r\\n\\r\\n        accSubsidy = 0;\\r\\n        accSubsidyBlock = block.number;\\r\\n\\r\\n        pizzas.push(Pizza({\\r\\n            owner: msg.sender,\\r\\n            power: 1,\\r\\n            accSubsidy: 0\\r\\n        }));\\r\\n\\r\\n        totalPower = 1;\\r\\n    }\\r\\n\\r\\n    function name() external pure override returns (string memory) { return NAME; }\\r\\n    function symbol() external pure override returns (string memory) { return SYMBOL; }\\r\\n    function decimals() external pure override returns (uint8) { return DECIMALS; }\\r\\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\\r\\n\\r\\n    function balanceOf(address user) external view override returns (uint256 balance) {\\r\\n        return balances[user];\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 amount) public override returns (bool success) {\\r\\n        balances[msg.sender] -= amount;\\r\\n        balances[to] += amount;\\r\\n        emit Transfer(msg.sender, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) external override returns (bool success) {\\r\\n        allowed[msg.sender][spender] = amount;\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address user, address spender) external view override returns (uint256 remaining) {\\r\\n        return allowed[user][spender];\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 amount) external override returns (bool success) {\\r\\n        uint256 _allowance = allowed[from][msg.sender];\\r\\n        if (_allowance != type(uint256).max) {\\r\\n            allowed[from][msg.sender] = _allowance - amount;\\r\\n        }\\r\\n        balances[from] -= amount;\\r\\n        balances[to] += amount;\\r\\n        emit Transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint256 amount) internal {\\r\\n        balances[to] += amount;\\r\\n        _totalSupply += amount;\\r\\n        emit Transfer(address(0), to, amount);\\r\\n    }\\r\\n\\r\\n    function collect(address to, uint256 amount) internal {\\r\\n        balances[address(this)] -= amount;\\r\\n        balances[to] += amount;\\r\\n        emit Transfer(address(this), to, amount);\\r\\n    }\\r\\n\\r\\n    function pizzaPrice(uint256 power) external pure override returns (uint256) {\\r\\n        return power * PIZZA_POWER_PRICE;\\r\\n    }\\r\\n\\r\\n    function pizzaCount() external view override returns (uint256) {\\r\\n        return pizzas.length;\\r\\n    }\\r\\n\\r\\n    function subsidyAt(uint256 blockNumber) public view override returns (uint256 amount) {\\r\\n        uint256 era = (blockNumber - genesisEthBlock) / SUBSIDY_HALVING_INTERVAL;\\r\\n        amount = 25 * COIN / 10 / (2 ** era);\\r\\n    }\\r\\n\\r\\n    function calculateAccSubsidy() internal view returns (uint256) {\\r\\n        uint256 _accSubsidyBlock = accSubsidyBlock;\\r\\n        uint256 subsidy = 0;\\r\\n        uint256 era1 = (_accSubsidyBlock - genesisEthBlock) / SUBSIDY_HALVING_INTERVAL;\\r\\n        uint256 era2 = (block.number - genesisEthBlock) / SUBSIDY_HALVING_INTERVAL;\\r\\n\\r\\n        if (era1 == era2) {\\r\\n            subsidy = (block.number - _accSubsidyBlock) * subsidyAt(block.number);\\r\\n        } else {\\r\\n            uint256 boundary = (era1 + 1) * SUBSIDY_HALVING_INTERVAL + genesisEthBlock;\\r\\n            subsidy = (boundary - _accSubsidyBlock) * subsidyAt(_accSubsidyBlock);\\r\\n            uint256 span = era2 - era1;\\r\\n            for (uint256 i = 1; i \\u003c span; i += 1) {\\r\\n                boundary = (era1 + 1 + i) * SUBSIDY_HALVING_INTERVAL + genesisEthBlock;\\r\\n                subsidy += SUBSIDY_HALVING_INTERVAL * subsidyAt(_accSubsidyBlock + SUBSIDY_HALVING_INTERVAL * i);\\r\\n            }\\r\\n            subsidy += (block.number - boundary) * subsidyAt(block.number);\\r\\n        }\\r\\n\\r\\n        return accSubsidy + subsidy * PRECISION / totalPower;\\r\\n    }\\r\\n\\r\\n    function makePizza(uint256 power) internal returns (uint256) {\\r\\n        require(power \\u003e 0);\\r\\n\\r\\n        uint256 pizzaId = pizzas.length;\\r\\n        uint256 _accSubsidy = update();\\r\\n\\r\\n        pizzas.push(Pizza({\\r\\n            owner: msg.sender,\\r\\n            power: power,\\r\\n            accSubsidy: _accSubsidy * power / PRECISION\\r\\n        }));\\r\\n\\r\\n        totalPower += power;\\r\\n        return pizzaId;\\r\\n    }\\r\\n\\r\\n    function buyPizza(uint256 power) external override returns (uint256) {\\r\\n        transfer(address(this), power * PIZZA_POWER_PRICE);\\r\\n        uint256 pizzaId = makePizza(power);\\r\\n        emit BuyPizza(msg.sender, pizzaId, power);\\r\\n        return pizzaId;\\r\\n    }\\r\\n\\r\\n    function changePizza(uint256 pizzaId, uint256 power) external override {\\r\\n        Pizza storage pizza = pizzas[pizzaId];\\r\\n        require(pizzaId != 0);\\r\\n        require(pizza.owner == msg.sender);\\r\\n\\r\\n        uint256 currentPower = pizza.power;\\r\\n        require(currentPower != power);\\r\\n\\r\\n        uint256 _accSubsidy = update();\\r\\n        uint256 subsidy = _accSubsidy * currentPower / PRECISION - pizza.accSubsidy;\\r\\n        if (subsidy \\u003e 0) {\\r\\n            mint(msg.sender, subsidy);\\r\\n        }\\r\\n        emit Mine(msg.sender, pizzaId, subsidy);\\r\\n\\r\\n        if (currentPower \\u003c power) { // upgrade\\r\\n            uint256 diff = power - currentPower;\\r\\n            transfer(address(this), diff * PIZZA_POWER_PRICE);\\r\\n            totalPower += diff;\\r\\n        } else { // downgrade\\r\\n            uint256 diff = currentPower - power;\\r\\n            collect(msg.sender, diff * PIZZA_POWER_PRICE);\\r\\n            totalPower -= diff;\\r\\n        }\\r\\n\\r\\n        pizza.accSubsidy = _accSubsidy * power / PRECISION;\\r\\n        pizza.power = power;\\r\\n\\r\\n        emit ChangePizza(msg.sender, pizzaId, power);\\r\\n    }\\r\\n\\r\\n    function sellPizza(uint256 pizzaId) external override {\\r\\n        Pizza storage pizza = pizzas[pizzaId];\\r\\n        require(pizzaId != 0);\\r\\n        require(pizza.owner == msg.sender);\\r\\n\\r\\n        uint256 power = pizza.power;\\r\\n        mine(pizzaId);\\r\\n        pizza.owner = address(0);\\r\\n        totalPower -= power;\\r\\n\\r\\n        collect(msg.sender, power * PIZZA_POWER_PRICE);\\r\\n        emit SellPizza(msg.sender, pizzaId);\\r\\n    }\\r\\n\\r\\n    function powerOf(uint256 pizzaId) external view override returns (uint256) {\\r\\n        return pizzas[pizzaId].power;\\r\\n    }\\r\\n\\r\\n    function subsidyOf(uint256 pizzaId) external view override returns (uint256) {\\r\\n        Pizza memory pizza = pizzas[pizzaId];\\r\\n        if (pizza.owner == address(0)) {\\r\\n            return 0;\\r\\n        }\\r\\n        return calculateAccSubsidy() * pizza.power / PRECISION - pizza.accSubsidy;\\r\\n    }\\r\\n\\r\\n    function mine(uint256 pizzaId) public override returns (uint256) {\\r\\n        Pizza storage pizza = pizzas[pizzaId];\\r\\n        require(pizza.owner == msg.sender);\\r\\n        uint256 power = pizza.power;\\r\\n\\r\\n        uint256 _accSubsidy = update();\\r\\n        uint256 subsidy = _accSubsidy * power / PRECISION - pizza.accSubsidy;\\r\\n        if (subsidy \\u003e 0) {\\r\\n            mint(msg.sender, subsidy);\\r\\n        }\\r\\n\\r\\n        pizza.accSubsidy = _accSubsidy * power / PRECISION;\\r\\n        emit Mine(msg.sender, pizzaId, subsidy);\\r\\n        return subsidy;\\r\\n    }\\r\\n\\r\\n    function update() internal returns (uint256 _accSubsidy) {\\r\\n        if (accSubsidyBlock != block.number) {\\r\\n            _accSubsidy = calculateAccSubsidy();\\r\\n            accSubsidy = _accSubsidy;\\r\\n            accSubsidyBlock = block.number;\\r\\n        } else {\\r\\n            _accSubsidy = accSubsidy;\\r\\n        }\\r\\n    }\\r\\n}\"},\"VirtualBitcoinInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface VirtualBitcoinInterface {\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n    event BuyPizza(address indexed owner, uint256 indexed pizzaId, uint256 power);\\r\\n    event ChangePizza(address indexed owner, uint256 indexed pizzaId, uint256 power);\\r\\n    event SellPizza(address indexed owner, uint256 indexed pizzaId);\\r\\n    event Mine(address indexed owner, uint256 indexed pizzaId, uint256 subsidy);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n    function transfer(address to, uint256 amount) external returns (bool success);\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool success);\\r\\n    function approve(address spender, uint256 amount) external returns (bool success);\\r\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\r\\n\\r\\n    function pizzaPrice(uint256 power) external view returns (uint256);\\r\\n    function pizzaCount() external view returns (uint256);\\r\\n    function subsidyAt(uint256 blockNumber) external view returns (uint256);\\r\\n    function buyPizza(uint256 power) external returns (uint256);\\r\\n    function sellPizza(uint256 pizzaId) external;\\r\\n    function changePizza(uint256 pizzaId, uint256 power) external;\\r\\n    function powerOf(uint256 pizzaId) external view returns (uint256);\\r\\n    function subsidyOf(uint256 pizzaId) external view returns (uint256);\\r\\n    function mine(uint256 pizzaId) external returns (uint256);\\r\\n}\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pizzaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"name\":\"BuyPizza\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pizzaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"name\":\"ChangePizza\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pizzaId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"subsidy\",\"type\":\"uint256\"}],\"name\":\"Mine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pizzaId\",\"type\":\"uint256\"}],\"name\":\"SellPizza\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_COIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PIZZA_POWER_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUBSIDY_HALVING_INTERVAL\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accSubsidy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accSubsidyBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"name\":\"buyPizza\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pizzaId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"name\":\"changePizza\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisEthBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pizzaId\",\"type\":\"uint256\"}],\"name\":\"mine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pizzaCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"name\":\"pizzaPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pizzas\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSubsidy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pizzaId\",\"type\":\"uint256\"}],\"name\":\"powerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pizzaId\",\"type\":\"uint256\"}],\"name\":\"sellPizza\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"subsidyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pizzaId\",\"type\":\"uint256\"}],\"name\":\"subsidyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VirtualBitcoin","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c01c1057b11c6872560259e57ebd4b8fdb94f8706e045e84199943cd29fcf670"}]}