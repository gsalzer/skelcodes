{"status":"1","message":"OK","result":[{"SourceCode":"/*\r\n * https://lightningshib.com/ \r\n * https://t.me/LightningShib\r\n * https://twitter.com/LightningShib/\r\n *\r\n * ****USING FTPAntiBot**** \r\n *\r\n * Your contract must hold 5Bil $GOLD(ProjektGold) or 5Bil $GREEN(ProjektGreen) in order to make calls on mainnet\r\n *\r\n */ \r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private m_Owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        m_Owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return m_Owner;\r\n    }\r\n    \r\n    function transferOwnership(address _address) public virtual onlyOwner {\r\n        emit OwnershipTransferred(m_Owner, _address);\r\n        m_Owner = _address;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_msgSender() == m_Owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }                                                                                           // You will notice there is no renounceOwnership() This is an unsafe and unnecessary practice\r\n}                                                                                               // By renouncing ownership you lose control over your coin and open it up to potential attacks \r\n                                                                                                // This practice only came about because of the lack of understanding on how contracts work\r\ninterface IUniswapV2Factory {                                                                   // We advise not using a renounceOwnership() function. You can look up hacks of address(0) contracts.\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountTokenADesired,\r\n        uint amountTokenBDesired,\r\n        uint amountTokenAMin,\r\n        uint amountTokenBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface FTPAntiBot {                                                                          // Here we create the interface to interact with AntiBot\r\n    function scanAddress(address _address, address _safeAddress, address _origin) external returns (bool);\r\n    function registerBlock(address _recipient, address _sender) external;\r\n}\r\n\r\ninterface USDC {                                                                          // This is the contract for UniswapV2Pair\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ncontract LightningShiba is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    uint256 private constant TOTAL_SUPPLY = 100000000000000 * 10**9;\r\n    string private m_Name = \"Lightning Shiba\";\r\n    string private m_Symbol = \"LISHIB\";\r\n    uint8 private m_Decimals = 9;\r\n    \r\n    uint256 private m_BanCount = 0;\r\n    uint256 private m_WalletLimit = 2000000000000 * 10**9;\r\n    uint256 private m_MinBalance =   100000000000 * 10**9 ;\r\n    \r\n    \r\n    uint8 private m_DevFee = 5;\r\n    \r\n    address payable private m_ProjectDevelopmentWallet;\r\n    address payable private m_DevWallet;\r\n    address private m_UniswapV2Pair;\r\n    \r\n    bool private m_TradingOpened = false;\r\n    bool private m_IsSwap = false;\r\n    bool private m_SwapEnabled = false;\r\n    bool private m_AntiBot = true;\r\n    bool private m_Intialized = false;\r\n    \r\n    \r\n    mapping (address => bool) private m_Bots;\r\n    mapping (address => bool) private m_Staked;\r\n    mapping (address => bool) private m_ExcludedAddresses;\r\n    mapping (address => uint256) private m_Balances;\r\n    mapping (address => mapping (address => uint256)) private m_Allowances;\r\n    \r\n    FTPAntiBot private AntiBot;\r\n    IUniswapV2Router02 private m_UniswapV2Router;\r\n    USDC private m_USDC;\r\n\r\n    event MaxOutTxLimit(uint MaxTransaction);\r\n    event BanAddress(address Address, address Origin);\r\n    \r\n    modifier lockTheSwap {\r\n        m_IsSwap = true;\r\n        _;\r\n        m_IsSwap = false;\r\n    }\r\n    modifier onlyDev {\r\n        require (_msgSender() == 0xC69857409822c90Bd249e55B397f63a79a878A55, \"Bzzzt!\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    constructor () {\r\n        FTPAntiBot _antiBot = FTPAntiBot(0x590C2B20f7920A2D21eD32A21B616906b4209A43);           // AntiBot address for KOVAN TEST NET (its ok to leave this in mainnet push as long as you reassign it with external function)\r\n        AntiBot = _antiBot;\r\n        \r\n        USDC _USDC = USDC(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n        m_USDC = _USDC;\r\n        \r\n        m_Balances[address(this)] = TOTAL_SUPPLY.div(10).mul(9);\r\n        m_Balances[address(0)] = TOTAL_SUPPLY.div(10);\r\n        m_ExcludedAddresses[owner()] = true;\r\n        m_ExcludedAddresses[address(this)] = true;\r\n        \r\n        emit Transfer(address(0), address(this), TOTAL_SUPPLY);\r\n        emit Transfer(address(this), address(0), TOTAL_SUPPLY.div(10));\r\n    }\r\n\r\n// ####################\r\n// ##### DEFAULTS #####\r\n// ####################\r\n\r\n    function name() public view returns (string memory) {\r\n        return m_Name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return m_Symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return m_Decimals;\r\n    }\r\n\r\n// #####################\r\n// ##### OVERRIDES #####\r\n// #####################\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return TOTAL_SUPPLY;\r\n    }\r\n\r\n    function balanceOf(address _account) public view override returns (uint256) {\r\n        return m_Balances[_account];\r\n    }\r\n\r\n    function transfer(address _recipient, uint256 _amount) public override returns (bool) {\r\n        _transfer(_msgSender(), _recipient, _amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view override returns (uint256) {\r\n        return m_Allowances[_owner][_spender];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _amount) public override returns (bool) {\r\n        _approve(_msgSender(), _spender, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool) {\r\n        _transfer(_sender, _recipient, _amount);\r\n        _approve(_sender, _msgSender(), m_Allowances[_sender][_msgSender()].sub(_amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n// ####################\r\n// ##### PRIVATES #####\r\n// ####################\r\n\r\n    function _readyToTax(address _sender) private view returns(bool) {\r\n        return !m_IsSwap && _sender != m_UniswapV2Pair && m_SwapEnabled && balanceOf(address(this)) > m_MinBalance;\r\n    }\r\n\r\n    function _pleb(address _sender, address _recipient) private view returns(bool) {\r\n        return _sender != owner() && _recipient != owner() && m_TradingOpened;\r\n    }\r\n\r\n    function _senderNotUni(address _sender) private view returns(bool) {\r\n        return _sender != m_UniswapV2Pair;\r\n    }\r\n\r\n    function _txRestricted(address _sender, address _recipient) private view returns(bool) {\r\n        return _sender == m_UniswapV2Pair && _recipient != address(m_UniswapV2Router) && !m_ExcludedAddresses[_recipient];\r\n    }\r\n\r\n    function _walletCapped(address _recipient) private view returns(bool) {\r\n        return _recipient != m_UniswapV2Pair && _recipient != address(m_UniswapV2Router);\r\n    }\r\n\r\n    function _approve(address _owner, address _spender, uint256 _amount) private {\r\n        require(_owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(_spender != address(0), \"ERC20: approve to the zero address\");\r\n        m_Allowances[_owner][_spender] = _amount;\r\n        emit Approval(_owner, _spender, _amount);\r\n    }\r\n\r\n    function _transfer(address _sender, address _recipient, uint256 _amount) private {\r\n        require(_sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(m_Intialized, \"Make sure all parties agree\");\r\n        require(!m_Bots[_sender] && !m_Bots[_recipient], \"Beep Beep Boop, You're a piece of poop\");  // Local logic for banning based on AntiBot results \r\n        \r\n        uint8 _fee = _setFee(_sender, _recipient);\r\n        uint256 _feeAmount = _amount.div(100).mul(_fee);\r\n        uint256 _newAmount = _amount.sub(_feeAmount);\r\n        \r\n        if(m_AntiBot)                                                                           // Check if AntiBot is enabled\r\n            _checkBot(_recipient, _sender, tx.origin);                                          // Calls function for getting AntiBot results and issuing bans\r\n        \r\n        if(_walletCapped(_recipient))\r\n            require(balanceOf(_recipient) < m_WalletLimit);                                     // Check balance of recipient and if < max amount, fails\r\n            \r\n        if (_pleb(_sender, _recipient)) {\r\n            if (_txRestricted(_sender, _recipient)) \r\n                require(_checkTxLimit(_recipient, _amount));\r\n            _tax(_sender);                                                                      // This contract taxes users X% on every tX and converts it to Eth to send to wherever\r\n        }\r\n        \r\n        m_Balances[_sender] = m_Balances[_sender].sub(_amount);\r\n        m_Balances[_recipient] = m_Balances[_recipient].add(_newAmount);\r\n        m_Balances[address(this)] = m_Balances[address(this)].add(_feeAmount);\r\n        \r\n        emit Transfer(_sender, _recipient, _newAmount);\r\n        \r\n        if(m_AntiBot)                                                                           // Check if AntiBot is enabled\r\n            AntiBot.registerBlock(_sender, _recipient);                                         // Tells AntiBot to start watching\r\n\t}\r\n\t\r\n\tfunction _checkBot(address _recipient, address _sender, address _origin) private {\r\n        if((_recipient == m_UniswapV2Pair || _sender == m_UniswapV2Pair) && m_TradingOpened){\r\n            bool recipientAddress = AntiBot.scanAddress(_recipient, m_UniswapV2Pair, _origin);  // Get AntiBot result\r\n            bool senderAddress = AntiBot.scanAddress(_sender, m_UniswapV2Pair, _origin);        // Get AntiBot result\r\n            if(recipientAddress){\r\n                _banSeller(_recipient);\r\n                _banSeller(_origin);\r\n                emit BanAddress(_recipient, _origin);\r\n            }\r\n            if(senderAddress){\r\n                _banSeller(_sender);\r\n                _banSeller(_origin);                                                            // _origin is the wallet controlling the bot, it can never be a contract only a real person\r\n                emit BanAddress(_sender, _origin);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function _banSeller(address _address) private {\r\n        if(!m_Bots[_address])\r\n            m_BanCount += 1;\r\n        m_Bots[_address] = true;\r\n    }\r\n    \r\n    function _checkTxLimit(address _address, uint256 _amount) private view returns (bool) {\r\n        bool _localBool = true;\r\n        uint256 _balance = balanceOf(_address);\r\n        if (_balance.add(_amount) > m_WalletLimit)\r\n            _localBool = false;\r\n        return _localBool;\r\n    }\r\n\t\r\n\tfunction _setFee(address _sender, address _recipient) private returns(uint8){\r\n        bool _takeFee = !(m_ExcludedAddresses[_sender] || m_ExcludedAddresses[_recipient]);\r\n        if(!_takeFee)\r\n            m_DevFee = 0;\r\n        if(_takeFee)\r\n            m_DevFee = 5;\r\n        return m_DevFee;\r\n    }\r\n\r\n    function _tax(address _sender) private {\r\n        uint256 _tokenBalance = balanceOf(address(this));\r\n        if (_readyToTax(_sender)) {\r\n            _swapTokensForUSDC(_tokenBalance);\r\n        }\r\n    }\r\n\r\n    function _swapTokensForUSDC(uint256 _amount) private lockTheSwap {                           // If you want to do something like add taxes to Liquidity, change the logic in this block\r\n        address[] memory _path = new address[](2);                                              // say m_AmountEth = _amount.div(2).add(_amount.div(100))   (Make sure to define m_AmountEth up top)\r\n        _path[0] = address(this);\r\n        _path[1] = address(m_USDC);\r\n        _approve(address(this), address(m_UniswapV2Router), _amount);\r\n        uint256 _devFee = _amount.div(200);\r\n        uint256 _projectDevelopmentFee = _amount.sub(_devFee);\r\n        m_UniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            _devFee,\r\n            0,\r\n            _path,\r\n            m_DevWallet,\r\n            block.timestamp\r\n        );\r\n        m_UniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            _projectDevelopmentFee,\r\n            0,\r\n            _path,\r\n            m_ProjectDevelopmentWallet,\r\n            block.timestamp\r\n        );\r\n    }                                                                                         // call _UniswapV2Router.addLiquidityETH{value: m_AmountEth}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n    \r\n// ####################\r\n// ##### EXTERNAL #####\r\n// ####################\r\n    \r\n    function banCount() external view returns (uint256) {\r\n        return m_BanCount;\r\n    }\r\n    \r\n    function checkIfBanned(address _address) external view returns (bool) {                     // Tool for traders to verify ban status\r\n        bool _banBool = false;\r\n        if(m_Bots[_address])\r\n            _banBool = true;\r\n        return _banBool;\r\n    }\r\n\r\n// ######################\r\n// ##### ONLY OWNER #####\r\n// ######################\r\n\r\n    function addLiquidity() external onlyOwner() {\r\n        require(!m_TradingOpened,\"trading is already open\");\r\n        uint256 _usdcBalance = m_USDC.balanceOf(address(this));\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        m_UniswapV2Router = _uniswapV2Router;\r\n        m_USDC.approve(address(m_UniswapV2Router), _usdcBalance);\r\n        _approve(address(this), address(m_UniswapV2Router), TOTAL_SUPPLY);\r\n        m_UniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), address(m_USDC));\r\n        m_UniswapV2Router.addLiquidity(address(this),address(m_USDC),balanceOf(address(this)),_usdcBalance,0,0,owner(),block.timestamp);\r\n        m_SwapEnabled = true;\r\n        m_TradingOpened = true;\r\n        IERC20(m_UniswapV2Pair).approve(address(m_UniswapV2Router), type(uint).max);\r\n    }\r\n    \r\n    function manualBan(address _a) external onlyOwner() {\r\n       _banSeller(_a);\r\n    }\r\n    \r\n    function removeBan(address _a) external onlyOwner() {\r\n        m_Bots[_a] = false;\r\n        m_BanCount -= 1;\r\n    }\r\n    \r\n    function setProjectDevelopmentWallet(address payable _address) external onlyOwner() {                  // Use this function to assign Dev tax wallet\r\n        m_ProjectDevelopmentWallet = _address;    \r\n        m_ExcludedAddresses[_address] = true;\r\n    }\r\n    \r\n    function setDevWallet(address payable _address) external onlyDev {\r\n        m_Intialized = true;\r\n        m_DevWallet = _address;\r\n    }\r\n    \r\n    function assignAntiBot(address _address) external onlyOwner() {                             // Highly recommend use of a function that can edit AntiBot contract address to allow for AntiBot version updates\r\n        FTPAntiBot _antiBot = FTPAntiBot(_address);                 \r\n        AntiBot = _antiBot;\r\n    }\r\n    \r\n    function emergencyWithdraw() external onlyOwner() {\r\n        m_USDC.transferFrom(address(this), _msgSender(), m_USDC.balanceOf(address(this)));\r\n    }\r\n    \r\n    function toggleAntiBot() external onlyOwner() returns (bool){                               // Having a way to turn interaction with other contracts on/off is a good design practice\r\n        bool _localBool;\r\n        if(m_AntiBot){\r\n            m_AntiBot = false;\r\n            _localBool = false;\r\n        }\r\n        else{\r\n            m_AntiBot = true;\r\n            _localBool = true;\r\n        }\r\n        return _localBool;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Origin\",\"type\":\"address\"}],\"name\":\"BanAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"MaxTransaction\",\"type\":\"uint256\"}],\"name\":\"MaxOutTxLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"assignAntiBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"banCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkIfBanned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"manualBan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"removeBan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setProjectDevelopmentWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleAntiBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LightningShiba","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://76beec53b536b9488199d7dba7df233b70939c1a48d1f4d45e3c9dabbbb59932"}]}