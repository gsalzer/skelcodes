{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.3;\r\n\r\n\r\nstruct FreakerBirtherInfo {\r\n\tuint256 creationSalt;\r\n\tuint8 fortune;\r\n}\r\n\r\n\r\ninterface IEtherFreaker {\r\n\tfunction numTokens() external view returns (uint128 total);\r\n\tfunction birthCertificates(uint256 index) external view returns (uint256 cost);\r\n\tfunction middlePrice() external view returns (uint256);\r\n\tfunction birthTo(address payable to) payable external;\r\n}\r\n\r\n\r\ncontract FreakerBirther {\r\n\tIEtherFreaker internal _etherFreaker = IEtherFreaker(\r\n\t\t0x3A275655586A049FE860Be867D10cdae2Ffc0f33\r\n\t);\r\n\r\n\tconstructor(address payable owner) payable {\r\n\t\t_etherFreaker.birthTo{value: msg.value}(owner);\r\n\t\tselfdestruct(owner);\r\n\t}\r\n}\r\n\r\n\r\ncontract Freakonomics {\r\n\tIEtherFreaker internal _etherFreaker = IEtherFreaker(\r\n\t\t0x3A275655586A049FE860Be867D10cdae2Ffc0f33\r\n\t);\r\n\r\n\taddress payable immutable owner;\r\n\tbytes32 immutable initCodeHash;\r\n\r\n\tconstructor() {\r\n\t\towner = payable(tx.origin);\r\n\t\tinitCodeHash = keccak256(abi.encodePacked(\r\n\t\t\ttype(FreakerBirther).creationCode,\r\n\t\t\tbytes12(0),\r\n\t\t\ttx.origin\r\n\t\t));\r\n\t}\r\n\r\n\tfunction birthingCost() public view returns (uint256 totalCost) {\r\n\t\tuint256 totalCertificates = _etherFreaker.numTokens() - 8;\r\n\t\tif (totalCertificates % 2 == 0) {\r\n\t\t\ttotalCost = (\r\n\t\t\t\t2 * (1 + _etherFreaker.birthCertificates(totalCertificates / 2) * 1005 / 1000) +\r\n\t\t\t\t2 * (1 + _etherFreaker.birthCertificates(1 + totalCertificates / 2) * 1005 / 1000) +\r\n\t\t\t\t2 * (1 + _etherFreaker.birthCertificates(2 + totalCertificates / 2) * 1005 / 1000) +\r\n\t\t\t\t2 * (1 + _etherFreaker.birthCertificates(3 + totalCertificates / 2) * 1005 / 1000)\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\ttotalCost = (\r\n\t\t\t\t1 + _etherFreaker.birthCertificates(totalCertificates / 2) * 1005 / 1000 +\r\n\t\t\t\t2 * (1 + _etherFreaker.birthCertificates(1 + totalCertificates / 2) * 1005 / 1000) +\r\n\t\t\t\t2 * (1 + _etherFreaker.birthCertificates(2 + totalCertificates / 2) * 1005 / 1000) +\r\n\t\t\t\t2 * (1 + _etherFreaker.birthCertificates(3 + totalCertificates / 2) * 1005 / 1000) +\r\n\t\t\t\t1 + _etherFreaker.birthCertificates(4 + totalCertificates / 2) * 1005 / 1000\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction findSet(uint8 minimumFortune) public view returns (FreakerBirtherInfo[8] memory freakers, uint256 totalCost, uint256 gasSpent) {\r\n\t\tuint256 initialGas = gasleft();\r\n\t\tuint256 foundFreakers = 0;\r\n\t\tuint256 creationSalt = 0;\r\n\t\taddress caller;\r\n\t\tuint8 speciesDie;\r\n\t\tuint8 species;\r\n\t\tuint8 fortune;\r\n\t\tuint256 cost;\r\n\r\n\t\twhile (foundFreakers < 8) {\r\n\t\t\tcreationSalt++;\r\n\t\t\tcaller = _findCaller(creationSalt);\r\n\t\t\tspeciesDie = uint8(_randomishIntLessThan(\"species\", caller, 20));\r\n\t        species = (\r\n\t         (speciesDie < 1 ? 0 :\r\n\t          (speciesDie < 3 ? 1 :\r\n\t           (speciesDie < 5 ? 2 :\r\n\t            (speciesDie < 8 ? 3 :\r\n\t             (speciesDie < 11 ? 4 :\r\n\t              (speciesDie < 15 ? 5 :\r\n\t               (speciesDie < 19 ? 6 : 7))))))));\r\n        \tfortune = uint8(\r\n        \t\t_randomishIntLessThan(\r\n        \t\t\t\"fortune\", caller, species < 3 ? 30 : 10\r\n        \t\t) + 1\r\n        \t);\r\n\r\n        \tif (freakers[species].fortune < fortune) {\r\n        \t\tif (\r\n        \t\t\tfreakers[species].creationSalt == 0 &&\r\n        \t\t\tfortune >= minimumFortune\r\n        \t\t) {\r\n        \t\t\tfoundFreakers++;\r\n        \t\t}\r\n\r\n        \t\tfreakers[species].creationSalt = creationSalt;\r\n        \t\tfreakers[species].fortune = fortune;\r\n        \t}\r\n\t\t}\r\n\r\n\t\tfor (uint256 i = 0; i < 8; i++) {\r\n\t\t\tcost = (_etherFreaker.middlePrice() * 1005 / 1000) + 1;\r\n\t\t\ttotalCost += cost;\r\n\t\t}\r\n\r\n\t\tgasSpent = initialGas - gasleft();\r\n\t}\r\n\r\n\tfunction birthSet(uint8 minimumFortune) public payable {\r\n\t\trequire(msg.value >= birthingCost(), \"Not enough ether provided\");\r\n\r\n\t\tFreakerBirtherInfo[8] memory freakers;\r\n\t\tuint256 foundFreakers = 0;\r\n\t\tuint256 creationSalt = 0;\r\n\t\taddress caller;\r\n\t\tuint8 speciesDie;\r\n\t\tuint8 species;\r\n\t\tuint8 fortune;\r\n\t\tuint256 cost;\r\n\r\n\t\twhile (foundFreakers < 8) {\r\n\t\t\tcreationSalt++;\r\n\t\t\tcaller = _findCaller(creationSalt);\r\n\t\t\tspeciesDie = uint8(_randomishIntLessThan(\"species\", caller, 20));\r\n\t        species = (\r\n\t         (speciesDie < 1 ? 0 :\r\n\t          (speciesDie < 3 ? 1 :\r\n\t           (speciesDie < 5 ? 2 :\r\n\t            (speciesDie < 8 ? 3 :\r\n\t             (speciesDie < 11 ? 4 :\r\n\t              (speciesDie < 15 ? 5 :\r\n\t               (speciesDie < 19 ? 6 : 7))))))));\r\n        \tfortune = uint8(\r\n        \t\t_randomishIntLessThan(\r\n        \t\t\t\"fortune\", caller, species < 3 ? 30 : 10\r\n        \t\t) + 1\r\n        \t);\r\n\r\n        \tif (freakers[species].fortune < fortune) {\r\n        \t\tif (\r\n        \t\t\tfreakers[species].creationSalt == 0 &&\r\n        \t\t\tfortune >= minimumFortune\r\n        \t\t) {\r\n        \t\t\tfoundFreakers++;\r\n        \t\t}\r\n\r\n        \t\tfreakers[species].creationSalt = creationSalt;\r\n        \t\tfreakers[species].fortune = fortune;\r\n        \t}\r\n\t\t}\r\n\r\n\t\tfor (uint256 i = 0; i < 8; i++) {\r\n\t\t\tcost = (_etherFreaker.middlePrice() * 1005 / 1000) + 1;\r\n\t\t\tnew FreakerBirther{salt: bytes32(freakers[i].creationSalt), value: cost}(owner);\r\n\t\t}\r\n\r\n\t\t(bool ok,) = owner.call{value: address(this).balance}(\"\");\r\n\t    if (!ok) {\r\n\t        assembly {\r\n\t            returndatacopy(0, 0, returndatasize())\r\n\t            revert(0, returndatasize())\r\n\t        }\r\n\t    }\r\n\t}\r\n\r\n\tfunction _findCaller(uint256 creationSalt) internal view returns (address) {\r\n      return address(            // derive the target deployment address.\r\n        uint160(                 // downcast to match the address type.\r\n          uint256(               // cast to uint to truncate upper digits.\r\n            keccak256(           // compute CREATE2 hash using 4 inputs.\r\n              abi.encodePacked(  // pack all inputs to the hash together.\r\n                bytes1(0xff),    // pass in the control character.\r\n                address(this),   // pass in the address of this contract.\r\n                creationSalt,    // pass in the salt from above.\r\n                initCodeHash     // pass in hash of contract creation code.\r\n              )\r\n            )\r\n          )\r\n        )\r\n      );\r\n\t}\r\n\r\n    function _randomishIntLessThan(bytes32 salt, address caller, uint256 n) internal view returns (uint256) {\r\n        return uint256(keccak256(abi.encodePacked(block.timestamp, caller, salt))) % n;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"minimumFortune\",\"type\":\"uint8\"}],\"name\":\"birthSet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"birthingCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"minimumFortune\",\"type\":\"uint8\"}],\"name\":\"findSet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"creationSalt\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"fortune\",\"type\":\"uint8\"}],\"internalType\":\"struct FreakerBirtherInfo[8]\",\"name\":\"freakers\",\"type\":\"tuple[8]\"},{\"internalType\":\"uint256\",\"name\":\"totalCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasSpent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Freakonomics","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c590fb1acb9f7dd266519b55fdca19436a51b2e128b2a3b47a60a3d92f845c1e"}]}