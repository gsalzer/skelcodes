{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.2.1 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.0.0\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and `int256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value < 2**128, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value < 2**64, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value < 2**32, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value < 2**16, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value < 2**8, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value >= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128) {\r\n        require(value >= -2**127 && value < 2**127, \"SafeCast: value doesn\\'t fit in 128 bits\");\r\n        return int128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64) {\r\n        require(value >= -2**63 && value < 2**63, \"SafeCast: value doesn\\'t fit in 64 bits\");\r\n        return int64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32) {\r\n        require(value >= -2**31 && value < 2**31, \"SafeCast: value doesn\\'t fit in 32 bits\");\r\n        return int32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16) {\r\n        require(value >= -2**15 && value < 2**15, \"SafeCast: value doesn\\'t fit in 16 bits\");\r\n        return int16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8) {\r\n        require(value >= -2**7 && value < 2**7, \"SafeCast: value doesn\\'t fit in 8 bits\");\r\n        return int8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        require(value < 2**255, \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @author          Yisi Liu\r\n * @contact         yisiliu@gmail.com\r\n * @author_time     01/06/2021\r\n**/\r\n\r\npragma solidity >= 0.8.0;\r\n\r\nabstract\r\ncontract IQLF is IERC165 {\r\n    /**\r\n     * @dev Check if the given address is qualified, implemented on demand.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` account to be checked\r\n     * - `data`  data to prove if a user is qualified.\r\n     *           For instance, it can be a MerkelProof to prove if a user is in a whitelist\r\n     *\r\n     * Return:\r\n     *\r\n     * - `bool` whether the account is qualified for ITO\r\n     * - `string` if not qualified, it contains the error message(reason)\r\n     */\r\n    function ifQualified (address account, bytes32[] memory data) virtual external view returns (bool, string memory);\r\n\r\n    /**\r\n     * @dev Logs if the given address is qualified, implemented on demand.\r\n     */\r\n    function logQualified (address account, bytes32[] memory data) virtual external returns (bool, string memory);\r\n\r\n    /**\r\n     * @dev Ensure that custom contract implements `ifQualified` amd `logQualified` correctly.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) virtual external override pure returns (bool) {\r\n        return interfaceId == this.supportsInterface.selector || \r\n            interfaceId == (this.ifQualified.selector ^ this.logQualified.selector);\r\n    }\r\n\r\n    /**\r\n     * @dev Emit when `logQualified` is called to decide if the given `address`\r\n     * is `qualified` according to the preset rule by the contract creator and \r\n     * the current block `number` and the current block `timestamp`.\r\n     */\r\n    event Qualification(address indexed account, bool qualified, uint256 blockNumber, uint256 timestamp);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @author          Yisi Liu\r\n * @contact         yisiliu@gmail.com\r\n * @author_time     01/06/2021\r\n * @maintainer      Hancheng Zhou, Yisi Liu, Andy Jiang\r\n * @maintain_time   06/15/2021\r\n**/\r\n\r\npragma solidity >= 0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract HappyTokenPool is Initializable {\r\n    struct Packed1 {\r\n        address qualification_addr;\r\n        uint40 password;\r\n    }\r\n\r\n    struct Packed2 {\r\n        uint128 total_tokens;\r\n        uint128 limit;\r\n    }\r\n\r\n    struct Packed3 {\r\n        address token_address;\r\n        uint32 start_time;\r\n        uint32 end_time;\r\n        uint32 unlock_time;\r\n    }\r\n\r\n    struct Pool {\r\n        // CAUTION: DO NOT CHANGE ORDER & TYPE OF THESE VARIABLES\r\n        // GOOGLE KEYWORDS \"SOLIDITY, UPGRADEABLE CONTRACTS, STORAGE\" FOR MORE INFO\r\n        Packed1 packed1;\r\n        Packed2 packed2;\r\n        Packed3 packed3;\r\n        address creator;\r\n        address[] exchange_addrs;   // a list of ERC20 addresses for swapping\r\n        uint128[] exchanged_tokens; // a list of amounts of swapped tokens\r\n        uint128[] ratios;           // a list of swap ratios\r\n                                    // length = 2 * exchange_addrs.length\r\n                                    // [address1, target, address2, target, ...]\r\n                                    // e.g. [1, 10]\r\n                                    // represents 1 tokenA to swap 10 target token\r\n                                    // note: each ratio pair needs to be coprime\r\n        mapping(address => uint256) swapped_map;      // swapped amount of an address\r\n    }\r\n\r\n    // swap pool filling success event\r\n    event FillSuccess (\r\n        address indexed creator,\r\n        bytes32 indexed id,\r\n        uint256 total,\r\n        uint256 creation_time,\r\n        address token_address,\r\n        string message,\r\n        uint256 start,\r\n        uint256 end,\r\n        address[] exchange_addrs,\r\n        uint128[] ratios,\r\n        address qualification,\r\n        uint256 limit\r\n    );\r\n\r\n    // swap success event\r\n    event SwapSuccess (\r\n        bytes32 indexed id,\r\n        address indexed swapper,\r\n        address from_address,\r\n        address to_address,\r\n        uint256 from_value,\r\n        uint256 to_value,\r\n        uint128 input_total\r\n    );\r\n\r\n    // claim success event\r\n    event ClaimSuccess (\r\n        bytes32 indexed id,\r\n        address indexed claimer,\r\n        uint256 timestamp,\r\n        uint256 to_value,\r\n        address token_address\r\n    );\r\n\r\n    // swap pool destruct success event\r\n    event DestructSuccess (\r\n        bytes32 indexed id,\r\n        address indexed token_address,\r\n        uint256 remaining_balance,\r\n        uint128[] exchanged_values\r\n    );\r\n\r\n    // single token withdrawl from a swap pool success even\r\n    event WithdrawSuccess (\r\n        bytes32 indexed id,\r\n        address indexed token_address,\r\n        uint256 withdraw_balance\r\n    );\r\n\r\n    using SafeERC20 for IERC20;\r\n    // CAUTION: DO NOT CHANGE ORDER & TYPE OF THESE VARIABLES\r\n    // GOOGLE KEYWORDS \"SOLIDITY, UPGRADEABLE CONTRACTS, STORAGE\" FOR MORE INFO\r\n    mapping(bytes32 => Pool) pool_by_id;    // maps an id to a Pool instance\r\n    bytes32 private seed;\r\n    address private DEFAULT_ADDRESS;\r\n    uint64 public base_time;\r\n    uint32 private nonce;\r\n\r\n    function initialize(uint64 _base_time) public initializer {\r\n        seed = keccak256(abi.encodePacked(\"MASK\", block.timestamp, msg.sender));\r\n        DEFAULT_ADDRESS = address(0);\r\n        base_time = _base_time;\r\n    }\r\n\r\n    /**\r\n     * @dev \r\n     * fill_pool() creates a swap pool with specific parameters from input\r\n     * _hash                sha3-256(password)\r\n     * _start               start time delta, real start time = base_time + _start\r\n     * _end                 end time delta, real end time = base_time + _end\r\n     * message              swap pool creation message, only stored in FillSuccess event\r\n     * _exchange_addrs      swap token list (0x0 for ETH, only supports ETH and ERC20 now)\r\n     * _ratios              swap pair ratio list\r\n     * _unlock_time         unlock time delta real unlock time = base_time + _unlock_time\r\n     * _token_addr          swap target token address\r\n     * _total_tokens        target token total swap amount\r\n     * _limit               target token single swap limit\r\n     * _qualification       the qualification contract address based on IQLF to determine qualification\r\n     * This function takes the above parameters and creates the pool. _total_tokens of the target token\r\n     * will be successfully transferred to this contract securely on a successful run of this function.\r\n    **/\r\n    function fill_pool (bytes32 _hash, uint256 _start, uint256 _end, string memory _message,\r\n                        address[] memory _exchange_addrs, uint128[] memory _ratios, uint256 _unlock_time,\r\n                        address _token_addr, uint256 _total_tokens, uint256 _limit, address _qualification)\r\n    public payable {\r\n        nonce ++;\r\n        require(_start < _end, \"Start time should be earlier than end time.\");\r\n        require(_end < _unlock_time || _unlock_time == 0, \"End time should be earlier than unlock time\");\r\n        require(_limit <= _total_tokens, \"Limit needs to be less than or equal to the total supply\");\r\n        require(_total_tokens < 2 ** 128, \"No more than 2^128 tokens(incluidng decimals) allowed\");\r\n        require(_exchange_addrs.length > 0, \"Exchange token addresses need to be set\");\r\n        require(_ratios.length == 2 * _exchange_addrs.length, \"Size of ratios = 2 * size of exchange_addrs\");\r\n\r\n        bytes32 _id = keccak256(abi.encodePacked(msg.sender, block.timestamp, nonce, seed));\r\n        Pool storage pool = pool_by_id[_id];\r\n        pool.packed1 = Packed1(_qualification, uint40(uint256(_hash) >> 216));\r\n        pool.packed2 = Packed2(uint128(_total_tokens), uint128(_limit));\r\n        pool.packed3 = Packed3(_token_addr, uint32(_start), uint32(_end), uint32(_unlock_time));\r\n        pool.creator = msg.sender;\r\n        pool.exchange_addrs = _exchange_addrs;\r\n\r\n        // Init each token swapped amount to 0\r\n        for (uint256 i = 0; i < _exchange_addrs.length; i++) {\r\n            if (_exchange_addrs[i] != DEFAULT_ADDRESS) {\r\n                // TODO: Is there a better way to validate an ERC20?\r\n                require(IERC20(_exchange_addrs[i]).totalSupply() > 0, \"Not a valid ERC20\");\r\n            }\r\n            pool.exchanged_tokens.push(0); \r\n        }\r\n\r\n        pool.ratios = _ratios;                                          // 256 * k\r\n        IERC20(_token_addr).safeTransferFrom(msg.sender, address(this), _total_tokens);\r\n\r\n        {\r\n            // Solidity has stack depth limitation: \"Stack too deep, try removing local variables\"\r\n            // add local variables as a workaround\r\n            uint256 total_tokens = _total_tokens;\r\n            address token_addr = _token_addr;\r\n            string memory message = _message;\r\n            uint256 start = _start;\r\n            uint256 end = _end;\r\n            address[] memory exchange_addrs = _exchange_addrs;\r\n            uint128[] memory ratios = _ratios;\r\n            address qualification = _qualification;\r\n            uint256 limit = _limit;\r\n\r\n            emit FillSuccess(\r\n                msg.sender,\r\n                _id,\r\n                total_tokens,\r\n                block.timestamp,\r\n                token_addr,\r\n                message,\r\n                start,\r\n                end,\r\n                exchange_addrs,\r\n                ratios,\r\n                qualification,\r\n                limit\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev\r\n     * swap() allows users to swap tokens in a swap pool\r\n     * id                   swap pool id\r\n     * verification         sha3-256(sha3-256(password)[:40]+swapper_address)\r\n     * validation           sha3-256(swapper_address)\r\n     * exchange_addr_i     the index of the exchange address of the list\r\n     * input_total          the input amount of the specific token\r\n     * This function is called by the swapper who approves the specific ERC20 or directly transfer the ETH\r\n     * first and wants to swap the desired amount of the target token. The swapped amount is calculated\r\n     * based on the pool ratio. After swap successfully, the same account can not swap the same pool again.\r\n    **/\r\n\r\n    function swap(\r\n        bytes32 id,\r\n        bytes32 verification,\r\n        uint256 exchange_addr_i,\r\n        uint128 input_total,\r\n        bytes32[] memory data\r\n    )\r\n    public payable returns (uint256 swapped) {\r\n\r\n        uint128 from_value = input_total;\r\n        Pool storage pool = pool_by_id[id];\r\n        Packed1 memory packed1 = pool.packed1;\r\n        Packed2 memory packed2 = pool.packed2;\r\n        Packed3 memory packed3 = pool.packed3;\r\n        {\r\n            bool qualified;\r\n            string memory errorMsg;\r\n            (qualified, errorMsg) = IQLF(packed1.qualification_addr).logQualified(msg.sender, data);\r\n            require(qualified, errorMsg);\r\n        }\r\n        require (packed3.start_time + base_time < block.timestamp, \"Not started.\");\r\n        require (packed3.end_time + base_time > block.timestamp, \"Expired.\");\r\n        // sha3(sha3(passowrd)[:40] + msg.sender) so that the raw password will never appear in the contract\r\n        require (\r\n            verification == keccak256(abi.encodePacked(uint256(packed1.password), msg.sender)),\r\n            'Wrong Password'\r\n        );\r\n\r\n        // revert if the pool is empty\r\n        require (packed2.total_tokens > 0, \"Out of Stock\");\r\n\r\n        address exchange_addr = pool.exchange_addrs[exchange_addr_i];\r\n        uint256 ratioA = pool.ratios[exchange_addr_i*2];\r\n        uint256 ratioB = pool.ratios[exchange_addr_i*2 + 1];\r\n        // check if the input is enough for the desired transfer\r\n        if (exchange_addr == DEFAULT_ADDRESS) {\r\n            require(msg.value == from_value, 'No enough ether.');\r\n        }\r\n\r\n        uint128 swapped_tokens = SafeCast.toUint128(SafeMath.div(SafeMath.mul(from_value, ratioB), ratioA));\r\n        require(swapped_tokens > 0, \"Better not draw water with a sieve\");\r\n\r\n        if (swapped_tokens > packed2.limit) {\r\n            // don't be greedy - you can only get at most limit tokens\r\n            swapped_tokens = packed2.limit;\r\n            // Update from_value\r\n            from_value = SafeCast.toUint128(SafeMath.div(SafeMath.mul(packed2.limit, ratioA), ratioB));\r\n        } else if (swapped_tokens > packed2.total_tokens ) {\r\n            // if the left tokens are not enough\r\n            swapped_tokens = packed2.total_tokens;\r\n            // Update from_value\r\n            from_value = SafeCast.toUint128(SafeMath.div(SafeMath.mul(packed2.total_tokens , ratioA), ratioB));\r\n            // return the eth\r\n            if (exchange_addr == DEFAULT_ADDRESS)\r\n                payable(msg.sender).transfer(msg.value - from_value);\r\n        }\r\n        // make sure again\r\n        require(swapped_tokens <= packed2.limit);\r\n        // update exchanged\r\n        pool.exchanged_tokens[exchange_addr_i] = SafeCast.toUint128(\r\n            SafeMath.add(\r\n                pool.exchanged_tokens[exchange_addr_i],\r\n                from_value\r\n            )\r\n        );\r\n\r\n        // penalize greedy attackers by placing duplication check at the very last\r\n        require (pool.swapped_map[msg.sender] == 0, \"Already swapped\");\r\n\r\n        // update the remaining tokens and swapped token mapping\r\n        pool.packed2.total_tokens = SafeCast.toUint128(SafeMath.sub(packed2.total_tokens, swapped_tokens));\r\n        pool.swapped_map[msg.sender] = swapped_tokens;\r\n\r\n        // transfer the token after state changing\r\n        // ETH comes with the tx, but ERC20 does not - INPUT\r\n        if (exchange_addr != DEFAULT_ADDRESS) {\r\n            IERC20(exchange_addr).safeTransferFrom(msg.sender, address(this), from_value);\r\n        }\r\n\r\n        {\r\n            // Solidity has stack depth limitation: \"Stack too deep, try removing local variables\"\r\n            // add local variables as a workaround\r\n            // Swap success event\r\n            bytes32 _id = id;\r\n            uint128 _input_total = input_total;\r\n            emit SwapSuccess(\r\n                _id,\r\n                msg.sender,\r\n                exchange_addr,\r\n                packed3.token_address,\r\n                from_value,\r\n                swapped_tokens,\r\n                _input_total\r\n            );\r\n        }\r\n\r\n        // if unlock_time == 0, transfer the swapped tokens to the recipient address (msg.sender) - OUTPUT\r\n        // if not, claim() needs to be called to get the token\r\n        if (packed3.unlock_time == 0) {\r\n            IERC20(packed3.token_address).safeTransfer(msg.sender, swapped_tokens);\r\n            emit ClaimSuccess(id, msg.sender, block.timestamp, swapped_tokens, packed3.token_address);\r\n        }\r\n            \r\n        return swapped_tokens;\r\n    }\r\n\r\n    /**\r\n     * check_availability() returns a bunch of pool info given a pool id\r\n     * id                    swap pool id\r\n     * this function returns 1. exchange_addrs that can be used to determine the index\r\n     *                       2. remaining target tokens\r\n     *                       3. if started\r\n     *                       4. if ended\r\n     *                       5. swapped amount of the query address\r\n     *                       5. exchanged amount of each token\r\n    **/\r\n\r\n    function check_availability (bytes32 id)\r\n        external\r\n        view\r\n        returns (\r\n            address[] memory exchange_addrs,\r\n            uint256 remaining,\r\n            bool started,\r\n            bool expired,\r\n            bool unlocked,\r\n            uint256 unlock_time,\r\n            uint256 swapped,\r\n            uint128[] memory exchanged_tokens\r\n        )\r\n    {\r\n        Pool storage pool = pool_by_id[id];\r\n        Packed3 memory packed3 = pool.packed3;\r\n        return (\r\n            pool.exchange_addrs,                                                // exchange_addrs 0x0 means destructed\r\n            pool.packed2.total_tokens,                                          // remaining\r\n            block.timestamp > packed3.start_time + base_time,                   // started\r\n            block.timestamp > packed3.end_time + base_time,                     // expired\r\n            block.timestamp > packed3.unlock_time + base_time,                  // unlocked\r\n            packed3.unlock_time + base_time,                                    // unlock_time\r\n            pool.swapped_map[msg.sender],                                       // swapped number \r\n            pool.exchanged_tokens                                               // exchanged tokens\r\n        );\r\n    }\r\n\r\n    function claim(bytes32[] calldata ito_ids) external {\r\n        for (uint256 i = 0; i < ito_ids.length; i++) {\r\n            Pool storage pool = pool_by_id[ito_ids[i]];\r\n            Packed3 memory packed3 = pool.packed3;\r\n            if (packed3.unlock_time == 0)\r\n                continue;\r\n            if (packed3.unlock_time + base_time > block.timestamp)\r\n                continue;\r\n            uint256 claimed_amount = pool.swapped_map[msg.sender];\r\n            if (claimed_amount == 0)\r\n                continue;\r\n            pool.swapped_map[msg.sender] = 0;\r\n            IERC20(packed3.token_address).safeTransfer(msg.sender, claimed_amount);\r\n            emit ClaimSuccess(ito_ids[i], msg.sender, block.timestamp, claimed_amount, packed3.token_address);\r\n        }\r\n    }\r\n\r\n    function setUnlockTime(bytes32 id, uint32 _unlock_time) public {\r\n        Pool storage pool = pool_by_id[id];\r\n        uint32 packed3_unlock_time = pool.packed3.unlock_time;\r\n        require(pool.creator == msg.sender, \"Pool Creator Only\");\r\n        require(block.timestamp < (packed3_unlock_time + base_time), \"Too Late\");\r\n        require(packed3_unlock_time != 0, \"Not eligible when unlock_time is 0\");\r\n        require(_unlock_time != 0, \"Cannot set to 0\");\r\n        pool.packed3.unlock_time = _unlock_time;\r\n    }\r\n\r\n    /**\r\n     * destruct() destructs the given pool given the pool id\r\n     * id                    swap pool id\r\n     * this function can only be called by the pool creator. after validation, it transfers all the remaining token \r\n     * (if any) and all the swapped tokens to the pool creator. it will then destruct the pool by reseting almost \r\n     * all the variables to zero to get the gas refund.\r\n     * note that this function may not work if a pool needs to transfer over ~200 tokens back to the address due to \r\n     * the block gas limit. we have another function withdraw() to help the pool creator to withdraw a single token \r\n    **/\r\n\r\n    function destruct (bytes32 id) public {\r\n        Pool storage pool = pool_by_id[id];\r\n        Packed3 memory packed3 = pool.packed3;\r\n        require(msg.sender == pool.creator, \"Only the pool creator can destruct.\");\r\n\r\n        uint256 expiration = pool.packed3.end_time + base_time;\r\n        uint256 remaining_tokens = pool.packed2.total_tokens;\r\n        // only after expiration or the pool is empty\r\n        require(expiration <= block.timestamp || remaining_tokens == 0, \"Not expired yet\");\r\n\r\n        // if any left in the pool\r\n        if (remaining_tokens != 0) {\r\n            IERC20(packed3.token_address).safeTransfer(msg.sender, remaining_tokens);\r\n        }\r\n        \r\n        // transfer the swapped tokens accordingly\r\n        // note this loop may exceed the block gas limit so if >200 exchange_addrs this may not work\r\n        for (uint256 i = 0; i < pool.exchange_addrs.length; i++) {\r\n            if (pool.exchanged_tokens[i] > 0) {\r\n                // ERC20\r\n                if (pool.exchange_addrs[i] != DEFAULT_ADDRESS)\r\n                    IERC20(pool.exchange_addrs[i]).safeTransfer(msg.sender, pool.exchanged_tokens[i]);\r\n                // ETH\r\n                else\r\n                    payable(msg.sender).transfer(pool.exchanged_tokens[i]);\r\n            }\r\n        }\r\n        emit DestructSuccess(id, packed3.token_address, remaining_tokens, pool.exchanged_tokens);\r\n\r\n        // Gas Refund\r\n        pool.packed1 = Packed1(DEFAULT_ADDRESS, 0);\r\n        pool.packed2 = Packed2(0, 0);\r\n        for (uint256 i = 0; i < pool.exchange_addrs.length; i++) {\r\n            pool.exchange_addrs[i] = DEFAULT_ADDRESS;\r\n            pool.exchanged_tokens[i] = 0;\r\n            pool.ratios[i*2] = 0;\r\n            pool.ratios[i*2+1] = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * withdraw() transfers out a single token after a pool is expired or empty \r\n     * id                    swap pool id\r\n     * addr_i                withdraw token index\r\n     * this function can only be called by the pool creator. after validation, it transfers the addr_i th token \r\n     * out to the pool creator address.\r\n    **/\r\n\r\n    function withdraw (bytes32 id, uint256 addr_i) public {\r\n        Pool storage pool = pool_by_id[id];\r\n        require(msg.sender == pool.creator, \"Only the pool creator can withdraw.\");\r\n\r\n        uint256 withdraw_balance = pool.exchanged_tokens[addr_i];\r\n        require(withdraw_balance > 0, \"None of this token left\");\r\n        uint256 expiration = pool.packed3.end_time + base_time;\r\n        uint256 remaining_tokens = pool.packed2.total_tokens;\r\n        // only after expiration or the pool is empty\r\n        require(expiration <= block.timestamp || remaining_tokens == 0, \"Not expired yet\");\r\n        address token_address = pool.exchange_addrs[addr_i];\r\n\r\n        // clear the record\r\n        pool.exchanged_tokens[addr_i] = 0;\r\n\r\n        // ERC20\r\n        if (token_address != DEFAULT_ADDRESS)\r\n            IERC20(token_address).safeTransfer(msg.sender, withdraw_balance);\r\n        // ETH\r\n        else\r\n            payable(msg.sender).transfer(withdraw_balance);\r\n        emit WithdrawSuccess(id, token_address, withdraw_balance);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"}],\"name\":\"ClaimSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128[]\",\"name\":\"exchanged_values\",\"type\":\"uint128[]\"}],\"name\":\"DestructSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creation_time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"exchange_addrs\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint128[]\",\"name\":\"ratios\",\"type\":\"uint128[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"qualification\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"FillSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"input_total\",\"type\":\"uint128\"}],\"name\":\"SwapSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdraw_balance\",\"type\":\"uint256\"}],\"name\":\"WithdrawSuccess\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"base_time\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"check_availability\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"exchange_addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"started\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"expired\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"unlock_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapped\",\"type\":\"uint256\"},{\"internalType\":\"uint128[]\",\"name\":\"exchanged_tokens\",\"type\":\"uint128[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"ito_ids\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"destruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_exchange_addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint128[]\",\"name\":\"_ratios\",\"type\":\"uint128[]\"},{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_total_tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_qualification\",\"type\":\"address\"}],\"name\":\"fill_pool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_base_time\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_unlock_time\",\"type\":\"uint32\"}],\"name\":\"setUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"verification\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"exchange_addr_i\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"input_total\",\"type\":\"uint128\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapped\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"addr_i\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HappyTokenPool","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://ced5a3d56c3e84705f87c8360ed73f9cebbcd3399714191f9767f2e2f628c99c"}]}