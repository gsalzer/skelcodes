{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/decline.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@studydefi/money-legos/dydx/contracts/DydxFlashloanBase.sol\\\";\\nimport \\\"@studydefi/money-legos/dydx/contracts/ICallee.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface Cryptopunks {\\n    function punkIndexToAddress (uint256 punkIndex) external view returns (address);\\n    function punkBids (uint256 punkIndex) external view returns ( bool , uint256 , address , uint256 );\\n    function enterBidForPunk (uint256 punkIndex) external payable;\\n    function withdrawBidForPunk (uint256 punkIndex) external;\\n    function withdraw () external;\\n}\\n\\ninterface ENS{\\n    function setName(string calldata name) external returns (bytes32);\\n}\\n\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    function withdraw(uint wad) external; ///only for Weth\\n}\\n\\ncontract declinePunkBid is ICallee, DydxFlashloanBase {\\n    Cryptopunks constant punkContract=Cryptopunks(0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB);\\n    address constant wethAddress= 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address constant soloMargin=0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\\n    IWETH constant WETH =IWETH(wethAddress);\\n    ENS constant ensRegistar=ENS(0x084b1c3C81545d370f3634392De611CaaBFf8148);\\n    address public owner;\\n    bool public paused=false;\\n    struct MyCustomData {\\n        address token;\\n        uint256 repayAmount;\\n        uint256 punkIndex;\\n    }\\n\\n    constructor() public {\\n        // Give infinite approval to dydx to withdraw WETH on contract deployment,\\n        // so we don't have to approve the loan repayment amount (+2 wei) on each call.\\n        // The approval is used by the dydx contract to pay the loan back to itself.\\n        owner= msg.sender;\\n        WETH.approve(soloMargin, uint(-1));\\n    }\\n\\n    // This is the function that will be called postLoan\\n    // i.e. Encode the logic to handle your flashloaned funds here\\n    function callFunction(\\n        address sender,\\n        Account.Info memory account,\\n        bytes memory data\\n    ) public {\\n        MyCustomData memory mcd = abi.decode(data, (MyCustomData));\\n\\n        uint256 balOfLoanedToken = IERC20(mcd.token).balanceOf(address(this));\\n\\n        // Note that you can ignore the line below\\n        // if your dydx account (this contract in this case)\\n        // has deposited at least ~2 Wei of assets into the account\\n        // to balance out the collaterization ratio\\n        require(\\n            balOfLoanedToken >= mcd.repayAmount,\\n            \\\"Not enough funds to repay dydx loan!\\\"\\n        );\\n\\n        WETH.withdraw(WETH.balanceOf(address(this)));\\n        \\n\\n        punkContract.enterBidForPunk.value(mcd.repayAmount)(mcd.punkIndex);\\n        punkContract.withdrawBidForPunk(mcd.punkIndex);\\n        punkContract.withdraw();\\n        WETH.deposit.value( address(this).balance)();\\n\\n\\n    }\\n\\n    function declineBid(uint256 punkIndex)\\n        external \\n    {\\n        require (!paused,\\\"paused\\\");\\n        (,,,uint _amount) = punkContract.punkBids(punkIndex) ; \\n        require (_amount!=0,\\\"No bid on this punk!\\\");\\n        require (msg.sender==punkContract.punkIndexToAddress(punkIndex),\\\"Not your punk!\\\");\\n        _amount+=1;\\n\\n        // Get marketId from token address\\n        uint256 marketId = _getMarketIdFromTokenAddress(soloMargin, wethAddress);\\n\\n        // Calculate repay amount (_amount + (2 wei))\\n        // Approve transfer from\\n        uint256 repayAmount = _getRepaymentAmountInternal(_amount);\\n\\n        // 1. Withdraw $\\n        // 2. Call callFunction(...)\\n        // 3. Deposit back $\\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\\n\\n        operations[0] = _getWithdrawAction(marketId, _amount);\\n        operations[1] = _getCallAction(\\n            // Encode MyCustomData for callFunction\\n            abi.encode(MyCustomData({token: wethAddress, repayAmount: repayAmount, punkIndex: punkIndex}))\\n        );\\n        operations[2] = _getDepositAction(marketId, repayAmount);\\n\\n        Account.Info[] memory accountInfos = new Account.Info[](1);\\n        accountInfos[0] = _getAccountInfo();\\n        ISoloMargin solo = ISoloMargin(soloMargin);\\n        solo.operate(accountInfos, operations);\\n    }\\n    function() external payable {\\n            // React to receiving ether\\n        }\\n    function setReverseRecord(string calldata _name) external \\n    {\\n        require (msg.sender==owner);\\n        ensRegistar.setName(_name);\\n    }\\n    function togglePause() public  \\n    {\\n        require (msg.sender==owner);\\n        paused=!paused;  \\n    }\\n}\"\r\n    },\r\n    \"@studydefi/money-legos/dydx/contracts/DydxFlashloanBase.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.7;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./ISoloMargin.sol\\\";\\n\\n\\ncontract DydxFlashloanBase {\\n    using SafeMath for uint256;\\n\\n    // -- Internal Helper functions -- //\\n\\n    function _getMarketIdFromTokenAddress(address _solo, address token)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        ISoloMargin solo = ISoloMargin(_solo);\\n\\n        uint256 numMarkets = solo.getNumMarkets();\\n\\n        address curToken;\\n        for (uint256 i = 0; i < numMarkets; i++) {\\n            curToken = solo.getMarketTokenAddress(i);\\n\\n            if (curToken == token) {\\n                return i;\\n            }\\n        }\\n\\n        revert(\\\"No marketId found for provided token\\\");\\n    }\\n\\n    function _getRepaymentAmountInternal(uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Needs to be overcollateralize\\n        // Needs to provide +2 wei to be safe\\n        return amount.add(2);\\n    }\\n\\n    function _getAccountInfo() internal view returns (Account.Info memory) {\\n        return Account.Info({owner: address(this), number: 1});\\n    }\\n\\n    function _getWithdrawAction(uint marketId, uint256 amount)\\n        internal\\n        view\\n        returns (Actions.ActionArgs memory)\\n    {\\n        return\\n            Actions.ActionArgs({\\n                actionType: Actions.ActionType.Withdraw,\\n                accountId: 0,\\n                amount: Types.AssetAmount({\\n                    sign: false,\\n                    denomination: Types.AssetDenomination.Wei,\\n                    ref: Types.AssetReference.Delta,\\n                    value: amount\\n                }),\\n                primaryMarketId: marketId,\\n                secondaryMarketId: 0,\\n                otherAddress: address(this),\\n                otherAccountId: 0,\\n                data: \\\"\\\"\\n            });\\n    }\\n\\n    function _getCallAction(bytes memory data)\\n        internal\\n        view\\n        returns (Actions.ActionArgs memory)\\n    {\\n        return\\n            Actions.ActionArgs({\\n                actionType: Actions.ActionType.Call,\\n                accountId: 0,\\n                amount: Types.AssetAmount({\\n                    sign: false,\\n                    denomination: Types.AssetDenomination.Wei,\\n                    ref: Types.AssetReference.Delta,\\n                    value: 0\\n                }),\\n                primaryMarketId: 0,\\n                secondaryMarketId: 0,\\n                otherAddress: address(this),\\n                otherAccountId: 0,\\n                data: data\\n            });\\n    }\\n\\n    function _getDepositAction(uint marketId, uint256 amount)\\n        internal\\n        view\\n        returns (Actions.ActionArgs memory)\\n    {\\n        return\\n            Actions.ActionArgs({\\n                actionType: Actions.ActionType.Deposit,\\n                accountId: 0,\\n                amount: Types.AssetAmount({\\n                    sign: true,\\n                    denomination: Types.AssetDenomination.Wei,\\n                    ref: Types.AssetReference.Delta,\\n                    value: amount\\n                }),\\n                primaryMarketId: marketId,\\n                secondaryMarketId: 0,\\n                otherAddress: address(this),\\n                otherAccountId: 0,\\n                data: \\\"\\\"\\n            });\\n    }\\n    //function receive() payable external {}\\n\\n\\n}\\n\\n\"\r\n    },\r\n    \"@studydefi/money-legos/dydx/contracts/ICallee.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.7;\\npragma experimental ABIEncoderV2;\\n\\nimport { Account } from \\\"./ISoloMargin.sol\\\";\\n\\n\\n/**\\n * @title ICallee\\n * @author dYdX\\n *\\n * Interface that Callees for Solo must implement in order to ingest data.\\n */\\ncontract ICallee {\\n\\n    // ============ Public Functions ============\\n\\n    /**\\n     * Allows users to send this contract arbitrary data.\\n     *\\n     * @param  sender       The msg.sender to Solo\\n     * @param  accountInfo  The account from which the data is being sent\\n     * @param  data         Arbitrary data given by the sender\\n     */\\n    function callFunction(\\n        address sender,\\n        Account.Info memory accountInfo,\\n        bytes memory data\\n    )\\n        public;\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@studydefi/money-legos/dydx/contracts/ISoloMargin.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.7;\\npragma experimental ABIEncoderV2;\\n\\n\\nlibrary Account {\\n    enum Status {Normal, Liquid, Vapor}\\n    struct Info {\\n        address owner; // The address that owns the account\\n        uint256 number; // A nonce that allows a single address to control many accounts\\n    }\\n    struct Storage {\\n        mapping(uint256 => Types.Par) balances; // Mapping from marketId to principal\\n        Status status;\\n    }\\n}\\n\\n\\nlibrary Actions {\\n    enum ActionType {\\n        Deposit, // supply tokens\\n        Withdraw, // borrow tokens\\n        Transfer, // transfer balance between accounts\\n        Buy, // buy an amount of some token (publicly)\\n        Sell, // sell an amount of some token (publicly)\\n        Trade, // trade tokens against another account\\n        Liquidate, // liquidate an undercollateralized or expiring account\\n        Vaporize, // use excess tokens to zero-out a completely negative account\\n        Call // send arbitrary data to an address\\n    }\\n\\n    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\\n\\n    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\\n\\n    struct ActionArgs {\\n        ActionType actionType;\\n        uint256 accountId;\\n        Types.AssetAmount amount;\\n        uint256 primaryMarketId;\\n        uint256 secondaryMarketId;\\n        address otherAddress;\\n        uint256 otherAccountId;\\n        bytes data;\\n    }\\n\\n    struct DepositArgs {\\n        Types.AssetAmount amount;\\n        Account.Info account;\\n        uint256 market;\\n        address from;\\n    }\\n\\n    struct WithdrawArgs {\\n        Types.AssetAmount amount;\\n        Account.Info account;\\n        uint256 market;\\n        address to;\\n    }\\n\\n    struct TransferArgs {\\n        Types.AssetAmount amount;\\n        Account.Info accountOne;\\n        Account.Info accountTwo;\\n        uint256 market;\\n    }\\n\\n    struct BuyArgs {\\n        Types.AssetAmount amount;\\n        Account.Info account;\\n        uint256 makerMarket;\\n        uint256 takerMarket;\\n        address exchangeWrapper;\\n        bytes orderData;\\n    }\\n\\n    struct SellArgs {\\n        Types.AssetAmount amount;\\n        Account.Info account;\\n        uint256 takerMarket;\\n        uint256 makerMarket;\\n        address exchangeWrapper;\\n        bytes orderData;\\n    }\\n\\n    struct TradeArgs {\\n        Types.AssetAmount amount;\\n        Account.Info takerAccount;\\n        Account.Info makerAccount;\\n        uint256 inputMarket;\\n        uint256 outputMarket;\\n        address autoTrader;\\n        bytes tradeData;\\n    }\\n\\n    struct LiquidateArgs {\\n        Types.AssetAmount amount;\\n        Account.Info solidAccount;\\n        Account.Info liquidAccount;\\n        uint256 owedMarket;\\n        uint256 heldMarket;\\n    }\\n\\n    struct VaporizeArgs {\\n        Types.AssetAmount amount;\\n        Account.Info solidAccount;\\n        Account.Info vaporAccount;\\n        uint256 owedMarket;\\n        uint256 heldMarket;\\n    }\\n\\n    struct CallArgs {\\n        Account.Info account;\\n        address callee;\\n        bytes data;\\n    }\\n}\\n\\n\\nlibrary Decimal {\\n    struct D256 {\\n        uint256 value;\\n    }\\n}\\n\\n\\nlibrary Interest {\\n    struct Rate {\\n        uint256 value;\\n    }\\n\\n    struct Index {\\n        uint96 borrow;\\n        uint96 supply;\\n        uint32 lastUpdate;\\n    }\\n}\\n\\n\\nlibrary Monetary {\\n    struct Price {\\n        uint256 value;\\n    }\\n    struct Value {\\n        uint256 value;\\n    }\\n}\\n\\n\\nlibrary Storage {\\n    // All information necessary for tracking a market\\n    struct Market {\\n        // Contract address of the associated ERC20 token\\n        address token;\\n        // Total aggregated supply and borrow amount of the entire market\\n        Types.TotalPar totalPar;\\n        // Interest index of the market\\n        Interest.Index index;\\n        // Contract address of the price oracle for this market\\n        address priceOracle;\\n        // Contract address of the interest setter for this market\\n        address interestSetter;\\n        // Multiplier on the marginRatio for this market\\n        Decimal.D256 marginPremium;\\n        // Multiplier on the liquidationSpread for this market\\n        Decimal.D256 spreadPremium;\\n        // Whether additional borrows are allowed for this market\\n        bool isClosing;\\n    }\\n\\n    // The global risk parameters that govern the health and security of the system\\n    struct RiskParams {\\n        // Required ratio of over-collateralization\\n        Decimal.D256 marginRatio;\\n        // Percentage penalty incurred by liquidated accounts\\n        Decimal.D256 liquidationSpread;\\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\\n        Decimal.D256 earningsRate;\\n        // The minimum absolute borrow value of an account\\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\\n        Monetary.Value minBorrowedValue;\\n    }\\n\\n    // The maximum RiskParam values that can be set\\n    struct RiskLimits {\\n        uint64 marginRatioMax;\\n        uint64 liquidationSpreadMax;\\n        uint64 earningsRateMax;\\n        uint64 marginPremiumMax;\\n        uint64 spreadPremiumMax;\\n        uint128 minBorrowedValueMax;\\n    }\\n\\n    // The entire storage state of Solo\\n    struct State {\\n        // number of markets\\n        uint256 numMarkets;\\n        // marketId => Market\\n        mapping(uint256 => Market) markets;\\n        // owner => account number => Account\\n        mapping(address => mapping(uint256 => Account.Storage)) accounts;\\n        // Addresses that can control other users accounts\\n        mapping(address => mapping(address => bool)) operators;\\n        // Addresses that can control all users accounts\\n        mapping(address => bool) globalOperators;\\n        // mutable risk parameters of the system\\n        RiskParams riskParams;\\n        // immutable risk limits of the system\\n        RiskLimits riskLimits;\\n    }\\n}\\n\\n\\nlibrary Types {\\n    enum AssetDenomination {\\n        Wei, // the amount is denominated in wei\\n        Par // the amount is denominated in par\\n    }\\n\\n    enum AssetReference {\\n        Delta, // the amount is given as a delta from the current value\\n        Target // the amount is given as an exact number to end up at\\n    }\\n\\n    struct AssetAmount {\\n        bool sign; // true if positive\\n        AssetDenomination denomination;\\n        AssetReference ref;\\n        uint256 value;\\n    }\\n\\n    struct TotalPar {\\n        uint128 borrow;\\n        uint128 supply;\\n    }\\n\\n    struct Par {\\n        bool sign; // true if positive\\n        uint128 value;\\n    }\\n\\n    struct Wei {\\n        bool sign; // true if positive\\n        uint256 value;\\n    }\\n}\\n\\n\\ncontract ISoloMargin {\\n    struct OperatorArg {\\n        address operator;\\n        bool trusted;\\n    }\\n\\n    function ownerSetSpreadPremium(\\n        uint256 marketId,\\n        Decimal.D256 memory spreadPremium\\n    ) public;\\n\\n    function getIsGlobalOperator(address operator) public view returns (bool);\\n\\n    function getMarketTokenAddress(uint256 marketId)\\n        public\\n        view\\n        returns (address);\\n\\n    function ownerSetInterestSetter(uint256 marketId, address interestSetter)\\n        public;\\n\\n    function getAccountValues(Account.Info memory account)\\n        public\\n        view\\n        returns (Monetary.Value memory, Monetary.Value memory);\\n\\n    function getMarketPriceOracle(uint256 marketId)\\n        public\\n        view\\n        returns (address);\\n\\n    function getMarketInterestSetter(uint256 marketId)\\n        public\\n        view\\n        returns (address);\\n\\n    function getMarketSpreadPremium(uint256 marketId)\\n        public\\n        view\\n        returns (Decimal.D256 memory);\\n\\n    function getNumMarkets() public view returns (uint256);\\n\\n    function ownerWithdrawUnsupportedTokens(address token, address recipient)\\n        public\\n        returns (uint256);\\n\\n    function ownerSetMinBorrowedValue(Monetary.Value memory minBorrowedValue)\\n        public;\\n\\n    function ownerSetLiquidationSpread(Decimal.D256 memory spread) public;\\n\\n    function ownerSetEarningsRate(Decimal.D256 memory earningsRate) public;\\n\\n    function getIsLocalOperator(address owner, address operator)\\n        public\\n        view\\n        returns (bool);\\n\\n    function getAccountPar(Account.Info memory account, uint256 marketId)\\n        public\\n        view\\n        returns (Types.Par memory);\\n\\n    function ownerSetMarginPremium(\\n        uint256 marketId,\\n        Decimal.D256 memory marginPremium\\n    ) public;\\n\\n    function getMarginRatio() public view returns (Decimal.D256 memory);\\n\\n    function getMarketCurrentIndex(uint256 marketId)\\n        public\\n        view\\n        returns (Interest.Index memory);\\n\\n    function getMarketIsClosing(uint256 marketId) public view returns (bool);\\n\\n    function getRiskParams() public view returns (Storage.RiskParams memory);\\n\\n    function getAccountBalances(Account.Info memory account)\\n        public\\n        view\\n        returns (address[] memory, Types.Par[] memory, Types.Wei[] memory);\\n\\n    function renounceOwnership() public;\\n\\n    function getMinBorrowedValue() public view returns (Monetary.Value memory);\\n\\n    function setOperators(OperatorArg[] memory args) public;\\n\\n    function getMarketPrice(uint256 marketId) public view returns (address);\\n\\n    function owner() public view returns (address);\\n\\n    function isOwner() public view returns (bool);\\n\\n    function ownerWithdrawExcessTokens(uint256 marketId, address recipient)\\n        public\\n        returns (uint256);\\n\\n    function ownerAddMarket(\\n        address token,\\n        address priceOracle,\\n        address interestSetter,\\n        Decimal.D256 memory marginPremium,\\n        Decimal.D256 memory spreadPremium\\n    ) public;\\n\\n    function operate(\\n        Account.Info[] memory accounts,\\n        Actions.ActionArgs[] memory actions\\n    ) public;\\n\\n    function getMarketWithInfo(uint256 marketId)\\n        public\\n        view\\n        returns (\\n            Storage.Market memory,\\n            Interest.Index memory,\\n            Monetary.Price memory,\\n            Interest.Rate memory\\n        );\\n\\n    function ownerSetMarginRatio(Decimal.D256 memory ratio) public;\\n\\n    function getLiquidationSpread() public view returns (Decimal.D256 memory);\\n\\n    function getAccountWei(Account.Info memory account, uint256 marketId)\\n        public\\n        view\\n        returns (Types.Wei memory);\\n\\n    function getMarketTotalPar(uint256 marketId)\\n        public\\n        view\\n        returns (Types.TotalPar memory);\\n\\n    function getLiquidationSpreadForPair(\\n        uint256 heldMarketId,\\n        uint256 owedMarketId\\n    ) public view returns (Decimal.D256 memory);\\n\\n    function getNumExcessTokens(uint256 marketId)\\n        public\\n        view\\n        returns (Types.Wei memory);\\n\\n    function getMarketCachedIndex(uint256 marketId)\\n        public\\n        view\\n        returns (Interest.Index memory);\\n\\n    function getAccountStatus(Account.Info memory account)\\n        public\\n        view\\n        returns (uint8);\\n\\n    function getEarningsRate() public view returns (Decimal.D256 memory);\\n\\n    function ownerSetPriceOracle(uint256 marketId, address priceOracle) public;\\n\\n    function getRiskLimits() public view returns (Storage.RiskLimits memory);\\n\\n    function getMarket(uint256 marketId)\\n        public\\n        view\\n        returns (Storage.Market memory);\\n\\n    function ownerSetIsClosing(uint256 marketId, bool isClosing) public;\\n\\n    function ownerSetGlobalOperator(address operator, bool approved) public;\\n\\n    function transferOwnership(address newOwner) public;\\n\\n    function getAdjustedAccountValues(Account.Info memory account)\\n        public\\n        view\\n        returns (Monetary.Value memory, Monetary.Value memory);\\n\\n    function getMarketMarginPremium(uint256 marketId)\\n        public\\n        view\\n        returns (Decimal.D256 memory);\\n\\n    function getMarketInterestRate(uint256 marketId)\\n        public\\n        view\\n        returns (Interest.Rate memory);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"setReverseRecord\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"account\",\"type\":\"tuple\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callFunction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"punkIndex\",\"type\":\"uint256\"}],\"name\":\"declineBid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"declinePunkBid","CompilerVersion":"v0.5.7+commit.6da8b019","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}