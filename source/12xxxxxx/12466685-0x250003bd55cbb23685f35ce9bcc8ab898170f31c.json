{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.4;\r\n\r\ncontract Halt {\r\n    mapping (address => uint256) internal _rOwned;\r\n    mapping (address => uint256) internal _tOwned;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    mapping(address => bool) public isTaxedAsSender;\r\n\tmapping(address => bool) public isTaxedAsRecipient;\r\n    mapping (address => bool) public isExcluded;\r\n    address[] internal _excluded;\r\n\r\n    string public constant name = \"Halt\";\r\n    string public constant symbol = \"HALT\";\r\n    uint8 public constant decimals = 9;\r\n\r\n    uint256 public constant totalSupply = 1_000_000_000 * (10 ** decimals);\r\n    uint256 internal _rTotal = (type(uint256).max - (type(uint256).max % totalSupply));\r\n    uint256 internal _tFeeTotal;\r\n    uint256 constant internal _reflectBasisPoints = 7000;  // 0.01% = 1 basis point, 4.00% = 400 basis points\r\n    uint256 internal reflectDisabledBlock;\r\n\r\n    address public owner;\r\n    address public pendingOwner;\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed account, address indexed spender, uint256 value);\r\n    \r\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        owner = msg.sender;\r\n        _rOwned[msg.sender] = _rTotal;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n    \r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return isExcluded[account] ? _tOwned[account] : tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, allowance[sender][msg.sender] - amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, allowance[msg.sender][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        _approve(msg.sender, spender, allowance[msg.sender][spender] - subtractedValue);\r\n        return true;\r\n    }\r\n\r\n    function totalFees() external view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n    \r\n    function reflect(uint256 tAmount) external {\r\n        require(!isExcluded[msg.sender], \"IS_EXCLUDED\");\r\n        \r\n        (uint256 rAmount,,,,) = _getValues(address(0), address(0), tAmount);\r\n        \r\n        _rOwned[msg.sender] -= rAmount;\r\n        _rTotal -= rAmount;\r\n        _tFeeTotal += tAmount;\r\n    }\r\n\r\n    function reflectionFromToken(address sender, address recipient, uint256 tAmount, bool deductTransferFee) external view returns (uint256) {\r\n        require(tAmount <= totalSupply, \"AMOUNT_>_SUPPLY\");\r\n        \r\n        (uint256 rAmount,uint256 rTransferAmount,,,) = _getValues(sender, recipient, tAmount);\r\n        \r\n        return deductTransferFee ? rTransferAmount : rAmount;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\r\n        require(rAmount <= _rTotal, \"AMOUNT_>_TOTAL_REFLECTIONS\");\r\n        return rAmount / _getRate();\r\n    }\r\n\r\n    function setSenderTaxed(address account, bool taxed) external isOwner {\r\n        // by default, all senders are not taxed\r\n        isTaxedAsSender[account] = taxed;\r\n\t}\r\n\t\r\n\tfunction setRecipientTaxed(address account, bool taxed) external isOwner {\r\n\t    // by default, all recipients are not taxed\r\n        isTaxedAsRecipient[account] = taxed;\r\n\t}\r\n\r\n    function excludeAccountFromRewards(address account) external isOwner {\r\n        require(!isExcluded[account], \"IS_EXCLUDED\");\r\n        \r\n        if(_rOwned[account] > 0) {\r\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\r\n        }\r\n        \r\n        isExcluded[account] = true;\r\n        _excluded.push(account);\r\n    }\r\n\r\n    function includeAccountFromRewards(address account) external isOwner {\r\n        require(isExcluded[account], \"IS_INCLUDED\");\r\n        \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_excluded[i] == account) {\r\n                _excluded[i] = _excluded[_excluded.length - 1];\r\n                _tOwned[account] = 0;\r\n                isExcluded[account] = false;\r\n                _excluded.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _approve(address account, address spender, uint256 amount) internal {\r\n        allowance[account][spender] = amount;\r\n        emit Approval(account, spender, amount);\r\n    }\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(amount > 0, \"INVALID_AMOUNT\");\r\n        \r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(sender, recipient, amount);\r\n        \r\n        _rOwned[sender] -= rAmount;\r\n        _rOwned[recipient] += rTransferAmount;\r\n        \r\n        if (isExcluded[sender] && !isExcluded[recipient]) {\r\n            _tOwned[sender] -= amount;\r\n        } else if (!isExcluded[sender] && isExcluded[recipient]) {\r\n            _tOwned[recipient] += tTransferAmount;\r\n        } else if (isExcluded[sender] && isExcluded[recipient]) {\r\n            _tOwned[sender] -= amount;\r\n            _tOwned[recipient] += tTransferAmount;\r\n        }\r\n        \r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) internal {\r\n        _rTotal -= rFee;\r\n        _tFeeTotal += tFee;\r\n    }\r\n\r\n    function _getValues(address sender, address recipient, uint256 tAmount) internal view returns (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) {\r\n        (tTransferAmount, tFee) = _getTValues(sender, recipient, tAmount);\r\n        (rAmount, rTransferAmount, rFee) = _getRValues(tAmount, tFee, _getRate());\r\n    }\r\n\r\n    function _getTValues(address sender, address recipient, uint256 tAmount) internal view returns (uint256 tTransferAmount, uint256 tFee) {\r\n        tFee = (block.number != reflectDisabledBlock) && (isTaxedAsSender[sender] || isTaxedAsRecipient[recipient])\r\n            ? (tAmount * _reflectBasisPoints) / 10_000\r\n            : 0;\r\n        \r\n        tTransferAmount = tAmount - tFee;\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) internal pure returns (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) {\r\n        rAmount = tAmount * currentRate;\r\n        rFee = tFee * currentRate;\r\n        rTransferAmount = rAmount - rFee;\r\n    }\r\n\r\n    function _getRate() internal view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply / tSupply;\r\n    }\r\n\r\n    function _getCurrentSupply() internal view returns (uint256 rSupply, uint256 tSupply) {\r\n        rSupply = _rTotal;\r\n        tSupply = totalSupply; \r\n        \r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, totalSupply);\r\n            \r\n            rSupply -= _rOwned[_excluded[i]];\r\n            tSupply -= _tOwned[_excluded[i]];\r\n        }\r\n        \r\n        if (rSupply < (_rTotal / totalSupply)) {\r\n            (rSupply, tSupply) = (_rTotal, totalSupply);\r\n        }\r\n    }\r\n    \r\n    function changeOwner(address newOwner) external isOwner {\r\n        pendingOwner = newOwner;\r\n\t}\r\n\t\r\n\tfunction acceptOwnership() external {\r\n        require(msg.sender == pendingOwner, \"NOT_PENDING_OWNER\");\r\n        \r\n        emit OwnershipTransferred(owner, msg.sender);\r\n        \r\n        owner = msg.sender;\r\n        pendingOwner = address(0);\r\n\t}\r\n\t\r\n\tfunction disableReflectionForCurrentBlock() external isOwner {\r\n\t    reflectDisabledBlock = block.number;\r\n\t}\r\n\t\r\n\tfunction resetReflectDisabledBlock() external isOwner {\r\n\t    reflectDisabledBlock = 0;\r\n\t}\r\n}\r\n\r\ninterface UniswapRouterV202 {\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    \r\n    function factory() external pure returns (address);\r\n}\r\n\r\ninterface UniswapPairV2 {\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function transfer(address to, uint value) external returns (bool);\r\n}\r\n\r\ncontract HaltOwnerV1 {\r\n    Halt immutable public token;\r\n    address public owner;\r\n    address public pendingOwner;\r\n    \r\n    UniswapRouterV202 public router;\r\n    UniswapPairV2 public pair;\r\n    \r\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    constructor (address tokenAddress, address routerAddress, address pairAddress) {\r\n        owner = msg.sender;\r\n        token = Halt(tokenAddress);\r\n        router = UniswapRouterV202(routerAddress);\r\n        pair = UniswapPairV2(pairAddress);\r\n    }\r\n    \r\n    modifier isOwner() {\r\n        require(msg.sender == owner, \"NOT_OWNER\");\r\n        _;\r\n    }\r\n    \r\n    function changeOwner(address newOwner) external isOwner {\r\n        pendingOwner = newOwner;\r\n\t}\r\n\t\r\n\tfunction acceptOwner() external {\r\n        require(msg.sender == pendingOwner, \"NOT_PENDING_OWNER\");\r\n        \r\n        emit OwnershipTransferred(owner, msg.sender);\r\n        \r\n        owner = msg.sender;\r\n        pendingOwner = address(0);\r\n\t}\r\n\t\r\n\tfunction changeOwnerOfToken(address newOwner) external isOwner {\r\n        token.changeOwner(newOwner);\r\n\t}\r\n\t\r\n\tfunction acceptOwnershipOfToken() external isOwner {\r\n\t    token.acceptOwnership();\r\n\t}\r\n    \r\n    function setSenderTaxed(address account, bool taxed) external isOwner {\r\n        token.setSenderTaxed(account, taxed);\r\n\t}\r\n\t\r\n\tfunction setRecipientTaxed(address account, bool taxed) external isOwner {\r\n\t    token.setRecipientTaxed(account, taxed);\r\n\t}\r\n\r\n    function setAccountGetsRewards(address account, bool getsRewards) external isOwner {\r\n        getsRewards ? token.includeAccountFromRewards(account) : token.excludeAccountFromRewards(account);\r\n    }\r\n    \r\n    function addLiquidityETH(\r\n        address tokenAddress,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity) {\r\n        require(tokenAddress == address(token), \"NOT_TOKEN\");\r\n        \r\n        // Turn off tax for this block\r\n        token.disableReflectionForCurrentBlock();\r\n        \r\n        // Transfer token from caller to this\r\n        token.transferFrom(msg.sender, address(this), amountTokenDesired);\r\n        \r\n        // Approve Router on the amount of token\r\n        token.approve(address(router), amountTokenDesired);\r\n        \r\n        // Perform the liquidity add\r\n        (amountToken, amountETH, liquidity) = router.addLiquidityETH{value: msg.value}(tokenAddress, amountTokenDesired, amountTokenMin, amountETHMin, to, deadline);\r\n        \r\n        uint256 leftOver = token.balanceOf(address(this));\r\n\r\n        if (leftOver > 0) {\r\n            // Transfer leftover ETH or tokens to the caller\r\n            token.transfer(msg.sender, leftOver);\r\n        }\r\n\r\n        leftOver = address(this).balance;\r\n\r\n        if (leftOver > 0) {\r\n            payable(msg.sender).transfer(leftOver);\r\n        }\r\n        \r\n        // Turn on tax for this block\r\n        token.resetReflectDisabledBlock();\r\n    }\r\n    \r\n    function setRouterAndPair(address routerAddress, address pairAddress) external isOwner {\r\n        router = UniswapRouterV202(routerAddress);\r\n        pair = UniswapPairV2(pairAddress);\r\n    }\r\n    \r\n    receive() external payable {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnershipOfToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnerOfToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract UniswapPairV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract UniswapRouterV202\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"getsRewards\",\"type\":\"bool\"}],\"name\":\"setAccountGetsRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"taxed\",\"type\":\"bool\"}],\"name\":\"setRecipientTaxed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"}],\"name\":\"setRouterAndPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"taxed\",\"type\":\"bool\"}],\"name\":\"setSenderTaxed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract Halt\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"HaltOwnerV1","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"000000000000000000000000b156943814b50f9f8ac682a5fb0a793279be637b0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000b8d7c6c7062247b2fdfcfe76d14a06818dabd402","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://66a0a7051bade8acbeade3da1753c87fc8293a591d00c6ab4e4254a9c4ee8625"}]}