{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/Elena/Source/argent-contracts/contracts/infrastructure/base/Managed.sol\": {\r\n      \"content\": \"// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.3;\\n\\nimport \\\"./Owned.sol\\\";\\n\\n/**\\n * @title Managed\\n * @notice Basic contract that defines a set of managers. Only the owner can add/remove managers.\\n * @author Julien Niset, Olivier VDB - <julien@argent.xyz>, <olivier@argent.xyz>\\n */\\ncontract Managed is Owned {\\n\\n    // The managers\\n    mapping (address => bool) public managers;\\n\\n    /**\\n     * @notice Throws if the sender is not a manager.\\n     */\\n    modifier onlyManager {\\n        require(managers[msg.sender] == true, \\\"M: Must be manager\\\");\\n        _;\\n    }\\n\\n    event ManagerAdded(address indexed _manager);\\n    event ManagerRevoked(address indexed _manager);\\n\\n    /**\\n    * @notice Adds a manager.\\n    * @param _manager The address of the manager.\\n    */\\n    function addManager(address _manager) external onlyOwner {\\n        require(_manager != address(0), \\\"M: Address must not be null\\\");\\n        if (managers[_manager] == false) {\\n            managers[_manager] = true;\\n            emit ManagerAdded(_manager);\\n        }\\n    }\\n\\n    /**\\n    * @notice Revokes a manager.\\n    * @param _manager The address of the manager.\\n    */\\n    function revokeManager(address _manager) external virtual onlyOwner {\\n        // solhint-disable-next-line reason-string\\n        require(managers[_manager] == true, \\\"M: Target must be an existing manager\\\");\\n        delete managers[_manager];\\n        emit ManagerRevoked(_manager);\\n    }\\n}\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/contracts/infrastructure/base/Owned.sol\": {\r\n      \"content\": \"// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.5.4 <0.9.0;\\n\\n/**\\n * @title Owned\\n * @notice Basic contract to define an owner.\\n * @author Julien Niset - <julien@argent.xyz>\\n */\\ncontract Owned {\\n\\n    // The owner\\n    address public owner;\\n\\n    event OwnerChanged(address indexed _newOwner);\\n\\n    /**\\n     * @notice Throws if the sender is not the owner.\\n     */\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Must be owner\\\");\\n        _;\\n    }\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Lets the owner transfer ownership of the contract to a new owner.\\n     * @param _newOwner The new owner.\\n     */\\n    function changeOwner(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"Address must not be null\\\");\\n        owner = _newOwner;\\n        emit OwnerChanged(_newOwner);\\n    }\\n}\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/contracts/infrastructure/ens/ArgentENSManager.sol\": {\r\n      \"content\": \"// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.3;\\nimport \\\"../../../lib_0.5/ens/ENS.sol\\\";\\nimport \\\"../../modules/common/Utils.sol\\\";\\nimport \\\"./IENSManager.sol\\\";\\nimport \\\"./IENSResolver.sol\\\";\\nimport \\\"./IReverseRegistrar.sol\\\";\\nimport \\\"../base/Managed.sol\\\";\\n\\n/**\\n * @title ArgentENSManager\\n * @notice Implementation of an ENS manager that orchestrates the complete registration of subdomains for a single root (e.g. argent.eth).\\n * The contract defines a manager role who is the only role that can trigger the registration of a new subdomain.\\n * @author Julien Niset - <julien@argent.im>\\n */\\ncontract ArgentENSManager is IENSManager, Owned, Managed {\\n\\n    // The managed root name\\n    string public rootName;\\n    // The managed root node\\n    bytes32 immutable public rootNode;\\n    // The ENS registry\\n    ENS immutable public ensRegistry;\\n    // The ENS resolver to use\\n    IENSResolver public ensResolver;\\n\\n    // namehash('addr.reverse')\\n    bytes32 constant public ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n\\n   modifier validateENSLabel(string memory _label) {\\n      require(bytes(_label).length != 0, \\\"AEM: ENS label must be defined\\\");\\n      _;\\n    }\\n\\n    // *************** Constructor ********************** //\\n\\n    /**\\n     * @notice Constructor that sets the ENS root name and root node to manage.\\n     * @param _rootName The root name (e.g. argentx.eth).\\n     * @param _rootNode The node of the root name (e.g. namehash(argentx.eth)).\\n     * @param _ensRegistry The address of the ENS registry\\n     * @param _ensResolver The address of the ENS resolver\\n     */\\n    constructor(string memory _rootName, bytes32 _rootNode, address _ensRegistry, address _ensResolver) {\\n        rootName = _rootName;\\n        rootNode = _rootNode;\\n        ensRegistry = ENS(_ensRegistry);\\n        ensResolver = IENSResolver(_ensResolver);\\n    }\\n\\n    // *************** External Functions ********************* //\\n\\n    /**\\n     * @inheritdoc IENSManager\\n     */\\n    function changeRootnodeOwner(address _newOwner) external override onlyOwner {\\n        ensRegistry.setOwner(rootNode, _newOwner);\\n        emit RootnodeOwnerChange(rootNode, _newOwner);\\n    }\\n\\n    /**\\n     * @notice Lets the owner change the address of the ENS resolver contract.\\n     * @param _ensResolver The address of the ENS resolver contract.\\n     */\\n    function changeENSResolver(address _ensResolver) external onlyOwner {\\n        require(_ensResolver != address(0), \\\"AEM: cannot set empty resolver\\\");\\n        ensResolver = IENSResolver(_ensResolver);\\n        emit ENSResolverChanged(_ensResolver);\\n    }\\n\\n    /**\\n     * @inheritdoc IENSManager\\n     */\\n    function register(string calldata _label, address _owner, bytes calldata _managerSignature) external override validateENSLabel(_label) {\\n        bytes32 signedHash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(abi.encodePacked(_owner, _label))));\\n        validateManagerSignature(signedHash, _managerSignature);\\n\\n        _register(_label, _owner);\\n    }\\n\\n    /**\\n     * @inheritdoc IENSManager\\n     */\\n    function register(string calldata _label, address _owner) external override onlyManager validateENSLabel(_label) {\\n        _register(_label, _owner);\\n    }\\n\\n    function _register(string calldata _label, address _owner) internal {\\n        bytes32 labelNode = keccak256(abi.encodePacked(_label));\\n        bytes32 node = keccak256(abi.encodePacked(rootNode, labelNode));\\n        address currentOwner = ensRegistry.owner(node);\\n        require(currentOwner == address(0), \\\"AEM: label is already owned\\\");\\n\\n        // Forward ENS\\n        ensRegistry.setSubnodeRecord(rootNode, labelNode, _owner, address(ensResolver), 0);\\n        ensResolver.setAddr(node, _owner);\\n\\n        string memory name = string(abi.encodePacked(_label, \\\".\\\", rootName));\\n\\n        // Optionally set the reverse ENS\\n        bytes32 reverseNode = IReverseRegistrar(_getENSReverseRegistrar()).node(_owner);\\n\\n        if(ensRegistry.resolver(reverseNode) == address(ensResolver)) {\\n            ensResolver.setName(reverseNode, name);\\n        }\\n\\n        emit Registered(_owner, name);\\n    }\\n\\n    /**\\n     * @notice Throws if the sender is not a manager and the manager's signature for the creation of the new wallet is invalid.\\n     * @param _signedHash The signed hash\\n     * @param _managerSignature The manager's signature\\n     */\\n    function validateManagerSignature(bytes32 _signedHash, bytes memory _managerSignature) internal view {\\n        address user;\\n        if(_managerSignature.length != 65) {\\n            user = msg.sender;\\n        } else {\\n            user = Utils.recoverSigner(_signedHash, _managerSignature, 0);\\n        }\\n        require(managers[user], \\\"AEM: user is not manager\\\");\\n    }\\n\\n    /**\\n     * @inheritdoc IENSManager\\n     */\\n    function getENSReverseRegistrar() external view override returns (address) {\\n        return _getENSReverseRegistrar();\\n    }\\n\\n    // *************** Public Functions ********************* //\\n\\n    /**\\n     * @inheritdoc IENSManager\\n     */\\n    function isAvailable(bytes32 _subnode) public view override returns (bool) {\\n        bytes32 node = keccak256(abi.encodePacked(rootNode, _subnode));\\n        address currentOwner = ensRegistry.owner(node);\\n        if (currentOwner == address(0)) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _getENSReverseRegistrar() internal view returns (address) {\\n        return ensRegistry.owner(ADDR_REVERSE_NODE);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/contracts/infrastructure/ens/IENSManager.sol\": {\r\n      \"content\": \"// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.3;\\n\\n/**\\n * @notice Interface for an ENS Mananger.\\n */\\ninterface IENSManager {\\n    event RootnodeOwnerChange(bytes32 indexed _rootnode, address indexed _newOwner);\\n    event ENSResolverChanged(address addr);\\n    event Registered(address indexed _owner, string _ens);\\n    event Unregistered(string _ens);\\n\\n    /**\\n     * @notice This function must be called when the ENS Manager contract is replaced\\n     * and the address of the new Manager should be provided.\\n     * @param _newOwner The address of the new ENS manager that will manage the root node.\\n     */\\n    function changeRootnodeOwner(address _newOwner) external;\\n\\n    /**\\n    * @notice Lets the manager assign an ENS subdomain of the root node to a target address.\\n    * Registers forward ENS and optionally reverse ENS.\\n    * @param _label The subdomain label.\\n    * @param _owner The owner of the subdomain.\\n    * @param _managerSignature The manager signature of the hash of _owner and _label.\\n    */\\n    function register(string calldata _label, address _owner, bytes calldata _managerSignature) external;\\n\\n    /**\\n    * @notice Backward compatible overload for WalletFactory 1.6\\n    * Lets the manager assign an ENS subdomain of the root node to a target address.\\n    * Registers forward ENS and optionally reverse ENS.\\n    * @param _label The subdomain label.\\n    * @param _owner The owner of the subdomain.\\n    */\\n    function register(string calldata _label, address _owner) external;\\n\\n    /**\\n     * @notice Returns true is a given subnode is available.\\n     * @param _subnode The target subnode.\\n     * @return true if the subnode is available.\\n     */\\n    function isAvailable(bytes32 _subnode) external view returns(bool);\\n\\n    /**\\n    * @notice Gets the official ENS reverse registrar.\\n    * @return Address of the ENS reverse registrar.\\n    */\\n    function getENSReverseRegistrar() external view returns (address);\\n}\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/contracts/infrastructure/ens/IENSResolver.sol\": {\r\n      \"content\": \"// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.3;\\n\\n/**\\n * @notice ENS Resolver interface.\\n */\\ninterface IENSResolver {\\n    event AddrChanged(bytes32 indexed _node, address _addr);\\n    event NameChanged(bytes32 indexed _node, string _name);\\n\\n    function addr(bytes32 _node) external view returns (address);\\n    function setAddr(bytes32 _node, address _addr) external;\\n    function name(bytes32 _node) external view returns (string memory);\\n    function setName(bytes32 _node, string memory _name) external;\\n}\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/contracts/infrastructure/ens/IReverseRegistrar.sol\": {\r\n      \"content\": \"// Copyright (C) 2018  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.3;\\n\\n/**\\n * @notice ENS Reverse Registrar interface.\\n */\\ninterface IReverseRegistrar {\\n    function claim(address _owner) external returns (bytes32);\\n    function claimWithResolver(address _owner, address _resolver) external returns (bytes32);\\n    function setName(string memory _name) external returns (bytes32);\\n    function node(address _addr) external pure returns (bytes32);\\n}\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/contracts/modules/common/Utils.sol\": {\r\n      \"content\": \"// Copyright (C) 2020  Argent Labs Ltd. <https://argent.xyz>\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.3;\\n\\n/**\\n * @title Utils\\n * @notice Common utility methods used by modules.\\n */\\nlibrary Utils {\\n\\n    // ERC20, ERC721 & ERC1155 transfers & approvals\\n    bytes4 private constant ERC20_TRANSFER = bytes4(keccak256(\\\"transfer(address,uint256)\\\"));\\n    bytes4 private constant ERC20_APPROVE = bytes4(keccak256(\\\"approve(address,uint256)\\\"));\\n    bytes4 private constant ERC721_SET_APPROVAL_FOR_ALL = bytes4(keccak256(\\\"setApprovalForAll(address,bool)\\\"));\\n    bytes4 private constant ERC721_TRANSFER_FROM = bytes4(keccak256(\\\"transferFrom(address,address,uint256)\\\"));\\n    bytes4 private constant ERC721_SAFE_TRANSFER_FROM = bytes4(keccak256(\\\"safeTransferFrom(address,address,uint256)\\\"));\\n    bytes4 private constant ERC721_SAFE_TRANSFER_FROM_BYTES = bytes4(keccak256(\\\"safeTransferFrom(address,address,uint256,bytes)\\\"));\\n    bytes4 private constant ERC1155_SAFE_TRANSFER_FROM = bytes4(keccak256(\\\"safeTransferFrom(address,address,uint256,uint256,bytes)\\\"));\\n\\n    bytes4 private constant OWNER_SIG = 0x8da5cb5b;\\n    /**\\n    * @notice Helper method to recover the signer at a given position from a list of concatenated signatures.\\n    * @param _signedHash The signed hash\\n    * @param _signatures The concatenated signatures.\\n    * @param _index The index of the signature to recover.\\n    */\\n    function recoverSigner(bytes32 _signedHash, bytes memory _signatures, uint _index) internal pure returns (address) {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        // we jump 32 (0x20) as the first slot of bytes contains the length\\n        // we jump 65 (0x41) per signature\\n        // for v we load 32 bytes ending with v (the first 31 come from s) then apply a mask\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(_signatures, add(0x20,mul(0x41,_index))))\\n            s := mload(add(_signatures, add(0x40,mul(0x41,_index))))\\n            v := and(mload(add(_signatures, add(0x41,mul(0x41,_index)))), 0xff)\\n        }\\n        require(v == 27 || v == 28, \\\"Utils: bad v value in signature\\\");\\n\\n        address recoveredAddress = ecrecover(_signedHash, v, r, s);\\n        require(recoveredAddress != address(0), \\\"Utils: ecrecover returned 0\\\");\\n        return recoveredAddress;\\n    }\\n\\n    /**\\n    * @notice Helper method to recover the spender from a contract call. \\n    * The method returns the contract unless the call is to a standard method of a ERC20/ERC721/ERC1155 token\\n    * in which case the spender is recovered from the data.\\n    * @param _to The target contract.\\n    * @param _data The data payload.\\n    */\\n    function recoverSpender(address _to, bytes memory _data) internal pure returns (address spender) {\\n        if(_data.length >= 68) {\\n            bytes4 methodId;\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                methodId := mload(add(_data, 0x20))\\n            }\\n            if(\\n                methodId == ERC20_TRANSFER ||\\n                methodId == ERC20_APPROVE ||\\n                methodId == ERC721_SET_APPROVAL_FOR_ALL) \\n            {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    spender := mload(add(_data, 0x24))\\n                }\\n                return spender;\\n            }\\n            if(\\n                methodId == ERC721_TRANSFER_FROM ||\\n                methodId == ERC721_SAFE_TRANSFER_FROM ||\\n                methodId == ERC721_SAFE_TRANSFER_FROM_BYTES ||\\n                methodId == ERC1155_SAFE_TRANSFER_FROM)\\n            {\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    spender := mload(add(_data, 0x44))\\n                }\\n                return spender;\\n            }\\n        }\\n\\n        spender = _to;\\n    }\\n\\n    /**\\n    * @notice Helper method to parse data and extract the method signature.\\n    */\\n    function functionPrefix(bytes memory _data) internal pure returns (bytes4 prefix) {\\n        require(_data.length >= 4, \\\"Utils: Invalid functionPrefix\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            prefix := mload(add(_data, 0x20))\\n        }\\n    }\\n\\n    /**\\n    * @notice Checks if an address is a contract.\\n    * @param _addr The address.\\n    */\\n    function isContract(address _addr) internal view returns (bool) {\\n        uint32 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return (size > 0);\\n    }\\n\\n    /**\\n    * @notice Checks if an address is a guardian or an account authorised to sign on behalf of a smart-contract guardian\\n    * given a list of guardians.\\n    * @param _guardians the list of guardians\\n    * @param _guardian the address to test\\n    * @return true and the list of guardians minus the found guardian upon success, false and the original list of guardians if not found.\\n    */\\n    function isGuardianOrGuardianSigner(address[] memory _guardians, address _guardian) internal view returns (bool, address[] memory) {\\n        if (_guardians.length == 0 || _guardian == address(0)) {\\n            return (false, _guardians);\\n        }\\n        bool isFound = false;\\n        address[] memory updatedGuardians = new address[](_guardians.length - 1);\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < _guardians.length; i++) {\\n            if (!isFound) {\\n                // check if _guardian is an account guardian\\n                if (_guardian == _guardians[i]) {\\n                    isFound = true;\\n                    continue;\\n                }\\n                // check if _guardian is the owner of a smart contract guardian\\n                if (isContract(_guardians[i]) && isGuardianOwner(_guardians[i], _guardian)) {\\n                    isFound = true;\\n                    continue;\\n                }\\n            }\\n            if (index < updatedGuardians.length) {\\n                updatedGuardians[index] = _guardians[i];\\n                index++;\\n            }\\n        }\\n        return isFound ? (true, updatedGuardians) : (false, _guardians);\\n    }\\n\\n    /**\\n    * @notice Checks if an address is the owner of a guardian contract.\\n    * The method does not revert if the call to the owner() method consumes more then 25000 gas.\\n    * @param _guardian The guardian contract\\n    * @param _owner The owner to verify.\\n    */\\n    function isGuardianOwner(address _guardian, address _owner) internal view returns (bool) {\\n        address owner = address(0);\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr,OWNER_SIG)\\n            let result := staticcall(25000, _guardian, ptr, 0x20, ptr, 0x20)\\n            if eq(result, 1) {\\n                owner := mload(ptr)\\n            }\\n        }\\n        return owner == _owner;\\n    }\\n\\n    /**\\n    * @notice Returns ceil(a / b).\\n    */\\n    function ceil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a / b;\\n        if (a % b == 0) {\\n            return c;\\n        } else {\\n            return c + 1;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/Elena/Source/argent-contracts/lib_0.5/ens/ENS.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24;\\n\\n/**\\n * ENS Registry interface.\\n * Reference: https://github.com/ensdomains/ens/blob/master/contracts/ENS.sol\\n */\\n\\ninterface ENS {\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external;\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external returns(bytes32);\\n    function setResolver(bytes32 node, address resolver) external;\\n    function setOwner(bytes32 node, address owner) external;\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n    function setApprovalForAll(address operator, bool approved) external;\\n    function owner(bytes32 node) external view returns (address);\\n    function resolver(bytes32 node) external view returns (address);\\n    function ttl(bytes32 node) external view returns (uint64);\\n    function recordExists(bytes32 node) external view returns (bool);\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"\": {}\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_rootName\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_rootNode\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_ensRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ensResolver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ENSResolverChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"ManagerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"ManagerRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_ens\",\"type\":\"string\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_rootnode\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"RootnodeOwnerChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_ens\",\"type\":\"string\"}],\"name\":\"Unregistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDR_REVERSE_NODE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ensResolver\",\"type\":\"address\"}],\"name\":\"changeENSResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeRootnodeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ensRegistry\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ensResolver\",\"outputs\":[{\"internalType\":\"contract IENSResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getENSReverseRegistrar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_subnode\",\"type\":\"bytes32\"}],\"name\":\"isAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"managers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_managerSignature\",\"type\":\"bytes\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"revokeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ArgentENSManager","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008081d9cbd36c9b24341634fed19608637cd8f473b4168a8aaae59f1c598409667e00000000000000000000000000000000000c2e074ec69a0dfb2997ba6c7d2e1e000000000000000000000000b23267e7a0dee4dcba80c1d2ffdb0270af76fe80000000000000000000000000000000000000000000000000000000000000000f617267656e742d746573742e78797a0000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}