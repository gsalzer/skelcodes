{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >= 0.8.0;\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\nabstract contract IQLF is IERC165 {\r\n    /**\r\n     * @dev Returns if the given address is qualified, implemented on demand.\r\n     */\r\n    function ifQualified (address account) virtual external view returns (bool);\r\n\r\n    /**\r\n     * @dev Logs if the given address is qualified, implemented on demand.\r\n     */\r\n    function logQualified (address account, uint256 ito_start_time) virtual external returns (bool);\r\n\r\n    /**\r\n     * @dev Ensure that custom contract implements `ifQualified` amd `logQualified` correctly.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) virtual external override pure returns (bool) {\r\n        return interfaceId == this.supportsInterface.selector || \r\n            interfaceId == (this.ifQualified.selector ^ this.logQualified.selector);\r\n    }\r\n\r\n    /**\r\n     * @dev Emit when `ifQualified` is called to decide if the given `address`\r\n     * is `qualified` according to the preset rule by the contract creator and \r\n     * the current block `number` and the current block `timestamp`.\r\n     */\r\n    event Qualification(address account, bool qualified, uint256 blockNumber, uint256 timestamp);\r\n}\r\n\r\ncontract QLF_LUCKYDRAW is IQLF {\r\n\r\n    string private name;\r\n    uint256 private creation_time;\r\n    uint256 start_time;\r\n    // in wei\r\n    uint256 public max_gas_price;\r\n    uint256 public min_token_amount;\r\n    address public token_addr;\r\n    // Chance to be selected as a lucky player\r\n    // 0 : 100%\r\n    // 1 : 75%\r\n    // 2 : 50%\r\n    // 3 : 25%\r\n    uint8 public lucky_factor;\r\n    address creator;\r\n    mapping(address => bool) black_list;\r\n    mapping(address => bool) whilte_list;\r\n\r\n    event GasPriceOver ();\r\n    event Unlucky ();\r\n\r\n    modifier creatorOnly {\r\n        require(msg.sender == creator, \"Not Authorized\");\r\n        _;\r\n    }\r\n\r\n    constructor (string memory _name,\r\n                uint256 _start_time,\r\n                uint256 _max_gas_price,\r\n                uint256 _min_token_amount,\r\n                address _token_addr,\r\n                uint8 _lucky_factor) {\r\n        name = _name;\r\n        creation_time = block.timestamp;\r\n        start_time = _start_time;\r\n        max_gas_price = _max_gas_price;\r\n        min_token_amount = _min_token_amount;\r\n        token_addr = _token_addr;\r\n        lucky_factor = _lucky_factor;\r\n        creator = msg.sender;\r\n    }\r\n\r\n    function get_name() public view returns (string memory) {\r\n        return name;\r\n    }\r\n\r\n    function get_creation_time() public view returns (uint256) {\r\n        return creation_time;\r\n    }\r\n\r\n    function get_start_time() public view returns (uint256) {\r\n        return start_time;\r\n    }\r\n\r\n    function set_start_time(uint256 _start_time) public creatorOnly {\r\n        start_time = _start_time;\r\n    }\r\n\r\n    function set_max_gas_price(uint256 _max_gas_price) public creatorOnly {\r\n        max_gas_price = _max_gas_price;\r\n    }\r\n\r\n    function set_min_token_amount(uint256 _min_token_amount) public creatorOnly {\r\n        min_token_amount = _min_token_amount;\r\n    }\r\n\r\n    function set_lucky_factor(uint8 _lucky_factor) public creatorOnly {\r\n        lucky_factor = _lucky_factor;\r\n    }\r\n\r\n    function set_token_addr(address _token_addr) public creatorOnly {\r\n        token_addr = _token_addr;\r\n    }\r\n\r\n    function add_whitelist(address[] memory addrs) public creatorOnly {\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            whilte_list[addrs[i]] = true;\r\n        }\r\n    }\r\n\r\n    function remove_whitelist(address[] memory addrs) public creatorOnly {\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            delete whilte_list[addrs[i]];\r\n        }\r\n    }\r\n\r\n    function ifQualified(address account) public view override returns (bool qualified) {\r\n        qualified = (whilte_list[account] || IERC20(token_addr).balanceOf(account) >= min_token_amount);\r\n    } \r\n\r\n    function logQualified(address account, uint256 ito_start_time) public override returns (bool qualified) {\r\n        if (tx.gasprice > max_gas_price) {\r\n            emit GasPriceOver();\r\n            revert(\"Gas price too high\");\r\n        }\r\n        if (!whilte_list[account])\r\n            require(IERC20(token_addr).balanceOf(account) >= min_token_amount, \"Not holding enough tokens\");\r\n\r\n        if (start_time > block.timestamp || ito_start_time > block.timestamp) {\r\n            black_list[account] = true;\r\n            revert(\"Not started.\");\r\n        }\r\n        require(black_list[account] == false, \"Blacklisted\");\r\n        if (isLucky(account) == false) {\r\n            emit Unlucky();\r\n            emit Qualification(account, false, block.number, block.timestamp);\r\n            revert(\"Not lucky enough\");\r\n        }\r\n        emit Qualification(account, true, block.number, block.timestamp);\r\n        qualified = true;\r\n    } \r\n\r\n    function supportsInterface(bytes4 interfaceId) external override pure returns (bool) {\r\n        return interfaceId == this.supportsInterface.selector || \r\n            interfaceId == (this.ifQualified.selector ^ this.logQualified.selector) ||\r\n            interfaceId == this.get_start_time.selector ||\r\n            interfaceId == this.isLucky.selector;\r\n    }\r\n\r\n    function isLucky(address account) public view returns (bool) {\r\n        if (lucky_factor == 0) {\r\n            return true;\r\n        }\r\n        uint256 blocknumber = block.number;\r\n        uint256 random_block = blocknumber - 1 - uint256(\r\n            keccak256(abi.encodePacked(blockhash(blocknumber-1), account))\r\n        ) % 255;\r\n        bytes32 sha = keccak256(abi.encodePacked(blockhash(random_block), account, block.coinbase, block.difficulty));\r\n        return ((uint8(sha[0]) & 0x03) >= lucky_factor);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_start_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max_gas_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min_token_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token_addr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_lucky_factor\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"GasPriceOver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"qualified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Qualification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unlucky\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"add_whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_creation_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_start_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ifQualified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"qualified\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLucky\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ito_start_time\",\"type\":\"uint256\"}],\"name\":\"logQualified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"qualified\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lucky_factor\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"max_gas_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"min_token_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"remove_whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_lucky_factor\",\"type\":\"uint8\"}],\"name\":\"set_lucky_factor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max_gas_price\",\"type\":\"uint256\"}],\"name\":\"set_max_gas_price\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_min_token_amount\",\"type\":\"uint256\"}],\"name\":\"set_min_token_amount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start_time\",\"type\":\"uint256\"}],\"name\":\"set_start_time\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token_addr\",\"type\":\"address\"}],\"name\":\"set_token_addr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token_addr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"QLF_LUCKYDRAW","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e8d4a5100000000000000000000000000000000000000000000000000821ab0d441498000000000000000000000000000069af81e73a73b40adf4f3d4223cd9b1ece623074000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000096c75636b79206d616e0000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d31143b3f641176c4ae9f54519186e95329494e33a79d7dd3ccc51339776ecf3"}]}