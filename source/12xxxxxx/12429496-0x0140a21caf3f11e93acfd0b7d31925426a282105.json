{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Users/glory/works/nick/blockchain/insta-nft/instagram-offer-nft/contracts/AccessControl/MarketTradingAccessControls.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Access Controls contract for the Market Trading Platform\\r\\n */\\r\\ncontract MarketTradingAccessControls is AccessControl {\\r\\n    /// @notice Role definitions\\r\\n    bytes32 public constant MINTER_ROLE = \\r\\n    0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6; // keccak256(\\\"MINTER_ROLE\\\")\\r\\n\\r\\n    bytes32 public constant SMART_CONTRACT_ROLE = \\r\\n    0x9d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873bfd; //keccak256(\\\"SMART_CONTRACT_ROLE\\\");\\r\\n\\r\\n    /// @notice Events for adding and removing various roles\\r\\n    event AdminRoleGranted(\\r\\n        address indexed beneficiary,\\r\\n        address indexed caller\\r\\n    );\\r\\n\\r\\n    event AdminRoleRemoved(\\r\\n        address indexed beneficiary,\\r\\n        address indexed caller\\r\\n    );\\r\\n\\r\\n    event MinterRoleGranted(\\r\\n        address indexed beneficiary,\\r\\n        address indexed caller\\r\\n    );\\r\\n\\r\\n    event MinterRoleRemoved(\\r\\n        address indexed beneficiary,\\r\\n        address indexed caller\\r\\n    );\\r\\n\\r\\n    event SmartContractRoleGranted(\\r\\n        address indexed beneficiary,\\r\\n        address indexed caller\\r\\n    );\\r\\n\\r\\n    event SmartContractRoleRemoved(\\r\\n        address indexed beneficiary,\\r\\n        address indexed caller\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice The deployer is automatically given the admin role which will allow them to then grant roles to other addresses\\r\\n     */\\r\\n    constructor() public {\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n    }\\r\\n    /////////////\\r\\n    // Lookups //\\r\\n    /////////////\\r\\n\\r\\n    /**\\r\\n     * @notice Used to check whether an address has the admin role\\r\\n     * @param _address EOA or contract being checked\\r\\n     * @return bool True if the account has the role or false if it does not\\r\\n     */\\r\\n    function hasAdminRole(address _address) external view returns (bool) {\\r\\n        return hasRole(DEFAULT_ADMIN_ROLE, _address);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to check whether an address has the minter role\\r\\n     * @param _address EOA or contract being checked\\r\\n     * @return bool True if the account has the role or false if it does not\\r\\n     */\\r\\n    function hasMinterRole(address _address) external view returns (bool) {\\r\\n        return hasRole(MINTER_ROLE, _address);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Used to check whether an address has the smart contract role\\r\\n     * @param _address EOA or contract being checked\\r\\n     * @return bool True if the account has the role or false if it does not\\r\\n     */\\r\\n    function hasSmartContractRole(address _address) external view returns (bool) {\\r\\n        return hasRole(SMART_CONTRACT_ROLE, _address);\\r\\n    }\\r\\n\\r\\n    ///////////////\\r\\n    // Modifiers //\\r\\n    ///////////////\\r\\n\\r\\n    /**\\r\\n     * @notice Grants the admin role to an address\\r\\n     * @dev The sender must have the admin role\\r\\n     * @param _address EOA or contract receiving the new role\\r\\n     */\\r\\n    function addAdminRole(address _address) external {\\r\\n        grantRole(DEFAULT_ADMIN_ROLE, _address);\\r\\n        emit AdminRoleGranted(_address, _msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes the admin role from an address\\r\\n     * @dev The sender must have the admin role\\r\\n     * @param _address EOA or contract affected\\r\\n     */\\r\\n    function removeAdminRole(address _address) external {\\r\\n        revokeRole(DEFAULT_ADMIN_ROLE, _address);\\r\\n        emit AdminRoleRemoved(_address, _msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Grants the minter role to an address\\r\\n     * @dev The sender must have the admin role\\r\\n     * @param _address EOA or contract receiving the new role\\r\\n     */\\r\\n    function addMinterRole(address _address) external {\\r\\n        grantRole(MINTER_ROLE, _address);\\r\\n        emit MinterRoleGranted(_address, _msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes the minter role from an address\\r\\n     * @dev The sender must have the admin role\\r\\n     * @param _address EOA or contract affected\\r\\n     */\\r\\n    function removeMinterRole(address _address) external {\\r\\n        revokeRole(MINTER_ROLE, _address);\\r\\n        emit MinterRoleRemoved(_address, _msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Grants the smart contract role to an address\\r\\n     * @dev The sender must have the admin role\\r\\n     * @param _address EOA or contract receiving the new role\\r\\n     */\\r\\n    function addSmartContractRole(address _address) external {\\r\\n        grantRole(SMART_CONTRACT_ROLE, _address);\\r\\n        emit SmartContractRoleGranted(_address, _msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes the smart contract role from an address\\r\\n     * @dev The sender must have the admin role\\r\\n     * @param _address EOA or contract affected\\r\\n     */\\r\\n    function removeSmartContractRole(address _address) external {\\r\\n        revokeRole(SMART_CONTRACT_ROLE, _address);\\r\\n        emit SmartContractRoleRemoved(_address, _msgSender());\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/glory/works/nick/blockchain/insta-nft/instagram-offer-nft/contracts/NFT/IMarketTradingNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\ninterface IMarketTradingNFT is IERC721 {\\r\\n    //View\\r\\n    function isApproved(uint256 _tokenId, address _operator) external view returns (bool);\\r\\n    function setPrimarySalePrice(uint256 _tokenId, uint256 _salePrice) external;\\r\\n    function postCreators(uint256 _tokenId) external view returns (address);\\r\\n    function exists(uint256 _tokenId) external view returns (bool);\\r\\n    function getNFTDetailByTokenId(uint256 _tokenId) external view returns (uint256, address, address, uint256, string memory);\\r\\n\\r\\n    //external\\r\\n    function mint(address _beneficiary, string calldata _tokenUri, address _designer) external returns (uint256);\\r\\n    function burn(uint256 _tokenId) external;\\r\\n    \\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/glory/works/nick/blockchain/insta-nft/instagram-offer-nft/contracts/NFTAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"./AccessControl/MarketTradingAccessControls.sol\\\";\\r\\nimport \\\"./NFT/IMarketTradingNFT.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Primary sale auction contract for MarketTrading NFTs\\r\\n */\\r\\ncontract NFTAuction is Context, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address payable;\\r\\n\\r\\n    /// @notice Event emitted only on construction. To be used by indexers\\r\\n    event NFTAuctionContractDeployed();\\r\\n\\r\\n    event PauseToggled(\\r\\n        bool isPaused\\r\\n    );\\r\\n\\r\\n    event UpdateAccessControls(\\r\\n        address indexed accessControls\\r\\n    );\\r\\n\\r\\n    event UpdatePlatformFeeRecipient(\\r\\n        address payable platformFeeRecipient\\r\\n    );\\r\\n\\r\\n    event UpdatePlatformFee(\\r\\n        uint256 platformFee\\r\\n    );\\r\\n\\r\\n    event UpdateResellFee(\\r\\n        uint256 resellFee\\r\\n    );\\r\\n\\r\\n    event UpdateCancelFee(\\r\\n        uint256 cancelFee\\r\\n    );\\r\\n\\r\\n    event UpdateMinBidIncrement(\\r\\n        uint256 minBidIncrement\\r\\n    );\\r\\n\\r\\n    event UpdateBidLockTime(\\r\\n        uint256 bidLockTime\\r\\n    );\\r\\n\\r\\n    event UpdateAuctionStatus(\\r\\n        string igUrl,\\r\\n        bool status\\r\\n    );\\r\\n\\r\\n    event BidPlaced(\\r\\n        string igUrl,\\r\\n        string edition,\\r\\n        address indexed bidder,\\r\\n        uint256 bid\\r\\n    );\\r\\n\\r\\n    event BidWithdrawn(\\r\\n        string indexed igUrl,\\r\\n        address indexed bidder,\\r\\n        uint256 bid\\r\\n    );\\r\\n\\r\\n    event BidRefunded(\\r\\n        address indexed bidder,\\r\\n        uint256 bid\\r\\n    );\\r\\n\\r\\n    event AuctionResulted(\\r\\n        uint256 indexed tokenId,\\r\\n        address seller,\\r\\n        string tokenUri,\\r\\n        string edition,\\r\\n        address indexed winner,\\r\\n        uint256 winningBid\\r\\n    );\\r\\n\\r\\n    /// @notice Information about the sender that placed a bit on an auction\\r\\n    struct HighestBid {\\r\\n        address payable bidder;\\r\\n        uint256 bid;\\r\\n        uint256 lastBidTime;\\r\\n    }\\r\\n\\r\\n    struct AuctionDetail {\\r\\n        uint256 tokenId;\\r\\n        address owner;\\r\\n    }\\r\\n\\r\\n    /// @notice instagram URL -> highest bidder info (if a bid has been received)\\r\\n    mapping(string => HighestBid) public highestBids;\\r\\n\\r\\n    /// @notice instagram URL -> Auction finished info \\r\\n    mapping(string => AuctionDetail) public auctionDetails;\\r\\n\\r\\n    /// @notice NFT - the only NFT that can be auctioned in this contract\\r\\n    IMarketTradingNFT public marketTradingNft;\\r\\n\\r\\n    /// @notice responsible for enforcing admin access\\r\\n    MarketTradingAccessControls public accessControls;\\r\\n    \\r\\n    /// @notice globally bid lock time, bidders can't withdraw bid before bidLockTime.\\r\\n    uint256 public bidLockTime = 1 days;\\r\\n\\r\\n    /// @notice globally and across all auctions, the amount by which a bid has to increase\\r\\n    uint256 public minBidIncrement = 0.01 ether;\\r\\n\\r\\n    /// @notice global platform fee, assumed to always be to 1 decimal place i.e. 50 = 5.0%\\r\\n    uint256 public platformFee = 50;\\r\\n\\r\\n    /// @notice global resell platform fee, assumed to always be to 1 decimal place i.e. 25 = 2.5%\\r\\n    uint256 public resellFee = 25;\\r\\n\\r\\n    /// @notice global creator fee, assumed to always be to 1 decimal place i.e. 100 = 10.0%\\r\\n    uint256 public creatorFee = 100;\\r\\n\\r\\n    /// @notice global cancel fee, assumed to always be to 1 decimal place i.e. 50 = 5.0%\\r\\n    uint256 public cancelFee = 50;\\r\\n\\r\\n    /// @notice where to send platform fee funds to\\r\\n    address payable public platformFeeRecipient;\\r\\n\\r\\n    /// @notice for switching off auction creations, bids and withdrawals\\r\\n    bool public isPaused;\\r\\n\\r\\n    modifier whenNotPaused() {\\r\\n        require(!isPaused, \\\"Function is currently paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        MarketTradingAccessControls _accessControls,\\r\\n        IMarketTradingNFT _marketTradingNft,\\r\\n        address payable _platformFeeRecipient\\r\\n    ) public {\\r\\n        // Check inputed addresses are not zero address\\r\\n        require(address(_accessControls) != address(0), \\\"NFTAuction: Invalid Access Controls\\\");\\r\\n        require(address(_marketTradingNft) != address(0), \\\"NFTAuction: Invalid NFT\\\");\\r\\n        require(_platformFeeRecipient != address(0), \\\"NFTAuction: Invalid Platform Fee Recipient\\\");\\r\\n\\r\\n        accessControls = _accessControls;\\r\\n        marketTradingNft = _marketTradingNft;\\r\\n        platformFeeRecipient = _platformFeeRecipient;\\r\\n\\r\\n        emit NFTAuctionContractDeployed();\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     @notice Places a new bid, out bidding the existing bidder if found and criteria is reached\\r\\n     @dev Only callable when the auction is open\\r\\n     @dev Bids from smart contracts are prohibited to prevent griefing with always reverting receiver\\r\\n     @param _igUrl Instagram URL of the fake NFT\\r\\n     */\\r\\n    function placeBid(string memory _igUrl) external payable nonReentrant whenNotPaused {\\r\\n        require(_msgSender().isContract() == false, \\\"NFTAuction.placeBid: No contracts permitted\\\");\\r\\n\\r\\n        uint256 bidAmount = msg.value;\\r\\n\\r\\n        // Ensure bid adheres to outbid increment and threshold\\r\\n        HighestBid storage highestBid = highestBids[_igUrl];\\r\\n        uint256 minBidRequired = highestBid.bid.add(minBidIncrement);\\r\\n        require(bidAmount >= minBidRequired, \\\"NFTAuction.placeBid: Failed to outbid highest bidder\\\");\\r\\n\\r\\n        // Refund existing top bidder if found\\r\\n        if (highestBid.bidder != address(0)) {\\r\\n            _refundHighestBidder(highestBid.bidder, highestBid.bid);\\r\\n        }\\r\\n\\r\\n        // assign top bidder and bid time\\r\\n        highestBid.bidder = _msgSender();\\r\\n        highestBid.bid = bidAmount;\\r\\n        highestBid.lastBidTime = _getNow();\\r\\n\\r\\n        emit BidPlaced(_igUrl, \\\"1 of 1\\\", _msgSender(), bidAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Given a sender who has the highest bid on a NFT, allows them to withdraw their bid\\r\\n     @dev Only callable by the existing top bidder\\r\\n     @param _igUrl Instagram URL of the fake NFT\\r\\n     */\\r\\n    function withdrawBid(string memory _igUrl) external nonReentrant whenNotPaused {\\r\\n        HighestBid storage highestBid = highestBids[_igUrl];\\r\\n\\r\\n        // Ensure highest bidder is the caller\\r\\n        require(highestBid.bidder == _msgSender(), \\\"NFTAuction.withdrawBid: You are not the highest bidder\\\");\\r\\n\\r\\n        require(_getNow() >= highestBid.lastBidTime + bidLockTime, \\\"NFTAuction.withdrawBid: Can't withdraw before locktime passed\\\");\\r\\n\\r\\n        uint256 previousBid = highestBid.bid;\\r\\n\\r\\n        // Clean up the existing top bid\\r\\n        delete highestBids[_igUrl];\\r\\n\\r\\n        // Refund the top bidder\\r\\n        _refundHighestBidder(_msgSender(), previousBid);\\r\\n\\r\\n        emit BidWithdrawn(_igUrl, _msgSender(), previousBid);\\r\\n    }\\r\\n\\r\\n    //////////\\r\\n    // Admin /\\r\\n    //////////\\r\\n\\r\\n    /**\\r\\n     @notice Results a finished auction\\r\\n     @dev Only admin or smart contract\\r\\n     @dev Auction can only be resulted if there has been a bidder and reserve met.\\r\\n     @dev If there have been no bids, the auction needs to be cancelled instead using `cancelAuction()`\\r\\n     @param _igUrl Instagram URL of the fake NFT\\r\\n     @param _seller The creator of Instagram Post\\r\\n     */\\r\\n    function resultAuction(string memory _igUrl, address _seller) external nonReentrant {\\r\\n        require(\\r\\n            accessControls.hasAdminRole(_msgSender()) || accessControls.hasSmartContractRole(_msgSender()),\\r\\n            \\\"NFTAuction.resultAuction: Sender must be admin or smart contract\\\"\\r\\n        );\\r\\n\\r\\n        // Ensure seller is not zero address\\r\\n        require(_seller != address(0), \\\"NFTAuction.resultAuction: Seller should not be zero address\\\");\\r\\n\\r\\n        // Get info on who the highest bidder is\\r\\n        HighestBid storage highestBid = highestBids[_igUrl];\\r\\n        address winner = highestBid.bidder;\\r\\n        uint256 winningBid = highestBid.bid;\\r\\n        uint256 maxShare = 1000;\\r\\n\\r\\n        // Ensure there is a winner\\r\\n        require(winner != address(0), \\\"NFTAuction.resultAuction: no open bids\\\");\\r\\n\\r\\n        // Clean up the highest bid\\r\\n        delete highestBids[_igUrl];\\r\\n        \\r\\n        AuctionDetail storage auctionDetail = auctionDetails[_igUrl];\\r\\n\\r\\n        uint256 platformFeeInETH;\\r\\n        uint256 creatorFeeInETH;\\r\\n\\r\\n        if (auctionDetail.tokenId == 0)\\r\\n        {\\r\\n            // Mint NFT to the highest bidder.\\r\\n            uint256 _tokenId = marketTradingNft.mint(winner, _igUrl, _seller);\\r\\n            auctionDetail.tokenId = _tokenId;\\r\\n            auctionDetail.owner = winner;\\r\\n\\r\\n            // Work out platform fee from above reserve amount\\r\\n            platformFeeInETH = winningBid.mul(platformFee).div(maxShare);\\r\\n        }\\r\\n        else {\\r\\n            // Transfer NFT to the new higgest bidder\\r\\n            require(marketTradingNft.ownerOf(auctionDetail.tokenId) == _seller,\\\"NFTAuction.resultAuction: seller is not owner of NFT\\\");\\r\\n\\r\\n            marketTradingNft.safeTransferFrom(auctionDetail.owner, winner, auctionDetail.tokenId);\\r\\n            auctionDetail.owner = winner;\\r\\n\\r\\n            // Work out platform fee and creator fee from above reserve amount\\r\\n            platformFeeInETH = winningBid.mul(resellFee).div(maxShare);\\r\\n            creatorFeeInETH = winningBid.mul(creatorFee).div(maxShare);\\r\\n        }\\r\\n\\r\\n        // Record the primary sale price for the NFT\\r\\n        marketTradingNft.setPrimarySalePrice(auctionDetail.tokenId, winningBid);\\r\\n\\r\\n        // Send platform fee\\r\\n        (bool platformTransferSuccess,) = platformFeeRecipient.call{value : platformFeeInETH}(\\\"\\\");\\r\\n        require(platformTransferSuccess, \\\"NFTAuction.resultAuction: Failed to send platform fee\\\");\\r\\n\\r\\n        // Send remaining to seller\\r\\n        (bool sellerTransferSuccess,) = _seller.call{value : winningBid.sub(platformFeeInETH).sub(creatorFeeInETH)}(\\\"\\\");\\r\\n        require(sellerTransferSuccess, \\\"NFTAuction.resultAuction: Failed to send the instagram post creator their royalties\\\");\\r\\n\\r\\n        if(creatorFeeInETH > 0) {\\r\\n            // Send creator fee\\r\\n            (bool creatorTransferSuccess,) = marketTradingNft.postCreators(auctionDetail.tokenId).call{value : creatorFeeInETH}(\\\"\\\");\\r\\n            require(creatorTransferSuccess, \\\"NFTAuction.resultAuction: Failed to send creator fee\\\");\\r\\n        }\\r\\n\\r\\n        emit AuctionResulted(auctionDetail.tokenId, _seller, _igUrl, \\\"1 of 1\\\", winner, winningBid.sub(platformFeeInETH));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Toggling the pause flag\\r\\n     @dev Only admin\\r\\n     */\\r\\n    function toggleIsPaused() external {\\r\\n        require(accessControls.hasAdminRole(_msgSender()), \\\"NFTAuction.toggleIsPaused: Sender must be admin\\\");\\r\\n        isPaused = !isPaused;\\r\\n        emit PauseToggled(isPaused);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     @notice Update the amount by which bids have to increase, across all auctions\\r\\n     @dev Only admin\\r\\n     @param _minBidIncrement New bid step in WEI\\r\\n     */\\r\\n    function updateMinBidIncrement(uint256 _minBidIncrement) external {\\r\\n        require(accessControls.hasAdminRole(_msgSender()), \\\"NFTAuction.updateMinBidIncrement: Sender must be admin\\\");\\r\\n        minBidIncrement = _minBidIncrement;\\r\\n        emit UpdateMinBidIncrement(_minBidIncrement);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Update the lock time of the higgest bid, before locktime passed the highest bidder can't cancel the auction\\r\\n     @dev Only admin\\r\\n     @param _bidLockTime New bid lock time\\r\\n     */\\r\\n    function updateBidLockTime(uint256 _bidLockTime) external {\\r\\n        require(accessControls.hasAdminRole(_msgSender()), \\\"NFTAuction.updateBidLockTime: Sender must be admin\\\");\\r\\n        bidLockTime = _bidLockTime;\\r\\n        emit UpdateBidLockTime(_bidLockTime);\\r\\n    }   \\r\\n\\r\\n    /**\\r\\n     @notice Method for updating the access controls contract used by the NFT\\r\\n     @dev Only admin\\r\\n     @param _accessControls Address of the new access controls contract (Cannot be zero address)\\r\\n     */\\r\\n    function updateAccessControls(MarketTradingAccessControls _accessControls) external {\\r\\n        require(\\r\\n            accessControls.hasAdminRole(_msgSender()),\\r\\n            \\\"NFTAuction.updateAccessControls: Sender must be admin\\\"\\r\\n        );\\r\\n\\r\\n        require(address(_accessControls) != address(0), \\\"NFTAuction.updateAccessControls: Zero Address\\\");\\r\\n\\r\\n        accessControls = _accessControls;\\r\\n        emit UpdateAccessControls(address(_accessControls));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Method for updating platform fee address\\r\\n     @dev Only admin\\r\\n     @param _platformFeeRecipient payable address the address to sends the funds to\\r\\n     */\\r\\n    function updatePlatformFeeRecipient(address payable _platformFeeRecipient) external {\\r\\n        require(\\r\\n            accessControls.hasAdminRole(_msgSender()),\\r\\n            \\\"NFTAuction.updatePlatformFeeRecipient: Sender must be admin\\\"\\r\\n        );\\r\\n\\r\\n        require(_platformFeeRecipient != address(0), \\\"NFTAuction.updatePlatformFeeRecipient: Zero address\\\");\\r\\n\\r\\n        platformFeeRecipient = _platformFeeRecipient;\\r\\n        emit UpdatePlatformFeeRecipient(_platformFeeRecipient);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Method for updating platform fee \\r\\n     @dev Only admin\\r\\n     @param _platformFee New platform fee\\r\\n     */\\r\\n    function updatePlatformFee(uint256 _platformFee) external {\\r\\n        require(\\r\\n            accessControls.hasAdminRole(_msgSender()),\\r\\n            \\\"NFTAuction.updatePlatformFee: Sender must be admin\\\"\\r\\n        );\\r\\n\\r\\n        platformFee = _platformFee;\\r\\n        emit UpdatePlatformFee(_platformFee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Method for updating resell fee \\r\\n     @dev Only admin\\r\\n     @param _resellFee New resell fee\\r\\n     */\\r\\n    function updateResellFee(uint256 _resellFee) external {\\r\\n        require(\\r\\n            accessControls.hasAdminRole(_msgSender()),\\r\\n            \\\"NFTAuction.updateResellFee: Sender must be admin\\\"\\r\\n        );\\r\\n\\r\\n        resellFee = _resellFee;\\r\\n        emit UpdateResellFee(_resellFee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Method for updating cancel fee \\r\\n     @dev Only admin\\r\\n     @param _cancelFee New cancel fee\\r\\n     */\\r\\n    function updateCancelFee(uint256 _cancelFee) external {\\r\\n        require(\\r\\n            accessControls.hasAdminRole(_msgSender()),\\r\\n            \\\"NFTAuction.updateCancelFee: Sender must be admin\\\"\\r\\n        );\\r\\n\\r\\n        cancelFee = _cancelFee;\\r\\n        emit UpdateCancelFee(_cancelFee);\\r\\n    }\\r\\n    ///////////////\\r\\n    // Accessors //\\r\\n    ///////////////\\r\\n\\r\\n    /**\\r\\n     @notice Method for getting all info about the highest bidder\\r\\n     @param _igUrl Instagram URL of the fake NFT\\r\\n     */\\r\\n    function getHighestBidder(string memory _igUrl) external view returns (address payable _bidder, uint256 _bid, uint256 _lastBidTime) {\\r\\n        HighestBid storage highestBid = highestBids[_igUrl];\\r\\n        return (highestBid.bidder, highestBid.bid, highestBid.lastBidTime);\\r\\n    }\\r\\n\\r\\n    /////////////////////////\\r\\n    // Internal and Private /\\r\\n    /////////////////////////\\r\\n\\r\\n    function _getNow() internal virtual view returns (uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice Used for sending back escrowed funds from a previous bid\\r\\n     @param _currentHighestBidder Address of the last highest bidder\\r\\n     @param _currentHighestBid Ether amount in WEI that the bidder sent when placing their bid\\r\\n     */\\r\\n    function _refundHighestBidder(address payable _currentHighestBidder, uint256 _currentHighestBid) private {\\r\\n        uint256 maxShare = 1000;\\r\\n\\r\\n        // Work out platform fee from above reserve amount\\r\\n        uint256 platformFeeInETH = _currentHighestBid.mul(cancelFee).div(maxShare);\\r\\n\\r\\n        // Send platform fee\\r\\n        (bool platformTransferSuccess,) = platformFeeRecipient.call{value : platformFeeInETH}(\\\"\\\");\\r\\n        require(platformTransferSuccess, \\\"NFTAuction._refundHighestBidder: Failed to send platform fee\\\");\\r\\n\\r\\n        // refund previous highest bid - platform fee (if bid exists)\\r\\n        (bool successRefund,) = _currentHighestBidder.call{value : _currentHighestBid.sub(platformFeeInETH)}(\\\"\\\");\\r\\n        require(successRefund, \\\"NFTAuction._refundHighestBidder: failed to refund previous bidder\\\");\\r\\n\\r\\n        emit BidRefunded(_currentHighestBidder, _currentHighestBid.sub(platformFeeInETH));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract MarketTradingAccessControls\",\"name\":\"_accessControls\",\"type\":\"address\"},{\"internalType\":\"contract IMarketTradingNFT\",\"name\":\"_marketTradingNft\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_platformFeeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"edition\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningBid\",\"type\":\"uint256\"}],\"name\":\"AuctionResulted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"igUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"edition\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"BidRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"igUrl\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"name\":\"BidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NFTAuctionContractDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accessControls\",\"type\":\"address\"}],\"name\":\"UpdateAccessControls\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"igUrl\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdateAuctionStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidLockTime\",\"type\":\"uint256\"}],\"name\":\"UpdateBidLockTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cancelFee\",\"type\":\"uint256\"}],\"name\":\"UpdateCancelFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBidIncrement\",\"type\":\"uint256\"}],\"name\":\"UpdateMinBidIncrement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"}],\"name\":\"UpdatePlatformFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"platformFeeRecipient\",\"type\":\"address\"}],\"name\":\"UpdatePlatformFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resellFee\",\"type\":\"uint256\"}],\"name\":\"UpdateResellFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accessControls\",\"outputs\":[{\"internalType\":\"contract MarketTradingAccessControls\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"auctionDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bidLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creatorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_igUrl\",\"type\":\"string\"}],\"name\":\"getHighestBidder\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"_bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastBidTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"highestBids\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBidTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketTradingNft\",\"outputs\":[{\"internalType\":\"contract IMarketTradingNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBidIncrement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_igUrl\",\"type\":\"string\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFeeRecipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_igUrl\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"}],\"name\":\"resultAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleIsPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MarketTradingAccessControls\",\"name\":\"_accessControls\",\"type\":\"address\"}],\"name\":\"updateAccessControls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bidLockTime\",\"type\":\"uint256\"}],\"name\":\"updateBidLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cancelFee\",\"type\":\"uint256\"}],\"name\":\"updateCancelFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBidIncrement\",\"type\":\"uint256\"}],\"name\":\"updateMinBidIncrement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"}],\"name\":\"updatePlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_platformFeeRecipient\",\"type\":\"address\"}],\"name\":\"updatePlatformFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_resellFee\",\"type\":\"uint256\"}],\"name\":\"updateResellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_igUrl\",\"type\":\"string\"}],\"name\":\"withdrawBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NFTAuction","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002bf3eb14d2aa399d50e2bfa9b62fb853ab8034eb00000000000000000000000072185a82379928c2575e099a3401fa413a0eac930000000000000000000000006da8433b2d8d20fab8a6f1e8394d55d386525e59","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}