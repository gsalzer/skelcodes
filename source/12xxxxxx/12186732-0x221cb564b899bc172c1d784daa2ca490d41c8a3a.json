{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\nabstract contract LiquidationEngineLike {\r\n    function addAuthorization(address) external virtual;\r\n    function currentOnAuctionSystemCoins() virtual public view returns (uint256);\r\n    function modifyParameters(bytes32, uint256) virtual external;    \r\n}\r\n\r\nabstract contract StabilityFeeTreasuryLike {\r\n    function getAllowance(address) virtual external view returns (uint, uint);\r\n    function systemCoin() virtual external view returns (address);\r\n    function pullFunds(address, address, uint) virtual external;\r\n    function setTotalAllowance(address, uint256) external virtual;\r\n    function setPerBlockAllowance(address, uint256) external virtual;    \r\n}\r\n\r\nabstract contract SAFEEngineLike {\r\n    function globalDebt() virtual public view returns (uint256);\r\n    function globalUnbackedDebt() virtual public view returns (uint256);\r\n    function coinBalance(address) virtual public view returns (uint256);\r\n}\r\n\r\ncontract GebMath {\r\n    uint256 public constant RAY = 10 ** 27;\r\n    uint256 public constant WAD = 10 ** 18;\r\n\r\n    function ray(uint x) public pure returns (uint z) {\r\n        z = multiply(x, 10 ** 9);\r\n    }\r\n    function rad(uint x) public pure returns (uint z) {\r\n        z = multiply(x, 10 ** 27);\r\n    }\r\n    function minimum(uint x, uint y) public pure returns (uint z) {\r\n        z = (x <= y) ? x : y;\r\n    }\r\n    function addition(uint x, uint y) public pure returns (uint z) {\r\n        z = x + y;\r\n        require(z >= x, \"uint-uint-add-overflow\");\r\n    }\r\n    function subtract(uint x, uint y) public pure returns (uint z) {\r\n        z = x - y;\r\n        require(z <= x, \"uint-uint-sub-underflow\");\r\n    }\r\n    function multiply(uint x, uint y) public pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"uint-uint-mul-overflow\");\r\n    }\r\n    function rmultiply(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, y) / RAY;\r\n    }\r\n    function rdivide(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, RAY) / y;\r\n    }\r\n    function wdivide(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, WAD) / y;\r\n    }\r\n    function wmultiply(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, y) / WAD;\r\n    }\r\n    function rpower(uint x, uint n, uint base) public pure returns (uint z) {\r\n        assembly {\r\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\r\n            default {\r\n                switch mod(n, 2) case 0 { z := base } default { z := x }\r\n                let half := div(base, 2)  // for rounding.\r\n                for { n := div(n, 2) } n { n := div(n,2) } {\r\n                    let xx := mul(x, x)\r\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\r\n                    let xxRound := add(xx, half)\r\n                    if lt(xxRound, xx) { revert(0,0) }\r\n                    x := div(xxRound, base)\r\n                    if mod(n,2) {\r\n                        let zx := mul(z, x)\r\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\r\n                        let zxRound := add(zx, half)\r\n                        if lt(zxRound, zx) { revert(0,0) }\r\n                        z := div(zxRound, base)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract IncreasingTreasuryReimbursement is GebMath {\r\n    // --- Auth ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) virtual external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) virtual external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"IncreasingTreasuryReimbursement/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Variables ---\r\n    // Starting reward for the fee receiver/keeper\r\n    uint256 public baseUpdateCallerReward;          // [wad]\r\n    // Max possible reward for the fee receiver/keeper\r\n    uint256 public maxUpdateCallerReward;           // [wad]\r\n    // Max delay taken into consideration when calculating the adjusted reward\r\n    uint256 public maxRewardIncreaseDelay;          // [seconds]\r\n    // Rate applied to baseUpdateCallerReward every extra second passed beyond a certain point (e.g next time when a specific function needs to be called)\r\n    uint256 public perSecondCallerRewardIncrease;   // [ray]\r\n\r\n    // SF treasury\r\n    StabilityFeeTreasuryLike  public treasury;\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event ModifyParameters(\r\n      bytes32 parameter,\r\n      address addr\r\n    );\r\n    event ModifyParameters(\r\n      bytes32 parameter,\r\n      uint256 val\r\n    );\r\n    event FailRewardCaller(bytes revertReason, address feeReceiver, uint256 amount);\r\n\r\n    constructor(\r\n      address treasury_,\r\n      uint256 baseUpdateCallerReward_,\r\n      uint256 maxUpdateCallerReward_,\r\n      uint256 perSecondCallerRewardIncrease_\r\n    ) public {\r\n        if (address(treasury_) != address(0)) {\r\n          require(StabilityFeeTreasuryLike(treasury_).systemCoin() != address(0), \"IncreasingTreasuryReimbursement/treasury-coin-not-set\");\r\n        }\r\n        require(maxUpdateCallerReward_ >= baseUpdateCallerReward_, \"IncreasingTreasuryReimbursement/invalid-max-caller-reward\");\r\n        require(perSecondCallerRewardIncrease_ >= RAY, \"IncreasingTreasuryReimbursement/invalid-per-second-reward-increase\");\r\n        authorizedAccounts[msg.sender] = 1;\r\n\r\n        treasury                        = StabilityFeeTreasuryLike(treasury_);\r\n        baseUpdateCallerReward          = baseUpdateCallerReward_;\r\n        maxUpdateCallerReward           = maxUpdateCallerReward_;\r\n        perSecondCallerRewardIncrease   = perSecondCallerRewardIncrease_;\r\n        maxRewardIncreaseDelay          = uint(-1);\r\n\r\n        emit AddAuthorization(msg.sender);\r\n        emit ModifyParameters(\"treasury\", treasury_);\r\n        emit ModifyParameters(\"baseUpdateCallerReward\", baseUpdateCallerReward);\r\n        emit ModifyParameters(\"maxUpdateCallerReward\", maxUpdateCallerReward);\r\n        emit ModifyParameters(\"perSecondCallerRewardIncrease\", perSecondCallerRewardIncrease);\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n\r\n    // --- Treasury ---\r\n    /**\r\n    * @notice This returns the stability fee treasury allowance for this contract by taking the minimum between the per block and the total allowances\r\n    **/\r\n    function treasuryAllowance() public view returns (uint256) {\r\n        (uint total, uint perBlock) = treasury.getAllowance(address(this));\r\n        return minimum(total, perBlock);\r\n    }\r\n    /*\r\n    * @notice Get the SF reward that can be sent to a function caller right now\r\n    * @param timeOfLastUpdate The last time when the function that the treasury pays for has been updated\r\n    * @param defaultDelayBetweenCalls Enforced delay between calls to the function for which the treasury reimburses callers\r\n    */\r\n    function getCallerReward(uint256 timeOfLastUpdate, uint256 defaultDelayBetweenCalls) public view returns (uint256) {\r\n        // If the rewards are null or if the time of the last update is in the future or present, return 0\r\n        bool nullRewards = (baseUpdateCallerReward == 0 && maxUpdateCallerReward == 0);\r\n        if (either(timeOfLastUpdate >= now, nullRewards)) return 0;\r\n\r\n        // If the time elapsed is smaller than defaultDelayBetweenCalls or if the base reward is zero, return 0\r\n        uint256 timeElapsed = (timeOfLastUpdate == 0) ? defaultDelayBetweenCalls : subtract(now, timeOfLastUpdate);\r\n        if (either(timeElapsed < defaultDelayBetweenCalls, baseUpdateCallerReward == 0)) {\r\n            return 0;\r\n        }\r\n\r\n        // If too much time elapsed, return the max reward\r\n        uint256 adjustedTime      = subtract(timeElapsed, defaultDelayBetweenCalls);\r\n        uint256 maxPossibleReward = minimum(maxUpdateCallerReward, treasuryAllowance() / RAY);\r\n        if (adjustedTime > maxRewardIncreaseDelay) {\r\n            return maxPossibleReward;\r\n        }\r\n\r\n        // Calculate the reward\r\n        uint256 calculatedReward = baseUpdateCallerReward;\r\n        if (adjustedTime > 0) {\r\n            calculatedReward = rmultiply(rpower(perSecondCallerRewardIncrease, adjustedTime, RAY), calculatedReward);\r\n        }\r\n\r\n        // If the reward is higher than max, set it to max\r\n        if (calculatedReward > maxPossibleReward) {\r\n            calculatedReward = maxPossibleReward;\r\n        }\r\n        return calculatedReward;\r\n    }\r\n    /**\r\n    * @notice Send a stability fee reward to an address\r\n    * @param proposedFeeReceiver The SF receiver\r\n    * @param reward The system coin amount to send\r\n    **/\r\n    function rewardCaller(address proposedFeeReceiver, uint256 reward) internal {\r\n        // If the receiver is the treasury itself or if the treasury is null or if the reward is zero, return\r\n        if (address(treasury) == proposedFeeReceiver) return;\r\n        if (either(address(treasury) == address(0), reward == 0)) return;\r\n\r\n        // Determine the actual receiver and send funds\r\n        address finalFeeReceiver = (proposedFeeReceiver == address(0)) ? msg.sender : proposedFeeReceiver;\r\n        try treasury.pullFunds(finalFeeReceiver, treasury.systemCoin(), reward) {}\r\n        catch(bytes memory revertReason) {\r\n            emit FailRewardCaller(revertReason, finalFeeReceiver, reward);\r\n        }\r\n    }\r\n}\r\n\r\ncontract CollateralAuctionThrottler is IncreasingTreasuryReimbursement {\r\n    // --- Variables ---\r\n    // Minimum delay between consecutive updates\r\n    uint256 public updateDelay;                     // [seconds]\r\n    // Delay since the last update time after which backupLimitRecompute can be called\r\n    uint256 public backupUpdateDelay;               // [seconds]\r\n    // Percentage of global debt taken into account in order to set LiquidationEngine.onAuctionSystemCoinLimit\r\n    uint256 public globalDebtPercentage;            // [hundred]\r\n    // The minimum auction limit\r\n    uint256 public minAuctionLimit;                 // [rad]\r\n    // Last timestamp when the onAuctionSystemCoinLimit was updated\r\n    uint256 public lastUpdateTime;                  // [unix timestamp]\r\n\r\n    LiquidationEngineLike    public liquidationEngine;\r\n    SAFEEngineLike           public safeEngine;\r\n\r\n    // List of surplus holders\r\n    address[]                public surplusHolders;\r\n\r\n    constructor(\r\n      address safeEngine_,\r\n      address liquidationEngine_,\r\n      address treasury_,\r\n      uint256 updateDelay_,\r\n      uint256 backupUpdateDelay_,\r\n      uint256 baseUpdateCallerReward_,\r\n      uint256 maxUpdateCallerReward_,\r\n      uint256 perSecondCallerRewardIncrease_,\r\n      uint256 globalDebtPercentage_,\r\n      address[] memory surplusHolders_\r\n    ) public IncreasingTreasuryReimbursement(treasury_, baseUpdateCallerReward_, maxUpdateCallerReward_, perSecondCallerRewardIncrease_) {\r\n        require(safeEngine_ != address(0), \"CollateralAuctionThrottler/null-safe-engine\");\r\n        require(liquidationEngine_ != address(0), \"CollateralAuctionThrottler/null-liquidation-engine\");\r\n        require(updateDelay_ > 0, \"CollateralAuctionThrottler/null-update-delay\");\r\n        require(backupUpdateDelay_ > updateDelay_, \"CollateralAuctionThrottler/invalid-backup-update-delay\");\r\n        require(both(globalDebtPercentage_ > 0, globalDebtPercentage_ <= HUNDRED), \"CollateralAuctionThrottler/invalid-global-debt-percentage\");\r\n        require(surplusHolders_.length <= HOLDERS_ARRAY_LIMIT, \"CollateralAuctionThrottler/invalid-holder-array-length\");\r\n\r\n        safeEngine             = SAFEEngineLike(safeEngine_);\r\n        liquidationEngine      = LiquidationEngineLike(liquidationEngine_);\r\n        updateDelay            = updateDelay_;\r\n        backupUpdateDelay      = backupUpdateDelay_;\r\n        globalDebtPercentage   = globalDebtPercentage_;\r\n        surplusHolders         = surplusHolders_;\r\n\r\n        emit ModifyParameters(bytes32(\"updateDelay\"), updateDelay);\r\n        emit ModifyParameters(bytes32(\"globalDebtPercentage\"), globalDebtPercentage);\r\n        emit ModifyParameters(bytes32(\"backupUpdateDelay\"), backupUpdateDelay);\r\n    }\r\n\r\n    // --- Math ---\r\n    uint256 internal constant ONE                 = 1;\r\n    uint256 internal constant HOLDERS_ARRAY_LIMIT = 10;\r\n    uint256 internal constant HUNDRED             = 100;\r\n\r\n    // --- Boolean Logic ---\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n\r\n    // --- Administration ---\r\n    /*\r\n    * @notify Modify a uint256 parameter\r\n    * @param parameter The name of the parameter to modify\r\n    * @param data The new parameter value\r\n    */\r\n    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\r\n        if (parameter == \"baseUpdateCallerReward\") {\r\n          require(data <= maxUpdateCallerReward, \"CollateralAuctionThrottler/invalid-min-reward\");\r\n          baseUpdateCallerReward = data;\r\n        }\r\n        else if (parameter == \"maxUpdateCallerReward\") {\r\n          require(data >= baseUpdateCallerReward, \"CollateralAuctionThrottler/invalid-max-reward\");\r\n          maxUpdateCallerReward = data;\r\n        }\r\n        else if (parameter == \"perSecondCallerRewardIncrease\") {\r\n          require(data >= RAY, \"CollateralAuctionThrottler/invalid-reward-increase\");\r\n          perSecondCallerRewardIncrease = data;\r\n        }\r\n        else if (parameter == \"maxRewardIncreaseDelay\") {\r\n          require(data > 0, \"CollateralAuctionThrottler/invalid-max-increase-delay\");\r\n          maxRewardIncreaseDelay = data;\r\n        }\r\n        else if (parameter == \"updateDelay\") {\r\n          require(data > 0, \"CollateralAuctionThrottler/null-update-delay\");\r\n          updateDelay = data;\r\n        }\r\n        else if (parameter == \"backupUpdateDelay\") {\r\n          require(data > updateDelay, \"CollateralAuctionThrottler/invalid-backup-update-delay\");\r\n          backupUpdateDelay = data;\r\n        }\r\n        else if (parameter == \"globalDebtPercentage\") {\r\n          require(both(data > 0, data <= HUNDRED), \"CollateralAuctionThrottler/invalid-global-debt-percentage\");\r\n          globalDebtPercentage = data;\r\n        }\r\n        else if (parameter == \"minAuctionLimit\") {\r\n          minAuctionLimit = data;\r\n        }\r\n        else revert(\"CollateralAuctionThrottler/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, data);\r\n    }\r\n    /*\r\n    * @notify Modify the address of a contract param\r\n    * @param parameter The name of the parameter to change the address for\r\n    * @param addr The new address\r\n    */\r\n    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\r\n        require(addr != address(0), \"CollateralAuctionThrottler/null-addr\");\r\n        if (parameter == \"treasury\") {\r\n          require(StabilityFeeTreasuryLike(addr).systemCoin() != address(0), \"CollateralAuctionThrottler/treasury-coin-not-set\");\r\n      \t  treasury = StabilityFeeTreasuryLike(addr);\r\n        }\r\n        else if (parameter == \"liquidationEngine\") {\r\n          liquidationEngine = LiquidationEngineLike(addr);\r\n        }\r\n        else revert(\"CollateralAuctionThrottler/modify-unrecognized-param\");\r\n        emit ModifyParameters(parameter, addr);\r\n    }\r\n\r\n    // --- Recompute Logic ---\r\n    /*\r\n    * @notify Recompute and set the new onAuctionSystemCoinLimit\r\n    * @param feeReceiver The address that will receive the reward for recomputing the onAuctionSystemCoinLimit\r\n    */\r\n    function recomputeOnAuctionSystemCoinLimit(address feeReceiver) public {\r\n        // Check delay between calls\r\n        require(either(subtract(now, lastUpdateTime) >= updateDelay, lastUpdateTime == 0), \"CollateralAuctionThrottler/wait-more\");\r\n        // Get the caller's reward\r\n        uint256 callerReward = getCallerReward(lastUpdateTime, updateDelay);\r\n        // Store the timestamp of the update\r\n        lastUpdateTime = now;\r\n        // Compute total surplus\r\n        uint256 totalSurplus;\r\n        for (uint i = 0; i < surplusHolders.length; i++) {\r\n          totalSurplus = addition(totalSurplus, safeEngine.coinBalance(surplusHolders[i]));\r\n        }\r\n        // Remove surplus from global debt\r\n        uint256 rawGlobalDebt               = subtract(safeEngine.globalDebt(), totalSurplus);\r\n        rawGlobalDebt                       = subtract(rawGlobalDebt, safeEngine.globalUnbackedDebt());\r\n        // Calculate and set the onAuctionSystemCoinLimit\r\n        uint256 newAuctionLimit             = multiply(rawGlobalDebt / HUNDRED, globalDebtPercentage);\r\n        uint256 currentOnAuctionSystemCoins = liquidationEngine.currentOnAuctionSystemCoins();\r\n        newAuctionLimit                     = (newAuctionLimit <= minAuctionLimit) ? minAuctionLimit : newAuctionLimit;\r\n        newAuctionLimit                     = (newAuctionLimit == 0) ? uint(-1) : newAuctionLimit;\r\n        newAuctionLimit                     = (newAuctionLimit < currentOnAuctionSystemCoins) ? currentOnAuctionSystemCoins : newAuctionLimit;\r\n        liquidationEngine.modifyParameters(\"onAuctionSystemCoinLimit\", newAuctionLimit);\r\n        // Pay the caller for updating the rate\r\n        rewardCaller(feeReceiver, callerReward);\r\n    }\r\n    /*\r\n    * @notify Backup function for recomputing the onAuctionSystemCoinLimit in case of a severe delay since the last update\r\n    */\r\n    function backupRecomputeOnAuctionSystemCoinLimit() public {\r\n        // Check delay between calls\r\n        require(both(subtract(now, lastUpdateTime) >= backupUpdateDelay, lastUpdateTime > 0), \"CollateralAuctionThrottler/wait-more\");\r\n        // Store the timestamp of the update\r\n        lastUpdateTime = now;\r\n        // Set the onAuctionSystemCoinLimit\r\n        liquidationEngine.modifyParameters(\"onAuctionSystemCoinLimit\", uint(-1));\r\n    }\r\n}\r\n\r\ncontract DeployCollateralAuctionThottler {\r\n    // --- Variables ---\r\n    uint256 public constant RAY = 10**27;\r\n    uint256 public constant RAD = 10**45;\r\n\r\n    function execute(\r\n        address _safeEngine,\r\n        address _liquidationEngine,\r\n        address _treasury\r\n    ) public returns (address) {\r\n        // Define params\r\n        uint256 updateDelay                   = 1 weeks;\r\n        uint256 backupUpdateDelay             = 8 days;\r\n        uint256 maxRewardIncreaseDelay        = 3 hours;\r\n        uint256 baseUpdateCallerReward        = 0;\r\n        uint256 maxUpdateCallerReward         = 10 ether;\r\n        uint256 perSecondCallerRewardIncrease = RAY;\r\n        uint256 globalDebtPercentage          = 20;\r\n        uint256 minAuctionLimit               = 500000 * RAD;\r\n\r\n        address[] memory surplusHolders;\r\n\r\n        // deploy the throttler\r\n        CollateralAuctionThrottler throttler = new CollateralAuctionThrottler(\r\n            _safeEngine,\r\n            _liquidationEngine,\r\n            _treasury,\r\n            updateDelay,\r\n            backupUpdateDelay,\r\n            baseUpdateCallerReward,\r\n            maxUpdateCallerReward,\r\n            perSecondCallerRewardIncrease,\r\n            globalDebtPercentage,\r\n            surplusHolders\r\n        );\r\n\r\n        // setting params\r\n        throttler.modifyParameters(\"maxRewardIncreaseDelay\", maxRewardIncreaseDelay);\r\n        throttler.modifyParameters(\"minAuctionLimit\", minAuctionLimit);\r\n\r\n        // setting allowances in the SF treasury\r\n        StabilityFeeTreasuryLike(_treasury).setPerBlockAllowance(address(throttler), maxUpdateCallerReward * RAY);\r\n        StabilityFeeTreasuryLike(_treasury).setTotalAllowance(address(throttler), uint(-1));\r\n\r\n        // auth throttler in LiquidationEngine\r\n        LiquidationEngineLike(_liquidationEngine).addAuthorization(address(throttler));\r\n\r\n        return address(throttler);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"RAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safeEngine\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidationEngine\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DeployCollateralAuctionThottler","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e4612339d3500e8392e1fe898726cbf067b01a81d901e1f73cff8ff7762725f7"}]}