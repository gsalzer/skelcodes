{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-04-21\r\n*/\r\n\r\npragma solidity ^0.7.6;\r\n\r\n// SPDX-License-Identifier: MIT\r\n// Source code: https://github.com/DeCash-Official/smart-contracts\r\n\r\ninterface DeCashStorageInterface {\r\n    // Getters\r\n    function getAddress(bytes32 _key) external view returns (address);\r\n\r\n    function getUint(bytes32 _key) external view returns (uint256);\r\n\r\n    function getString(bytes32 _key) external view returns (string memory);\r\n\r\n    function getBytes(bytes32 _key) external view returns (bytes memory);\r\n\r\n    function getBool(bytes32 _key) external view returns (bool);\r\n\r\n    function getInt(bytes32 _key) external view returns (int256);\r\n\r\n    function getBytes32(bytes32 _key) external view returns (bytes32);\r\n\r\n    // Setters\r\n    function setAddress(bytes32 _key, address _value) external;\r\n\r\n    function setUint(bytes32 _key, uint256 _value) external;\r\n\r\n    function setString(bytes32 _key, string calldata _value) external;\r\n\r\n    function setBytes(bytes32 _key, bytes calldata _value) external;\r\n\r\n    function setBool(bytes32 _key, bool _value) external;\r\n\r\n    function setInt(bytes32 _key, int256 _value) external;\r\n\r\n    function setBytes32(bytes32 _key, bytes32 _value) external;\r\n\r\n    // Deleters\r\n    function deleteAddress(bytes32 _key) external;\r\n\r\n    function deleteUint(bytes32 _key) external;\r\n\r\n    function deleteString(bytes32 _key) external;\r\n\r\n    function deleteBytes(bytes32 _key) external;\r\n\r\n    function deleteBool(bytes32 _key) external;\r\n\r\n    function deleteInt(bytes32 _key) external;\r\n\r\n    function deleteBytes32(bytes32 _key) external;\r\n}\r\n\r\n/// @title The primary persistent storage for DeCash Token (Credits David Rugendyke/Rocket Pool)\r\n/// @author Fabrizio Amodio (ZioFabry)\r\n\r\ncontract DeCashStorage is DeCashStorageInterface {\r\n    // Storage types\r\n    mapping(bytes32 => uint256) private _uIntStorage;\r\n    mapping(bytes32 => string) private _stringStorage;\r\n    mapping(bytes32 => address) private _addressStorage;\r\n    mapping(bytes32 => bytes) private _bytesStorage;\r\n    mapping(bytes32 => bool) private _boolStorage;\r\n    mapping(bytes32 => int256) private _intStorage;\r\n    mapping(bytes32 => bytes32) private _bytes32Storage;\r\n\r\n    /// @dev Only allow access from the latest version of a DeCash token contract after deployment\r\n    modifier onlyLatestDeCashNetworkContract() {\r\n        // The owner and other contracts are only allowed to set the storage upon deployment to register the initial contracts/settings, afterwards their direct access is disabled\r\n        if (\r\n            _boolStorage[\r\n                keccak256(abi.encodePacked(\"contract.storage.initialised\"))\r\n            ] == true\r\n        ) {\r\n            // Make sure the access is permitted to only contracts in our Dapp\r\n            require(\r\n                _boolStorage[\r\n                    keccak256(abi.encodePacked(\"contract.exists\", msg.sender))\r\n                ],\r\n                \"Invalid or outdated network contract\"\r\n            );\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @dev Construct DeCashStorage\r\n    constructor() {\r\n        // Set the main owner upon deployment\r\n        _boolStorage[\r\n            keccak256(abi.encodePacked(\"access.role\", \"owner\", msg.sender))\r\n        ] = true;\r\n    }\r\n\r\n    function getAddress(bytes32 _key) external view override returns (address) {\r\n        return _addressStorage[_key];\r\n    }\r\n\r\n    function getUint(bytes32 _key) external view override returns (uint256) {\r\n        return _uIntStorage[_key];\r\n    }\r\n\r\n    function getString(bytes32 _key)\r\n        external\r\n        view\r\n        override\r\n        returns (string memory)\r\n    {\r\n        return _stringStorage[_key];\r\n    }\r\n\r\n    function getBytes(bytes32 _key)\r\n        external\r\n        view\r\n        override\r\n        returns (bytes memory)\r\n    {\r\n        return _bytesStorage[_key];\r\n    }\r\n\r\n    function getBool(bytes32 _key) external view override returns (bool) {\r\n        return _boolStorage[_key];\r\n    }\r\n\r\n    function getInt(bytes32 _key) external view override returns (int256) {\r\n        return _intStorage[_key];\r\n    }\r\n\r\n    function getBytes32(bytes32 _key) external view override returns (bytes32) {\r\n        return _bytes32Storage[_key];\r\n    }\r\n\r\n    function setAddress(bytes32 _key, address _value)\r\n        external\r\n        override\r\n        onlyLatestDeCashNetworkContract\r\n    {\r\n        _addressStorage[_key] = _value;\r\n    }\r\n\r\n    function setUint(bytes32 _key, uint256 _value)\r\n        external\r\n        override\r\n        onlyLatestDeCashNetworkContract\r\n    {\r\n        _uIntStorage[_key] = _value;\r\n    }\r\n\r\n    function setString(bytes32 _key, string calldata _value)\r\n        external\r\n        override\r\n        onlyLatestDeCashNetworkContract\r\n    {\r\n        _stringStorage[_key] = _value;\r\n    }\r\n\r\n    function setBytes(bytes32 _key, bytes calldata _value)\r\n        external\r\n        override\r\n        onlyLatestDeCashNetworkContract\r\n    {\r\n        _bytesStorage[_key] = _value;\r\n    }\r\n\r\n    function setBool(bytes32 _key, bool _value)\r\n        external\r\n        override\r\n        onlyLatestDeCashNetworkContract\r\n    {\r\n        _boolStorage[_key] = _value;\r\n    }\r\n\r\n    function setInt(bytes32 _key, int256 _value)\r\n        external\r\n        override\r\n        onlyLatestDeCashNetworkContract\r\n    {\r\n        _intStorage[_key] = _value;\r\n    }\r\n\r\n    function setBytes32(bytes32 _key, bytes32 _value)\r\n        external\r\n        override\r\n        onlyLatestDeCashNetworkContract\r\n    {\r\n        _bytes32Storage[_key] = _value;\r\n    }\r\n\r\n    function deleteAddress(bytes32 _key)\r\n        external\r\n        override\r\n        onlyLatestDeCashNetworkContract\r\n    {\r\n        delete _addressStorage[_key];\r\n    }\r\n\r\n    function deleteUint(bytes32 _key)\r\n        external\r\n        override\r\n        onlyLatestDeCashNetworkContract\r\n    {\r\n        delete _uIntStorage[_key];\r\n    }\r\n\r\n    function deleteString(bytes32 _key)\r\n        external\r\n        override\r\n        onlyLatestDeCashNetworkContract\r\n    {\r\n        delete _stringStorage[_key];\r\n    }\r\n\r\n    function deleteBytes(bytes32 _key)\r\n        external\r\n        override\r\n        onlyLatestDeCashNetworkContract\r\n    {\r\n        delete _bytesStorage[_key];\r\n    }\r\n\r\n    function deleteBool(bytes32 _key)\r\n        external\r\n        override\r\n        onlyLatestDeCashNetworkContract\r\n    {\r\n        delete _boolStorage[_key];\r\n    }\r\n\r\n    function deleteInt(bytes32 _key)\r\n        external\r\n        override\r\n        onlyLatestDeCashNetworkContract\r\n    {\r\n        delete _intStorage[_key];\r\n    }\r\n\r\n    function deleteBytes32(bytes32 _key)\r\n        external\r\n        override\r\n        onlyLatestDeCashNetworkContract\r\n    {\r\n        delete _bytes32Storage[_key];\r\n    }\r\n}\r\n\r\ncontract EURDStorage is DeCashStorage {}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteBytes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteBytes32\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteInt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteString\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"deleteUint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getInt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getUint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_value\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_value\",\"type\":\"bytes\"}],\"name\":\"setBytes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"setBytes32\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"_value\",\"type\":\"int256\"}],\"name\":\"setInt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"setString\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setUint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DeCashStorage","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://acc3815dff556e10ab9896a17b6e3f208a135c3c9b16c08428b9fa64169609fd"}]}