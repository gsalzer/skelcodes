{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"uBoostUft.sol\": {\r\n      \"content\": \"pragma solidity 0.8.0;\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\nimport \\\"https://raw.githubusercontent.com/UniLend/flashloan_interface/main/contracts/UnilendFlashLoanReceiverBase.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\ncontract BoostVolumeUnilend is UnilendFlashLoanReceiverBase {\\r\\n    using SafeMath for uint256;\\r\\n    \\r\\n    uint public fee;\\r\\n    address public feeAddress;\\r\\n    address public owner;\\r\\n    \\r\\n    \\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n        fee = 0;\\r\\n        feeAddress = msg.sender;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    \\r\\n    modifier onlyOwner() {\\r\\n        require(owner == msg.sender, \\\"caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function executeOperation(\\r\\n        address _reserve,\\r\\n        uint256 _amount,\\r\\n        uint256 _fee,\\r\\n        bytes calldata _params\\r\\n    )\\r\\n        external\\r\\n    {\\r\\n        require(_amount <= getBalanceInternal(address(this), _reserve), \\\"Invalid balance, was the flashLoan successful?\\\");\\r\\n        \\r\\n        \\r\\n        address token;\\r\\n        address exchange;\\r\\n        address payable sender;\\r\\n        (exchange, token, sender) = abi.decode(_params, (address, address, address));\\r\\n        \\r\\n        \\r\\n        address weth = IUniswapV2Router01(exchange).WETH();\\r\\n        \\r\\n        \\r\\n        uint[] memory amounts;\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = token;\\r\\n        path[1] = weth;\\r\\n        \\r\\n        \\r\\n        if(IERC20(token).allowance(address(this), exchange) < _amount){\\r\\n            IERC20(token).approve(exchange, uint(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff));\\r\\n        }\\r\\n        \\r\\n        \\r\\n        amounts = IUniswapV2Router01(exchange).swapExactTokensForTokens(\\r\\n            _amount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp + 10\\r\\n        );\\r\\n        \\r\\n        if(IERC20(weth).allowance(address(this), exchange) < amounts[1]){\\r\\n            IERC20(weth).approve(exchange, uint(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff));\\r\\n        }\\r\\n        \\r\\n        path[0] = weth;\\r\\n        path[1] = token;\\r\\n        \\r\\n        amounts = IUniswapV2Router01(exchange).swapExactTokensForTokens(\\r\\n            amounts[1],\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp + 10\\r\\n        );\\r\\n        \\r\\n        \\r\\n        \\r\\n        uint totalDebt = _amount.add(_fee);\\r\\n        transferInternal(getUnilendCoreAddress(), _reserve, totalDebt);\\r\\n    }\\r\\n    \\r\\n    function executeTrade(address _exchange, address token, uint _amount) external {\\r\\n        bytes memory data = abi.encode(address(_exchange), address(token), address(msg.sender));\\r\\n        \\r\\n        uint _totfee = (_amount.mul(65)).div(10000);\\r\\n        uint feeAmount;\\r\\n        if(fee > 0){\\r\\n            feeAmount = (_amount.mul(fee)).div(10000);\\r\\n        }\\r\\n        \\r\\n        IERC20(token).transferFrom(msg.sender, address(this), _totfee.add(feeAmount));\\r\\n        \\r\\n        if(feeAmount > 0){\\r\\n            IERC20(token).transfer(feeAddress, feeAmount.mul(2));\\r\\n        }\\r\\n        \\r\\n        flashLoan(address(this), token, _amount, data);\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function updateFee(address payable newAddress, uint newFee) external onlyOwner {\\r\\n        fee = newFee;\\r\\n        feeAddress = newAddress;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function withdrawTokens(address token, address to, uint amount) external onlyOwner {\\r\\n        IERC20(token).transfer(to, amount);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"https://raw.githubusercontent.com/UniLend/flashloan_interface/main/contracts/UnilendFlashLoanReceiverBase.sol\": {\r\n      \"content\": \"pragma solidity 0.8.0;\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"SafeMath: modulo by zero\\\");\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type,\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\r\\n     * execution of a contract's constructor, its address will be reported as\\r\\n     * not containing a contract.\\r\\n     *\\r\\n     * > It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies in extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves.\\r\\n\\r\\n        // A Solidity high level call has three parts:\\r\\n        //  1. The target address is checked to verify it contains contract code\\r\\n        //  2. The call itself is made, and success asserted\\r\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\r\\n\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ninterface IUnilendFlashLoanCoreBase {\\r\\n    function flashLoan(address _receiver, address _reserve, uint256 _amount, bytes memory _params) external;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\ncontract UnilendFlashLoanReceiverBase {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    \\r\\n    mapping(uint => address payable) private coreAddress;\\r\\n    address payable public unilendFlashLoanCore;\\r\\n    \\r\\n    constructor() {\\r\\n        coreAddress[1] = payable(0x13A145D215182924c89F2aBc7D358DCc72F8F788);\\r\\n        coreAddress[3] = payable(0x13A145D215182924c89F2aBc7D358DCc72F8F788);\\r\\n        coreAddress[56] = payable(0x13A145D215182924c89F2aBc7D358DCc72F8F788);\\r\\n        coreAddress[97] = payable(0x13A145D215182924c89F2aBc7D358DCc72F8F788);\\r\\n        coreAddress[137] = payable(0x13A145D215182924c89F2aBc7D358DCc72F8F788);\\r\\n    }\\r\\n    \\r\\n    receive() payable external {}\\r\\n    \\r\\n    function ethAddress() internal pure returns(address) {\\r\\n        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\r\\n    }\\r\\n    \\r\\n    function getChainID() internal view returns (uint256) {\\r\\n        uint256 id;\\r\\n        assembly {\\r\\n            id := chainid()\\r\\n        }\\r\\n        return id;\\r\\n    }\\r\\n    \\r\\n    function getUnilendCoreAddress() internal view returns(address payable) {\\r\\n        require(coreAddress[getChainID()] != address(0), \\\"UnilendV1: Chain not supported\\\");\\r\\n        return coreAddress[getChainID()];\\r\\n    }\\r\\n    \\r\\n    function getBalanceInternal(address _target, address _reserve) internal view returns(uint256) {\\r\\n        if(_reserve == ethAddress()) {\\r\\n            return _target.balance;\\r\\n        }\\r\\n        return IERC20(_reserve).balanceOf(_target);\\r\\n    }\\r\\n    \\r\\n    function transferInternal(address payable _destination, address _reserve, uint256 _amount) internal {\\r\\n        if(_reserve == ethAddress()) {\\r\\n            (bool success, ) = _destination.call{value: _amount}(\\\"\\\");\\r\\n            require(success == true, \\\"Couldn't transfer ETH\\\");\\r\\n            return;\\r\\n        }\\r\\n        IERC20(_reserve).safeTransfer(_destination, _amount);\\r\\n    }\\r\\n    \\r\\n    function flashLoan(address _target, address _asset, uint256 _amount, bytes memory _params) internal {\\r\\n        IUnilendFlashLoanCoreBase(getUnilendCoreAddress()).flashLoan(_target, _asset, _amount, _params);\\r\\n    }\\r\\n    \\r\\n}\\r\\n\"\r\n    },\r\n    \"https://raw.githubusercontent.com/UniLend/flashloan_interface/main/contracts/IERC20.sol\": {\r\n      \"content\": \"pragma solidity 0.8.0;\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * @title ERC20 interface\\r\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\r\\n */\\r\\ninterface IERC20 {\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  function balanceOf(address who) external view returns (uint256);\\r\\n\\r\\n  function allowance(address owner, address spender)\\r\\n    external view returns (uint256);\\r\\n\\r\\n  function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n  function approve(address spender, uint256 value)\\r\\n    external returns (bool);\\r\\n\\r\\n  function transferFrom(address from, address to, uint256 value)\\r\\n    external returns (bool);\\r\\n\\r\\n  event Transfer(\\r\\n    address indexed from,\\r\\n    address indexed to,\\r\\n    uint256 value\\r\\n  );\\r\\n\\r\\n  event Approval(\\r\\n    address indexed owner,\\r\\n    address indexed spender,\\r\\n    uint256 value\\r\\n  );\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"executeTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unilendFlashLoanCore\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BoostVolumeUnilend","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d534a94ce8e90cdb5d2b20683c184044d5afe1d680755d8d5645053e001d3d33"}]}