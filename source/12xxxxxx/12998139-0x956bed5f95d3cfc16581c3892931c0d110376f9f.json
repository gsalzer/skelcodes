{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Exerciser.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2021 Hegic Protocol\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport \\\"./Interfaces/IOptionsManager.sol\\\";\\nimport \\\"./Interfaces/Interfaces.sol\\\";\\n\\n/**\\n * @author 0mllwntrmt3\\n * @title Hegic Protocol V8888 Exerciser Contract\\n * @notice The contract that allows to automatically exercise options half an hour before expiration\\n **/\\ncontract Exerciser {\\n    IOptionsManager immutable optionsManager;\\n\\n    constructor(IOptionsManager manager) {\\n        optionsManager = manager;\\n    }\\n\\n    function exercise(uint256 optionId) external {\\n        IHegicPool pool = IHegicPool(optionsManager.tokenPool(optionId));\\n        (, , , , uint256 expired, , ) = pool.options(optionId);\\n        require(\\n            block.timestamp > expired - 30 minutes,\\n            \\\"Facade Error: Automatically exercise for this option is not available yet\\\"\\n        );\\n        pool.exercise(optionId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IOptionsManager.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2021 Hegic Protocol\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @notice The interface for the contract\\n *   that tokenizes options as ERC721.\\n **/\\n\\ninterface IOptionsManager is IERC721 {\\n    /**\\n     * @param holder The option buyer address\\n     **/\\n    function createOptionFor(address holder) external returns (uint256);\\n\\n    /**\\n     * @param tokenId The ERC721 token ID linked to the option\\n     **/\\n    function tokenPool(uint256 tokenId) external returns (address pool);\\n\\n    /**\\n     * @param spender The option buyer address or another address\\n     *   with the granted permission to buy/exercise options on the user's behalf\\n     * @param tokenId The ERC721 token ID linked to the option\\n     **/\\n    function isApprovedOrOwner(address spender, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/Interfaces.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2021 Hegic Protocol\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\\\";\\n\\n// /**\\n//  * @author 0mllwntrmt3\\n//  * @title Hegic Protocol V8888 Interface\\n//  * @notice The interface for the price calculator,\\n//  *   options, pools and staking contracts.\\n//  **/\\n\\n/**\\n * @notice The interface fot the contract that calculates\\n *   the options prices (the premiums) that are adjusted\\n *   through balancing the `ImpliedVolRate` parameter.\\n **/\\ninterface IPriceCalculator {\\n    /**\\n     * @param period The option period\\n     * @param amount The option size\\n     * @param strike The option strike\\n     **/\\n    function calculateTotalPremium(\\n        uint256 period,\\n        uint256 amount,\\n        uint256 strike\\n    ) external view returns (uint256 settlementFee, uint256 premium);\\n}\\n\\n/**\\n * @notice The interface for the contract that manages pools and the options parameters,\\n *   accumulates the funds from the liquidity providers and makes the withdrawals for them,\\n *   sells the options contracts to the options buyers and collateralizes them,\\n *   exercises the ITM (in-the-money) options with the unrealized P&L and settles them,\\n *   unlocks the expired options and distributes the premiums among the liquidity providers.\\n **/\\ninterface IHegicPool is IERC721, IPriceCalculator {\\n    enum OptionState {Invalid, Active, Exercised, Expired}\\n    enum TrancheState {Invalid, Open, Closed}\\n\\n    /**\\n     * @param state The state of the option: Invalid, Active, Exercised, Expired\\n     * @param strike The option strike\\n     * @param amount The option size\\n     * @param lockedAmount The option collateral size locked\\n     * @param expired The option expiration timestamp\\n     * @param hedgePremium The share of the premium paid for hedging from the losses\\n     * @param unhedgePremium The share of the premium paid to the hedged liquidity provider\\n     **/\\n    struct Option {\\n        OptionState state;\\n        uint256 strike;\\n        uint256 amount;\\n        uint256 lockedAmount;\\n        uint256 expired;\\n        uint256 hedgePremium;\\n        uint256 unhedgePremium;\\n    }\\n\\n    /**\\n     * @param state The state of the liquidity tranche: Invalid, Open, Closed\\n     * @param share The liquidity provider's share in the pool\\n     * @param amount The size of liquidity provided\\n     * @param creationTimestamp The liquidity deposit timestamp\\n     * @param hedged The liquidity tranche type: hedged or unhedged (classic)\\n     **/\\n    struct Tranche {\\n        TrancheState state;\\n        uint256 share;\\n        uint256 amount;\\n        uint256 creationTimestamp;\\n        bool hedged;\\n    }\\n\\n    /**\\n     * @param id The ERC721 token ID linked to the option\\n     * @param settlementFee The part of the premium that\\n     *   is distributed among the HEGIC staking participants\\n     * @param premium The part of the premium that\\n     *   is distributed among the liquidity providers\\n     **/\\n    event Acquired(uint256 indexed id, uint256 settlementFee, uint256 premium);\\n\\n    /**\\n     * @param id The ERC721 token ID linked to the option\\n     * @param profit The profits of the option if exercised\\n     **/\\n    event Exercised(uint256 indexed id, uint256 profit);\\n\\n    /**\\n     * @param id The ERC721 token ID linked to the option\\n     **/\\n    event Expired(uint256 indexed id);\\n\\n    /**\\n     * @param account The liquidity provider's address\\n     * @param trancheID The liquidity tranche ID\\n     **/\\n    event Withdrawn(\\n        address indexed account,\\n        uint256 indexed trancheID,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param id The ERC721 token ID linked to the option\\n     **/\\n    function unlock(uint256 id) external;\\n\\n    /**\\n     * @param id The ERC721 token ID linked to the option\\n     **/\\n    function exercise(uint256 id) external;\\n\\n    function setLockupPeriod(uint256, uint256) external;\\n\\n    /**\\n     * @param value The hedging pool address\\n     **/\\n    function setHedgePool(address value) external;\\n\\n    /**\\n     * @param trancheID The liquidity tranche ID\\n     * @return amount The liquidity to be received with\\n     *   the positive or negative P&L earned or lost during\\n     *   the period of holding the liquidity tranche considered\\n     **/\\n    function withdraw(uint256 trancheID) external returns (uint256 amount);\\n\\n    function pricer() external view returns (IPriceCalculator);\\n\\n    /**\\n     * @return amount The unhedged liquidity size\\n     *   (unprotected from the losses on selling the options)\\n     **/\\n    function unhedgedBalance() external view returns (uint256 amount);\\n\\n    /**\\n     * @return amount The hedged liquidity size\\n     * (protected from the losses on selling the options)\\n     **/\\n    function hedgedBalance() external view returns (uint256 amount);\\n\\n    /**\\n     * @param account The liquidity provider's address\\n     * @param amount The size of the liquidity tranche\\n     * @param hedged The type of the liquidity tranche\\n     * @param minShare The minimum share in the pool of the user\\n     **/\\n    function provideFrom(\\n        address account,\\n        uint256 amount,\\n        bool hedged,\\n        uint256 minShare\\n    ) external returns (uint256 share);\\n\\n    /**\\n     * @param holder The option buyer address\\n     * @param period The option period\\n     * @param amount The option size\\n     * @param strike The option strike\\n     **/\\n    function sellOption(\\n        address holder,\\n        uint256 period,\\n        uint256 amount,\\n        uint256 strike\\n    ) external returns (uint256 id);\\n\\n    /**\\n     * @param trancheID The liquidity tranche ID\\n     * @return amount The amount to be received after the withdrawal\\n     **/\\n    function withdrawWithoutHedge(uint256 trancheID)\\n        external\\n        returns (uint256 amount);\\n\\n    /**\\n     * @return amount The total liquidity provided into the pool\\n     **/\\n    function totalBalance() external view returns (uint256 amount);\\n\\n    /**\\n     * @return amount The total liquidity locked in the pool\\n     **/\\n    function lockedAmount() external view returns (uint256 amount);\\n\\n    function token() external view returns (IERC20);\\n\\n    /**\\n     * @return state The state of the option: Invalid, Active, Exercised, Expired\\n     * @return strike The option strike\\n     * @return amount The option size\\n     * @return lockedAmount The option collateral size locked\\n     * @return expired The option expiration timestamp\\n     * @return hedgePremium The share of the premium paid for hedging from the losses\\n     * @return unhedgePremium The share of the premium paid to the hedged liquidity provider\\n     **/\\n    function options(uint256 id)\\n        external\\n        view\\n        returns (\\n            OptionState state,\\n            uint256 strike,\\n            uint256 amount,\\n            uint256 lockedAmount,\\n            uint256 expired,\\n            uint256 hedgePremium,\\n            uint256 unhedgePremium\\n        );\\n\\n    /**\\n     * @return state The state of the liquidity tranche: Invalid, Open, Closed\\n     * @return share The liquidity provider's share in the pool\\n     * @return amount The size of liquidity provided\\n     * @return creationTimestamp The liquidity deposit timestamp\\n     * @return hedged The liquidity tranche type: hedged or unhedged (classic)\\n     **/\\n    function tranches(uint256 id)\\n        external\\n        view\\n        returns (\\n            TrancheState state,\\n            uint256 share,\\n            uint256 amount,\\n            uint256 creationTimestamp,\\n            bool hedged\\n        );\\n}\\n\\n/**\\n * @notice The interface for the contract that stakes HEGIC tokens\\n *   through buying microlots (any amount of HEGIC tokens per microlot)\\n *   and staking lots (888,000 HEGIC per lot), accumulates the staking\\n *   rewards (settlement fees) and distributes the staking rewards among\\n *   the microlots and staking lots holders (should be claimed manually).\\n **/\\ninterface IHegicStaking {\\n    event Claim(address indexed account, uint256 amount);\\n    event Profit(uint256 amount);\\n    event MicroLotsAcquired(address indexed account, uint256 amount);\\n    event MicroLotsSold(address indexed account, uint256 amount);\\n\\n    function claimProfits(address account) external returns (uint256 profit);\\n\\n    function buyStakingLot(uint256 amount) external;\\n\\n    function sellStakingLot(uint256 amount) external;\\n\\n    function distributeUnrealizedRewards() external;\\n\\n    function profitOf(address account) external view returns (uint256);\\n}\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 value) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Staking/HegicStaking.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2021 Hegic Protocol\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../Interfaces/Interfaces.sol\\\";\\n\\n/**\\n * @author 0mllwntrmt3\\n * @title Hegic Protocol V8888 Staking Contract\\n * @notice The contract that stakes the HEGIC tokens through\\n * buying the microlots (any amount of HEGIC tokens per microlot)\\n * and the staking lots (888,000 HEGIC per lot), accumulates the staking\\n * rewards (settlement fees) and distributes the staking rewards among\\n * the microlots and staking lots holders (should be claimed manually).\\n **/\\n\\ncontract HegicStaking is ERC20, IHegicStaking {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable HEGIC;\\n    IERC20 public immutable token;\\n\\n    uint256 public constant STAKING_LOT_PRICE = 888_000e18;\\n    uint256 internal constant ACCURACY = 1e30;\\n    uint256 internal realisedBalance;\\n\\n    uint256 public microLotsTotal = 0;\\n    mapping(address => uint256) public microBalance;\\n\\n    uint256 public totalProfit = 0;\\n    mapping(address => uint256) internal lastProfit;\\n\\n    uint256 public microLotsProfits = 0;\\n    mapping(address => uint256) internal lastMicroLotProfits;\\n\\n    mapping(address => uint256) internal savedProfit;\\n\\n    uint256 public classicLockupPeriod = 1 days;\\n    uint256 public microLockupPeriod = 1 days;\\n\\n    mapping(address => uint256) public lastBoughtTimestamp;\\n    mapping(address => uint256) public lastMicroBoughtTimestamp;\\n    mapping(address => bool) public _revertTransfersInLockUpPeriod;\\n\\n    constructor(\\n        ERC20 _hegic,\\n        ERC20 _token,\\n        string memory name,\\n        string memory short\\n    ) ERC20(name, short) {\\n        HEGIC = _hegic;\\n        token = _token;\\n    }\\n\\n    function decimals() public pure override returns (uint8) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Used by the HEGIC microlots holders\\n     * or staking lots holders for claiming\\n     * the accumulated staking rewards.\\n     **/\\n    function claimProfits(address account)\\n        external\\n        override\\n        returns (uint256 profit)\\n    {\\n        saveProfits(account);\\n        profit = savedProfit[account];\\n        require(profit > 0, \\\"Zero profit\\\");\\n        savedProfit[account] = 0;\\n        realisedBalance -= profit;\\n        token.safeTransfer(account, profit);\\n        emit Claim(account, profit);\\n    }\\n\\n    /**\\n     * @notice Used for staking any amount of the HEGIC tokens\\n     * higher than zero in the form of buying the microlot\\n     * for receiving a pro rata share of 20% of the total staking\\n     * rewards (settlement fees) generated by the protocol.\\n     **/\\n    function buyMicroLot(uint256 amount) external {\\n        require(amount > 0, \\\"Amount is zero\\\");\\n        saveProfits(msg.sender);\\n        lastMicroBoughtTimestamp[msg.sender] = block.timestamp;\\n        microLotsTotal += amount;\\n        microBalance[msg.sender] += amount;\\n        HEGIC.safeTransferFrom(msg.sender, address(this), amount);\\n        emit MicroLotsAcquired(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Used for unstaking the HEGIC tokens\\n     * in the form of selling the microlot.\\n     **/\\n    function sellMicroLot(uint256 amount) external {\\n        require(amount > 0, \\\"Amount is zero\\\");\\n        require(\\n            lastMicroBoughtTimestamp[msg.sender] + microLockupPeriod <\\n                block.timestamp,\\n            \\\"The action is suspended due to the lockup\\\"\\n        );\\n        saveProfits(msg.sender);\\n        microLotsTotal -= amount;\\n        microBalance[msg.sender] -= amount;\\n        HEGIC.safeTransfer(msg.sender, amount);\\n        emit MicroLotsSold(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Used for staking the fixed amount of 888,000 HEGIC\\n     * tokens in the form of buying the staking lot (transferrable)\\n     * for receiving a pro rata share of 80% of the total staking\\n     * rewards (settlement fees) generated by the protocol.\\n     **/\\n    function buyStakingLot(uint256 amount) external override {\\n        lastBoughtTimestamp[msg.sender] = block.timestamp;\\n        require(amount > 0, \\\"Amount is zero\\\");\\n        _mint(msg.sender, amount);\\n        HEGIC.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            amount * STAKING_LOT_PRICE\\n        );\\n    }\\n\\n    /**\\n     * @notice Used for unstaking 888,000 HEGIC\\n     * tokens in the form of selling the staking lot.\\n     **/\\n    function sellStakingLot(uint256 amount) external override lockupFree {\\n        _burn(msg.sender, amount);\\n        HEGIC.safeTransfer(msg.sender, amount * STAKING_LOT_PRICE);\\n    }\\n\\n    function revertTransfersInLockUpPeriod(bool value) external {\\n        _revertTransfersInLockUpPeriod[msg.sender] = value;\\n    }\\n\\n    /**\\n     * @notice Returns the amount of unclaimed staking rewards.\\n     **/\\n    function profitOf(address account)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        (uint256 profit, uint256 micro) = getUnsavedProfits(account);\\n        return savedProfit[account] + profit + micro;\\n    }\\n\\n    /**\\n     * @notice Used for calculating the amount of accumulated\\n     * staking rewards before the share of the staking participant\\n     * changes higher (buying more microlots or staking lots)\\n     * or lower (selling more microlots or staking lots).\\n     **/\\n    function getUnsavedProfits(address account)\\n        internal\\n        view\\n        returns (uint256 total, uint256 micro)\\n    {\\n        total =\\n            ((totalProfit - lastProfit[account]) * balanceOf(account)) /\\n            ACCURACY;\\n        micro =\\n            ((microLotsProfits - lastMicroLotProfits[account]) *\\n                microBalance[account]) /\\n            ACCURACY;\\n    }\\n\\n    /**\\n     * @notice Used for saving the amount of accumulated\\n     * staking rewards before the staking participant's share\\n     * changes higher (buying more microlots or staking lots)\\n     * or lower (selling more microlots or staking lots).\\n     **/\\n    function saveProfits(address account) internal {\\n        (uint256 unsaved, uint256 micro) = getUnsavedProfits(account);\\n        lastProfit[account] = totalProfit;\\n        lastMicroLotProfits[account] = microLotsProfits;\\n        savedProfit[account] += unsaved;\\n        savedProfit[account] += micro;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256\\n    ) internal override {\\n        if (from != address(0)) saveProfits(from);\\n        if (to != address(0)) saveProfits(to);\\n        if (\\n            lastBoughtTimestamp[from] + classicLockupPeriod > block.timestamp &&\\n            lastBoughtTimestamp[from] > lastBoughtTimestamp[to]\\n        ) {\\n            require(\\n                !_revertTransfersInLockUpPeriod[to],\\n                \\\"The recipient does not agree to accept the locked funds\\\"\\n            );\\n            lastBoughtTimestamp[to] = lastBoughtTimestamp[from];\\n        }\\n    }\\n\\n    /**\\n     * @notice Used for distributing the staking rewards\\n     * among the microlots and staking lots holders.\\n     **/\\n    function distributeUnrealizedRewards() external override {\\n        uint256 amount = token.balanceOf(address(this)) - realisedBalance;\\n        realisedBalance += amount;\\n        uint256 _totalSupply = totalSupply();\\n        if (microLotsTotal + _totalSupply > 0) {\\n            if (microLotsTotal == 0) {\\n                totalProfit += (amount * ACCURACY) / _totalSupply;\\n            } else if (_totalSupply == 0) {\\n                microLotsProfits += (amount * ACCURACY) / microLotsTotal;\\n            } else {\\n                uint256 microAmount = amount / 5;\\n                uint256 baseAmount = amount - microAmount;\\n                microLotsProfits += (microAmount * ACCURACY) / microLotsTotal;\\n                totalProfit += (baseAmount * ACCURACY) / _totalSupply;\\n            }\\n            emit Profit(amount);\\n        }\\n    }\\n\\n    modifier lockupFree {\\n        require(\\n            lastBoughtTimestamp[msg.sender] + classicLockupPeriod <=\\n                block.timestamp,\\n            \\\"The action is suspended due to the lockup\\\"\\n        );\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Options/OptionsManager.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2021 Hegic Protocol\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport \\\"../Interfaces/IOptionsManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @author 0mllwntrmt3\\n * @title Hegic Protocol V8888 Options Manager Contract\\n * @notice The contract that buys the options contracts for the options holders\\n * as well as checks whether the contract that is used for buying/exercising\\n * options has been been granted with the permission to do it on the user's behalf.\\n **/\\n\\ncontract OptionsManager is\\n    IOptionsManager,\\n    ERC721(\\\"Hegic V8888 Options (Tokenized)\\\", \\\"HOT8888\\\"),\\n    AccessControl\\n{\\n    bytes32 public constant HEGIC_POOL_ROLE = keccak256(\\\"HEGIC_POOL_ROLE\\\");\\n    uint256 public nextTokenId = 0;\\n    mapping(uint256 => address) public override tokenPool;\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @dev See EIP-165: ERC-165 Standard Interface Detection\\n     * https://eips.ethereum.org/EIPS/eip-165\\n     **/\\n    function createOptionFor(address holder)\\n        public\\n        override\\n        onlyRole(HEGIC_POOL_ROLE)\\n        returns (uint256 id)\\n    {\\n        id = nextTokenId++;\\n        tokenPool[id] = msg.sender;\\n        _safeMint(holder, id);\\n    }\\n\\n    /**\\n     * @dev See EIP-165: ERC-165 Standard Interface Detection\\n     * https://eips.ethereum.org/EIPS/eip-165\\n     **/\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721, AccessControl, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IOptionsManager).interfaceId ||\\n            AccessControl.supportsInterface(interfaceId) ||\\n            ERC721.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Used for checking whether the user has approved\\n     * the contract to buy/exercise the options on her behalf.\\n     * @param spender The address of the contract\\n     * that is used for exercising the options\\n     * @param tokenId The ERC721 token ID that is linked to the option\\n     **/\\n    function isApprovedOrOwner(address spender, uint256 tokenId)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(owner, spender));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Pool/HegicPool.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2021 Hegic Protocol\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport \\\"../Interfaces/Interfaces.sol\\\";\\nimport \\\"../Interfaces/IOptionsManager.sol\\\";\\nimport \\\"../Interfaces/Interfaces.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @author 0mllwntrmt3\\n * @title Hegic Protocol V8888 Main Pool Contract\\n * @notice One of the main contracts that manages the pools and the options parameters,\\n * accumulates the funds from the liquidity providers and makes the withdrawals for them,\\n * sells the options contracts to the options buyers and collateralizes them,\\n * exercises the ITM (in-the-money) options with the unrealized P&L and settles them,\\n * unlocks the expired options and distributes the premiums among the liquidity providers.\\n **/\\nabstract contract HegicPool is\\n    IHegicPool,\\n    ERC721,\\n    AccessControl,\\n    ReentrancyGuard\\n{\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant INITIAL_RATE = 1e20;\\n    IOptionsManager public immutable optionsManager;\\n    AggregatorV3Interface public immutable priceProvider;\\n    IPriceCalculator public override pricer;\\n    uint256 public lockupPeriodForHedgedTranches = 60 days;\\n    uint256 public lockupPeriodForUnhedgedTranches = 30 days;\\n    uint256 public hedgeFeeRate = 80;\\n    uint256 public maxUtilizationRate = 80;\\n    uint256 public collateralizationRatio = 50;\\n    uint256 public override lockedAmount;\\n    uint256 public maxDepositAmount = type(uint256).max;\\n    uint256 public maxHedgedDepositAmount = type(uint256).max;\\n\\n    uint256 public unhedgedShare = 0;\\n    uint256 public hedgedShare = 0;\\n    uint256 public override unhedgedBalance = 0;\\n    uint256 public override hedgedBalance = 0;\\n    IHegicStaking public settlementFeeRecipient;\\n    address public hedgePool;\\n\\n    Tranche[] public override tranches;\\n    mapping(uint256 => Option) public override options;\\n    IERC20 public override token;\\n\\n    constructor(\\n        IERC20 _token,\\n        string memory name,\\n        string memory symbol,\\n        IOptionsManager manager,\\n        IPriceCalculator _pricer,\\n        IHegicStaking _settlementFeeRecipient,\\n        AggregatorV3Interface _priceProvider\\n    ) ERC721(name, symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        priceProvider = _priceProvider;\\n        settlementFeeRecipient = _settlementFeeRecipient;\\n        pricer = _pricer;\\n        token = _token;\\n        hedgePool = _msgSender();\\n        optionsManager = manager;\\n    }\\n\\n    /**\\n     * @notice Used for setting the liquidity lock-up periods during which\\n     * the liquidity providers who deposited the funds into the pools contracts\\n     * won't be able to withdraw them. Note that different lock-ups could\\n     * be set for the hedged and unhedged — classic — liquidity tranches.\\n     * @param hedgedValue Hedged liquidity tranches lock-up in seconds\\n     * @param unhedgedValue Unhedged (classic) liquidity tranches lock-up in seconds\\n     **/\\n    function setLockupPeriod(uint256 hedgedValue, uint256 unhedgedValue)\\n        external\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            hedgedValue <= 60 days,\\n            \\\"The lockup period for hedged tranches is too long\\\"\\n        );\\n        require(\\n            unhedgedValue <= 30 days,\\n            \\\"The lockup period for unhedged tranches is too long\\\"\\n        );\\n        lockupPeriodForHedgedTranches = hedgedValue;\\n        lockupPeriodForUnhedgedTranches = unhedgedValue;\\n    }\\n\\n    /**\\n     * @notice Used for setting the total maximum amount\\n     * that could be deposited into the pools contracts.\\n     * Note that different total maximum amounts could be set\\n     * for the hedged and unhedged — classic — liquidity tranches.\\n     * @param total Maximum amount of assets in the pool\\n     * in hedged and unhedged (classic) liquidity tranches combined\\n     * @param hedged Maximum amount of assets in the pool\\n     * in hedged liquidity tranches only\\n     **/\\n    function setMaxDepositAmount(uint256 total, uint256 hedged)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            total >= hedged,\\n            \\\"Pool Error: The total amount shouldn't be lower than the hedged amount\\\"\\n        );\\n        maxDepositAmount = total;\\n        maxHedgedDepositAmount = hedged;\\n    }\\n\\n    /**\\n     * @notice Used for setting the maximum share of the pool\\n     * size that could be utilized as a collateral in the options.\\n     *\\n     * Example: if `MaxUtilizationRate` = 50, then only 50%\\n     * of liquidity on the pools contracts would be used for\\n     * collateralizing options while 50% will be sitting idle\\n     * available for withdrawals by the liquidity providers.\\n     * @param value The utilization ratio in a range of 50% — 100%\\n     **/\\n    function setMaxUtilizationRate(uint256 value)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            50 <= value && value <= 100,\\n            \\\"Pool error: Wrong utilization rate limitation value\\\"\\n        );\\n        maxUtilizationRate = value;\\n    }\\n\\n    /**\\n     * @notice Used for setting the collateralization ratio for the option\\n     * collateral size that will be locked at the moment of buying them.\\n     *\\n     * Example: if `CollateralizationRatio` = 50, then 50% of an option's\\n     * notional size will be locked in the pools at the moment of buying it:\\n     * say, 1 ETH call option will be collateralized with 0.5 ETH (50%).\\n     * Note that if an option holder's net P&L USD value (as options\\n     * are cash-settled) will exceed the amount of the collateral locked\\n     * in the option, she will receive the required amount at the moment\\n     * of exercising the option using the pool's unutilized (unlocked) funds.\\n     * @param value The collateralization ratio in a range of 30% — 100%\\n     **/\\n    function setCollateralizationRatio(uint256 value)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(\\n            30 <= value && value <= 100,\\n            \\\"Pool Error: Wrong collateralization ratio value\\\"\\n        );\\n        collateralizationRatio = value;\\n    }\\n\\n    /**\\n     * @dev See EIP-165: ERC-165 Standard Interface Detection\\n     * https://eips.ethereum.org/EIPS/eip-165.\\n     **/\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721, AccessControl, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IHegicPool).interfaceId ||\\n            AccessControl.supportsInterface(interfaceId) ||\\n            ERC721.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Used for changing the hedging pool address\\n     * that will be accumulating the hedging premiums paid\\n     * as a share of the total premium redirected to this address.\\n     * @param value The address for receiving hedging premiums\\n     **/\\n    function setHedgePool(address value)\\n        external\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(value != address(0));\\n        hedgePool = value;\\n    }\\n\\n    /**\\n     * @notice Used for selling the options contracts\\n     * with the parameters chosen by the option buyer\\n     * such as the period of holding, option size (amount),\\n     * strike price and the premium to be paid for the option.\\n     * @param holder The option buyer address\\n     * @param period The option period\\n     * @param amount The option size\\n     * @param strike The option strike\\n     * @return id ID of ERC721 token linked to the option\\n     **/\\n    function sellOption(\\n        address holder,\\n        uint256 period,\\n        uint256 amount,\\n        uint256 strike\\n    ) external override returns (uint256 id) {\\n        if (strike == 0) strike = _currentPrice();\\n        uint256 balance = totalBalance();\\n        uint256 amountToBeLocked = _calculateLockedAmount(amount);\\n\\n        require(period >= 1 days, \\\"Pool Error: The period is too short\\\");\\n        require(period <= 90 days, \\\"Pool Error: The period is too long\\\");\\n        require(\\n            (lockedAmount + amountToBeLocked) * 100 <=\\n                balance * maxUtilizationRate,\\n            \\\"Pool Error: The amount is too large\\\"\\n        );\\n\\n        (uint256 settlementFee, uint256 premium) =\\n            _calculateTotalPremium(period, amount, strike);\\n        uint256 hedgedPremiumTotal = (premium * hedgedBalance) / balance;\\n        uint256 hedgeFee = (hedgedPremiumTotal * hedgeFeeRate) / 100;\\n        uint256 hedgePremium = hedgedPremiumTotal - hedgeFee;\\n        uint256 unhedgePremium = premium - hedgedPremiumTotal;\\n\\n        lockedAmount += amountToBeLocked;\\n        id = optionsManager.createOptionFor(holder);\\n        options[id] = Option(\\n            OptionState.Active,\\n            strike,\\n            amount,\\n            amountToBeLocked,\\n            block.timestamp + period,\\n            hedgePremium,\\n            unhedgePremium\\n        );\\n\\n        token.safeTransferFrom(\\n            _msgSender(),\\n            address(this),\\n            premium + settlementFee\\n        );\\n        token.safeTransfer(address(settlementFeeRecipient), settlementFee);\\n        settlementFeeRecipient.distributeUnrealizedRewards();\\n        if (hedgeFee > 0) token.safeTransfer(hedgePool, hedgeFee);\\n        emit Acquired(id, settlementFee, premium);\\n    }\\n\\n    /**\\n     * @notice Used for setting the price calculator\\n     * contract that will be used for pricing the options.\\n     * @param pc A new price calculator contract address\\n     **/\\n    function setPriceCalculator(IPriceCalculator pc)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        pricer = pc;\\n    }\\n\\n    /**\\n     * @notice Used for exercising the ITM (in-the-money)\\n     * options contracts in case of having the unrealized profits\\n     * accrued during the period of holding the option contract.\\n     * @param id ID of ERC721 token linked to the option\\n     **/\\n    function exercise(uint256 id) external override {\\n        Option storage option = options[id];\\n        uint256 profit = _profitOf(option);\\n        require(\\n            optionsManager.isApprovedOrOwner(_msgSender(), id),\\n            \\\"Pool Error: msg.sender can't exercise this option\\\"\\n        );\\n        require(\\n            option.expired > block.timestamp,\\n            \\\"Pool Error: The option has already expired\\\"\\n        );\\n        require(\\n            profit > 0,\\n            \\\"Pool Error: There are no unrealized profits for this option\\\"\\n        );\\n        _unlock(option);\\n        option.state = OptionState.Exercised;\\n        _send(optionsManager.ownerOf(id), profit);\\n        emit Exercised(id, profit);\\n    }\\n\\n    function _send(address to, uint256 transferAmount) private {\\n        require(to != address(0));\\n        uint256 hedgeLoss = (transferAmount * hedgedBalance) / totalBalance();\\n        uint256 unhedgeLoss = transferAmount - hedgeLoss;\\n        hedgedBalance -= hedgeLoss;\\n        unhedgedBalance -= unhedgeLoss;\\n        token.safeTransfer(to, transferAmount);\\n    }\\n\\n    /**\\n     * @notice Used for unlocking the expired OTM (out-of-the-money)\\n     * options contracts in case if there was no unrealized P&L\\n     * accrued during the period of holding a particular option.\\n     * Note that the `unlock` function releases the liquidity that\\n     * was locked in the option when it was active and the premiums\\n     * that are distributed pro rata among the liquidity providers.\\n     * @param id ID of ERC721 token linked to the option\\n     **/\\n    function unlock(uint256 id) external override {\\n        Option storage option = options[id];\\n        require(\\n            option.expired < block.timestamp,\\n            \\\"Pool Error: The option has not expired yet\\\"\\n        );\\n        _unlock(option);\\n        option.state = OptionState.Expired;\\n        emit Expired(id);\\n    }\\n\\n    function _unlock(Option storage option) internal {\\n        require(\\n            option.state == OptionState.Active,\\n            \\\"Pool Error: The option with such an ID has already been exercised or expired\\\"\\n        );\\n        lockedAmount -= option.lockedAmount;\\n        hedgedBalance += option.hedgePremium;\\n        unhedgedBalance += option.unhedgePremium;\\n    }\\n\\n    function _calculateLockedAmount(uint256 amount)\\n        internal\\n        virtual\\n        returns (uint256)\\n    {\\n        return (amount * collateralizationRatio) / 100;\\n    }\\n\\n    /**\\n     * @notice Used for depositing the funds into the pool\\n     * and minting the liquidity tranche ERC721 token\\n     * which represents the liquidity provider's share\\n     * in the pool and her unrealized P&L for this tranche.\\n     * @param account The liquidity provider's address\\n     * @param amount The size of the liquidity tranche\\n     * @param hedged The type of the liquidity tranche\\n     * @param minShare The minimum share in the pool for the user\\n     **/\\n    function provideFrom(\\n        address account,\\n        uint256 amount,\\n        bool hedged,\\n        uint256 minShare\\n    ) external override nonReentrant returns (uint256 share) {\\n        uint256 totalShare = hedged ? hedgedShare : unhedgedShare;\\n        uint256 balance = hedged ? hedgedBalance : unhedgedBalance;\\n        share = totalShare > 0 && balance > 0\\n            ? (amount * totalShare) / balance\\n            : amount * INITIAL_RATE;\\n        uint256 limit =\\n            hedged\\n                ? maxHedgedDepositAmount - hedgedBalance\\n                : maxDepositAmount - hedgedBalance - unhedgedBalance;\\n        require(share >= minShare, \\\"Pool Error: The mint limit is too large\\\");\\n        require(share > 0, \\\"Pool Error: The amount is too small\\\");\\n        require(\\n            amount <= limit,\\n            \\\"Pool Error: Depositing into the pool is not available\\\"\\n        );\\n\\n        if (hedged) {\\n            hedgedShare += share;\\n            hedgedBalance += amount;\\n        } else {\\n            unhedgedShare += share;\\n            unhedgedBalance += amount;\\n        }\\n\\n        uint256 trancheID = tranches.length;\\n        tranches.push(\\n            Tranche(TrancheState.Open, share, amount, block.timestamp, hedged)\\n        );\\n        _safeMint(account, trancheID);\\n        token.safeTransferFrom(_msgSender(), address(this), amount);\\n    }\\n\\n    /**\\n     * @notice Used for withdrawing the funds from the pool\\n     * plus the net positive P&L earned or\\n     * minus the net negative P&L lost on\\n     * providing liquidity and selling options.\\n     * @param trancheID The liquidity tranche ID\\n     * @return amount The amount received after the withdrawal\\n     **/\\n    function withdraw(uint256 trancheID)\\n        external\\n        override\\n        nonReentrant\\n        returns (uint256 amount)\\n    {\\n        address owner = ownerOf(trancheID);\\n        Tranche memory t = tranches[trancheID];\\n        amount = _withdraw(owner, trancheID);\\n        if (t.hedged && amount < t.amount) {\\n            token.safeTransferFrom(hedgePool, owner, t.amount - amount);\\n            amount = t.amount;\\n        }\\n        emit Withdrawn(owner, trancheID, amount);\\n    }\\n\\n    /**\\n     * @notice Used for withdrawing the funds from the pool\\n     * by the hedged liquidity tranches providers\\n     * in case of an urgent need to withdraw the liquidity\\n     * without receiving the loss compensation from\\n     * the hedging pool: the net difference between\\n     * the amount deposited and the withdrawal amount.\\n     * @param trancheID ID of liquidity tranche\\n     * @return amount The amount received after the withdrawal\\n     **/\\n    function withdrawWithoutHedge(uint256 trancheID)\\n        external\\n        override\\n        nonReentrant\\n        returns (uint256 amount)\\n    {\\n        address owner = ownerOf(trancheID);\\n        amount = _withdraw(owner, trancheID);\\n        emit Withdrawn(owner, trancheID, amount);\\n    }\\n\\n    function _withdraw(address owner, uint256 trancheID)\\n        internal\\n        returns (uint256 amount)\\n    {\\n        Tranche storage t = tranches[trancheID];\\n        uint256 lockupPeriod =\\n            t.hedged\\n                ? lockupPeriodForHedgedTranches\\n                : lockupPeriodForUnhedgedTranches;\\n        require(t.state == TrancheState.Open);\\n        require(_isApprovedOrOwner(_msgSender(), trancheID));\\n        require(\\n            block.timestamp > t.creationTimestamp + lockupPeriod,\\n            \\\"Pool Error: The withdrawal is locked up\\\"\\n        );\\n\\n        t.state = TrancheState.Closed;\\n        if (t.hedged) {\\n            amount = (t.share * hedgedBalance) / hedgedShare;\\n            hedgedShare -= t.share;\\n            hedgedBalance -= amount;\\n        } else {\\n            amount = (t.share * unhedgedBalance) / unhedgedShare;\\n            unhedgedShare -= t.share;\\n            unhedgedBalance -= amount;\\n        }\\n\\n        token.safeTransfer(owner, amount);\\n    }\\n\\n    /**\\n     * @return balance Returns the amount of liquidity available for withdrawing\\n     **/\\n    function availableBalance() public view returns (uint256 balance) {\\n        return totalBalance() - lockedAmount;\\n    }\\n\\n    /**\\n     * @return balance Returns the total balance of liquidity provided to the pool\\n     **/\\n    function totalBalance() public view override returns (uint256 balance) {\\n        return hedgedBalance + unhedgedBalance;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address,\\n        address,\\n        uint256 id\\n    ) internal view override {\\n        require(\\n            tranches[id].state == TrancheState.Open,\\n            \\\"Pool Error: The closed tranches can not be transferred\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns the amount of unrealized P&L of the option\\n     * that could be received by the option holder in case\\n     * if she exercises it as an ITM (in-the-money) option.\\n     * @param id ID of ERC721 token linked to the option\\n     **/\\n    function profitOf(uint256 id) external view returns (uint256) {\\n        return _profitOf(options[id]);\\n    }\\n\\n    function _profitOf(Option memory option)\\n        internal\\n        view\\n        virtual\\n        returns (uint256 amount);\\n\\n    /**\\n     * @notice Used for calculating the `TotalPremium`\\n     * for the particular option with regards to\\n     * the parameters chosen by the option buyer\\n     * such as the period of holding, size (amount)\\n     * and strike price.\\n     * @param period The period of holding the option\\n     * @param period The size of the option\\n     **/\\n    function calculateTotalPremium(\\n        uint256 period,\\n        uint256 amount,\\n        uint256 strike\\n    ) external view override returns (uint256 settlementFee, uint256 premium) {\\n        return _calculateTotalPremium(period, amount, strike);\\n    }\\n\\n    function _calculateTotalPremium(\\n        uint256 period,\\n        uint256 amount,\\n        uint256 strike\\n    ) internal view virtual returns (uint256 settlementFee, uint256 premium) {\\n        (settlementFee, premium) = pricer.calculateTotalPremium(\\n            period,\\n            amount,\\n            strike\\n        );\\n        require(\\n            settlementFee + premium > amount / 1000,\\n            \\\"HegicPool: The option's price is too low\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Used for changing the `settlementFeeRecipient`\\n     * contract address for distributing the settlement fees\\n     * (staking rewards) among the staking participants.\\n     * @param recipient New staking contract address\\n     **/\\n    function setSettlementFeeRecipient(IHegicStaking recipient)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(address(recipient) != address(0));\\n        settlementFeeRecipient = recipient;\\n    }\\n\\n    function _currentPrice() internal view returns (uint256 price) {\\n        (, int256 latestPrice, , , ) = priceProvider.latestRoundData();\\n        price = uint256(latestPrice);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Pool/HegicPut.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2021 Hegic Protocol\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport \\\"./HegicPool.sol\\\";\\n\\n/**\\n * @author 0mllwntrmt3\\n * @title Hegic Protocol V8888 Put Liquidity Pool Contract\\n * @notice The Put Liquidity Pool Contract\\n **/\\n\\ncontract HegicPUT is HegicPool {\\n    uint256 private immutable SpotDecimals; // 1e18\\n    uint256 private constant TokenDecimals = 1e6; // 1e6\\n\\n    /**\\n     * @param name The pool contract name\\n     * @param symbol The pool ticker for the ERC721 options\\n     **/\\n\\n    constructor(\\n        IERC20 _token,\\n        string memory name,\\n        string memory symbol,\\n        IOptionsManager manager,\\n        IPriceCalculator _pricer,\\n        IHegicStaking _settlementFeeRecipient,\\n        AggregatorV3Interface _priceProvider,\\n        uint8 spotDecimals\\n    )\\n        HegicPool(\\n            _token,\\n            name,\\n            symbol,\\n            manager,\\n            _pricer,\\n            _settlementFeeRecipient,\\n            _priceProvider\\n        )\\n    {\\n        SpotDecimals = 10**spotDecimals;\\n    }\\n\\n    function _profitOf(Option memory option)\\n        internal\\n        view\\n        override\\n        returns (uint256 amount)\\n    {\\n        uint256 currentPrice = _currentPrice();\\n        if (currentPrice > option.strike) return 0;\\n        return\\n            ((option.strike - currentPrice) * option.amount * TokenDecimals) /\\n            SpotDecimals /\\n            1e8;\\n    }\\n\\n    function _calculateLockedAmount(uint256 amount)\\n        internal\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            (amount *\\n                collateralizationRatio *\\n                _currentPrice() *\\n                TokenDecimals) /\\n            SpotDecimals /\\n            1e8 /\\n            100;\\n    }\\n\\n    function _calculateTotalPremium(\\n        uint256 period,\\n        uint256 amount,\\n        uint256 strike\\n    ) internal view override returns (uint256 settlementFee, uint256 premium) {\\n        uint256 currentPrice = _currentPrice();\\n        (settlementFee, premium) = pricer.calculateTotalPremium(\\n            period,\\n            amount,\\n            strike\\n        );\\n        settlementFee =\\n            (settlementFee * currentPrice * TokenDecimals) /\\n            1e8 /\\n            SpotDecimals;\\n        premium = (premium * currentPrice * TokenDecimals) / 1e8 / SpotDecimals;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Facade/Facade.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2021 Hegic Protocol\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport \\\"../Interfaces/Interfaces.sol\\\";\\nimport \\\"../Interfaces/IOptionsManager.sol\\\";\\n\\n/**\\n * @author 0mllwntrmt3\\n * @title Hegic Protocol V8888 Facade Contract\\n * @notice The contract that calculates the options prices,\\n * conducts the process of buying options, converts the premiums\\n * into the token that the pool is denominated in and grants\\n * permissions to the contracts such as GSN (Gas Station Network).\\n **/\\n\\ncontract Facade is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    IWETH public immutable WETH;\\n    IUniswapV2Router01 public immutable exchange;\\n    IOptionsManager public immutable optionsManager;\\n    address public _trustedForwarder;\\n\\n    constructor(\\n        IWETH weth,\\n        IUniswapV2Router01 router,\\n        IOptionsManager manager,\\n        address trustedForwarder\\n    ) {\\n        WETH = weth;\\n        exchange = router;\\n        _trustedForwarder = trustedForwarder;\\n        optionsManager = manager;\\n    }\\n\\n    /**\\n     * @notice Used for calculating the option price (the premium) and using\\n     * the swap router (if needed) to convert the tokens with which the user\\n     * pays the premium into the token in which the pool is denominated.\\n     * @param period The option period\\n     * @param amount The option size\\n     * @param strike The option strike\\n     * @param total The total premium\\n     * @param baseTotal The part of the premium that\\n     * is distributed among the liquidity providers\\n     * @param settlementFee The part of the premium that\\n     * is distributed among the HEGIC staking participants\\n     **/\\n    function getOptionPrice(\\n        IHegicPool pool,\\n        uint256 period,\\n        uint256 amount,\\n        uint256 strike,\\n        address[] calldata swappath\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 baseTotal,\\n            uint256 settlementFee,\\n            uint256 premium\\n        )\\n    {\\n        (uint256 _baseTotal, uint256 baseSettlementFee, uint256 basePremium) =\\n            getBaseOptionCost(pool, period, amount, strike);\\n        if (swappath.length > 1)\\n            total = exchange.getAmountsIn(_baseTotal, swappath)[0];\\n        else total = _baseTotal;\\n\\n        baseTotal = _baseTotal;\\n        settlementFee = (total * baseSettlementFee) / baseTotal;\\n        premium = (total * basePremium) / baseTotal;\\n    }\\n\\n    /**\\n     * @notice Used for calculating the option price (the premium)\\n     * in the token in which the pool is denominated.\\n     * @param period The option period\\n     * @param amount The option size\\n     * @param strike The option strike\\n     **/\\n    function getBaseOptionCost(\\n        IHegicPool pool,\\n        uint256 period,\\n        uint256 amount,\\n        uint256 strike\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 total,\\n            uint256 settlementFee,\\n            uint256 premium\\n        )\\n    {\\n        (settlementFee, premium) = pool.calculateTotalPremium(\\n            period,\\n            amount,\\n            strike\\n        );\\n        total = premium + settlementFee;\\n    }\\n\\n    /**\\n     * @notice Used for approving the pools contracts addresses.\\n     **/\\n    function poolApprove(IHegicPool pool) external {\\n        pool.token().safeApprove(address(pool), 0);\\n        pool.token().safeApprove(address(pool), type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Used for buying the option contract and converting\\n     * the buyer's tokens (the total premium) into the token\\n     * in which the pool is denominated.\\n     * @param period The option period\\n     * @param amount The option size\\n     * @param strike The option strike\\n     * @param acceptablePrice The highest acceptable price\\n     **/\\n    function createOption(\\n        IHegicPool pool,\\n        uint256 period,\\n        uint256 amount,\\n        uint256 strike,\\n        address[] calldata swappath,\\n        uint256 acceptablePrice\\n    ) external payable {\\n        address buyer = _msgSender();\\n        (uint256 optionPrice, uint256 rawOptionPrice, , ) =\\n            getOptionPrice(pool, period, amount, strike, swappath);\\n        require(\\n            optionPrice <= acceptablePrice,\\n            \\\"Facade Error: The option price is too high\\\"\\n        );\\n        IERC20 paymentToken = IERC20(swappath[0]);\\n        paymentToken.safeTransferFrom(buyer, address(this), optionPrice);\\n        if (swappath.length > 1) {\\n            if (\\n                paymentToken.allowance(address(this), address(exchange)) <\\n                optionPrice\\n            ) {\\n                paymentToken.safeApprove(address(exchange), 0);\\n                paymentToken.safeApprove(address(exchange), type(uint256).max);\\n            }\\n\\n            exchange.swapTokensForExactTokens(\\n                rawOptionPrice,\\n                optionPrice,\\n                swappath,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n        pool.sellOption(buyer, period, amount, strike);\\n    }\\n\\n    /**\\n     * @notice Used for converting the liquidity provider's Ether (ETH)\\n     * into Wrapped Ether (WETH) and providing the funds into the pool.\\n     * @param hedged The liquidity tranche type: hedged or unhedged (classic)\\n     **/\\n    function provideEthToPool(\\n        IHegicPool pool,\\n        bool hedged,\\n        uint256 minShare\\n    ) external payable returns (uint256) {\\n        WETH.deposit{value: msg.value}();\\n        if (WETH.allowance(address(this), address(pool)) < msg.value)\\n            WETH.approve(address(pool), type(uint256).max);\\n        return pool.provideFrom(msg.sender, msg.value, hedged, minShare);\\n    }\\n\\n    /**\\n     * @notice Unlocks the array of options.\\n     * @param optionIDs The array of options\\n     **/\\n    function unlockAll(IHegicPool pool, uint256[] calldata optionIDs) external {\\n        uint256 arrayLength = optionIDs.length;\\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            pool.unlock(optionIDs[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Used for granting the GSN (Gas Station Network) contract\\n     * the permission to pay the gas (transaction) fees for the users.\\n     * @param forwarder GSN (Gas Station Network) contract address\\n     **/\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function claimAllStakingProfits(\\n        IHegicStaking[] calldata stakings,\\n        address account\\n    ) external {\\n        uint256 arrayLength = stakings.length;\\n        for (uint256 i = 0; i < arrayLength; i++) {\\n            IHegicStaking s = stakings[i];\\n            if (s.profitOf(account) > 0) s.claimProfits(account);\\n        }\\n    }\\n\\n    function _msgSender() internal view override returns (address signer) {\\n        signer = msg.sender;\\n        if (msg.data.length >= 20 && isTrustedForwarder(signer)) {\\n            assembly {\\n                signer := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        }\\n    }\\n\\n    function exercise(uint256 optionId) external {\\n        require(\\n            optionsManager.isApprovedOrOwner(_msgSender(), optionId),\\n            \\\"Facade Error: _msgSender is not eligible to exercise the option\\\"\\n        );\\n        IHegicPool(optionsManager.tokenPool(optionId)).exercise(optionId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Pool/HegicCall.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2021 Hegic Protocol\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport \\\"./HegicPool.sol\\\";\\n\\n/**\\n * @author 0mllwntrmt3\\n * @title Hegic Protocol V8888 Call Liquidity Pool Contract\\n * @notice The Call Liquidity Pool Contract\\n **/\\ncontract HegicCALL is HegicPool {\\n    /**\\n     * @param name The pool contract name\\n     * @param symbol The pool ticker for the ERC721 options\\n     **/\\n    constructor(\\n        IERC20 _token,\\n        string memory name,\\n        string memory symbol,\\n        IOptionsManager manager,\\n        IPriceCalculator _pricer,\\n        IHegicStaking _settlementFeeRecipient,\\n        AggregatorV3Interface _priceProvider\\n    )\\n        HegicPool(\\n            _token,\\n            name,\\n            symbol,\\n            manager,\\n            _pricer,\\n            _settlementFeeRecipient,\\n            _priceProvider\\n        )\\n    {}\\n\\n    function _profitOf(Option memory option)\\n        internal\\n        view\\n        override\\n        returns (uint256 amount)\\n    {\\n        uint256 currentPrice = _currentPrice();\\n        if (currentPrice < option.strike) return 0;\\n        return ((currentPrice - option.strike) * option.amount) / currentPrice;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Mocks/ERC20Mock.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2021 Hegic\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract ERC20Mock is ERC20 {\\n    uint8 private immutable _decimals;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 __decimals\\n    ) ERC20(\\\"token\\\", \\\"symbol\\\") {\\n        _decimals = __decimals;\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function mintTo(address account, uint256 amount) public {\\n        _mint(account, amount);\\n    }\\n\\n    function mint(uint256 amount) public {\\n        _mint(msg.sender, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Mocks/WETH.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2021 Hegic\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport \\\"./ERC20Mock.sol\\\";\\n\\ncontract WETHMock is ERC20Mock(\\\"WETH\\\", \\\"Wrapped Ether\\\", 18) {\\n    function deposit() external payable {\\n        _mint(msg.sender, msg.value);\\n    }\\n\\n    function withdraw(uint256 amount) external {\\n        _burn(msg.sender, amount);\\n        payable(msg.sender).transfer(amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Mocks/UniswapRouterMock.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2021 Hegic\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport \\\"./ERC20Mock.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract UniswapRouterMock {\\n    ERC20Mock public immutable WBTC;\\n    ERC20Mock public immutable USDC;\\n    AggregatorV3Interface public immutable WBTCPriceProvider;\\n    AggregatorV3Interface public immutable ETHPriceProvider;\\n\\n    constructor(\\n        ERC20Mock _wbtc,\\n        ERC20Mock _usdc,\\n        AggregatorV3Interface wpp,\\n        AggregatorV3Interface epp\\n    ) {\\n        WBTC = _wbtc;\\n        USDC = _usdc;\\n        WBTCPriceProvider = wpp;\\n        ETHPriceProvider = epp;\\n    }\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 /*deadline*/\\n    ) external payable returns (uint256[] memory amounts) {\\n        require(path.length == 2, \\\"UniswapMock: wrong path\\\");\\n        require(\\n            path[1] == address(USDC) || path[1] == address(WBTC),\\n            \\\"UniswapMock: too small value\\\"\\n        );\\n        amounts = getAmountsIn(amountOut, path);\\n        require(msg.value >= amounts[0], \\\"UniswapMock: too small value\\\");\\n        if (msg.value > amounts[0])\\n            payable(msg.sender).transfer(msg.value - amounts[0]);\\n        ERC20Mock(path[1]).mintTo(to, amountOut);\\n    }\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        public\\n        view\\n        returns (uint256[] memory amounts)\\n    {\\n        require(path.length == 2, \\\"UniswapMock: wrong path\\\");\\n        uint256 amount;\\n        if (path[1] == address(USDC)) {\\n            (, int256 ethPrice, , , ) = ETHPriceProvider.latestRoundData();\\n            amount = (amountOut * 1e8) / uint256(ethPrice);\\n        } else if (path[1] == address(WBTC)) {\\n            (, int256 ethPrice, , , ) = ETHPriceProvider.latestRoundData();\\n            (, int256 wbtcPrice, , , ) = WBTCPriceProvider.latestRoundData();\\n            amount = (amountOut * uint256(wbtcPrice)) / uint256(ethPrice);\\n        } else {\\n            revert(\\\"UniswapMock: wrong path\\\");\\n        }\\n        amounts = new uint256[](2);\\n        amounts[0] = (amount * 103) / 100;\\n        amounts[1] = amountOut;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Options/PriceCalculator.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2021 Hegic Protocol\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport \\\"../Interfaces/Interfaces.sol\\\";\\nimport \\\"../utils/Math.sol\\\";\\n\\n/**\\n * @author 0mllwntrmt3\\n * @title Hegic Protocol V8888 Price Calculator Contract\\n * @notice The contract that calculates the options prices (the premiums)\\n * that are adjusted through the `ImpliedVolRate` parameter.\\n **/\\n\\ncontract PriceCalculator is IPriceCalculator, Ownable {\\n    using HegicMath for uint256;\\n\\n    uint256 public impliedVolRate;\\n    uint256 internal constant PRICE_DECIMALS = 1e8;\\n    uint256 internal constant PRICE_MODIFIER_DECIMALS = 1e8;\\n    uint256 public utilizationRate = 0;\\n    AggregatorV3Interface public priceProvider;\\n    IHegicPool pool;\\n\\n    constructor(\\n        uint256 initialRate,\\n        AggregatorV3Interface _priceProvider,\\n        IHegicPool _pool\\n    ) {\\n        pool = _pool;\\n        priceProvider = _priceProvider;\\n        impliedVolRate = initialRate;\\n    }\\n\\n    /**\\n     * @notice Used for adjusting the options prices (the premiums)\\n     * while balancing the asset's implied volatility rate.\\n     * @param value New IVRate value\\n     **/\\n    function setImpliedVolRate(uint256 value) external onlyOwner {\\n        impliedVolRate = value;\\n    }\\n\\n    /**\\n     * @notice Used for updating utilizationRate value\\n     * @param value New utilizationRate value\\n     **/\\n    function setUtilizationRate(uint256 value) external onlyOwner {\\n        utilizationRate = value;\\n    }\\n\\n    /**\\n     * @notice Used for calculating the options prices\\n     * @param period The option period in seconds (1 days <= period <= 90 days)\\n     * @param amount The option size\\n     * @param strike The option strike\\n     * @return settlementFee The part of the premium that\\n     * is distributed among the HEGIC staking participants\\n     * @return premium The part of the premium that\\n     * is distributed among the liquidity providers\\n     **/\\n    function calculateTotalPremium(\\n        uint256 period,\\n        uint256 amount,\\n        uint256 strike\\n    ) public view override returns (uint256 settlementFee, uint256 premium) {\\n        uint256 currentPrice = _currentPrice();\\n        if (strike == 0) strike = currentPrice;\\n        require(\\n            strike == currentPrice,\\n            \\\"Only ATM options are currently available\\\"\\n        );\\n        uint256 total = _calculatePeriodFee(amount, period);\\n        settlementFee = total / 5;\\n        premium = total - settlementFee;\\n    }\\n\\n    /**\\n     * @notice Calculates and prices in the time value of the option\\n     * @param amount Option size\\n     * @param period The option period in seconds (1 days <= period <= 90 days)\\n     * @return fee The premium size to be paid\\n     **/\\n    function _calculatePeriodFee(uint256 amount, uint256 period)\\n        internal\\n        view\\n        returns (uint256 fee)\\n    {\\n        return\\n            (amount * _priceModifier(amount, period, pool)) /\\n            PRICE_DECIMALS /\\n            PRICE_MODIFIER_DECIMALS;\\n    }\\n\\n    /**\\n     * @notice Calculates `periodFee` of the option\\n     * @param amount The option size\\n     * @param period The option period in seconds (1 days <= period <= 90 days)\\n     **/\\n    function _priceModifier(\\n        uint256 amount,\\n        uint256 period,\\n        IHegicPool pool\\n    ) internal view returns (uint256 iv) {\\n        uint256 poolBalance = pool.totalBalance();\\n        require(poolBalance > 0, \\\"Pool Error: The pool is empty\\\");\\n        iv = impliedVolRate * period.sqrt();\\n\\n        uint256 lockedAmount = pool.lockedAmount() + amount;\\n        uint256 utilization = (lockedAmount * 100e8) / poolBalance;\\n\\n        if (utilization > 40e8) {\\n            iv += (iv * (utilization - 40e8) * utilizationRate) / 40e16;\\n        }\\n    }\\n\\n    /**\\n     * @notice Used for requesting the current price of the asset\\n     * using the ChainLink data feeds contracts.\\n     * See https://feeds.chain.link/\\n     * @return price Price\\n     **/\\n    function _currentPrice() internal view returns (uint256 price) {\\n        (, int256 latestPrice, , , ) = priceProvider.latestRoundData();\\n        price = uint256(latestPrice);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Math.sol\": {\r\n      \"content\": \"pragma solidity 0.8.6;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2021 Hegic Protocol\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nlibrary HegicMath {\\n    /**\\n     * @dev Calculates a square root of the number.\\n     * Responds with an \\\"invalid opcode\\\" at uint(-1).\\n     **/\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        result = x;\\n        uint256 k = (x >> 1) + 1;\\n        while (k < result) (result, k) = (k, (x / k + k) >> 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2ERC20.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/lib/contracts/libraries/TransferHelper.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_hegic\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"short\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MicroLotsAcquired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MicroLotsSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Profit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HEGIC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_LOT_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_revertTransfersInLockUpPeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyMicroLot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyStakingLot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"classicLockupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeUnrealizedRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBoughtTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastMicroBoughtTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"microBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"microLockupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"microLotsProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"microLotsTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"profitOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"revertTransfersInLockUpPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellMicroLot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellStakingLot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProfit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HegicStaking","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000584bc13c7d411c00c01a62e8019472de687684300000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000c57425443205374616b696e67000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065742544320530000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9908360c5f827822f17d695dd790dd5c9756c700e0edc1d7bc0c3a36500e2b17"}]}