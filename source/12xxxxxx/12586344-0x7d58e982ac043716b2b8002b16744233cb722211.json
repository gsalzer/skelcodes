{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\interface\\INestPriceFacade.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.3;\r\n\r\n/// @dev This interface defines the methods for price call entry\r\ninterface INestPriceFacade {\r\n    \r\n    /// @dev Price call entry configuration structure\r\n    struct Config {\r\n\r\n        // Single query fee（0.0001 ether, DIMI_ETHER). 100\r\n        uint16 singleFee;\r\n\r\n        // Double query fee（0.0001 ether, DIMI_ETHER). 100\r\n        uint16 doubleFee;\r\n\r\n        // The normal state flag of the call address. 0\r\n        uint8 normalFlag;\r\n    }\r\n\r\n    /// @dev Modify configuration\r\n    /// @param config Configuration object\r\n    function setConfig(Config memory config) external;\r\n\r\n    /// @dev Get configuration\r\n    /// @return Configuration object\r\n    function getConfig() external view returns (Config memory);\r\n\r\n    /// @dev Set the address flag. Only the address flag equals to config.normalFlag can the price be called\r\n    /// @param addr Destination address\r\n    /// @param flag Address flag\r\n    function setAddressFlag(address addr, uint flag) external;\r\n\r\n    /// @dev Get the flag. Only the address flag equals to config.normalFlag can the price be called\r\n    /// @param addr Destination address\r\n    /// @return Address flag\r\n    function getAddressFlag(address addr) external view returns(uint);\r\n\r\n    /// @dev Set INestQuery implementation contract address for token\r\n    /// @param tokenAddress Destination token address\r\n    /// @param nestQueryAddress INestQuery implementation contract address, 0 means delete\r\n    function setNestQuery(address tokenAddress, address nestQueryAddress) external;\r\n\r\n    /// @dev Get INestQuery implementation contract address for token\r\n    /// @param tokenAddress Destination token address\r\n    /// @return INestQuery implementation contract address, 0 means use default\r\n    function getNestQuery(address tokenAddress) external view returns (address);\r\n\r\n    /// @dev Get cached fee in fee channel\r\n    /// @param tokenAddress Destination token address\r\n    /// @return Cached fee in fee channel\r\n    function getTokenFee(address tokenAddress) external view returns (uint);\r\n\r\n    /// @dev Settle fee for charge fee channel\r\n    /// @param tokenAddress tokenAddress of charge fee channel\r\n    function settle(address tokenAddress) external;\r\n    \r\n    /// @dev Get the latest trigger price\r\n    /// @param tokenAddress Destination token address\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function triggeredPrice(address tokenAddress, address paybackAddress) external payable returns (uint blockNumber, uint price);\r\n\r\n    /// @dev Get the full information of latest trigger price\r\n    /// @param tokenAddress Destination token address\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return avgPrice Average price\r\n    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    function triggeredPriceInfo(address tokenAddress, address paybackAddress) external payable returns (uint blockNumber, uint price, uint avgPrice, uint sigmaSQ);\r\n\r\n    /// @dev Find the price at block number\r\n    /// @param tokenAddress Destination token address\r\n    /// @param height Destination block number\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function findPrice(address tokenAddress, uint height, address paybackAddress) external payable returns (uint blockNumber, uint price);\r\n\r\n    /// @dev Get the latest effective price\r\n    /// @param tokenAddress Destination token address\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function latestPrice(address tokenAddress, address paybackAddress) external payable returns (uint blockNumber, uint price);\r\n\r\n    /// @dev Get the last (num) effective price\r\n    /// @param tokenAddress Destination token address\r\n    /// @param count The number of prices that want to return\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\r\n    /// @return An array which length is num * 2, each two element expresses one price like blockNumber｜price\r\n    function lastPriceList(address tokenAddress, uint count, address paybackAddress) external payable returns (uint[] memory);\r\n\r\n    /// @dev Returns the results of latestPrice() and triggeredPriceInfo()\r\n    /// @param tokenAddress Destination token address\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\r\n    /// @return latestPriceBlockNumber The block number of latest price\r\n    /// @return latestPriceValue The token latest price. (1eth equivalent to (price) token)\r\n    /// @return triggeredPriceBlockNumber The block number of triggered price\r\n    /// @return triggeredPriceValue The token triggered price. (1eth equivalent to (price) token)\r\n    /// @return triggeredAvgPrice Average price\r\n    /// @return triggeredSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    function latestPriceAndTriggeredPriceInfo(address tokenAddress, address paybackAddress) \r\n    external \r\n    payable \r\n    returns (\r\n        uint latestPriceBlockNumber, \r\n        uint latestPriceValue,\r\n        uint triggeredPriceBlockNumber,\r\n        uint triggeredPriceValue,\r\n        uint triggeredAvgPrice,\r\n        uint triggeredSigmaSQ\r\n    );\r\n\r\n    /// @dev Get the latest trigger price. (token and ntoken)\r\n    /// @param tokenAddress Destination token address\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return ntokenBlockNumber The block number of ntoken price\r\n    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    function triggeredPrice2(address tokenAddress, address paybackAddress) external payable returns (uint blockNumber, uint price, uint ntokenBlockNumber, uint ntokenPrice);\r\n\r\n    /// @dev Get the full information of latest trigger price. (token and ntoken)\r\n    /// @param tokenAddress Destination token address\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return avgPrice Average price\r\n    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447, \r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    /// @return ntokenBlockNumber The block number of ntoken price\r\n    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    /// @return ntokenAvgPrice Average price of ntoken\r\n    /// @return ntokenSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that\r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    function triggeredPriceInfo2(address tokenAddress, address paybackAddress) external payable returns (uint blockNumber, uint price, uint avgPrice, uint sigmaSQ, uint ntokenBlockNumber, uint ntokenPrice, uint ntokenAvgPrice, uint ntokenSigmaSQ);\r\n\r\n    /// @dev Get the latest effective price. (token and ntoken)\r\n    /// @param tokenAddress Destination token address\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return ntokenBlockNumber The block number of ntoken price\r\n    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    function latestPrice2(address tokenAddress, address paybackAddress) external payable returns (uint blockNumber, uint price, uint ntokenBlockNumber, uint ntokenPrice);\r\n}\r\n\r\n// File: contracts\\interface\\INestQuery.sol\r\n\r\n/// @dev This interface defines the methods for price query\r\ninterface INestQuery {\r\n    \r\n    /// @dev Get the latest trigger price\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function triggeredPrice(address tokenAddress) external view returns (uint blockNumber, uint price);\r\n\r\n    /// @dev Get the full information of latest trigger price\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return avgPrice Average price\r\n    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    function triggeredPriceInfo(address tokenAddress) external view returns (\r\n        uint blockNumber,\r\n        uint price,\r\n        uint avgPrice,\r\n        uint sigmaSQ\r\n    );\r\n\r\n    /// @dev Find the price at block number\r\n    /// @param tokenAddress Destination token address\r\n    /// @param height Destination block number\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function findPrice(\r\n        address tokenAddress,\r\n        uint height\r\n    ) external view returns (uint blockNumber, uint price);\r\n\r\n    /// @dev Get the latest effective price\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function latestPrice(address tokenAddress) external view returns (uint blockNumber, uint price);\r\n\r\n    /// @dev Get the last (num) effective price\r\n    /// @param tokenAddress Destination token address\r\n    /// @param count The number of prices that want to return\r\n    /// @return An array which length is num * 2, each two element expresses one price like blockNumber｜price\r\n    function lastPriceList(address tokenAddress, uint count) external view returns (uint[] memory);\r\n\r\n    /// @dev Returns the results of latestPrice() and triggeredPriceInfo()\r\n    /// @param tokenAddress Destination token address\r\n    /// @return latestPriceBlockNumber The block number of latest price\r\n    /// @return latestPriceValue The token latest price. (1eth equivalent to (price) token)\r\n    /// @return triggeredPriceBlockNumber The block number of triggered price\r\n    /// @return triggeredPriceValue The token triggered price. (1eth equivalent to (price) token)\r\n    /// @return triggeredAvgPrice Average price\r\n    /// @return triggeredSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    function latestPriceAndTriggeredPriceInfo(address tokenAddress) external view \r\n    returns (\r\n        uint latestPriceBlockNumber,\r\n        uint latestPriceValue,\r\n        uint triggeredPriceBlockNumber,\r\n        uint triggeredPriceValue,\r\n        uint triggeredAvgPrice,\r\n        uint triggeredSigmaSQ\r\n    );\r\n\r\n    /// @dev Get the latest trigger price. (token and ntoken)\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return ntokenBlockNumber The block number of ntoken price\r\n    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    function triggeredPrice2(address tokenAddress) external view returns (\r\n        uint blockNumber,\r\n        uint price,\r\n        uint ntokenBlockNumber,\r\n        uint ntokenPrice\r\n    );\r\n\r\n    /// @dev Get the full information of latest trigger price. (token and ntoken)\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return avgPrice Average price\r\n    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447, \r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    /// @return ntokenBlockNumber The block number of ntoken price\r\n    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    /// @return ntokenAvgPrice Average price of ntoken\r\n    /// @return ntokenSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that\r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    function triggeredPriceInfo2(address tokenAddress) external view returns (\r\n        uint blockNumber,\r\n        uint price,\r\n        uint avgPrice,\r\n        uint sigmaSQ,\r\n        uint ntokenBlockNumber,\r\n        uint ntokenPrice,\r\n        uint ntokenAvgPrice,\r\n        uint ntokenSigmaSQ\r\n    );\r\n\r\n    /// @dev Get the latest effective price. (token and ntoken)\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return ntokenBlockNumber The block number of ntoken price\r\n    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    function latestPrice2(address tokenAddress) external view returns (\r\n        uint blockNumber,\r\n        uint price,\r\n        uint ntokenBlockNumber,\r\n        uint ntokenPrice\r\n    );\r\n}\r\n\r\n// File: contracts\\interface\\INestLedger.sol\r\n\r\n/// @dev This interface defines the nest ledger methods\r\ninterface INestLedger {\r\n\r\n    /// @dev Application Flag Changed event\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    event ApplicationChanged(address addr, uint flag);\r\n    \r\n    /// @dev Configuration structure of nest ledger contract\r\n    struct Config {\r\n        \r\n        // nest reward scale(10000 based). 2000\r\n        uint16 nestRewardScale;\r\n\r\n        // // ntoken reward scale(10000 based). 8000\r\n        // uint16 ntokenRewardScale;\r\n    }\r\n    \r\n    /// @dev Modify configuration\r\n    /// @param config Configuration object\r\n    function setConfig(Config memory config) external;\r\n\r\n    /// @dev Get configuration\r\n    /// @return Configuration object\r\n    function getConfig() external view returns (Config memory);\r\n\r\n    /// @dev Set DAO application\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function setApplication(address addr, uint flag) external;\r\n\r\n    /// @dev Check DAO application flag\r\n    /// @param addr DAO application contract address\r\n    /// @return Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function checkApplication(address addr) external view returns (uint);\r\n\r\n    /// @dev Carve reward\r\n    /// @param ntokenAddress Destination ntoken address\r\n    function carveETHReward(address ntokenAddress) external payable;\r\n\r\n    /// @dev Add reward\r\n    /// @param ntokenAddress Destination ntoken address\r\n    function addETHReward(address ntokenAddress) external payable;\r\n\r\n    /// @dev The function returns eth rewards of specified ntoken\r\n    /// @param ntokenAddress The ntoken address\r\n    function totalETHRewards(address ntokenAddress) external view returns (uint);\r\n\r\n    /// @dev Pay\r\n    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to pay with\r\n    /// @param tokenAddress Token address of receiving funds (0 means ETH)\r\n    /// @param to Address to receive\r\n    /// @param value Amount to receive\r\n    function pay(address ntokenAddress, address tokenAddress, address to, uint value) external;\r\n\r\n    /// @dev Settlement\r\n    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to settle with\r\n    /// @param tokenAddress Token address of receiving funds (0 means ETH)\r\n    /// @param to Address to receive\r\n    /// @param value Amount to receive\r\n    function settle(address ntokenAddress, address tokenAddress, address to, uint value) external payable;\r\n}\r\n\r\n// File: contracts\\interface\\INestMapping.sol\r\n\r\n/// @dev The interface defines methods for nest builtin contract address mapping\r\ninterface INestMapping {\r\n\r\n    /// @dev Set the built-in contract address of the system\r\n    /// @param nestTokenAddress Address of nest token contract\r\n    /// @param nestNodeAddress Address of nest node contract\r\n    /// @param nestLedgerAddress INestLedger implementation contract address\r\n    /// @param nestMiningAddress INestMining implementation contract address for nest\r\n    /// @param ntokenMiningAddress INestMining implementation contract address for ntoken\r\n    /// @param nestPriceFacadeAddress INestPriceFacade implementation contract address\r\n    /// @param nestVoteAddress INestVote implementation contract address\r\n    /// @param nestQueryAddress INestQuery implementation contract address\r\n    /// @param nnIncomeAddress NNIncome contract address\r\n    /// @param nTokenControllerAddress INTokenController implementation contract address\r\n    function setBuiltinAddress(\r\n        address nestTokenAddress,\r\n        address nestNodeAddress,\r\n        address nestLedgerAddress,\r\n        address nestMiningAddress,\r\n        address ntokenMiningAddress,\r\n        address nestPriceFacadeAddress,\r\n        address nestVoteAddress,\r\n        address nestQueryAddress,\r\n        address nnIncomeAddress,\r\n        address nTokenControllerAddress\r\n    ) external;\r\n\r\n    /// @dev Get the built-in contract address of the system\r\n    /// @return nestTokenAddress Address of nest token contract\r\n    /// @return nestNodeAddress Address of nest node contract\r\n    /// @return nestLedgerAddress INestLedger implementation contract address\r\n    /// @return nestMiningAddress INestMining implementation contract address for nest\r\n    /// @return ntokenMiningAddress INestMining implementation contract address for ntoken\r\n    /// @return nestPriceFacadeAddress INestPriceFacade implementation contract address\r\n    /// @return nestVoteAddress INestVote implementation contract address\r\n    /// @return nestQueryAddress INestQuery implementation contract address\r\n    /// @return nnIncomeAddress NNIncome contract address\r\n    /// @return nTokenControllerAddress INTokenController implementation contract address\r\n    function getBuiltinAddress() external view returns (\r\n        address nestTokenAddress,\r\n        address nestNodeAddress,\r\n        address nestLedgerAddress,\r\n        address nestMiningAddress,\r\n        address ntokenMiningAddress,\r\n        address nestPriceFacadeAddress,\r\n        address nestVoteAddress,\r\n        address nestQueryAddress,\r\n        address nnIncomeAddress,\r\n        address nTokenControllerAddress\r\n    );\r\n\r\n    /// @dev Get address of nest token contract\r\n    /// @return Address of nest token contract\r\n    function getNestTokenAddress() external view returns (address);\r\n\r\n    /// @dev Get address of nest node contract\r\n    /// @return Address of nest node contract\r\n    function getNestNodeAddress() external view returns (address);\r\n\r\n    /// @dev Get INestLedger implementation contract address\r\n    /// @return INestLedger implementation contract address\r\n    function getNestLedgerAddress() external view returns (address);\r\n\r\n    /// @dev Get INestMining implementation contract address for nest\r\n    /// @return INestMining implementation contract address for nest\r\n    function getNestMiningAddress() external view returns (address);\r\n\r\n    /// @dev Get INestMining implementation contract address for ntoken\r\n    /// @return INestMining implementation contract address for ntoken\r\n    function getNTokenMiningAddress() external view returns (address);\r\n\r\n    /// @dev Get INestPriceFacade implementation contract address\r\n    /// @return INestPriceFacade implementation contract address\r\n    function getNestPriceFacadeAddress() external view returns (address);\r\n\r\n    /// @dev Get INestVote implementation contract address\r\n    /// @return INestVote implementation contract address\r\n    function getNestVoteAddress() external view returns (address);\r\n\r\n    /// @dev Get INestQuery implementation contract address\r\n    /// @return INestQuery implementation contract address\r\n    function getNestQueryAddress() external view returns (address);\r\n\r\n    /// @dev Get NNIncome contract address\r\n    /// @return NNIncome contract address\r\n    function getNnIncomeAddress() external view returns (address);\r\n\r\n    /// @dev Get INTokenController implementation contract address\r\n    /// @return INTokenController implementation contract address\r\n    function getNTokenControllerAddress() external view returns (address);\r\n\r\n    /// @dev Registered address. The address registered here is the address accepted by nest system\r\n    /// @param key The key\r\n    /// @param addr Destination address. 0 means to delete the registration information\r\n    function registerAddress(string memory key, address addr) external;\r\n\r\n    /// @dev Get registered address\r\n    /// @param key The key\r\n    /// @return Destination address. 0 means empty\r\n    function checkAddress(string memory key) external view returns (address);\r\n}\r\n\r\n// File: contracts\\interface\\INestGovernance.sol\r\n\r\n/// @dev This interface defines the governance methods\r\ninterface INestGovernance is INestMapping {\r\n\r\n    /// @dev Set governance authority\r\n    /// @param addr Destination address\r\n    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function setGovernance(address addr, uint flag) external;\r\n\r\n    /// @dev Get governance rights\r\n    /// @param addr Destination address\r\n    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function getGovernance(address addr) external view returns (uint);\r\n\r\n    /// @dev Check whether the target address has governance rights for the given target\r\n    /// @param addr Destination address\r\n    /// @param flag Permission weight. The permission of the target address must be greater than this weight to pass the check\r\n    /// @return True indicates permission\r\n    function checkGovernance(address addr, uint flag) external view returns (bool);\r\n}\r\n\r\n// File: contracts\\interface\\INTokenController.sol\r\n\r\n///@dev This interface defines the methods for ntoken management\r\ninterface INTokenController {\r\n    \r\n    /// @notice when the auction of a token gets started\r\n    /// @param tokenAddress The address of the (ERC20) token\r\n    /// @param ntokenAddress The address of the ntoken w.r.t. token for incentives\r\n    /// @param owner The address of miner who opened the oracle\r\n    event NTokenOpened(address tokenAddress, address ntokenAddress, address owner);\r\n    \r\n    /// @notice ntoken disable event\r\n    /// @param tokenAddress token address\r\n    event NTokenDisabled(address tokenAddress);\r\n    \r\n    /// @notice ntoken enable event\r\n    /// @param tokenAddress token address\r\n    event NTokenEnabled(address tokenAddress);\r\n\r\n    /// @dev ntoken configuration structure\r\n    struct Config {\r\n\r\n        // The number of nest needed to pay for opening ntoken. 10000 ether\r\n        uint96 openFeeNestAmount;\r\n\r\n        // ntoken management is enabled. 0: not enabled, 1: enabled\r\n        uint8 state;\r\n    }\r\n\r\n    /// @dev A struct for an ntoken\r\n    struct NTokenTag {\r\n\r\n        // ntoken address\r\n        address ntokenAddress;\r\n\r\n        // How much nest has paid for open this ntoken\r\n        uint96 nestFee;\r\n    \r\n        // token address\r\n        address tokenAddress;\r\n\r\n        // Index for this ntoken\r\n        uint40 index;\r\n\r\n        // Create time\r\n        uint48 startTime;\r\n\r\n        // State of this ntoken. 0: disabled; 1 normal\r\n        uint8 state;\r\n    }\r\n\r\n    /* ========== Governance ========== */\r\n\r\n    /// @dev Modify configuration\r\n    /// @param config Configuration object\r\n    function setConfig(Config memory config) external;\r\n\r\n    /// @dev Get configuration\r\n    /// @return Configuration object\r\n    function getConfig() external view returns (Config memory);\r\n\r\n    /// @dev Set the token mapping\r\n    /// @param tokenAddress Destination token address\r\n    /// @param ntokenAddress Destination ntoken address\r\n    /// @param state status for this map\r\n    function setNTokenMapping(address tokenAddress, address ntokenAddress, uint state) external;\r\n\r\n    /// @dev Get token address from ntoken address\r\n    /// @param ntokenAddress Destination ntoken address\r\n    /// @return token address\r\n    function getTokenAddress(address ntokenAddress) external view returns (address);\r\n\r\n    /// @dev Get ntoken address from token address\r\n    /// @param tokenAddress Destination token address\r\n    /// @return ntoken address\r\n    function getNTokenAddress(address tokenAddress) external view returns (address);\r\n\r\n    /* ========== ntoken management ========== */\r\n    \r\n    /// @dev Bad tokens should be banned \r\n    function disable(address tokenAddress) external;\r\n\r\n    /// @dev enable ntoken\r\n    function enable(address tokenAddress) external;\r\n\r\n    /// @notice Open a NToken for a token by anyone (contracts aren't allowed)\r\n    /// @dev Create and map the (Token, NToken) pair in NestPool\r\n    /// @param tokenAddress The address of token contract\r\n    function open(address tokenAddress) external;\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    /// @dev Get ntoken information\r\n    /// @param tokenAddress Destination token address\r\n    /// @return ntoken information\r\n    function getNTokenTag(address tokenAddress) external view returns (NTokenTag memory);\r\n\r\n    /// @dev Get opened ntoken count\r\n    /// @return ntoken count\r\n    function getNTokenCount() external view returns (uint);\r\n\r\n    /// @dev List ntoken information by page\r\n    /// @param offset Skip previous (offset) records\r\n    /// @param count Return (count) records\r\n    /// @param order Order. 0 reverse order, non-0 positive order\r\n    /// @return ntoken information by page\r\n    function list(uint offset, uint count, uint order) external view returns (NTokenTag[] memory);\r\n}\r\n\r\n// File: contracts\\lib\\TransferHelper.sol\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n// File: contracts\\NestBase.sol\r\n\r\n/// @dev Base contract of nest\r\ncontract NestBase {\r\n\r\n    // Address of nest token contract\r\n    address constant NEST_TOKEN_ADDRESS = 0x04abEdA201850aC0124161F037Efd70c74ddC74C;\r\n\r\n    // Genesis block number of nest\r\n    // NEST token contract is created at block height 6913517. However, because the mining algorithm of nest1.0\r\n    // is different from that at present, a new mining algorithm is adopted from nest2.0. The new algorithm\r\n    // includes the attenuation logic according to the block. Therefore, it is necessary to trace the block\r\n    // where the nest begins to decay. According to the circulation when nest2.0 is online, the new mining\r\n    // algorithm is used to deduce and convert the nest, and the new algorithm is used to mine the nest2.0\r\n    // on-line flow, the actual block is 5120000\r\n    uint constant NEST_GENESIS_BLOCK = 5120000;\r\n\r\n    /// @dev To support open-zeppelin/upgrades\r\n    /// @param nestGovernanceAddress INestGovernance implementation contract address\r\n    function initialize(address nestGovernanceAddress) virtual public {\r\n        require(_governance == address(0), 'NEST:!initialize');\r\n        _governance = nestGovernanceAddress;\r\n    }\r\n\r\n    /// @dev INestGovernance implementation contract address\r\n    address public _governance;\r\n\r\n    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \r\n    ///      super.update(nestGovernanceAddress) when overriding, and override method without onlyGovernance\r\n    /// @param nestGovernanceAddress INestGovernance implementation contract address\r\n    function update(address nestGovernanceAddress) virtual public {\r\n\r\n        address governance = _governance;\r\n        require(governance == msg.sender || INestGovernance(governance).checkGovernance(msg.sender, 0), \"NEST:!gov\");\r\n        _governance = nestGovernanceAddress;\r\n    }\r\n\r\n    /// @dev Migrate funds from current contract to NestLedger\r\n    /// @param tokenAddress Destination token address.(0 means eth)\r\n    /// @param value Migrate amount\r\n    function migrate(address tokenAddress, uint value) external onlyGovernance {\r\n\r\n        address to = INestGovernance(_governance).getNestLedgerAddress();\r\n        if (tokenAddress == address(0)) {\r\n            INestLedger(to).addETHReward { value: value } (address(0));\r\n        } else {\r\n            TransferHelper.safeTransfer(tokenAddress, to, value);\r\n        }\r\n    }\r\n\r\n    //---------modifier------------\r\n\r\n    modifier onlyGovernance() {\r\n        require(INestGovernance(_governance).checkGovernance(msg.sender, 0), \"NEST:!gov\");\r\n        _;\r\n    }\r\n\r\n    modifier noContract() {\r\n        require(msg.sender == tx.origin, \"NEST:!contract\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts\\NestPriceFacade.sol\r\n\r\n/// @dev Price call entry\r\ncontract NestPriceFacade is NestBase, INestPriceFacade, INestQuery {\r\n\r\n    // constructor() { }\r\n\r\n    /// @dev Charge fee channel\r\n    struct FeeChannel {\r\n\r\n        // ntokenAddress of charge fee channel\r\n        address ntokenAddress;\r\n\r\n        // total fee to be settled of charge fee channel\r\n        uint96 fee;\r\n    }\r\n\r\n    Config _config;\r\n    address _nestLedgerAddress;\r\n    address _nestQueryAddress;\r\n    address _nTokenControllerAddress;\r\n\r\n    /// @dev Unit of post fee. 0.0001 ether\r\n    uint constant DIMI_ETHER = 0.0001 ether; // 1 ether / 10000;\r\n\r\n    /// @dev Address flag. Only the address of the user whose address tag is consistent with the configuration tag can call the price tag. (address=>flag)\r\n    mapping(address=>uint) _addressFlags;\r\n\r\n    /// @dev The inestquery address mapped by this address is preferred for price query, which can be used to separate nest price query and token price query. (tokenAddress=>INestQuery)\r\n    mapping(address=>address) _nestQueryMapping;\r\n\r\n    /// @dev Mapping from token address to charge fee channel. tokenAddress=>FeeChannel\r\n    mapping(address=>FeeChannel) _channels;\r\n\r\n    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \r\n    ///      super.update(nestGovernanceAddress) when overriding, and override method without onlyGovernance\r\n    /// @param nestGovernanceAddress INestGovernance implementation contract address\r\n    function update(address nestGovernanceAddress) override public {\r\n\r\n        super.update(nestGovernanceAddress);\r\n        (\r\n            //address nestTokenAddress\r\n            , \r\n            //address nestNodeAddress\r\n            ,\r\n            //address nestLedgerAddress\r\n            _nestLedgerAddress, \r\n            //address nestMiningAddress\r\n            ,\r\n            //address ntokenMiningAddress\r\n            ,\r\n            //address nestPriceFacadeAddress\r\n            , \r\n            //address nestVoteAddress\r\n            , \r\n            //address nestQueryAddress\r\n            _nestQueryAddress, \r\n            //address nnIncomeAddress\r\n            , \r\n            //address nTokenControllerAddress\r\n            _nTokenControllerAddress\r\n\r\n        ) = INestGovernance(nestGovernanceAddress).getBuiltinAddress();\r\n    }\r\n\r\n    /// @dev Modify configuration\r\n    /// @param config Configuration object\r\n    function setConfig(Config memory config) override external onlyGovernance {\r\n        _config = config;\r\n    }\r\n\r\n    /// @dev Get configuration\r\n    /// @return Configuration object\r\n    function getConfig() override external view returns (Config memory) {\r\n        return _config;\r\n    }\r\n\r\n    /// @dev Set the address flag. Only the address flag equals to config.normalFlag can the price be called\r\n    /// @param addr Destination address\r\n    /// @param flag Address flag\r\n    function setAddressFlag(address addr, uint flag) override external onlyGovernance {\r\n        _addressFlags[addr] = flag;\r\n    }\r\n\r\n    /// @dev Get the flag. Only the address flag equals to config.normalFlag can the price be called\r\n    /// @param addr Destination address\r\n    /// @return Address flag\r\n    function getAddressFlag(address addr) override external view returns(uint) {\r\n        return _addressFlags[addr];\r\n    }\r\n\r\n    /// @dev Set INestQuery implementation contract address for token\r\n    /// @param tokenAddress Destination token address\r\n    /// @param nestQueryAddress INestQuery implementation contract address, 0 means delete\r\n    function setNestQuery(address tokenAddress, address nestQueryAddress) override external onlyGovernance {\r\n        _nestQueryMapping[tokenAddress] = nestQueryAddress;\r\n    }\r\n\r\n    /// @dev Get INestQuery implementation contract address for token\r\n    /// @param tokenAddress Destination token address\r\n    /// @return INestQuery implementation contract address, 0 means use default\r\n    function getNestQuery(address tokenAddress) override external view returns (address) {\r\n        return _nestQueryMapping[tokenAddress];\r\n    }\r\n\r\n    // Get INestQuery implementation contract address for token\r\n    function _getNestQuery(address tokenAddress) private view returns (address) {\r\n        address addr = _nestQueryMapping[tokenAddress];\r\n        if (addr == address(0)) {\r\n            return _nestQueryAddress;\r\n        }\r\n        return addr;\r\n    }\r\n\r\n    /// @dev Set the ntokenAddress from tokenAddress\r\n    /// @param tokenAddress Destination token address\r\n    /// @param ntokenAddress The ntoken address\r\n    function setNTokenAddress(address tokenAddress, address ntokenAddress) external onlyGovernance {\r\n        _channels[tokenAddress].ntokenAddress = ntokenAddress;\r\n    }\r\n\r\n    /// @dev Get the ntokenAddress from tokenAddress\r\n    /// @param tokenAddress Destination token address\r\n    /// @return The ntoken address\r\n    function getNTokenAddress(address tokenAddress) external view returns (address) {\r\n        return _channels[tokenAddress].ntokenAddress;\r\n    }\r\n\r\n    /// @dev Get cached fee in fee channel\r\n    /// @param tokenAddress Destination token address\r\n    /// @return Cached fee in fee channel\r\n    function getTokenFee(address tokenAddress) external view override returns (uint) {\r\n        return uint(_channels[tokenAddress].fee);\r\n    }\r\n\r\n    // // Get ntoken address of from token address\r\n    // function _getNTokenAddress(address tokenAddress) private returns (address) {\r\n        \r\n    //     address ntokenAddress = _addressCache[tokenAddress];\r\n    //     if (ntokenAddress == address(0)) {\r\n    //         ntokenAddress = INTokenController(_nTokenControllerAddress).getNTokenAddress(tokenAddress);\r\n    //         if (ntokenAddress != address(0)) {\r\n    //             _addressCache[tokenAddress] = ntokenAddress;\r\n    //         }\r\n    //     }\r\n    //     return ntokenAddress;\r\n    // }\r\n\r\n    // Payment of transfer fee\r\n    function _pay(address tokenAddress, uint fee, address paybackAddress) private {\r\n\r\n        fee = fee * DIMI_ETHER;\r\n        if (msg.value > fee) {\r\n            payable(paybackAddress).transfer(msg.value - fee);\r\n        } else {\r\n            require(msg.value == fee, \"NestPriceFacade:!fee\");\r\n        }\r\n\r\n        // Load fee channel\r\n        FeeChannel memory feeChannel = _channels[tokenAddress];\r\n        // If ntokenAddress is cached, use it, else load it from INTokenController\r\n        if (feeChannel.ntokenAddress == address(0)) {\r\n            feeChannel.ntokenAddress = INTokenController(_nTokenControllerAddress).getNTokenAddress(tokenAddress);\r\n        }\r\n\r\n        // Check totalFee\r\n        uint totalFee = fee + uint(feeChannel.fee);\r\n        // totalFee less than 1 ether, add to fee\r\n        if (totalFee < 1 ether)\r\n        {\r\n            feeChannel.fee = uint96(totalFee);\r\n        }\r\n        // totalFee reach 1 ether, collect\r\n        else {\r\n            feeChannel.fee = uint96(0);\r\n            INestLedger(_nestLedgerAddress).addETHReward { \r\n                value: totalFee \r\n            } (feeChannel.ntokenAddress);\r\n        }\r\n        _channels[tokenAddress] = feeChannel;\r\n    }\r\n\r\n    /// @dev Settle fee for charge fee channel\r\n    /// @param tokenAddress tokenAddress of charge fee channel\r\n    function settle(address tokenAddress) external override {\r\n        FeeChannel memory feeChannel = _channels[tokenAddress];\r\n        if (uint(feeChannel.fee) > 0) {\r\n            INestLedger(_nestLedgerAddress).addETHReward {\r\n                value: uint(feeChannel.fee)\r\n            } (feeChannel.ntokenAddress);\r\n            feeChannel.fee = uint96(0);\r\n            _channels[tokenAddress] = feeChannel;\r\n        }\r\n    }\r\n\r\n    /* ========== INestPriceFacade ========== */\r\n\r\n    /// @dev Get the latest trigger price\r\n    /// @param tokenAddress Destination token address\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function triggeredPrice(address tokenAddress, address paybackAddress) override external payable returns (uint blockNumber, uint price) {\r\n\r\n        Config memory config = _config;\r\n        require(_addressFlags[msg.sender] == uint(config.normalFlag), \"NestPriceFacade:!flag\");\r\n        _pay(tokenAddress, config.singleFee, paybackAddress);\r\n        return INestQuery(_getNestQuery(tokenAddress)).triggeredPrice(tokenAddress);\r\n    }\r\n\r\n    /// @dev Get the full information of latest trigger price\r\n    /// @param tokenAddress Destination token address\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return avgPrice Average price\r\n    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    function triggeredPriceInfo(address tokenAddress, address paybackAddress) override external payable returns (uint blockNumber, uint price, uint avgPrice, uint sigmaSQ) {\r\n        \r\n        Config memory config = _config;\r\n        require(_addressFlags[msg.sender] == uint(config.normalFlag), \"NestPriceFacade:!flag\");\r\n        _pay(tokenAddress, config.singleFee, paybackAddress);\r\n        return INestQuery(_getNestQuery(tokenAddress)).triggeredPriceInfo(tokenAddress);\r\n    }\r\n\r\n    /// @dev Find the price at block number\r\n    /// @param tokenAddress Destination token address\r\n    /// @param height Destination block number\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function findPrice(address tokenAddress, uint height, address paybackAddress) override external payable returns (uint blockNumber, uint price) {\r\n        \r\n        Config memory config = _config;\r\n        require(_addressFlags[msg.sender] == uint(config.normalFlag), \"NestPriceFacade:!flag\");\r\n        _pay(tokenAddress, config.singleFee, paybackAddress);\r\n        return INestQuery(_getNestQuery(tokenAddress)).findPrice(tokenAddress, height);\r\n    }\r\n\r\n    /// @dev Get the latest effective price\r\n    /// @param tokenAddress Destination token address\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function latestPrice(address tokenAddress, address paybackAddress) override external payable returns (uint blockNumber, uint price) {\r\n        \r\n        Config memory config = _config;\r\n        require(_addressFlags[msg.sender] == uint(config.normalFlag), \"NestPriceFacade:!flag\");\r\n        _pay(tokenAddress, config.singleFee, paybackAddress);\r\n        return INestQuery(_getNestQuery(tokenAddress)).latestPrice(tokenAddress);\r\n    }\r\n\r\n    /// @dev Get the last (num) effective price\r\n    /// @param tokenAddress Destination token address\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\r\n    /// @param count The number of prices that want to return\r\n    /// @return An array which length is num * 2, each two element expresses one price like blockNumber｜price\r\n    function lastPriceList(address tokenAddress, uint count, address paybackAddress) override external payable returns (uint[] memory) {\r\n\r\n        Config memory config = _config;\r\n        require(_addressFlags[msg.sender] == uint(config.normalFlag), \"NestPriceFacade:!flag\");\r\n        _pay(tokenAddress, config.singleFee, paybackAddress);\r\n        return INestQuery(_getNestQuery(tokenAddress)).lastPriceList(tokenAddress, count);\r\n    }\r\n\r\n    /// @dev Returns the results of latestPrice() and triggeredPriceInfo()\r\n    /// @param tokenAddress Destination token address\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\r\n    /// @return latestPriceBlockNumber The block number of latest price\r\n    /// @return latestPriceValue The token latest price. (1eth equivalent to (price) token)\r\n    /// @return triggeredPriceBlockNumber The block number of triggered price\r\n    /// @return triggeredPriceValue The token triggered price. (1eth equivalent to (price) token)\r\n    /// @return triggeredAvgPrice Average price\r\n    /// @return triggeredSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    function latestPriceAndTriggeredPriceInfo(address tokenAddress, address paybackAddress) \r\n    override\r\n    external \r\n    payable \r\n    returns (\r\n        uint latestPriceBlockNumber, \r\n        uint latestPriceValue,\r\n        uint triggeredPriceBlockNumber,\r\n        uint triggeredPriceValue,\r\n        uint triggeredAvgPrice,\r\n        uint triggeredSigmaSQ\r\n    ) {\r\n\r\n        Config memory config = _config;\r\n        require(_addressFlags[msg.sender] == uint(config.normalFlag), \"NestPriceFacade:!flag\");\r\n        _pay(tokenAddress, config.singleFee, paybackAddress);\r\n        return INestQuery(_getNestQuery(tokenAddress)).latestPriceAndTriggeredPriceInfo(tokenAddress);\r\n    }\r\n\r\n    /// @dev Get the latest trigger price. (token and ntoken)\r\n    /// @param tokenAddress Destination token address\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return ntokenBlockNumber The block number of ntoken price\r\n    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    function triggeredPrice2(address tokenAddress, address paybackAddress) override external payable returns (uint blockNumber, uint price, uint ntokenBlockNumber, uint ntokenPrice) {\r\n        \r\n        Config memory config = _config;\r\n        require(_addressFlags[msg.sender] == uint(config.normalFlag), \"NestPriceFacade:!flag\");\r\n        _pay(tokenAddress, config.doubleFee, paybackAddress);\r\n        return INestQuery(_getNestQuery(tokenAddress)).triggeredPrice2(tokenAddress);\r\n    }\r\n\r\n    /// @dev Get the full information of latest trigger price. (token and ntoken)\r\n    /// @param tokenAddress Destination token address\r\n    /// @param paybackAddress As the charging fee may change, it is suggested that the caller pay more fees, and the excess fees will be returned through this address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return avgPrice Average price\r\n    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447, \r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    /// @return ntokenBlockNumber The block number of ntoken price\r\n    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    /// @return ntokenAvgPrice Average price of ntoken\r\n    /// @return ntokenSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that\r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    function triggeredPriceInfo2(address tokenAddress, address paybackAddress) override external payable returns (uint blockNumber, uint price, uint avgPrice, uint sigmaSQ, uint ntokenBlockNumber, uint ntokenPrice, uint ntokenAvgPrice, uint ntokenSigmaSQ) {\r\n        \r\n        Config memory config = _config;\r\n        require(_addressFlags[msg.sender] == uint(config.normalFlag), \"NestPriceFacade:!flag\");\r\n        _pay(tokenAddress, config.doubleFee, paybackAddress);\r\n        return INestQuery(_getNestQuery(tokenAddress)).triggeredPriceInfo2(tokenAddress);\r\n    }\r\n\r\n    /// @dev Get the latest effective price. (token and ntoken)\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return ntokenBlockNumber The block number of ntoken price\r\n    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    function latestPrice2(address tokenAddress, address paybackAddress) override external payable returns (uint blockNumber, uint price, uint ntokenBlockNumber, uint ntokenPrice) {\r\n        \r\n        Config memory config = _config;\r\n        require(_addressFlags[msg.sender] == uint(config.normalFlag), \"NestPriceFacade:!flag\");\r\n        _pay(tokenAddress, config.doubleFee, paybackAddress);\r\n        return INestQuery(_getNestQuery(tokenAddress)).latestPrice2(tokenAddress);\r\n    }\r\n\r\n    /* ========== INestQuery ========== */\r\n\r\n    /// @dev Get the latest trigger price\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function triggeredPrice(address tokenAddress) override external view noContract returns (uint blockNumber, uint price) {\r\n        return INestQuery(_getNestQuery(tokenAddress)).triggeredPrice(tokenAddress);\r\n    }\r\n\r\n    /// @dev Get the full information of latest trigger price\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return avgPrice Average price\r\n    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    function triggeredPriceInfo(address tokenAddress) override external view noContract returns (\r\n        uint blockNumber, \r\n        uint price, \r\n        uint avgPrice, \r\n        uint sigmaSQ\r\n    ) {\r\n        return INestQuery(_getNestQuery(tokenAddress)).triggeredPriceInfo(tokenAddress);\r\n    }\r\n\r\n    /// @dev Find the price at block number\r\n    /// @param tokenAddress Destination token address\r\n    /// @param height Destination block number\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function findPrice(address tokenAddress, uint height) override external view noContract returns (\r\n        uint blockNumber, \r\n        uint price\r\n    ) {\r\n        return INestQuery(_getNestQuery(tokenAddress)).findPrice(tokenAddress, height);\r\n    }\r\n\r\n    /// @dev Get the latest effective price\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    function latestPrice(address tokenAddress) override external view noContract returns (uint blockNumber, uint price) {\r\n        return INestQuery(_getNestQuery(tokenAddress)).latestPrice(tokenAddress);\r\n    }\r\n\r\n    /// @dev Get the last (num) effective price\r\n    /// @param tokenAddress Destination token address\r\n    /// @param count The number of prices that want to return\r\n    /// @return An array which length is num * 2, each two element expresses one price like blockNumber｜price\r\n    function lastPriceList(address tokenAddress, uint count) override external view noContract returns (uint[] memory) {\r\n        return INestQuery(_getNestQuery(tokenAddress)).lastPriceList(tokenAddress, count);\r\n    }\r\n\r\n    /// @dev Returns the results of latestPrice() and triggeredPriceInfo()\r\n    /// @param tokenAddress Destination token address\r\n    /// @return latestPriceBlockNumber The block number of latest price\r\n    /// @return latestPriceValue The token latest price. (1eth equivalent to (price) token)\r\n    /// @return triggeredPriceBlockNumber The block number of triggered price\r\n    /// @return triggeredPriceValue The token triggered price. (1eth equivalent to (price) token)\r\n    /// @return triggeredAvgPrice Average price\r\n    /// @return triggeredSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    function latestPriceAndTriggeredPriceInfo(address tokenAddress)\r\n    override\r\n    external \r\n    view\r\n    noContract\r\n    returns (\r\n        uint latestPriceBlockNumber, \r\n        uint latestPriceValue,\r\n        uint triggeredPriceBlockNumber,\r\n        uint triggeredPriceValue,\r\n        uint triggeredAvgPrice,\r\n        uint triggeredSigmaSQ\r\n    ) {\r\n        return INestQuery(_getNestQuery(tokenAddress)).latestPriceAndTriggeredPriceInfo(tokenAddress);\r\n    }\r\n\r\n    /// @dev Get the latest trigger price. (token and ntoken)\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return ntokenBlockNumber The block number of ntoken price\r\n    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    function triggeredPrice2(address tokenAddress) override external view noContract returns (\r\n        uint blockNumber, \r\n        uint price, \r\n        uint ntokenBlockNumber, \r\n        uint ntokenPrice\r\n    ) {\r\n        return INestQuery(_getNestQuery(tokenAddress)).triggeredPrice2(tokenAddress);\r\n    }\r\n\r\n    /// @dev Get the full information of latest trigger price. (token and ntoken)\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return avgPrice Average price\r\n    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447, \r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    /// @return ntokenBlockNumber The block number of ntoken price\r\n    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    /// @return ntokenAvgPrice Average price of ntoken\r\n    /// @return ntokenSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that\r\n    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\r\n    ///         it means that the volatility has exceeded the range that can be expressed\r\n    function triggeredPriceInfo2(address tokenAddress) override external view noContract returns (\r\n        uint blockNumber, \r\n        uint price, \r\n        uint avgPrice, \r\n        uint sigmaSQ, \r\n        uint ntokenBlockNumber, \r\n        uint ntokenPrice, \r\n        uint ntokenAvgPrice, \r\n        uint ntokenSigmaSQ\r\n    ) {\r\n        return INestQuery(_getNestQuery(tokenAddress)).triggeredPriceInfo2(tokenAddress);\r\n    }\r\n\r\n    /// @dev Get the latest effective price. (token and ntoken)\r\n    /// @param tokenAddress Destination token address\r\n    /// @return blockNumber The block number of price\r\n    /// @return price The token price. (1eth equivalent to (price) token)\r\n    /// @return ntokenBlockNumber The block number of ntoken price\r\n    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\r\n    function latestPrice2(address tokenAddress) override external view noContract returns (\r\n        uint blockNumber, \r\n        uint price, \r\n        uint ntokenBlockNumber, \r\n        uint ntokenPrice\r\n    ) {\r\n        return INestQuery(_getNestQuery(tokenAddress)).latestPrice2(tokenAddress);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"}],\"name\":\"findPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paybackAddress\",\"type\":\"address\"}],\"name\":\"findPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getAddressFlag\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"singleFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"doubleFee\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"normalFlag\",\"type\":\"uint8\"}],\"internalType\":\"struct INestPriceFacade.Config\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getNTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getNestQuery\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nestGovernanceAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paybackAddress\",\"type\":\"address\"}],\"name\":\"lastPriceList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"lastPriceList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"latestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paybackAddress\",\"type\":\"address\"}],\"name\":\"latestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paybackAddress\",\"type\":\"address\"}],\"name\":\"latestPrice2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"latestPrice2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"latestPriceAndTriggeredPriceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"latestPriceBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestPriceValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triggeredPriceBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triggeredPriceValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triggeredAvgPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triggeredSigmaSQ\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paybackAddress\",\"type\":\"address\"}],\"name\":\"latestPriceAndTriggeredPriceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"latestPriceBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"latestPriceValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triggeredPriceBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triggeredPriceValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triggeredAvgPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triggeredSigmaSQ\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flag\",\"type\":\"uint256\"}],\"name\":\"setAddressFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"singleFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"doubleFee\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"normalFlag\",\"type\":\"uint8\"}],\"internalType\":\"struct INestPriceFacade.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ntokenAddress\",\"type\":\"address\"}],\"name\":\"setNTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nestQueryAddress\",\"type\":\"address\"}],\"name\":\"setNestQuery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"triggeredPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paybackAddress\",\"type\":\"address\"}],\"name\":\"triggeredPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"triggeredPrice2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paybackAddress\",\"type\":\"address\"}],\"name\":\"triggeredPrice2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paybackAddress\",\"type\":\"address\"}],\"name\":\"triggeredPriceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avgPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaSQ\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"triggeredPriceInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avgPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaSQ\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paybackAddress\",\"type\":\"address\"}],\"name\":\"triggeredPriceInfo2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avgPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaSQ\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenAvgPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenSigmaSQ\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"triggeredPriceInfo2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avgPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigmaSQ\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenAvgPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ntokenSigmaSQ\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nestGovernanceAddress\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NestPriceFacade","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"256","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://74c5356826670e055f4d2d2cc3cd7b680bf013f3a9f7c9cd827b30fd341a6e31"}]}