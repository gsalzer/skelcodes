{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-01-25\r\n*/\r\n\r\npragma solidity ^0.5.16;\r\n\r\n // SPDX-License-Identifier: MIT\r\n/**\r\nBird On-chain Oracle to confirm rating with 2+ consensus before update using the off-chain API https://www.bird.money/docs\r\n*/\r\n\r\ncontract BirdOracle {\r\n  BirdRequest[] onChainRequests; //keep track of list of on-chain requests\r\n  uint minConsensus = 2; //minimum number of consensus before confirmation \r\n  uint birdNest = 3; // bird consensus count\r\n  uint trackId = 0; //increament id's\r\n\r\n    /**\r\n   * Bird Standard API Request\r\n   * id: \"1\"\r\n   * url: \"https://www.bird.money/analytics/address/ethaddress\"\r\n   * key: \"bird_rating\"\r\n   * value: \"0.4\" => 400000000000000000\r\n   * arrivedBirds: 0\r\n   * resolved: true/false\r\n   * addr: 0x...\r\n   * response: response from off-chain oracles \r\n   * nest: approved off-chain oracles nest/addresses and keep track of vote (1=not voted, 2=voted)\r\n   */\r\n  struct BirdRequest {\r\n    uint id;   \r\n    string url; \r\n    string key; \r\n    uint value;\r\n    uint arrivedBirds;\r\n    bool resolved;\r\n    address addr;\r\n    mapping(uint => uint) response;\r\n    mapping(address => uint) nest; \r\n  }\r\n  \r\n    /**\r\n   * Bird Standard API Request\r\n   * Off-Chain-Request from outside the blockchain \r\n   */\r\n  event OffChainRequest (\r\n    uint id,\r\n    string url,\r\n    string key\r\n  );\r\n\r\n    /**\r\n   * To call when there is consensus on final result\r\n   */\r\n   \r\n  event UpdatedRequest (\r\n    uint id,\r\n    string url,\r\n    string key,\r\n    uint value\r\n  );\r\n\r\n  // container for the ratings\r\n  mapping (address => uint) ratings;\r\n\r\n  function newChainRequest (\r\n    string memory _url,\r\n    string memory _key\r\n  )\r\n  public   \r\n  {\r\n    uint length = onChainRequests.push(BirdRequest(trackId, _url, _key, 0, 0, false, address(0)));\r\n    BirdRequest storage r = onChainRequests[length - 1];\r\n\r\n    /**\r\n   * trusted oracles in bird nest\r\n   */\r\n    address trustedBird1 = address(0x35fA8692EB10F87D17Cd27fB5488598D33B023E5);\r\n    address trustedBird2 = address(0x58Fd79D34Edc6362f92c6799eE46945113A6EA91);\r\n    address trustedBird3 = address(0x0e4338DFEdA53Bc35467a09Da483410664d34e88);\r\n    \r\n    /**\r\n   * track votes\r\n   */\r\n    r.nest[trustedBird1] = 1;\r\n    r.nest[trustedBird2] = 1;\r\n    r.nest[trustedBird3] = 1;\r\n\r\n    /**\r\n   * save caller address\r\n   */\r\n    //r.addr = msg.sender;\r\n\r\n    string memory addrStr = extractAddress(_url);\r\n    r.addr = parseAddr(addrStr);\r\n\r\n    /**\r\n   * Off-Chain event trigger\r\n   */\r\n    emit OffChainRequest (\r\n      trackId,\r\n      _url,\r\n      _key\r\n    );\r\n\r\n    /**\r\n   * Off-Chain event trigger\r\n   */\r\n    trackId++;\r\n  }\r\n\r\n  //called by the oracle to record its answer\r\n    /**\r\n   * Off-Chain oracle to update its consensus answer\r\n   */\r\n  function updatedChainRequest (\r\n    uint _id,\r\n    uint _valueResponse\r\n  ) public {\r\n\r\n    BirdRequest storage trackRequest = onChainRequests[_id];\r\n\r\n    if (trackRequest.resolved)\r\n      return;\r\n\r\n    /**\r\n   * To confirm an address/oracle is part of the trusted nest and has not voted\r\n   */\r\n    if(trackRequest.nest[msg.sender] == 1){\r\n        \r\n        /**\r\n       * change vote value to = 2 from 1\r\n       */\r\n      trackRequest.nest[msg.sender] = 2;\r\n      \r\n        /**\r\n       * Loop through responses for empty position, save the response\r\n       * TODO: refactor\r\n       */\r\n      uint tmpI = trackRequest.arrivedBirds;\r\n      trackRequest.response[tmpI] = _valueResponse;\r\n      trackRequest.arrivedBirds = tmpI + 1;\r\n      \r\n      uint currentConsensusCount = 1;\r\n      \r\n        /**\r\n       * Loop through list and check if min consensus has been reached\r\n       */\r\n      \r\n      for(uint i = 0; i < tmpI; i++){\r\n        uint a = trackRequest.response[i];\r\n        uint b = _valueResponse;\r\n\r\n        if(a == b){\r\n          currentConsensusCount++;\r\n          if(currentConsensusCount >= minConsensus){\r\n            trackRequest.value = _valueResponse;\r\n            trackRequest.resolved = true;\r\n\r\n            // Save value and user information into the bird rating container\r\n            ratings[trackRequest.addr] = trackRequest.value;\r\n            \r\n            emit UpdatedRequest (\r\n              trackRequest.id,\r\n              trackRequest.url,\r\n              trackRequest.key,\r\n              trackRequest.value\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n    /**\r\n   * access to saved ratings after Oracle consensus\r\n   */\r\n\r\n  function getRatingByAddress(address _addr) public view returns (uint) {\r\n    return ratings[_addr];\r\n  }\r\n\r\n  function getRatingByAddressString(string memory _str) public view returns (uint) {\r\n    return ratings[parseAddr(_str)];\r\n  }\r\n\r\n  function getRating() public view returns (uint) {\r\n    return ratings[msg.sender];\r\n  }\r\n\r\n  function extractAddress(string memory url) internal pure returns (string memory) {\r\n    bytes memory strBytes = bytes(url);\r\n    uint index = strBytes.length - 1;\r\n    while (index >= 0) {\r\n      if (strBytes[index] == \"/\" || strBytes[index] == \"\\\\\")\r\n        break;\r\n      index--;\r\n    }\r\n    require(index >= 0, \"No address found.\");\r\n    return substring(url, index + 1);\r\n  }\r\n\r\n  function substring(string memory str, uint startIndex) internal pure returns (string memory) {\r\n    return substring(str, startIndex, bytes(str).length);\r\n  }\r\n\r\n  function substring(string memory str, uint startIndex, uint endIndex) internal pure returns (string memory) {\r\n    bytes memory strBytes = bytes(str);\r\n    bytes memory result = new bytes(endIndex - startIndex);\r\n    for(uint i = startIndex; i < endIndex; i++) {\r\n        result[i-startIndex] = strBytes[i];\r\n    }\r\n    return string(result);\r\n  }\r\n\r\n  function parseAddr(string memory str) internal pure returns (address){\r\n    bytes memory strBytes = bytes(str);\r\n    uint160 iaddr = 0;\r\n    uint160 b1;\r\n    uint160 b2;\r\n    for (uint i = 2; i < 2+2*20; i += 2){\r\n      iaddr *= 256;\r\n      b1 = uint160(uint8(strBytes[i]));\r\n      b2 = uint160(uint8(strBytes[i + 1]));\r\n      if ((b1 >= 97) && (b1 <= 102)) {\r\n        b1 -= 87;\r\n      } else if ((b1 >= 65) && (b1 <= 70)) {\r\n        b1 -= 55;\r\n      } else if ((b1 >= 48) && (b1 <= 57)) {\r\n        b1 -= 48;\r\n      }\r\n      if ((b2 >= 97) && (b2 <= 102)) {\r\n        b2 -= 87;\r\n      } else if ((b2 >= 65) && (b2 <= 70)) {\r\n        b2 -= 55;\r\n      } else if ((b2 >= 48) && (b2 <= 57)) {\r\n        b2 -= 48;\r\n      }\r\n      iaddr += (b1 * 16 + b2);\r\n    }\r\n    return address(iaddr);\r\n  }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"OffChainRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UpdatedRequest\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRating\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getRatingByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_str\",\"type\":\"string\"}],\"name\":\"getRatingByAddressString\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"_url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"newChainRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_valueResponse\",\"type\":\"uint256\"}],\"name\":\"updatedChainRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BirdOracle","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://2bb2d9269de4744cd0e5e6da08d9f18f4dd84576109d9fbac80747cff3cef8c6"}]}