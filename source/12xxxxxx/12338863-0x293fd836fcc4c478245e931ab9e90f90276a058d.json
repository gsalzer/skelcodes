{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Lock.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ncontract Lock {\\n\\n    address public immutable token;\\n    mapping(address => uint256) public balances;\\n    mapping(address => uint256) public lockStart;\\n    mapping(address => uint256) public lockEnd;\\n\\n    constructor(address _token) {\\n        require(_token != address(0), \\\"token address is zero\\\");\\n        token = _token;\\n    }\\n\\n    function totalLocked() public view returns (uint256) {\\n        (bool _success, bytes memory data) = token.staticcall(abi.encodeWithSelector(0x70a08231, address(this)));\\n        (uint amount) = abi.decode(data, (uint));\\n        return amount;\\n    }\\n\\n    // transfer ERC from msg.sender to contract with locked:\\n    function lock(address _lockTo, uint256 _amount, uint32 _startAfterDays, uint32 _lockDays) public returns (bool) {\\n        require(_lockTo != address(0), \\\"address is zero\\\");\\n        require(_amount > 0, \\\"amount <= 0\\\");\\n        require(_startAfterDays >= 0 && _startAfterDays <= 365, \\\"start lock days < 0 or > 1y\\\");\\n        require(_lockDays >= 1 && _lockDays <= 3650, \\\"lock days < 1d or > 10y\\\");\\n\\n        require(lockStart[_lockTo] == 0, \\\"cannot re-lock\\\");\\n        require(lockEnd[_lockTo] == 0, \\\"cannot re-lock\\\");\\n        require(balances[_lockTo] == 0, \\\"cannot re-lock\\\");\\n\\n        uint256 start = block.timestamp + 3600 * 24 * _startAfterDays;\\n        uint256 end = start + 3600 * 24 * _lockDays;\\n        lockStart[_lockTo] = start;\\n        lockEnd[_lockTo] = end;\\n        balances[_lockTo] = _amount;\\n        safeTransferFrom(msg.sender, address(this), _amount);\\n        return true;\\n    }\\n\\n    function unlockable(address _address) public view returns (uint256) {\\n        uint256 total = balances[_address];\\n        if (total == 0) {\\n            return 0;\\n        }\\n        uint256 start = lockStart[_address];\\n        if (block.timestamp <= start) {\\n            return 0;\\n        }\\n        uint256 end = lockEnd[_address];\\n        if (block.timestamp < end) {\\n            return total * (block.timestamp - start) / (end - start);\\n        } else {\\n            return total;\\n        }\\n    }\\n\\n    // transfer locked ERC to msg.sender if unlock ok:\\n    function unlock() public returns (bool) {\\n        uint256 start = lockStart[msg.sender];\\n        require(start > 0, \\\"lock not found\\\");\\n        require(start < block.timestamp, \\\"still in lock\\\");\\n\\n        uint256 total = balances[msg.sender];\\n        uint256 canWithdraw = unlockable(msg.sender);\\n        if (canWithdraw == 0) {\\n            return false;\\n        }\\n        safeTransfer(msg.sender, canWithdraw);\\n        balances[msg.sender] = total - canWithdraw;\\n\\n        if (total == canWithdraw) {\\n            lockStart[msg.sender] = 0;\\n            lockEnd[msg.sender] = 0;\\n        } else {\\n            lockStart[msg.sender] = block.timestamp;\\n        }\\n        return true;\\n    }\\n\\n    function safeTransfer(\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(0xa9059cbb, _to, _value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper: TRANSFER_FAILED'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(0x23b872dd, _from, _to, _value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper: TRANSFER_FROM_FAILED'\\n        );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_startAfterDays\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_lockDays\",\"type\":\"uint32\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unlockable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Lock","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"00000000000000000000000044e288b2484e5a5297cf7193bf36690ea6801f95","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}