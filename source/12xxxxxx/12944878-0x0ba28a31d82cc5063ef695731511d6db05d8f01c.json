{"status":"1","message":"OK","result":[{"SourceCode":"// File: node_modules\\openzeppelin-solidity\\contracts\\utils\\Context.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\access\\Ownable.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    mapping (address => uint256) internal _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 internal _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The defaut value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_, uint8 decimals_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overloaded;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\ncontract Funganomics is ERC20(\"Funganomics\", \"FUNG\", 18), Ownable {\r\n    \r\n/*\r\n*------------------------------------------------------------\r\n* Initializing the unlocked wallets.\r\n* _____________________________________________________________\r\n*/\r\n    \r\n    /*\r\n    * Creating the Structure for UnlockedType.\r\n    *------------------------------------------------------------\r\n    */\r\n    struct UnlockedType {\r\n        address address_unlocked;\r\n        uint8 percent_unlocked;\r\n    }\r\n    \r\n        /*\r\n        * Assigning the values for public sale.\r\n        *------------------------------------------------------------\r\n        */\r\n        UnlockedType public public_sale = UnlockedType(\r\n                0xB0af73e9dc7c90D6CBb4E33595Afb38ae3ec9244, // Address for minting the public sale fund.\r\n                40 // percent of the total supply will mint to the public sale fund address.\r\n            );\r\n    \r\n        /*\r\n        * Assigning the values for Liquidity & Exchanges.\r\n        *------------------------------------------------------------\r\n        */\r\n        UnlockedType public liquidity_and_exchanges = UnlockedType(\r\n                0x8c9DEDE329297D15cc54D1e6d4124b627cFC1322, // Address for minting the liquidity and exchanges fund.\r\n                5 // percent of the total supply will mint to the liquidity and exchange fund address.\r\n            );\r\n        \r\n        \r\n    /*\r\n    * Creating the Structure for presale.\r\n    *------------------------------------------------------------\r\n    */\r\n    struct PresaleUnlockedType {\r\n        address presale_wallet;\r\n        address funding_address;\r\n        uint8 percent_unlocked;\r\n        uint8 percent_on_purchase;\r\n        uint256 token_rate;\r\n        uint256 max_buy_limit;\r\n        uint256 token_sold;\r\n        bool is_started;\r\n    }\r\n    \r\n    mapping(address => uint256) public presale_purchased_per_user;  // It have the amount data for each user purchased in presale.\r\n    mapping(address => uint256) public presale_received_per_user; // It have the amount data for each user recieved the tokens.\r\n    mapping(address => uint256) public amount_spend_per_user; // It have the amount of data for each user have spend in wei in presale.\r\n        /*\r\n        * Assigning values to the presale.\r\n        *------------------------------------------------------------\r\n        */\r\n        PresaleUnlockedType public presale = PresaleUnlockedType(\r\n                0xC31e40De61108Fc2950034Af0aAC6681C7b88D18, // Presale wallet where the Token will mint.\r\n                0x84eFb54fDccf3d53a6B79B28AA0C5A58E2CE08B4, // Presale wallet where the fund will go on each buy.\r\n                20, // percent of total supply of the token goes for the presale. Unlocked.\r\n                25, // percent of amount the buy will get on the purchase instantly.\r\n                76923076923076920000000, // number of tokens with decimals offer in 1 ETH.\r\n                2250000000000000000,  // maximum amount in wei per user can spend in the presale.  \r\n                0, // Amount of token sold initialize to zero.\r\n                false\r\n            );\r\n        \r\n/*\r\n*------------------------------------------------------------\r\n* Initializing the unlocked wallets.\r\n* _____________________________________________________________\r\n*/\r\nuint256 private month = 2628000;\r\n\r\n    /*\r\n    * Creating the Structure for locked type.\r\n    *------------------------------------------------------------\r\n    */\r\n    struct LockedType {\r\n        address[] address_locked;\r\n        uint8 percent_locked;\r\n        uint256 locked_timestamp;\r\n    }\r\n    \r\n        /*\r\n        * Assigning values to the Team.\r\n        *------------------------------------------------------------\r\n        */\r\n        LockedType public team_locked = LockedType(\r\n                new address[](4), // The length should be change according to the number of team member.\r\n                9, // percent of total supply will mint to the team locked address.\r\n                block.timestamp + (24*month)  // timestamp of the team locked\r\n            );\r\n            \r\n        /*\r\n        * Assigning values to the marketing and partnership.\r\n        *------------------------------------------------------------\r\n        */\r\n        LockedType public  makt_and_pship_locked = LockedType(\r\n                new address[](4), // The length should be change according to the number of marketing and partnership.\r\n                11, // percent of total supply will mint to the marketing and partnership locked address.\r\n                block.timestamp + (12*month)  // timestamp of the marketing and partnership locked\r\n            );\r\n        \r\n        /*\r\n        * Assigning values to the company reserve locked.\r\n        *------------------------------------------------------------\r\n        */\r\n        LockedType public company_reserve_locked = LockedType(\r\n                new address[](4), // The length should be change according to the number of company_reserve.\r\n                5, // percent of total supply will mint to the company reserve locked address.\r\n                block.timestamp + (12*month)  // timestamp of the company reserve locked\r\n            );\r\n        \r\n        \r\n        /*\r\n        * Assigning values to the staking locked.\r\n        *------------------------------------------------------------\r\n        */\r\n        LockedType public staking_locked = LockedType(\r\n                new address[](4), // The length should be change according to the number of staking member.\r\n                10, // percent of total supply will mint to the staking locked address.\r\n                block.timestamp + (6*month)  // timestamp of the staking locked\r\n            );\r\n            \r\n    \r\n    address[] private blacklist;\r\n    \r\n    constructor(){\r\n        /*\r\n        * Assigning addresses to the locked wallets.\r\n        *------------------------------------------------------------\r\n        */\r\n        team_locked.address_locked = [\r\n                0x0A7A94833CA1f32Ec707F97c1be193410471b59E,\r\n                0x0A7A94833CA1f32Ec707F97c1be193410471b59E,\r\n                0x526aE735a19008910Dade55E3A587BC5E78b4368,\r\n                0x73BA7073388D98609F17eFd087DcD707eD7E6fE8\r\n            ];\r\n        \r\n        makt_and_pship_locked.address_locked = [\r\n                0xDEBa010B3C73C8ADf8d2F2a10FC4Ae7eCB006D48,\r\n                0x39712e58faadb17E1b2f51C02a334D46191D6265,\r\n                0x06cD22D223F6683caa02711a85Dbe5F7499BBB52,\r\n                0xddA3D202033d50025Dda495155696eA1F3066EFD\r\n            ];\r\n        \r\n        company_reserve_locked.address_locked = [\r\n                0x0026aAb86819037a62E29CC33a0d3Bf12b2E3F6b,\r\n                0xCB949451804cEaAf26d0845903024F41222C4E98,\r\n                0x7973F5e40A783dA46A41d1dc3a6803DeBF1068cA,\r\n                0x051Bf1962810AbAd76c5cA87C6678BB144fC73b0\r\n            ];\r\n        \r\n        staking_locked.address_locked = [\r\n                0x75ff174d2929c69C5993F9FB5939f11F3c646Aa3,\r\n                0x570160e09A5E54B4B014a1eEa5Fa99F72f17551b,\r\n                0x0eE21b5F738A51e40dd9E0747Bd13716F66a49bd,\r\n                0x6F657b9f0f77977F159E4F9fBEBb2aA4F6052bB2\r\n            ];\r\n        \r\n        uint256 supply = 1000000000*(10**_decimals);\r\n        \r\n        /*\r\n        * minting fund to unlocked addresses.\r\n        *------------------------------------------------------------\r\n        */\r\n        _mint(presale.presale_wallet, (presale.percent_unlocked*supply)/100);\r\n        _mint(public_sale.address_unlocked, (public_sale.percent_unlocked*supply)/100);\r\n        _mint(liquidity_and_exchanges.address_unlocked, (liquidity_and_exchanges.percent_unlocked*supply)/100);\r\n        \r\n        \r\n        /*\r\n        * minting fund to locked addresses.\r\n        *------------------------------------------------------------\r\n        */\r\n            \r\n            // Minting to the locked wallets.\r\n            for(uint i=0; i < team_locked.address_locked.length; i++){\r\n                _mint(team_locked.address_locked[i], (team_locked.percent_locked*supply)/(100*team_locked.address_locked.length));\r\n            }\r\n            \r\n            for(uint i=0; i < makt_and_pship_locked.address_locked.length; i++){\r\n                _mint(makt_and_pship_locked.address_locked[i], (makt_and_pship_locked.percent_locked*supply)/(100*makt_and_pship_locked.address_locked.length));\r\n            }\r\n            \r\n            for(uint i=0; i < company_reserve_locked.address_locked.length; i++){\r\n                _mint(company_reserve_locked.address_locked[i], (company_reserve_locked.percent_locked*supply)/(100*company_reserve_locked.address_locked.length));\r\n            }\r\n            \r\n            for(uint i=0; i < staking_locked.address_locked.length; i++){\r\n                _mint(staking_locked.address_locked[i], (staking_locked.percent_locked*supply)/(100*staking_locked.address_locked.length));\r\n            }\r\n        \r\n    }\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(filter_blacklist(msg.sender)==false, \"Transfer: Address Blacklisted.\");\r\n        /*\r\n        * validating the locked addresses.\r\n        *------------------------------------------------------------\r\n        */\r\n            for(uint i=0; i < team_locked.address_locked.length; i++){\r\n                if(sender == team_locked.address_locked[i]){\r\n                    require(team_locked.locked_timestamp < block.timestamp, \"Time Remaining for the locked address\");\r\n                }\r\n            }\r\n            \r\n            for(uint i=0; i < makt_and_pship_locked.address_locked.length; i++){\r\n                if(sender == makt_and_pship_locked.address_locked[i]){\r\n                    require(makt_and_pship_locked.locked_timestamp < block.timestamp, \"Time Remaining for the locked address\");\r\n                }\r\n            }\r\n            \r\n            for(uint i=0; i < company_reserve_locked.address_locked.length; i++){\r\n                if(sender == company_reserve_locked.address_locked[i]){\r\n                    require(company_reserve_locked.locked_timestamp < block.timestamp, \"Time Remaining for the locked address\");\r\n                }\r\n            }\r\n            \r\n            for(uint i=0; i < staking_locked.address_locked.length; i++){\r\n                if(sender == staking_locked.address_locked[i]){\r\n                    require(staking_locked.locked_timestamp < block.timestamp, \"Time Remaining for the locked address\");\r\n                }\r\n            }\r\n        \r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount); \r\n    }\r\n    \r\n    function buyToken() public payable{\r\n        require(msg.sender!=address(0), \"Presale: buyer cannot be address zero.\");\r\n        require(msg.value > 0, \"Presale: value can't be zero\");\r\n        require(filter_blacklist(msg.sender)==false, \"Presale: Address Blacklisted.\");\r\n        require(buy_allowance_left_by_user(msg.sender)>msg.value, \"Presale: Allowance per buyer Exceed.\");\r\n        \r\n        uint256 total_transfer_amount = predict_token_value(msg.value);\r\n        presale.token_sold += total_transfer_amount;\r\n        uint256 transfer_amount = (total_transfer_amount*presale.percent_on_purchase)/100;\r\n        \r\n        amount_spend_per_user[msg.sender] += msg.value;\r\n        presale_purchased_per_user[msg.sender] += total_transfer_amount;\r\n        presale_received_per_user[msg.sender] += transfer_amount;\r\n        \r\n        payable(presale.funding_address).transfer(msg.value); // fund is going to the presale funding address.\r\n        _transfer(presale.presale_wallet, msg.sender, transfer_amount); // tokens are transfer as per the calculated value with the bnb, token rate and the percent of distribution in advance.\r\n    }\r\n    \r\n    function predict_token_value(uint256 amount_in_wei) public view returns(uint256) {\r\n        return (amount_in_wei*presale.token_rate)/(10**18);\r\n    }\r\n    \r\n    function changeTokenRate(uint256 tokens_with_decimals_per_eth) public onlyOwner {\r\n        presale.token_rate = tokens_with_decimals_per_eth;\r\n    }\r\n    \r\n    function startPresale() public onlyOwner {\r\n        presale.is_started = true;\r\n    }\r\n    \r\n    function endPresale() public onlyOwner {\r\n        presale.is_started = false;\r\n    }\r\n    \r\n    function change_max_buy_limit(uint256 new_buy_limit_in_eth) public onlyOwner {\r\n        presale.max_buy_limit = new_buy_limit_in_eth;\r\n    }\r\n    \r\n    function add_to_blacklist(address[] memory address_array) public onlyOwner {\r\n        for(uint i = 0; i < address_array.length; i ++ ){\r\n            blacklist.push(address_array[i]);\r\n        }\r\n    }\r\n    \r\n    function get_blacklist() public view returns(address[] memory) {\r\n        return blacklist;\r\n    }\r\n    \r\n    function filter_blacklist(address _address) private view returns(bool) {\r\n        bool is_exist = false;\r\n        for(uint i = 0; i < blacklist.length; i++){\r\n            if(blacklist[i]==_address){\r\n                is_exist = true;\r\n            }\r\n        }\r\n        return is_exist;\r\n    }\r\n    \r\n    function buy_allowance_left_by_user(address _address) public view returns(uint256) {\r\n        return presale.max_buy_limit - amount_spend_per_user[_address];\r\n    }\r\n    \r\n    function Airdrop_for_presale(address[] memory address_array, uint256[] memory amount_array) public onlyOwner {\r\n        // Please make sure that the two parameter are array.\r\n        // Please make sure that the amount of tokens should be multiplied by the decimals.\r\n        \r\n        for(uint i = 0; i < address_array.length; i++){\r\n            _transfer(msg.sender, address_array[i], amount_array[i]);\r\n            presale_received_per_user[address_array[i]] += amount_array[i];\r\n        }\r\n    }\r\n    \r\n    function Airdrop(address[] memory address_array, uint256[] memory amount_array) public {\r\n        for(uint i =0; i< address_array.length; i++){\r\n            _transfer(msg.sender, address_array[i], amount_array[i]);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"address_array\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount_array\",\"type\":\"uint256[]\"}],\"name\":\"Airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"address_array\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount_array\",\"type\":\"uint256[]\"}],\"name\":\"Airdrop_for_presale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"address_array\",\"type\":\"address[]\"}],\"name\":\"add_to_blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amount_spend_per_user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"buy_allowance_left_by_user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens_with_decimals_per_eth\",\"type\":\"uint256\"}],\"name\":\"changeTokenRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_buy_limit_in_eth\",\"type\":\"uint256\"}],\"name\":\"change_max_buy_limit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"company_reserve_locked\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"percent_locked\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"locked_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_blacklist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity_and_exchanges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"address_unlocked\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"percent_unlocked\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makt_and_pship_locked\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"percent_locked\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"locked_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_in_wei\",\"type\":\"uint256\"}],\"name\":\"predict_token_value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"presale_wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"funding_address\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"percent_unlocked\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"percent_on_purchase\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"token_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_buy_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_sold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"is_started\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"presale_purchased_per_user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"presale_received_per_user\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"public_sale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"address_unlocked\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"percent_unlocked\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking_locked\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"percent_locked\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"locked_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team_locked\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"percent_locked\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"locked_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Funganomics","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a10ec0f82b53489a45ee17549276015844e66b0f70aa47aad2adafae0fb6179c"}]}