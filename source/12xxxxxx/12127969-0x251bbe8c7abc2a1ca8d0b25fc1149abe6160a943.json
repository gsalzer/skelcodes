{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/v076/Periphery/Vaults/Withdrawal/DELTA_Vault_Withdrawal_MasterCopy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// DELTA-BUG-BOUNTY\\npragma solidity ^0.7.6;\\nimport \\\"../../../../interfaces/IDeltaToken.sol\\\";\\nimport \\\"../../../../interfaces/IDeltaDistributor.sol\\\";\\nimport \\\"../../../libs/SafeMath.sol\\\";\\n\\ncontract DELTA_Deep_Vault_Withdrawal {\\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location as in the Proxy contract.\\n    // It should also always be ensured that the address is stored alone (uses a full word)\\n    address private masterCopy;\\n    uint256 private ______gap;\\n    using SafeMath for uint256;\\n\\n    /// @notice The person who owns this withdrawal and can withdraw at any moment\\n    address public OWNER;\\n    /// @notice Seconds it takes to mature anything above the principle\\n    uint256 public MATURATION_TIME_SECONDS;\\n    /// @notice Principle DELTA which is the withdrawable amount without maturation\\n    /// Because we just mature stuff thats above claim\\n    uint256 public PRINCIPLE_DELTA;\\n    uint256 public VESTING_DELTA;\\n    bool public everythingWithdrawed;\\n    bool public principleWithdrawed;\\n    bool public emergency;\\n\\n    // Those variables are private and only gotten with getters, to not shit up the etherscan page\\n    /// @dev address of the delta token\\n    IDeltaToken private DELTA_TOKEN;\\n    /// @dev address of the rlp token\\n    /// @dev the block timestamp at the moment of calling the constructor\\n    uint256 private CONSTRUCTION_TIME;\\n\\n    constructor () {\\n        // Renders the master copy unusable\\n        // Proxy does not call the constructor\\n        OWNER = address(0x1);\\n    }\\n\\n    function intitialize (\\n        address _owner,\\n        uint256 _matuartionTimeSeconds,\\n        uint256 _principledDelta, // Principle means the base amount that doesnt mature.\\n        IDeltaToken delta\\n    ) public {\\n        require(OWNER == address(0), \\\"Already initialized\\\");\\n        require(_owner != address(0), \\\"Owner cannot be 0\\\");\\n        require(_matuartionTimeSeconds > 0, \\\"Maturation period is nessesary\\\");\\n\\n        DELTA_TOKEN = delta;\\n        OWNER = _owner;\\n\\n        uint256 deltaBalance = delta.balanceOf(address(this));\\n        require(deltaBalance >= _principledDelta, \\\"Did not get enough DELTA\\\");\\n        VESTING_DELTA = deltaBalance - _principledDelta;\\n        MATURATION_TIME_SECONDS = _matuartionTimeSeconds; \\n\\n        PRINCIPLE_DELTA = _principledDelta;\\n        CONSTRUCTION_TIME = block.timestamp;\\n    } \\n\\n    function deltaDistributor() public view returns(IDeltaDistributor distributor) {\\n        distributor = IDeltaDistributor(DELTA_TOKEN.distributor());\\n        require(address(distributor) != address(0), \\\"Distributor is not set\\\");\\n    }\\n\\n    function secondsLeftToMature() public view returns (uint256) {\\n        uint256 targetTime = CONSTRUCTION_TIME + MATURATION_TIME_SECONDS;\\n        if(block.timestamp > targetTime) { return 0; }\\n        return targetTime - block.timestamp;\\n    }\\n\\n    function secondsLeftUntilPrincipleUnlocked() public view returns (uint256) {\\n        uint256 targetTime = CONSTRUCTION_TIME + 14 days;\\n        if(block.timestamp > targetTime) { return 0; }\\n        return targetTime - block.timestamp;\\n    }\\n\\n    function onlyOwner() internal view {\\n        require(msg.sender == OWNER, \\\"You are not the owner of this withdrawal contract\\\");\\n    }\\n\\n    // Allows the owner of this contract to grant permission to delta governance to withdraw \\n    function toggleEmergency(bool isInEmergency) public {\\n        onlyOwner();\\n        emergency = isInEmergency;\\n    }\\n\\n    function withdrawTokensWithPermissionFromOwner(address token, address recipent, uint256 amount) public {\\n        require(msg.sender == DELTA_TOKEN.governance()); // Only delta governance can call this\\n        require(emergency); // Checks the owner activated emergency\\n        IERC20(token).transfer(recipent, amount);\\n    }\\n\\n    function withdrawPrinciple() public {\\n        onlyOwner();\\n        require(!principleWithdrawed, \\\"Principle was already withdrawed\\\");\\n        require(block.timestamp > CONSTRUCTION_TIME + 14 days, \\\"You need to wait 14 days to withdraw principle\\\");\\n        // Send the principle\\n        DELTA_TOKEN.transfer(msg.sender, PRINCIPLE_DELTA);\\n\\n        principleWithdrawed = true;\\n    }\\n\\n    /// @notice this will check the matured tokens and remove the balance that isnt matured back to the deep farming vault to pickup spread across all farmers\\n    function withdrawEverythingWithdrawable() public {\\n        onlyOwner();\\n        require(!everythingWithdrawed, \\\"Already withdrawed\\\");\\n        uint256 deltaDue = withdrawableTokens();\\n        // deltaDue has to be above becase it checks if principle was withdrawed. \\n        // This fixes a bug where principle tokens were potentially burned\\n        if(!principleWithdrawed && PRINCIPLE_DELTA > 0) {\\n            require(block.timestamp > CONSTRUCTION_TIME + 14 days, \\\"You need to wait 14 days to withdraw principle\\\");\\n            principleWithdrawed = true;\\n        }\\n\\n        DELTA_TOKEN.transfer(msg.sender, deltaDue);\\n        uint256 leftOver = DELTA_TOKEN.balanceOf(address(this));\\n\\n        IDeltaDistributor distributor = deltaDistributor();//Reverts if its not set.\\n\\n        if(leftOver > 0) { \\n            DELTA_TOKEN.approve(address(distributor), leftOver);\\n            distributor.addDevested(msg.sender, leftOver);\\n        }\\n        everythingWithdrawed = true;\\n    }\\n\\n    function withdrawableTokens() public view returns (uint256) {\\n        if(!principleWithdrawed) { // Principle was not extracted\\n            return maturedVestingTokens().add(PRINCIPLE_DELTA);\\n        } else {\\n            return maturedVestingTokens();\\n        }\\n    }\\n\\n    function maturedVestingTokens() public view returns (uint256) {\\n        return VESTING_DELTA.mul(percentMatured()) / 100;\\n    }\\n\\n    function percentMatured() public view returns (uint256) {\\n        // This function can happen only once and is irreversible\\n        // So we get the maturation here\\n        uint256 secondsToMaturity = secondsLeftToMature();\\n        uint256 percentMaturation =  100 - (((secondsToMaturity * 1e8) / MATURATION_TIME_SECONDS) / 1e6);\\n        /// 1000 seconds left to mature \\n        /// Maturing time 10,000\\n        /// 1000 * 1e8 = 100000000000\\n        /// 100000000000/10,000 = 10000000\\n        /// we are left with float 0.1 percentage, which we would have to *100, so we divide by 1e6 to multiply by 100\\n        /// With 0 its 100 - 0\\n\\n        /// @dev we mature 5% immidietly \\n        if(percentMaturation < 5) {\\n            percentMaturation = 5;\\n        }\\n\\n        return percentMaturation;\\n    }\\n\\n    receive() external payable {\\n        revert(\\\"ETH not allowed\\\");\\n    }\\n\\n}\\n\\n\\n\"\r\n    },\r\n    \"contracts/interfaces/IDeltaToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.7.6;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\"; \\n\\nimport \\\"../common/OVLTokenTypes.sol\\\";\\n\\ninterface IDeltaToken is IERC20 {\\n    function vestingTransactions(address, uint256) external view returns (VestingTransaction memory);\\n    function getUserInfo(address) external view returns (UserInformationLite memory);\\n    function getMatureBalance(address, uint256) external view returns (uint256);\\n    function liquidityRebasingPermitted() external view returns (bool);\\n    function lpTokensInPair() external view returns (uint256);\\n    function governance() external view returns (address);\\n    function performLiquidityRebasing() external;\\n    function distributor() external view returns (address);\\n    function totalsForWallet(address ) external view returns (WalletTotals memory totals);\\n    function adjustBalanceOfNoVestingAccount(address, uint256,bool) external;\\n    function userInformation(address user) external view returns (UserInformation memory);\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/IDeltaDistributor.sol\": {\r\n      \"content\": \"pragma solidity ^0.7.6;\\n\\ninterface IDeltaDistributor {\\n    function creditUser(address,uint256) external;\\n    function addDevested(address, uint256) external;\\n    function distribute() external;\\n}\"\r\n    },\r\n    \"contracts/v076/libs/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/common/OVLTokenTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// DELTA-BUG-BOUNTY\\n\\npragma solidity ^0.7.6;\\n\\nstruct VestingTransaction {\\n    uint256 amount;\\n    uint256 fullVestingTimestamp;\\n}\\n\\nstruct WalletTotals {\\n    uint256 mature;\\n    uint256 immature;\\n    uint256 total;\\n}\\n\\nstruct UserInformation {\\n    // This is going to be read from only [0]\\n    uint256 mostMatureTxIndex;\\n    uint256 lastInTxIndex;\\n    uint256 maturedBalance;\\n    uint256 maxBalance;\\n    bool fullSenderWhitelisted;\\n    // Note that recieving immature balances doesnt mean they recieve them fully vested just that senders can do it\\n    bool immatureReceiverWhitelisted;\\n    bool noVestingWhitelisted;\\n}\\n\\nstruct UserInformationLite {\\n    uint256 maturedBalance;\\n    uint256 maxBalance;\\n    uint256 mostMatureTxIndex;\\n    uint256 lastInTxIndex;\\n}\\n\\nstruct VestingTransactionDetailed {\\n    uint256 amount;\\n    uint256 fullVestingTimestamp;\\n    // uint256 percentVestedE4;\\n    uint256 mature;\\n    uint256 immature;\\n}\\n\\n\\nuint256 constant QTY_EPOCHS = 7;\\n\\nuint256 constant SECONDS_PER_EPOCH = 172800; // About 2days\\n\\nuint256 constant FULL_EPOCH_TIME = SECONDS_PER_EPOCH * QTY_EPOCHS;\\n\\n// Precision Multiplier -- this many zeros (23) seems to get all the precision needed for all 18 decimals to be only off by a max of 1 unit\\nuint256 constant PM = 1e23;\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MATURATION_TIME_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRINCIPLE_DELTA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VESTING_DELTA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deltaDistributor\",\"outputs\":[{\"internalType\":\"contract IDeltaDistributor\",\"name\":\"distributor\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergency\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"everythingWithdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_matuartionTimeSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_principledDelta\",\"type\":\"uint256\"},{\"internalType\":\"contract IDeltaToken\",\"name\":\"delta\",\"type\":\"address\"}],\"name\":\"intitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturedVestingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentMatured\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"principleWithdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsLeftToMature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsLeftUntilPrincipleUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isInEmergency\",\"type\":\"bool\"}],\"name\":\"toggleEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEverythingWithdrawable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPrinciple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokensWithPermissionFromOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"DELTA_Deep_Vault_Withdrawal","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}