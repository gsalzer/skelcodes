{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-04-22\r\n*/\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.6.7;\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IERC1155 {\r\n    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\r\n}\r\n\r\ncontract EnglishAuction {\r\n    using SafeMath for uint256;\r\n    // System settings\r\n    uint256 public id;\r\n    address public token;\r\n    bool public ended = false;\r\n    \r\n    // Current winning bid\r\n    uint256 public lastBid;\r\n    address payable public winning;\r\n    \r\n    uint256 public length;\r\n    uint256 public startTime;\r\n    uint256 public endTime;\r\n    \r\n    address payable public haus;\r\n    address payable public seller;\r\n    \r\n    event Bid(address who, uint256 amount);\r\n    event Won(address who, uint256 amount);\r\n    \r\n    constructor() public {\r\n        token = address(0x13bAb10a88fc5F6c77b87878d71c9F1707D2688A);\r\n        id = 64;\r\n        startTime = 1619550000;\r\n        length = 24 hours;\r\n        endTime = startTime + length;\r\n        lastBid = 0.5 ether;\r\n        seller = payable(address(0x15884D7a5567725E0306A90262ee120aD8452d58));\r\n        haus = payable(address(0x38747BAF050d3C22315a761585868DbA16abFD89));\r\n    }\r\n    \r\n    function bid() public payable {\r\n        require(msg.sender == tx.origin, \"no contracts\");\r\n        require(block.timestamp >= startTime, \"Auction not started\");\r\n        require(block.timestamp < endTime, \"Auction ended\");\r\n        require(msg.value >= lastBid.mul(110).div(100), \"Bid too small\"); // 10% increase\r\n        \r\n        // Give back the last bidders money\r\n        if (winning != address(0)) {\r\n            winning.transfer(lastBid);\r\n        }\r\n        \r\n        if (endTime - now < 15 minutes) {\r\n            endTime = now + 15 minutes;\r\n        }\r\n        \r\n        lastBid = msg.value;\r\n        winning = msg.sender;\r\n        emit Bid(msg.sender, msg.value);\r\n    }\r\n    \r\n    function end() public {\r\n        require(!ended, \"end already called\");\r\n        require(winning != address(0), \"no bids\");\r\n        require(!live(), \"Auction live\");\r\n        // transfer erc1155 to winner\r\n        IERC1155(token).safeTransferFrom(address(this), winning, id, 1, new bytes(0x0));\r\n        uint256 balance = address(this).balance;\r\n        uint256 hausFee = balance.div(20).mul(3);\r\n        haus.transfer(hausFee);\r\n        seller.transfer(address(this).balance);\r\n        ended = true;\r\n        emit Won(winning, lastBid);\r\n    }\r\n    \r\n    function pull() public {\r\n        require(!ended, \"end already called\");\r\n        require(winning == address(0), \"There were bids\");\r\n        require(!live(), \"Auction live\");\r\n        // transfer erc1155 to seller\r\n        IERC1155(token).safeTransferFrom(address(this), seller, id, 1, new bytes(0x0));\r\n        ended = true;\r\n    }\r\n    \r\n    function live() public view returns(bool) {\r\n        return block.timestamp < endTime;\r\n    }\r\n    \r\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure returns(bytes4) {\r\n        return bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"));\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Won\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"haus\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seller\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winning\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EnglishAuction","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2dfc35c830e6c0c8b554d80da9fae2ab68042e66545c90ed7d2aff608d22610c"}]}