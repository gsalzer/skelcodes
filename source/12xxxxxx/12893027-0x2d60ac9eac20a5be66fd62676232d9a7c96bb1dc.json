{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.6;\r\n\r\ncontract MintyProxy {\r\n    uint256[9] private _other;\r\n    string private _baseURI = \"ipfs://\";\r\n\r\n    // An existing deployment of [Minty](https://github.com/yusefnapora/minty)\r\n    address private constant IMPL = 0x712185A269f2DDe32936AEfa2eED8BDDdB72541e;\r\n\r\n    // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.2.0/contracts/proxy/ERC1967/ERC1967Upgrade.sol#L21-L26\r\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n    constructor() {\r\n        // To advertise that this contract is a proxy\r\n        assembly {\r\n            sstore(_IMPLEMENTATION_SLOT, IMPL)\r\n        }\r\n    }\r\n\r\n    // Delegates the current call to IMPL\r\n    // This function does not return to its internall call site, it will return directly to the external caller.\r\n    // From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.2.0/contracts/proxy/Proxy.sol\r\n    function _delegate() private {\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize())\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas(), IMPL, 0, calldatasize(), 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize())\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n\r\n    // Delegate mintToken to IMPL, but only if token is being minted to caller.\r\n    function mintToken(address owner, string calldata metadataURI) external returns (uint256) {\r\n        require(owner == msg.sender, \"Can only mint to self\");\r\n        _delegate();\r\n    }    \r\n\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\r\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\r\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\r\n\r\n    // Handle supportsInterface in this contract without delegation,\r\n    // so that it can work without requiring interfaceId values to be in contract storage.\r\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\r\n        return interfaceId == _INTERFACE_ID_ERC165\r\n            || interfaceId == _INTERFACE_ID_ERC721\r\n            || interfaceId == _INTERFACE_ID_ERC721_METADATA\r\n            || interfaceId == _INTERFACE_ID_ERC721_ENUMERABLE;\r\n    }\r\n    \r\n    // Delegate all other calls to IMPL\r\n    fallback() external {\r\n        _delegate();\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"mintToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"MintyProxy","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"1","Implementation":"0x712185a269f2dde32936aefa2eed8bdddb72541e","SwarmSource":"ipfs://645a7f812c935b087968a2d157d986883e936a164d290a2b7d77114debaceaeb"}]}