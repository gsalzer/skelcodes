{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev give an account access to this role\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(!has(role, account));\r\n\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove an account's access to this role\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(account != address(0));\r\n        require(has(role, account));\r\n\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev check if an account has this role\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0));\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title WhitelistAdminRole\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n */\r\ncontract WhitelistAdminRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistAdminAdded(address indexed account);\r\n    event WhitelistAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelistAdmins;\r\n\r\n    constructor () internal {\r\n        _addWhitelistAdmin(msg.sender);\r\n    }\r\n\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    function renounceWhitelistAdmin() public {\r\n        _removeWhitelistAdmin(msg.sender);\r\n    }\r\n\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n        emit WhitelistAdminAdded(account);\r\n    }\r\n\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n}\r\n\r\n\r\ninterface ERC20fraction {\r\n  function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface AggregatorFraction {\r\n  function decimals() external view returns (uint8);\r\n  function latestAnswer() external view returns (int256);\r\n  function latestTimestamp() external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ChainlinkConversionPath\r\n *\r\n * @notice ChainlinkConversionPath is a contract allowing to compute conversion rate from a Chainlink aggretators\r\n */\r\ncontract ChainlinkConversionPath is WhitelistAdminRole {\r\n  using SafeMath for uint256;\r\n\r\n  uint constant DECIMALS = 1e18;\r\n\r\n  // Mapping of Chainlink aggregators (input currency => output currency => contract address)\r\n  // input & output currencies are the addresses of the ERC20 contracts OR the sha3(\"currency code\")\r\n  mapping(address => mapping(address => address)) public allAggregators;\r\n\r\n  // declare a new aggregator\r\n  event AggregatorUpdated(address _input, address _output, address _aggregator);\r\n\r\n  /**\r\n    * @notice Update an aggregator\r\n    * @param _input address representing the input currency\r\n    * @param _output address representing the output currency\r\n    * @param _aggregator address of the aggregator contract\r\n  */\r\n  function updateAggregator(address _input, address _output, address _aggregator)\r\n    external\r\n    onlyWhitelistAdmin\r\n  {\r\n    allAggregators[_input][_output] = _aggregator;\r\n    emit AggregatorUpdated(_input, _output, _aggregator);\r\n  }\r\n\r\n  /**\r\n    * @notice Update a list of aggregators\r\n    * @param _inputs list of addresses representing the input currencies\r\n    * @param _outputs list of addresses representing the output currencies\r\n    * @param _aggregators list of addresses of the aggregator contracts\r\n  */\r\n  function updateAggregatorsList(address[] calldata _inputs, address[] calldata _outputs, address[] calldata _aggregators)\r\n    external\r\n    onlyWhitelistAdmin\r\n  {\r\n    require(_inputs.length == _outputs.length, \"arrays must have the same length\");\r\n    require(_inputs.length == _aggregators.length, \"arrays must have the same length\");\r\n\r\n    // For every conversions of the path\r\n    for (uint i; i < _inputs.length; i++) {\r\n      allAggregators[_inputs[i]][_outputs[i]] = _aggregators[i];\r\n      emit AggregatorUpdated(_inputs[i], _outputs[i], _aggregators[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @notice Computes the conversion from an amount through a list of conversion\r\n  * @param _amountIn Amount to convert\r\n  * @param _path List of addresses representing the currencies for the conversions\r\n  * @return result the result after all the conversion\r\n  * @return oldestRateTimestamp he oldest timestamp of the path\r\n  */\r\n  function getConversion(\r\n    uint256 _amountIn,\r\n    address[] calldata _path\r\n  )\r\n    external\r\n    view\r\n    returns (uint256 result, uint256 oldestRateTimestamp)\r\n  {\r\n    (uint256 rate, uint256 timestamp, uint256 decimals) = getRate(_path);\r\n\r\n    // initialize the result\r\n    result = _amountIn.mul(rate).div(decimals);\r\n\r\n    oldestRateTimestamp = timestamp;\r\n  }\r\n\r\n  /**\r\n  * @notice Computes the rate from a list of conversion\r\n  * @param _path List of addresses representing the currencies for the conversions\r\n  * @return rate the rate\r\n  * @return oldestRateTimestamp he oldest timestamp of the path\r\n  * @return decimals of the conversion rate\r\n  */\r\n  function getRate(\r\n    address[] memory _path\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 rate, uint256 oldestRateTimestamp, uint256 decimals)\r\n  {\r\n    // initialize the result with 1e18 decimals (for more precision)\r\n    rate = DECIMALS;\r\n    decimals = DECIMALS;\r\n    oldestRateTimestamp = block.timestamp;\r\n\r\n    // For every conversions of the path\r\n    for (uint i; i < _path.length - 1; i++) {\r\n      (AggregatorFraction aggregator, bool reverseAggregator, uint256 decimalsInput, uint256 decimalsOutput) = getAggregatorAndDecimals(_path[i], _path[i + 1]);\r\n\r\n      // store the latest timestamp of the path\r\n      uint256 currentTimestamp = aggregator.latestTimestamp();\r\n      if (currentTimestamp < oldestRateTimestamp) {\r\n        oldestRateTimestamp = currentTimestamp;\r\n      }\r\n\r\n      // get the rate of the current step\r\n      uint256 currentRate = uint256(aggregator.latestAnswer());\r\n      // get the number of decimal of the current rate\r\n      uint256 decimalsAggregator = uint256(aggregator.decimals());\r\n\r\n      // mul with the difference of decimals before the current rate computation (for more precision)\r\n      if (decimalsAggregator > decimalsInput) {\r\n        rate = rate.mul(10**(decimalsAggregator-decimalsInput));\r\n      }\r\n      if (decimalsAggregator < decimalsOutput) {\r\n        rate = rate.mul(10**(decimalsOutput-decimalsAggregator));\r\n      }\r\n\r\n      // Apply the current rate (if path uses an aggregator in the reverse way, div instead of mul)\r\n      if (reverseAggregator) {\r\n        rate = rate.mul(10**decimalsAggregator).div(currentRate);\r\n      } else {\r\n        rate = rate.mul(currentRate).div(10**decimalsAggregator);\r\n      }\r\n\r\n      // div with the difference of decimals AFTER the current rate computation (for more precision)\r\n      if (decimalsAggregator < decimalsInput) {\r\n        rate = rate.div(10**(decimalsInput-decimalsAggregator));\r\n      }\r\n      if (decimalsAggregator > decimalsOutput) {\r\n        rate = rate.div(10**(decimalsAggregator-decimalsOutput));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @notice Gets aggregators and decimals of two currencies\r\n  * @param _input input Address\r\n  * @param _output output Address\r\n  * @return aggregator to get the rate between the two currencies\r\n  * @return reverseAggregator true if the aggregator returned give the rate from _output to _input\r\n  * @return decimalsInput decimals of _input\r\n  * @return decimalsOutput decimals of _output\r\n  */\r\n  function getAggregatorAndDecimals(address _input, address _output)\r\n    private\r\n    view\r\n    returns (AggregatorFraction aggregator, bool reverseAggregator, uint256 decimalsInput, uint256 decimalsOutput)\r\n  {\r\n    // Try to get the right aggregator for the conversion\r\n    aggregator = AggregatorFraction(allAggregators[_input][_output]);\r\n    reverseAggregator = false;\r\n\r\n    // if no aggregator found we try to find an aggregator in the reverse way\r\n    if (address(aggregator) == address(0x00)) {\r\n      aggregator = AggregatorFraction(allAggregators[_output][_input]);\r\n      reverseAggregator = true;\r\n    }\r\n\r\n    require(address(aggregator) != address(0x00), \"No aggregator found\");\r\n\r\n    // get the decimals for the two currencies\r\n    decimalsInput = getDecimals(_input);\r\n    decimalsOutput = getDecimals(_output);\r\n  }\r\n\r\n  /**\r\n  * @notice Gets decimals from an address currency\r\n  * @param _addr address to check\r\n  * @return number of decimals\r\n  */\r\n  function getDecimals(address _addr)\r\n    private\r\n    view\r\n    returns (uint256 decimals)\r\n  {\r\n    // by default we assume it is FIAT so 8 decimals\r\n    decimals = 8;\r\n    // if address is 0, then it's ETH\r\n    if (_addr == address(0x0)) {\r\n      decimals = 18;\r\n    } else if (isContract(_addr)) {\r\n      // otherwise, we get the decimals from the erc20 directly\r\n      decimals = ERC20fraction(_addr).decimals();\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @notice Checks if an address is a contract\r\n  * @param _addr Address to check\r\n  * @return true if the address host a contract, false otherwise\r\n  */\r\n  function isContract(address _addr)\r\n    private\r\n    view\r\n    returns (bool)\r\n  {\r\n    uint32 size;\r\n    // solium-disable security/no-inline-assembly\r\n    assembly {\r\n      size := extcodesize(_addr)\r\n    }\r\n    return (size > 0);\r\n  }\r\n}\r\n\r\ninterface IERC20FeeProxy {\r\n  event TransferWithReferenceAndFee(\r\n    address tokenAddress,\r\n    address to,\r\n    uint256 amount,\r\n    bytes indexed paymentReference,\r\n    uint256 feeAmount,\r\n    address feeAddress\r\n  );\r\n\r\n  function transferFromWithReferenceAndFee(\r\n    address _tokenAddress,\r\n    address _to,\r\n    uint256 _amount,\r\n    bytes calldata _paymentReference,\r\n    uint256 _feeAmount,\r\n    address _feeAddress\r\n    ) external;\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20ConversionProxy\r\n */\r\ncontract ERC20ConversionProxy {\r\n  using SafeMath for uint256;\r\n\r\n  address public paymentProxy;\r\n  ChainlinkConversionPath public chainlinkConversionPath;\r\n\r\n  constructor(address _paymentProxyAddress, address _chainlinkConversionPathAddress) public {\r\n    paymentProxy = _paymentProxyAddress;\r\n    chainlinkConversionPath = ChainlinkConversionPath(_chainlinkConversionPathAddress);\r\n  }\r\n\r\n  // Event to declare a transfer with a reference\r\n  event TransferWithConversionAndReference(\r\n    uint256 amount,\r\n    address currency,\r\n    bytes indexed paymentReference,\r\n    uint256 feeAmount,\r\n    uint256 maxRateTimespan\r\n  );\r\n\r\n  /**\r\n   * @notice Performs an ERC20 token transfer with a reference computing the amount based on a fiat amount\r\n   * @param _to Transfer recipient\r\n   * @param _requestAmount request amount\r\n   * @param _path conversion path\r\n   * @param _paymentReference Reference of the payment related\r\n   * @param _feeAmount The amount of the payment fee\r\n   * @param _feeAddress The fee recipient\r\n   * @param _maxToSpend amount max that we can spend on the behalf of the user\r\n   * @param _maxRateTimespan max time span with the oldestrate, ignored if zero\r\n   */\r\n  function transferFromWithReferenceAndFee(\r\n    address _to,\r\n    uint256 _requestAmount,\r\n    address[] calldata _path,\r\n    bytes calldata _paymentReference,\r\n    uint256 _feeAmount,\r\n    address _feeAddress,\r\n    uint256 _maxToSpend,\r\n    uint256 _maxRateTimespan\r\n  ) external\r\n  {\r\n    (uint256 amountToPay, uint256 amountToPayInFees) = getConversions(_path, _requestAmount, _feeAmount, _maxRateTimespan);\r\n\r\n    require(amountToPay.add(amountToPayInFees) <= _maxToSpend, \"Amount to pay is over the user limit\");\r\n\r\n    // Pay the request and fees\r\n    (bool status, ) = paymentProxy.delegatecall(\r\n      abi.encodeWithSignature(\r\n        \"transferFromWithReferenceAndFee(address,address,uint256,bytes,uint256,address)\",\r\n        // payment currency\r\n        _path[_path.length - 1],\r\n        _to,\r\n        amountToPay,\r\n        _paymentReference,\r\n        amountToPayInFees,\r\n        _feeAddress\r\n      )\r\n    );\r\n    require(status, \"transferFromWithReferenceAndFee failed\");\r\n\r\n    // Event to declare a transfer with a reference\r\n    emit TransferWithConversionAndReference(\r\n      _requestAmount,\r\n      // request currency\r\n      _path[0],\r\n      _paymentReference,\r\n      _feeAmount,\r\n      _maxRateTimespan\r\n    );\r\n  }\r\n\r\n  function getConversions(\r\n    address[] memory _path,\r\n    uint256 _requestAmount,\r\n    uint256 _feeAmount,\r\n    uint256 _maxRateTimespan\r\n  ) internal\r\n    returns (uint256 amountToPay, uint256 amountToPayInFees)\r\n  {\r\n    (uint256 rate, uint256 oldestTimestampRate, uint256 decimals) = chainlinkConversionPath.getRate(_path);\r\n\r\n    // Check rate timespan\r\n    require(_maxRateTimespan == 0 || block.timestamp.sub(oldestTimestampRate) <= _maxRateTimespan, \"aggregator rate is outdated\");\r\n    \r\n    // Get the amount to pay in the crypto currency chosen\r\n    amountToPay = _requestAmount.mul(rate).div(decimals);\r\n    amountToPayInFees = _feeAmount.mul(rate).div(decimals);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentProxyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chainlinkConversionPathAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"paymentReference\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxRateTimespan\",\"type\":\"uint256\"}],\"name\":\"TransferWithConversionAndReference\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"chainlinkConversionPath\",\"outputs\":[{\"internalType\":\"contract ChainlinkConversionPath\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paymentProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requestAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_paymentReference\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxToSpend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxRateTimespan\",\"type\":\"uint256\"}],\"name\":\"transferFromWithReferenceAndFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ERC20ConversionProxy","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"20000","ConstructorArguments":"000000000000000000000000370de27fdb7d1ff1e1baa7d11c5820a324cf623c000000000000000000000000f7228efefa12cd768e0f32a7c5cd0c0d68f835e4","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://426e9139409f0f1d38a43f6f41340793219aec791925865cfefcc8e3da237df0"}]}