{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/elenaderymova/projects/work/4irelabs/options-market-vaults/contracts/AcceleratorVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.1;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./facades/IERC20.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./PriceOracle.sol\\\";\\n\\ncontract AcceleratorVault is Ownable {\\n    /** Emitted when purchaseLP() is called to track ETH amounts */\\n    event EthereumDeposited(\\n        address from,\\n        address to,\\n        uint amount,\\n        uint percentageAmount\\n    );\\n\\n    /** Emitted when purchaseLP() is called and LP tokens minted */\\n    event LPQueued(\\n        address holder,\\n        uint amount,\\n        uint eth,\\n        uint osmToken,\\n        uint timestamp\\n    );\\n\\n    /** Emitted when claimLP() is called */\\n    event LPClaimed(\\n        address holder,\\n        uint amount,\\n        uint timestamp,\\n        uint exitFee,\\n        bool claimed\\n    );\\n\\n    struct LPbatch {\\n        address holder;\\n        uint amount;\\n        uint timestamp;\\n        bool claimed;\\n    }\\n\\n    struct AcceleratorVaultConfig {\\n        address osmToken;\\n        IUniswapV2Router02 uniswapRouter;\\n        IUniswapV2Pair tokenPair;\\n        PriceOracle uniswapOracle;\\n        address weth;\\n        address payable ethHodler;\\n        uint32 stakeDuration;\\n        uint8 donationShare; //0-100\\n        uint8 purchaseFee; //0-100\\n    }\\n\\n    bool public forceUnlock;\\n    bool private locked;\\n\\n    modifier lock {\\n        require(!locked, \\\"AcceleratorVault: reentrancy violation\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    AcceleratorVaultConfig public config;\\n\\n    mapping(address => LPbatch[]) public lockedLP;\\n    mapping(address => uint) public queueCounter;\\n\\n    function seed(\\n        uint32 duration,\\n        address osmToken,\\n        address uniswapPair,\\n        address uniswapRouter,\\n        address payable ethHodler,\\n        uint8 donationShare, // LP Token\\n        uint8 purchaseFee, // ETH\\n        PriceOracle uniswapOracle\\n    ) public onlyOwner {\\n        config.osmToken = osmToken;\\n        config.uniswapRouter = IUniswapV2Router02(uniswapRouter);\\n        config.tokenPair = IUniswapV2Pair(uniswapPair);\\n        config.weth = config.uniswapRouter.WETH();\\n        config.uniswapOracle = uniswapOracle;\\n        setEthHodlerAddress(ethHodler);\\n        setParameters(duration, donationShare, purchaseFee);\\n    }\\n\\n    function setOracleAddress(PriceOracle _uniswapOracle) external onlyOwner {\\n        require(address(_uniswapOracle) != address(0), \\\"Zero address not allowed\\\");\\n        config.uniswapOracle = _uniswapOracle;\\n    }\\n\\n    function getStakeDuration() public view returns (uint) {\\n        return forceUnlock ? 0 : config.stakeDuration;\\n    }\\n\\n    // Could not be canceled if activated\\n    function enableLPForceUnlock() public onlyOwner {\\n        forceUnlock = true;\\n    }\\n\\n    function setEthHodlerAddress(address payable ethHodler) public onlyOwner {\\n        require(\\n            ethHodler != address(0),\\n            \\\"AcceleratorVault: eth receiver is zero address\\\"\\n        );\\n\\n        config.ethHodler = ethHodler;\\n    }\\n\\n    function setParameters(uint32 duration, uint8 donationShare, uint8 purchaseFee)\\n        public\\n        onlyOwner\\n    {\\n        require(\\n            donationShare <= 100,\\n            \\\"AcceleratorVault: donation share % between 0 and 100\\\"\\n        );\\n        require(\\n            purchaseFee <= 100,\\n            \\\"AcceleratorVault: purchase fee share % between 0 and 100\\\"\\n        );\\n\\n        config.stakeDuration = duration * 1 days;\\n        config.donationShare = donationShare;\\n        config.purchaseFee = purchaseFee;\\n    }\\n\\n    function purchaseLPFor(address beneficiary) public payable lock {\\n        require(msg.value > 0, \\\"AcceleratorVault: ETH required to mint OSM LP\\\");\\n\\n        uint feeValue = (config.purchaseFee * msg.value) / 100;\\n        uint exchangeValue = msg.value - feeValue;\\n\\n        (uint reserve1, uint reserve2, ) = config.tokenPair.getReserves();\\n\\n        uint osmRequired;\\n\\n        if (address(config.osmToken) < address(config.weth)) {\\n            osmRequired = config.uniswapRouter.quote(\\n                exchangeValue,\\n                reserve2,\\n                reserve1\\n            );\\n        } else {\\n            osmRequired = config.uniswapRouter.quote(\\n                exchangeValue,\\n                reserve1,\\n                reserve2\\n            );\\n        }\\n\\n        uint balance = IERC20(config.osmToken).balanceOf(address(this));\\n        require(\\n            balance >= osmRequired,\\n            \\\"AcceleratorVault: insufficient OSM tokens in AcceleratorVault\\\"\\n        );\\n\\n        IWETH(config.weth).deposit{ value: exchangeValue }();\\n        address tokenPairAddress = address(config.tokenPair);\\n        IWETH(config.weth).transfer(tokenPairAddress, exchangeValue);\\n        IERC20(config.osmToken).transfer(\\n            tokenPairAddress,\\n            osmRequired\\n        );\\n        //ETH receiver is hodler vault here\\n        config.ethHodler.transfer(feeValue);\\n        config.uniswapOracle.update();\\n\\n        uint liquidityCreated = config.tokenPair.mint(address(this));\\n\\n        lockedLP[beneficiary].push(\\n            LPbatch({\\n                holder: beneficiary,\\n                amount: liquidityCreated,\\n                timestamp: block.timestamp,\\n                claimed: false\\n            })\\n        );\\n\\n        emit LPQueued(\\n            beneficiary,\\n            liquidityCreated,\\n            exchangeValue,\\n            osmRequired,\\n            block.timestamp\\n        );\\n\\n        emit EthereumDeposited(msg.sender, config.ethHodler, exchangeValue, feeValue);\\n    }\\n\\n    //send eth to match with OSM tokens in AcceleratorVault\\n    function purchaseLP() public payable {\\n        purchaseLPFor(msg.sender);\\n    }\\n\\n    function claimLP() public {\\n        uint next = queueCounter[msg.sender];\\n        require(\\n            next < lockedLP[msg.sender].length,\\n            \\\"AcceleratorVault: nothing to claim.\\\"\\n        );\\n        LPbatch storage batch = lockedLP[msg.sender][next];\\n        require(\\n            block.timestamp - batch.timestamp > getStakeDuration(),\\n            \\\"AcceleratorVault: LP still locked.\\\"\\n        );\\n        next++;\\n        queueCounter[msg.sender] = next;\\n        uint donation = (config.donationShare * batch.amount) / 100;\\n        batch.claimed = true;\\n        emit LPClaimed(msg.sender, batch.amount, block.timestamp, donation, batch.claimed);\\n        require(\\n            config.tokenPair.transfer(address(0), donation),\\n            \\\"AcceleratorVault: donation transfer failed in LP claim.\\\"\\n        );\\n        require(\\n            config.tokenPair.transfer(batch.holder, batch.amount - donation),\\n            \\\"AcceleratorVault: transfer failed in LP claim.\\\"\\n        );\\n    }\\n\\n    function lockedLPLength(address holder) public view returns (uint) {\\n        return lockedLP[holder].length;\\n    }\\n\\n    function getLockedLP(address holder, uint position)\\n        public\\n        view\\n        returns (\\n            address,\\n            uint,\\n            uint,\\n            bool\\n        )\\n    {\\n        LPbatch memory batch = lockedLP[holder][position];\\n        return (batch.holder, batch.amount, batch.timestamp, batch.claimed);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/elenaderymova/projects/work/4irelabs/options-market-vaults/contracts/PriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.1;\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport '@uniswap/lib/contracts/libraries/FixedPoint.sol';\\nimport '@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol';\\nimport \\\"./facades/IERC20.sol\\\";\\n\\n\\ncontract PriceOracle {\\n    using FixedPoint for *;\\n    IUniswapV2Pair public immutable pair;\\n    uint public immutable multiplier;\\n    uint private priceLast;\\n    uint public priceCumulativeLast;\\n    uint32 public blockTimestampLast;\\n\\n    address public tokenA;\\n    address public tokenB;\\n    address public token0;\\n\\n    constructor(IUniswapV2Pair _pair, address _tokenA, address _tokenB) public {\\n        pair = _pair;\\n        tokenA = _tokenA;\\n        tokenB = _tokenB;\\n        multiplier = uint(10)**(IERC20(_pair.token1()).decimals());\\n        (token0, ) = _tokenA < _tokenB\\n            ? (_tokenA, _tokenB)\\n            : (_tokenB, _tokenA);\\n        \\n        if(token0 == _tokenA) {\\n          priceCumulativeLast = _pair.price0CumulativeLast();\\n        } else {\\n          priceCumulativeLast = _pair.price1CumulativeLast();\\n        }\\n    }\\n    function update() public returns(uint) {\\n        uint112 reserve0;\\n        uint112 reserve1;\\n        (reserve0, reserve1, blockTimestampLast) = pair.getReserves();\\n        require(reserve0 != 0 && reserve1 != 0, 'PriceOracle: NO_RESERVES');\\n\\n        uint _priceCumulative;\\n        (uint _price0Cumulative, uint _price1Cumulative, uint32 _blockTimestamp) =\\n            UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\\n        if(token0 == tokenA) {\\n          _priceCumulative = _price0Cumulative;\\n        } else {\\n          _priceCumulative = _price1Cumulative;\\n        }\\n        uint _priceCumulativeLast = priceCumulativeLast;\\n        uint _blockTimestampLast = blockTimestampLast;\\n        uint _price;\\n        if (_blockTimestamp != _blockTimestampLast) {\\n            _price = FixedPoint.uq112x112(uint224((_priceCumulative - _priceCumulativeLast) /\\n                (_blockTimestamp - _blockTimestampLast))).mul(multiplier).decode144();\\n            priceLast = _price;\\n            priceCumulativeLast = _priceCumulative;\\n            blockTimestampLast = _blockTimestamp;\\n        } else {\\n            _price = priceLast;\\n        }\\n        return _price;\\n    }\\n    // note this will always return 0 before update has been called successfully for the first time.\\n    function consult() external view returns (uint) {\\n        uint _priceCumulative;\\n\\n        (uint _price0Cumulative, uint _price1Cumulative, uint32 _blockTimestamp) =\\n            UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\\n\\n        if(token0 == tokenA) {\\n          _priceCumulative = _price0Cumulative;\\n        } else {\\n          _priceCumulative = _price1Cumulative;\\n        }\\n        uint _priceCumulativeLast = priceCumulativeLast;\\n        uint _blockTimestampLast = blockTimestampLast;\\n        // most recent price is already calculated.\\n        if (_blockTimestamp == _blockTimestampLast) {\\n            return priceLast;\\n        }\\n        return FixedPoint.uq112x112(uint224((_priceCumulative - _priceCumulativeLast) / \\n            (_blockTimestamp - _blockTimestampLast))).mul(multiplier).decode144();\\n    }\\n    function updateAndConsult() external returns (uint) {\\n        return update();\\n    }\\n}\"\r\n    },\r\n    \"/Users/elenaderymova/projects/work/4irelabs/options-market-vaults/contracts/facades/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.1;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n\\n    function decimals() external view returns (uint8);\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/lib/contracts/libraries/FixedPoint.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.0;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\\n        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\\n        return uq112x112(self._x / uint224(x));\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\\n        uint z;\\n        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), \\\"FixedPoint: MULTIPLICATION_OVERFLOW\\\");\\n        return uq144x112(z);\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\nimport '@uniswap/lib/contracts/libraries/FixedPoint.sol';\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentageAmount\",\"type\":\"uint256\"}],\"name\":\"EthereumDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"name\":\"LPClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"osmToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LPQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"osmToken\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"tokenPair\",\"type\":\"address\"},{\"internalType\":\"contract PriceOracle\",\"name\":\"uniswapOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"ethHodler\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"stakeDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"donationShare\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"purchaseFee\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLPForceUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceUnlock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getLockedLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"lockedLPLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseLP\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"purchaseLPFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"queueCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"osmToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"ethHodler\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"donationShare\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"purchaseFee\",\"type\":\"uint8\"},{\"internalType\":\"contract PriceOracle\",\"name\":\"uniswapOracle\",\"type\":\"address\"}],\"name\":\"seed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"ethHodler\",\"type\":\"address\"}],\"name\":\"setEthHodlerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PriceOracle\",\"name\":\"_uniswapOracle\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"donationShare\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"purchaseFee\",\"type\":\"uint8\"}],\"name\":\"setParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AcceleratorVault","CompilerVersion":"v0.7.1+commit.f4a555be","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}