{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/home/smartcontract/hpay-token/contracts/ERC20tokenPresetModified.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Modified from: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/master/contracts/presets/ERC20PresetMinterPauserUpgradeable.sol\\n\\npragma solidity 0.6.12;\\n\\n// MODIFIED: import paths\\n// import \\\"../access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"./interfaces/IManagementContract.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * - This is a slighlty modified version of {ERC20PresetMinterPauserUpgradeable} by OpenZeppelin.\\n *\\n * The contract uses {Initializable}, {ContextUpgradeable}, {ERC20BurnableUpgradeable}, {ERC20PausableUpgradeable} from OpenZeppelin\\n *\\n * This contract uses {HManagementContract} to control permissions using the\\n * different roles..\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to aother accounts\\n */\\ncontract ERC20PresetMinterPauserUpgradeableModified is Initializable, ContextUpgradeable, ERC20BurnableUpgradeable, ERC20PausableUpgradeable { // MODIFIED\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00; // ADDED\\n    // bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 private constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    IManagementContract public managementContract; // ADDED\\n\\n    /**\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\n     * account that deploys the contract.\\n     *\\n     * `managementContractAddress` is a custom variable pointing to the\\n     * Himalaya's management contract in order to offload certain functionality\\n     * to the shared contract\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n\\n    function initialize(string memory name, string memory symbol, address managementContractAddress) public virtual {\\n        // MODIFIED\\n        managementContract = IManagementContract(managementContractAddress); // ADDED\\n        __ERC20PresetMinterPauser_init(name, symbol);\\n    }\\n\\n    /**\\n     * @dev Modified function. Two functions `__AccessControl_init_unchained` and `__ERC20PresetMinterPauser_init_unchained`\\n     * have been moved to the {HManagementContract}\\n     *\\n     */\\n    function __ERC20PresetMinterPauser_init(string memory name, string memory symbol) internal initializer {\\n        __Context_init_unchained();\\n        // __AccessControl_init_unchained();               // MODIFIED\\n        __ERC20_init_unchained(name, symbol);\\n        __ERC20Burnable_init_unchained();\\n        __Pausable_init_unchained();\\n        __ERC20Pausable_init_unchained();\\n        // __ERC20PresetMinterPauser_init_unchained(name, symbol); // MODIFIED\\n    }\\n\\n    /**\\n     * @dev Modified function. Setting up roles is moved to the {managamentContract}\\n     * Also the mint function is only in the `mainnet` version (not on `quorum` version)\\n     */\\n    function __ERC20PresetMinterPauser_init_unchained(string memory name, string memory symbol) internal initializer {\\n        // _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());    // MODIFIED\\n        // _setupRole(MINTER_ROLE, _msgSender());           // MODIFIED\\n        // _setupRole(PAUSER_ROLE, _msgSender());           // MODIFIED\\n    }\\n\\n    /**\\n     * @dev Pauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function pause() public virtual {\\n        require(managementContract.hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to pause\\\"); // MODIFIED\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpauses all token transfers.\\n     *\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `PAUSER_ROLE`.\\n     */\\n    function unpause() public virtual {\\n        require(managementContract.hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\"); // MODIFIED\\n        _unpause();\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20Upgradeable, ERC20PausableUpgradeable) {\\n        // MODIFIED\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"/home/smartcontract/hpay-token/contracts/HHH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"./ERC20tokenPresetModified.sol\\\";\\nimport \\\"./interfaces/IERC1404.sol\\\";\\nimport \\\"./interfaces/IERC165.sol\\\";\\n\\n/// @title HHH Himalaya HEX HPay\\n/**\\n * @dev HHH is the main ERC20 compatible token with additional functionality provided by Himalaya Group\\n * - 24 hours delays for non whitelisted users\\n * - ability for Admin to recover stolen funds from pending deposits locked in 24 hours delay.\\n * - connects with HManagementContract to check if users are whitelisted.\\n *\\n * See HManagementContract to find out more about whitelisting.\\n *\\n * The contract uses {ERC20PresetMinterPauserUpgradeableModified} (slightly modified version of OpenZeppelin of {ERC20PresetMinterPauserUpgradeable})\\n * to manage minting, burning and pausing activities\\n */\\ncontract HHH is ERC20PresetMinterPauserUpgradeableModified, IERC1404, IERC165 {\\n    /// @dev Whitelisting role\\n    bytes32 private constant WHITELIST_ROLE = keccak256(\\\"WHITELIST_ROLE\\\");\\n\\n    /**\\n     * @dev Mapping of users to {Deposit}. It stores amount of tokens unavailable for immidiate transfer\\n     * for not whitelisted users.\\n     *\\n     * Tokens locked here are removed after {nonWhitelistedDelay}. Any changes to pendingDeposits do not change\\n     * user's balance. For example, if user has 100 tokens, but 60 of them are in pendingDeposits, the user's\\n     * balance is still 100 tokens, but available balance to spend would be 40. If 30 tokens in pendingDeposits\\n     * exceed the {nonWhitelistedDelay}, they will be removed from the deposits and the user's available balance\\n     * will become 70, while still have a full balance of 100.\\n     */\\n    mapping(address => Deposit[]) public pendingDeposits;\\n\\n    /// @dev Minimum amount allowed to transfer\\n    uint256 public nonWhitelistedDustThreshold; // This is to prevent attacker making multiple small deposits and preventing legitimate user from receiving deposits\\n\\n    /**\\n     * @dev Emitted when 'amount' is recovered from {pendingDeposits} in 'from' account\\n     * to 'to' account.\\n     */\\n    event RecoverFrozen(address from, address to, uint256 amount);\\n\\n    /**\\n     * @dev Object which is stored in {pendingDeposits} mapping. It stored 'amount' deposited at 'time'.\\n     * It is used when non whitelisted user received funds.\\n     */\\n    struct Deposit {\\n        uint256 time;\\n        uint256 amount;\\n    }\\n\\n    /// @dev Only address which is set to Admin role can call functions with this modifier\\n    modifier onlyAdmin virtual {\\n        require(managementContract.hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"must have ADMIN ROLE\\\");\\n        _;\\n    }\\n\\n    modifier onlyManagementContract virtual {\\n        require(_msgSender() == address(managementContract), \\\"only management contract can call this function\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Sets the values for {name}, {symbol} and {HManagementContract}, initializes {nonWhitelistedDustThreshold} with\\n     * a default value of 0.1 of the coin.\\n     *\\n     * To select a different value for {nonWhitelistedDustThreshold}, use {setNonWhitelistedDustThreshold}.\\n     *\\n     * This function also initialized {ERC20PresetMinterPauserUpgradeableModified} extension contract.\\n     *\\n     * 'name' and 'symbol' values are immutable: they can only be set once during\\n     *\\n     * To update {HManagementContract}, use {changeManagementContract}\\n     * construction.\\n     */\\n    function initialize(string memory name, string memory symbol, address managementContractAddress) public virtual override initializer {\\n        require(managementContractAddress != address(0), \\\"Management contract address cannot be zero.\\\");\\n        ERC20PresetMinterPauserUpgradeableModified.initialize(name, symbol, managementContractAddress);\\n\\n        nonWhitelistedDustThreshold = 10**17; // 0.1 of the coin\\n    }\\n\\n    /**\\n     * @dev Updates the {nonWhitelistedDustThreshold}\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be admin - {onlyAdmin} modifier is applied.\\n     */\\n    function setNonWhitelistedDustThreshold(uint256 _nonWhitelistedDustThreshold) external virtual onlyAdmin {\\n        nonWhitelistedDustThreshold = _nonWhitelistedDustThreshold;\\n    }\\n\\n    /**\\n     * @dev Atomically recovers stolen funds that are still in pending deposits.\\n     * In case of law enforcements notifying Himalaya Group about a theft, Himalaya Group\\n     * is able to freeze the account and recover funds from pendingDeposit.\\n     *\\n     * It calls {_transfer} function to move `amount` from theif's `from` address to\\n     * victim's `to` address\\n     *\\n     * If `from` is not whitelisted, it calls {removeAllPendingDeposits}.\\n     * See more at {HManagementContract.whitelist})\\n     *\\n     * Emits {RecoverFrozen}\\n     *\\n     * Requirements:\\n     *\\n     * - the `from` address must be frozen. See more at {HManagementContract.freeze}\\n     * - only Admin can call this function\\n     */\\n    function recoverFrozenFunds(address from, address to, uint256 amount) external virtual onlyAdmin {\\n        require(to != address(0), \\\"Address 'to' cannot be zero.\\\");\\n        require(managementContract.isFrozen(from), \\\"Need to be frozen first\\\");\\n\\n        managementContract.unFreeze(from); // Make sure this contract has WHITELIST_ROLE on management contract\\n        if (!managementContract.isWhitelisted(from)) {\\n            removeAllPendingDeposits(from);\\n        }\\n        _transfer(from, to, amount);\\n        managementContract.freeze(from);\\n\\n        emit RecoverFrozen(from, to, amount);\\n    }\\n\\n    string public constant SUCCESS_MESSAGE = \\\"SUCCESS\\\";\\n    string public constant ERROR_REASON_GLOBAL_PAUSE = \\\"Global pause is active\\\";\\n    string public constant ERROR_REASON_TO_FROZEN = \\\"`to` address is frozen\\\";\\n    string public constant ERROR_REASON_FROM_FROZEN = \\\"`from` address is frozen\\\";\\n    string public constant ERROR_REASON_NOT_ENOUGH_UNLOCKED = \\\"User's unlocked balance is less than transfer amount\\\";\\n    string public constant ERROR_REASON_BELOW_THRESHOLD = \\\"Deposit for non-whitelisted user is below threshold\\\";\\n    string public constant ERROR_REASON_PENDING_DEPOSITS_LENGTH = \\\"Too many pending deposits for non-whitelisted user\\\";\\n    string public constant ERROR_DEFAULT = \\\"Generic error message\\\";\\n\\n    uint8 public constant SUCCESS_CODE = 0;\\n    uint8 public constant ERROR_CODE_GLOBAL_PAUSE = 1;\\n    uint8 public constant ERROR_CODE_TO_FROZEN = 2;\\n    uint8 public constant ERROR_CODE_FROM_FROZEN = 3;\\n    uint8 public constant ERROR_CODE_NOT_ENOUGH_UNLOCKED = 4;\\n    uint8 public constant ERROR_CODE_BELOW_THRESHOLD = 5;\\n    uint8 public constant ERROR_CODE_PENDING_DEPOSITS_LENGTH = 6;\\n\\n    \\n    /**\\n    * @dev Evaluates whether a transfer should be allowed or not.\\n    * Inspired by INX Token: https://etherscan.io/address/0xBBC7f7A6AADAc103769C66CBC69AB720f7F9Eae3#code\\n    */\\n    modifier notRestricted (address from, address to, uint256 value) virtual {\\n        uint8 restrictionCode = detectTransferRestriction(from, to, value);\\n        require(restrictionCode == SUCCESS_CODE, messageForTransferRestriction(restrictionCode));\\n        _;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens.\\n     * It also calls the extended contract's {ERC20Pausable._beforeTokenTransfer}.\\n     * The main purpose is to ensure that the 'from' account has enough unlocked balance\\n     * and to lock 'amount' in {pendingDeposits} if 'to' is not whitelisted.\\n     * Calling conditions:\\n     * - if `to` is SuperWhitelisted and the user doesn't have enough unlocked balance,\\n     * a part of the pendingDeposits will be unlocked to allow for instant transfer\\n     * - if 'from' is not Whitelisted, the 'from' is required to have at least 'amount' in available balance\\n     * - if 'to' is not Whitelisted, the 'to' account must have less {pendingDeposits} than {nonWhitelistedDepositLimit} or\\n     * there must be some pendingDeposits which will be released during the transfer as they are older than {nonWhitelistedDelay}\\n     * - `amount` must be bigger or equal to {nonWhitelistedDustThreshold}\\n     * Requirements:\\n     *\\n     * - The Global pause is not actived through {HManagementContract.pause}\\n     * - 'to' and 'from' addresses must not be frozen\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override notRestricted(from, to, amount) {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (managementContract.isSuperWhitelisted(to)) {\\n            // Unlock part of the locked balance, so user can make transfer to the superwhitelisted.\\n            // Do not unlock everything - it would be too easy to exploit it to circumvent the delay.\\n            // We unlock balance only when sending to SuperWhitelisted\\n            // Otherwise the simple check `unlockedBalance(from) >= amount`\\n            uint256 ub = unlockedBalance(from);\\n\\n            if (ub < amount) {\\n                uint256 amountToUnlock = amount.sub(ub);\\n                releaseDepositsForSuperWhitelisted(from, amountToUnlock);\\n            }\\n        } else {\\n            if (!managementContract.isWhitelisted(to)) {\\n                Deposit memory deposit = Deposit({time: now, amount: amount}); // solium-disable-line security/no-block-members\\n                pendingDeposits[to].push(deposit);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Member of ERC-1404 Simple Restricted Token Standard: https://github.com/ethereum/EIPs/issues/1404\\n     */\\n    function detectTransferRestriction (address from, address to, uint256 value) public virtual override view returns (uint8) {\\n        // There are other typical error conditions that are part of ERC20 standard, not our custom code\\n        // \\\"ERC20Pausable: token transfer while paused\\\"\\n        // \\\"ERC20: transfer amount exceeds balance\\\"\\n\\n        if (managementContract.paused()) {\\n            return ERROR_CODE_GLOBAL_PAUSE;\\n        }\\n        \\n        if (managementContract.isFrozen(to)) {\\n            return ERROR_CODE_TO_FROZEN;\\n        }\\n\\n        if (managementContract.isFrozen(from)) {\\n            return ERROR_CODE_FROM_FROZEN;\\n        }\\n\\n        if (!managementContract.isSuperWhitelisted(to)) {\\n            \\n            if (!managementContract.isWhitelisted(from)) {\\n                if (! (unlockedBalance(from) >= value)) {\\n                    return ERROR_CODE_NOT_ENOUGH_UNLOCKED;\\n                }\\n            }\\n\\n            if (!managementContract.isWhitelisted(to)) {\\n                uint256 nonWhitelistedDelay = managementContract.nonWhitelistedDelay();\\n                uint256 nonWhitelistedDepositLimit = managementContract.nonWhitelistedDepositLimit();\\n                uint256 pendingDepositsLength = pendingDeposits[to].length;\\n\\n                if (! (pendingDepositsLength < nonWhitelistedDepositLimit || (now > pendingDeposits[to][pendingDepositsLength - nonWhitelistedDepositLimit].time + nonWhitelistedDelay))) { // solium-disable-line security/no-block-members\\n                    return ERROR_CODE_PENDING_DEPOSITS_LENGTH;\\n                }\\n\\n                if (! (value >= nonWhitelistedDustThreshold)) {\\n                    return ERROR_CODE_BELOW_THRESHOLD;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Member of ERC-1404 Simple Restricted Token Standard: https://github.com/ethereum/EIPs/issues/1404\\n     */\\n    function messageForTransferRestriction (uint8 restrictionCode) public virtual override view returns (string memory) {\\n        if (restrictionCode == SUCCESS_CODE) {\\n            return SUCCESS_MESSAGE;\\n        } else if (restrictionCode == ERROR_CODE_GLOBAL_PAUSE) {\\n            return ERROR_REASON_GLOBAL_PAUSE;\\n        } else if (restrictionCode == ERROR_CODE_TO_FROZEN) {\\n            return ERROR_REASON_TO_FROZEN;\\n        } else if (restrictionCode == ERROR_CODE_FROM_FROZEN) {\\n            return ERROR_REASON_FROM_FROZEN;\\n        } else if (restrictionCode == ERROR_CODE_NOT_ENOUGH_UNLOCKED) {\\n            return ERROR_REASON_NOT_ENOUGH_UNLOCKED;\\n        } else if (restrictionCode == ERROR_CODE_BELOW_THRESHOLD) {\\n            return ERROR_REASON_BELOW_THRESHOLD;\\n        } else if (restrictionCode == ERROR_CODE_PENDING_DEPOSITS_LENGTH) {\\n            return ERROR_REASON_PENDING_DEPOSITS_LENGTH;\\n        } else {\\n            return ERROR_DEFAULT;\\n        }\\n    }\\n\\n    /**\\n     * @dev Member of ERC-165 Standard Interface Detection: https://eips.ethereum.org/EIPS/eip-165\\n     * See issue on internal Github to see how it is calculated: https://ec2-18-130-7-129.eu-west-2.compute.amazonaws.com/Himalaya-Exchange/hpay-token/issues/39\\n     */\\n    function supportsInterface(bytes4 interfaceId) external virtual override view returns (bool) {\\n        return interfaceId == 0x01ffc9a7 || interfaceId == 0xab84a5c8;\\n    }\\n\\n    /**\\n     * @dev Releases the `amount` from `from` user's {pendingDeposits}.\\n     * It is used only in one specific instance: sending to SuperWhitelisted\\n     * There is no need to remove old pending deposits, that happens only during whitelisting\\n     */\\n    function releaseDepositsForSuperWhitelisted(address from, uint256 amount) internal virtual {\\n        uint256 nonWhitelistedDelay = managementContract.nonWhitelistedDelay();\\n\\n        uint256 pendingDepositsLength = pendingDeposits[from].length;\\n\\n        // Iterating starting from the most recent deposits. Cannot check `>= 0`, as the `i--` will cause underflow and a very large integer\\n        // Second condition in the loop is checking the time. Unlocking from pending deposits makes sense only for the recent deposits that are within timelock\\n        for (uint256 i = pendingDepositsLength - 1; i != uint256(-1) && pendingDeposits[from][i].time > now - nonWhitelistedDelay; i--) { // solium-disable-line security/no-block-members\\n            if (amount < pendingDeposits[from][i].amount) {\\n                pendingDeposits[from][i].amount = pendingDeposits[from][i].amount.sub(amount);\\n                break;\\n            } else {\\n                amount = amount.sub(pendingDeposits[from][i].amount);\\n                pendingDeposits[from].pop();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes all pending deposits. See more at {pendingDeposits}\\n     */\\n    function removeAllPendingDeposits(address from) internal virtual {\\n        delete pendingDeposits[from];\\n    }\\n\\n    /**\\n     * @dev Removes all pending deposits. See more at {pendingDeposits}. Can be called only from management contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `managementContract`.\\n     */\\n    function removeAllPendingDepositsExternal(address addr) external virtual onlyManagementContract {\\n        delete pendingDeposits[addr];\\n    }\\n\\n    /**\\n     * @dev Adds total balance of `addr` to {pendingDeposits} with timestamp of the block.. Can be called only from management contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `managementContract`.\\n     */\\n    function putTotalBalanceToLock(address addr) external virtual onlyManagementContract {\\n        pendingDeposits[addr].push(Deposit({time: now, amount: balanceOf(addr)})); // solium-disable-line security/no-block-members\\n    }\\n\\n    //////////////////////// VIEW\\n    /**\\n     * @dev Calculates `user`'s balance that is locked in {pendingDeposits}\\n     */\\n    function lockedBalance(address user) public virtual view returns (uint256) {\\n        uint256 balanceLocked = 0;\\n        uint256 pendingDepositsLength = pendingDeposits[user].length;\\n        uint256 nonWhitelistedDelay = managementContract.nonWhitelistedDelay();\\n\\n        // Iterating starting from the most recent deposits. Cannot check `>= 0`, as the `i--` will cause underflow and a very large integer\\n        // Second condition in the loop is checking the time. We calculate `balanceLocked` using deposits that happened within `nonWhitelistedDelay` (most likely 24 hours)\\n        for (uint256 i = pendingDepositsLength - 1; i != uint256(-1) && pendingDeposits[user][i].time > now - nonWhitelistedDelay; i--) { // solium-disable-line security/no-block-members\\n            balanceLocked = balanceLocked.add(pendingDeposits[user][i].amount);\\n        }\\n        return balanceLocked;\\n    }\\n\\n    /**\\n     * @dev Calculates `user`'s available balance for instant transfer\\n     * by subtracting the balance locked in {pendingDeposits} from the over\\n     * balance.\\n     */\\n    function unlockedBalance(address user) public virtual view returns (uint256) {\\n        return balanceOf(user).sub(lockedBalance(user));\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/smartcontract/hpay-token/contracts/HHHmainnet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./HHH.sol\\\";\\n\\ncontract HHHmainnet is HHH {\\n    function initialize(string memory name, string memory symbol, address managementContractAddress, address newMintingAddress) public virtual initializer {\\n        require(managementContractAddress != address(0), \\\"Management contract address cannot be zero.\\\");\\n        require(newMintingAddress != address(0), \\\"New minting address cannot be zero.\\\");\\n        HHH.initialize(name, symbol, managementContractAddress);\\n        mintingAddress = newMintingAddress;\\n    }\\n\\n    address private mintingAddress;\\n\\n    function changeMintingAddress(address newMintingAddress) external virtual onlyAdmin {\\n        require(newMintingAddress != address(0), \\\"New minting address cannot be zero.\\\");\\n        mintingAddress = newMintingAddress;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` new tokens for `mingingAddress`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `ADMIN_ROLE`.\\n     */\\n    function mint(uint256 amount) public virtual onlyAdmin {\\n        // require(managementContract.hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have minter role to mint\\\"); // MODIFIED\\n        _mint(mintingAddress, amount);\\n    }\\n\\n    /**\\n     * @dev Burns `amount` tokens from `mingingAddress`.\\n     *\\n     * See {ERC20-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the `ADMIN_ROLE`.\\n     */\\n    function burn(uint256 amount) public virtual override onlyAdmin {\\n        _burn(mintingAddress, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"/home/smartcontract/hpay-token/contracts/interfaces/IERC1404.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.12;\\n\\n// Extracted from: https://github.com/simple-restricted-token/reference-implementation/blob/master/contracts/token/ERC1404/ERC1404.sol\\ninterface IERC1404 {\\n    /// @notice Detects if a transfer will be reverted and if so returns an appropriate reference code\\n    /// @param from Sending address\\n    /// @param to Receiving address\\n    /// @param value Amount of tokens being transferred\\n    /// @return Code by which to reference message for rejection reasoning\\n    /// @dev Overwrite with your custom transfer restriction logic\\n    function detectTransferRestriction (address from, address to, uint256 value) external view returns (uint8);\\n\\n    /// @notice Returns a human-readable message for a given restriction code\\n    /// @param restrictionCode Identifier for looking up a message\\n    /// @return Text showing the restriction's reasoning\\n    /// @dev Overwrite with your custom message and restrictionCode handling\\n    function messageForTransferRestriction (uint8 restrictionCode) external view returns (string memory);\\n}\"\r\n    },\r\n    \"/home/smartcontract/hpay-token/contracts/interfaces/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.12;\\n\\n// https://eips.ethereum.org/EIPS/eip-165\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceID The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\"\r\n    },\r\n    \"/home/smartcontract/hpay-token/contracts/interfaces/IManagementContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.6.12;\\n\\ninterface IManagementContract {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function whitelist(address addr) external view;\\n\\n    function unWhitelist(address addr) external view;\\n\\n    function isWhitelisted(address addr) external view returns (bool);\\n\\n    function freeze(address addr) external;\\n\\n    function unFreeze(address addr) external;\\n\\n    function isFrozen(address addr) external view returns (bool);\\n\\n    function addSuperWhitelisted(address addr) external;\\n\\n    function removeSuperWhitelisted(address addr) external;\\n\\n    function isSuperWhitelisted(address addr) external view returns (bool);\\n\\n    function nonWhitelistedDelay() external view returns (uint256);\\n\\n    function nonWhitelistedDepositLimit() external view returns (uint256);\\n\\n    function setNonWhitelistedDelay(uint256 _nonWhitelistedDelay) external view;\\n\\n    function setNonWhitelistedDepositLimit(uint256 _nonWhitelistedDepositLimit) external view;\\n\\n    function paused() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20BurnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"./ERC20Upgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC20Burnable_init_unchained();\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal initializer {\\n    }\\n    using SafeMathUpgradeable for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC20Upgradeable.sol\\\";\\nimport \\\"../../utils/PausableUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC20PausableUpgradeable is Initializable, ERC20Upgradeable, PausableUpgradeable {\\n    function __ERC20Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n        __ERC20Pausable_init_unchained();\\n    }\\n\\n    function __ERC20Pausable_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERROR_CODE_BELOW_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERROR_CODE_FROM_FROZEN\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERROR_CODE_GLOBAL_PAUSE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERROR_CODE_NOT_ENOUGH_UNLOCKED\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERROR_CODE_PENDING_DEPOSITS_LENGTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERROR_CODE_TO_FROZEN\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERROR_DEFAULT\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERROR_REASON_BELOW_THRESHOLD\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERROR_REASON_FROM_FROZEN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERROR_REASON_GLOBAL_PAUSE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERROR_REASON_NOT_ENOUGH_UNLOCKED\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERROR_REASON_PENDING_DEPOSITS_LENGTH\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERROR_REASON_TO_FROZEN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUCCESS_CODE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUCCESS_MESSAGE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMintingAddress\",\"type\":\"address\"}],\"name\":\"changeMintingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"detectTransferRestriction\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"managementContractAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"managementContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newMintingAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"lockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementContract\",\"outputs\":[{\"internalType\":\"contract IManagementContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"restrictionCode\",\"type\":\"uint8\"}],\"name\":\"messageForTransferRestriction\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonWhitelistedDustThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"putTotalBalanceToLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverFrozenFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAllPendingDepositsExternal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonWhitelistedDustThreshold\",\"type\":\"uint256\"}],\"name\":\"setNonWhitelistedDustThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"unlockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HHHmainnet","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}