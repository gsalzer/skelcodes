{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.6.6;\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n\r\n    /**\r\n        @dev Handles the receipt of a single ERC1155 token type. This function is\r\n        called at the end of a `safeTransferFrom` after the balance has been updated.\r\n        To accept the transfer, this must return\r\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n        (i.e. 0xf23a6e61, or its own function selector).\r\n        @param operator The address which initiated the transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param id The ID of the token being transferred\r\n        @param value The amount of tokens being transferred\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n\r\n    /**\r\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n        is called at the end of a `safeBatchTransferFrom` after the balances have\r\n        been updated. To accept the transfer(s), this must return\r\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n        (i.e. 0xbc197c81, or its own function selector).\r\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n        @param from The address which previously owned the token\r\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n        @param data Additional data with no specified format\r\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n    */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    )\r\n        external\r\n        returns(bytes4);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\ncontract BidETHWrapper {\r\n  using SafeMath for uint256;\r\n  IERC20 public token;\r\n\r\n  uint256 public constant MAX_FEE = 100;\r\n\r\n  uint256 private _totalSupply;\r\n  // Objects balances [id][address] => balance\r\n  mapping(uint256 => mapping(address => uint256)) internal _balances;\r\n  mapping(uint256 => uint256) private _totalDeposits;\r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function totalDeposits(uint256 id) public view returns (uint256) {\r\n    return _totalDeposits[id];\r\n  }\r\n\r\n  function balanceOf(address account, uint256 id) public view returns (uint256) {\r\n    return _balances[id][account];\r\n  }\r\n\r\n  function bid(uint256 id) public payable virtual {\r\n    uint256 amount = msg.value;\r\n    _totalSupply = _totalSupply.add(amount);\r\n    _totalDeposits[id] = _totalDeposits[id].add(amount);\r\n    _balances[id][msg.sender] = _balances[id][msg.sender].add(amount);\r\n  }\r\n\r\n  function withdraw(uint256 id) public virtual {\r\n    uint256 amount = balanceOf(msg.sender, id);\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _totalDeposits[id] = _totalDeposits[id].sub(amount);\r\n    _balances[id][msg.sender] = _balances[id][msg.sender].sub(amount);\r\n    payable(msg.sender).transfer(amount);\r\n  }\r\n\r\n  function _emergencyWithdraw(address account, uint256 id) internal {\r\n    uint256 amount = _balances[id][account];\r\n\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _totalDeposits[id] = _totalDeposits[id].sub(amount);\r\n    _balances[id][account] = _balances[id][account].sub(amount);\r\n    payable(account).transfer(amount);\r\n  }\r\n\r\n  function _end(\r\n    uint256 id,\r\n    address highestBidder,\r\n    address beneficiary,\r\n    address runner,\r\n    uint256 fee,\r\n    uint256 amount\r\n  ) internal {\r\n    uint256 accountDeposits = _balances[id][highestBidder];\r\n    require(accountDeposits == amount);\r\n\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    uint256 tokenFee = (amount.mul(fee)).div(MAX_FEE);\r\n\r\n    _totalDeposits[id] = _totalDeposits[id].sub(amount);\r\n    _balances[id][highestBidder] = _balances[id][highestBidder].sub(amount);\r\n    payable(beneficiary).transfer(amount.sub(tokenFee));\r\n    payable(runner).transfer(tokenFee);\r\n  }\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * @title ERC1155Tradable\r\n * ERC1155Tradable - ERC1155 contract that whitelists an operator address, \r\n * has create and mint functionality, and supports useful standards from OpenZeppelin,\r\n  like _exists(), name(), symbol(), and totalSupply()\r\n */\r\ninterface IERC1155Tradable {\r\n  /**\r\n   * @dev Creates a new token type and assigns _initialSupply to an address\r\n   * @param _maxSupply max supply allowed\r\n   * @param _initialSupply Optional amount to supply the first owner\r\n   * @param _uri Optional URI for this token type\r\n   * @param _data Optional data to pass if receiver is contract\r\n   * @return tokenId The newly created token ID\r\n   */\r\n  function create(\r\n    uint256 _maxSupply,\r\n    uint256 _initialSupply,\r\n    string calldata _uri,\r\n    bytes calldata _data,\r\n    address _beneficiary,\r\n    uint256 _residualsFee,\r\n    bool _residualsRequired\r\n  ) external returns (uint256 tokenId);\r\n\r\n  function mint(\r\n    address _to,\r\n    uint256 _id,\r\n    uint256 _quantity,\r\n    bytes calldata _data\r\n  ) external;\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\n/***********************************************************************\r\n  Modified @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n  Allow overriding of some methods and use of some variables\r\n  in inherited contract.\r\n----------------------------------------------------------------------*/\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n  /**\r\n   * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n   */\r\n  event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n  /**\r\n   * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n   * transfers.\r\n   */\r\n  event TransferBatch(\r\n    address indexed operator,\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256[] ids,\r\n    uint256[] values\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n   * `approved`.\r\n   */\r\n  event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n  /**\r\n   * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n   *\r\n   * If an {URI} event was emitted for `id`, the standard\r\n   * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n   * returned by {IERC1155MetadataURI-uri}.\r\n   */\r\n  event URI(string value, uint256 indexed id);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `account` cannot be the zero address.\r\n   */\r\n  function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `accounts` and `ids` must have the same length.\r\n   */\r\n  function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\r\n\r\n  /**\r\n   * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n   *\r\n   * Emits an {ApprovalForAll} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `operator` cannot be the caller.\r\n   */\r\n  function setApprovalForAll(address operator, bool approved) external;\r\n\r\n  /**\r\n   * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n   *\r\n   * See {setApprovalForAll}.\r\n   */\r\n  function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n  /**\r\n   * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n   *\r\n   * Emits a {TransferSingle} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `to` cannot be the zero address.\r\n   * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n   * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n   * acceptance magic value.\r\n   */\r\n  function safeTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 id,\r\n    uint256 amount,\r\n    bytes calldata data\r\n  ) external payable;\r\n\r\n  /**\r\n   * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n   *\r\n   * Emits a {TransferBatch} event.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `ids` and `amounts` must have the same length.\r\n   * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n   * acceptance magic value.\r\n   */\r\n  function safeBatchTransferFrom(\r\n    address from,\r\n    address to,\r\n    uint256[] calldata ids,\r\n    uint256[] calldata amounts,\r\n    bytes calldata data\r\n  ) external payable;\r\n}\r\n\r\n// SPDX-License-Identifier: MIT\r\ncontract NftAuctionETH is Ownable, ReentrancyGuard, BidETHWrapper, IERC1155Receiver {\r\n  using SafeMath for uint256;\r\n\r\n  address public nftsAddress;\r\n  address public runner;\r\n\r\n  // info about a particular auction\r\n  struct AuctionInfo {\r\n    address beneficiary;\r\n    uint256 fee;\r\n    uint256 auctionStart;\r\n    uint256 auctionEnd;\r\n    uint256 originalAuctionEnd;\r\n    uint256 endedAt;\r\n    uint256 extension;\r\n    uint256 nft;\r\n    address highestBidder;\r\n    uint256 highestBid;\r\n    uint256 startBidWei;\r\n    uint256 bidStepWei;\r\n    uint256 buyNowPriceWei;\r\n    bool auctionEnded;\r\n  }\r\n\r\n  mapping(uint256 => AuctionInfo) public auctionsById;\r\n  uint256[] public auctions;\r\n\r\n  // Events that will be fired on changes.\r\n  event BidPlaced(address indexed user, uint256 indexed id, uint256 amount);\r\n  event Withdrawn(address indexed user, uint256 indexed id, uint256 amount);\r\n  event Ended(address indexed user, uint256 indexed id, uint256 amount);\r\n  event RunnerFeeChanged(uint256 indexed id, uint256 fee);\r\n\r\n  constructor(address _runner, address _nftsAddress) public {\r\n    runner = _runner;\r\n    nftsAddress = _nftsAddress;\r\n  }\r\n\r\n  function auctionStart(uint256 id) public view returns (uint256) {\r\n    return auctionsById[id].auctionStart;\r\n  }\r\n\r\n  function beneficiary(uint256 id) public view returns (address) {\r\n    return auctionsById[id].beneficiary;\r\n  }\r\n\r\n  function auctionEnd(uint256 id) public view returns (uint256) {\r\n    return auctionsById[id].auctionEnd;\r\n  }\r\n\r\n  function nftTokenId(uint256 id) public view returns (uint256) {\r\n    return auctionsById[id].nft;\r\n  }\r\n\r\n  function highestBidder(uint256 id) public view returns (address) {\r\n    return auctionsById[id].highestBidder;\r\n  }\r\n\r\n  function highestBid(uint256 id) public view returns (uint256) {\r\n    return auctionsById[id].highestBid;\r\n  }\r\n\r\n  function isEndedByTime(uint256 id) public view returns (bool) {\r\n    return now >= auctionsById[id].auctionEnd;\r\n  }\r\n\r\n  function ended(uint256 id) public view returns (bool) {\r\n    return auctionsById[id].auctionEnded;\r\n  }\r\n\r\n  function bidStepWei(uint256 id) public view returns (uint256) {\r\n    return auctionsById[id].bidStepWei;\r\n  }\r\n\r\n  function startBidWei(uint256 id) public view returns (uint256) {\r\n    return auctionsById[id].startBidWei;\r\n  }\r\n\r\n  function buyNowPriceWei(uint256 id) public view returns (uint256) {\r\n    return auctionsById[id].buyNowPriceWei;\r\n  }\r\n\r\n  function endedAt(uint256 id) public view returns (uint256) {\r\n    return auctionsById[id].endedAt;\r\n  }\r\n\r\n  function runnerFee(uint256 id) public view returns (uint256) {\r\n    return auctionsById[id].fee;\r\n  }\r\n\r\n  function setRunnerAddress(address account) public onlyOwner {\r\n    runner = account;\r\n  }\r\n\r\n  function create(\r\n    uint256 id,\r\n    address beneficiaryAddress,\r\n    uint256 fee,\r\n    uint256 start,\r\n    uint256 duration,\r\n    uint256 extension, // in minutes\r\n    uint256 _startBidWei,\r\n    uint256 _bidStepWei,\r\n    uint256 _buyNowPriceWei,\r\n    address _tokenBeneficiary,\r\n    uint256 _tokenResidualsFee,\r\n    bool _tokenResidualsRequired\r\n  ) public onlyOwner {\r\n    AuctionInfo storage auction = auctionsById[id];\r\n    require(auction.beneficiary == address(0), \"NftAuction::create: auction already created\");\r\n    require(_bidStepWei > 0, \"NftAuction::create: bid step = 0\");\r\n    require(_buyNowPriceWei > _bidStepWei, \"NftAuction::create: buy now price too small\");\r\n\r\n    auction.beneficiary = beneficiaryAddress;\r\n    auction.fee = fee;\r\n    auction.auctionStart = start;\r\n    auction.auctionEnd = start.add(duration * 1 days);\r\n    auction.originalAuctionEnd = start.add(duration * 1 days);\r\n    auction.extension = extension * 60;\r\n    auction.startBidWei = _startBidWei;\r\n    auction.bidStepWei = _bidStepWei;\r\n    auction.buyNowPriceWei = _buyNowPriceWei;\r\n\r\n    auctions.push(id);\r\n\r\n    uint256 tokenId =\r\n      IERC1155Tradable(nftsAddress).create(\r\n        1,\r\n        1,\r\n        \"\",\r\n        \"\",\r\n        _tokenBeneficiary,\r\n        _tokenResidualsFee,\r\n        _tokenResidualsRequired\r\n      );\r\n    require(tokenId > 0, \"NftAuction::create: ERC1155 create did not succeed\");\r\n    auction.nft = tokenId;\r\n  }\r\n\r\n  function bid(uint256 id) public payable override nonReentrant {\r\n    uint256 amount = msg.value;\r\n    AuctionInfo storage auction = auctionsById[id];\r\n    require(auction.beneficiary != address(0), \"NftAuction::bid: auction does not exist\");\r\n    require(now >= auction.auctionStart, \"NftAuction::bid: auction has not started\");\r\n    require(now <= auction.auctionEnd, \"NftAuction::bid: auction has ended\");\r\n    require(!auction.auctionEnded, \"NftAuction::bid: auction has ended\");\r\n\r\n    uint256 newAmount = amount.add(balanceOf(msg.sender, id));\r\n    if (auction.highestBid == 0) {\r\n      require(newAmount >= auction.startBidWei, \"NftAuction::bid: start bid too small\");\r\n    }\r\n    require(newAmount >= auction.highestBid.add(auction.bidStepWei), \"NftAuction::bid: bid too small\");\r\n\r\n    auction.highestBidder = msg.sender;\r\n    auction.highestBid = newAmount;\r\n\r\n    if (auction.extension > 0 && auction.auctionEnd.sub(now) <= auction.extension) {\r\n      auction.auctionEnd = now.add(auction.extension);\r\n    }\r\n\r\n    super.bid(id);\r\n    emit BidPlaced(msg.sender, id, amount);\r\n\r\n    if (auction.highestBid >= auction.buyNowPriceWei) {\r\n      end(id);\r\n    }\r\n  }\r\n\r\n  function withdraw(uint256 id) public override nonReentrant {\r\n    AuctionInfo storage auction = auctionsById[id];\r\n    uint256 amount = balanceOf(msg.sender, id);\r\n    require(auction.beneficiary != address(0), \"NftAuction::withdraw: auction does not exist\");\r\n    require(amount > 0, \"NftAuction::withdraw: cannot withdraw 0\");\r\n\r\n    require(\r\n      auction.highestBidder != msg.sender,\r\n      \"NftAuction::withdraw: you are the highest bidder and cannot withdraw\"\r\n    );\r\n\r\n    super.withdraw(id);\r\n    emit Withdrawn(msg.sender, id, amount);\r\n  }\r\n\r\n  function emergencyWithdraw(uint256 id) public onlyOwner {\r\n    AuctionInfo storage auction = auctionsById[id];\r\n    require(auction.beneficiary != address(0), \"NftAuction::emergencyWithdraw: auction does not exist\");\r\n    require(now >= auction.auctionEnd, \"NftAuction::emergencyWithdraw: the auction has not ended\");\r\n    require(!auction.auctionEnded, \"NftAuction::emergencyWithdraw: auction ended and item sent\");\r\n\r\n    _emergencyWithdraw(auction.highestBidder, id);\r\n    emit Withdrawn(auction.highestBidder, id, auction.highestBid);\r\n  }\r\n\r\n  function emergencyCancel(uint256 id, address bidder) public onlyOwner {\r\n    AuctionInfo storage auction = auctionsById[id];\r\n    require(auction.beneficiary != address(0), \"NftAuction::emergencyCancel: auction does not exist\");\r\n    require(auction.highestBidder != bidder, \"NftAuction::emergencyCancel: address is highest bidder\");\r\n\r\n    uint256 _amount = balanceOf(bidder, id);\r\n    require(_amount > 0, \"NftAuction::emergencyCancel: cannot withdraw 0\");\r\n    _emergencyWithdraw(bidder, id);\r\n    emit Withdrawn(bidder, id, _amount);\r\n  }\r\n\r\n  function end(uint256 id) internal {\r\n    AuctionInfo storage auction = auctionsById[id];\r\n    auction.auctionEnded = true;\r\n    auction.endedAt = now;\r\n    _end(id, auction.highestBidder, auction.beneficiary, runner, auction.fee, auction.highestBid);\r\n    IERC1155(nftsAddress).safeTransferFrom(address(this), auction.highestBidder, auction.nft, 1, \"\");\r\n    emit Ended(auction.highestBidder, id, auction.highestBid);\r\n  }\r\n\r\n  function close(uint256 id) public nonReentrant {\r\n    AuctionInfo storage auction = auctionsById[id];\r\n    require(auction.beneficiary != address(0), \"NftAuction::end: auction does not exist\");\r\n    require(now >= auction.auctionEnd, \"NftAuction::end: the auction has not ended\");\r\n    require(!auction.auctionEnded, \"NftAuction::end: auction already ended\");\r\n    end(id);\r\n  }\r\n\r\n  function setEndTime(uint256 id, uint256 endTimestamp) external onlyOwner {\r\n    AuctionInfo storage auction = auctionsById[id];\r\n    require(auction.beneficiary != address(0), \"NftAuction::setEndTime: auction does not exist\");\r\n    require(now <= auction.auctionEnd, \"NftAuction::setEndTime: auction has ended\");\r\n    require(!auction.auctionEnded, \"NftAuction::setEndTime: auction closed\");\r\n    require(auction.auctionStart < endTimestamp, \"NftAuction::setEndTime: before start\");\r\n\r\n    auction.auctionEnd = endTimestamp;\r\n    auction.originalAuctionEnd = endTimestamp;\r\n  }\r\n\r\n  function setRunnerFee(uint256 id, uint256 _fee) external onlyOwner {\r\n    AuctionInfo storage auction = auctionsById[id];\r\n    require(auction.beneficiary != address(0), \"NftAuction::setRunnerFee: auction does not exist\");\r\n    require(now <= auction.auctionEnd, \"NftAuction::setRunnerFee: auction has ended\");\r\n    require(!auction.auctionEnded, \"NftAuction::setRunnerFee: auction closed\");\r\n    require(_fee <= MAX_FEE, \"NftAuction::setRunnerFee: fee too high\");\r\n\r\n    auction.fee = _fee;\r\n    emit RunnerFeeChanged(id, _fee);\r\n  }\r\n\r\n  function setStartBid(uint256 id, uint256 _startBidWei) external onlyOwner {\r\n    AuctionInfo storage auction = auctionsById[id];\r\n    require(auction.beneficiary != address(0), \"NftAuction::setStartBid: auction does not exist\");\r\n    require(now <= auction.auctionStart, \"NftAuction::setStartBid: auction started\");\r\n    require(_startBidWei <= auction.buyNowPriceWei, \"NftAuction::setStartBid: price less than startBid\");\r\n    require(_startBidWei > 0, \"NftAuction::setStartBid: startBid == 0\");\r\n\r\n    auction.startBidWei = _startBidWei;\r\n  }\r\n\r\n  function onERC1155Received(\r\n    address _operator,\r\n    address, // _from\r\n    uint256, // _id\r\n    uint256, // _amount\r\n    bytes memory // _data\r\n  ) public override returns (bytes4) {\r\n    require(msg.sender == address(nftsAddress), \"NftAuction::onERC1155Received:: invalid token address\");\r\n    require(_operator == address(this), \"NftAuction::onERC1155Received:: operator must be auction contract\");\r\n\r\n    // Return success\r\n    return this.onERC1155Received.selector;\r\n  }\r\n\r\n  function onERC1155BatchReceived(\r\n    address _operator,\r\n    address, // _from,\r\n    uint256[] memory, // _ids,\r\n    uint256[] memory, // _amounts,\r\n    bytes memory // _data\r\n  ) public override returns (bytes4) {\r\n    require(msg.sender == address(nftsAddress), \"NftAuction::onERC1155BatchReceived:: invalid token address\");\r\n    require(_operator == address(this), \"NftAuction::onERC1155BatchReceived:: operator must be auction contract\");\r\n\r\n    // Return success\r\n    return this.onERC1155BatchReceived.selector;\r\n  }\r\n\r\n  /**\r\n   * INTERFACE_SIGNATURE_ERC165 = bytes4(keccak256(\"supportsInterface(bytes4)\"));\r\n   *\r\n   * INTERFACE_SIGNATURE_ERC1155TokenReceiver =\r\n   * bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))\r\n   * ^ bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"));\r\n   */\r\n  function supportsInterface(bytes4 interfaceID) external view override returns (bool) {\r\n    return\r\n      interfaceID == 0x01ffc9a7 || // ERC-165 support\r\n      interfaceID == 0x4e2312e0; // ERC-1155 `ERC1155TokenReceiver` support\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_runner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nftsAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Ended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"RunnerFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"auctionEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"auctionStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionsById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originalAuctionEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extension\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBidWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidStepWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyNowPriceWei\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"auctionEnded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"bidStepWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"buyNowPriceWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiaryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extension\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBidWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidStepWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyNowPriceWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenBeneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenResidualsFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_tokenResidualsRequired\",\"type\":\"bool\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"emergencyCancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"endedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"highestBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"highestBidder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isEndedByTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"nftTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"runner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"runnerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setRunnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setRunnerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBidWei\",\"type\":\"uint256\"}],\"name\":\"setStartBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"startBidWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NftAuctionETH","CompilerVersion":"v0.6.6+commit.6c089d02","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a50fb3356ed18da0c1bc98f0dff04dfdebd7c9dd000000000000000000000000938162638322f7ce676034fe89eba6a8bfac7f41","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://afc6817c6254fa7bd06196df00aa528996dc525855772c242388444ef0782de6"}]}