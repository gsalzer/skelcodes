{"status":"1","message":"OK","result":[{"SourceCode":" /*                                                                                                                \r\n                                                                                                                                                     \r\n                                    .... .                                                                                                      u     \r\n                                   :i:::.EBi                            .r:::.JB.                   ii:::.Rg    :i:i:.QE                     .:.BB:   \r\n                                   .. .  QBQ:                           :::.. bBB:                  i.:...BBB   i::...BBB                  .i:. DBB   \r\n                                  .J::..iBBB                            i:....BBB                  .::.. 7BBQ  .::.. vBBg                :::.:. dBg   \r\n                                   KBBBBBBB2                           .:.:. rBBZ                  ::.:. PBBi  ::... EBB.              .:::.:.. ZBg   \r\n       ..... .         ..... .      rdUSUis        ..:::.:..           i::.. EBB:       ...:::.    i.:...BBB   i.:...BBB   .. .      .BBv..:... PBD   \r\n      .ri:i:.gg       .ri::..BBi  r:.  .B.      ::i::::.:::ii:.       .i:.. .BBB     .iii:::::::: .::.. LBBS  :::.. sQB2.:i:i.jB.      bi.:..   dBD   \r\n       i:::: sQB      i::. .gBBB..::.. XBB7   :i::..     ..:::i7      ::.:. vBBS   .ii::..     .::::.:. ZBB.  ::.:. gBQ. :::...BQ.     ..:.. Sb PBg   \r\n       ::.:..iBB     i:..  ZBQB. ::.:..BBQ  .ii:.. rqgQQZ:..:..:B:    i::.. MBB.  :i:... :YXbP5:..:::..:BQB   i::..:BBB  ::.:..QB:    :::.. sBBBbBB   \r\n       :::::.:BB    :i... bBQB: .i::. rBBD  i:::.:QBBBBBQB:..:. PB.  .i::: :BBQ  i::.. .PBBBBBBBr..:.. uBBJ  :::.. IBBY  i::.. gB7   :i:.. LBBBS :Q   \r\n       .i.:...BB.  :i.:. PBBB:  :::.. dBB: ::::.iBBBB7    .:::. JBB  :i::. uBBY .::::..BBBBP:   .::.:..MBB   i:.:..QBB   i:.:. qB1  .i:.. vBBBK       \r\n        i:::. MBi .i:.. XBBBi   i:.:..QBB .:::..:i.:.  ........ 2BB  i::...QBB  i:::..ZBBB.      i.:..:BBQ  .i::..iBBQ   :::.. 1BZ  i:.. 7BBBb        \r\n        i:::: ZBs r::. 5BBBr   :i:::.vBBI i::::.      .......   RQB  i:::.rBBM .r:::.rBBB       .i::: XBBr  i:::: qQBr   .r:::.vBQ :i:: rBBQZ         \r\n        :r:::.XBb.::. 5BBB7    r:::..gBB  i:::.72uuUUIUIUI1I12sIBBQ :i::..XBBr ii:::.SBBY       ii::..QBQ   ri::.:QBB    .r:::.rQB:::: rBBBM          \r\n        .r:::.SB:.:. uBQBL    .r:::.iBBQ .i:::.EBBBBBBBBBBBQBBBBBBJ i:::..BBB  ii:::.IBB       :i:::.rBBD  .r:::.7BBZ     r:::.iB7..: iBBBR           \r\n         r:::.v7.:. jBBBJ     :i::. 1BBu :i:::.vBB      .:... i    .i:::.7QBd  r::::.iQB      :r:::. PBB:  i:::. EBBi     ::::.iu... iQBBQ            \r\n         i:::.:... LBBB2      r:::..QBB  .r::.:.LE     ....  :BBi  ::::. PBB:  :i:::..rD    .:i::::..BBB   r:::.:BBB      :i:::.... :BBBB             \r\n         :i:::::. vBBB5      .i:.: rBBQ   :r::....:::i::.. .IBBBB  i.:...BBB    ri::.:..:i::.:::.:. 7BBK  .i.:..LBBK      .r::::.: :BBBB              \r\n         .r::::. 7BBBK       :...  5BBv    .7:......... .:5BBBBb  :.... vBBS     ir........ rg: ..  EBB.  i..   gBB.       i:::::.:BBBB               \r\n          i:::..7BQBb        qQq5I1BBB      .EQIri:i:rsqQBBBBB:   YBqS21MBB.      rg2riiivIQBBqb5SU5BBB   EQSS1SBBB        :::::.:QBQB                \r\n         .r::..rBQBE          bBBBBBBR        vBBQBBBQBBBQB1.      sBBBBBBB        .QBBBBBBBBBSPBBBBBBI    QBBBBBBI        i:::..QBBB                 \r\n        .r::. rBQBg                               .rrri:                              .iiri.                              ii::..MBBB                  \r\n     iiii::. 7BBBR          r::.......::i:i:i::..        ...::::i:::.......::::::::::..     ...........:i::........:iii:ii::. :RBBB.                  \r\n     r::.. .1BQBM          :i:::.:.:.:::::::.:::.:.....:.:::::::::::.:::.:::::::::::::.:.:.:::::::.:.:.:::::.:.:.:::::::.... 7BBBB.                   \r\n    ir..::JRBBBP           vi.............................................................................................:7DBBBB                     \r\n    .BBBQBQBBBr            7BBBBQBBBBBQBBBQBQBBBBBBBBBBBBBBBBBBBQBBBQBBBQBQBBBBBBBBBQBBBBBBBQBBBBBBBBBBBBBQBBBBBBBBBBBQBQBBBBBBK                      \r\n      XDbq5Y:               .DZPEPEPdPEPdPdPdPdbEPEbEPEbEPEPdPEPEbdbEdZbZdEdEdEdEbEdZbEdZdZdEbEdZdEbEdZdEbEdZdEdZdEbEdZdZPP5ji                        \r\n                                                                                                                                                    \r\n*/\r\n// File contracts/openzeppelin_contracts/utils/Context.sol\r\n\r\n// SPDX-License-Identifier: BUSL-1.1\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/openzeppelin_contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        revert(\"Cannot renounceOwnership with this contract\");\r\n        //not possible for these contracts\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/openzeppelin_contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/openzeppelin_contracts/token/ERC20/ERC20.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The defaut value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overloaded;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n// File contracts/Vault.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\ncontract Vault is Ownable {\r\n    address private dispatcherAddress;\r\n    address private multiSigAddress;\r\n    address[] private tokens;\r\n\r\n    struct supportedToken {\r\n        ERC20 token;\r\n        bool active;\r\n    }\r\n\r\n    mapping(address => supportedToken) private tokensStore;\r\n\r\n    constructor(address _multiSigAddress) Ownable() {\r\n        require(_multiSigAddress != address(0), \"Cannot set address to 0\");\r\n        multiSigAddress = _multiSigAddress;\r\n    }\r\n\r\n    /*****************  Getters **************** */\r\n\r\n    function getDispatcherAddress() public view returns (address) {\r\n        return dispatcherAddress;\r\n    }\r\n\r\n    function getMultiSigAddress() public view returns (address) {\r\n        return multiSigAddress;\r\n    }\r\n\r\n    function getTokenAddresses() public view returns (address[] memory) {\r\n        return tokens;\r\n    }\r\n\r\n    /***************** Calls **************** */\r\n    function transferFunds(address _tokenAddress, address _recipient, uint256 _amount) external onlyDispatcher {\r\n        require(tokensStore[_tokenAddress].active == true, \"Token not supported\");\r\n        require(_amount > 0, \"Cannot transfer 0 tokens\");\r\n        ERC20(_tokenAddress).transfer(_recipient, _amount);\r\n        emit ReleasedFundsEvent(_recipient, _amount);\r\n    }\r\n\r\n    function newMultiSig(address _multiSigAddress) external onlyMultiSig {\r\n        require(_multiSigAddress != address(0), \"Cannot set address to 0\");\r\n        multiSigAddress = _multiSigAddress;\r\n        emit NewMultiSigEvent(_multiSigAddress);\r\n    }\r\n\r\n    function newDispatcher(address _dispatcherAddress) external onlyMultiSig {\r\n        require(_dispatcherAddress != address(0), \"Can't set address to 0\");\r\n        dispatcherAddress = _dispatcherAddress;\r\n        emit NewDispatcherEvent(dispatcherAddress);\r\n    }\r\n\r\n    function addToken(address _tokenAddress) external onlyMultiSig {\r\n        require(tokensStore[_tokenAddress].active != true, \"Token already supported\");\r\n        tokensStore[_tokenAddress].token = ERC20(_tokenAddress);\r\n        tokensStore[_tokenAddress].active = true;\r\n        tokens.push(_tokenAddress);\r\n        emit AddTokenEvent(_tokenAddress);\r\n    }\r\n\r\n    function removeToken(address _tokenAddress) external onlyMultiSig {\r\n        require(tokensStore[_tokenAddress].active == true, \"Token not supported already\");\r\n        tokensStore[_tokenAddress].active = false;\r\n        popTokenArray(_tokenAddress);\r\n        emit RemoveTokenEvent(_tokenAddress);\r\n    }\r\n\r\n    /*****************  Internal **************** */\r\n\r\n    function popTokenArray(address _tokenAddress) private {\r\n        for(uint256 i = 0; i <= tokens.length; i++)\r\n        {\r\n            if(_tokenAddress == tokens[i])\r\n            {\r\n                tokens[i] = tokens[tokens.length - 1];\r\n                tokens.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*****************  Modifiers **************** */\r\n\r\n    modifier onlyDispatcher() {\r\n        require(dispatcherAddress == msg.sender, \"Not the disptacher\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMultiSig() {\r\n        require(multiSigAddress == msg.sender, \"Not the multisig\");\r\n        _;\r\n    }\r\n\r\n    /*****************  Events **************** */\r\n    event NewMultiSigEvent(address newMultiSigAddress);\r\n    event AddTokenEvent(address newTokenAddress);\r\n    event RemoveTokenEvent(address removedTokenAddress);\r\n    event NewDispatcherEvent(address newdDspatcherAddress);\r\n    event ReleasedFundsEvent(address indexed recipient, uint256 amount);\r\n}\r\n\r\n\r\n// File contracts/VaultMultiSig.sol\r\n\r\npragma solidity 0.8.4;\r\n\r\n\r\n\r\ncontract VaultMultiSig is Ownable {\r\n    Vault private vault;\r\n\r\n    address[] private signatories;\r\n    uint256[] private outstandingAddressProposalsIndex;\r\n    uint256[] private outstandingThresholdProposalsIndex;\r\n    uint256 private threshold = 1;\r\n\r\n    uint256 private uuid = 0;\r\n\r\n    /*Proposal types\r\n        0 = approveSignatory for multisig\r\n        1 = removeSignatory for multisig\r\n        2 = approveNewOwner for multisig\r\n        3 = approveNewMultiSig for vault\r\n        4 = approveNewToken for vault\r\n        5 = removeToken for vault\r\n        6 = approveNewDispatcher for vault\r\n        7 = approveNewVault for multisig\r\n    */\r\n\r\n    struct addressProposal {\r\n        uint256 proposalType;\r\n        address proposal;\r\n        address[] signatures;\r\n        bool signed;\r\n        uint256 timeStamp;\r\n    }\r\n    mapping(uint256 => addressProposal) private addressProposalStore;\r\n\r\n    struct thresholdProposal {\r\n        uint256 proposal;\r\n        address[] signatures;\r\n        bool signed;\r\n        uint256 timeStamp;\r\n    }\r\n    mapping(uint256 => thresholdProposal) private thresholdProposalStore;\r\n\r\n    constructor() Ownable() {\r\n        signatories.push(msg.sender);\r\n    }\r\n\r\n    /*****************  Getters **************** */\r\n    function getSignatories() public view returns (address[] memory) {\r\n        return signatories;\r\n    }\r\n\r\n    function getProposal(uint256 _index) public view returns (addressProposal memory) {\r\n        return addressProposalStore[_index];\r\n    }\r\n\r\n    function getThresholdProposal(uint256 _index) public view returns (thresholdProposal memory)\r\n    {\r\n        return thresholdProposalStore[_index];\r\n    }\r\n\r\n    function getOutstandingAddressProposals() public view returns (uint256[] memory) {\r\n        return outstandingAddressProposalsIndex;\r\n    }\r\n\r\n    function getOutstandingThresholdProposals() public view returns (uint256[] memory) {\r\n        return outstandingThresholdProposalsIndex;\r\n    }\r\n\r\n    function getVault() public view returns (Vault){\r\n        return vault;\r\n    }\r\n\r\n    function getAddressProposal(uint256 i)\r\n        public\r\n        view\r\n        returns (addressProposal memory)\r\n    {\r\n        return addressProposalStore[i];\r\n    }\r\n\r\n    function getThreshold() public view returns (uint256) {\r\n        return threshold;\r\n    }\r\n\r\n    /*****************  Proposers **************** */\r\n    function proposeAddress(address _address, uint256 _index) external onlyOwner {\r\n        addressProposalStore[uuid].proposal = _address;\r\n        addressProposalStore[uuid].proposalType = _index;\r\n        addressProposalStore[uuid].timeStamp = block.timestamp;\r\n        outstandingAddressProposalsIndex.push(uuid);\r\n        uuid += 1;\r\n        emit ProposeAddress(_address, _index);\r\n    }\r\n\r\n    function proposeNewOwner(address _address) external onlySignatories {\r\n        addressProposalStore[uuid].proposal = _address;\r\n        addressProposalStore[uuid].proposalType = 2;\r\n        addressProposalStore[uuid].timeStamp = block.timestamp;\r\n        outstandingAddressProposalsIndex.push(uuid);\r\n        uuid += 1;\r\n        emit ProposeNewOwner(_address);\r\n    }\r\n\r\n    function proposeNewThreshold(uint256 _threshold) external onlyOwner {\r\n        thresholdProposalStore[uuid].proposal = _threshold;\r\n        thresholdProposalStore[uuid].timeStamp = block.timestamp;\r\n        outstandingThresholdProposalsIndex.push(uuid);\r\n        uuid += 1;\r\n        emit ProposeNewThreshold(_threshold);\r\n    }\r\n    /***************** Approvers **************** */\r\n\r\n    function approveSignatory(uint256 _proposal) external onlySignatories oneVoteAddress(_proposal){\r\n        require(addressProposalStore[_proposal].proposalType == 0, \"Not the right proposal type\");\r\n        require(addressProposalStore[_proposal].signed == false, \"Already Signed\");\r\n\r\n        addressProposalStore[_proposal].signatures.push(msg.sender);\r\n\r\n        if (addressProposalStore[_proposal].signatures.length >= threshold) {\r\n            addressProposalStore[_proposal].signed = true;\r\n            signatories.push(addressProposalStore[_proposal].proposal);\r\n            popAddressProposal(_proposal);\r\n            emit ApprovedSignatory(addressProposalStore[_proposal].proposal);\r\n        }\r\n    }\r\n\r\n    function removeSignatory(uint256 _proposal) external onlySignatories oneVoteAddress(_proposal){\r\n        require(addressProposalStore[_proposal].proposalType == 1, \"Not the right proposal type\");\r\n        require(addressProposalStore[_proposal].signed == false, \"Already Signed\");\r\n\r\n        addressProposalStore[_proposal].signatures.push(msg.sender);\r\n\r\n        if (addressProposalStore[_proposal].signatures.length >= threshold) {\r\n            addressProposalStore[_proposal].signed = true;\r\n            //Remove a threshold count in order to avoid not having enough signatories\r\n            if(threshold > 1)\r\n            {\r\n                threshold = threshold - 1;\r\n            }\r\n            removeSignatory(addressProposalStore[_proposal].proposal);\r\n            popAddressProposal(_proposal);\r\n            emit RemovedSignatory(addressProposalStore[_proposal].proposal);\r\n        }\r\n    }\r\n    \r\n    function approveNewOwner(uint256 _proposal) external onlySignatories oneVoteAddress(_proposal){\r\n        require(addressProposalStore[_proposal].proposalType == 2, \"Not the right proposal type\");\r\n        require(addressProposalStore[_proposal].signed == false, \"Already Signed\");\r\n\r\n        addressProposalStore[_proposal].signatures.push(msg.sender);\r\n\r\n        if (addressProposalStore[_proposal].signatures.length >= threshold) {\r\n            addressProposalStore[_proposal].signed = true;\r\n\r\n            transferOwnership(addressProposalStore[_proposal].proposal);\r\n            popAddressProposal(_proposal);\r\n            emit ApprovedNewOwner(addressProposalStore[_proposal].proposal);\r\n        }\r\n    }\r\n\r\n    function approveNewMultiSig(uint256 _proposal) external onlySignatories oneVoteAddress(_proposal){\r\n        require(addressProposalStore[_proposal].proposalType == 3, \"Not the right proposal type\");\r\n        require(addressProposalStore[_proposal].signed == false, \"Already Signed\");\r\n\r\n        addressProposalStore[_proposal].signatures.push(msg.sender);\r\n\r\n        if (addressProposalStore[_proposal].signatures.length >= threshold) {\r\n            addressProposalStore[_proposal].signed = true;\r\n\r\n            vault.newMultiSig(addressProposalStore[_proposal].proposal);\r\n            popAddressProposal(_proposal);\r\n            emit ApprovedNewMultiSig(addressProposalStore[_proposal].proposal);\r\n        }\r\n    }\r\n\r\n    function approveNewToken(uint256 _proposal) external onlySignatories oneVoteAddress(_proposal){\r\n        require(addressProposalStore[_proposal].proposalType == 4, \"Not the right proposal type\");\r\n        require(addressProposalStore[_proposal].signed == false, \"Already Signed\");\r\n\r\n        addressProposalStore[_proposal].signatures.push(msg.sender);\r\n\r\n        if (addressProposalStore[_proposal].signatures.length >= threshold) {\r\n            addressProposalStore[_proposal].signed = true;\r\n\r\n            vault.addToken(addressProposalStore[_proposal].proposal);\r\n            popAddressProposal(_proposal);\r\n            emit ApprovedNewToken(addressProposalStore[_proposal].proposal);\r\n        }\r\n    }\r\n\r\n    function removeToken(uint256 _proposal) external onlySignatories oneVoteAddress(_proposal){\r\n        require(addressProposalStore[_proposal].proposalType == 5, \"Not the right proposal type\");\r\n        require(addressProposalStore[_proposal].signed == false, \"Already Signed\");\r\n\r\n        addressProposalStore[_proposal].signatures.push(msg.sender);\r\n\r\n        if (addressProposalStore[_proposal].signatures.length >= threshold) {\r\n            addressProposalStore[_proposal].signed = true;\r\n\r\n            vault.removeToken(addressProposalStore[_proposal].proposal);\r\n            popAddressProposal(_proposal);\r\n            emit RemovedToken(addressProposalStore[_proposal].proposal);\r\n        }\r\n    }\r\n\r\n    function approveNewDispatcher(uint256 _proposal) external onlySignatories oneVoteAddress(_proposal) {\r\n        require(addressProposalStore[_proposal].proposalType == 6, \"Not the right proposal type\");\r\n        require(addressProposalStore[_proposal].signed == false, \"Already Signed\");\r\n\r\n        addressProposalStore[_proposal].signatures.push(msg.sender);\r\n\r\n        if (addressProposalStore[_proposal].signatures.length >= threshold) {\r\n            addressProposalStore[_proposal].signed = true;\r\n\r\n            vault.newDispatcher(addressProposalStore[_proposal].proposal);\r\n            popAddressProposal(_proposal);\r\n            emit ApprovedDispatcher(addressProposalStore[_proposal].proposal);\r\n        }\r\n    }\r\n\r\n    function approveNewVault(uint256 _proposal) external onlySignatories oneVoteAddress(_proposal) {\r\n        require(addressProposalStore[_proposal].proposalType == 7, \"Not the right proposal type\");\r\n        require(addressProposalStore[_proposal].signed == false, \"Already Signed\");\r\n\r\n        addressProposalStore[_proposal].signatures.push(msg.sender);\r\n\r\n        if (addressProposalStore[_proposal].signatures.length >= threshold) {\r\n            addressProposalStore[_proposal].signed = true;\r\n\r\n            vault = Vault(addressProposalStore[_proposal].proposal);\r\n            popAddressProposal(_proposal);\r\n            emit ApprovedDispatcher(addressProposalStore[_proposal].proposal);\r\n        }\r\n    }\r\n\r\n    function approveNewThreshold(uint256 _proposal) external onlySignatories oneVoteThreshold(_proposal){\r\n        require(thresholdProposalStore[_proposal].signed == false, \"Already Signed\");\r\n        require(thresholdProposalStore[_proposal].proposal <= signatories.length, \"Can't be less signatories than threshold\");\r\n        thresholdProposalStore[_proposal].signatures.push(msg.sender);\r\n\r\n        if (thresholdProposalStore[_proposal].signatures.length >= threshold) {\r\n            threshold = thresholdProposalStore[_proposal].proposal;\r\n            popThresholdProposal(_proposal);\r\n            emit ApprovedNewThreshold(thresholdProposalStore[_proposal].proposal);\r\n        }\r\n    }\r\n\r\n    /*****************  Internal **************** */\r\n\r\n    function popAddressProposal(uint256 _uuid) private {\r\n        for(uint256 i = 0; i <= outstandingAddressProposalsIndex.length; i++)\r\n        {\r\n            if(outstandingAddressProposalsIndex[i] == _uuid)\r\n            {\r\n                outstandingAddressProposalsIndex[i] = outstandingAddressProposalsIndex[outstandingAddressProposalsIndex.length - 1];\r\n                outstandingAddressProposalsIndex.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function popThresholdProposal(uint256 _uuid) private {\r\n        for(uint256 i = 0; i <= outstandingThresholdProposalsIndex.length; i++)\r\n        {\r\n            if(outstandingThresholdProposalsIndex[i] == _uuid)\r\n            {\r\n                outstandingThresholdProposalsIndex[i] = outstandingThresholdProposalsIndex[outstandingThresholdProposalsIndex.length - 1];\r\n                outstandingThresholdProposalsIndex.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeSignatory(address _signatory) private {\r\n        for(uint256 i = 0; i <= signatories.length; i++)\r\n        {\r\n            if(signatories[i] == _signatory)\r\n            {\r\n                signatories[i] = signatories[signatories.length - 1];\r\n                signatories.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*****************  Modifiers **************** */\r\n    modifier onlySignatories() {\r\n        for (uint256 i = 0; i < signatories.length; i++) {\r\n            if (signatories[i] == msg.sender) {\r\n                _;\r\n            }\r\n        }\r\n    }\r\n\r\n    modifier oneVoteAddress (uint256 _proposal) {\r\n        for(uint256 i = 0; i < addressProposalStore[_proposal].signatures.length; i++){\r\n            require(addressProposalStore[_proposal].signatures[i] != msg.sender, \"You have already voted\");\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    modifier oneVoteThreshold (uint256 _proposal) {\r\n        for(uint256 i = 0; i < thresholdProposalStore[_proposal].signatures.length; i++){\r\n            require(thresholdProposalStore[_proposal].signatures[i] != msg.sender, \"You have already voted\");\r\n        }\r\n\r\n        _;\r\n    }\r\n    /*****************  Events **************** */\r\n    event ApprovedDispatcher(address newAddress); \r\n    event ApprovedSignatory(address newSignatory);\r\n    event ApprovedNewMultiSig(address newMultiSig);\r\n    event ApprovedNewToken(address newToken);\r\n    event RemovedSignatory(address oldSignatory);\r\n    event RemovedToken(address oldToken);\r\n    event ApprovedNewOwner(address newOwner);\r\n    event ApprovedNewThreshold(uint256 threshold);\r\n    event ProposeAddress(address proposedAddress, uint256 index);\r\n    event ProposeNewOwner(address newOwner);\r\n    event ProposeNewThreshold(uint256 threshold);\r\n}\r\n","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"ApprovedDispatcher\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMultiSig\",\"type\":\"address\"}],\"name\":\"ApprovedNewMultiSig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ApprovedNewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ApprovedNewThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"ApprovedNewToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newSignatory\",\"type\":\"address\"}],\"name\":\"ApprovedSignatory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposedAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ProposeAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"ProposeNewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ProposeNewThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldSignatory\",\"type\":\"address\"}],\"name\":\"RemovedSignatory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldToken\",\"type\":\"address\"}],\"name\":\"RemovedToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposal\",\"type\":\"uint256\"}],\"name\":\"approveNewDispatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposal\",\"type\":\"uint256\"}],\"name\":\"approveNewMultiSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposal\",\"type\":\"uint256\"}],\"name\":\"approveNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposal\",\"type\":\"uint256\"}],\"name\":\"approveNewThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposal\",\"type\":\"uint256\"}],\"name\":\"approveNewToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposal\",\"type\":\"uint256\"}],\"name\":\"approveNewVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposal\",\"type\":\"uint256\"}],\"name\":\"approveSignatory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getAddressProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"signatures\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"signed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"internalType\":\"struct VaultMultiSig.addressProposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOutstandingAddressProposals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOutstandingThresholdProposals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposalType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"signatures\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"signed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"internalType\":\"struct VaultMultiSig.addressProposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSignatories\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getThresholdProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"signatures\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"signed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"internalType\":\"struct VaultMultiSig.thresholdProposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"proposeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"proposeNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"proposeNewThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposal\",\"type\":\"uint256\"}],\"name\":\"removeSignatory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposal\",\"type\":\"uint256\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VaultMultiSig","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}