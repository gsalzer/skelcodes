{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ConjureFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.6;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./lib/CloneLibrary.sol\\\";\\r\\n\\r\\n/// @author Conjure Finance Team\\r\\n/// @title ConjureFactory\\r\\n/// @notice Factory contract to create new instances of Conjure\\r\\ncontract ConjureFactory {\\r\\n    using CloneLibrary for address;\\r\\n\\r\\n    event NewConjure(address conjure, address etherCollateral);\\r\\n    event FactoryOwnerChanged(address newowner);\\r\\n\\r\\n    address payable public factoryOwner;\\r\\n    address public conjureImplementation;\\r\\n    address public etherCollateralImplementation;\\r\\n    address payable public conjureRouter;\\r\\n\\r\\n    constructor(\\r\\n        address _conjureImplementation,\\r\\n        address _etherCollateralImplementation,\\r\\n        address payable _conjureRouter\\r\\n    )\\r\\n    {\\r\\n        require(_conjureImplementation != address(0), \\\"No zero address for conjure\\\");\\r\\n        require(_etherCollateralImplementation != address(0), \\\"No zero address for etherCollateral\\\");\\r\\n        require(_conjureRouter != address(0), \\\"No zero address for conjureRouter\\\");\\r\\n        \\r\\n        factoryOwner = msg.sender;\\r\\n        conjureImplementation = _conjureImplementation;\\r\\n        etherCollateralImplementation = _etherCollateralImplementation;\\r\\n        conjureRouter = _conjureRouter;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev lets anyone mint a new Conjure contract\\r\\n     *\\r\\n     *  @param oracleTypesValuesWeightsDecimals array containing the oracle type, oracle value, oracle weight,\\r\\n     *         oracle decimals array\\r\\n     *  @param callDataArray thr callData array for the oracle setup\\r\\n     *  @param signatures_ the array containing the signatures if the oracles\\r\\n     *  @param oracleAddresses_ the addresses array of the oracles containing 2 addresses: 1. address to call,\\r\\n     *         2. address of the token for supply if needed\\r\\n     *  @param divisorAssetTypeMintingFeeRatio array containing 2 arrays: 1. divisor + assetType, 2. mintingFee + CRatio\\r\\n     *  @param conjureAddresses containing the 2 conjure needed addresses: owner, ethUsdChainLinkOracle\\r\\n     *  @param nameSymbol array containing the name and the symbol of the asset\\r\\n     *  @param inverse indicator if this an inverse asset\\r\\n     *  @return conjure the conjure contract address\\r\\n     *  @return etherCollateral the EtherCollateral address\\r\\n    */\\r\\n    function conjureMint(\\r\\n        // oracle type, oracle value, oracle weight, oracle decimals array\\r\\n        uint256[][4] memory oracleTypesValuesWeightsDecimals,\\r\\n        bytes[] memory callDataArray,\\r\\n        string[] memory signatures_,\\r\\n        // oracle address to call, token address for supply\\r\\n        address[][2] memory oracleAddresses_,\\r\\n        // divisor, asset type // mintingFee, CRatio\\r\\n        uint256[2][2] memory divisorAssetTypeMintingFeeRatio,\\r\\n        // owner, ethUsdChainLinkOracle\\r\\n        address[] memory conjureAddresses,\\r\\n        // name, symbol\\r\\n        string[2] memory nameSymbol,\\r\\n        // inverse asset indicator\\r\\n        bool inverse\\r\\n    )\\r\\n    external\\r\\n    returns(address conjure, address etherCollateral)\\r\\n    {\\r\\n        conjure = conjureImplementation.createClone();\\r\\n        etherCollateral = etherCollateralImplementation.createClone();\\r\\n        \\r\\n        emit NewConjure(conjure, etherCollateral);\\r\\n\\r\\n        IConjure(conjure).initialize(\\r\\n            nameSymbol,\\r\\n            conjureAddresses,\\r\\n            address(this),\\r\\n            etherCollateral\\r\\n        );\\r\\n\\r\\n        IEtherCollateral(etherCollateral).initialize(\\r\\n            payable(conjure),\\r\\n            conjureAddresses[0],\\r\\n            address(this),\\r\\n            divisorAssetTypeMintingFeeRatio[1]\\r\\n        );\\r\\n\\r\\n        IConjure(conjure).init(\\r\\n            inverse,\\r\\n            divisorAssetTypeMintingFeeRatio[0],\\r\\n            oracleAddresses_,\\r\\n            oracleTypesValuesWeightsDecimals,\\r\\n            signatures_,\\r\\n            callDataArray\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev gets the address of the current factory owner\\r\\n     *\\r\\n     * @return the address of the conjure router\\r\\n    */\\r\\n    function getConjureRouter() external view returns (address payable) {\\r\\n        return conjureRouter;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev lets the owner change the current conjure implementation\\r\\n     *\\r\\n     * @param conjureImplementation_ the address of the new implementation\\r\\n    */\\r\\n    function newConjureImplementation(address conjureImplementation_) external {\\r\\n        require(msg.sender == factoryOwner, \\\"Only factory owner\\\");\\r\\n        require(conjureImplementation_ != address(0), \\\"No zero address for conjureImplementation_\\\");\\r\\n        \\r\\n        conjureImplementation = conjureImplementation_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev lets the owner change the current EtherCollateral implementation\\r\\n     *\\r\\n     * @param etherCollateralImplementation_ the address of the new implementation\\r\\n    */\\r\\n    function newEtherCollateralImplementation(address etherCollateralImplementation_) external {\\r\\n        require(msg.sender == factoryOwner, \\\"Only factory owner\\\");\\r\\n        require(etherCollateralImplementation_ != address(0), \\\"No zero address for etherCollateralImplementation_\\\");\\r\\n\\r\\n        etherCollateralImplementation = etherCollateralImplementation_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev lets the owner change the current conjure router\\r\\n     *\\r\\n     * @param conjureRouter_ the address of the new router\\r\\n    */\\r\\n    function newConjureRouter(address payable conjureRouter_) external {\\r\\n        require(msg.sender == factoryOwner, \\\"Only factory owner\\\");\\r\\n        require(conjureRouter_ != address(0), \\\"No zero address for conjureRouter_\\\");\\r\\n        \\r\\n        conjureRouter = conjureRouter_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev lets the owner change the ownership to another address\\r\\n     *\\r\\n     * @param newOwner the address of the new owner\\r\\n    */\\r\\n    function newFactoryOwner(address payable newOwner) external {\\r\\n        require(msg.sender == factoryOwner, \\\"Only factory owner\\\");\\r\\n        require(newOwner != address(0), \\\"No zero address for newOwner\\\");\\r\\n        \\r\\n        factoryOwner = newOwner;\\r\\n        emit FactoryOwnerChanged(factoryOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * receive function to receive funds\\r\\n    */\\r\\n    receive() external payable {}\\r\\n}\\r\\n\\r\\ninterface IConjure {\\r\\n    function initialize(\\r\\n        string[2] memory nameSymbol,\\r\\n        address[] memory conjureAddresses,\\r\\n        address factoryAddress_,\\r\\n        address collateralContract\\r\\n    ) external;\\r\\n\\r\\n    function init(\\r\\n        bool inverse_,\\r\\n        uint256[2] memory divisorAssetType,\\r\\n        address[][2] memory oracleAddresses_,\\r\\n        uint256[][4] memory oracleTypesValuesWeightsDecimals,\\r\\n        string[] memory signatures_,\\r\\n        bytes[] memory callData_\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IEtherCollateral {\\r\\n    function initialize(\\r\\n        address payable _asset,\\r\\n        address _owner,\\r\\n        address _factoryAddress,\\r\\n        uint256[2] memory _mintingFeeRatio\\r\\n    )\\r\\n    external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/lib/CloneLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.7.6;\\r\\n\\r\\n/*\\r\\nThe MIT License (MIT)\\r\\nCopyright (c) 2018 Murray Software, LLC.\\r\\nPermission is hereby granted, free of charge, to any person obtaining\\r\\na copy of this software and associated documentation files (the\\r\\n\\\"Software\\\"), to deal in the Software without restriction, including\\r\\nwithout limitation the rights to use, copy, modify, merge, publish,\\r\\ndistribute, sublicense, and/or sell copies of the Software, and to\\r\\npermit persons to whom the Software is furnished to do so, subject to\\r\\nthe following conditions:\\r\\nThe above copyright notice and this permission notice shall be included\\r\\nin all copies or substantial portions of the Software.\\r\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\r\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\r\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\r\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\r\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\r\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\r\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\r\\n*/\\r\\n//solhint-disable max-line-length\\r\\n//solhint-disable no-inline-assembly\\r\\n\\r\\n\\r\\n/**\\r\\n * EIP 1167 Proxy Deployment\\r\\n * Originally from https://github.com/optionality/clone-factory/\\r\\n */\\r\\nlibrary CloneLibrary {\\r\\n\\r\\n    function createClone(address target) internal returns (address result) {\\r\\n        // Reserve 55 bytes for the deploy code + 17 bytes as a buffer to prevent overwriting\\r\\n        // other memory in the final mstore\\r\\n        bytes memory cloneBuffer = new bytes(72);\\r\\n        assembly {\\r\\n            let clone := add(cloneBuffer, 32)\\r\\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\r\\n            mstore(add(clone, 0x14), shl(96, target))\\r\\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\r\\n            result := create(0, clone, 0x37)\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    function isClone(address target, address query) internal view returns (bool result) {\\r\\n        assembly {\\r\\n            let clone := mload(0x40)\\r\\n            mstore(clone, 0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000)\\r\\n            mstore(add(clone, 0xa), shl(96, target))\\r\\n            mstore(add(clone, 0x1e), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\r\\n\\r\\n            let other := add(clone, 0x40)\\r\\n            extcodecopy(query, other, 0, 0x2d)\\r\\n            result := and(\\r\\n                eq(mload(clone), mload(other)),\\r\\n                eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_conjureImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_etherCollateralImplementation\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_conjureRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"FactoryOwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"conjure\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"etherCollateral\",\"type\":\"address\"}],\"name\":\"NewConjure\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"conjureImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][4]\",\"name\":\"oracleTypesValuesWeightsDecimals\",\"type\":\"uint256[][4]\"},{\"internalType\":\"bytes[]\",\"name\":\"callDataArray\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures_\",\"type\":\"string[]\"},{\"internalType\":\"address[][2]\",\"name\":\"oracleAddresses_\",\"type\":\"address[][2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"divisorAssetTypeMintingFeeRatio\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"address[]\",\"name\":\"conjureAddresses\",\"type\":\"address[]\"},{\"internalType\":\"string[2]\",\"name\":\"nameSymbol\",\"type\":\"string[2]\"},{\"internalType\":\"bool\",\"name\":\"inverse\",\"type\":\"bool\"}],\"name\":\"conjureMint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"conjure\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"etherCollateral\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conjureRouter\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etherCollateralImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConjureRouter\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conjureImplementation_\",\"type\":\"address\"}],\"name\":\"newConjureImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"conjureRouter_\",\"type\":\"address\"}],\"name\":\"newConjureRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"etherCollateralImplementation_\",\"type\":\"address\"}],\"name\":\"newEtherCollateralImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"newFactoryOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ConjureFactory","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000087dfad2daf236db7890b38769a1871cb10abea9a0000000000000000000000004bd685bcf581f1170b5b065635b193a16f890cdf0000000000000000000000000263df631fd4f5825c29f49e33d2e9ce710ecc24","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}