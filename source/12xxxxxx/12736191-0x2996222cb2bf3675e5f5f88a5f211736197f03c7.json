{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/interfaces/ICorePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.1;\\n\\nimport \\\"./IPool.sol\\\";\\n\\ninterface ICorePool is IPool {\\n    function vaultRewardsPerToken() external view returns (uint256);\\n\\n    function poolTokenReserve() external view returns (uint256);\\n\\n    function stakeAsPool(address _staker, uint256 _amount) external;\\n\\n    function receiveVaultRewards(uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/interfaces/ILinkedToILV.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/**\\n * @title Linked to ILV Marker Interface\\n *\\n * @notice Marks smart contracts which are linked to IlluviumERC20 token instance upon construction,\\n *      all these smart contracts share a common ilv() address getter\\n *\\n * @notice Implementing smart contracts MUST verify that they get linked to real IlluviumERC20 instance\\n *      and that ilv() getter returns this very same instance address\\n *\\n * @author Basil Gorin\\n */\\ninterface ILinkedToILV {\\n  /**\\n   * @notice Getter for a verified IlluviumERC20 instance address\\n   *\\n   * @return IlluviumERC20 token instance address smart contract is linked to\\n   */\\n  function ilv() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport \\\"./ILinkedToILV.sol\\\";\\n\\n/**\\n * @title Illuvium Pool\\n *\\n * @notice An abstraction representing a pool, see IlluviumPoolBase for details\\n *\\n * @author Pedro Bergamini, reviewed by Basil Gorin\\n */\\ninterface IPool is ILinkedToILV {\\n    /**\\n     * @dev Deposit is a key data structure used in staking,\\n     *      it represents a unit of stake with its amount, weight and term (time interval)\\n     */\\n    struct Deposit {\\n        // @dev token amount staked\\n        uint256 tokenAmount;\\n        // @dev stake weight\\n        uint256 weight;\\n        // @dev locking period - from\\n        uint64 lockedFrom;\\n        // @dev locking period - until\\n        uint64 lockedUntil;\\n        // @dev indicates if the stake was created as a yield reward\\n        bool isYield;\\n    }\\n\\n    // for the rest of the functions see Soldoc in IlluviumPoolBase\\n\\n    function silv() external view returns (address);\\n\\n    function poolToken() external view returns (address);\\n\\n    function isFlashPool() external view returns (bool);\\n\\n    function weight() external view returns (uint32);\\n\\n    function lastYieldDistribution() external view returns (uint64);\\n\\n    function yieldRewardsPerWeight() external view returns (uint256);\\n\\n    function usersLockingWeight() external view returns (uint256);\\n\\n    function pendingYieldRewards(address _user) external view returns (uint256);\\n\\n    function balanceOf(address _user) external view returns (uint256);\\n\\n    function getDeposit(address _user, uint256 _depositId) external view returns (Deposit memory);\\n\\n    function getDepositsLength(address _user) external view returns (uint256);\\n\\n    function stake(\\n        uint256 _amount,\\n        uint64 _lockedUntil,\\n        bool useSILV\\n    ) external;\\n\\n    function unstake(\\n        uint256 _depositId,\\n        uint256 _amount,\\n        bool useSILV\\n    ) external;\\n\\n    function sync() external;\\n\\n    function processRewards(bool useSILV) external;\\n\\n    function setWeight(uint32 _weight) external;\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/pools/IlluviumAware.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport \\\"../token/IlluviumERC20.sol\\\";\\nimport \\\"../interfaces/ILinkedToILV.sol\\\";\\n\\n/**\\n * @title Illuvium Aware\\n *\\n * @notice Helper smart contract to be inherited by other smart contracts requiring to\\n *      be linked to verified IlluviumERC20 instance and performing some basic tasks on it\\n *\\n * @author Basil Gorin\\n */\\nabstract contract IlluviumAware is ILinkedToILV {\\n  /// @dev Link to ILV ERC20 Token IlluviumERC20 instance\\n  address public immutable override ilv;\\n\\n  /**\\n   * @dev Creates IlluviumAware instance, requiring to supply deployed IlluviumERC20 instance address\\n   *\\n   * @param _ilv deployed IlluviumERC20 instance address\\n   */\\n  constructor(address _ilv) {\\n    // verify ILV address is set and is correct\\n    require(_ilv != address(0), \\\"ILV address not set\\\");\\n    require(IlluviumERC20(_ilv).TOKEN_UID() == 0x83ecb176af7c4f35a45ff0018282e3a05a1018065da866182df12285866f5a2c, \\\"unexpected TOKEN_UID\\\");\\n\\n    // write ILV address\\n    ilv = _ilv;\\n  }\\n\\n  /**\\n   * @dev Executes IlluviumERC20.safeTransferFrom(address(this), _to, _value, \\\"\\\")\\n   *      on the bound IlluviumERC20 instance\\n   *\\n   * @dev Reentrancy safe due to the IlluviumERC20 design\\n   */\\n  function transferIlv(address _to, uint256 _value) internal {\\n    // just delegate call to the target\\n    transferIlvFrom(address(this), _to, _value);\\n  }\\n\\n  /**\\n   * @dev Executes IlluviumERC20.transferFrom(_from, _to, _value)\\n   *      on the bound IlluviumERC20 instance\\n   *\\n   * @dev Reentrancy safe due to the IlluviumERC20 design\\n   */\\n  function transferIlvFrom(address _from, address _to, uint256 _value) internal {\\n    // just delegate call to the target\\n    IlluviumERC20(ilv).transferFrom(_from, _to, _value);\\n  }\\n\\n  /**\\n   * @dev Executes IlluviumERC20.mint(_to, _values)\\n   *      on the bound IlluviumERC20 instance\\n   *\\n   * @dev Reentrancy safe due to the IlluviumERC20 design\\n   */\\n  function mintIlv(address _to, uint256 _value) internal {\\n    // just delegate call to the target\\n    IlluviumERC20(ilv).mint(_to, _value);\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/pools/IlluviumCorePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.1;\\n\\nimport \\\"./IlluviumPoolBase.sol\\\";\\n\\n/**\\n * @title Illuvium Core Pool\\n *\\n * @notice Core pools represent permanent pools like ILV or ILV/ETH Pair pool,\\n *      core pools allow staking for arbitrary periods of time up to 1 year\\n *\\n * @dev See IlluviumPoolBase for more details\\n *\\n * @author Pedro Bergamini, reviewed by Basil Gorin\\n */\\ncontract IlluviumCorePool is IlluviumPoolBase {\\n    /// @dev Flag indicating pool type, false means \\\"core pool\\\"\\n    bool public constant override isFlashPool = false;\\n\\n    /// @dev Link to deployed IlluviumVault instance\\n    address public vault;\\n\\n    /// @dev Used to calculate vault rewards\\n    /// @dev This value is different from \\\"reward per token\\\" used in locked pool\\n    /// @dev Note: stakes are different in duration and \\\"weight\\\" reflects that\\n    uint256 public vaultRewardsPerWeight;\\n\\n    /// @dev Pool tokens value available in the pool;\\n    ///      pool token examples are ILV (ILV core pool) or ILV/ETH pair (LP core pool)\\n    /// @dev For LP core pool this value doesnt' count for ILV tokens received as Vault rewards\\n    ///      while for ILV core pool it does count for such tokens as well\\n    uint256 public poolTokenReserve;\\n\\n    /**\\n     * @dev Fired in receiveVaultRewards()\\n     *\\n     * @param _by an address that sent the rewards, always a vault\\n     * @param amount amount of tokens received\\n     */\\n    event VaultRewardsReceived(address indexed _by, uint256 amount);\\n\\n    /**\\n     * @dev Fired in _processVaultRewards() and dependent functions, like processRewards()\\n     *\\n     * @param _by an address which executed the function\\n     * @param _to an address which received a reward\\n     * @param amount amount of reward received\\n     */\\n    event VaultRewardsClaimed(address indexed _by, address indexed _to, uint256 amount);\\n\\n    /**\\n     * @dev Fired in setVault()\\n     *\\n     * @param _by an address which executed the function, always a factory owner\\n     */\\n    event VaultUpdated(address indexed _by, address _fromVal, address _toVal);\\n\\n    /**\\n     * @dev Creates/deploys an instance of the core pool\\n     *\\n     * @param _ilv ILV ERC20 Token IlluviumERC20 address\\n     * @param _silv sILV ERC20 Token EscrowedIlluviumERC20 address\\n     * @param _factory Pool factory IlluviumPoolFactory instance/address\\n     * @param _poolToken token the pool operates on, for example ILV or ILV/ETH pair\\n     * @param _initBlock initial block used to calculate the rewards\\n     * @param _weight number representing a weight of the pool, actual weight fraction\\n     *      is calculated as that number divided by the total pools weight and doesn't exceed one\\n     */\\n    constructor(\\n        address _ilv,\\n        address _silv,\\n        IlluviumPoolFactory _factory,\\n        address _poolToken,\\n        uint64 _initBlock,\\n        uint32 _weight\\n    ) IlluviumPoolBase(_ilv, _silv, _factory, _poolToken, _initBlock, _weight) {}\\n\\n    /**\\n     * @notice Calculates current vault rewards value available for address specified\\n     *\\n     * @dev Performs calculations based on current smart contract state only,\\n     *      not taking into account any additional time/blocks which might have passed\\n     *\\n     * @param _staker an address to calculate vault rewards value for\\n     * @return pending calculated vault reward value for the given address\\n     */\\n    function pendingVaultRewards(address _staker) public view returns (uint256 pending) {\\n        User memory user = users[_staker];\\n\\n        return weightToReward(user.totalWeight, vaultRewardsPerWeight) - user.subVaultRewards;\\n    }\\n\\n    /**\\n     * @dev Executed only by the factory owner to Set the vault\\n     *\\n     * @param _vault an address of deployed IlluviumVault instance\\n     */\\n    function setVault(address _vault) external {\\n        // verify function is executed by the factory owner\\n        require(factory.owner() == msg.sender, \\\"access denied\\\");\\n\\n        // verify input is set\\n        require(_vault != address(0), \\\"zero input\\\");\\n\\n        // emit an event\\n        emit VaultUpdated(msg.sender, vault, _vault);\\n\\n        // update vault address\\n        vault = _vault;\\n    }\\n\\n    /**\\n     * @dev Executed by the vault to transfer vault rewards ILV from the vault\\n     *      into the pool\\n     *\\n     * @dev This function is executed only for ILV core pools\\n     *\\n     * @param _rewardsAmount amount of ILV rewards to transfer into the pool\\n     */\\n    function receiveVaultRewards(uint256 _rewardsAmount) external {\\n        require(msg.sender == vault, \\\"access denied\\\");\\n        // return silently if there is no reward to receive\\n        if (_rewardsAmount == 0) {\\n            return;\\n        }\\n        require(usersLockingWeight > 0, \\\"zero locking weight\\\");\\n\\n        transferIlvFrom(msg.sender, address(this), _rewardsAmount);\\n\\n        vaultRewardsPerWeight += rewardToWeight(_rewardsAmount, usersLockingWeight);\\n\\n        // update `poolTokenReserve` only if this is a ILV Core Pool\\n        if (poolToken == ilv) {\\n            poolTokenReserve += _rewardsAmount;\\n        }\\n\\n        emit VaultRewardsReceived(msg.sender, _rewardsAmount);\\n    }\\n\\n    /**\\n     * @notice Service function to calculate and pay pending vault and yield rewards to the sender\\n     *\\n     * @dev Internally executes similar function `_processRewards` from the parent smart contract\\n     *      to calculate and pay yield rewards; adds vault rewards processing\\n     *\\n     * @dev Can be executed by anyone at any time, but has an effect only when\\n     *      executed by deposit holder and when at least one block passes from the\\n     *      previous reward processing\\n     * @dev Executed internally when \\\"staking as a pool\\\" (`stakeAsPool`)\\n     * @dev When timing conditions are not met (executed too frequently, or after factory\\n     *      end block), function doesn't throw and exits silently\\n     *\\n     * @dev _useSILV flag has a context of yield rewards only\\n     *\\n     * @param _useSILV flag indicating whether to mint sILV token as a reward or not;\\n     *      when set to true - sILV reward is minted immediately and sent to sender,\\n     *      when set to false - new ILV reward deposit gets created if pool is an ILV pool\\n     *      (poolToken is ILV token), or new pool deposit gets created together with sILV minted\\n     *      when pool is not an ILV pool (poolToken is not an ILV token)\\n     */\\n    function processRewards(bool _useSILV) external override {\\n        _processRewards(msg.sender, _useSILV, true);\\n    }\\n\\n    /**\\n     * @dev Executed internally by the pool itself (from the parent `IlluviumPoolBase` smart contract)\\n     *      as part of yield rewards processing logic (`IlluviumPoolBase._processRewards` function)\\n     * @dev Executed when _useSILV is false and pool is not an ILV pool - see `IlluviumPoolBase._processRewards`\\n     *\\n     * @param _staker an address which stakes (the yield reward)\\n     * @param _amount amount to be staked (yield reward amount)\\n     */\\n    function stakeAsPool(address _staker, uint256 _amount) external {\\n        require(factory.poolExists(msg.sender), \\\"access denied\\\");\\n        _sync();\\n        User storage user = users[_staker];\\n        if (user.tokenAmount > 0) {\\n            _processRewards(_staker, true, false);\\n        }\\n        uint256 depositWeight = _amount * YEAR_STAKE_WEIGHT_MULTIPLIER;\\n        Deposit memory newDeposit =\\n            Deposit({\\n                tokenAmount: _amount,\\n                lockedFrom: uint64(now256()),\\n                lockedUntil: uint64(now256() + 365 days),\\n                weight: depositWeight,\\n                isYield: true\\n            });\\n        user.tokenAmount += _amount;\\n        user.totalWeight += depositWeight;\\n        user.deposits.push(newDeposit);\\n\\n        usersLockingWeight += depositWeight;\\n\\n        user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\\n        user.subVaultRewards = weightToReward(user.totalWeight, vaultRewardsPerWeight);\\n\\n        // update `poolTokenReserve` only if this is a LP Core Pool (stakeAsPool can be executed only for LP pool)\\n        poolTokenReserve += _amount;\\n    }\\n\\n    /**\\n     * @inheritdoc IlluviumPoolBase\\n     *\\n     * @dev Additionally to the parent smart contract, updates vault rewards of the holder,\\n     *      and updates (increases) pool token reserve (pool tokens value available in the pool)\\n     */\\n    function _stake(\\n        address _staker,\\n        uint256 _amount,\\n        uint64 _lockedUntil,\\n        bool _useSILV,\\n        bool _isYield\\n    ) internal override {\\n        super._stake(_staker, _amount, _lockedUntil, _useSILV, _isYield);\\n        User storage user = users[_staker];\\n        user.subVaultRewards = weightToReward(user.totalWeight, vaultRewardsPerWeight);\\n\\n        poolTokenReserve += _amount;\\n    }\\n\\n    /**\\n     * @inheritdoc IlluviumPoolBase\\n     *\\n     * @dev Additionally to the parent smart contract, updates vault rewards of the holder,\\n     *      and updates (decreases) pool token reserve (pool tokens value available in the pool)\\n     */\\n    function _unstake(\\n        address _staker,\\n        uint256 _depositId,\\n        uint256 _amount,\\n        bool _useSILV\\n    ) internal override {\\n        User storage user = users[_staker];\\n        Deposit memory stakeDeposit = user.deposits[_depositId];\\n        require(stakeDeposit.lockedFrom == 0 || now256() > stakeDeposit.lockedUntil, \\\"deposit not yet unlocked\\\");\\n        poolTokenReserve -= _amount;\\n        super._unstake(_staker, _depositId, _amount, _useSILV);\\n        user.subVaultRewards = weightToReward(user.totalWeight, vaultRewardsPerWeight);\\n    }\\n\\n    /**\\n     * @inheritdoc IlluviumPoolBase\\n     *\\n     * @dev Additionally to the parent smart contract, processes vault rewards of the holder,\\n     *      and for ILV pool updates (increases) pool token reserve (pool tokens value available in the pool)\\n     */\\n    function _processRewards(\\n        address _staker,\\n        bool _useSILV,\\n        bool _withUpdate\\n    ) internal override returns (uint256 pendingYield) {\\n        _processVaultRewards(_staker);\\n        pendingYield = super._processRewards(_staker, _useSILV, _withUpdate);\\n\\n        // update `poolTokenReserve` only if this is a ILV Core Pool\\n        if (poolToken == ilv && !_useSILV) {\\n            poolTokenReserve += pendingYield;\\n        }\\n    }\\n\\n    /**\\n     * @dev Used internally to process vault rewards for the staker\\n     *\\n     * @param _staker address of the user (staker) to process rewards for\\n     */\\n    function _processVaultRewards(address _staker) private {\\n        User storage user = users[_staker];\\n        uint256 pendingVaultClaim = pendingVaultRewards(_staker);\\n        if (pendingVaultClaim == 0) return;\\n        // read ILV token balance of the pool via standard ERC20 interface\\n        uint256 ilvBalance = IERC20(ilv).balanceOf(address(this));\\n        require(ilvBalance >= pendingVaultClaim, \\\"contract ILV balance too low\\\");\\n\\n        // update `poolTokenReserve` only if this is a ILV Core Pool\\n        if (poolToken == ilv) {\\n            // protects against rounding errors\\n            poolTokenReserve -= pendingVaultClaim > poolTokenReserve ? poolTokenReserve : pendingVaultClaim;\\n        }\\n\\n        user.subVaultRewards = weightToReward(user.totalWeight, vaultRewardsPerWeight);\\n\\n        // transfer fails if pool ILV balance is not enough - which is a desired behavior\\n        transferIlv(_staker, pendingVaultClaim);\\n\\n        emit VaultRewardsClaimed(msg.sender, _staker, pendingVaultClaim);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/pools/IlluviumPoolBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport \\\"../interfaces/IPool.sol\\\";\\nimport \\\"../interfaces/ICorePool.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\nimport \\\"./IlluviumPoolFactory.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\nimport \\\"../token/EscrowedIlluviumERC20.sol\\\";\\n\\n/**\\n * @title Illuvium Pool Base\\n *\\n * @notice An abstract contract containing common logic for any pool,\\n *      be it a flash pool (temporary pool like SNX) or a core pool (permanent pool like ILV/ETH or ILV pool)\\n *\\n * @dev Deployment and initialization.\\n *      Any pool deployed must be bound to the deployed pool factory (IlluviumPoolFactory)\\n *      Additionally, 3 token instance addresses must be defined on deployment:\\n *          - ILV token address\\n *          - sILV token address, used to mint sILV rewards\\n *          - pool token address, it can be ILV token address, ILV/ETH pair address, and others\\n *\\n * @dev Pool weight defines the fraction of the yield current pool receives among the other pools,\\n *      pool factory is responsible for the weight synchronization between the pools.\\n * @dev The weight is logically 10% for ILV pool and 90% for ILV/ETH pool.\\n *      Since Solidity doesn't support fractions the weight is defined by the division of\\n *      pool weight by total pools weight (sum of all registered pools within the factory)\\n * @dev For ILV Pool we use 100 as weight and for ILV/ETH pool - 900.\\n *\\n * @author Pedro Bergamini, reviewed by Basil Gorin\\n */\\nabstract contract IlluviumPoolBase is IPool, IlluviumAware, ReentrancyGuard {\\n    /// @dev Data structure representing token holder using a pool\\n    struct User {\\n        // @dev Total staked amount\\n        uint256 tokenAmount;\\n        // @dev Total weight\\n        uint256 totalWeight;\\n        // @dev Auxiliary variable for yield calculation\\n        uint256 subYieldRewards;\\n        // @dev Auxiliary variable for vault rewards calculation\\n        uint256 subVaultRewards;\\n        // @dev An array of holder's deposits\\n        Deposit[] deposits;\\n    }\\n\\n    /// @dev Token holder storage, maps token holder address to their data record\\n    mapping(address => User) public users;\\n\\n    /// @dev Link to sILV ERC20 Token EscrowedIlluviumERC20 instance\\n    address public immutable override silv;\\n\\n    /// @dev Link to the pool factory IlluviumPoolFactory instance\\n    IlluviumPoolFactory public immutable factory;\\n\\n    /// @dev Link to the pool token instance, for example ILV or ILV/ETH pair\\n    address public immutable override poolToken;\\n\\n    /// @dev Pool weight, 100 for ILV pool or 900 for ILV/ETH\\n    uint32 public override weight;\\n\\n    /// @dev Block number of the last yield distribution event\\n    uint64 public override lastYieldDistribution;\\n\\n    /// @dev Used to calculate yield rewards\\n    /// @dev This value is different from \\\"reward per token\\\" used in locked pool\\n    /// @dev Note: stakes are different in duration and \\\"weight\\\" reflects that\\n    uint256 public override yieldRewardsPerWeight;\\n\\n    /// @dev Used to calculate yield rewards, keeps track of the tokens weight locked in staking\\n    uint256 public override usersLockingWeight;\\n\\n    /**\\n     * @dev Stake weight is proportional to deposit amount and time locked, precisely\\n     *      \\\"deposit amount wei multiplied by (fraction of the year locked plus one)\\\"\\n     * @dev To avoid significant precision loss due to multiplication by \\\"fraction of the year\\\" [0, 1],\\n     *      weight is stored multiplied by 1e6 constant, as an integer\\n     * @dev Corner case 1: if time locked is zero, weight is deposit amount multiplied by 1e6\\n     * @dev Corner case 2: if time locked is one year, fraction of the year locked is one, and\\n     *      weight is a deposit amount multiplied by 2 * 1e6\\n     */\\n    uint256 internal constant WEIGHT_MULTIPLIER = 1e6;\\n\\n    /**\\n     * @dev When we know beforehand that staking is done for a year, and fraction of the year locked is one,\\n     *      we use simplified calculation and use the following constant instead previos one\\n     */\\n    uint256 internal constant YEAR_STAKE_WEIGHT_MULTIPLIER = 2 * WEIGHT_MULTIPLIER;\\n\\n    /**\\n     * @dev Rewards per weight are stored multiplied by 1e12, as integers.\\n     */\\n    uint256 internal constant REWARD_PER_WEIGHT_MULTIPLIER = 1e12;\\n\\n    /**\\n     * @dev Fired in _stake() and stake()\\n     *\\n     * @param _by an address which performed an operation, usually token holder\\n     * @param _from token holder address, the tokens will be returned to that address\\n     * @param amount amount of tokens staked\\n     */\\n    event Staked(address indexed _by, address indexed _from, uint256 amount);\\n\\n    /**\\n     * @dev Fired in _updateStakeLock() and updateStakeLock()\\n     *\\n     * @param _by an address which performed an operation\\n     * @param depositId updated deposit ID\\n     * @param lockedFrom deposit locked from value\\n     * @param lockedUntil updated deposit locked until value\\n     */\\n    event StakeLockUpdated(address indexed _by, uint256 depositId, uint64 lockedFrom, uint64 lockedUntil);\\n\\n    /**\\n     * @dev Fired in _unstake() and unstake()\\n     *\\n     * @param _by an address which performed an operation, usually token holder\\n     * @param _to an address which received the unstaked tokens, usually token holder\\n     * @param amount amount of tokens unstaked\\n     */\\n    event Unstaked(address indexed _by, address indexed _to, uint256 amount);\\n\\n    /**\\n     * @dev Fired in _sync(), sync() and dependent functions (stake, unstake, etc.)\\n     *\\n     * @param _by an address which performed an operation\\n     * @param yieldRewardsPerWeight updated yield rewards per weight value\\n     * @param lastYieldDistribution usually, current block number\\n     */\\n    event Synchronized(address indexed _by, uint256 yieldRewardsPerWeight, uint64 lastYieldDistribution);\\n\\n    /**\\n     * @dev Fired in _processRewards(), processRewards() and dependent functions (stake, unstake, etc.)\\n     *\\n     * @param _by an address which performed an operation\\n     * @param _to an address which claimed the yield reward\\n     * @param sIlv flag indicating if reward was paid (minted) in sILV\\n     * @param amount amount of yield paid\\n     */\\n    event YieldClaimed(address indexed _by, address indexed _to, bool sIlv, uint256 amount);\\n\\n    /**\\n     * @dev Fired in setWeight()\\n     *\\n     * @param _by an address which performed an operation, always a factory\\n     * @param _fromVal old pool weight value\\n     * @param _toVal new pool weight value\\n     */\\n    event PoolWeightUpdated(address indexed _by, uint32 _fromVal, uint32 _toVal);\\n\\n    /**\\n     * @dev Overridden in sub-contracts to construct the pool\\n     *\\n     * @param _ilv ILV ERC20 Token IlluviumERC20 address\\n     * @param _silv sILV ERC20 Token EscrowedIlluviumERC20 address\\n     * @param _factory Pool factory IlluviumPoolFactory instance/address\\n     * @param _poolToken token the pool operates on, for example ILV or ILV/ETH pair\\n     * @param _initBlock initial block used to calculate the rewards\\n     *      note: _initBlock can be set to the future effectively meaning _sync() calls will do nothing\\n     * @param _weight number representing a weight of the pool, actual weight fraction\\n     *      is calculated as that number divided by the total pools weight and doesn't exceed one\\n     */\\n    constructor(\\n        address _ilv,\\n        address _silv,\\n        IlluviumPoolFactory _factory,\\n        address _poolToken,\\n        uint64 _initBlock,\\n        uint32 _weight\\n    ) IlluviumAware(_ilv) {\\n        // verify the inputs are set\\n        require(_silv != address(0), \\\"sILV address not set\\\");\\n        require(address(_factory) != address(0), \\\"ILV Pool fct address not set\\\");\\n        require(_poolToken != address(0), \\\"pool token address not set\\\");\\n        require(_initBlock > 0, \\\"init block not set\\\");\\n        require(_weight > 0, \\\"pool weight not set\\\");\\n\\n        // verify sILV instance supplied\\n        require(\\n            EscrowedIlluviumERC20(_silv).TOKEN_UID() ==\\n                0xac3051b8d4f50966afb632468a4f61483ae6a953b74e387a01ef94316d6b7d62,\\n            \\\"unexpected sILV TOKEN_UID\\\"\\n        );\\n        // verify IlluviumPoolFactory instance supplied\\n        require(\\n            _factory.FACTORY_UID() == 0xc5cfd88c6e4d7e5c8a03c255f03af23c0918d8e82cac196f57466af3fd4a5ec7,\\n            \\\"unexpected FACTORY_UID\\\"\\n        );\\n\\n        // save the inputs into internal state variables\\n        silv = _silv;\\n        factory = _factory;\\n        poolToken = _poolToken;\\n        weight = _weight;\\n\\n        // init the dependent internal state variables\\n        lastYieldDistribution = _initBlock;\\n    }\\n\\n    /**\\n     * @notice Calculates current yield rewards value available for address specified\\n     *\\n     * @param _staker an address to calculate yield rewards value for\\n     * @return calculated yield reward value for the given address\\n     */\\n    function pendingYieldRewards(address _staker) external view override returns (uint256) {\\n        // `newYieldRewardsPerWeight` will store stored or recalculated value for `yieldRewardsPerWeight`\\n        uint256 newYieldRewardsPerWeight;\\n\\n        // if smart contract state was not updated recently, `yieldRewardsPerWeight` value\\n        // is outdated and we need to recalculate it in order to calculate pending rewards correctly\\n        if (blockNumber() > lastYieldDistribution && usersLockingWeight != 0) {\\n            uint256 endBlock = factory.endBlock();\\n            uint256 multiplier =\\n                blockNumber() > endBlock ? endBlock - lastYieldDistribution : blockNumber() - lastYieldDistribution;\\n            uint256 ilvRewards = (multiplier * weight * factory.ilvPerBlock()) / factory.totalWeight();\\n\\n            // recalculated value for `yieldRewardsPerWeight`\\n            newYieldRewardsPerWeight = rewardToWeight(ilvRewards, usersLockingWeight) + yieldRewardsPerWeight;\\n        } else {\\n            // if smart contract state is up to date, we don't recalculate\\n            newYieldRewardsPerWeight = yieldRewardsPerWeight;\\n        }\\n\\n        // based on the rewards per weight value, calculate pending rewards;\\n        User memory user = users[_staker];\\n        uint256 pending = weightToReward(user.totalWeight, newYieldRewardsPerWeight) - user.subYieldRewards;\\n\\n        return pending;\\n    }\\n\\n    /**\\n     * @notice Returns total staked token balance for the given address\\n     *\\n     * @param _user an address to query balance for\\n     * @return total staked token balance\\n     */\\n    function balanceOf(address _user) external view override returns (uint256) {\\n        // read specified user token amount and return\\n        return users[_user].tokenAmount;\\n    }\\n\\n    /**\\n     * @notice Returns information on the given deposit for the given address\\n     *\\n     * @dev See getDepositsLength\\n     *\\n     * @param _user an address to query deposit for\\n     * @param _depositId zero-indexed deposit ID for the address specified\\n     * @return deposit info as Deposit structure\\n     */\\n    function getDeposit(address _user, uint256 _depositId) external view override returns (Deposit memory) {\\n        // read deposit at specified index and return\\n        return users[_user].deposits[_depositId];\\n    }\\n\\n    /**\\n     * @notice Returns number of deposits for the given address. Allows iteration over deposits.\\n     *\\n     * @dev See getDeposit\\n     *\\n     * @param _user an address to query deposit length for\\n     * @return number of deposits for the given address\\n     */\\n    function getDepositsLength(address _user) external view override returns (uint256) {\\n        // read deposits array length and return\\n        return users[_user].deposits.length;\\n    }\\n\\n    /**\\n     * @notice Stakes specified amount of tokens for the specified amount of time,\\n     *      and pays pending yield rewards if any\\n     *\\n     * @dev Requires amount to stake to be greater than zero\\n     *\\n     * @param _amount amount of tokens to stake\\n     * @param _lockUntil stake period as unix timestamp; zero means no locking\\n     * @param _useSILV a flag indicating if previous reward to be paid as sILV\\n     */\\n    function stake(\\n        uint256 _amount,\\n        uint64 _lockUntil,\\n        bool _useSILV\\n    ) external override {\\n        // delegate call to an internal function\\n        _stake(msg.sender, _amount, _lockUntil, _useSILV, false);\\n    }\\n\\n    /**\\n     * @notice Unstakes specified amount of tokens, and pays pending yield rewards if any\\n     *\\n     * @dev Requires amount to unstake to be greater than zero\\n     *\\n     * @param _depositId deposit ID to unstake from, zero-indexed\\n     * @param _amount amount of tokens to unstake\\n     * @param _useSILV a flag indicating if reward to be paid as sILV\\n     */\\n    function unstake(\\n        uint256 _depositId,\\n        uint256 _amount,\\n        bool _useSILV\\n    ) external override {\\n        // delegate call to an internal function\\n        _unstake(msg.sender, _depositId, _amount, _useSILV);\\n    }\\n\\n    /**\\n     * @notice Extends locking period for a given deposit\\n     *\\n     * @dev Requires new lockedUntil value to be:\\n     *      higher than the current one, and\\n     *      in the future, but\\n     *      no more than 1 year in the future\\n     *\\n     * @param depositId updated deposit ID\\n     * @param lockedUntil updated deposit locked until value\\n     * @param useSILV used for _processRewards check if it should use ILV or sILV\\n     */\\n    function updateStakeLock(\\n        uint256 depositId,\\n        uint64 lockedUntil,\\n        bool useSILV\\n    ) external {\\n        // sync and call processRewards\\n        _sync();\\n        _processRewards(msg.sender, useSILV, false);\\n        // delegate call to an internal function\\n        _updateStakeLock(msg.sender, depositId, lockedUntil);\\n    }\\n\\n    /**\\n     * @notice Service function to synchronize pool state with current time\\n     *\\n     * @dev Can be executed by anyone at any time, but has an effect only when\\n     *      at least one block passes between synchronizations\\n     * @dev Executed internally when staking, unstaking, processing rewards in order\\n     *      for calculations to be correct and to reflect state progress of the contract\\n     * @dev When timing conditions are not met (executed too frequently, or after factory\\n     *      end block), function doesn't throw and exits silently\\n     */\\n    function sync() external override {\\n        // delegate call to an internal function\\n        _sync();\\n    }\\n\\n    /**\\n     * @notice Service function to calculate and pay pending yield rewards to the sender\\n     *\\n     * @dev Can be executed by anyone at any time, but has an effect only when\\n     *      executed by deposit holder and when at least one block passes from the\\n     *      previous reward processing\\n     * @dev Executed internally when staking and unstaking, executes sync() under the hood\\n     *      before making further calculations and payouts\\n     * @dev When timing conditions are not met (executed too frequently, or after factory\\n     *      end block), function doesn't throw and exits silently\\n     *\\n     * @param _useSILV flag indicating whether to mint sILV token as a reward or not;\\n     *      when set to true - sILV reward is minted immediately and sent to sender,\\n     *      when set to false - new ILV reward deposit gets created if pool is an ILV pool\\n     *      (poolToken is ILV token), or new pool deposit gets created together with sILV minted\\n     *      when pool is not an ILV pool (poolToken is not an ILV token)\\n     */\\n    function processRewards(bool _useSILV) external virtual override {\\n        // delegate call to an internal function\\n        _processRewards(msg.sender, _useSILV, true);\\n    }\\n\\n    /**\\n     * @dev Executed by the factory to modify pool weight; the factory is expected\\n     *      to keep track of the total pools weight when updating\\n     *\\n     * @dev Set weight to zero to disable the pool\\n     *\\n     * @param _weight new weight to set for the pool\\n     */\\n    function setWeight(uint32 _weight) external override {\\n        // verify function is executed by the factory\\n        require(msg.sender == address(factory), \\\"access denied\\\");\\n\\n        // emit an event logging old and new weight values\\n        emit PoolWeightUpdated(msg.sender, weight, _weight);\\n\\n        // set the new weight value\\n        weight = _weight;\\n    }\\n\\n    /**\\n     * @dev Similar to public pendingYieldRewards, but performs calculations based on\\n     *      current smart contract state only, not taking into account any additional\\n     *      time/blocks which might have passed\\n     *\\n     * @param _staker an address to calculate yield rewards value for\\n     * @return pending calculated yield reward value for the given address\\n     */\\n    function _pendingYieldRewards(address _staker) internal view returns (uint256 pending) {\\n        // read user data structure into memory\\n        User memory user = users[_staker];\\n\\n        // and perform the calculation using the values read\\n        return weightToReward(user.totalWeight, yieldRewardsPerWeight) - user.subYieldRewards;\\n    }\\n\\n    /**\\n     * @dev Used internally, mostly by children implementations, see stake()\\n     *\\n     * @param _staker an address which stakes tokens and which will receive them back\\n     * @param _amount amount of tokens to stake\\n     * @param _lockUntil stake period as unix timestamp; zero means no locking\\n     * @param _useSILV a flag indicating if previous reward to be paid as sILV\\n     * @param _isYield a flag indicating if that stake is created to store yield reward\\n     *      from the previously unstaked stake\\n     */\\n    function _stake(\\n        address _staker,\\n        uint256 _amount,\\n        uint64 _lockUntil,\\n        bool _useSILV,\\n        bool _isYield\\n    ) internal virtual {\\n        // validate the inputs\\n        require(_amount > 0, \\\"zero amount\\\");\\n        require(\\n            _lockUntil == 0 || (_lockUntil > now256() && _lockUntil - now256() <= 365 days),\\n            \\\"invalid lock interval\\\"\\n        );\\n\\n        // update smart contract state\\n        _sync();\\n\\n        // get a link to user data struct, we will write to it later\\n        User storage user = users[_staker];\\n        // process current pending rewards if any\\n        if (user.tokenAmount > 0) {\\n            _processRewards(_staker, _useSILV, false);\\n        }\\n\\n        // in most of the cases added amount `addedAmount` is simply `_amount`\\n        // however for deflationary tokens this can be different\\n\\n        // read the current balance\\n        uint256 previousBalance = IERC20(poolToken).balanceOf(address(this));\\n        // transfer `_amount`; note: some tokens may get burnt here\\n        transferPoolTokenFrom(address(msg.sender), address(this), _amount);\\n        // read new balance, usually this is just the difference `previousBalance - _amount`\\n        uint256 newBalance = IERC20(poolToken).balanceOf(address(this));\\n        // calculate real amount taking into account deflation\\n        uint256 addedAmount = newBalance - previousBalance;\\n\\n        // set the `lockFrom` and `lockUntil` taking into account that\\n        // zero value for `_lockUntil` means \\\"no locking\\\" and leads to zero values\\n        // for both `lockFrom` and `lockUntil`\\n        uint64 lockFrom = _lockUntil > 0 ? uint64(now256()) : 0;\\n        uint64 lockUntil = _lockUntil;\\n\\n        // stake weight formula rewards for locking\\n        uint256 stakeWeight =\\n            (((lockUntil - lockFrom) * WEIGHT_MULTIPLIER) / 365 days + WEIGHT_MULTIPLIER) * addedAmount;\\n\\n        // makes sure stakeWeight is valid\\n        assert(stakeWeight > 0);\\n\\n        // create and save the deposit (append it to deposits array)\\n        Deposit memory deposit =\\n            Deposit({\\n                tokenAmount: addedAmount,\\n                weight: stakeWeight,\\n                lockedFrom: lockFrom,\\n                lockedUntil: lockUntil,\\n                isYield: _isYield\\n            });\\n        // deposit ID is an index of the deposit in `deposits` array\\n        user.deposits.push(deposit);\\n\\n        // update user record\\n        user.tokenAmount += addedAmount;\\n        user.totalWeight += stakeWeight;\\n        user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\\n\\n        // update global variable\\n        usersLockingWeight += stakeWeight;\\n\\n        // emit an event\\n        emit Staked(msg.sender, _staker, _amount);\\n    }\\n\\n    /**\\n     * @dev Used internally, mostly by children implementations, see unstake()\\n     *\\n     * @param _staker an address which unstakes tokens (which previously staked them)\\n     * @param _depositId deposit ID to unstake from, zero-indexed\\n     * @param _amount amount of tokens to unstake\\n     * @param _useSILV a flag indicating if reward to be paid as sILV\\n     */\\n    function _unstake(\\n        address _staker,\\n        uint256 _depositId,\\n        uint256 _amount,\\n        bool _useSILV\\n    ) internal virtual {\\n        // verify an amount is set\\n        require(_amount > 0, \\\"zero amount\\\");\\n\\n        // get a link to user data struct, we will write to it later\\n        User storage user = users[_staker];\\n        // get a link to the corresponding deposit, we may write to it later\\n        Deposit storage stakeDeposit = user.deposits[_depositId];\\n        // deposit structure may get deleted, so we save isYield flag to be able to use it\\n        bool isYield = stakeDeposit.isYield;\\n\\n        // verify available balance\\n        // if staker address ot deposit doesn't exist this check will fail as well\\n        require(stakeDeposit.tokenAmount >= _amount, \\\"amount exceeds stake\\\");\\n\\n        // update smart contract state\\n        _sync();\\n        // and process current pending rewards if any\\n        _processRewards(_staker, _useSILV, false);\\n\\n        // recalculate deposit weight\\n        uint256 previousWeight = stakeDeposit.weight;\\n        uint256 newWeight =\\n            (((stakeDeposit.lockedUntil - stakeDeposit.lockedFrom) * WEIGHT_MULTIPLIER) /\\n                365 days +\\n                WEIGHT_MULTIPLIER) * (stakeDeposit.tokenAmount - _amount);\\n\\n        // update the deposit, or delete it if its depleted\\n        if (stakeDeposit.tokenAmount - _amount == 0) {\\n            delete user.deposits[_depositId];\\n        } else {\\n            stakeDeposit.tokenAmount -= _amount;\\n            stakeDeposit.weight = newWeight;\\n        }\\n\\n        // update user record\\n        user.tokenAmount -= _amount;\\n        user.totalWeight = user.totalWeight - previousWeight + newWeight;\\n        user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\\n\\n        // update global variable\\n        usersLockingWeight = usersLockingWeight - previousWeight + newWeight;\\n\\n        // if the deposit was created by the pool itself as a yield reward\\n        if (isYield) {\\n            // mint the yield via the factory\\n            factory.mintYieldTo(msg.sender, _amount);\\n        } else {\\n            // otherwise just return tokens back to holder\\n            transferPoolToken(msg.sender, _amount);\\n        }\\n\\n        // emit an event\\n        emit Unstaked(msg.sender, _staker, _amount);\\n    }\\n\\n    /**\\n     * @dev Used internally, mostly by children implementations, see sync()\\n     *\\n     * @dev Updates smart contract state (`yieldRewardsPerWeight`, `lastYieldDistribution`),\\n     *      updates factory state via `updateILVPerBlock`\\n     */\\n    function _sync() internal virtual {\\n        // update ILV per block value in factory if required\\n        if (factory.shouldUpdateRatio()) {\\n            factory.updateILVPerBlock();\\n        }\\n\\n        // check bound conditions and if these are not met -\\n        // exit silently, without emitting an event\\n        uint256 endBlock = factory.endBlock();\\n        if (lastYieldDistribution >= endBlock) {\\n            return;\\n        }\\n        if (blockNumber() <= lastYieldDistribution) {\\n            return;\\n        }\\n        // if locking weight is zero - update only `lastYieldDistribution` and exit\\n        if (usersLockingWeight == 0) {\\n            lastYieldDistribution = uint64(blockNumber());\\n            return;\\n        }\\n\\n        // to calculate the reward we need to know how many blocks passed, and reward per block\\n        uint256 currentBlock = blockNumber() > endBlock ? endBlock : blockNumber();\\n        uint256 blocksPassed = currentBlock - lastYieldDistribution;\\n        uint256 ilvPerBlock = factory.ilvPerBlock();\\n\\n        // calculate the reward\\n        uint256 ilvReward = (blocksPassed * ilvPerBlock * weight) / factory.totalWeight();\\n\\n        // update rewards per weight and `lastYieldDistribution`\\n        yieldRewardsPerWeight += rewardToWeight(ilvReward, usersLockingWeight);\\n        lastYieldDistribution = uint64(currentBlock);\\n\\n        // emit an event\\n        emit Synchronized(msg.sender, yieldRewardsPerWeight, lastYieldDistribution);\\n    }\\n\\n    /**\\n     * @dev Used internally, mostly by children implementations, see processRewards()\\n     *\\n     * @param _staker an address which receives the reward (which has staked some tokens earlier)\\n     * @param _useSILV flag indicating whether to mint sILV token as a reward or not, see processRewards()\\n     * @param _withUpdate flag allowing to disable synchronization (see sync()) if set to false\\n     * @return pendingYield the rewards calculated and optionally re-staked\\n     */\\n    function _processRewards(\\n        address _staker,\\n        bool _useSILV,\\n        bool _withUpdate\\n    ) internal virtual returns (uint256 pendingYield) {\\n        // update smart contract state if required\\n        if (_withUpdate) {\\n            _sync();\\n        }\\n\\n        // calculate pending yield rewards, this value will be returned\\n        pendingYield = _pendingYieldRewards(_staker);\\n\\n        // if pending yield is zero - just return silently\\n        if (pendingYield == 0) return 0;\\n\\n        // get link to a user data structure, we will write into it later\\n        User storage user = users[_staker];\\n\\n        // if sILV is requested\\n        if (_useSILV) {\\n            // - mint sILV\\n            mintSIlv(_staker, pendingYield);\\n        } else if (poolToken == ilv) {\\n            // calculate pending yield weight,\\n            // 2e6 is the bonus weight when staking for 1 year\\n            uint256 depositWeight = pendingYield * YEAR_STAKE_WEIGHT_MULTIPLIER;\\n\\n            // if the pool is ILV Pool - create new ILV deposit\\n            // and save it - push it into deposits array\\n            Deposit memory newDeposit =\\n                Deposit({\\n                    tokenAmount: pendingYield,\\n                    lockedFrom: uint64(now256()),\\n                    lockedUntil: uint64(now256() + 365 days), // staking yield for 1 year\\n                    weight: depositWeight,\\n                    isYield: true\\n                });\\n            user.deposits.push(newDeposit);\\n\\n            // update user record\\n            user.tokenAmount += pendingYield;\\n            user.totalWeight += depositWeight;\\n\\n            // update global variable\\n            usersLockingWeight += depositWeight;\\n        } else {\\n            // for other pools - stake as pool\\n            address ilvPool = factory.getPoolAddress(ilv);\\n            ICorePool(ilvPool).stakeAsPool(_staker, pendingYield);\\n        }\\n\\n        // update users's record for `subYieldRewards` if requested\\n        if (_withUpdate) {\\n            user.subYieldRewards = weightToReward(user.totalWeight, yieldRewardsPerWeight);\\n        }\\n\\n        // emit an event\\n        emit YieldClaimed(msg.sender, _staker, _useSILV, pendingYield);\\n    }\\n\\n    /**\\n     * @dev See updateStakeLock()\\n     *\\n     * @param _staker an address to update stake lock\\n     * @param _depositId updated deposit ID\\n     * @param _lockedUntil updated deposit locked until value\\n     */\\n    function _updateStakeLock(\\n        address _staker,\\n        uint256 _depositId,\\n        uint64 _lockedUntil\\n    ) internal {\\n        // validate the input time\\n        require(_lockedUntil > now256(), \\\"lock should be in the future\\\");\\n\\n        // get a link to user data struct, we will write to it later\\n        User storage user = users[_staker];\\n        // get a link to the corresponding deposit, we may write to it later\\n        Deposit storage stakeDeposit = user.deposits[_depositId];\\n\\n        // validate the input against deposit structure\\n        require(_lockedUntil > stakeDeposit.lockedUntil, \\\"invalid new lock\\\");\\n\\n        // verify locked from and locked until values\\n        if (stakeDeposit.lockedFrom == 0) {\\n            require(_lockedUntil - now256() <= 365 days, \\\"max lock period is 365 days\\\");\\n            stakeDeposit.lockedFrom = uint64(now256());\\n        } else {\\n            require(_lockedUntil - stakeDeposit.lockedFrom <= 365 days, \\\"max lock period is 365 days\\\");\\n        }\\n\\n        // update locked until value, calculate new weight\\n        stakeDeposit.lockedUntil = _lockedUntil;\\n        uint256 newWeight =\\n            (((stakeDeposit.lockedUntil - stakeDeposit.lockedFrom) * WEIGHT_MULTIPLIER) /\\n                365 days +\\n                WEIGHT_MULTIPLIER) * stakeDeposit.tokenAmount;\\n\\n        // save previous weight\\n        uint256 previousWeight = stakeDeposit.weight;\\n        // update weight\\n        stakeDeposit.weight = newWeight;\\n\\n        // update user total weight and global locking weight\\n        user.totalWeight = user.totalWeight - previousWeight + newWeight;\\n        usersLockingWeight = usersLockingWeight - previousWeight + newWeight;\\n\\n        // emit an event\\n        emit StakeLockUpdated(_staker, _depositId, stakeDeposit.lockedFrom, _lockedUntil);\\n    }\\n\\n    /**\\n     * @dev Converts stake weight (not to be mixed with the pool weight) to\\n     *      ILV reward value, applying the 10^12 division on weight\\n     *\\n     * @param _weight stake weight\\n     * @param rewardPerWeight ILV reward per weight\\n     * @return reward value normalized to 10^12\\n     */\\n    function weightToReward(uint256 _weight, uint256 rewardPerWeight) public pure returns (uint256) {\\n        // apply the formula and return\\n        return (_weight * rewardPerWeight) / REWARD_PER_WEIGHT_MULTIPLIER;\\n    }\\n\\n    /**\\n     * @dev Converts reward ILV value to stake weight (not to be mixed with the pool weight),\\n     *      applying the 10^12 multiplication on the reward\\n     *      - OR -\\n     * @dev Converts reward ILV value to reward/weight if stake weight is supplied as second\\n     *      function parameter instead of reward/weight\\n     *\\n     * @param reward yield reward\\n     * @param rewardPerWeight reward/weight (or stake weight)\\n     * @return stake weight (or reward/weight)\\n     */\\n    function rewardToWeight(uint256 reward, uint256 rewardPerWeight) public pure returns (uint256) {\\n        // apply the reverse formula and return\\n        return (reward * REWARD_PER_WEIGHT_MULTIPLIER) / rewardPerWeight;\\n    }\\n\\n    /**\\n     * @dev Testing time-dependent functionality is difficult and the best way of\\n     *      doing it is to override block number in helper test smart contracts\\n     *\\n     * @return `block.number` in mainnet, custom values in testnets (if overridden)\\n     */\\n    function blockNumber() public view virtual returns (uint256) {\\n        // return current block number\\n        return block.number;\\n    }\\n\\n    /**\\n     * @dev Testing time-dependent functionality is difficult and the best way of\\n     *      doing it is to override time in helper test smart contracts\\n     *\\n     * @return `block.timestamp` in mainnet, custom values in testnets (if overridden)\\n     */\\n    function now256() public view virtual returns (uint256) {\\n        // return current block timestamp\\n        return block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Executes EscrowedIlluviumERC20.mint(_to, _values)\\n     *      on the bound EscrowedIlluviumERC20 instance\\n     *\\n     * @dev Reentrancy safe due to the EscrowedIlluviumERC20 design\\n     */\\n    function mintSIlv(address _to, uint256 _value) private {\\n        // just delegate call to the target\\n        EscrowedIlluviumERC20(silv).mint(_to, _value);\\n    }\\n\\n    /**\\n     * @dev Executes SafeERC20.safeTransfer on a pool token\\n     *\\n     * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\\n     */\\n    function transferPoolToken(address _to, uint256 _value) internal nonReentrant {\\n        // just delegate call to the target\\n        SafeERC20.safeTransfer(IERC20(poolToken), _to, _value);\\n    }\\n\\n    /**\\n     * @dev Executes SafeERC20.safeTransferFrom on a pool token\\n     *\\n     * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\\n     */\\n    function transferPoolTokenFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal nonReentrant {\\n        // just delegate call to the target\\n        SafeERC20.safeTransferFrom(IERC20(poolToken), _from, _to, _value);\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/pools/IlluviumPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport \\\"../interfaces/IPool.sol\\\";\\nimport \\\"./IlluviumAware.sol\\\";\\nimport \\\"./IlluviumCorePool.sol\\\";\\nimport \\\"../token/EscrowedIlluviumERC20.sol\\\";\\nimport \\\"../utils/Ownable.sol\\\";\\n\\n/**\\n * @title Illuvium Pool Factory\\n *\\n * @notice ILV Pool Factory manages Illuvium Yield farming pools, provides a single\\n *      public interface to access the pools, provides an interface for the pools\\n *      to mint yield rewards, access pool-related info, update weights, etc.\\n *\\n * @notice The factory is authorized (via its owner) to register new pools, change weights\\n *      of the existing pools, removing the pools (by changing their weights to zero)\\n *\\n * @dev The factory requires ROLE_TOKEN_CREATOR permission on the ILV token to mint yield\\n *      (see `mintYieldTo` function)\\n *\\n * @author Pedro Bergamini, reviewed by Basil Gorin\\n */\\ncontract IlluviumPoolFactory is Ownable, IlluviumAware {\\n    /**\\n     * @dev Smart contract unique identifier, a random number\\n     * @dev Should be regenerated each time smart contact source code is changed\\n     *      and changes smart contract itself is to be redeployed\\n     * @dev Generated using https://www.random.org/bytes/\\n     */\\n    uint256 public constant FACTORY_UID = 0xc5cfd88c6e4d7e5c8a03c255f03af23c0918d8e82cac196f57466af3fd4a5ec7;\\n\\n    /// @dev Auxiliary data structure used only in getPoolData() view function\\n    struct PoolData {\\n        // @dev pool token address (like ILV)\\n        address poolToken;\\n        // @dev pool address (like deployed core pool instance)\\n        address poolAddress;\\n        // @dev pool weight (200 for ILV pools, 800 for ILV/ETH pools - set during deployment)\\n        uint32 weight;\\n        // @dev flash pool flag\\n        bool isFlashPool;\\n    }\\n\\n    /**\\n     * @dev ILV/block determines yield farming reward base\\n     *      used by the yield pools controlled by the factory\\n     */\\n    uint192 public ilvPerBlock;\\n\\n    /**\\n     * @dev The yield is distributed proportionally to pool weights;\\n     *      total weight is here to help in determining the proportion\\n     */\\n    uint32 public totalWeight;\\n\\n    /**\\n     * @dev ILV/block decreases by 3% every blocks/update (set to 91252 blocks during deployment);\\n     *      an update is triggered by executing `updateILVPerBlock` public function\\n     */\\n    uint32 public immutable blocksPerUpdate;\\n\\n    /**\\n     * @dev End block is the last block when ILV/block can be decreased;\\n     *      it is implied that yield farming stops after that block\\n     */\\n    uint32 public endBlock;\\n\\n    /**\\n     * @dev Each time the ILV/block ratio gets updated, the block number\\n     *      when the operation has occurred gets recorded into `lastRatioUpdate`\\n     * @dev This block number is then used to check if blocks/update `blocksPerUpdate`\\n     *      has passed when decreasing yield reward by 3%\\n     */\\n    uint32 public lastRatioUpdate;\\n\\n    /// @dev sILV token address is used to create ILV core pool(s)\\n    address public immutable silv;\\n\\n    /// @dev Maps pool token address (like ILV) -> pool address (like core pool instance)\\n    mapping(address => address) public pools;\\n\\n    /// @dev Keeps track of registered pool addresses, maps pool address -> exists flag\\n    mapping(address => bool) public poolExists;\\n\\n    /**\\n     * @dev Fired in createPool() and registerPool()\\n     *\\n     * @param _by an address which executed an action\\n     * @param poolToken pool token address (like ILV)\\n     * @param poolAddress deployed pool instance address\\n     * @param weight pool weight\\n     * @param isFlashPool flag indicating if pool is a flash pool\\n     */\\n    event PoolRegistered(\\n        address indexed _by,\\n        address indexed poolToken,\\n        address indexed poolAddress,\\n        uint64 weight,\\n        bool isFlashPool\\n    );\\n\\n    /**\\n     * @dev Fired in changePoolWeight()\\n     *\\n     * @param _by an address which executed an action\\n     * @param poolAddress deployed pool instance address\\n     * @param weight new pool weight\\n     */\\n    event WeightUpdated(address indexed _by, address indexed poolAddress, uint32 weight);\\n\\n    /**\\n     * @dev Fired in updateILVPerBlock()\\n     *\\n     * @param _by an address which executed an action\\n     * @param newIlvPerBlock new ILV/block value\\n     */\\n    event IlvRatioUpdated(address indexed _by, uint256 newIlvPerBlock);\\n\\n    /**\\n     * @dev Creates/deploys a factory instance\\n     *\\n     * @param _ilv ILV ERC20 token address\\n     * @param _silv sILV ERC20 token address\\n     * @param _ilvPerBlock initial ILV/block value for rewards\\n     * @param _blocksPerUpdate how frequently the rewards gets updated (decreased by 3%), blocks\\n     * @param _initBlock block number to measure _blocksPerUpdate from\\n     * @param _endBlock block number when farming stops and rewards cannot be updated anymore\\n     */\\n    constructor(\\n        address _ilv,\\n        address _silv,\\n        uint192 _ilvPerBlock,\\n        uint32 _blocksPerUpdate,\\n        uint32 _initBlock,\\n        uint32 _endBlock\\n    ) IlluviumAware(_ilv) {\\n        // verify the inputs are set\\n        require(_silv != address(0), \\\"sILV address not set\\\");\\n        require(_ilvPerBlock > 0, \\\"ILV/block not set\\\");\\n        require(_blocksPerUpdate > 0, \\\"blocks/update not set\\\");\\n        require(_initBlock > 0, \\\"init block not set\\\");\\n        require(_endBlock > _initBlock, \\\"invalid end block: must be greater than init block\\\");\\n\\n        // verify sILV instance supplied\\n        require(\\n            EscrowedIlluviumERC20(_silv).TOKEN_UID() ==\\n                0xac3051b8d4f50966afb632468a4f61483ae6a953b74e387a01ef94316d6b7d62,\\n            \\\"unexpected sILV TOKEN_UID\\\"\\n        );\\n\\n        // save the inputs into internal state variables\\n        silv = _silv;\\n        ilvPerBlock = _ilvPerBlock;\\n        blocksPerUpdate = _blocksPerUpdate;\\n        lastRatioUpdate = _initBlock;\\n        endBlock = _endBlock;\\n    }\\n\\n    /**\\n     * @notice Given a pool token retrieves corresponding pool address\\n     *\\n     * @dev A shortcut for `pools` mapping\\n     *\\n     * @param poolToken pool token address (like ILV) to query pool address for\\n     * @return pool address for the token specified\\n     */\\n    function getPoolAddress(address poolToken) external view returns (address) {\\n        // read the mapping and return\\n        return pools[poolToken];\\n    }\\n\\n    /**\\n     * @notice Reads pool information for the pool defined by its pool token address,\\n     *      designed to simplify integration with the front ends\\n     *\\n     * @param _poolToken pool token address to query pool information for\\n     * @return pool information packed in a PoolData struct\\n     */\\n    function getPoolData(address _poolToken) public view returns (PoolData memory) {\\n        // get the pool address from the mapping\\n        address poolAddr = pools[_poolToken];\\n\\n        // throw if there is no pool registered for the token specified\\n        require(poolAddr != address(0), \\\"pool not found\\\");\\n\\n        // read pool information from the pool smart contract\\n        // via the pool interface (IPool)\\n        address poolToken = IPool(poolAddr).poolToken();\\n        bool isFlashPool = IPool(poolAddr).isFlashPool();\\n        uint32 weight = IPool(poolAddr).weight();\\n\\n        // create the in-memory structure and return it\\n        return PoolData({ poolToken: poolToken, poolAddress: poolAddr, weight: weight, isFlashPool: isFlashPool });\\n    }\\n\\n    /**\\n     * @dev Verifies if `blocksPerUpdate` has passed since last ILV/block\\n     *      ratio update and if ILV/block reward can be decreased by 3%\\n     *\\n     * @return true if enough time has passed and `updateILVPerBlock` can be executed\\n     */\\n    function shouldUpdateRatio() public view returns (bool) {\\n        // if yield farming period has ended\\n        if (blockNumber() > endBlock) {\\n            // ILV/block reward cannot be updated anymore\\n            return false;\\n        }\\n\\n        // check if blocks/update (91252 blocks) have passed since last update\\n        return blockNumber() >= lastRatioUpdate + blocksPerUpdate;\\n    }\\n\\n    /**\\n     * @dev Creates a core pool (IlluviumCorePool) and registers it within the factory\\n     *\\n     * @dev Can be executed by the pool factory owner only\\n     *\\n     * @param poolToken pool token address (like ILV, or ILV/ETH pair)\\n     * @param initBlock init block to be used for the pool created\\n     * @param weight weight of the pool to be created\\n     */\\n    function createPool(\\n        address poolToken,\\n        uint64 initBlock,\\n        uint32 weight\\n    ) external virtual onlyOwner {\\n        // create/deploy new core pool instance\\n        IPool pool = new IlluviumCorePool(ilv, silv, this, poolToken, initBlock, weight);\\n\\n        // register it within a factory\\n        registerPool(address(pool));\\n    }\\n\\n    /**\\n     * @dev Registers an already deployed pool instance within the factory\\n     *\\n     * @dev Can be executed by the pool factory owner only\\n     *\\n     * @param poolAddr address of the already deployed pool instance\\n     */\\n    function registerPool(address poolAddr) public onlyOwner {\\n        // read pool information from the pool smart contract\\n        // via the pool interface (IPool)\\n        address poolToken = IPool(poolAddr).poolToken();\\n        bool isFlashPool = IPool(poolAddr).isFlashPool();\\n        uint32 weight = IPool(poolAddr).weight();\\n\\n        // ensure that the pool is not already registered within the factory\\n        require(pools[poolToken] == address(0), \\\"this pool is already registered\\\");\\n\\n        // create pool structure, register it within the factory\\n        pools[poolToken] = poolAddr;\\n        poolExists[poolAddr] = true;\\n        // update total pool weight of the factory\\n        totalWeight += weight;\\n\\n        // emit an event\\n        emit PoolRegistered(msg.sender, poolToken, poolAddr, weight, isFlashPool);\\n    }\\n\\n    /**\\n     * @notice Decreases ILV/block reward by 3%, can be executed\\n     *      no more than once per `blocksPerUpdate` blocks\\n     */\\n    function updateILVPerBlock() external {\\n        // checks if ratio can be updated i.e. if blocks/update (91252 blocks) have passed\\n        require(shouldUpdateRatio(), \\\"too frequent\\\");\\n\\n        // decreases ILV/block reward by 3%\\n        ilvPerBlock = (ilvPerBlock * 97) / 100;\\n\\n        // set current block as the last ratio update block\\n        lastRatioUpdate = uint32(blockNumber());\\n\\n        // emit an event\\n        emit IlvRatioUpdated(msg.sender, ilvPerBlock);\\n    }\\n\\n    /**\\n     * @dev Mints ILV tokens; executed by ILV Pool only\\n     *\\n     * @dev Requires factory to have ROLE_TOKEN_CREATOR permission\\n     *      on the ILV ERC20 token instance\\n     *\\n     * @param _to an address to mint tokens to\\n     * @param _amount amount of ILV tokens to mint\\n     */\\n    function mintYieldTo(address _to, uint256 _amount) external {\\n        // verify that sender is a pool registered withing the factory\\n        require(poolExists[msg.sender], \\\"access denied\\\");\\n\\n        // mint ILV tokens as required\\n        mintIlv(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Changes the weight of the pool;\\n     *      executed by the pool itself or by the factory owner\\n     *\\n     * @param poolAddr address of the pool to change weight for\\n     * @param weight new weight value to set to\\n     */\\n    function changePoolWeight(address poolAddr, uint32 weight) external {\\n        // verify function is executed either by factory owner or by the pool itself\\n        require(msg.sender == owner() || poolExists[msg.sender]);\\n\\n        // recalculate total weight\\n        totalWeight = totalWeight + weight - IPool(poolAddr).weight();\\n\\n        // set the new pool weight\\n        IPool(poolAddr).setWeight(weight);\\n\\n        // emit an event\\n        emit WeightUpdated(msg.sender, poolAddr, weight);\\n    }\\n\\n    /**\\n     * @dev Testing time-dependent functionality is difficult and the best way of\\n     *      doing it is to override block number in helper test smart contracts\\n     *\\n     * @return `block.number` in mainnet, custom values in testnets (if overridden)\\n     */\\n    function blockNumber() public view virtual returns (uint256) {\\n        // return current block number\\n        return block.number;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/pools/ReentrancyGuard.sol\": {\r\n      \"content\": \"// https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/security/ReentrancyGuard.sol\\n// #24a0bc23cfe3fbc76f8f2510b78af1e948ae6651\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.1;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n  // Booleans are more expensive than uint256 or any type that takes up a full\\n  // word because each write operation emits an extra SLOAD to first read the\\n  // slot's contents, replace the bits taken up by the boolean, and then write\\n  // back. This is the compiler's defense against contract upgrades and\\n  // pointer aliasing, and it cannot be disabled.\\n\\n  // The values being non-zero value makes deployment a bit more expensive,\\n  // but in exchange the refund on every call to nonReentrant will be lower in\\n  // amount. Since refunds are capped to a percentage of the total\\n  // transaction's gas, it is best to keep them low in cases like this one, to\\n  // increase the likelihood of the full refund coming into effect.\\n  uint256 private constant _NOT_ENTERED = 1;\\n  uint256 private constant _ENTERED = 2;\\n\\n  uint256 private _status;\\n\\n  constructor () {\\n    _status = _NOT_ENTERED;\\n  }\\n\\n  /**\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n   * function is not supported. It is possible to prevent this from happening\\n   * by making the `nonReentrant` function external, and make it call a\\n   * `private` function that does the actual work.\\n   */\\n  modifier nonReentrant() {\\n    // On the first call to nonReentrant, _notEntered will be true\\n    require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n    // Any calls to nonReentrant after this point will fail\\n    _status = _ENTERED;\\n\\n    _;\\n\\n    // By storing the original value once again, a refund is triggered (see\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\n    _status = _NOT_ENTERED;\\n  }\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/token/ERC20Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/**\\n * @title ERC20 token receiver interface\\n *\\n * @dev Interface for any contract that wants to support safe transfers\\n *      from ERC20 token smart contracts.\\n * @dev Inspired by ERC721 and ERC223 token standards\\n *\\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n * @dev See https://github.com/ethereum/EIPs/issues/223\\n *\\n * @author Basil Gorin\\n */\\ninterface ERC20Receiver {\\n  /**\\n   * @notice Handle the receipt of a ERC20 token(s)\\n   * @dev The ERC20 smart contract calls this function on the recipient\\n   *      after a successful transfer (`safeTransferFrom`).\\n   *      This function MAY throw to revert and reject the transfer.\\n   *      Return of other than the magic value MUST result in the transaction being reverted.\\n   * @notice The contract address is always the message sender.\\n   *      A wallet/broker/auction application MUST implement the wallet interface\\n   *      if it will accept safe transfers.\\n   * @param _operator The address which called `safeTransferFrom` function\\n   * @param _from The address which previously owned the token\\n   * @param _value amount of tokens which is being transferred\\n   * @param _data additional data with no specified format\\n   * @return `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` unless throwing\\n   */\\n  function onERC20Received(address _operator, address _from, uint256 _value, bytes calldata _data) external returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/token/EscrowedIlluviumERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport \\\"../utils/ERC20.sol\\\";\\nimport \\\"../utils/AccessControl.sol\\\";\\n\\ncontract EscrowedIlluviumERC20 is ERC20(\\\"Escrowed Illuvium\\\", \\\"sILV\\\"), AccessControl {\\n  /**\\n   * @dev Smart contract unique identifier, a random number\\n   * @dev Should be regenerated each time smart contact source code is changed\\n   *      and changes smart contract itself is to be redeployed\\n   * @dev Generated using https://www.random.org/bytes/\\n   */\\n  uint256 public constant TOKEN_UID = 0xac3051b8d4f50966afb632468a4f61483ae6a953b74e387a01ef94316d6b7d62;\\n\\n  /**\\n   * @notice Must be called by ROLE_TOKEN_CREATOR addresses.\\n   *\\n   * @param recipient address to receive the tokens.\\n   * @param amount number of tokens to be minted.\\n   */\\n  function mint(address recipient, uint256 amount) external {\\n    require(isSenderInRole(ROLE_TOKEN_CREATOR), \\\"insufficient privileges (ROLE_TOKEN_CREATOR required)\\\");\\n    _mint(recipient, amount);\\n  }\\n\\n  /**\\n   * @param amount number of tokens to be burned.\\n   */\\n  function burn(uint256 amount) external {\\n    _burn(msg.sender, amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/token/IlluviumERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport \\\"../utils/AddressUtils.sol\\\";\\nimport \\\"../utils/AccessControl.sol\\\";\\nimport \\\"./ERC20Receiver.sol\\\";\\n\\n/**\\n * @title Illuvium (ILV) ERC20 token\\n *\\n * @notice Illuvium is a core ERC20 token powering the game.\\n *      It serves as an in-game currency, is tradable on exchanges,\\n *      it powers up the governance protocol (Illuvium DAO) and participates in Yield Farming.\\n *\\n * @dev Token Summary:\\n *      - Symbol: ILV\\n *      - Name: Illuvium\\n *      - Decimals: 18\\n *      - Initial token supply: 7,000,000 ILV\\n *      - Maximum final token supply: 10,000,000 ILV\\n *          - Up to 3,000,000 ILV may get minted in 3 years period via yield farming\\n *      - Mintable: total supply may increase\\n *      - Burnable: total supply may decrease\\n *\\n * @dev Token balances and total supply are effectively 192 bits long, meaning that maximum\\n *      possible total supply smart contract is able to track is 2^192 (close to 10^40 tokens)\\n *\\n * @dev Smart contract doesn't use safe math. All arithmetic operations are overflow/underflow safe.\\n *      Additionally, Solidity 0.8.1 enforces overflow/underflow safety.\\n *\\n * @dev ERC20: reviewed according to https://eips.ethereum.org/EIPS/eip-20\\n *\\n * @dev ERC20: contract has passed OpenZeppelin ERC20 tests,\\n *      see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/test/token/ERC20/ERC20.behavior.js\\n *      see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/test/token/ERC20/ERC20.test.js\\n *      see adopted copies of these tests in the `test` folder\\n *\\n * @dev ERC223/ERC777: not supported;\\n *      send tokens via `safeTransferFrom` and implement `ERC20Receiver.onERC20Received` on the receiver instead\\n *\\n * @dev Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9) - resolved\\n *      Related events and functions are marked with \\\"ISBN:978-1-7281-3027-9\\\" tag:\\n *        - event Transferred(address indexed _by, address indexed _from, address indexed _to, uint256 _value)\\n *        - event Approved(address indexed _owner, address indexed _spender, uint256 _oldValue, uint256 _value)\\n *        - function increaseAllowance(address _spender, uint256 _value) public returns (bool)\\n *        - function decreaseAllowance(address _spender, uint256 _value) public returns (bool)\\n *      See: https://ieeexplore.ieee.org/document/8802438\\n *      See: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n *\\n * @author Basil Gorin\\n */\\ncontract IlluviumERC20 is AccessControl {\\n  /**\\n   * @dev Smart contract unique identifier, a random number\\n   * @dev Should be regenerated each time smart contact source code is changed\\n   *      and changes smart contract itself is to be redeployed\\n   * @dev Generated using https://www.random.org/bytes/\\n   */\\n  uint256 public constant TOKEN_UID = 0x83ecb176af7c4f35a45ff0018282e3a05a1018065da866182df12285866f5a2c;\\n\\n  /**\\n   * @notice Name of the token: Illuvium\\n   *\\n   * @notice ERC20 name of the token (long name)\\n   *\\n   * @dev ERC20 `function name() public view returns (string)`\\n   *\\n   * @dev Field is declared public: getter name() is created when compiled,\\n   *      it returns the name of the token.\\n   */\\n  string public constant name = \\\"Illuvium\\\";\\n\\n  /**\\n   * @notice Symbol of the token: ILV\\n   *\\n   * @notice ERC20 symbol of that token (short name)\\n   *\\n   * @dev ERC20 `function symbol() public view returns (string)`\\n   *\\n   * @dev Field is declared public: getter symbol() is created when compiled,\\n   *      it returns the symbol of the token\\n   */\\n  string public constant symbol = \\\"ILV\\\";\\n\\n  /**\\n   * @notice Decimals of the token: 18\\n   *\\n   * @dev ERC20 `function decimals() public view returns (uint8)`\\n   *\\n   * @dev Field is declared public: getter decimals() is created when compiled,\\n   *      it returns the number of decimals used to get its user representation.\\n   *      For example, if `decimals` equals `6`, a balance of `1,500,000` tokens should\\n   *      be displayed to a user as `1,5` (`1,500,000 / 10 ** 6`).\\n   *\\n   * @dev NOTE: This information is only used for _display_ purposes: it in\\n   *      no way affects any of the arithmetic of the contract, including balanceOf() and transfer().\\n   */\\n  uint8 public constant decimals = 18;\\n\\n  /**\\n   * @notice Total supply of the token: initially 7,000,000,\\n   *      with the potential to grow up to 10,000,000 during yield farming period (3 years)\\n   *\\n   * @dev ERC20 `function totalSupply() public view returns (uint256)`\\n   *\\n   * @dev Field is declared public: getter totalSupply() is created when compiled,\\n   *      it returns the amount of tokens in existence.\\n   */\\n  uint256 public totalSupply; // is set to 7 million * 10^18 in the constructor\\n\\n  /**\\n   * @dev A record of all the token balances\\n   * @dev This mapping keeps record of all token owners:\\n   *      owner => balance\\n   */\\n  mapping(address => uint256) public tokenBalances;\\n\\n  /**\\n   * @notice A record of each account's voting delegate\\n   *\\n   * @dev Auxiliary data structure used to sum up an account's voting power\\n   *\\n   * @dev This mapping keeps record of all voting power delegations:\\n   *      voting delegator (token owner) => voting delegate\\n   */\\n  mapping(address => address) public votingDelegates;\\n\\n  /**\\n   * @notice A voting power record binds voting power of a delegate to a particular\\n   *      block when the voting power delegation change happened\\n   */\\n  struct VotingPowerRecord {\\n    /*\\n     * @dev block.number when delegation has changed; starting from\\n     *      that block voting power value is in effect\\n     */\\n    uint64 blockNumber;\\n\\n    /*\\n     * @dev cumulative voting power a delegate has obtained starting\\n     *      from the block stored in blockNumber\\n     */\\n    uint192 votingPower;\\n  }\\n\\n  /**\\n   * @notice A record of each account's voting power\\n   *\\n   * @dev Primarily data structure to store voting power for each account.\\n   *      Voting power sums up from the account's token balance and delegated\\n   *      balances.\\n   *\\n   * @dev Stores current value and entire history of its changes.\\n   *      The changes are stored as an array of checkpoints.\\n   *      Checkpoint is an auxiliary data structure containing voting\\n   *      power (number of votes) and block number when the checkpoint is saved\\n   *\\n   * @dev Maps voting delegate => voting power record\\n   */\\n  mapping(address => VotingPowerRecord[]) public votingPowerHistory;\\n\\n  /**\\n   * @dev A record of nonces for signing/validating signatures in `delegateWithSig`\\n   *      for every delegate, increases after successful validation\\n   *\\n   * @dev Maps delegate address => delegate nonce\\n   */\\n  mapping(address => uint256) public nonces;\\n\\n  /**\\n   * @notice A record of all the allowances to spend tokens on behalf\\n   * @dev Maps token owner address to an address approved to spend\\n   *      some tokens on behalf, maps approved address to that amount\\n   * @dev owner => spender => value\\n   */\\n  mapping(address => mapping(address => uint256)) public transferAllowances;\\n\\n  /**\\n   * @notice Enables ERC20 transfers of the tokens\\n   *      (transfer by the token owner himself)\\n   * @dev Feature FEATURE_TRANSFERS must be enabled in order for\\n   *      `transfer()` function to succeed\\n   */\\n  uint32 public constant FEATURE_TRANSFERS = 0x0000_0001;\\n\\n  /**\\n   * @notice Enables ERC20 transfers on behalf\\n   *      (transfer by someone else on behalf of token owner)\\n   * @dev Feature FEATURE_TRANSFERS_ON_BEHALF must be enabled in order for\\n   *      `transferFrom()` function to succeed\\n   * @dev Token owner must call `approve()` first to authorize\\n   *      the transfer on behalf\\n   */\\n  uint32 public constant FEATURE_TRANSFERS_ON_BEHALF = 0x0000_0002;\\n\\n  /**\\n   * @dev Defines if the default behavior of `transfer` and `transferFrom`\\n   *      checks if the receiver smart contract supports ERC20 tokens\\n   * @dev When feature FEATURE_UNSAFE_TRANSFERS is enabled the transfers do not\\n   *      check if the receiver smart contract supports ERC20 tokens,\\n   *      i.e. `transfer` and `transferFrom` behave like `unsafeTransferFrom`\\n   * @dev When feature FEATURE_UNSAFE_TRANSFERS is disabled (default) the transfers\\n   *      check if the receiver smart contract supports ERC20 tokens,\\n   *      i.e. `transfer` and `transferFrom` behave like `safeTransferFrom`\\n   */\\n  uint32 public constant FEATURE_UNSAFE_TRANSFERS = 0x0000_0004;\\n\\n  /**\\n   * @notice Enables token owners to burn their own tokens,\\n   *      including locked tokens which are burnt first\\n   * @dev Feature FEATURE_OWN_BURNS must be enabled in order for\\n   *      `burn()` function to succeed when called by token owner\\n   */\\n  uint32 public constant FEATURE_OWN_BURNS = 0x0000_0008;\\n\\n  /**\\n   * @notice Enables approved operators to burn tokens on behalf of their owners,\\n   *      including locked tokens which are burnt first\\n   * @dev Feature FEATURE_OWN_BURNS must be enabled in order for\\n   *      `burn()` function to succeed when called by approved operator\\n   */\\n  uint32 public constant FEATURE_BURNS_ON_BEHALF = 0x0000_0010;\\n\\n  /**\\n   * @notice Enables delegators to elect delegates\\n   * @dev Feature FEATURE_DELEGATIONS must be enabled in order for\\n   *      `delegate()` function to succeed\\n   */\\n  uint32 public constant FEATURE_DELEGATIONS = 0x0000_0020;\\n\\n  /**\\n   * @notice Enables delegators to elect delegates on behalf\\n   *      (via an EIP712 signature)\\n   * @dev Feature FEATURE_DELEGATIONS must be enabled in order for\\n   *      `delegateWithSig()` function to succeed\\n   */\\n  uint32 public constant FEATURE_DELEGATIONS_ON_BEHALF = 0x0000_0040;\\n\\n  /**\\n   * @notice Token creator is responsible for creating (minting)\\n   *      tokens to an arbitrary address\\n   * @dev Role ROLE_TOKEN_CREATOR allows minting tokens\\n   *      (calling `mint` function)\\n   */\\n  uint32 public constant ROLE_TOKEN_CREATOR = 0x0001_0000;\\n\\n  /**\\n   * @notice Token destroyer is responsible for destroying (burning)\\n   *      tokens owned by an arbitrary address\\n   * @dev Role ROLE_TOKEN_DESTROYER allows burning tokens\\n   *      (calling `burn` function)\\n   */\\n  uint32 public constant ROLE_TOKEN_DESTROYER = 0x0002_0000;\\n\\n  /**\\n   * @notice ERC20 receivers are allowed to receive tokens without ERC20 safety checks,\\n   *      which may be useful to simplify tokens transfers into \\\"legacy\\\" smart contracts\\n   * @dev When `FEATURE_UNSAFE_TRANSFERS` is not enabled addresses having\\n   *      `ROLE_ERC20_RECEIVER` permission are allowed to receive tokens\\n   *      via `transfer` and `transferFrom` functions in the same way they\\n   *      would via `unsafeTransferFrom` function\\n   * @dev When `FEATURE_UNSAFE_TRANSFERS` is enabled `ROLE_ERC20_RECEIVER` permission\\n   *      doesn't affect the transfer behaviour since\\n   *      `transfer` and `transferFrom` behave like `unsafeTransferFrom` for any receiver\\n   * @dev ROLE_ERC20_RECEIVER is a shortening for ROLE_UNSAFE_ERC20_RECEIVER\\n   */\\n  uint32 public constant ROLE_ERC20_RECEIVER = 0x0004_0000;\\n\\n  /**\\n   * @notice ERC20 senders are allowed to send tokens without ERC20 safety checks,\\n   *      which may be useful to simplify tokens transfers into \\\"legacy\\\" smart contracts\\n   * @dev When `FEATURE_UNSAFE_TRANSFERS` is not enabled senders having\\n   *      `ROLE_ERC20_SENDER` permission are allowed to send tokens\\n   *      via `transfer` and `transferFrom` functions in the same way they\\n   *      would via `unsafeTransferFrom` function\\n   * @dev When `FEATURE_UNSAFE_TRANSFERS` is enabled `ROLE_ERC20_SENDER` permission\\n   *      doesn't affect the transfer behaviour since\\n   *      `transfer` and `transferFrom` behave like `unsafeTransferFrom` for any receiver\\n   * @dev ROLE_ERC20_SENDER is a shortening for ROLE_UNSAFE_ERC20_SENDER\\n   */\\n  uint32 public constant ROLE_ERC20_SENDER = 0x0008_0000;\\n\\n  /**\\n   * @dev Magic value to be returned by ERC20Receiver upon successful reception of token(s)\\n   * @dev Equal to `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))`,\\n   *      which can be also obtained as `ERC20Receiver(address(0)).onERC20Received.selector`\\n   */\\n  bytes4 private constant ERC20_RECEIVED = 0x4fc35859;\\n\\n  /**\\n   * @notice EIP-712 contract's domain typeHash, see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\n   */\\n  bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n  /**\\n   * @notice EIP-712 delegation struct typeHash, see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\n   */\\n  bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegate,uint256 nonce,uint256 expiry)\\\");\\n\\n  /**\\n   * @dev Fired in transfer(), transferFrom() and some other (non-ERC20) functions\\n   *\\n   * @dev ERC20 `event Transfer(address indexed _from, address indexed _to, uint256 _value)`\\n   *\\n   * @param _from an address tokens were consumed from\\n   * @param _to an address tokens were sent to\\n   * @param _value number of tokens transferred\\n   */\\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\\n\\n  /**\\n   * @dev Fired in approve() and approveAtomic() functions\\n   *\\n   * @dev ERC20 `event Approval(address indexed _owner, address indexed _spender, uint256 _value)`\\n   *\\n   * @param _owner an address which granted a permission to transfer\\n   *      tokens on its behalf\\n   * @param _spender an address which received a permission to transfer\\n   *      tokens on behalf of the owner `_owner`\\n   * @param _value amount of tokens granted to transfer on behalf\\n   */\\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n  /**\\n   * @dev Fired in mint() function\\n   *\\n   * @param _by an address which minted some tokens (transaction sender)\\n   * @param _to an address the tokens were minted to\\n   * @param _value an amount of tokens minted\\n   */\\n  event Minted(address indexed _by, address indexed _to, uint256 _value);\\n\\n  /**\\n   * @dev Fired in burn() function\\n   *\\n   * @param _by an address which burned some tokens (transaction sender)\\n   * @param _from an address the tokens were burnt from\\n   * @param _value an amount of tokens burnt\\n   */\\n  event Burnt(address indexed _by, address indexed _from, uint256 _value);\\n\\n  /**\\n   * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9)\\n   *\\n   * @dev Similar to ERC20 Transfer event, but also logs an address which executed transfer\\n   *\\n   * @dev Fired in transfer(), transferFrom() and some other (non-ERC20) functions\\n   *\\n   * @param _by an address which performed the transfer\\n   * @param _from an address tokens were consumed from\\n   * @param _to an address tokens were sent to\\n   * @param _value number of tokens transferred\\n   */\\n  event Transferred(address indexed _by, address indexed _from, address indexed _to, uint256 _value);\\n\\n  /**\\n   * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9)\\n   *\\n   * @dev Similar to ERC20 Approve event, but also logs old approval value\\n   *\\n   * @dev Fired in approve() and approveAtomic() functions\\n   *\\n   * @param _owner an address which granted a permission to transfer\\n   *      tokens on its behalf\\n   * @param _spender an address which received a permission to transfer\\n   *      tokens on behalf of the owner `_owner`\\n   * @param _oldValue previously granted amount of tokens to transfer on behalf\\n   * @param _value new granted amount of tokens to transfer on behalf\\n   */\\n  event Approved(address indexed _owner, address indexed _spender, uint256 _oldValue, uint256 _value);\\n\\n  /**\\n   * @dev Notifies that a key-value pair in `votingDelegates` mapping has changed,\\n   *      i.e. a delegator address has changed its delegate address\\n   *\\n   * @param _of delegator address, a token owner\\n   * @param _from old delegate, an address which delegate right is revoked\\n   * @param _to new delegate, an address which received the voting power\\n   */\\n  event DelegateChanged(address indexed _of, address indexed _from, address indexed _to);\\n\\n  /**\\n   * @dev Notifies that a key-value pair in `votingPowerHistory` mapping has changed,\\n   *      i.e. a delegate's voting power has changed.\\n   *\\n   * @param _of delegate whose voting power has changed\\n   * @param _fromVal previous number of votes delegate had\\n   * @param _toVal new number of votes delegate has\\n   */\\n  event VotingPowerChanged(address indexed _of, uint256 _fromVal, uint256 _toVal);\\n\\n  /**\\n   * @dev Deploys the token smart contract,\\n   *      assigns initial token supply to the address specified\\n   *\\n   * @param _initialHolder owner of the initial token supply\\n   */\\n  constructor(address _initialHolder) {\\n    // verify initial holder address non-zero (is set)\\n    require(_initialHolder != address(0), \\\"_initialHolder not set (zero address)\\\");\\n\\n    // mint initial supply\\n    mint(_initialHolder, 7_000_000e18);\\n  }\\n\\n  // ===== Start: ERC20/ERC223/ERC777 functions =====\\n\\n  /**\\n   * @notice Gets the balance of a particular address\\n   *\\n   * @dev ERC20 `function balanceOf(address _owner) public view returns (uint256 balance)`\\n   *\\n   * @param _owner the address to query the the balance for\\n   * @return balance an amount of tokens owned by the address specified\\n   */\\n  function balanceOf(address _owner) public view returns (uint256 balance) {\\n    // read the balance and return\\n    return tokenBalances[_owner];\\n  }\\n\\n  /**\\n   * @notice Transfers some tokens to an external address or a smart contract\\n   *\\n   * @dev ERC20 `function transfer(address _to, uint256 _value) public returns (bool success)`\\n   *\\n   * @dev Called by token owner (an address which has a\\n   *      positive token balance tracked by this smart contract)\\n   * @dev Throws on any error like\\n   *      * insufficient token balance or\\n   *      * incorrect `_to` address:\\n   *          * zero address or\\n   *          * self address or\\n   *          * smart contract which doesn't support ERC20\\n   *\\n   * @param _to an address to transfer tokens to,\\n   *      must be either an external address or a smart contract,\\n   *      compliant with the ERC20 standard\\n   * @param _value amount of tokens to be transferred, must\\n   *      be greater than zero\\n   * @return success true on success, throws otherwise\\n   */\\n  function transfer(address _to, uint256 _value) public returns (bool success) {\\n    // just delegate call to `transferFrom`,\\n    // `FEATURE_TRANSFERS` is verified inside it\\n    return transferFrom(msg.sender, _to, _value);\\n  }\\n\\n  /**\\n   * @notice Transfers some tokens on behalf of address `_from' (token owner)\\n   *      to some other address `_to`\\n   *\\n   * @dev ERC20 `function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)`\\n   *\\n   * @dev Called by token owner on his own or approved address,\\n   *      an address approved earlier by token owner to\\n   *      transfer some amount of tokens on its behalf\\n   * @dev Throws on any error like\\n   *      * insufficient token balance or\\n   *      * incorrect `_to` address:\\n   *          * zero address or\\n   *          * same as `_from` address (self transfer)\\n   *          * smart contract which doesn't support ERC20\\n   *\\n   * @param _from token owner which approved caller (transaction sender)\\n   *      to transfer `_value` of tokens on its behalf\\n   * @param _to an address to transfer tokens to,\\n   *      must be either an external address or a smart contract,\\n   *      compliant with the ERC20 standard\\n   * @param _value amount of tokens to be transferred, must\\n   *      be greater than zero\\n   * @return success true on success, throws otherwise\\n   */\\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\\n    // depending on `FEATURE_UNSAFE_TRANSFERS` we execute either safe (default)\\n    // or unsafe transfer\\n    // if `FEATURE_UNSAFE_TRANSFERS` is enabled\\n    // or receiver has `ROLE_ERC20_RECEIVER` permission\\n    // or sender has `ROLE_ERC20_SENDER` permission\\n    if(isFeatureEnabled(FEATURE_UNSAFE_TRANSFERS)\\n      || isOperatorInRole(_to, ROLE_ERC20_RECEIVER)\\n      || isSenderInRole(ROLE_ERC20_SENDER)) {\\n      // we execute unsafe transfer - delegate call to `unsafeTransferFrom`,\\n      // `FEATURE_TRANSFERS` is verified inside it\\n      unsafeTransferFrom(_from, _to, _value);\\n    }\\n    // otherwise - if `FEATURE_UNSAFE_TRANSFERS` is disabled\\n    // and receiver doesn't have `ROLE_ERC20_RECEIVER` permission\\n    else {\\n      // we execute safe transfer - delegate call to `safeTransferFrom`, passing empty `_data`,\\n      // `FEATURE_TRANSFERS` is verified inside it\\n      safeTransferFrom(_from, _to, _value, \\\"\\\");\\n    }\\n\\n    // both `unsafeTransferFrom` and `safeTransferFrom` throw on any error, so\\n    // if we're here - it means operation successful,\\n    // just return true\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Transfers some tokens on behalf of address `_from' (token owner)\\n   *      to some other address `_to`\\n   *\\n   * @dev Inspired by ERC721 safeTransferFrom, this function allows to\\n   *      send arbitrary data to the receiver on successful token transfer\\n   * @dev Called by token owner on his own or approved address,\\n   *      an address approved earlier by token owner to\\n   *      transfer some amount of tokens on its behalf\\n   * @dev Throws on any error like\\n   *      * insufficient token balance or\\n   *      * incorrect `_to` address:\\n   *          * zero address or\\n   *          * same as `_from` address (self transfer)\\n   *          * smart contract which doesn't support ERC20Receiver interface\\n   * @dev Returns silently on success, throws otherwise\\n   *\\n   * @param _from token owner which approved caller (transaction sender)\\n   *      to transfer `_value` of tokens on its behalf\\n   * @param _to an address to transfer tokens to,\\n   *      must be either an external address or a smart contract,\\n   *      compliant with the ERC20 standard\\n   * @param _value amount of tokens to be transferred, must\\n   *      be greater than zero\\n   * @param _data [optional] additional data with no specified format,\\n   *      sent in onERC20Received call to `_to` in case if its a smart contract\\n   */\\n  function safeTransferFrom(address _from, address _to, uint256 _value, bytes memory _data) public {\\n    // first delegate call to `unsafeTransferFrom`\\n    // to perform the unsafe token(s) transfer\\n    unsafeTransferFrom(_from, _to, _value);\\n\\n    // after the successful transfer - check if receiver supports\\n    // ERC20Receiver and execute a callback handler `onERC20Received`,\\n    // reverting whole transaction on any error:\\n    // check if receiver `_to` supports ERC20Receiver interface\\n    if(AddressUtils.isContract(_to)) {\\n      // if `_to` is a contract - execute onERC20Received\\n      bytes4 response = ERC20Receiver(_to).onERC20Received(msg.sender, _from, _value, _data);\\n\\n      // expected response is ERC20_RECEIVED\\n      require(response == ERC20_RECEIVED, \\\"invalid onERC20Received response\\\");\\n    }\\n  }\\n\\n  /**\\n   * @notice Transfers some tokens on behalf of address `_from' (token owner)\\n   *      to some other address `_to`\\n   *\\n   * @dev In contrast to `safeTransferFrom` doesn't check recipient\\n   *      smart contract to support ERC20 tokens (ERC20Receiver)\\n   * @dev Designed to be used by developers when the receiver is known\\n   *      to support ERC20 tokens but doesn't implement ERC20Receiver interface\\n   * @dev Called by token owner on his own or approved address,\\n   *      an address approved earlier by token owner to\\n   *      transfer some amount of tokens on its behalf\\n   * @dev Throws on any error like\\n   *      * insufficient token balance or\\n   *      * incorrect `_to` address:\\n   *          * zero address or\\n   *          * same as `_from` address (self transfer)\\n   * @dev Returns silently on success, throws otherwise\\n   *\\n   * @param _from token owner which approved caller (transaction sender)\\n   *      to transfer `_value` of tokens on its behalf\\n   * @param _to an address to transfer tokens to,\\n   *      must be either an external address or a smart contract,\\n   *      compliant with the ERC20 standard\\n   * @param _value amount of tokens to be transferred, must\\n   *      be greater than zero\\n   */\\n  function unsafeTransferFrom(address _from, address _to, uint256 _value) public {\\n    // if `_from` is equal to sender, require transfers feature to be enabled\\n    // otherwise require transfers on behalf feature to be enabled\\n    require(_from == msg.sender && isFeatureEnabled(FEATURE_TRANSFERS)\\n         || _from != msg.sender && isFeatureEnabled(FEATURE_TRANSFERS_ON_BEHALF),\\n            _from == msg.sender? \\\"transfers are disabled\\\": \\\"transfers on behalf are disabled\\\");\\n\\n    // non-zero source address check - Zeppelin\\n    // obviously, zero source address is a client mistake\\n    // it's not part of ERC20 standard but it's reasonable to fail fast\\n    // since for zero value transfer transaction succeeds otherwise\\n    require(_from != address(0), \\\"ERC20: transfer from the zero address\\\"); // Zeppelin msg\\n\\n    // non-zero recipient address check\\n    require(_to != address(0), \\\"ERC20: transfer to the zero address\\\"); // Zeppelin msg\\n\\n    // sender and recipient cannot be the same\\n    require(_from != _to, \\\"sender and recipient are the same (_from = _to)\\\");\\n\\n    // sending tokens to the token smart contract itself is a client mistake\\n    require(_to != address(this), \\\"invalid recipient (transfer to the token smart contract itself)\\\");\\n\\n    // according to ERC-20 Token Standard, https://eips.ethereum.org/EIPS/eip-20\\n    // \\\"Transfers of 0 values MUST be treated as normal transfers and fire the Transfer event.\\\"\\n    if(_value == 0) {\\n      // emit an ERC20 transfer event\\n      emit Transfer(_from, _to, _value);\\n\\n      // don't forget to return - we're done\\n      return;\\n    }\\n\\n    // no need to make arithmetic overflow check on the _value - by design of mint()\\n\\n    // in case of transfer on behalf\\n    if(_from != msg.sender) {\\n      // read allowance value - the amount of tokens allowed to transfer - into the stack\\n      uint256 _allowance = transferAllowances[_from][msg.sender];\\n\\n      // verify sender has an allowance to transfer amount of tokens requested\\n      require(_allowance >= _value, \\\"ERC20: transfer amount exceeds allowance\\\"); // Zeppelin msg\\n\\n      // update allowance value on the stack\\n      _allowance -= _value;\\n\\n      // update the allowance value in storage\\n      transferAllowances[_from][msg.sender] = _allowance;\\n\\n      // emit an improved atomic approve event\\n      emit Approved(_from, msg.sender, _allowance + _value, _allowance);\\n\\n      // emit an ERC20 approval event to reflect the decrease\\n      emit Approval(_from, msg.sender, _allowance);\\n    }\\n\\n    // verify sender has enough tokens to transfer on behalf\\n    require(tokenBalances[_from] >= _value, \\\"ERC20: transfer amount exceeds balance\\\"); // Zeppelin msg\\n\\n    // perform the transfer:\\n    // decrease token owner (sender) balance\\n    tokenBalances[_from] -= _value;\\n\\n    // increase `_to` address (receiver) balance\\n    tokenBalances[_to] += _value;\\n\\n    // move voting power associated with the tokens transferred\\n    __moveVotingPower(votingDelegates[_from], votingDelegates[_to], _value);\\n\\n    // emit an improved transfer event\\n    emit Transferred(msg.sender, _from, _to, _value);\\n\\n    // emit an ERC20 transfer event\\n    emit Transfer(_from, _to, _value);\\n  }\\n\\n  /**\\n   * @notice Approves address called `_spender` to transfer some amount\\n   *      of tokens on behalf of the owner\\n   *\\n   * @dev ERC20 `function approve(address _spender, uint256 _value) public returns (bool success)`\\n   *\\n   * @dev Caller must not necessarily own any tokens to grant the permission\\n   *\\n   * @param _spender an address approved by the caller (token owner)\\n   *      to spend some tokens on its behalf\\n   * @param _value an amount of tokens spender `_spender` is allowed to\\n   *      transfer on behalf of the token owner\\n   * @return success true on success, throws otherwise\\n   */\\n  function approve(address _spender, uint256 _value) public returns (bool success) {\\n    // non-zero spender address check - Zeppelin\\n    // obviously, zero spender address is a client mistake\\n    // it's not part of ERC20 standard but it's reasonable to fail fast\\n    require(_spender != address(0), \\\"ERC20: approve to the zero address\\\"); // Zeppelin msg\\n\\n    // read old approval value to emmit an improved event (ISBN:978-1-7281-3027-9)\\n    uint256 _oldValue = transferAllowances[msg.sender][_spender];\\n\\n    // perform an operation: write value requested into the storage\\n    transferAllowances[msg.sender][_spender] = _value;\\n\\n    // emit an improved atomic approve event (ISBN:978-1-7281-3027-9)\\n    emit Approved(msg.sender, _spender, _oldValue, _value);\\n\\n    // emit an ERC20 approval event\\n    emit Approval(msg.sender, _spender, _value);\\n\\n    // operation successful, return true\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Returns the amount which _spender is still allowed to withdraw from _owner.\\n   *\\n   * @dev ERC20 `function allowance(address _owner, address _spender) public view returns (uint256 remaining)`\\n   *\\n   * @dev A function to check an amount of tokens owner approved\\n   *      to transfer on its behalf by some other address called \\\"spender\\\"\\n   *\\n   * @param _owner an address which approves transferring some tokens on its behalf\\n   * @param _spender an address approved to transfer some tokens on behalf\\n   * @return remaining an amount of tokens approved address `_spender` can transfer on behalf\\n   *      of token owner `_owner`\\n   */\\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\\n    // read the value from storage and return\\n    return transferAllowances[_owner][_spender];\\n  }\\n\\n  // ===== End: ERC20/ERC223/ERC777 functions =====\\n\\n  // ===== Start: Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9) =====\\n\\n  /**\\n   * @notice Increases the allowance granted to `spender` by the transaction sender\\n   *\\n   * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9)\\n   *\\n   * @dev Throws if value to increase by is zero or too big and causes arithmetic overflow\\n   *\\n   * @param _spender an address approved by the caller (token owner)\\n   *      to spend some tokens on its behalf\\n   * @param _value an amount of tokens to increase by\\n   * @return success true on success, throws otherwise\\n   */\\n  function increaseAllowance(address _spender, uint256 _value) public virtual returns (bool) {\\n    // read current allowance value\\n    uint256 currentVal = transferAllowances[msg.sender][_spender];\\n\\n    // non-zero _value and arithmetic overflow check on the allowance\\n    require(currentVal + _value > currentVal, \\\"zero value approval increase or arithmetic overflow\\\");\\n\\n    // delegate call to `approve` with the new value\\n    return approve(_spender, currentVal + _value);\\n  }\\n\\n  /**\\n   * @notice Decreases the allowance granted to `spender` by the caller.\\n   *\\n   * @dev Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9)\\n   *\\n   * @dev Throws if value to decrease by is zero or is bigger than currently allowed value\\n   *\\n   * @param _spender an address approved by the caller (token owner)\\n   *      to spend some tokens on its behalf\\n   * @param _value an amount of tokens to decrease by\\n   * @return success true on success, throws otherwise\\n   */\\n  function decreaseAllowance(address _spender, uint256 _value) public virtual returns (bool) {\\n    // read current allowance value\\n    uint256 currentVal = transferAllowances[msg.sender][_spender];\\n\\n    // non-zero _value check on the allowance\\n    require(_value > 0, \\\"zero value approval decrease\\\");\\n\\n    // verify allowance decrease doesn't underflow\\n    require(currentVal >= _value, \\\"ERC20: decreased allowance below zero\\\");\\n\\n    // delegate call to `approve` with the new value\\n    return approve(_spender, currentVal - _value);\\n  }\\n\\n  // ===== End: Resolution for the Multiple Withdrawal Attack on ERC20 Tokens (ISBN:978-1-7281-3027-9) =====\\n\\n  // ===== Start: Minting/burning extension =====\\n\\n  /**\\n   * @dev Mints (creates) some tokens to address specified\\n   * @dev The value specified is treated as is without taking\\n   *      into account what `decimals` value is\\n   * @dev Behaves effectively as `mintTo` function, allowing\\n   *      to specify an address to mint tokens to\\n   * @dev Requires sender to have `ROLE_TOKEN_CREATOR` permission\\n   *\\n   * @dev Throws on overflow, if totalSupply + _value doesn't fit into uint256\\n   *\\n   * @param _to an address to mint tokens to\\n   * @param _value an amount of tokens to mint (create)\\n   */\\n  function mint(address _to, uint256 _value) public {\\n    // check if caller has sufficient permissions to mint tokens\\n    require(isSenderInRole(ROLE_TOKEN_CREATOR), \\\"insufficient privileges (ROLE_TOKEN_CREATOR required)\\\");\\n\\n    // non-zero recipient address check\\n    require(_to != address(0), \\\"ERC20: mint to the zero address\\\"); // Zeppelin msg\\n\\n    // non-zero _value and arithmetic overflow check on the total supply\\n    // this check automatically secures arithmetic overflow on the individual balance\\n    require(totalSupply + _value > totalSupply, \\\"zero value mint or arithmetic overflow\\\");\\n\\n    // uint192 overflow check (required by voting delegation)\\n    require(totalSupply + _value <= type(uint192).max, \\\"total supply overflow (uint192)\\\");\\n\\n    // perform mint:\\n    // increase total amount of tokens value\\n    totalSupply += _value;\\n\\n    // increase `_to` address balance\\n    tokenBalances[_to] += _value;\\n\\n    // create voting power associated with the tokens minted\\n    __moveVotingPower(address(0), votingDelegates[_to], _value);\\n\\n    // fire a minted event\\n    emit Minted(msg.sender, _to, _value);\\n\\n    // emit an improved transfer event\\n    emit Transferred(msg.sender, address(0), _to, _value);\\n\\n    // fire ERC20 compliant transfer event\\n    emit Transfer(address(0), _to, _value);\\n  }\\n\\n  /**\\n   * @dev Burns (destroys) some tokens from the address specified\\n   * @dev The value specified is treated as is without taking\\n   *      into account what `decimals` value is\\n   * @dev Behaves effectively as `burnFrom` function, allowing\\n   *      to specify an address to burn tokens from\\n   * @dev Requires sender to have `ROLE_TOKEN_DESTROYER` permission\\n   *\\n   * @param _from an address to burn some tokens from\\n   * @param _value an amount of tokens to burn (destroy)\\n   */\\n  function burn(address _from, uint256 _value) public {\\n    // check if caller has sufficient permissions to burn tokens\\n    // and if not - check for possibility to burn own tokens or to burn on behalf\\n    if(!isSenderInRole(ROLE_TOKEN_DESTROYER)) {\\n      // if `_from` is equal to sender, require own burns feature to be enabled\\n      // otherwise require burns on behalf feature to be enabled\\n      require(_from == msg.sender && isFeatureEnabled(FEATURE_OWN_BURNS)\\n           || _from != msg.sender && isFeatureEnabled(FEATURE_BURNS_ON_BEHALF),\\n              _from == msg.sender? \\\"burns are disabled\\\": \\\"burns on behalf are disabled\\\");\\n\\n      // in case of burn on behalf\\n      if(_from != msg.sender) {\\n        // read allowance value - the amount of tokens allowed to be burnt - into the stack\\n        uint256 _allowance = transferAllowances[_from][msg.sender];\\n\\n        // verify sender has an allowance to burn amount of tokens requested\\n        require(_allowance >= _value, \\\"ERC20: burn amount exceeds allowance\\\"); // Zeppelin msg\\n\\n        // update allowance value on the stack\\n        _allowance -= _value;\\n\\n        // update the allowance value in storage\\n        transferAllowances[_from][msg.sender] = _allowance;\\n\\n        // emit an improved atomic approve event\\n        emit Approved(msg.sender, _from, _allowance + _value, _allowance);\\n\\n        // emit an ERC20 approval event to reflect the decrease\\n        emit Approval(_from, msg.sender, _allowance);\\n      }\\n    }\\n\\n    // at this point we know that either sender is ROLE_TOKEN_DESTROYER or\\n    // we burn own tokens or on behalf (in latest case we already checked and updated allowances)\\n    // we have left to execute balance checks and burning logic itself\\n\\n    // non-zero burn value check\\n    require(_value != 0, \\\"zero value burn\\\");\\n\\n    // non-zero source address check - Zeppelin\\n    require(_from != address(0), \\\"ERC20: burn from the zero address\\\"); // Zeppelin msg\\n\\n    // verify `_from` address has enough tokens to destroy\\n    // (basically this is a arithmetic overflow check)\\n    require(tokenBalances[_from] >= _value, \\\"ERC20: burn amount exceeds balance\\\"); // Zeppelin msg\\n\\n    // perform burn:\\n    // decrease `_from` address balance\\n    tokenBalances[_from] -= _value;\\n\\n    // decrease total amount of tokens value\\n    totalSupply -= _value;\\n\\n    // destroy voting power associated with the tokens burnt\\n    __moveVotingPower(votingDelegates[_from], address(0), _value);\\n\\n    // fire a burnt event\\n    emit Burnt(msg.sender, _from, _value);\\n\\n    // emit an improved transfer event\\n    emit Transferred(msg.sender, _from, address(0), _value);\\n\\n    // fire ERC20 compliant transfer event\\n    emit Transfer(_from, address(0), _value);\\n  }\\n\\n  // ===== End: Minting/burning extension =====\\n\\n  // ===== Start: DAO Support (Compound-like voting delegation) =====\\n\\n  /**\\n   * @notice Gets current voting power of the account `_of`\\n   * @param _of the address of account to get voting power of\\n   * @return current cumulative voting power of the account,\\n   *      sum of token balances of all its voting delegators\\n   */\\n  function getVotingPower(address _of) public view returns (uint256) {\\n    // get a link to an array of voting power history records for an address specified\\n    VotingPowerRecord[] storage history = votingPowerHistory[_of];\\n\\n    // lookup the history and return latest element\\n    return history.length == 0? 0: history[history.length - 1].votingPower;\\n  }\\n\\n  /**\\n   * @notice Gets past voting power of the account `_of` at some block `_blockNum`\\n   * @dev Throws if `_blockNum` is not in the past (not the finalized block)\\n   * @param _of the address of account to get voting power of\\n   * @param _blockNum block number to get the voting power at\\n   * @return past cumulative voting power of the account,\\n   *      sum of token balances of all its voting delegators at block number `_blockNum`\\n   */\\n  function getVotingPowerAt(address _of, uint256 _blockNum) public view returns (uint256) {\\n    // make sure block number is not in the past (not the finalized block)\\n    require(_blockNum < block.number, \\\"not yet determined\\\"); // Compound msg\\n\\n    // get a link to an array of voting power history records for an address specified\\n    VotingPowerRecord[] storage history = votingPowerHistory[_of];\\n\\n    // if voting power history for the account provided is empty\\n    if(history.length == 0) {\\n      // than voting power is zero - return the result\\n      return 0;\\n    }\\n\\n    // check latest voting power history record block number:\\n    // if history was not updated after the block of interest\\n    if(history[history.length - 1].blockNumber <= _blockNum) {\\n      // we're done - return last voting power record\\n      return getVotingPower(_of);\\n    }\\n\\n    // check first voting power history record block number:\\n    // if history was never updated before the block of interest\\n    if(history[0].blockNumber > _blockNum) {\\n      // we're done - voting power at the block num of interest was zero\\n      return 0;\\n    }\\n\\n    // `votingPowerHistory[_of]` is an array ordered by `blockNumber`, ascending;\\n    // apply binary search on `votingPowerHistory[_of]` to find such an entry number `i`, that\\n    // `votingPowerHistory[_of][i].blockNumber <= _blockNum`, but in the same time\\n    // `votingPowerHistory[_of][i + 1].blockNumber > _blockNum`\\n    // return the result - voting power found at index `i`\\n    return history[__binaryLookup(_of, _blockNum)].votingPower;\\n  }\\n\\n  /**\\n   * @dev Reads an entire voting power history array for the delegate specified\\n   *\\n   * @param _of delegate to query voting power history for\\n   * @return voting power history array for the delegate of interest\\n   */\\n  function getVotingPowerHistory(address _of) public view returns(VotingPowerRecord[] memory) {\\n    // return an entire array as memory\\n    return votingPowerHistory[_of];\\n  }\\n\\n  /**\\n   * @dev Returns length of the voting power history array for the delegate specified;\\n   *      useful since reading an entire array just to get its length is expensive (gas cost)\\n   *\\n   * @param _of delegate to query voting power history length for\\n   * @return voting power history array length for the delegate of interest\\n   */\\n  function getVotingPowerHistoryLength(address _of) public view returns(uint256) {\\n    // read array length and return\\n    return votingPowerHistory[_of].length;\\n  }\\n\\n  /**\\n   * @notice Delegates voting power of the delegator `msg.sender` to the delegate `_to`\\n   *\\n   * @dev Accepts zero value address to delegate voting power to, effectively\\n   *      removing the delegate in that case\\n   *\\n   * @param _to address to delegate voting power to\\n   */\\n  function delegate(address _to) public {\\n    // verify delegations are enabled\\n    require(isFeatureEnabled(FEATURE_DELEGATIONS), \\\"delegations are disabled\\\");\\n    // delegate call to `__delegate`\\n    __delegate(msg.sender, _to);\\n  }\\n\\n  /**\\n   * @notice Delegates voting power of the delegator (represented by its signature) to the delegate `_to`\\n   *\\n   * @dev Accepts zero value address to delegate voting power to, effectively\\n   *      removing the delegate in that case\\n   *\\n   * @dev Compliant with EIP-712: Ethereum typed structured data hashing and signing,\\n   *      see https://eips.ethereum.org/EIPS/eip-712\\n   *\\n   * @param _to address to delegate voting power to\\n   * @param _nonce nonce used to construct the signature, and used to validate it;\\n   *      nonce is increased by one after successful signature validation and vote delegation\\n   * @param _exp signature expiration time\\n   * @param v the recovery byte of the signature\\n   * @param r half of the ECDSA signature pair\\n   * @param s half of the ECDSA signature pair\\n   */\\n  function delegateWithSig(address _to, uint256 _nonce, uint256 _exp, uint8 v, bytes32 r, bytes32 s) public {\\n    // verify delegations on behalf are enabled\\n    require(isFeatureEnabled(FEATURE_DELEGATIONS_ON_BEHALF), \\\"delegations on behalf are disabled\\\");\\n\\n    // build the EIP-712 contract domain separator\\n    bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), block.chainid, address(this)));\\n\\n    // build the EIP-712 hashStruct of the delegation message\\n    bytes32 hashStruct = keccak256(abi.encode(DELEGATION_TYPEHASH, _to, _nonce, _exp));\\n\\n    // calculate the EIP-712 digest \\\"\\\\x19\\\\x01\\\" ‖ domainSeparator ‖ hashStruct(message)\\n    bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, hashStruct));\\n\\n    // recover the address who signed the message with v, r, s\\n    address signer = ecrecover(digest, v, r, s);\\n\\n    // perform message integrity and security validations\\n    require(signer != address(0), \\\"invalid signature\\\"); // Compound msg\\n    require(_nonce == nonces[signer], \\\"invalid nonce\\\"); // Compound msg\\n    require(block.timestamp < _exp, \\\"signature expired\\\"); // Compound msg\\n\\n    // update the nonce for that particular signer to avoid replay attack\\n    nonces[signer]++;\\n\\n    // delegate call to `__delegate` - execute the logic required\\n    __delegate(signer, _to);\\n  }\\n\\n  /**\\n   * @dev Auxiliary function to delegate delegator's `_from` voting power to the delegate `_to`\\n   * @dev Writes to `votingDelegates` and `votingPowerHistory` mappings\\n   *\\n   * @param _from delegator who delegates his voting power\\n   * @param _to delegate who receives the voting power\\n   */\\n  function __delegate(address _from, address _to) private {\\n    // read current delegate to be replaced by a new one\\n    address _fromDelegate = votingDelegates[_from];\\n\\n    // read current voting power (it is equal to token balance)\\n    uint256 _value = tokenBalances[_from];\\n\\n    // reassign voting delegate to `_to`\\n    votingDelegates[_from] = _to;\\n\\n    // update voting power for `_fromDelegate` and `_to`\\n    __moveVotingPower(_fromDelegate, _to, _value);\\n\\n    // emit an event\\n    emit DelegateChanged(_from, _fromDelegate, _to);\\n  }\\n\\n  /**\\n   * @dev Auxiliary function to move voting power `_value`\\n   *      from delegate `_from` to the delegate `_to`\\n   *\\n   * @dev Doesn't have any effect if `_from == _to`, or if `_value == 0`\\n   *\\n   * @param _from delegate to move voting power from\\n   * @param _to delegate to move voting power to\\n   * @param _value voting power to move from `_from` to `_to`\\n   */\\n  function __moveVotingPower(address _from, address _to, uint256 _value) private {\\n    // if there is no move (`_from == _to`) or there is nothing to move (`_value == 0`)\\n    if(_from == _to || _value == 0) {\\n      // return silently with no action\\n      return;\\n    }\\n\\n    // if source address is not zero - decrease its voting power\\n    if(_from != address(0)) {\\n      // read current source address voting power\\n      uint256 _fromVal = getVotingPower(_from);\\n\\n      // calculate decreased voting power\\n      // underflow is not possible by design:\\n      // voting power is limited by token balance which is checked by the callee\\n      uint256 _toVal = _fromVal - _value;\\n\\n      // update source voting power from `_fromVal` to `_toVal`\\n      __updateVotingPower(_from, _fromVal, _toVal);\\n    }\\n\\n    // if destination address is not zero - increase its voting power\\n    if(_to != address(0)) {\\n      // read current destination address voting power\\n      uint256 _fromVal = getVotingPower(_to);\\n\\n      // calculate increased voting power\\n      // overflow is not possible by design:\\n      // max token supply limits the cumulative voting power\\n      uint256 _toVal = _fromVal + _value;\\n\\n      // update destination voting power from `_fromVal` to `_toVal`\\n      __updateVotingPower(_to, _fromVal, _toVal);\\n    }\\n  }\\n\\n  /**\\n   * @dev Auxiliary function to update voting power of the delegate `_of`\\n   *      from value `_fromVal` to value `_toVal`\\n   *\\n   * @param _of delegate to update its voting power\\n   * @param _fromVal old voting power of the delegate\\n   * @param _toVal new voting power of the delegate\\n   */\\n  function __updateVotingPower(address _of, uint256 _fromVal, uint256 _toVal) private {\\n    // get a link to an array of voting power history records for an address specified\\n    VotingPowerRecord[] storage history = votingPowerHistory[_of];\\n\\n    // if there is an existing voting power value stored for current block\\n    if(history.length != 0 && history[history.length - 1].blockNumber == block.number) {\\n      // update voting power which is already stored in the current block\\n      history[history.length - 1].votingPower = uint192(_toVal);\\n    }\\n    // otherwise - if there is no value stored for current block\\n    else {\\n      // add new element into array representing the value for current block\\n      history.push(VotingPowerRecord(uint64(block.number), uint192(_toVal)));\\n    }\\n\\n    // emit an event\\n    emit VotingPowerChanged(_of, _fromVal, _toVal);\\n  }\\n\\n  /**\\n   * @dev Auxiliary function to lookup an element in a sorted (asc) array of elements\\n   *\\n   * @dev This function finds the closest element in an array to the value\\n   *      of interest (not exceeding that value) and returns its index within an array\\n   *\\n   * @dev An array to search in is `votingPowerHistory[_to][i].blockNumber`,\\n   *      it is sorted in ascending order (blockNumber increases)\\n   *\\n   * @param _to an address of the delegate to get an array for\\n   * @param n value of interest to look for\\n   * @return an index of the closest element in an array to the value\\n   *      of interest (not exceeding that value)\\n   */\\n  function __binaryLookup(address _to, uint256 n) private view returns(uint256) {\\n    // get a link to an array of voting power history records for an address specified\\n    VotingPowerRecord[] storage history = votingPowerHistory[_to];\\n\\n    // left bound of the search interval, originally start of the array\\n    uint256 i = 0;\\n\\n    // right bound of the search interval, originally end of the array\\n    uint256 j = history.length - 1;\\n\\n    // the iteration process narrows down the bounds by\\n    // splitting the interval in a half oce per each iteration\\n    while(j > i) {\\n      // get an index in the middle of the interval [i, j]\\n      uint256 k = j - (j - i) / 2;\\n\\n      // read an element to compare it with the value of interest\\n      VotingPowerRecord memory cp = history[k];\\n\\n      // if we've got a strict equal - we're lucky and done\\n      if(cp.blockNumber == n) {\\n        // just return the result - index `k`\\n        return k;\\n      }\\n      // if the value of interest is bigger - move left bound to the middle\\n      else if (cp.blockNumber < n) {\\n        // move left bound `i` to the middle position `k`\\n        i = k;\\n      }\\n      // otherwise, when the value of interest is smaller - move right bound to the middle\\n      else {\\n        // move right bound `j` to the middle position `k - 1`:\\n        // element at position `k` is bigger and cannot be the result\\n        j = k - 1;\\n      }\\n    }\\n\\n    // reaching that point means no exact match found\\n    // since we're interested in the element which is not bigger than the\\n    // element of interest, we return the lower bound `i`\\n    return i;\\n  }\\n}\\n\\n// ===== End: DAO Support (Compound-like voting delegation) =====\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/utils/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/**\\n * @title Access Control List\\n *\\n * @notice Access control smart contract provides an API to check\\n *      if specific operation is permitted globally and/or\\n *      if particular user has a permission to execute it.\\n *\\n * @notice It deals with two main entities: features and roles.\\n *\\n * @notice Features are designed to be used to enable/disable specific\\n *      functions (public functions) of the smart contract for everyone.\\n * @notice User roles are designed to restrict access to specific\\n *      functions (restricted functions) of the smart contract to some users.\\n *\\n * @notice Terms \\\"role\\\", \\\"permissions\\\" and \\\"set of permissions\\\" have equal meaning\\n *      in the documentation text and may be used interchangeably.\\n * @notice Terms \\\"permission\\\", \\\"single permission\\\" implies only one permission bit set.\\n *\\n * @dev This smart contract is designed to be inherited by other\\n *      smart contracts which require access control management capabilities.\\n *\\n * @author Basil Gorin\\n */\\ncontract AccessControl {\\n  /**\\n   * @notice Access manager is responsible for assigning the roles to users,\\n   *      enabling/disabling global features of the smart contract\\n   * @notice Access manager can add, remove and update user roles,\\n   *      remove and update global features\\n   *\\n   * @dev Role ROLE_ACCESS_MANAGER allows modifying user roles and global features\\n   * @dev Role ROLE_ACCESS_MANAGER has single bit at position 255 enabled\\n   */\\n  uint256 public constant ROLE_ACCESS_MANAGER = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n  /**\\n   * @dev Bitmask representing all the possible permissions (super admin role)\\n   * @dev Has all the bits are enabled (2^256 - 1 value)\\n   */\\n  uint256 private constant FULL_PRIVILEGES_MASK = type(uint256).max; // before 0.8.0: uint256(-1) overflows to 0xFFFF...\\n\\n  /**\\n   * @notice Privileged addresses with defined roles/permissions\\n   * @notice In the context of ERC20/ERC721 tokens these can be permissions to\\n   *      allow minting or burning tokens, transferring on behalf and so on\\n   *\\n   * @dev Maps user address to the permissions bitmask (role), where each bit\\n   *      represents a permission\\n   * @dev Bitmask 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n   *      represents all possible permissions\\n   * @dev Zero address mapping represents global features of the smart contract\\n   */\\n  mapping(address => uint256) public userRoles;\\n\\n  /**\\n   * @dev Fired in updateRole() and updateFeatures()\\n   *\\n   * @param _by operator which called the function\\n   * @param _to address which was granted/revoked permissions\\n   * @param _requested permissions requested\\n   * @param _actual permissions effectively set\\n   */\\n  event RoleUpdated(address indexed _by, address indexed _to, uint256 _requested, uint256 _actual);\\n\\n  /**\\n   * @notice Creates an access control instance,\\n   *      setting contract creator to have full privileges\\n   */\\n  constructor() {\\n    // contract creator has full privileges\\n    userRoles[msg.sender] = FULL_PRIVILEGES_MASK;\\n  }\\n\\n  /**\\n   * @notice Retrieves globally set of features enabled\\n   *\\n   * @dev Auxiliary getter function to maintain compatibility with previous\\n   *      versions of the Access Control List smart contract, where\\n   *      features was a separate uint256 public field\\n   *\\n   * @return 256-bit bitmask of the features enabled\\n   */\\n  function features() public view returns(uint256) {\\n    // according to new design features are stored in zero address\\n    // mapping of `userRoles` structure\\n    return userRoles[address(0)];\\n  }\\n\\n  /**\\n   * @notice Updates set of the globally enabled features (`features`),\\n   *      taking into account sender's permissions\\n   *\\n   * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n   * @dev Function is left for backward compatibility with older versions\\n   *\\n   * @param _mask bitmask representing a set of features to enable/disable\\n   */\\n  function updateFeatures(uint256 _mask) public {\\n    // delegate call to `updateRole`\\n    updateRole(address(0), _mask);\\n  }\\n\\n  /**\\n   * @notice Updates set of permissions (role) for a given user,\\n   *      taking into account sender's permissions.\\n   *\\n   * @dev Setting role to zero is equivalent to removing an all permissions\\n   * @dev Setting role to `FULL_PRIVILEGES_MASK` is equivalent to\\n   *      copying senders' permissions (role) to the user\\n   * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n   *\\n   * @param operator address of a user to alter permissions for or zero\\n   *      to alter global features of the smart contract\\n   * @param role bitmask representing a set of permissions to\\n   *      enable/disable for a user specified\\n   */\\n  function updateRole(address operator, uint256 role) public {\\n    // caller must have a permission to update user roles\\n    require(isSenderInRole(ROLE_ACCESS_MANAGER), \\\"insufficient privileges (ROLE_ACCESS_MANAGER required)\\\");\\n\\n    // evaluate the role and reassign it\\n    userRoles[operator] = evaluateBy(msg.sender, userRoles[operator], role);\\n\\n    // fire an event\\n    emit RoleUpdated(msg.sender, operator, role, userRoles[operator]);\\n  }\\n\\n  /**\\n   * @notice Determines the permission bitmask an operator can set on the\\n   *      target permission set\\n   * @notice Used to calculate the permission bitmask to be set when requested\\n   *     in `updateRole` and `updateFeatures` functions\\n   *\\n   * @dev Calculated based on:\\n   *      1) operator's own permission set read from userRoles[operator]\\n   *      2) target permission set - what is already set on the target\\n   *      3) desired permission set - what do we want set target to\\n   *\\n   * @dev Corner cases:\\n   *      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:\\n   *        `desired` bitset is returned regardless of the `target` permission set value\\n   *        (what operator sets is what they get)\\n   *      2) Operator with no permissions (zero bitset):\\n   *        `target` bitset is returned regardless of the `desired` value\\n   *        (operator has no authority and cannot modify anything)\\n   *\\n   * @dev Example:\\n   *      Consider an operator with the permissions bitmask     00001111\\n   *      is about to modify the target permission set          01010101\\n   *      Operator wants to set that permission set to          00110011\\n   *      Based on their role, an operator has the permissions\\n   *      to update only lowest 4 bits on the target, meaning that\\n   *      high 4 bits of the target set in this example is left\\n   *      unchanged and low 4 bits get changed as desired:      01010011\\n   *\\n   * @param operator address of the contract operator which is about to set the permissions\\n   * @param target input set of permissions to operator is going to modify\\n   * @param desired desired set of permissions operator would like to set\\n   * @return resulting set of permissions given operator will set\\n   */\\n  function evaluateBy(address operator, uint256 target, uint256 desired) public view returns(uint256) {\\n    // read operator's permissions\\n    uint256 p = userRoles[operator];\\n\\n    // taking into account operator's permissions,\\n    // 1) enable the permissions desired on the `target`\\n    target |= p & desired;\\n    // 2) disable the permissions desired on the `target`\\n    target &= FULL_PRIVILEGES_MASK ^ (p & (FULL_PRIVILEGES_MASK ^ desired));\\n\\n    // return calculated result\\n    return target;\\n  }\\n\\n  /**\\n   * @notice Checks if requested set of features is enabled globally on the contract\\n   *\\n   * @param required set of features to check against\\n   * @return true if all the features requested are enabled, false otherwise\\n   */\\n  function isFeatureEnabled(uint256 required) public view returns(bool) {\\n    // delegate call to `__hasRole`, passing `features` property\\n    return __hasRole(features(), required);\\n  }\\n\\n  /**\\n   * @notice Checks if transaction sender `msg.sender` has all the permissions required\\n   *\\n   * @param required set of permissions (role) to check against\\n   * @return true if all the permissions requested are enabled, false otherwise\\n   */\\n  function isSenderInRole(uint256 required) public view returns(bool) {\\n    // delegate call to `isOperatorInRole`, passing transaction sender\\n    return isOperatorInRole(msg.sender, required);\\n  }\\n\\n  /**\\n   * @notice Checks if operator has all the permissions (role) required\\n   *\\n   * @param operator address of the user to check role for\\n   * @param required set of permissions (role) to check\\n   * @return true if all the permissions requested are enabled, false otherwise\\n   */\\n  function isOperatorInRole(address operator, uint256 required) public view returns(bool) {\\n    // delegate call to `__hasRole`, passing operator's permissions (role)\\n    return __hasRole(userRoles[operator], required);\\n  }\\n\\n  /**\\n   * @dev Checks if role `actual` contains all the permissions required `required`\\n   *\\n   * @param actual existent role\\n   * @param required required role\\n   * @return true if actual has required role (all permissions), false otherwise\\n   */\\n  function __hasRole(uint256 actual, uint256 required) internal pure returns(bool) {\\n    // check the bitmask for the role required and return the result\\n    return actual & required == required;\\n  }\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/utils/AddressUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/**\\n * @title Address Utils\\n *\\n * @dev Utility library of inline functions on addresses\\n *\\n * @author Basil Gorin\\n */\\nlibrary AddressUtils {\\n\\n  /**\\n   * @notice Checks if the target address is a contract\\n   * @dev This function will return false if invoked during the constructor of a contract,\\n   *      as the code is not actually created until after the constructor finishes.\\n   * @param addr address to check\\n   * @return whether the target address is a contract\\n   */\\n  function isContract(address addr) internal view returns (bool) {\\n    // a variable to load `extcodesize` to\\n    uint256 size = 0;\\n\\n    // XXX Currently there is no better way to check if there is a contract in an address\\n    // than to check the size of the code at that address.\\n    // See https://ethereum.stackexchange.com/a/14016/36603 for more details about how this works.\\n    // TODO: Check this again before the Serenity release, because all addresses will be contracts.\\n    // solium-disable-next-line security/no-inline-assembly\\n    assembly {\\n      // retrieve the size of the code at address `addr`\\n      size := extcodesize(addr)\\n    }\\n\\n    // positive size indicates a smart contract address\\n    return size > 0;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/utils/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\n\\n// Copied from Open Zeppelin\\n\\ncontract ERC20 is IERC20 {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @notice Token creator is responsible for creating (minting)\\n     *      tokens to an arbitrary address\\n     * @dev Role ROLE_TOKEN_CREATOR allows minting tokens\\n     *      (calling `mint` function)\\n     */\\n    uint32 public constant ROLE_TOKEN_CREATOR = 0x0001_0000;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender] - amount;\\n        _balances[recipient] = _balances[recipient] + amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply + amount;\\n        _balances[account] = _balances[account] + amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account] - amount;\\n        _totalSupply = _totalSupply - amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = msg.sender;\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"/Users/vgorin/DEVELOP/up/Cryptant/cryptant-contracts/contracts/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) - value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ilv\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_silv\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"_ilvPerBlock\",\"type\":\"uint192\"},{\"internalType\":\"uint32\",\"name\":\"_blocksPerUpdate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_initBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_endBlock\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newIlvPerBlock\",\"type\":\"uint256\"}],\"name\":\"IlvRatioUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"weight\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFlashPool\",\"type\":\"bool\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"}],\"name\":\"WeightUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FACTORY_UID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksPerUpdate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"}],\"name\":\"changePoolWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"initBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"}],\"name\":\"getPoolData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"weight\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isFlashPool\",\"type\":\"bool\"}],\"internalType\":\"struct IlluviumPoolFactory.PoolData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ilv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ilvPerBlock\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRatioUpdate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintYieldTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddr\",\"type\":\"address\"}],\"name\":\"registerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldUpdateRatio\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"silv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateILVPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"IlluviumPoolFactory","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000767fe9edc9e0df98e07454847909b5e959d7ca0e000000000000000000000000398aea1c9ceb7de800284bb399a15e0efe5a9ec20000000000000000000000000000000000000000000000000f16fd5e2e2ce20000000000000000000000000000000000000000000000000000000000000164740000000000000000000000000000000000000000000000000000000000c262bc00000000000000000000000000000000000000000000000000000000012efe14","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}