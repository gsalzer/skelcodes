{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.2;\n\n\n\n// File: ManagementList.sol\n\ncontract ManagementList {\n    string public name;\n    address public owner;\n    uint256 public managersCount;\n    mapping(uint256 => address) public managerAddressByIdx;\n    mapping(address => uint256) public managerIdxByAddress;\n\n    constructor(string memory _name, address _owner) {\n        name = _name;\n        owner = _owner;\n        managersCount = 1;\n        managerAddressByIdx[1] = owner;\n        managerIdxByAddress[owner] = 1;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"ManagementList: caller is not the owner\");\n        _;\n    }\n\n    modifier onlyManagers() {\n        require(\n            isManager(msg.sender),\n            \"ManagementList: caller is not a manager\"\n        );\n        _;\n    }\n\n    function managersList() external view returns (address[] memory) {\n        address[] memory managersAddresses = new address[](managersCount);\n        for (uint256 i = 0; i < managersCount; i++) {\n            address managerAddress = managerAddressByIdx[i + 1];\n            managersAddresses[i] = managerAddress;\n        }\n        return managersAddresses;\n    }\n\n    function isManager(address managerAddress) public view returns (bool) {\n        return managerIdxByAddress[managerAddress] > 0;\n    }\n\n    function addManager(address managerAddress) public onlyManagers {\n        require(\n            isManager(managerAddress) == false,\n            \"ManagementList: user is already a manager\"\n        );\n        managersCount += 1;\n        managerAddressByIdx[managersCount] = managerAddress;\n        managerIdxByAddress[managerAddress] = managersCount;\n    }\n\n    function removeManager(address managerAddress) public onlyManagers {\n        require(\n            isManager(managerAddress),\n            \"ManagementList: non-managers cannot be removed\"\n        );\n        require(\n            managerAddress != owner,\n            \"ManagemenetList: owner cannot be removed\"\n        );\n        uint256 managerIdx = managerIdxByAddress[managerAddress];\n        delete managerAddressByIdx[managerIdx];\n        delete managerIdxByAddress[managerAddress];\n        managersCount -= 1;\n    }\n\n    function resetManagers() public onlyOwner {\n        for (uint256 i = 0; i < managersCount; i++) {\n            address managerAddress = managerAddressByIdx[i + 2];\n            removeManager(managerAddress);\n        }\n    }\n}\n","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"managerAddress\",\"type\":\"address\"}],\"name\":\"addManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"managerAddress\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"managerAddressByIdx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"managerIdxByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"managerAddress\",\"type\":\"address\"}],\"name\":\"removeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetManagers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ManagementList","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000481140f916a4e64559694db4d56d692cadc0326c000000000000000000000000000000000000000000000000000000000000001257656220496e6672617374727563747572650000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}