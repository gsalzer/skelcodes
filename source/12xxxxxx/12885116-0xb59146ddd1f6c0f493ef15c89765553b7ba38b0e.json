{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Users/Administrator/projects/de-loto/src/contracts/Dingo_Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Dingo is ERC20, Ownable {\\r\\n    constructor() ERC20(\\\"Dingo\\\", \\\"Dingo\\\") public {\\r\\n      \\r\\n    }\\r\\n\\r\\n    function mint(address to, uint256 amount) public onlyOwner  {\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n\\r\\n    function burn(uint256 _value) public {\\r\\n        _burn(msg.sender, _value);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/C/Users/Administrator/projects/de-loto/src/contracts/Lotto.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./Dingo_Token.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\ncontract Lotto is VRFConsumerBase {\\r\\n\\t  //Network: Kovan\\r\\n\\taddress constant ETHER = address(0); // store Ether in tokens mapping with blank address \\r\\n  \\taddress constant VFRC_address = 0xf0d54349aDdcf704F77AE15b96510dEA15cb7952; // VRF Coordinator\\r\\n  \\taddress constant LINK_address = 0x514910771AF9Ca656af840dff83E8264EcF986CA; // LINK token\\r\\n\\tbytes32 constant internal keyHash = 0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445;\\r\\n\\tuint256 public constant feeAmountWei = 50000000000000;\\r\\n\\tuint256 public constant ticketAmtWei = 5000000000000000;\\r\\n\\tuint256 public constant oneDingo = 1000000000000000000;\\r\\n\\tuint256 private constant oneHr = 3600;\\r\\n\\tuint256 private constant oneWeek = 604800;\\r\\n\\tuint256 public randomResult;\\r\\n\\tuint256 private bonus;\\r\\n\\tuint256 public bonusTarget;\\r\\n\\tuint256 public bonusLaunch;\\r\\n\\tuint256 public bonusCount;\\r\\n\\tuint256 public drawNumber;\\r\\n\\tuint256 public ticketCount;\\r\\n\\tuint256 public nextDraw;\\r\\n\\tuint256 public drawClose;\\r\\n\\tuint256 public initDraw; //holds first ever draw\\r\\n\\tuint256 public fee;\\r\\n\\tuint256 private devCount;\\r\\n\\tuint256 public reserveFunds;\\r\\n\\tuint256 public rndFlag;\\r\\n\\tuint256[3] public prizePoolBreakDown;\\r\\n\\r\\n\\taddress public devAddr;\\r\\n\\tDingo public dingoToken;\\r\\n\\tbool public dingoOn;\\r\\n\\t\\r\\n\\tmapping(uint256 => uint256) public prizePool;\\r\\n \\tmapping(address => mapping(address => uint256)) public tokens;\\r\\n\\tmapping(uint256 => _Tickets) public Tickets;\\r\\n\\tmapping(uint256 => mapping(address => uint256)) public lottoEntries;\\r\\n\\tmapping(uint256 => mapping(uint256 => address)) public drawUser;\\r\\n\\tmapping(uint256 => uint256 ) public totalUsers;\\r\\n\\tmapping(uint256 => bool) public claimedTickets;\\r\\n\\r\\n\\t//Track Ticket Possibilities //Store Ticket Combinations (_xxxxxxCombo[draw][ball#][ball#][ball#] = Count)\\r\\n\\tmapping(uint => mapping(uint => mapping (uint => mapping(uint => mapping(uint => uint))))) private _fourCombo;\\r\\n\\tmapping(uint => mapping(uint => mapping (uint => mapping(uint => mapping(uint => mapping(uint => uint)))))) private _fiveCombo;\\r\\n\\tmapping(uint => mapping(uint => mapping (uint => mapping(uint => mapping(uint => mapping(uint => mapping(uint => uint))))))) private _sixCombo;\\r\\n\\r\\n\\tmapping(uint256 => _WinningNumbers) public winningNumbers;\\r\\n\\r\\n\\tstruct _WinningNumbers {\\r\\n\\t\\tuint256 draw;\\r\\n\\t\\tuint256 drawDate;\\r\\n\\t\\tuint256[6] winningNumbers;\\r\\n\\t\\tuint256 totalWinnings;\\r\\n\\t\\tuint256[3] numWinners;\\r\\n\\t\\tuint256[3] winningAmount;\\r\\n\\t\\tuint256\\ttimestamp;\\r\\n\\t}\\r\\n\\tstruct _Tickets {\\r\\n\\t\\tuint256 id;\\r\\n\\t\\tuint256 drawNum;\\r\\n\\t\\taddress user;\\r\\n    \\tuint256[6] lottoNumbers;\\r\\n    \\tuint256 timestamp;\\r\\n    }\\r\\n\\r\\n\\tevent TicketCreated(\\r\\n\\t\\taddress indexed owner,\\r\\n\\t\\tuint256 indexed ticketNum,\\r\\n\\t\\tuint256 indexed drawNum,\\r\\n\\t\\tuint256 num_1,\\r\\n\\t\\tuint256 num_2,\\r\\n\\t\\tuint256 num_3,\\r\\n\\t\\tuint256 num_4,\\r\\n\\t\\tuint256 num_5,\\r\\n\\t\\tuint256 num_6,\\r\\n\\t\\tuint256 timestamp\\r\\n\\t\\t);\\r\\n\\tevent Deposit(\\r\\n\\t\\t\\taddress token,\\r\\n\\t\\t\\taddress user,\\r\\n\\t\\t\\tuint256 amount,\\r\\n\\t\\t\\tuint256 balance);\\r\\n\\r\\n    event Withdraw(\\r\\n\\t\\taddress token,\\r\\n\\t\\taddress user,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\tuint256 balance\\r\\n\\t\\t);\\r\\n    event Draw(\\r\\n\\t\\tuint256 indexed draw,\\r\\n\\t\\tuint256 ball_1,\\r\\n\\t\\tuint256 ball_2,\\r\\n\\t\\tuint256 ball_3,\\r\\n\\t\\tuint256 ball_4,\\r\\n\\t\\tuint256 ball_5,\\r\\n\\t\\tuint256 ball_6\\r\\n\\t\\t);\\r\\n\\r\\n\\tevent ClaimedTicket(\\r\\n\\t\\t\\tuint256 indexed draw,\\r\\n\\t\\t\\taddress indexed owner,\\r\\n\\t\\t\\tuint256 indexed ticketnum,\\r\\n\\t\\t\\tuint256 amount\\r\\n\\t\\t\\t);\\r\\n\\tevent RandomResult(\\r\\n\\t\\t\\tuint256 indexed draw,\\r\\n\\t\\t\\tuint256 number,\\r\\n\\t\\t\\tstring status\\r\\n\\t\\t\\t);\\r\\n\\tevent Received(address indexed sender, uint256 amount);\\r\\n\\t//event Bonus()\\r\\n\\t\\r\\n\\tmodifier onlyDev() {\\r\\n    \\trequire(msg.sender == devAddr, 'only developer can call this function');\\r\\n    \\t_;\\r\\n  \\t}\\r\\n\\r\\n\\tconstructor (address _devAddr, uint256 _setDate, Dingo _Dingo_Token, uint256 _bonusTarget)\\r\\n\\t\\tVRFConsumerBase(VFRC_address, LINK_address) public {\\r\\n\\t\\tdevAddr = _devAddr;\\r\\n\\t\\tdevCount = 0;\\r\\n\\t\\treserveFunds = 0;\\r\\n\\t\\tdrawNumber = 1;\\r\\n\\t\\tbonusLaunch = 5;\\r\\n\\t\\tticketCount = 0;\\r\\n\\t\\tdingoToken = _Dingo_Token;\\r\\n\\t\\tnextDraw = _setDate;\\r\\n\\t\\tinitDraw = _setDate;\\r\\n\\t\\tdrawClose = nextDraw.sub(oneHr);\\r\\n\\t\\tbonusTarget = _bonusTarget;\\r\\n\\t\\tbonusCount = 0;\\r\\n\\t\\trndFlag = 0;\\r\\n\\t\\tprizePoolBreakDown[0] = 50;\\r\\n\\t\\tprizePoolBreakDown[1] = 30;\\r\\n\\t\\tprizePoolBreakDown[2] = 20;\\r\\n\\t\\tdingoOn = false;\\r\\n\\t\\tfee = 2 * 10 ** 18; // 0.1 LINK\\r\\n\\t} \\r\\n\\t//Public Functions\\r\\n\\t\\r\\n /* Allows this contract to receive payments */\\r\\n\\treceive() external payable {\\r\\n\\t\\temit Received(msg.sender, msg.value);\\r\\n\\t}\\r\\n\\r\\n\\tfunction depositEther() public payable {\\r\\n        tokens[ETHER][msg.sender] = tokens[ETHER][msg.sender].add(msg.value);\\r\\n        emit Deposit(ETHER, msg.sender, msg.value, tokens[ETHER][msg.sender]);\\r\\n    }\\r\\n\\r\\n\\tfunction withdrawEther(uint _amount) public {\\r\\n\\t\\trequire(tokens[ETHER][msg.sender] >= _amount, \\\"No Enough Eth On Account\\\");\\r\\n\\t\\ttokens[ETHER][msg.sender] = tokens[ETHER][msg.sender].sub(_amount);\\r\\n\\t\\tpayable(msg.sender).transfer(_amount);\\r\\n\\t\\temit Withdraw(ETHER, msg.sender, _amount, tokens[ETHER][msg.sender]);\\r\\n\\t}\\r\\n\\r\\n\\tfunction depositToken(address _token, uint _amount) public {\\r\\n\\t\\trequire(_token != ETHER, \\\"Cannot Deposit Eth With Using Deposit Token\\\");\\r\\n\\t\\trequire(Dingo(_token).transferFrom(msg.sender, address(this), _amount),\\\"Transfer Failed\\\");\\r\\n\\t\\ttokens[_token][msg.sender] = tokens[_token][msg.sender].add(_amount);\\r\\n\\t\\temit Deposit(_token, msg.sender, _amount, tokens[_token][msg.sender]);\\r\\n\\t}\\r\\n\\r\\n\\tfunction withdrawToken(address _token, uint256 _amount) public {\\r\\n\\t\\trequire(_token != ETHER, \\\"Cannot Withdraw Eth Using Withdraw Token\\\");\\r\\n\\t\\trequire(tokens[_token][msg.sender] >= _amount,\\\"Withdraw Amount Greater Than Balance\\\");\\r\\n\\t\\ttokens[_token][msg.sender] = tokens[_token][msg.sender].sub(_amount);\\r\\n\\t\\trequire(Dingo(_token).transfer(msg.sender, _amount), \\\"Transfer failed\\\");\\r\\n\\t\\temit Withdraw(_token, msg.sender, _amount, tokens[_token][msg.sender]);\\r\\n\\t}\\r\\n\\t//When Dingo Tokens Active Purchase Ticket With Dingo\\r\\n\\tfunction createDingoTicket(uint256[6][] memory _lottoNumbers, uint256  _drawNumber) public {\\r\\n\\t\\t//How many tickets were sent over\\r\\n\\t\\tuint256 numTickets = _lottoNumbers.length;\\r\\n\\t\\trequire (dingoOn, \\\"Dingo Token Use Not Active... Yet...\\\");\\r\\n\\t\\trequire (block.timestamp < drawClose, \\\"Draw Closed\\\");\\r\\n\\t\\trequire (_drawNumber >= drawNumber, \\\"Ticket Draw Number is Invalid\\\");\\r\\n\\t\\trequire (Dingo(dingoToken).transferFrom(msg.sender, address(this), numTickets.mul(oneDingo)),\\\"Transfer Failed\\\");\\r\\n\\t\\tDingo(dingoToken).burn(numTickets.mul(oneDingo));\\r\\n\\t\\t_storeTickets(_lottoNumbers, _drawNumber);\\r\\n\\t}\\r\\n\\t//Eth Ticket Purchase\\r\\n\\tfunction createTicket(uint256[6][] memory _lottoNumbers, uint256  _drawNumber) public payable {\\r\\n\\t\\t//How many tickets were sent over\\r\\n\\t\\tuint256 numTickets = _lottoNumbers.length;\\r\\n\\t\\t//Calculate total cost of tickets bought\\r\\n\\t\\tuint256 _totalCost = ticketAmtWei.mul(numTickets);\\r\\n\\r\\n\\t\\trequire (block.timestamp < drawClose, \\\"Draw Closed\\\");\\r\\n\\t\\trequire (_drawNumber >= drawNumber, \\\"Ticket Draw Number is Invalid\\\");\\r\\n\\t\\trequire (tokens[ETHER][msg.sender] + msg.value >= _totalCost,\\\"Not enough Eth to buy ticket\\\");\\r\\n\\r\\n\\t\\t//Calculate fees\\r\\n\\t\\tuint256 _totalFees = feeAmountWei.mul(numTickets);\\r\\n\\t\\t\\r\\n\\t\\t//Update Total Prize Pool For Draw\\r\\n\\t\\tprizePool[_drawNumber] = prizePool[_drawNumber].add(_totalCost).sub(_totalFees);\\r\\n\\r\\n\\t\\t//Fee to Dev Account\\r\\n\\t\\ttokens[ETHER][devAddr] = tokens[ETHER][devAddr].add(_totalFees);\\r\\n\\t\\t//Update sender account\\r\\n\\t\\ttokens[ETHER][msg.sender] = tokens[ETHER][msg.sender].add(msg.value).sub(_totalCost);\\r\\n\\r\\n\\t\\tbonus = 1;\\r\\n\\t\\tif (bonusCount<=bonusTarget) {\\r\\n\\t\\t\\tbonus = 2;\\r\\n\\t\\t}\\r\\n\\t\\tbonusCount = bonusCount.add(numTickets);\\r\\n\\r\\n\\t\\tdingoToken.mint(msg.sender, oneDingo.mul(numTickets).mul(bonus).mul(bonusLaunch));\\r\\n\\t\\tdevCount = devCount.add(numTickets.mul(bonus).mul(bonusLaunch));\\r\\n\\t\\tif (devCount>=10){\\r\\n\\t\\t\\tuint256 allocation = devCount.div(10);\\r\\n\\t\\t\\tdingoToken.mint(devAddr, oneDingo.mul(allocation));\\r\\n\\t\\t\\tdevCount = devCount.sub(allocation.mul(10));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t_storeTickets(_lottoNumbers, _drawNumber);\\r\\n\\t}\\r\\n\\t//Get Chank Link Random Number\\r\\n\\tfunction requestRandom() public {\\r\\n\\t\\trequire(LINK.balanceOf(address(this)) > fee, \\\"Error, not enough LINK - fill contract with faucet\\\");\\r\\n\\t\\trequire(rndFlag == 0, \\\"Random Number Already Requested\\\");\\r\\n\\t\\trequire(block.timestamp > nextDraw); //Ensure it's time to draw lottery\\r\\n\\t\\trndFlag = 1;\\r\\n\\t\\tdingoToken.mint(msg.sender, oneDingo.mul(100));\\r\\n\\t\\tbytes32 requestId = requestRandomness(keyHash, fee);\\r\\n\\t}\\r\\n\\t//Get Multiple Random Numbers\\r\\n\\tfunction expand(uint256 randomValue, uint256 n) public pure returns (uint256[] memory expandedValues) {\\r\\n\\t\\texpandedValues = new uint256[](n);\\r\\n\\t\\tfor (uint256 i = 0; i < n; i++) {\\r\\n\\t\\t\\texpandedValues[i] = uint256(keccak256(abi.encode(randomValue, i)));\\r\\n\\t\\t}\\r\\n\\t\\treturn expandedValues;\\r\\n\\t}\\r\\n\\t//Calculate Winners\\r\\n\\tfunction drawLottery() public {\\r\\n\\t\\t\\trequire(rndFlag==2,\\\"Waiting on random request\\\");\\r\\n\\t\\t\\tuint256[6] memory _balls;\\r\\n\\t\\t\\tuint256[] memory _rndSelection;\\r\\n\\t\\t\\t_rndSelection = expand(randomResult, 12);\\r\\n\\t\\t\\tuint _rndi = 0;\\r\\n\\t\\t\\tbool _unique;\\r\\n\\t\\t\\tfor (uint i = 0; i < 6; i++){\\r\\n\\t\\t\\t\\tdo {\\r\\n\\t\\t\\t\\t\\t_unique = true;\\r\\n\\t\\t\\t\\t\\t_balls[i] = (_rndSelection[_rndi] % 49) + 1;\\r\\n\\t\\t\\t\\t\\tif (i > 0){\\r\\n\\t\\t\\t\\t\\t\\tfor (uint ii = 0; ii < i; ii++){\\r\\n\\t\\t\\t\\t\\t\\t\\tif (_balls[i] == _balls[ii]) {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t_unique = false;\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t_rndi++;\\r\\n\\t\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t} while (!_unique);\\r\\n\\t\\t\\t\\t_rndi++;\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\t//Sort winning numbers into lowest to highest\\r\\n\\t\\t\\t_balls = ticketSort(_balls);\\r\\n\\t\\t\\t//Generate Combinations for Winning numbers\\r\\n\\t\\t\\tcheckWinningCombo(_balls, drawNumber);\\r\\n\\r\\n\\t\\t\\tfor (uint i = 0; i < 3; i++)\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tif (winningNumbers[drawNumber].numWinners[i] > 0){\\r\\n\\t\\t\\t\\t\\twinningNumbers[drawNumber].totalWinnings += (prizePool[drawNumber] * prizePoolBreakDown[i]) / 100;\\r\\n\\t\\t\\t\\t\\twinningNumbers[drawNumber].winningAmount[i] = (prizePool[drawNumber] * prizePoolBreakDown[i]) / winningNumbers[drawNumber].numWinners[i] / 100;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\twinningNumbers[drawNumber].drawDate = nextDraw;\\r\\n\\t\\t\\twinningNumbers[drawNumber].winningNumbers = _balls;\\r\\n\\t\\t\\twinningNumbers[drawNumber].draw = drawNumber;\\r\\n\\t\\t\\twinningNumbers[drawNumber].timestamp = block.timestamp;\\r\\n\\t\\t\\t\\r\\n\\t\\t\\t//Update prizepools and reserve the 'won' funds for claiming\\r\\n\\t\\t\\treserveFunds += winningNumbers[drawNumber].totalWinnings;\\r\\n\\t\\t\\tprizePool[drawNumber + 1] += prizePool[drawNumber] - winningNumbers[drawNumber].totalWinnings;\\r\\n\\t\\t\\tdingoToken.mint(msg.sender, oneDingo.mul(300));\\r\\n\\t\\t\\tbonusCount = 0;\\r\\n\\t\\t\\tbonusLaunch = 1;\\r\\n\\t\\t\\temit Draw(\\r\\n\\t\\t\\t\\tdrawNumber,\\r\\n\\t\\t\\t\\t_balls[0],\\r\\n\\t\\t\\t\\t_balls[1],\\r\\n\\t\\t\\t\\t_balls[2],\\r\\n\\t\\t\\t\\t_balls[3],\\r\\n\\t\\t\\t\\t_balls[4],\\r\\n\\t\\t\\t\\t_balls[5]);\\r\\n\\t\\t\\trndFlag=0;\\r\\n\\t\\t\\tdrawNumber++;\\r\\n\\t\\t\\tnextDraw += oneWeek;\\r\\n\\t\\t\\tdrawClose = nextDraw - oneHr;\\r\\n\\t}\\r\\n\\r\\n\\tfunction claimTickets(uint256[] memory ticketNumbers) public {\\r\\n\\t\\tuint tNLength = ticketNumbers.length;\\r\\n\\t\\tuint winCount;\\r\\n\\t\\tuint256[6] memory numbers;\\r\\n\\t\\tuint256[6] memory winning;\\r\\n\\t\\taddress _owner;\\r\\n\\t\\tuint256 _winAmt;\\r\\n\\t\\tuint _draw;\\r\\n\\t\\tfor (uint i = 0; i < tNLength; i++) {\\r\\n\\t\\t\\tnumbers = Tickets[ticketNumbers[i]].lottoNumbers;\\r\\n\\t\\t\\t_draw = Tickets[ticketNumbers[i]].drawNum;\\r\\n\\t\\t\\trequire(!claimedTickets[i],\\\"Ticket already claimed\\\");\\r\\n\\t\\t\\tif (_draw < drawNumber ) {\\r\\n\\t\\t\\t\\t_owner = Tickets[ticketNumbers[i]].user;\\r\\n\\t\\t\\t\\twinCount = 0;\\r\\n\\t\\t\\t\\twinning = winningNumbers[_draw].winningNumbers;\\r\\n\\t\\t\\t\\tfor (uint wLoop = 0; wLoop < 6; wLoop++) {\\r\\n\\t\\t\\t\\t\\tfor (uint nLoop = 0; nLoop < 6; nLoop++) {\\r\\n\\t\\t\\t\\t\\t\\tif (numbers[nLoop] > winning[wLoop]) {\\r\\n\\t\\t\\t\\t\\t\\t\\tnLoop = 6;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t\\telse if (numbers[nLoop] == winning[wLoop]) {\\r\\n\\t\\t\\t\\t\\t\\t\\twinCount++;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t_winAmt = 0;\\r\\n\\t\\t\\t\\tif (winCount == 4) {\\r\\n\\t\\t\\t\\t\\t_winAmt = winningNumbers[_draw].winningAmount[2];\\r\\n\\t\\t\\t\\t} else if (winCount == 5) {\\r\\n\\t\\t\\t\\t\\t_winAmt = winningNumbers[_draw].winningAmount[1];\\r\\n\\t\\t\\t\\t} else if (winCount == 6) {\\r\\n\\t\\t\\t\\t\\t_winAmt = winningNumbers[_draw].winningAmount[0];\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\treserveFunds = reserveFunds.sub(_winAmt);\\r\\n\\t\\t\\t\\ttokens[ETHER][_owner] = tokens[ETHER][_owner].add(_winAmt);\\r\\n\\t\\t\\t\\tclaimedTickets[ticketNumbers[i]] = true;\\r\\n\\t\\t\\t\\tif (winCount > 3) {\\r\\n\\t\\t\\t\\t\\temit ClaimedTicket(\\r\\n\\t\\t\\t\\t\\t\\t_draw, \\r\\n\\t\\t\\t\\t\\t\\t_owner, \\r\\n\\t\\t\\t\\t\\t\\tticketNumbers[i], \\r\\n\\t\\t\\t\\t\\t\\t_winAmt);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfunction getDrawData(uint256 _drawNum) public view returns (_WinningNumbers memory) {\\r\\n\\t\\treturn winningNumbers[_drawNum];\\r\\n\\t}\\r\\n\\tfunction balanceOf(address _token, address _user) public view returns (uint256) {\\r\\n        return tokens[_token][_user];\\r\\n    }\\r\\n\\tfunction getTicketNumbers(uint256 tickNum) public view returns(uint256, uint256, uint256, uint256, uint256, uint256) {\\r\\n\\t\\treturn (Tickets[tickNum].lottoNumbers[0],\\r\\n\\t\\t\\t\\tTickets[tickNum].lottoNumbers[1],\\r\\n\\t\\t\\t\\tTickets[tickNum].lottoNumbers[2],\\r\\n\\t\\t\\t\\tTickets[tickNum].lottoNumbers[3],\\r\\n\\t\\t\\t\\tTickets[tickNum].lottoNumbers[4],\\r\\n\\t\\t\\t\\tTickets[tickNum].lottoNumbers[5]);\\r\\n\\t}\\r\\n\\tfunction goDingo() public onlyDev {\\r\\n\\t\\t//Turn On Ability to purchase with Dingo Tokens\\r\\n\\t\\tdingoOn = true;\\r\\n\\t}\\r\\n\\tfunction updateFee(uint256 _fee) public onlyDev {\\r\\n\\t\\t//Update Link Fee\\r\\n\\t\\tfee = _fee;\\r\\n\\t}\\r\\n\\tfunction updateDevAddr(address _devAddr) public onlyDev {\\r\\n\\t\\t//Update Link Fee\\r\\n\\t\\tdevAddr = _devAddr;\\r\\n\\t}\\r\\n\\tfunction updateBonusTarget(uint _bonusTarget) public onlyDev {\\r\\n\\t\\t//Update Link Fee\\r\\n\\t\\tbonusTarget = _bonusTarget;\\r\\n\\t}\\r\\n\\tfunction fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\r\\n\\t\\trandomResult = randomness;\\r\\n\\t\\trndFlag = 2;\\r\\n\\t\\temit RandomResult(\\r\\n\\t\\t\\tdrawNumber,\\r\\n\\t\\t\\trandomResult, \\r\\n\\t\\t\\t\\\"Draw: Received Number\\\"\\r\\n\\t\\t\\t);\\r\\n\\t\\t//send final random value to the verdict();\\r\\n\\t\\t//verdict(randomResult);\\r\\n\\t}\\r\\n\\t//Private Functions\\r\\n\\tfunction _storeTickets(uint256[6][] memory _lN, uint256  _dN) private {\\r\\n\\t\\tuint lNLength = _lN.length;\\r\\n\\t\\tfor (uint tick = 0; tick < lNLength; tick++) {\\r\\n\\t\\t\\tticketCount++;\\r\\n\\t\\t\\t_lN[tick] = ticketSort(_lN[tick]);\\r\\n\\t\\t\\tTickets[ticketCount] = _Tickets(ticketCount, _dN, msg.sender, _lN[tick], block.timestamp);\\r\\n\\t\\t\\t_getFourCombo(_lN[tick], _dN);\\r\\n\\t\\t\\t_getFiveCombo(_lN[tick], _dN);\\r\\n\\t\\t\\t_getSixCombo(_lN[tick], _dN);\\r\\n\\t\\t\\tclaimedTickets[ticketCount] = false;\\r\\n\\t\\t\\temit TicketCreated(\\r\\n\\t\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\t\\tticketCount,\\r\\n\\t\\t\\t\\t_dN,\\r\\n\\t\\t\\t\\t_lN[tick][0],\\r\\n\\t\\t\\t\\t_lN[tick][1],\\r\\n\\t\\t\\t\\t_lN[tick][2],\\r\\n\\t\\t\\t\\t_lN[tick][3],\\r\\n\\t\\t\\t\\t_lN[tick][4],\\r\\n\\t\\t\\t\\t_lN[tick][5],\\r\\n\\t\\t\\t\\tblock.timestamp\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfunction ticketSort(uint256[6] memory _ticketToSort) private pure returns (uint256[6] memory) {\\r\\n\\t\\tuint256 _tempBall;\\r\\n\\t\\tfor (uint i = 0; i < 5; i++)\\r\\n\\t\\t{\\r\\n\\t\\t\\tfor(uint ii = i+1; ii < 6; ii++)\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tif(_ticketToSort[i] > _ticketToSort[ii])\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t_tempBall = _ticketToSort[i];\\r\\n\\t\\t\\t\\t\\t_ticketToSort[i] = _ticketToSort[ii];\\r\\n\\t\\t\\t\\t\\t_ticketToSort[ii] = _tempBall;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn _ticketToSort;\\r\\n\\t}\\r\\n\\tfunction _getFourCombo(uint256[6] memory _cT, uint256 _drawNum) private {\\r\\n\\t\\t//threeCombo arrary of 6 tickets numbers _cT = check Ticket\\r\\n\\t\\tfor (uint _chkOne = 0; _chkOne < 3; _chkOne++)\\r\\n\\t\\t{\\r\\n\\t\\t\\tfor (uint _chkTwo = _chkOne + 1; _chkTwo < 4; _chkTwo++)\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tfor (uint _chkThree = _chkTwo + 1; _chkThree < 5; _chkThree++)\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tfor (uint _chkFour = _chkThree + 1; _chkFour < 6; _chkFour++)\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\t// Each iteration of this loop visits a single outcome\\r\\n\\t\\t\\t\\t\\t\\t_fourCombo[_drawNum][_cT[_chkOne]][_cT[_chkTwo]][_cT[_chkThree]][_cT[_chkFour]]++;\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfunction _getFiveCombo(uint256[6] memory _cT, uint256 _drawNum) private {\\r\\n\\t\\t//threeCombo arrary of 6 tickets numbers _cT = check Ticket\\r\\n\\t\\tfor (uint _chkOne = 0; _chkOne < 2; _chkOne++)\\r\\n\\t\\t{\\r\\n\\t\\t\\tfor (uint _chkTwo = _chkOne + 1; _chkTwo < 3; _chkTwo++)\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tfor (uint _chkThree = _chkTwo + 1; _chkThree < 4; _chkThree++)\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tfor (uint _chkFour = _chkThree + 1; _chkFour < 5; _chkFour++)\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\tfor (uint _chkFive = _chkFour + 1; _chkFive < 6; _chkFive++)\\r\\n\\t\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\t\\t// Each iteration of this loop visits a single outcome\\r\\n\\t\\t\\t\\t\\t\\t\\t_fiveCombo[_drawNum][_cT[_chkOne]][_cT[_chkTwo]][_cT[_chkThree]][_cT[_chkFour]][_cT[_chkFive]]++;\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tfunction _getSixCombo(uint256[6] memory _cT, uint256 _drawNum) private {\\r\\n\\t\\t\\t// Each iteration of this loop visits a single outcome\\r\\n\\t\\t\\tif (_sixCombo[_drawNum][_cT[0]][_cT[1]][_cT[2]][_cT[3]][_cT[4]][_cT[5]] == 0){\\r\\n\\t\\t\\t\\t_sixCombo[_drawNum][_cT[0]][_cT[1]][_cT[2]][_cT[3]][_cT[4]][_cT[5]] = 1;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t_sixCombo[_drawNum][_cT[0]][_cT[1]][_cT[2]][_cT[3]][_cT[4]][_cT[5]]++;}\\r\\n\\t}\\r\\n\\tfunction checkWinningCombo(uint256[6] memory _cT, uint256 _drawNum) private {\\r\\n\\t\\tuint256 _comboCount;\\r\\n\\t\\twinningNumbers[_drawNum].numWinners[0] = _sixCombo[_drawNum][_cT[0]][_cT[1]][_cT[2]][_cT[3]][_cT[4]][_cT[5]];\\r\\n\\r\\n\\t\\t_comboCount = 0;\\r\\n\\t\\tfor (uint _chkOne = 0; _chkOne < 2; _chkOne++)\\r\\n\\t\\t{\\r\\n\\t\\t\\tfor (uint _chkTwo = _chkOne + 1; _chkTwo < 3; _chkTwo++)\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tfor (uint _chkThree = _chkTwo + 1; _chkThree < 4; _chkThree++)\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tfor (uint _chkFour = _chkThree + 1; _chkFour < 5; _chkFour++)\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\tfor (uint _chkFive = _chkFour + 1; _chkFive < 6; _chkFive++)\\r\\n\\t\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\t\\t// Each iteration of this loop visits a single outcome\\r\\n\\t\\t\\t\\t\\t\\t\\t_comboCount = _comboCount + _fiveCombo[_drawNum][_cT[_chkOne]][_cT[_chkTwo]][_cT[_chkThree]][_cT[_chkFour]][_cT[_chkFive]];\\r\\n\\t\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twinningNumbers[_drawNum].numWinners[1] = _comboCount.sub(winningNumbers[_drawNum].numWinners[0].mul(6));\\r\\n\\r\\n\\t\\t_comboCount = 0;\\r\\n\\t\\tfor (uint _chkOne = 0; _chkOne < 3; _chkOne++)\\r\\n\\t\\t{\\r\\n\\t\\t\\tfor (uint _chkTwo = _chkOne + 1; _chkTwo < 4; _chkTwo++)\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\tfor (uint _chkThree = _chkTwo + 1; _chkThree < 5; _chkThree++)\\r\\n\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\tfor (uint _chkFour = _chkThree + 1; _chkFour < 6; _chkFour++)\\r\\n\\t\\t\\t\\t\\t{\\r\\n\\t\\t\\t\\t\\t\\t// Each iteration of this loop visits a single outcome\\r\\n\\t\\t\\t\\t\\t\\t_comboCount += _fourCombo[_drawNum][_cT[_chkOne]][_cT[_chkTwo]][_cT[_chkThree]][_cT[_chkFour]];\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\twinningNumbers[_drawNum].numWinners[2] = _comboCount.sub(winningNumbers[_drawNum].numWinners[1].mul(5)).sub(winningNumbers[_drawNum].numWinners[0].mul(15));\\r\\n\\t}\\r\\n}\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/VRFConsumerBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"./vendor/SafeMathChainlink.sol\\\";\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  using SafeMathChainlink for uint256;\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness)\\n    internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee)\\n    internal returns (bytes32 requestId)\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash].add(1);\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) public {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/VRFRequestIDBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,\\n    address _requester, uint256 _nonce)\\n    internal pure returns (uint256)\\n  {\\n    return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n  function approve(address spender, uint256 value) external returns (bool success);\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n  function decimals() external view returns (uint8 decimalPlaces);\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n  function name() external view returns (string memory tokenName);\\n  function symbol() external view returns (string memory tokenSymbol);\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n  function transfer(address to, uint256 value) external returns (bool success);\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathChainlink {\\n  /**\\n    * @dev Returns the addition of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `+` operator.\\n    *\\n    * Requirements:\\n    * - Addition cannot overflow.\\n    */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the subtraction of two unsigned integers, reverting on\\n    * overflow (when the result is negative).\\n    *\\n    * Counterpart to Solidity's `-` operator.\\n    *\\n    * Requirements:\\n    * - Subtraction cannot overflow.\\n    */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the multiplication of two unsigned integers, reverting on\\n    * overflow.\\n    *\\n    * Counterpart to Solidity's `*` operator.\\n    *\\n    * Requirements:\\n    * - Multiplication cannot overflow.\\n    */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the integer division of two unsigned integers. Reverts on\\n    * division by zero. The result is rounded towards zero.\\n    *\\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n    * uses an invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  /**\\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n    * Reverts when dividing by zero.\\n    *\\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\\n    * invalid opcode to revert (consuming all remaining gas).\\n    *\\n    * Requirements:\\n    * - The divisor cannot be zero.\\n    */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"SafeMath: modulo by zero\\\");\\n    return a % b;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_setDate\",\"type\":\"uint256\"},{\"internalType\":\"contract Dingo\",\"name\":\"_Dingo_Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bonusTarget\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"draw\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ticketnum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"draw\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ball_1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ball_2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ball_3\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ball_4\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ball_5\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ball_6\",\"type\":\"uint256\"}],\"name\":\"Draw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"draw\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"name\":\"RandomResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ticketNum\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"drawNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num_1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num_2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num_3\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num_4\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num_5\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"num_6\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TicketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Tickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drawNum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusLaunch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ticketNumbers\",\"type\":\"uint256[]\"}],\"name\":\"claimTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimedTickets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[6][]\",\"name\":\"_lottoNumbers\",\"type\":\"uint256[6][]\"},{\"internalType\":\"uint256\",\"name\":\"_drawNumber\",\"type\":\"uint256\"}],\"name\":\"createDingoTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[6][]\",\"name\":\"_lottoNumbers\",\"type\":\"uint256[6][]\"},{\"internalType\":\"uint256\",\"name\":\"_drawNumber\",\"type\":\"uint256\"}],\"name\":\"createTicket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dingoOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dingoToken\",\"outputs\":[{\"internalType\":\"contract Dingo\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawClose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"drawUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"randomValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"expand\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"expandedValues\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAmountWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_drawNum\",\"type\":\"uint256\"}],\"name\":\"getDrawData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"draw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drawDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256[6]\",\"name\":\"winningNumbers\",\"type\":\"uint256[6]\"},{\"internalType\":\"uint256\",\"name\":\"totalWinnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"numWinners\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"winningAmount\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct Lotto._WinningNumbers\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tickNum\",\"type\":\"uint256\"}],\"name\":\"getTicketNumbers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"goDingo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initDraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lottoEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextDraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneDingo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prizePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prizePoolBreakDown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rndFlag\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketAmtWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bonusTarget\",\"type\":\"uint256\"}],\"name\":\"updateBonusTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winningNumbers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"draw\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"drawDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWinnings\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Lotto","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000aac085cac47eea90f6edc7a836fe7a3ed835cdf500000000000000000000000000000000000000000000000000000000610b2a00000000000000000000000000438ff79414cc58922bf6c0e4bb8c574eb055ef590000000000000000000000000000000000000000000000000000000000000014","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}