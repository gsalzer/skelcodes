{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\n\n\n// Part: HomoraCaster\n\ncontract HomoraCaster {\n  /// @dev Call to the target using the given data.\n  /// @param target The address target to call.\n  /// @param data The data used in the call.\n  function cast(address target, bytes calldata data) external payable {\n    (bool ok, bytes memory returndata) = target.call{value: msg.value}(data);\n    if (!ok) {\n      if (returndata.length > 0) {\n        // The easiest way to bubble the revert reason is using memory via assembly\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n          let returndata_size := mload(returndata)\n          revert(add(32, returndata), returndata_size)\n        }\n      } else {\n        revert('bad cast call');\n      }\n    }\n  }\n}\n\n// Part: IBank\n\ninterface IBank {\n  /// The governor adds a new bank gets added to the system.\n  event AddBank(address token, address cToken);\n  /// The governor sets the address of the oracle smart contract.\n  event SetOracle(address oracle);\n  /// The governor sets the basis point fee of the bank.\n  event SetFeeBps(uint feeBps);\n  /// The governor withdraw tokens from the reserve of a bank.\n  event WithdrawReserve(address user, address token, uint amount);\n  /// Someone borrows tokens from a bank via a spell caller.\n  event Borrow(uint positionId, address caller, address token, uint amount, uint share);\n  /// Someone repays tokens to a bank via a spell caller.\n  event Repay(uint positionId, address caller, address token, uint amount, uint share);\n  /// Someone puts tokens as collateral via a spell caller.\n  event PutCollateral(uint positionId, address caller, address token, uint id, uint amount);\n  /// Someone takes tokens from collateral via a spell caller.\n  event TakeCollateral(uint positionId, address caller, address token, uint id, uint amount);\n  /// Someone calls liquidatation on a position, paying debt and taking collateral tokens.\n  event Liquidate(\n    uint positionId,\n    address liquidator,\n    address debtToken,\n    uint amount,\n    uint share,\n    uint bounty\n  );\n\n  /// @dev Return the current position while under execution.\n  function POSITION_ID() external view returns (uint);\n\n  /// @dev Return the current target while under execution.\n  function SPELL() external view returns (address);\n\n  /// @dev Return the current executor (the owner of the current position).\n  function EXECUTOR() external view returns (address);\n\n  /// @dev Return bank information for the given token.\n  function getBankInfo(address token)\n    external\n    view\n    returns (\n      bool isListed,\n      address cToken,\n      uint reserve,\n      uint totalDebt,\n      uint totalShare\n    );\n\n  /// @dev Return position information for the given position id.\n  function getPositionInfo(uint positionId)\n    external\n    view\n    returns (\n      address owner,\n      address collToken,\n      uint collId,\n      uint collateralSize\n    );\n\n  /// @dev Return the borrow balance for given positon and token without trigger interest accrual.\n  function borrowBalanceStored(uint positionId, address token) external view returns (uint);\n\n  /// @dev Trigger interest accrual and return the current borrow balance.\n  function borrowBalanceCurrent(uint positionId, address token) external returns (uint);\n\n  /// @dev Borrow tokens from the bank.\n  function borrow(address token, uint amount) external;\n\n  /// @dev Repays tokens to the bank.\n  function repay(address token, uint amountCall) external;\n\n  /// @dev Transmit user assets to the spell.\n  function transmit(address token, uint amount) external;\n\n  /// @dev Put more collateral for users.\n  function putCollateral(\n    address collToken,\n    uint collId,\n    uint amountCall\n  ) external;\n\n  /// @dev Take some collateral back.\n  function takeCollateral(\n    address collToken,\n    uint collId,\n    uint amount\n  ) external;\n\n  /// @dev Liquidate a position.\n  function liquidate(\n    uint positionId,\n    address debtToken,\n    uint amountCall\n  ) external;\n\n  function getBorrowETHValue(uint positionId) external view returns (uint);\n\n  function accrue(address token) external;\n\n  function nextPositionId() external view returns (uint);\n\n  /// @dev Return current position information.\n  function getCurrentPositionInfo()\n    external\n    view\n    returns (\n      address owner,\n      address collToken,\n      uint collId,\n      uint collateralSize\n    );\n\n  function support(address token) external view returns (bool);\n\n}\n\n// Part: ICErc20\n\ninterface ICErc20 {\n  function decimals() external returns (uint8);\n\n  function underlying() external returns (address);\n\n  function mint(uint mintAmount) external returns (uint);\n\n  function redeem(uint redeemTokens) external returns (uint);\n\n  function balanceOf(address user) external view returns (uint);\n\n  function borrowBalanceCurrent(address account) external returns (uint);\n\n  function borrowBalanceStored(address account) external view returns (uint);\n\n  function borrow(uint borrowAmount) external returns (uint);\n\n  function repayBorrow(uint repayAmount) external returns (uint);\n}\n\n// Part: IOracle\n\ninterface IOracle {\n  /// @dev Return whether the oracle supports evaluating collateral value of the given address.\n  /// @param token The ERC-1155 token to check the acceptence.\n  /// @param id The token id to check the acceptance.\n  function supportWrappedToken(address token, uint id) external view returns (bool);\n\n  /// @dev Return the amount of token out as liquidation reward for liquidating token in.\n  /// @param tokenIn The ERC-20 token that gets liquidated.\n  /// @param tokenOut The ERC-1155 token to pay as reward.\n  /// @param tokenOutId The id of the token to pay as reward.\n  /// @param amountIn The amount of liquidating tokens.\n  function convertForLiquidation(\n    address tokenIn,\n    address tokenOut,\n    uint tokenOutId,\n    uint amountIn\n  ) external view returns (uint);\n\n  /// @dev Return the value of the given input as ETH for collateral purpose.\n  /// @param token The ERC-1155 token to check the value.\n  /// @param id The id of the token to check the value.\n  /// @param amount The amount of tokens to check the value.\n  /// @param owner The owner of the token to check for collateral credit.\n  function asETHCollateral(\n    address token,\n    uint id,\n    uint amount,\n    address owner\n  ) external view returns (uint);\n\n  /// @dev Return the value of the given input as ETH for borrow purpose.\n  /// @param token The ERC-20 token to check the value.\n  /// @param amount The amount of tokens to check the value.\n  /// @param owner The owner of the token to check for borrow credit.\n  function asETHBorrow(\n    address token,\n    uint amount,\n    address owner\n  ) external view returns (uint);\n\n  /// @dev Return whether the ERC-20 token is supported\n  /// @param token The ERC-20 token to check for support\n  function support(address token) external view returns (bool);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/Address\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/IERC165\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/IERC20\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/Math\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/SafeMath\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n// Part: HomoraSafeMath\n\nlibrary HomoraSafeMath {\n  using SafeMath for uint;\n\n  /// @dev Computes round-up division.\n  function ceilDiv(uint a, uint b) internal pure returns (uint) {\n    return a.add(b).sub(1).div(b);\n  }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/ERC165\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () internal {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/IERC1155\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/IERC1155Receiver\n\n/**\n * _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external\n        returns(bytes4);\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/Initializable\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /// @dev Returns true if and only if the function is running in the constructor\n    function _isConstructor() private view returns (bool) {\n        return !Address.isContract(address(this));\n    }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/SafeERC20\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// Part: Governable\n\ncontract Governable is Initializable {\n  event SetGovernor(address governor);\n  event SetPendingGovernor(address pendingGovernor);\n  event AcceptGovernor(address governor);\n\n  address public governor; // The current governor.\n  address public pendingGovernor; // The address pending to become the governor once accepted.\n\n  bytes32[64] _gap; // reserve space for upgrade\n\n  modifier onlyGov() {\n    require(msg.sender == governor, 'not the governor');\n    _;\n  }\n\n  /// @dev Initialize using msg.sender as the first governor.\n  function __Governable__init() internal initializer {\n    governor = msg.sender;\n    pendingGovernor = address(0);\n    emit SetGovernor(msg.sender);\n  }\n\n  /// @dev Set the pending governor, which will be the governor once accepted.\n  /// @param _pendingGovernor The address to become the pending governor.\n  function setPendingGovernor(address _pendingGovernor) external onlyGov {\n    pendingGovernor = _pendingGovernor;\n    emit SetPendingGovernor(_pendingGovernor);\n  }\n\n  /// @dev Accept to become the new governor. Must be called by the pending governor.\n  function acceptGovernor() external {\n    require(msg.sender == pendingGovernor, 'not the pending governor');\n    pendingGovernor = address(0);\n    governor = msg.sender;\n    emit AcceptGovernor(msg.sender);\n  }\n}\n\n// Part: OpenZeppelin/openzeppelin-contracts@3.4.0/ERC1155Receiver\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n    constructor() internal {\n        _registerInterface(\n            ERC1155Receiver(address(0)).onERC1155Received.selector ^\n            ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\n        );\n    }\n}\n\n// Part: ERC1155NaiveReceiver\n\ncontract ERC1155NaiveReceiver is ERC1155Receiver {\n  bytes32[64] __gap; // reserve space for upgrade\n\n  function onERC1155Received(\n    address, /* operator */\n    address, /* from */\n    uint, /* id */\n    uint, /* value */\n    bytes calldata /* data */\n  ) external override returns (bytes4) {\n    return this.onERC1155Received.selector;\n  }\n\n  function onERC1155BatchReceived(\n    address, /* operator */\n    address, /* from */\n    uint[] calldata, /* ids */\n    uint[] calldata, /* values */\n    bytes calldata /* data */\n  ) external override returns (bytes4) {\n    return this.onERC1155BatchReceived.selector;\n  }\n}\n\n// File: HomoraBank.sol\n\ncontract HomoraBank is Governable, ERC1155NaiveReceiver, IBank {\n  using SafeMath for uint;\n  using HomoraSafeMath for uint;\n  using SafeERC20 for IERC20;\n\n  uint private constant _NOT_ENTERED = 1;\n  uint private constant _ENTERED = 2;\n  uint private constant _NO_ID = uint(-1);\n  address private constant _NO_ADDRESS = address(1);\n\n  struct Bank {\n    bool isListed; // Whether this market exists.\n    uint8 index; // Reverse look up index for this bank.\n    address cToken; // The CToken to draw liquidity from.\n    uint reserve; // The reserve portion allocated to Homora protocol.\n    uint totalDebt; // The last recorded total debt since last action.\n    uint totalShare; // The total debt share count across all open positions.\n  }\n\n  struct Position {\n    address owner; // The owner of this position.\n    address collToken; // The ERC1155 token used as collateral for this position.\n    uint collId; // The token id used as collateral.\n    uint collateralSize; // The size of collateral token for this position.\n    uint debtMap; // Bitmap of nonzero debt. i^th bit is set iff debt share of i^th bank is nonzero.\n    mapping(address => uint) debtShareOf; // The debt share for each token.\n  }\n\n  uint public _GENERAL_LOCK; // TEMPORARY: re-entrancy lock guard.\n  uint public _IN_EXEC_LOCK; // TEMPORARY: exec lock guard.\n  uint public override POSITION_ID; // TEMPORARY: position ID currently under execution.\n  address public override SPELL; // TEMPORARY: spell currently under execution.\n\n  address public caster; // The caster address for untrusted execution.\n  IOracle public oracle; // The oracle address for determining prices.\n  uint public feeBps; // The fee collected as protocol reserve in basis points from interest.\n  uint public override nextPositionId; // Next available position ID, starting from 1 (see initialize).\n\n  address[] public allBanks; // The list of all listed banks.\n  mapping(address => Bank) public banks; // Mapping from token to bank data.\n  mapping(address => bool) public cTokenInBank; // Mapping from cToken to its existence in bank.\n  mapping(uint => Position) public positions; // Mapping from position ID to position data.\n\n  bool public allowContractCalls; // The boolean status whether to allow call from contract (false = onlyEOA)\n  mapping(address => bool) public whitelistedTokens; // Mapping from token to whitelist status\n  mapping(address => bool) public whitelistedSpells; // Mapping from spell to whitelist status\n  mapping(address => bool) public whitelistedUsers; // Mapping from user to whitelist status\n\n  uint public bankStatus; // Each bit stores certain bank status, e.g. borrow allowed, repay allowed\n\n  /// @dev Ensure that the function is called from EOA when allowContractCalls is set to false and caller is not whitelisted\n  modifier onlyEOAEx() {\n    if (!allowContractCalls && !whitelistedUsers[msg.sender]) {\n      require(msg.sender == tx.origin, 'not eoa');\n    }\n    _;\n  }\n\n  /// @dev Reentrancy lock guard.\n  modifier lock() {\n    require(_GENERAL_LOCK == _NOT_ENTERED, 'general lock');\n    _GENERAL_LOCK = _ENTERED;\n    _;\n    _GENERAL_LOCK = _NOT_ENTERED;\n  }\n\n  /// @dev Ensure that the function is called from within the execution scope.\n  modifier inExec() {\n    require(POSITION_ID != _NO_ID, 'not within execution');\n    require(SPELL == msg.sender, 'not from spell');\n    require(_IN_EXEC_LOCK == _NOT_ENTERED, 'in exec lock');\n    _IN_EXEC_LOCK = _ENTERED;\n    _;\n    _IN_EXEC_LOCK = _NOT_ENTERED;\n  }\n\n  /// @dev Ensure that the interest rate of the given token is accrued.\n  modifier poke(address token) {\n    accrue(token);\n    _;\n  }\n\n  /// @dev Initialize the bank smart contract, using msg.sender as the first governor.\n  /// @param _oracle The oracle smart contract address.\n  /// @param _feeBps The fee collected to Homora bank.\n  function initialize(IOracle _oracle, uint _feeBps) external initializer {\n    __Governable__init();\n    _GENERAL_LOCK = _NOT_ENTERED;\n    _IN_EXEC_LOCK = _NOT_ENTERED;\n    POSITION_ID = _NO_ID;\n    SPELL = _NO_ADDRESS;\n    caster = address(new HomoraCaster());\n    oracle = _oracle;\n    require(address(_oracle) != address(0), 'bad oracle address');\n    feeBps = _feeBps;\n    nextPositionId = 1;\n    bankStatus = 3; // allow both borrow and repay\n    emit SetOracle(address(_oracle));\n    emit SetFeeBps(_feeBps);\n  }\n\n  /// @dev Return the current executor (the owner of the current position).\n  function EXECUTOR() external view override returns (address) {\n    uint positionId = POSITION_ID;\n    require(positionId != _NO_ID, 'not under execution');\n    return positions[positionId].owner;\n  }\n\n  /// @dev Set allowContractCalls\n  /// @param ok The status to set allowContractCalls to (false = onlyEOA)\n  function setAllowContractCalls(bool ok) external onlyGov {\n    allowContractCalls = ok;\n  }\n\n  /// @dev Set whitelist spell status\n  /// @param spells list of spells to change status\n  /// @param statuses list of statuses to change to\n  function setWhitelistSpells(address[] calldata spells, bool[] calldata statuses)\n    external\n    onlyGov\n  {\n    require(spells.length == statuses.length, 'spells & statuses length mismatched');\n    for (uint idx = 0; idx < spells.length; idx++) {\n      whitelistedSpells[spells[idx]] = statuses[idx];\n    }\n  }\n\n  /// @dev Set whitelist token status\n  /// @param tokens list of tokens to change status\n  /// @param statuses list of statuses to change to\n  function setWhitelistTokens(address[] calldata tokens, bool[] calldata statuses)\n    external\n    onlyGov\n  {\n    require(tokens.length == statuses.length, 'tokens & statuses length mismatched');\n    for (uint idx = 0; idx < tokens.length; idx++) {\n      if (statuses[idx]) {\n        // check oracle suppport\n        require(support(tokens[idx]), 'oracle not support token');\n      }\n      whitelistedTokens[tokens[idx]] = statuses[idx];\n    }\n  }\n\n  /// @dev Set whitelist user status\n  /// @param users list of users to change status\n  /// @param statuses list of statuses to change to\n  function setWhitelistUsers(address[] calldata users, bool[] calldata statuses) external onlyGov {\n    require(users.length == statuses.length, 'users & statuses length mismatched');\n    for (uint idx = 0; idx < users.length; idx++) {\n      whitelistedUsers[users[idx]] = statuses[idx];\n    }\n  }\n\n  /// @dev Check whether the oracle supports the token\n  /// @param token ERC-20 token to check for support\n  function support(address token) public view override returns (bool) {\n    return oracle.support(token);\n  }\n\n  /// @dev Set bank status\n  /// @param _bankStatus new bank status to change to\n  function setBankStatus(uint _bankStatus) external onlyGov {\n    bankStatus = _bankStatus;\n  }\n\n  /// @dev Bank borrow status allowed or not\n  /// @notice check last bit of bankStatus\n  function allowBorrowStatus() public view returns (bool) {\n    return (bankStatus & 0x01) > 0;\n  }\n\n  /// @dev Bank repay status allowed or not\n  /// @notice Check second-to-last bit of bankStatus\n  function allowRepayStatus() public view returns (bool) {\n    return (bankStatus & 0x02) > 0;\n  }\n\n  /// @dev Trigger interest accrual for the given bank.\n  /// @param token The underlying token to trigger the interest accrual.\n  function accrue(address token) public override {\n    Bank storage bank = banks[token];\n    require(bank.isListed, 'bank not exist');\n    uint totalDebt = bank.totalDebt;\n    uint debt = ICErc20(bank.cToken).borrowBalanceCurrent(address(this));\n    if (debt > totalDebt) {\n      uint fee = debt.sub(totalDebt).mul(feeBps).div(10000);\n      bank.totalDebt = debt;\n      bank.reserve = bank.reserve.add(doBorrow(token, fee));\n    } else if (totalDebt != debt) {\n      // We should never reach here because CREAMv2 does not support *repayBorrowBehalf*\n      // functionality. We set bank.totalDebt = debt nonetheless to ensure consistency. But do\n      // note that if *repayBorrowBehalf* exists, an attacker can maliciously deflate debt\n      // share value and potentially make this contract stop working due to math overflow.\n      bank.totalDebt = debt;\n    }\n  }\n\n  /// @dev Convenient function to trigger interest accrual for a list of banks.\n  /// @param tokens The list of banks to trigger interest accrual.\n  function accrueAll(address[] memory tokens) external {\n    for (uint idx = 0; idx < tokens.length; idx++) {\n      accrue(tokens[idx]);\n    }\n  }\n\n  /// @dev Return the borrow balance for given position and token without triggering interest accrual.\n  /// @param positionId The position to query for borrow balance.\n  /// @param token The token to query for borrow balance.\n  function borrowBalanceStored(uint positionId, address token) public view override returns (uint) {\n    uint totalDebt = banks[token].totalDebt;\n    uint totalShare = banks[token].totalShare;\n    uint share = positions[positionId].debtShareOf[token];\n    if (share == 0 || totalDebt == 0) {\n      return 0;\n    } else {\n      return share.mul(totalDebt).ceilDiv(totalShare);\n    }\n  }\n\n  /// @dev Trigger interest accrual and return the current borrow balance.\n  /// @param positionId The position to query for borrow balance.\n  /// @param token The token to query for borrow balance.\n  function borrowBalanceCurrent(uint positionId, address token) external override returns (uint) {\n    accrue(token);\n    return borrowBalanceStored(positionId, token);\n  }\n\n  /// @dev Return bank information for the given token.\n  /// @param token The token address to query for bank information.\n  function getBankInfo(address token)\n    external\n    view\n    override\n    returns (\n      bool isListed,\n      address cToken,\n      uint reserve,\n      uint totalDebt,\n      uint totalShare\n    )\n  {\n    Bank storage bank = banks[token];\n    return (bank.isListed, bank.cToken, bank.reserve, bank.totalDebt, bank.totalShare);\n  }\n\n  /// @dev Return position information for the given position id.\n  /// @param positionId The position id to query for position information.\n  function getPositionInfo(uint positionId)\n    public\n    view\n    override\n    returns (\n      address owner,\n      address collToken,\n      uint collId,\n      uint collateralSize\n    )\n  {\n    Position storage pos = positions[positionId];\n    return (pos.owner, pos.collToken, pos.collId, pos.collateralSize);\n  }\n\n  /// @dev Return current position information\n  function getCurrentPositionInfo()\n    external\n    view\n    override\n    returns (\n      address owner,\n      address collToken,\n      uint collId,\n      uint collateralSize\n    )\n  {\n    require(POSITION_ID != _NO_ID, 'no id');\n    return getPositionInfo(POSITION_ID);\n  }\n\n  /// @dev Return the debt share of the given bank token for the given position id.\n  /// @param positionId position id to get debt of\n  /// @param token ERC20 debt token to query\n  function getPositionDebtShareOf(uint positionId, address token) external view returns (uint) {\n    return positions[positionId].debtShareOf[token];\n  }\n\n  /// @dev Return the list of all debts for the given position id.\n  /// @param positionId position id to get debts of\n  function getPositionDebts(uint positionId)\n    external\n    view\n    returns (address[] memory tokens, uint[] memory debts)\n  {\n    Position storage pos = positions[positionId];\n    uint count = 0;\n    uint bitMap = pos.debtMap;\n    while (bitMap > 0) {\n      if ((bitMap & 1) != 0) {\n        count++;\n      }\n      bitMap >>= 1;\n    }\n    tokens = new address[](count);\n    debts = new uint[](count);\n    bitMap = pos.debtMap;\n    count = 0;\n    uint idx = 0;\n    while (bitMap > 0) {\n      if ((bitMap & 1) != 0) {\n        address token = allBanks[idx];\n        Bank storage bank = banks[token];\n        tokens[count] = token;\n        debts[count] = pos.debtShareOf[token].mul(bank.totalDebt).ceilDiv(bank.totalShare);\n        count++;\n      }\n      idx++;\n      bitMap >>= 1;\n    }\n  }\n\n  /// @dev Return the total collateral value of the given position in ETH.\n  /// @param positionId The position ID to query for the collateral value.\n  function getCollateralETHValue(uint positionId) public view returns (uint) {\n    Position storage pos = positions[positionId];\n    uint size = pos.collateralSize;\n    if (size == 0) {\n      return 0;\n    } else {\n      require(pos.collToken != address(0), 'bad collateral token');\n      return oracle.asETHCollateral(pos.collToken, pos.collId, size, pos.owner);\n    }\n  }\n\n  /// @dev Return the total borrow value of the given position in ETH.\n  /// @param positionId The position ID to query for the borrow value.\n  function getBorrowETHValue(uint positionId) public view override returns (uint) {\n    uint value = 0;\n    Position storage pos = positions[positionId];\n    address owner = pos.owner;\n    uint bitMap = pos.debtMap;\n    uint idx = 0;\n    while (bitMap > 0) {\n      if ((bitMap & 1) != 0) {\n        address token = allBanks[idx];\n        uint share = pos.debtShareOf[token];\n        Bank storage bank = banks[token];\n        uint debt = share.mul(bank.totalDebt).ceilDiv(bank.totalShare);\n        value = value.add(oracle.asETHBorrow(token, debt, owner));\n      }\n      idx++;\n      bitMap >>= 1;\n    }\n    return value;\n  }\n\n  /// @dev Add a new bank to the ecosystem.\n  /// @param token The underlying token for the bank.\n  /// @param cToken The address of the cToken smart contract.\n  function addBank(address token, address cToken) external onlyGov {\n    Bank storage bank = banks[token];\n    require(!cTokenInBank[cToken], 'cToken already exists');\n    require(!bank.isListed, 'bank already exists');\n    cTokenInBank[cToken] = true;\n    bank.isListed = true;\n    require(allBanks.length < 256, 'reach bank limit');\n    bank.index = uint8(allBanks.length);\n    bank.cToken = cToken;\n    IERC20(token).safeApprove(cToken, 0);\n    IERC20(token).safeApprove(cToken, uint(-1));\n    allBanks.push(token);\n    emit AddBank(token, cToken);\n  }\n\n  /// @dev Set the oracle smart contract address.\n  /// @param _oracle The new oracle smart contract address.\n  function setOracle(IOracle _oracle) external onlyGov {\n    require(address(_oracle) != address(0), 'cannot set zero address oracle');\n    oracle = _oracle;\n    emit SetOracle(address(_oracle));\n  }\n\n  /// @dev Set the fee bps value that Homora bank charges.\n  /// @param _feeBps The new fee bps value.\n  function setFeeBps(uint _feeBps) external onlyGov {\n    require(_feeBps <= 10000, 'fee too high');\n    feeBps = _feeBps;\n    emit SetFeeBps(_feeBps);\n  }\n\n  /// @dev Withdraw the reserve portion of the bank.\n  /// @param amount The amount of tokens to withdraw.\n  function withdrawReserve(address token, uint amount) external onlyGov lock {\n    Bank storage bank = banks[token];\n    require(bank.isListed, 'bank not exist');\n    bank.reserve = bank.reserve.sub(amount);\n    IERC20(token).safeTransfer(msg.sender, amount);\n    emit WithdrawReserve(msg.sender, token, amount);\n  }\n\n  /// @dev Liquidate a position. Pay debt for its owner and take the collateral.\n  /// @param positionId The position ID to liquidate.\n  /// @param debtToken The debt token to repay.\n  /// @param amountCall The amount to repay when doing transferFrom call.\n  function liquidate(\n    uint positionId,\n    address debtToken,\n    uint amountCall\n  ) external override lock poke(debtToken) {\n    uint collateralValue = getCollateralETHValue(positionId);\n    uint borrowValue = getBorrowETHValue(positionId);\n    require(collateralValue < borrowValue, 'position still healthy');\n    Position storage pos = positions[positionId];\n    (uint amountPaid, uint share) = repayInternal(positionId, debtToken, amountCall);\n    require(pos.collToken != address(0), 'bad collateral token');\n    uint bounty =\n      Math.min(\n        oracle.convertForLiquidation(debtToken, pos.collToken, pos.collId, amountPaid),\n        pos.collateralSize\n      );\n    pos.collateralSize = pos.collateralSize.sub(bounty);\n    IERC1155(pos.collToken).safeTransferFrom(address(this), msg.sender, pos.collId, bounty, '');\n    emit Liquidate(positionId, msg.sender, debtToken, amountPaid, share, bounty);\n  }\n\n  /// @dev Execute the action via HomoraCaster, calling its function with the supplied data.\n  /// @param positionId The position ID to execute the action, or zero for new position.\n  /// @param spell The target spell to invoke the execution via HomoraCaster.\n  /// @param data Extra data to pass to the target for the execution.\n  function execute(\n    uint positionId,\n    address spell,\n    bytes memory data\n  ) external payable lock onlyEOAEx returns (uint) {\n    require(whitelistedSpells[spell], 'spell not whitelisted');\n    if (positionId == 0) {\n      positionId = nextPositionId++;\n      positions[positionId].owner = msg.sender;\n    } else {\n      require(positionId < nextPositionId, 'position id not exists');\n      require(msg.sender == positions[positionId].owner, 'not position owner');\n    }\n    POSITION_ID = positionId;\n    SPELL = spell;\n    HomoraCaster(caster).cast{value: msg.value}(spell, data);\n    uint collateralValue = getCollateralETHValue(positionId);\n    uint borrowValue = getBorrowETHValue(positionId);\n    require(collateralValue >= borrowValue, 'insufficient collateral');\n    POSITION_ID = _NO_ID;\n    SPELL = _NO_ADDRESS;\n    return positionId;\n  }\n\n  /// @dev Borrow tokens from that bank. Must only be called while under execution.\n  /// @param token The token to borrow from the bank.\n  /// @param amount The amount of tokens to borrow.\n  function borrow(address token, uint amount) external override inExec poke(token) {\n    require(allowBorrowStatus(), 'borrow not allowed');\n    require(whitelistedTokens[token], 'token not whitelisted');\n    Bank storage bank = banks[token];\n    Position storage pos = positions[POSITION_ID];\n    uint totalShare = bank.totalShare;\n    uint totalDebt = bank.totalDebt;\n    uint share = totalShare == 0 ? amount : amount.mul(totalShare).ceilDiv(totalDebt);\n    bank.totalShare = bank.totalShare.add(share);\n    uint newShare = pos.debtShareOf[token].add(share);\n    pos.debtShareOf[token] = newShare;\n    if (newShare > 0) {\n      pos.debtMap |= (1 << uint(bank.index));\n    }\n    IERC20(token).safeTransfer(msg.sender, doBorrow(token, amount));\n    emit Borrow(POSITION_ID, msg.sender, token, amount, share);\n  }\n\n  /// @dev Repay tokens to the bank. Must only be called while under execution.\n  /// @param token The token to repay to the bank.\n  /// @param amountCall The amount of tokens to repay via transferFrom.\n  function repay(address token, uint amountCall) external override inExec poke(token) {\n    require(allowRepayStatus(), 'repay not allowed');\n    require(whitelistedTokens[token], 'token not whitelisted');\n    (uint amount, uint share) = repayInternal(POSITION_ID, token, amountCall);\n    emit Repay(POSITION_ID, msg.sender, token, amount, share);\n  }\n\n  /// @dev Perform repay action. Return the amount actually taken and the debt share reduced.\n  /// @param positionId The position ID to repay the debt.\n  /// @param token The bank token to pay the debt.\n  /// @param amountCall The amount to repay by calling transferFrom, or -1 for debt size.\n  function repayInternal(\n    uint positionId,\n    address token,\n    uint amountCall\n  ) internal returns (uint, uint) {\n    Bank storage bank = banks[token];\n    Position storage pos = positions[positionId];\n    uint totalShare = bank.totalShare;\n    uint totalDebt = bank.totalDebt;\n    uint oldShare = pos.debtShareOf[token];\n    uint oldDebt = oldShare.mul(totalDebt).ceilDiv(totalShare);\n    if (amountCall == uint(-1)) {\n      amountCall = oldDebt;\n    }\n    uint paid = doRepay(token, doERC20TransferIn(token, amountCall));\n    require(paid <= oldDebt, 'paid exceeds debt'); // prevent share overflow attack\n    uint lessShare = paid == oldDebt ? oldShare : paid.mul(totalShare).div(totalDebt);\n    bank.totalShare = totalShare.sub(lessShare);\n    uint newShare = oldShare.sub(lessShare);\n    pos.debtShareOf[token] = newShare;\n    if (newShare == 0) {\n      pos.debtMap &= ~(1 << uint(bank.index));\n    }\n    return (paid, lessShare);\n  }\n\n  /// @dev Transmit user assets to the caller, so users only need to approve Bank for spending.\n  /// @param token The token to transfer from user to the caller.\n  /// @param amount The amount to transfer.\n  function transmit(address token, uint amount) external override inExec {\n    Position storage pos = positions[POSITION_ID];\n    IERC20(token).safeTransferFrom(pos.owner, msg.sender, amount);\n  }\n\n  /// @dev Put more collateral for users. Must only be called during execution.\n  /// @param collToken The ERC1155 token to collateral.\n  /// @param collId The token id to collateral.\n  /// @param amountCall The amount of tokens to put via transferFrom.\n  function putCollateral(\n    address collToken,\n    uint collId,\n    uint amountCall\n  ) external override inExec {\n    Position storage pos = positions[POSITION_ID];\n    if (pos.collToken != collToken || pos.collId != collId) {\n      require(oracle.supportWrappedToken(collToken, collId), 'collateral not supported');\n      require(pos.collateralSize == 0, 'another type of collateral already exists');\n      pos.collToken = collToken;\n      pos.collId = collId;\n    }\n    uint amount = doERC1155TransferIn(collToken, collId, amountCall);\n    pos.collateralSize = pos.collateralSize.add(amount);\n    emit PutCollateral(POSITION_ID, msg.sender, collToken, collId, amount);\n  }\n\n  /// @dev Take some collateral back. Must only be called during execution.\n  /// @param collToken The ERC1155 token to take back.\n  /// @param collId The token id to take back.\n  /// @param amount The amount of tokens to take back via transfer.\n  function takeCollateral(\n    address collToken,\n    uint collId,\n    uint amount\n  ) external override inExec {\n    Position storage pos = positions[POSITION_ID];\n    require(collToken == pos.collToken, 'invalid collateral token');\n    require(collId == pos.collId, 'invalid collateral token');\n    if (amount == uint(-1)) {\n      amount = pos.collateralSize;\n    }\n    pos.collateralSize = pos.collateralSize.sub(amount);\n    IERC1155(collToken).safeTransferFrom(address(this), msg.sender, collId, amount, '');\n    emit TakeCollateral(POSITION_ID, msg.sender, collToken, collId, amount);\n  }\n\n  /// @dev Internal function to perform borrow from the bank and return the amount received.\n  /// @param token The token to perform borrow action.\n  /// @param amountCall The amount use in the transferFrom call.\n  /// NOTE: Caller must ensure that cToken interest was already accrued up to this block.\n  function doBorrow(address token, uint amountCall) internal returns (uint) {\n    Bank storage bank = banks[token]; // assume the input is already sanity checked.\n    uint balanceBefore = IERC20(token).balanceOf(address(this));\n    require(ICErc20(bank.cToken).borrow(amountCall) == 0, 'bad borrow');\n    uint balanceAfter = IERC20(token).balanceOf(address(this));\n    bank.totalDebt = bank.totalDebt.add(amountCall);\n    return balanceAfter.sub(balanceBefore);\n  }\n\n  /// @dev Internal function to perform repay to the bank and return the amount actually repaid.\n  /// @param token The token to perform repay action.\n  /// @param amountCall The amount to use in the repay call.\n  /// NOTE: Caller must ensure that cToken interest was already accrued up to this block.\n  function doRepay(address token, uint amountCall) internal returns (uint) {\n    Bank storage bank = banks[token]; // assume the input is already sanity checked.\n    ICErc20 cToken = ICErc20(bank.cToken);\n    uint oldDebt = bank.totalDebt;\n    require(cToken.repayBorrow(amountCall) == 0, 'bad repay');\n    uint newDebt = cToken.borrowBalanceStored(address(this));\n    bank.totalDebt = newDebt;\n    return oldDebt.sub(newDebt);\n  }\n\n  /// @dev Internal function to perform ERC20 transfer in and return amount actually received.\n  /// @param token The token to perform transferFrom action.\n  /// @param amountCall The amount use in the transferFrom call.\n  function doERC20TransferIn(address token, uint amountCall) internal returns (uint) {\n    uint balanceBefore = IERC20(token).balanceOf(address(this));\n    IERC20(token).safeTransferFrom(msg.sender, address(this), amountCall);\n    uint balanceAfter = IERC20(token).balanceOf(address(this));\n    return balanceAfter.sub(balanceBefore);\n  }\n\n  /// @dev Internal function to perform ERC1155 transfer in and return amount actually received.\n  /// @param token The token to perform transferFrom action.\n  /// @param id The id to perform transferFrom action.\n  /// @param amountCall The amount use in the transferFrom call.\n  function doERC1155TransferIn(\n    address token,\n    uint id,\n    uint amountCall\n  ) internal returns (uint) {\n    uint balanceBefore = IERC1155(token).balanceOf(address(this), id);\n    IERC1155(token).safeTransferFrom(msg.sender, address(this), id, amountCall, '');\n    uint balanceAfter = IERC1155(token).balanceOf(address(this), id);\n    return balanceAfter.sub(balanceBefore);\n  }\n}\n","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"AcceptGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"AddBank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PutCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBps\",\"type\":\"uint256\"}],\"name\":\"SetFeeBps\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"SetGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"SetOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernor\",\"type\":\"address\"}],\"name\":\"SetPendingGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TakeCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawReserve\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXECUTOR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSITION_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPELL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_GENERAL_LOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_IN_EXEC_LOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"accrue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"accrueAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"addBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allBanks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowBorrowStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowContractCalls\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowRepayStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"banks\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"borrowBalanceCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"borrowBalanceStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cTokenInBank\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"spell\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBankInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isListed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getBorrowETHValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getCollateralETHValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPositionInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralSize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPositionDebtShareOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getPositionDebts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"debts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getPositionInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralSize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeBps\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountCall\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPositionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtMap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCall\",\"type\":\"uint256\"}],\"name\":\"putCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountCall\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"ok\",\"type\":\"bool\"}],\"name\":\"setAllowContractCalls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bankStatus\",\"type\":\"uint256\"}],\"name\":\"setBankStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeBps\",\"type\":\"uint256\"}],\"name\":\"setFeeBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"setPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"spells\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"}],\"name\":\"setWhitelistSpells\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"}],\"name\":\"setWhitelistTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"}],\"name\":\"setWhitelistUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"support\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"takeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transmit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedSpells\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedUsers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HomoraBank","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}