{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.7.6;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IPLUGV1 {\r\n    function upgradePlug(uint256 nextLevelCap) external;\r\n    function chargePlug(uint256 amount) external;\r\n    function dischargePlug(uint256 plugPercentage) external;\r\n    function rebalancePlug() external;\r\n    function tokenWant() external view returns(address);\r\n    function tokenStrategy() external view returns(address);\r\n    function tokenReward() external view returns(address);\r\n}\r\n\r\n\r\nabstract contract IdleYield {\r\n    function mintIdleToken(uint256 amount, bool skipRebalance, address referral) external virtual returns(uint256);\r\n    function redeemIdleToken(uint256 amount) external virtual returns(uint256);\r\n    function balanceOf(address user) external virtual returns(uint256);\r\n    function tokenPrice() external virtual view returns(uint256);\r\n    function userAvgPrices(address user) external virtual view returns(uint256);\r\n    function fee() external virtual view returns(uint256);\r\n}\r\n\r\ncontract PLUGIDLEV1 is IPLUGV1, Ownable, Pausable {\r\n    \r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    \r\n    uint256 private constant ONE_18 = 10**18;\r\n    uint256 private constant FULL_ALLOC = 100000;\r\n    \r\n    address public constant override tokenWant = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48); // USDC\r\n    address public constant override tokenStrategy = address(0x5274891bEC421B39D23760c04A6755eCB444797C); // IDLEUSDC\r\n    address public override tokenReward = address(0x20a68F9e34076b2dc15ce726d7eEbB83b694702d); // ISLA\r\n    IdleYield strategy = IdleYield(tokenStrategy);\r\n    IERC20 iTokenWant = IERC20(tokenWant);\r\n    \r\n    // addresses to send interests generated\r\n    address public rewardOutOne;\r\n    address public rewardOutTwo;\r\n    // it should be used only when plug balance has to move to another plug\r\n    address public plugHelper;\r\n    \r\n    // Plug parameter\r\n    uint256 public currentLevelCap = uint256(150000).mul(ONE_18); // 150K token want\r\n    uint256 public plugLimit = uint256(50000).mul(ONE_18); // 50K plug limit\r\n    uint256 public plugLevel;\r\n    mapping (address => uint256) public tokenStrategyAmounts;\r\n    mapping (address => uint256) public tokenWantAmounts;\r\n    mapping (address => uint256) public tokenWantDonated;\r\n    uint256 public usersTokenWant;\r\n    uint256 public lastRebalanceTs;\r\n    uint256 twInStrategyLastRebalance;\r\n    uint256 public rebalancePeriod = 3 days;\r\n    uint256 public rewardRate = ONE_18;\r\n\r\n    event PlugCharged(address user, uint256 amount, uint256 amountMinted);\r\n    event PlugDischarged(address user, uint256 userAmount, uint256 rewardForUSer, uint256 rewardForPlug);\r\n    event SentRewardToOutOne(address token, uint256 amount);\r\n    event SentRewardToOutTwo(address token, uint256 amount);\r\n    event Rebalance(uint256 amountEarned);\r\n\r\n    constructor() {\r\n        iTokenWant.approve(tokenStrategy, uint256(-1));\r\n    }\r\n\r\n    /**\r\n     * Charge plug staking token want into idle.\r\n     */\r\n    function chargePlug(uint256 _amount) external override whenNotPaused() {\r\n        usersTokenWant = usersTokenWant.add(_amount);\r\n        require(usersTokenWant < plugLimit);\r\n        iTokenWant.safeTransferFrom(msg.sender, address(this), _amount);\r\n        require(_getPlugBalance(tokenWant) >= _amount);\r\n        uint256 amountMinted = strategy.mintIdleToken(_amount, true, address(0));\r\n        \r\n        tokenStrategyAmounts[msg.sender] = tokenStrategyAmounts[msg.sender].add(amountMinted);\r\n        tokenWantAmounts[msg.sender] = tokenWantAmounts[msg.sender].add(_amount);\r\n        emit PlugCharged(msg.sender, _amount, amountMinted);\r\n    }\r\n    \r\n    /**\r\n     * Discharge plug withdrawing all token staked into idle\r\n     * Choose the percentage to donate into the plug (0, 50, 100)\r\n     * If there is any reward active it will be send respecting the actual reward rate\r\n     */\r\n    function dischargePlug(uint256 _plugPercentage) external override whenNotPaused() {\r\n        _dischargePlug(_plugPercentage);\r\n    }\r\n    \r\n    /**\r\n     * Internal function to discharge plug\r\n     */\r\n    function _dischargePlug(uint256 _plugPercentage) internal {\r\n        require(_plugPercentage == 0 || _plugPercentage == 50 || _plugPercentage == 100);\r\n        uint256 userAmount = tokenWantAmounts[msg.sender];\r\n        require(userAmount > 0);\r\n\r\n        // transfer token want from IDLE to plug\r\n        uint256 amountRedeemed = strategy.redeemIdleToken(tokenStrategyAmounts[msg.sender]);\r\n        usersTokenWant = usersTokenWant.sub(userAmount); \r\n\r\n        // token want earned\r\n        uint256 tokenEarned;\r\n        uint256 rewardForUser;\r\n        uint256 rewardForPlug;\r\n        uint256 amountToDischarge;\r\n\r\n        // it should be always greater, added for safe\r\n        if (amountRedeemed <= userAmount) {\r\n            tokenEarned = 0;\r\n            userAmount = amountRedeemed;\r\n        } else {\r\n            tokenEarned = amountRedeemed.sub(userAmount);\r\n            rewardForUser = tokenEarned; \r\n        }\r\n        \r\n        // calculate token earned percentage to donate into plug \r\n        if (_plugPercentage > 0 && tokenEarned > 0) {\r\n            rewardForPlug = tokenEarned;\r\n            rewardForUser = 0;\r\n            if (_plugPercentage == 50) {\r\n                rewardForPlug = rewardForPlug.div(2);\r\n                rewardForUser = tokenEarned.sub(rewardForPlug);\r\n            }\r\n            uint256 rewardLeft = _getPlugBalance(tokenReward);\r\n            if (rewardLeft > 0) {\r\n                uint256 rewardWithRate = rewardForPlug.mul(rewardRate).div(ONE_18);\r\n                _sendReward(rewardLeft, rewardWithRate); \r\n            }\r\n            tokenWantDonated[msg.sender] = tokenWantDonated[msg.sender].add(rewardForPlug);\r\n        }\r\n\r\n        // transfer tokenWant userAmount to user\r\n        amountToDischarge = userAmount.add(rewardForUser);\r\n        _dischargeUser(amountToDischarge);\r\n        emit PlugDischarged(msg.sender, userAmount, rewardForUser, rewardForPlug);\r\n    }\r\n\r\n    /**\r\n     * Sending all token want owned by an user.\r\n     */\r\n    function _dischargeUser(uint256 _amount) internal {\r\n        _sendTokenWant(_amount);\r\n        tokenWantAmounts[msg.sender] = 0;\r\n        tokenStrategyAmounts[msg.sender] = 0;\r\n    }\r\n\r\n    /**\r\n     * Send token want to msg.sender.\r\n     */\r\n    function _sendTokenWant(uint256 _amount) internal {\r\n        iTokenWant.safeTransfer(msg.sender, _amount); \r\n    }\r\n\r\n    /**\r\n     * Send token reward to users,\r\n     */\r\n    function _sendReward(uint256 _rewardLeft, uint256 _rewardWithRate) internal {\r\n        if (_rewardLeft >= _rewardWithRate) {\r\n            IERC20(tokenReward).safeTransfer(msg.sender, _rewardWithRate); \r\n        } else {\r\n            IERC20(tokenReward).safeTransfer(msg.sender, _rewardLeft); \r\n        } \r\n    }\r\n    \r\n    /**\r\n     * Rebalance plug every rebalance period.\r\n     */\r\n    function rebalancePlug() external override whenNotPaused() {\r\n        _rebalancePlug();\r\n    }\r\n    \r\n    /**\r\n     * Internsal function for rebalance.\r\n     */\r\n    function _rebalancePlug() internal {\r\n        require(lastRebalanceTs.add(rebalancePeriod) < block.timestamp);\r\n        lastRebalanceTs = block.timestamp;\r\n        \r\n        uint256 twPlug = iTokenWant.balanceOf(address(this));\r\n        \r\n        uint256 twInStrategy;\r\n        uint256 teInStrategy;\r\n        uint256 teByPlug;\r\n        \r\n        // reinvest token want to strategy\r\n        if (plugLevel == 0) {\r\n            _rebalanceAtLevel0(twPlug);\r\n        } else {\r\n            twInStrategy = _getTokenWantInS();\r\n            teInStrategy = twInStrategy.sub(twInStrategyLastRebalance);\r\n            teByPlug = twPlug.add(teInStrategy);\r\n            if (plugLevel == 1) {\r\n                _rebalanceAtLevel1Plus(teByPlug.div(2));\r\n            } else {\r\n                _rebalanceAtLevel1Plus(teByPlug.div(3));\r\n            }\r\n        }\r\n        twInStrategyLastRebalance = _getTokenWantInS();\r\n    }\r\n    \r\n    /**\r\n     * Rebalance plug at level 0\r\n     * Mint all tokens want owned by plug to idle pool \r\n     */\r\n    function _rebalanceAtLevel0(uint256 _amount) internal {\r\n        uint256 mintedTokens = strategy.mintIdleToken(_amount, true, address(0));\r\n        tokenStrategyAmounts[address(this)] = tokenStrategyAmounts[address(this)].add(mintedTokens); \r\n    }\r\n    \r\n    /**\r\n     * Rebalance plug at level1+.\r\n     * level1 -> 50% remain into plug and 50% send to reward1\r\n     * level2+ -> 33.3% to plug 33.3% to reward1 and 33.3% to reward2\r\n     */\r\n    function _rebalanceAtLevel1Plus(uint256 _amount) internal {\r\n        uint256 plugAmount = _getPlugBalance(tokenWant);\r\n        uint256 amountToSend = _amount;\r\n        \r\n        if (plugLevel > 1) {\r\n            amountToSend = amountToSend.mul(2);\r\n        }\r\n        \r\n        if (plugAmount < amountToSend) {\r\n            uint256 amountToRetrieveFromS = amountToSend.sub(plugAmount);\r\n            uint256 amountToRedeem = amountToRetrieveFromS.div(_getRedeemPrice()).mul(ONE_18);\r\n            strategy.redeemIdleToken(amountToRedeem);\r\n            tokenStrategyAmounts[address(this)] = tokenStrategyAmounts[address(this)].sub(amountToRedeem);\r\n        }\r\n        \r\n        // send to reward out 1\r\n        _transferToOutside(tokenWant, rewardOutOne, _amount);\r\n        \r\n        if (plugLevel > 1) {\r\n            _transferToOutside(tokenWant, rewardOutTwo, _amount);\r\n        }\r\n        \r\n        //send all remain token want from plug to idle strategy\r\n        uint256 balanceLeft = plugAmount.sub(amountToSend);\r\n        if (balanceLeft > 0) {\r\n            _rebalanceAtLevel0(balanceLeft);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Upgrade plug to the next level.\r\n     */\r\n    function upgradePlug(uint256 _nextLevelCap) external override onlyOwner {\r\n        require(_nextLevelCap > currentLevelCap && plugTotalAmount() > currentLevelCap);\r\n        require(rewardOutOne != address(0));\r\n        if (plugLevel >= 1) {\r\n            require(rewardOutTwo != address(0));\r\n            require(plugHelper != address(0));\r\n        }\r\n        plugLevel = plugLevel + 1;\r\n        currentLevelCap = _nextLevelCap;\r\n    }\r\n    \r\n    /**\r\n     * Redeem all token owned by plug from idle strategy.\r\n     */\r\n    function safePlugExitStrategy(uint256 _amount) external onlyOwner {\r\n        strategy.redeemIdleToken(_amount);\r\n        tokenStrategyAmounts[address(this)] = tokenStrategyAmounts[address(this)].sub(_amount);\r\n        twInStrategyLastRebalance = _getTokenWantInS();\r\n    }\r\n    \r\n    /**\r\n     * Transfer token want to factory.\r\n     */\r\n    function transferToHelper() external onlyOwner {\r\n        require(plugHelper != address(0));\r\n        uint256 amount = iTokenWant.balanceOf(address(this));\r\n        _transferToOutside(tokenWant, plugHelper, amount);\r\n    }\r\n    \r\n    /**\r\n     * Transfer token different than token strategy to external allowed address (ex IDLE, COMP, ecc).\r\n     */\r\n    function transferToRewardOut(address _token, address _rewardOut) external onlyOwner {\r\n        require(_token != address(0) && _rewardOut != address(0));\r\n        require(_rewardOut == rewardOutOne || _rewardOut == rewardOutTwo);\r\n        // it prevents to tranfer idle tokens outside\r\n        require(_token != tokenStrategy);\r\n        uint256 amount = IERC20(_token).balanceOf(address(this));\r\n        _transferToOutside(_token, _rewardOut, amount);\r\n    }\r\n    \r\n    /**\r\n     * Transfer any token to external address.\r\n     */\r\n    function _transferToOutside(address _token, address _outside, uint256 _amount) internal {\r\n      IERC20(_token).safeTransfer(_outside, _amount);  \r\n    }\r\n\r\n    /**\r\n     * Approve token to spender.\r\n     */\r\n    function safeTokenApprore(address _token, address _spender, uint256 _amount) external onlyOwner {\r\n        IERC20(_token).approve(_spender, _amount);\r\n    }\r\n    \r\n    /**\r\n     * Set the current level cap.\r\n     */\r\n    function setCurrentLevelCap(uint256 _newCap) external onlyOwner {\r\n        require(_newCap > plugTotalAmount());\r\n        currentLevelCap = _newCap;\r\n    }\r\n    \r\n    /**\r\n     * Set a new token reward.\r\n     */\r\n    function setTokenReward(address _tokenReward) external onlyOwner {\r\n        tokenReward = _tokenReward;\r\n    }\r\n\r\n    /**\r\n     * Set the new reward rate in decimals (18).\r\n     */\r\n    function setRewardRate(uint256 _rate) external onlyOwner {\r\n        rewardRate = _rate;\r\n    }\r\n    \r\n    /**\r\n     * Set the first reward pool address.\r\n     */\r\n    function setRewardOutOne(address _reward) external onlyOwner {\r\n        rewardOutOne = _reward;\r\n    }\r\n    \r\n    /**\r\n     * Set the second reward pool address.\r\n     */\r\n    function setRewardOutTwo(address _reward) external onlyOwner {\r\n        rewardOutTwo = _reward;\r\n    }\r\n    \r\n    /**\r\n     * Set the plug helper address.\r\n     */\r\n    function setPlugHelper(address _plugHelper) external onlyOwner {\r\n        plugHelper = _plugHelper;\r\n    }\r\n    \r\n    /**\r\n     * Set the new rebalance period duration.\r\n     */ \r\n    function setRebalancePeriod(uint256 _newPeriod) external onlyOwner {\r\n        // at least 12 hours (60 * 60 * 12)\r\n        require(_newPeriod >= 43200);\r\n        rebalancePeriod = _newPeriod;\r\n    }\r\n\r\n    /**\r\n     * Set the new plug cap for token want to store in it.\r\n     */ \r\n    function setPlugUsersLimit(uint256 _newLimit) external onlyOwner {\r\n        require(_newLimit > plugLimit);\r\n        plugLimit = _newLimit;\r\n    }\r\n\r\n    /**\r\n     * Get the current reedem price.\r\n     * @notice function helper for retrieving the idle token price counting fees, developed by @emilianobonassi\r\n     * https://github.com/emilianobonassi/idle-token-helper\r\n     */\r\n    function _getRedeemPrice() view internal returns (uint256 redeemPrice) {\r\n        uint256 userAvgPrice = strategy.userAvgPrices(address(this));\r\n        uint256 currentPrice = strategy.tokenPrice();\r\n\r\n        // When no deposits userAvgPrice is 0 equiv currentPrice\r\n        // and in the case of issues\r\n        if (userAvgPrice == 0 || currentPrice < userAvgPrice) {\r\n            redeemPrice = currentPrice;\r\n        } else {\r\n            uint256 fee = strategy.fee();\r\n\r\n            redeemPrice = ((currentPrice.mul(FULL_ALLOC))\r\n                .sub(\r\n                    fee.mul(\r\n                         currentPrice.sub(userAvgPrice)\r\n                    )\r\n                )).div(FULL_ALLOC);\r\n        }\r\n\r\n        return redeemPrice;\r\n    }\r\n\r\n    /**\r\n     * Get the plug balance of a token.\r\n     */\r\n    function _getPlugBalance(address _token) internal view returns(uint256) {\r\n        return IERC20(_token).balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * Get the plug balance of token want into idle strategy.\r\n     */\r\n    function _getTokenWantInS() internal view returns (uint256) {\r\n        uint256 tokenPrice = _getRedeemPrice();\r\n        return tokenStrategyAmounts[address(this)].mul(tokenPrice).div(ONE_18);\r\n    }\r\n\r\n    /**\r\n     * Get the plug total amount between the ineer and the amount store into idle.\r\n     */\r\n    function plugTotalAmount() public view returns(uint256) {\r\n        uint256 tokenWantInStrategy = _getTokenWantInS();\r\n        return iTokenWant.balanceOf(address(this)).add(tokenWantInStrategy);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountMinted\",\"type\":\"uint256\"}],\"name\":\"PlugCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardForUSer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardForPlug\",\"type\":\"uint256\"}],\"name\":\"PlugDischarged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountEarned\",\"type\":\"uint256\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SentRewardToOutOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SentRewardToOutTwo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"chargePlug\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentLevelCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plugPercentage\",\"type\":\"uint256\"}],\"name\":\"dischargePlug\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebalanceTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plugHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plugLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plugLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plugTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancePlug\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardOutOne\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardOutTwo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"safePlugExitStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"safeTokenApprore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCap\",\"type\":\"uint256\"}],\"name\":\"setCurrentLevelCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_plugHelper\",\"type\":\"address\"}],\"name\":\"setPlugHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLimit\",\"type\":\"uint256\"}],\"name\":\"setPlugUsersLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPeriod\",\"type\":\"uint256\"}],\"name\":\"setRebalancePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"}],\"name\":\"setRewardOutOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"}],\"name\":\"setRewardOutTwo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenReward\",\"type\":\"address\"}],\"name\":\"setTokenReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenReward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenStrategyAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenWantAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenWantDonated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferToHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardOut\",\"type\":\"address\"}],\"name\":\"transferToRewardOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextLevelCap\",\"type\":\"uint256\"}],\"name\":\"upgradePlug\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usersTokenWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"PLUGIDLEV1","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://080605435435b61a93fe8f64d7c472bebb138ada7fb1b6748a2922a8699933b1"}]}