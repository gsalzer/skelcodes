{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"details\": {\r\n        \"constantOptimizer\": true,\r\n        \"cse\": true,\r\n        \"deduplicate\": true,\r\n        \"jumpdestRemover\": true,\r\n        \"orderLiterals\": false,\r\n        \"peephole\": true,\r\n        \"yul\": false\r\n      },\r\n      \"runs\": 256\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@NutBerry/NutBerry/src/tsm/contracts/NutBerryEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.7.6;\\n\\n/// @notice Contains event declarations related to NutBerry.\\n// Audit-1: ok\\ninterface NutBerryEvents {\\n  event BlockBeacon();\\n  event CustomBlockBeacon();\\n  event NewSolution();\\n  event RollupUpgrade(address target);\\n}\\n\"\r\n    },\r\n    \"src/rollup/contracts/RollupProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.7.6;\\n\\nimport '@NutBerry/NutBerry/src/tsm/contracts/NutBerryEvents.sol';\\n\\n/// @notice Callforwarding proxy\\n// Audit-1: ok\\ncontract RollupProxy is NutBerryEvents {\\n  constructor (address initialImplementation) {\\n    assembly {\\n      // stores the initial contract address to forward calls\\n      sstore(not(returndatasize()), initialImplementation)\\n      // created at block - a hint for clients to know from which block to start syncing events\\n      sstore(0x319a610c8254af7ecb1f669fb64fa36285b80cad26faf7087184ce1dceb114df, number())\\n    }\\n    // emit upgrade event\\n    emit NutBerryEvents.RollupUpgrade(initialImplementation);\\n  }\\n\\n  fallback () external payable {\\n    assembly {\\n      // copy all calldata into memory - returndatasize() is a substitute for `0`\\n      calldatacopy(returndatasize(), returndatasize(), calldatasize())\\n      // keep a copy to be used after the call\\n      let zero := returndatasize()\\n      // call contract address loaded from storage slot with key `uint256(-1)`\\n      let success := delegatecall(\\n        gas(),\\n        sload(not(returndatasize())),\\n        returndatasize(),\\n        calldatasize(),\\n        returndatasize(),\\n        returndatasize()\\n      )\\n\\n      // copy all return data into memory\\n      returndatacopy(zero, zero, returndatasize())\\n\\n      // if the delegatecall succeeded, then return\\n      if success {\\n        return(zero, returndatasize())\\n      }\\n      // else revert\\n      revert(zero, returndatasize())\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialImplementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BlockBeacon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CustomBlockBeacon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NewSolution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"RollupUpgrade\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"RollupProxy","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"256","ConstructorArguments":"0000000000000000000000001f2878d778f7619aa786ebbae6cf66c56632399c","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"none"}]}