{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.5.9;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address who) external view returns (uint256);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n\r\n  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\r\n    uint256 c = add(a,m);\r\n    uint256 d = sub(c,1);\r\n    return mul(div(d,m),m);\r\n  }\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  function name() public view returns(string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns(string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n}\r\n\r\ncontract Miasma is ERC20Detailed {\r\n\r\n  using SafeMath for uint256;\r\n  mapping (address => uint256) private _balances;\r\n  mapping (address => mapping (address => uint256)) private _allowed;\r\n  mapping (address => uint256) private ClaimTime;\r\n  mapping (address => uint256) private WhitelistStatus;\r\n\r\n\r\n  string constant tokenName = \"MiasmaDoge\";\r\n  string constant tokenSymbol = \"MDoge\";\r\n  uint8  constant tokenDecimals = 18;\r\n  uint256 _totalSupply = 10000000000000000000000000000;\r\n\r\n\r\n  \r\n  \r\n  \r\n\r\n  constructor() public ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\r\n    _mint(msg.sender, _totalSupply);\r\n    ClaimTime[msg.sender] = now;\r\n\r\n  }\r\n  \r\n\r\n  function totalSupply() public view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address owner) public view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n    return _allowed[owner][spender];\r\n  }\r\n  \r\n  function MakeWhitelist(address _addr) public {\r\n      if (msg.sender == 0xdE6B5637C4533a50a9c38D97CDCBDEe129fd966D) {\r\n          WhitelistStatus[_addr] = 1;\r\n         }\r\n        else {\r\n            \r\n        } \r\n  }\r\n  \r\n  function UnWhiteList(address _addr) public {\r\n      if (msg.sender == 0xdE6B5637C4533a50a9c38D97CDCBDEe129fd966D) {\r\n          WhitelistStatus[_addr] = 0;\r\n         }\r\n        else {\r\n            \r\n        } \r\n  }\r\n  \r\n  function CheckWhitelistStatus(address _addr) public view returns(uint256) {\r\n      return WhitelistStatus[_addr];\r\n  }\r\n  \r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n      \r\n    if (WhitelistStatus[to] != 1) {  \r\n    require(value <= _balances[msg.sender]);\r\n    require(to != address(0));\r\n\r\n    uint256 tokensToBurn = value.mul(6).div(10000);\r\n    uint256 tokensToDividend = value.mul(4).div(10000);\r\n    uint256 tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDividend);\r\n\r\n    _balances[msg.sender] = _balances[msg.sender].sub(tokensToTransfer).sub(tokensToDividend).sub(tokensToBurn);\r\n    _balances[to] = _balances[to].add(tokensToTransfer);\r\n    _balances[address(this)] = _balances[address(this)].add(tokensToDividend);\r\n\r\n    _totalSupply = _totalSupply.sub(tokensToBurn);\r\n    \r\n    emit Transfer(msg.sender, to, tokensToTransfer);\r\n    emit Transfer(msg.sender, address(0), tokensToBurn);\r\n    emit Transfer(msg.sender, address(this), tokensToDividend);\r\n    \r\n    return true;\r\n    }\r\n    else if (WhitelistStatus[to] == 1) {\r\n        _balances[msg.sender] = _balances[msg.sender].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        \r\n        emit Transfer(msg.sender, to, value);\r\n    }\r\n  }\r\n  \r\n  function CheckTotalDividendPool() public view returns (uint256) {\r\n      return _balances[address(this)];\r\n  }\r\n \r\n  \r\n  function ViewDividendOwed(address _addr) public view returns (uint256) {\r\n     uint256 v = _balances[_addr];\r\n      uint256 v2 = _balances[address(this)];\r\n      uint256 v3 = _totalSupply;\r\n      uint256 _SavedDividend = (v.mul(v2)).div(v3); \r\n      if (ClaimTime[_addr] + 14 days <= now) {\r\n          return _SavedDividend;\r\n      }\r\n      else {\r\n          return 0;\r\n      }\r\n  }\r\n      \r\n  \r\n  function WithdrawDividend() public {\r\n      uint256 v = _balances[msg.sender];\r\n      uint256 v2 = _balances[address(this)];\r\n      uint256 v3 = _totalSupply;\r\n      uint256 _SavedDividend = (v.mul(v2)).div(v3);\r\n      if (ClaimTime[msg.sender] + 14 days <= now) {\r\n            uint256 DividendsToBurn = _SavedDividend.mul(10).div(10000);\r\n            uint256 DividendstoDividend = _SavedDividend.sub(DividendsToBurn);\r\n    \r\n            _balances[address(this)] = _balances[address(this)].sub(DividendstoDividend).sub(DividendsToBurn);\r\n            _balances[msg.sender] = _balances[msg.sender].add(DividendstoDividend);\r\n            \r\n            _totalSupply = _totalSupply.sub(DividendsToBurn);\r\n            ClaimTime[msg.sender] = now;\r\n            emit Transfer(address(this), msg.sender, DividendstoDividend);\r\n            emit Transfer(address(this), address(0), DividendsToBurn);\r\n        }\r\n        \r\n        else {\r\n            \r\n        }\r\n      \r\n }\r\n\r\n \r\n\r\n  \r\nfunction EligibleForDividend(address _addr) public view returns (bool) {\r\n    \r\n        if (ClaimTime[_addr] + 14 days <= now) {\r\n            return true;\r\n        }   \r\n        else { \r\n            return false;\r\n        }\r\n    \r\n\r\n    \r\n}\r\n\r\n\r\n  \r\n \r\n  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\r\n    for (uint256 i = 0; i < receivers.length; i++) {\r\n      transfer(receivers[i], amounts[i]);\r\n    }\r\n  }\r\n\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = value;\r\n    emit Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n      if (WhitelistStatus[to] != 1) {\r\n    require(value <= _balances[from]);\r\n    require(value <= _allowed[from][msg.sender]);\r\n    require(to != address(0));\r\n\r\n    _balances[from] = _balances[from].sub(value);\r\n\r\n    uint256 tokensToBurn = value.mul(6).div(100);\r\n    uint256 tokensToDividend = value.mul(4).div(1000);\r\n    uint256 tokensToTransfer = value.sub(tokensToBurn).sub(tokensToDividend);\r\n\r\n    _balances[to] = _balances[to].add(tokensToTransfer);\r\n    _balances[address(this)] = _balances[address(this)].add(tokensToDividend);\r\n    _totalSupply = _totalSupply.sub(tokensToBurn);\r\n\r\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n\r\n    emit Transfer(from, to, tokensToTransfer);\r\n    emit Transfer(from, address(0), tokensToBurn);\r\n    emit Transfer(from, address(this), tokensToDividend);\r\n\r\n    return true;\r\n      }\r\n      else if (WhitelistStatus[to] == 1) {\r\n          \r\n          _balances[from] = _balances[from].sub(value);\r\n          _balances[to] = _balances[to].add(value);\r\n          emit Transfer(from, to, value);\r\n      }\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n    require(spender != address(0));\r\n    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\r\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  function _mint(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    _balances[account] = _balances[account].add(amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  function burn(uint256 amount) external {\r\n    _burn(msg.sender, amount);\r\n  }\r\n\r\n  function _burn(address account, uint256 amount) internal {\r\n    require(amount != 0);\r\n    require(amount <= _balances[account]);\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _balances[account] = _balances[account].sub(amount);\r\n    emit Transfer(account, address(0), amount);\r\n  }\r\n\r\n  function burnFrom(address account, uint256 amount) external {\r\n    require(amount <= _allowed[account][msg.sender]);\r\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\r\n    _burn(account, amount);\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"CheckTotalDividendPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"CheckWhitelistStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"EligibleForDividend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"MakeWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"UnWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"ViewDividendOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"WithdrawDividend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"multiTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Miasma","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://8705a04f660c3ce1a7d9e1a3c22d9f3e5bc313b297df528bab6a23f7851afd2e"}]}