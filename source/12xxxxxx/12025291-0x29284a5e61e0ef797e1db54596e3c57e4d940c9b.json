{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/GSN/Context.sol --\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <=0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Pausable.sol\r\n\r\npragma solidity >=0.6.0 <=0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\npragma solidity >=0.6.0 <=0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\n abstract contract Ownable is Pausable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor(address ownerAddress) {\r\n        _owner = ownerAddress;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    \r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnershipNew(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint256 c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) return 0;\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/UnifarmFixed.sol\r\n\r\npragma solidity 0.7.4;\r\n\r\nabstract contract OwnableV1 {\r\n    function transferOwnership(address newOwner) external virtual;\r\n    function owner() external virtual returns (address);\r\n}\r\n\r\nabstract contract admin1 is OwnableV1 {\r\n   \r\n    \r\n    mapping(address => address[]) public tokensSequenceList;\r\n    mapping(address => mapping(address => uint256)) public tokenDailyDistribution;\r\n    mapping(address => mapping(address => bool)) public tokenBlockedStatus;\r\n    uint256[] public intervalDays; // = [1, 8, 15, 22, 29, 36];\r\n    uint256 public stakeDuration;\r\n    address[] public tokens;\r\n    \r\n    function safeWithdraw(address tokenAddress, uint256 amount) external virtual;\r\n}\r\n\r\nabstract contract UnifarmV11 is admin1 {\r\n    // Stores Stake Details\r\n    struct stakeInfo {\r\n        address user;\r\n        bool[] isActive;\r\n        address[] referrer;\r\n        address[] tokenAddress;\r\n        uint256[] stakeId;\r\n        uint256[] stakedAmount;\r\n        uint256[] startTime;\r\n    }\r\n\r\n    // Mapping\r\n    mapping(address => stakeInfo) public stakingDetails;\r\n    mapping(address => mapping(address => uint256)) public userTotalStaking;\r\n    mapping(address => uint256) public totalStaking;\r\n    uint256 public DAYS;\r\n\r\n    function viewStakingDetails(address _user) external virtual  view returns ( address[] memory, bool[] memory,\r\n            uint256[] memory, uint256[] memory, uint256[] memory);\r\n}\r\n\r\ncontract unifarmV1Fixed is Ownable {\r\n    \r\n    UnifarmV11 public UniV1;\r\n    \r\n    using SafeMath for uint256;\r\n    uint256 intervalLength = 6;\r\n    \r\n    mapping(address => uint256) public totalUnstaking;\r\n    mapping(address => mapping(uint256 => bool)) public unstakeStatus;\r\n    \r\n    constructor(address V1Address) Ownable(msg.sender)  {\r\n        UniV1 = UnifarmV11(V1Address);\r\n    }\r\n    \r\n    event Claim(address indexed userAddress, address indexed stakedTokenAddress, address indexed tokenAddress,uint256 claimRewards,uint256 Time);\r\n    event UnStake(address indexed userAddress, address indexed unStakedtokenAddress, uint256 unStakedAmount, uint256 Time);\r\n    \r\n    \r\n    function init(address[] memory tokenAddress) external onlyOwner returns(bool) {\r\n        for(uint i =0; i< tokenAddress.length; i++) {\r\n            transferFromContractA(tokenAddress[i]);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function transferFromContractA(address tokenAddress) internal {\r\n        uint bal = IERC20(tokenAddress).balanceOf(address(UniV1));\r\n        \r\n        if(bal > 0)\r\n            UniV1.safeWithdraw(tokenAddress, bal);\r\n    }\r\n    \r\n    /**\r\n     * @notice Get rewards for one day\r\n     * @param stakedAmount Stake amount of the user\r\n     * @param stakedToken Staked token address of the user\r\n     * @param rewardToken Reward token address\r\n     * @param totalStake Reward token address\r\n     * @return reward One dayh reward for the user\r\n     */\r\n    function getOneDayReward(uint256 stakedAmount,address stakedToken,address rewardToken,uint256 totalStake) public view returns (uint256 reward) {\r\n       \r\n            reward = (stakedAmount.mul(UniV1.tokenDailyDistribution(stakedToken,rewardToken))).div(totalStake);\r\n        \r\n    }\r\n \r\n    /**\r\n     * @notice Get rewards for one day\r\n     * @param stakedToken Stake amount of the user\r\n     * @param tokenAddress Reward token address\r\n     * @param amount Amount to be transferred as reward\r\n     */\r\n    function sendToken(address stakedToken,address tokenAddress,uint256 amount) internal {\r\n        // Checks\r\n        if (tokenAddress != address(0)) {\r\n            require(\r\n                IERC20(tokenAddress).balanceOf(address(this)) >= amount,\r\n                \"SEND : Insufficient Balance\"\r\n            );\r\n            // Transfer of rewards\r\n            require(IERC20(tokenAddress).transfer(msg.sender, amount), \r\n                    \"Transfer failed\");\r\n\r\n             // Emit state changes\r\n            emit Claim(\r\n                msg.sender,\r\n                stakedToken,\r\n                tokenAddress,\r\n                amount,\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Unstake and claim rewards\r\n     * @param stakeId Stake ID of the user\r\n     */\r\n    function unStake(uint256 stakeId) external  {\r\n        \r\n        (address[] memory tokenAddress,bool[] memory activeStatus, ,\r\n            uint256[] memory stakedAmount,uint256[] memory startTime) = (UniV1.viewStakingDetails(msg.sender));\r\n            \r\n       \r\n       \r\n        // Checks\r\n        require(\r\n            unstakeStatus[msg.sender][stakeId] == false && activeStatus[stakeId] == true,\r\n            \"CLAIM : Insufficient Staked Amount\"\r\n        );\r\n        \r\n        transferFromContractA(tokenAddress[stakeId]);\r\n\r\n        // State updation\r\n        uint totalStaking1 = UniV1.totalStaking(tokenAddress[stakeId]).sub(totalUnstaking[tokenAddress[stakeId]]);\r\n        totalUnstaking[tokenAddress[stakeId]] = totalUnstaking[tokenAddress[stakeId]].add(stakedAmount[stakeId]);\r\n        unstakeStatus[msg.sender][stakeId] = true;\r\n        \r\n        \r\n\r\n        // Balance check\r\n        require(\r\n            IERC20(tokenAddress[stakeId]).balanceOf(\r\n                address(this)\r\n            ) >= stakedAmount[stakeId],\r\n            \"UNSTAKE : Insufficient Balance\"\r\n        );\r\n\r\n        // Transfer staked token back to user\r\n            IERC20(tokenAddress[stakeId]).transfer(msg.sender, stakedAmount[stakeId]);\r\n\r\n        // Claim pending rewards\r\n            claimRewards(startTime[stakeId], stakedAmount[stakeId], tokenAddress[stakeId], totalStaking1);\r\n\r\n        // Emit state changes\r\n        emit UnStake(\r\n            msg.sender,\r\n            tokenAddress[stakeId],\r\n            stakedAmount[stakeId],\r\n            block.timestamp\r\n        );\r\n        \r\n    }\r\n    \r\n     /**\r\n     * @notice Claim accumulated rewards\r\n     * @param stakedAmount Staked amount of the user\r\n     */\r\n    function claimRewards(uint256 stakeTime, uint256 stakedAmount, address stakedToken, uint256 totalStake) internal {\r\n        // Local variables\r\n        uint256 interval;\r\n\r\n        interval = stakeTime.add(UniV1.stakeDuration());\r\n        \r\n        // Interval calculation\r\n        if (interval > block.timestamp) {\r\n            uint256 endOfProfit = block.timestamp;\r\n            interval = endOfProfit.sub(stakeTime);\r\n        } else {\r\n            uint256 endOfProfit = stakeTime.add(UniV1.stakeDuration());\r\n            interval = endOfProfit.sub(stakeTime);\r\n        }\r\n\r\n        // Reward calculation\r\n        if (interval >= UniV1.DAYS())\r\n            _rewardCalculation(stakedAmount, interval, stakedToken, totalStake);\r\n    }\r\n    \r\n    function _rewardCalculation(uint256 stakedAmount,uint256 interval, address stakedToken,uint256 totalStake) internal {\r\n        uint256 rewardsEarned;\r\n        uint256 noOfDays;\r\n        \r\n        noOfDays = interval.div(UniV1.DAYS());\r\n        rewardsEarned = noOfDays.mul(\r\n            getOneDayReward(\r\n                stakedAmount,\r\n                stakedToken,\r\n                stakedToken,\r\n                totalStake\r\n            )\r\n        );\r\n\r\n\r\n        //  Rewards Send\r\n        sendToken(\r\n            stakedToken,\r\n            stakedToken,\r\n            rewardsEarned\r\n        );\r\n\r\n        uint8 i = 1;\r\n        while (i < intervalLength) { \r\n            \r\n            if (noOfDays >= UniV1.intervalDays(i)) {\r\n                uint256 balDays = noOfDays.sub((UniV1.intervalDays(i).sub(1)));\r\n\r\n                address rewardToken = UniV1.tokensSequenceList(stakedToken,i);\r\n                \r\n                transferFromContractA(rewardToken);\r\n\r\n\r\n                if ( rewardToken != stakedToken \r\n                        && UniV1.tokenBlockedStatus(stakedToken,rewardToken) ==  false) {\r\n                    rewardsEarned = balDays.mul(\r\n                        getOneDayReward(\r\n                            stakedAmount,\r\n                            stakedToken,\r\n                            rewardToken,\r\n                            totalStake\r\n                        )\r\n                    );\r\n                    \r\n\r\n                    //  Rewards Send\r\n                    sendToken(\r\n                        stakedToken,\r\n                        rewardToken,\r\n                        rewardsEarned\r\n                    );\r\n                }\r\n                i = i + 1;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function updateIntervalLength(uint256 ilength) external onlyOwner returns(bool) {\r\n        intervalLength = ilength;\r\n        return true;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public override onlyOwner {\r\n        UniV1.transferOwnership(newOwner);\r\n    }\r\n    \r\n    function safeWithdraw(address tokenAddress, uint256 amount) public onlyOwner {\r\n         \r\n        require(\r\n            IERC20(tokenAddress).balanceOf(address(this)) >= amount,\r\n            \"Insufficient Balance\"\r\n        );\r\n        require(\r\n            IERC20(tokenAddress).transfer(owner(), amount) == true,\r\n            \"Transfer failed\");\r\n    }\r\n    \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"V1Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakedTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"unStakedtokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unStakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"Time\",\"type\":\"uint256\"}],\"name\":\"UnStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UniV1\",\"outputs\":[{\"internalType\":\"contract UnifarmV11\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalStake\",\"type\":\"uint256\"}],\"name\":\"getOneDayReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddress\",\"type\":\"address[]\"}],\"name\":\"init\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalUnstaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipNew\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"unStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unstakeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ilength\",\"type\":\"uint256\"}],\"name\":\"updateIntervalLength\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"unifarmV1Fixed","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000089bcafc0994f8e38051ceab57c0fe14ec3b64fe0","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://08945abd557de5f58686e061b547cc898b877f9de7bf9516d6a1fa8569161ccb"}]}