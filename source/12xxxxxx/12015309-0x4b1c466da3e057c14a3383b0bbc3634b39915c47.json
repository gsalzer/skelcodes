{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.1;\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract Album_Core {\r\n  string public artist;\r\n  string public uri;\r\n  address public owner_address;\r\n  uint16 public release_count;\r\n  uint16 public product_count;\r\n\r\n  constructor(string memory _artist, string memory _uri) {\r\n    owner_address = msg.sender;\r\n    artist = _artist;\r\n    uri = _uri;\r\n  }\r\n\r\n  event Release_Created(uint16 indexed release_id, uint8 indexed release_type, string name, string root_uri);\r\n  event Release_Limited(uint16 indexed release_id);\r\n  event Product_Created(uint16 indexed product_id, string name, string metadata_uri);\r\n  event Transfer(address indexed from, address indexed to, uint16[] indicies, uint32[] counts);\r\n  event Product_Listed(uint16 indexed product_id, address indexed currency, uint256 price);\r\n  event Product_Delisted(uint16 indexed product_id);\r\n  event Product_Purchased(uint16 indexed product_id, address indexed buyer);\r\n  event Approval(address indexed owner, address indexed target, bool approved);\r\n\r\n  struct release {\r\n      uint32 total_created;\r\n      bool limited;\r\n      uint8 release_type;\r\n  }\r\n\r\n  struct product {\r\n    uint16[] indicies;\r\n    uint32[] counts;\r\n    uint16 available_for_sale;\r\n    bool listed;\r\n    address currency;\r\n    uint256 price;\r\n    address profit_owner;\r\n  }\r\n\r\n  mapping(uint16 => release) public releases;\r\n  mapping(address=>mapping(address => bool)) public approvals;\r\n  mapping(uint16 => product) public products;\r\n  mapping(address => mapping(uint16 => uint32)) public balances;\r\n\r\n  function get_product_release_indicies(uint16 product_id) public view returns(uint16[] memory){\r\n    return products[product_id].indicies;\r\n  }\r\n  function get_product_release_counts(uint16 product_id) public view returns(uint32[] memory){\r\n    return products[product_id].counts;\r\n  }\r\n\r\n  function create_release(string calldata name, string calldata root_uri, uint8 release_type) public only_owner {\r\n    require(release_count + 1 > release_count, \"no more releases allowed, launch new contract\");\r\n    releases[release_count] = release(0, false, release_type);\r\n    emit Release_Created(release_count, release_type, name, root_uri);\r\n    release_count++;\r\n  }\r\n\r\n  function create_product(string calldata name, string calldata metadata_uri, uint16[] memory indicies, uint32[] memory counts, uint16 max_copies, address profit_owner) public only_owner {\r\n    require(product_count + 1 > product_count, \"no more products allowed, launch new contract\");\r\n    require(indicies.length == counts.length, \"array mismatch\");\r\n\r\n    //up to 255 item types in 1 product\r\n    for(uint8 item_idx = 0; item_idx < counts.length; item_idx++ ){\r\n      require(indicies[item_idx] < release_count, \"cannot include unreleased items\");\r\n      require(!releases[indicies[item_idx]].limited, \"cannot include limited release\");\r\n      require(releases[indicies[item_idx]].total_created + counts[item_idx] > releases[indicies[item_idx]].total_created, \"too many of specific release\");\r\n      releases[indicies[item_idx]].total_created = releases[indicies[item_idx]].total_created + (counts[item_idx] * max_copies);\r\n\r\n    }\r\n    products[product_count] = product(indicies, counts, max_copies, false, address(0), 0, profit_owner );\r\n    emit Product_Created(product_count, name, metadata_uri);\r\n    product_count++;\r\n  }\r\n  function limit_release(uint16 release_id) public only_owner{\r\n    require(release_id < release_count);\r\n    releases[release_id].limited = true;\r\n    emit Release_Limited(release_id);\r\n  }\r\n  function list_product(uint16 product_id, address currency, uint256 price) public only_owner {\r\n    products[product_id].listed = true;\r\n    products[product_id].currency = currency;\r\n    products[product_id].price = price;\r\n    emit Product_Listed(product_id, currency, price);\r\n  }\r\n\r\n  function delist_product(uint16 product_id) public only_owner {\r\n    products[product_id].listed = false;\r\n    emit Product_Delisted(product_id);\r\n  }\r\n\r\n  function change_uri(string memory new_uri) public only_owner {\r\n    uri = new_uri;\r\n  }\r\n  function change_owner(address new_address) public only_owner {\r\n    owner_address = new_address;\r\n  }\r\n\r\n  function buy_product(uint16 product_id, address currency, uint256 price) public {\r\n    require(products[product_id].listed);\r\n    require(products[product_id].available_for_sale > 0);\r\n    require(products[product_id].currency == currency);\r\n    require(products[product_id].price == price);\r\n    require(IERC20(currency).transferFrom(msg.sender, products[product_id].profit_owner, price));\r\n    for(uint8 item_idx = 0; item_idx < products[product_id].counts.length; item_idx++ ){\r\n        balances[msg.sender][products[product_id].indicies[item_idx]] += products[product_id].counts[item_idx];\r\n    }\r\n    products[product_id].available_for_sale--;\r\n    emit Product_Purchased(product_id, msg.sender);\r\n    //this is when it's actually popped into being\r\n    emit Transfer(address(0), msg.sender, products[product_id].indicies, products[product_id].counts);\r\n  }\r\n\r\n  function set_approve_all(address target, bool approve) public {\r\n    approvals[msg.sender][target] = approve;\r\n    emit Approval(msg.sender, target, approve);\r\n  }\r\n\r\n  function transfer_from(uint16[] memory indicies, uint32[] memory counts, address from, address target) public {\r\n    require(indicies.length == counts.length, \"array mismatch\");\r\n    require(approvals[msg.sender][from] || msg.sender == from, \"not approved\");\r\n    for(uint8 item_idx = 0; item_idx < counts.length; item_idx++ ){\r\n        require(balances[from][indicies[item_idx]] - counts[item_idx] < balances[from][indicies[item_idx]]);\r\n        balances[from][indicies[item_idx]] -= counts[item_idx];\r\n        balances[target][indicies[item_idx]] += counts[item_idx];\r\n    }\r\n    emit Transfer(from, target, indicies, counts);\r\n  }\r\n\r\n  modifier only_owner {\r\n     require(msg.sender == owner_address, \"only owner\");\r\n     _;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_artist\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"product_id\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata_uri\",\"type\":\"string\"}],\"name\":\"Product_Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"product_id\",\"type\":\"uint16\"}],\"name\":\"Product_Delisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"product_id\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Product_Listed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"product_id\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"Product_Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"release_id\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"release_type\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"root_uri\",\"type\":\"string\"}],\"name\":\"Release_Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"release_id\",\"type\":\"uint16\"}],\"name\":\"Release_Limited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"indicies\",\"type\":\"uint16[]\"},{\"indexed\":false,\"internalType\":\"uint32[]\",\"name\":\"counts\",\"type\":\"uint32[]\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artist\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"product_id\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"buy_product\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_address\",\"type\":\"address\"}],\"name\":\"change_owner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"new_uri\",\"type\":\"string\"}],\"name\":\"change_uri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata_uri\",\"type\":\"string\"},{\"internalType\":\"uint16[]\",\"name\":\"indicies\",\"type\":\"uint16[]\"},{\"internalType\":\"uint32[]\",\"name\":\"counts\",\"type\":\"uint32[]\"},{\"internalType\":\"uint16\",\"name\":\"max_copies\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"profit_owner\",\"type\":\"address\"}],\"name\":\"create_product\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"root_uri\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"release_type\",\"type\":\"uint8\"}],\"name\":\"create_release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"product_id\",\"type\":\"uint16\"}],\"name\":\"delist_product\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"product_id\",\"type\":\"uint16\"}],\"name\":\"get_product_release_counts\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"product_id\",\"type\":\"uint16\"}],\"name\":\"get_product_release_indicies\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"release_id\",\"type\":\"uint16\"}],\"name\":\"limit_release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"product_id\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"list_product\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"product_count\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"products\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"available_for_sale\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"listed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"profit_owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release_count\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"releases\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"total_created\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"limited\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"release_type\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approve\",\"type\":\"bool\"}],\"name\":\"set_approve_all\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"indicies\",\"type\":\"uint16[]\"},{\"internalType\":\"uint32[]\",\"name\":\"counts\",\"type\":\"uint32[]\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"transfer_from\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Album_Core","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000014536163726966696369616c2050616e63616b65730000000000000000000000000000000000000000000000000000000000000000000000000000000000000017736163726966696369616c70616e63616b65732e636f6d000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://16f9b4d8f64b04d946463eb7d05ea1ee2caef30a5957e7e7fae61facbde08f89"}]}