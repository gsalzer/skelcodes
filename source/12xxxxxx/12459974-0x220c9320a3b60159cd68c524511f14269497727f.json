{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/valuators/OnlyTokenValuator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\n// Contracts\\nimport \\\"../base/Base.sol\\\";\\n\\n// Interfaces\\nimport \\\"./ITokenValuator.sol\\\";\\n\\ncontract OnlyTokenValuator is ITokenValuator, Base {\\n    mapping(address => bool) public asFungibleToken;\\n\\n    mapping(address => uint256) public valuations;\\n\\n    constructor(address settingsAddress) public Base(settingsAddress) {}\\n\\n    function setAsFungibleToken(address[] calldata tokens, bool asFungible)\\n        external\\n        onlyConfigurator(msg.sender)\\n    {\\n        require(tokens.length > 0, \\\"TOKENS_REQUIRED\\\");\\n        for (uint256 indexAt = 0; indexAt < tokens.length; indexAt++) {\\n            asFungibleToken[tokens[indexAt]] = asFungible;\\n        }\\n        emit TokensAsFungibleSet(tokens, asFungible);\\n    }\\n\\n    function setValuations(address[] calldata tokens, uint256 valuation)\\n        external\\n        onlyConfigurator(msg.sender)\\n    {\\n        require(tokens.length > 0, \\\"TOKENS_REQUIRED\\\");\\n        for (uint256 indexAt = 0; indexAt < tokens.length; indexAt++) {\\n            valuations[tokens[indexAt]] = valuation;\\n        }\\n        emit NewValuationsSet(tokens, valuation);\\n    }\\n\\n    /* View Functions */\\n\\n    function isConfigured(address token) external view override returns (bool) {\\n        return _isConfigured(token);\\n    }\\n\\n    function requireIsConfigured(address token) external view override {\\n        require(_isConfigured(token), \\\"TOKEN_ISNT_CONFIGURED\\\");\\n    }\\n\\n    function isFungibleToken(address token) external view returns (bool) {\\n        return asFungibleToken[token];\\n    }\\n\\n    function hasValuation(\\n        address token,\\n        address,\\n        uint256,\\n        uint256\\n    ) external view override returns (bool) {\\n        return valuations[token] > 0;\\n    }\\n\\n    function requireHasValuation(\\n        address token,\\n        address,\\n        uint256,\\n        uint256\\n    ) external view override {\\n        require(valuations[token] > 0, \\\"TOKEN_HASNT_VALUATION\\\");\\n    }\\n\\n    function valuate(\\n        address token,\\n        address,\\n        uint256,\\n        uint256 amountOrId\\n    ) external view override returns (uint256) {\\n        return asFungibleToken[token] ? amountOrId : valuations[token];\\n    }\\n\\n    /** Internal Functions */\\n\\n    function _isConfigured(address token) internal view returns (bool) {\\n        return asFungibleToken[token] || valuations[token] > 0;\\n    }\\n\\n    /* Events */\\n\\n    event NewValuationsSet(address[] tokens, uint256 valuation);\\n\\n    event TokensAsFungibleSet(address[] tokens, bool value);\\n}\\n\"\r\n    },\r\n    \"contracts/base/Base.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\n// Contracts\\nimport \\\"../roles/RolesManagerConsts.sol\\\";\\nimport \\\"../settings/PlatformSettingsConsts.sol\\\";\\n\\n// Libraries\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n// Interfaces\\nimport \\\"../settings/IPlatformSettings.sol\\\";\\nimport \\\"../roles/IRolesManager.sol\\\";\\n\\nabstract contract Base {\\n    using Address for address;\\n\\n    /* Constant Variables */\\n\\n    /* State Variables */\\n\\n    address public settings;\\n\\n    /* Modifiers */\\n\\n    modifier whenPlatformIsPaused() {\\n        require(_settings().isPaused(), \\\"PLATFORM_ISNT_PAUSED\\\");\\n        _;\\n    }\\n\\n    modifier whenPlatformIsNotPaused() {\\n        require(!_settings().isPaused(), \\\"PLATFORM_IS_PAUSED\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwner(address account) {\\n        _requireHasRole(\\n            RolesManagerConsts(_rolesManager().consts()).OWNER_ROLE(),\\n            account,\\n            \\\"SENDER_ISNT_OWNER\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyMinter(address account) {\\n        _requireHasRole(\\n            RolesManagerConsts(_rolesManager().consts()).MINTER_ROLE(),\\n            account,\\n            \\\"SENDER_ISNT_MINTER\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyConfigurator(address account) {\\n        _requireHasRole(\\n            RolesManagerConsts(_rolesManager().consts()).CONFIGURATOR_ROLE(),\\n            account,\\n            \\\"SENDER_ISNT_CONFIGURATOR\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyPauser(address account) {\\n        _requireHasRole(\\n            RolesManagerConsts(_rolesManager().consts()).PAUSER_ROLE(),\\n            account,\\n            \\\"SENDER_ISNT_PAUSER\\\"\\n        );\\n        _;\\n    }\\n\\n    /* Constructor */\\n\\n    constructor(address settingsAddress) internal {\\n        require(settingsAddress.isContract(), \\\"SETTINGS_MUST_BE_CONTRACT\\\");\\n        settings = settingsAddress;\\n    }\\n\\n    function setSettings(address newSettings) external onlyOwner(msg.sender) {\\n        require(newSettings.isContract(), \\\"SETTINGS_MUST_BE_CONTRACT\\\");\\n        require(newSettings != settings, \\\"SETTINGS_MUST_BE_NEW\\\");\\n        address oldSettings = settings;\\n        settings = newSettings;\\n        emit PlatformSettingsUpdated(oldSettings, newSettings);\\n    }\\n\\n    /** Internal Functions */\\n\\n    function _settings() internal view returns (IPlatformSettings) {\\n        return IPlatformSettings(settings);\\n    }\\n\\n    function _settingsConsts() internal view returns (PlatformSettingsConsts) {\\n        return PlatformSettingsConsts(_settings().consts());\\n    }\\n\\n    function _rolesManager() internal view returns (IRolesManager) {\\n        return IRolesManager(IPlatformSettings(settings).rolesManager());\\n    }\\n\\n    function _requireHasRole(\\n        bytes32 role,\\n        address account,\\n        string memory message\\n    ) internal view {\\n        IRolesManager rolesManager = _rolesManager();\\n        rolesManager.requireHasRole(role, account, message);\\n    }\\n\\n    function _getPlatformSettingsValue(bytes32 name) internal view returns (uint256) {\\n        return _settings().getSettingValue(name);\\n    }\\n\\n    /** Events */\\n\\n    event PlatformSettingsUpdated(address indexed oldSettings, address indexed newSettings);\\n}\\n\"\r\n    },\r\n    \"contracts/valuators/ITokenValuator.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\ninterface ITokenValuator {\\n    function valuate(\\n        address token,\\n        address user,\\n        uint256 pid,\\n        uint256 amountOrId\\n    ) external view returns (uint256);\\n\\n    function isConfigured(address token) external view returns (bool);\\n\\n    function requireIsConfigured(address token) external view;\\n\\n    function hasValuation(\\n        address token,\\n        address user,\\n        uint256 pid,\\n        uint256 amountOrId\\n    ) external view returns (bool);\\n\\n    function requireHasValuation(\\n        address token,\\n        address user,\\n        uint256 pid,\\n        uint256 amountOrId\\n    ) external view;\\n}\\n\"\r\n    },\r\n    \"contracts/roles/RolesManagerConsts.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\ncontract RolesManagerConsts {\\n    /**\\n        @notice It is the AccessControl.DEFAULT_ADMIN_ROLE role.\\n     */\\n    bytes32 public constant OWNER_ROLE = keccak256(\\\"\\\");\\n\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    bytes32 public constant CONFIGURATOR_ROLE = keccak256(\\\"CONFIGURATOR_ROLE\\\");\\n}\\n\"\r\n    },\r\n    \"contracts/settings/PlatformSettingsConsts.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\ncontract PlatformSettingsConsts {\\n    bytes32 public constant FEE = \\\"Fee\\\";\\n\\n    bytes32 public constant BONUS_MULTIPLIER = \\\"BonusMultiplier\\\";\\n\\n    bytes32 public constant ALLOW_ONLY_EOA = \\\"AllowOnlyEOA\\\";\\n\\n    bytes32 public constant RATE_TOKEN_PAUSED = \\\"RATETokenPaused\\\";\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/settings/IPlatformSettings.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libs/SettingsLib.sol\\\";\\n\\ninterface IPlatformSettings {\\n    event PlatformPaused(address indexed pauser);\\n\\n    event PlatformUnpaused(address indexed unpauser);\\n\\n    event PlatformSettingCreated(\\n        bytes32 indexed name,\\n        address indexed creator,\\n        uint256 value,\\n        uint256 minValue,\\n        uint256 maxValue\\n    );\\n\\n    event PlatformSettingRemoved(bytes32 indexed name, address indexed remover, uint256 value);\\n\\n    event PlatformSettingUpdated(\\n        bytes32 indexed name,\\n        address indexed remover,\\n        uint256 oldValue,\\n        uint256 newValue\\n    );\\n\\n    function createSetting(\\n        bytes32 name,\\n        uint256 value,\\n        uint256 min,\\n        uint256 max\\n    ) external;\\n\\n    function removeSetting(bytes32 name) external;\\n\\n    function getSetting(bytes32 name) external view returns (SettingsLib.Setting memory);\\n\\n    function getSettingValue(bytes32 name) external view returns (uint256);\\n\\n    function hasSetting(bytes32 name) external view returns (bool);\\n\\n    function rolesManager() external view returns (address);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function requireIsPaused() external view;\\n\\n    function requireIsNotPaused() external view;\\n\\n    function consts() external view returns (address);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\"\r\n    },\r\n    \"contracts/roles/IRolesManager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\ninterface IRolesManager {\\n    event MaxMultiItemsUpdated(address indexed updater, uint8 oldValue, uint8 newValue);\\n\\n    function setMaxMultiItems(uint8 newMaxMultiItems) external;\\n\\n    function multiGrantRole(bytes32 role, address[] calldata accounts) external;\\n\\n    function multiRevokeRole(bytes32 role, address[] calldata accounts) external;\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    function consts() external view returns (address);\\n\\n    function maxMultiItems() external view returns (uint8);\\n\\n    function requireHasRole(bytes32 role, address account) external view;\\n\\n    function requireHasRole(\\n        bytes32 role,\\n        address account,\\n        string calldata message\\n    ) external view;\\n}\\n\"\r\n    },\r\n    \"contracts/libs/SettingsLib.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.6.12;\\n\\nlibrary SettingsLib {\\n    /**\\n        It defines a setting. It includes: value, min, and max values.\\n     */\\n    struct Setting {\\n        uint256 value;\\n        uint256 min;\\n        uint256 max;\\n        bool exists;\\n    }\\n\\n    /**\\n        @notice It creates a new setting given a name, min and max values.\\n        @param value initial value for the setting.\\n        @param min min value allowed for the setting.\\n        @param max max value allowed for the setting.\\n     */\\n    function create(\\n        Setting storage self,\\n        uint256 value,\\n        uint256 min,\\n        uint256 max\\n    ) internal {\\n        requireNotExists(self);\\n        require(value >= min, \\\"VALUE_MUST_BE_GT_MIN_VALUE\\\");\\n        require(value <= max, \\\"VALUE_MUST_BE_LT_MAX_VALUE\\\");\\n        self.value = value;\\n        self.min = min;\\n        self.max = max;\\n        self.exists = true;\\n    }\\n\\n    /**\\n        @notice Checks whether the current setting exists or not.\\n        @dev It throws a require error if the setting already exists.\\n        @param self the current setting.\\n     */\\n    function requireNotExists(Setting storage self) internal view {\\n        require(!self.exists, \\\"SETTING_ALREADY_EXISTS\\\");\\n    }\\n\\n    /**\\n        @notice Checks whether the current setting exists or not.\\n        @dev It throws a require error if the current setting doesn't exist.\\n        @param self the current setting.\\n     */\\n    function requireExists(Setting storage self) internal view {\\n        require(self.exists, \\\"SETTING_NOT_EXISTS\\\");\\n    }\\n\\n    /**\\n        @notice It updates a current setting.\\n        @dev It throws a require error if:\\n            - The new value is equal to the current value.\\n            - The new value is not lower than the max value.\\n            - The new value is not greater than the min value\\n        @param self the current setting.\\n        @param newValue the new value to set in the setting.\\n     */\\n    function update(Setting storage self, uint256 newValue) internal returns (uint256 oldValue) {\\n        requireExists(self);\\n        require(self.value != newValue, \\\"NEW_VALUE_REQUIRED\\\");\\n        require(newValue >= self.min, \\\"NEW_VALUE_MUST_BE_GT_MIN_VALUE\\\");\\n        require(newValue <= self.max, \\\"NEW_VALUE_MUST_BE_LT_MAX_VALUE\\\");\\n        oldValue = self.value;\\n        self.value = newValue;\\n    }\\n\\n    /**\\n        @notice It removes a current setting.\\n        @param self the current setting to remove.\\n     */\\n    function remove(Setting storage self) internal {\\n        requireExists(self);\\n        self.value = 0;\\n        self.min = 0;\\n        self.max = 0;\\n        self.exists = false;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"settingsAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valuation\",\"type\":\"uint256\"}],\"name\":\"NewValuationsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldSettings\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSettings\",\"type\":\"address\"}],\"name\":\"PlatformSettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"TokensAsFungibleSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"asFungibleToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasValuation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isConfigured\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isFungibleToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requireHasValuation\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"requireIsConfigured\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"asFungible\",\"type\":\"bool\"}],\"name\":\"setAsFungibleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSettings\",\"type\":\"address\"}],\"name\":\"setSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"valuation\",\"type\":\"uint256\"}],\"name\":\"setValuations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOrId\",\"type\":\"uint256\"}],\"name\":\"valuate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"valuations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OnlyTokenValuator","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000464ff37c2e09df6e7ded8438e2c74a07aaba1aa8","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}