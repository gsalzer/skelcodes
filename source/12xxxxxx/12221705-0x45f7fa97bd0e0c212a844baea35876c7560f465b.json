{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/dill/gauge-proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7; //^0.7.5;\\n\\nlibrary SafeMath {\\n    function add(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"add: +\\\");\\n\\n        return c;\\n    }\\n    function add(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n    function sub(uint a, uint b) internal pure returns (uint) {\\n        return sub(a, b, \\\"sub: -\\\");\\n    }\\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b <= a, errorMessage);\\n        uint c = a - b;\\n\\n        return c;\\n    }\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"mul: *\\\");\\n\\n        return c;\\n    }\\n    function mul(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n    function div(uint a, uint b) internal pure returns (uint) {\\n        return div(a, b, \\\"div: /\\\");\\n    }\\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\\n        require(b > 0, errorMessage);\\n        uint c = a / b;\\n\\n        return c;\\n    }\\n}\\n\\nlibrary Address {\\n    function isContract(address account) internal view returns (bool) {\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != 0x0 && codehash != accountHash);\\n    }\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call{value:amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n}\\n\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () public {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\ncontract Gauge is ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    \\n    IERC20 public constant PICKLE = IERC20(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\\n    IERC20 public constant DILL = IERC20(0xbBCf169eE191A1Ba7371F30A1C344bFC498b29Cf);\\n    address public constant TREASURY = address(0x066419EaEf5DE53cc5da0d8702b990c5bc7D1AB3);\\n    \\n    IERC20 public immutable TOKEN;\\n    address public immutable DISTRIBUTION;\\n    uint256 public constant DURATION = 7 days;\\n    \\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    \\n    modifier onlyDistribution() {\\n        require(msg.sender == DISTRIBUTION, \\\"Caller is not RewardsDistribution contract\\\");\\n        _;\\n    }\\n    \\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    uint256 private _totalSupply;\\n    uint public derivedSupply;\\n    mapping(address => uint256) private _balances;\\n    mapping(address => uint256) public derivedBalances;\\n    mapping(address => uint) private _base;\\n    \\n    constructor(address _token) public {\\n        TOKEN = IERC20(_token);\\n        DISTRIBUTION = msg.sender;\\n    }\\n    \\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(derivedSupply)\\n            );\\n    }\\n    \\n    function derivedBalance(address account) public view returns (uint) {\\n        uint _balance = _balances[account];\\n        uint _derived = _balance.mul(40).div(100);\\n        uint _adjusted = (_totalSupply.mul(DILL.balanceOf(account)).div(DILL.totalSupply())).mul(60).div(100);\\n        return Math.min(_derived.add(_adjusted), _balance);\\n    }\\n    \\n    function kick(address account) public {\\n        uint _derivedBalance = derivedBalances[account];\\n        derivedSupply = derivedSupply.sub(_derivedBalance);\\n        _derivedBalance = derivedBalance(account);\\n        derivedBalances[account] = _derivedBalance;\\n        derivedSupply = derivedSupply.add(_derivedBalance);\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return derivedBalances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);\\n    }\\n\\n    function getRewardForDuration() external view returns (uint256) {\\n        return rewardRate.mul(DURATION);\\n    }\\n    \\n    function depositAll() external {\\n        _deposit(TOKEN.balanceOf(msg.sender), msg.sender);\\n    }\\n    \\n    function deposit(uint256 amount) external {\\n        _deposit(amount, msg.sender);\\n    }\\n    \\n    function depositFor(uint256 amount, address account) external {\\n        _deposit(amount, account);\\n    }\\n    \\n    function _deposit(uint amount, address account) internal nonReentrant updateReward(account) {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Staked(account, amount);\\n        TOKEN.safeTransferFrom(account, address(this), amount);\\n    }\\n    \\n    function withdrawAll() external {\\n        _withdraw(_balances[msg.sender]);\\n    }\\n\\n    function withdraw(uint256 amount) external {\\n        _withdraw(amount);\\n    }\\n    \\n    function _withdraw(uint amount) internal nonReentrant updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n        TOKEN.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function getReward() public nonReentrant updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            PICKLE.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function exit() external {\\n       _withdraw(_balances[msg.sender]);\\n        getReward();\\n    }\\n    \\n    function notifyRewardAmount(uint256 reward) external onlyDistribution updateReward(address(0)) {\\n        PICKLE.safeTransferFrom(DISTRIBUTION, address(this), reward);\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward.div(DURATION);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = reward.add(leftover).div(DURATION);\\n        }\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint balance = PICKLE.balanceOf(address(this));\\n        require(rewardRate <= balance.div(DURATION), \\\"Provided reward too high\\\");\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(DURATION);\\n        emit RewardAdded(reward);\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n        if (account != address(0)) {\\n            kick(account);\\n        }\\n    }\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n}\\n\\ninterface MasterChef {\\n    function deposit(uint, uint) external;\\n    function withdraw(uint, uint) external;\\n    function userInfo(uint, address) external view returns (uint, uint);\\n}\\n\\ncontract ProtocolGovernance {\\n    /// @notice governance address for the governance contract\\n    address public governance;\\n    address public pendingGovernance;\\n    \\n    /**\\n     * @notice Allows governance to change governance (for future upgradability)\\n     * @param _governance new governance address to set\\n     */\\n    function setGovernance(address _governance) external {\\n        require(msg.sender == governance, \\\"setGovernance: !gov\\\");\\n        pendingGovernance = _governance;\\n    }\\n\\n    /**\\n     * @notice Allows pendingGovernance to accept their role as governance (protection pattern)\\n     */\\n    function acceptGovernance() external {\\n        require(msg.sender == pendingGovernance, \\\"acceptGovernance: !pendingGov\\\");\\n        governance = pendingGovernance;\\n    }\\n}\\n\\ncontract MasterDill {\\n    using SafeMath for uint;\\n\\n    /// @notice EIP-20 token name for this token\\n    string public constant name = \\\"Master DILL\\\";\\n\\n    /// @notice EIP-20 token symbol for this token\\n    string public constant symbol = \\\"mDILL\\\";\\n\\n    /// @notice EIP-20 token decimals for this token\\n    uint8 public constant decimals = 18;\\n\\n    /// @notice Total number of tokens in circulation\\n    uint public totalSupply = 1e18;\\n\\n    mapping (address => mapping (address => uint)) internal allowances;\\n    mapping (address => uint) internal balances;\\n\\n    /// @notice The standard EIP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /// @notice The standard EIP-20 approval event\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n    \\n    constructor() public {\\n        balances[msg.sender] = 1e18;\\n        emit Transfer(address(0x0), msg.sender, 1e18);\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint amount) external returns (bool) {\\n        allowances[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint amount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != uint(-1)) {\\n            uint newAllowance = spenderAllowance.sub(amount, \\\"transferFrom: exceeds spender allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    function _transferTokens(address src, address dst, uint amount) internal {\\n        require(src != address(0), \\\"_transferTokens: zero address\\\");\\n        require(dst != address(0), \\\"_transferTokens: zero address\\\");\\n\\n        balances[src] = balances[src].sub(amount, \\\"_transferTokens: exceeds balance\\\");\\n        balances[dst] = balances[dst].add(amount, \\\"_transferTokens: overflows\\\");\\n        emit Transfer(src, dst, amount);\\n    }\\n}\\n\\ncontract GaugeProxy is ProtocolGovernance {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    \\n    MasterChef public constant MASTER = MasterChef(0xbD17B1ce622d73bD438b9E658acA5996dc394b0d);\\n    IERC20 public constant DILL = IERC20(0xbBCf169eE191A1Ba7371F30A1C344bFC498b29Cf);\\n    IERC20 public constant PICKLE = IERC20(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\\n    \\n    IERC20 public immutable TOKEN;\\n    \\n    uint public pid;\\n    uint public totalWeight;\\n    \\n    address[] internal _tokens;\\n    mapping(address => address) public gauges; // token => gauge\\n    mapping(address => uint) public weights; // token => weight\\n    mapping(address => mapping(address => uint)) public votes; // msg.sender => votes\\n    mapping(address => address[]) public tokenVote;// msg.sender => token\\n    mapping(address => uint) public usedWeights;  // msg.sender => total voting weight of user\\n    \\n    function tokens() external view returns (address[] memory) {\\n        return _tokens;\\n    }\\n    \\n    function getGauge(address _token) external view returns (address) {\\n        return gauges[_token];\\n    }\\n    \\n    constructor() public {\\n        TOKEN = IERC20(address(new MasterDill()));\\n        governance = msg.sender;\\n    }\\n    \\n    // Reset votes to 0\\n    function reset() external {\\n        _reset(msg.sender);\\n    }\\n    \\n    // Reset votes to 0\\n    function _reset(address _owner) internal {\\n        address[] storage _tokenVote = tokenVote[_owner];\\n        uint256 _tokenVoteCnt = _tokenVote.length;\\n\\n        for (uint i = 0; i < _tokenVoteCnt; i ++) {\\n            address _token = _tokenVote[i];\\n            uint _votes = votes[_owner][_token];\\n            \\n            if (_votes > 0) {\\n                totalWeight = totalWeight.sub(_votes);\\n                weights[_token] = weights[_token].sub(_votes);\\n                \\n                votes[_owner][_token] = 0;\\n            }\\n        }\\n\\n        delete tokenVote[_owner];\\n    }\\n    \\n    // Adjusts _owner's votes according to latest _owner's DILL balance\\n    function poke(address _owner) public {\\n        address[] memory _tokenVote = tokenVote[_owner];\\n        uint256 _tokenCnt = _tokenVote.length;\\n        uint256[] memory _weights = new uint[](_tokenCnt);\\n        \\n        uint256 _prevUsedWeight = usedWeights[_owner];\\n        uint256 _weight = DILL.balanceOf(_owner);        \\n\\n        for (uint256 i = 0; i < _tokenCnt; i ++) {\\n            uint256 _prevWeight = votes[_owner][_tokenVote[i]];\\n            _weights[i] = _prevWeight.mul(_weight).div(_prevUsedWeight);\\n        }\\n\\n        _vote(_owner, _tokenVote, _weights);\\n    }\\n    \\n    function _vote(address _owner, address[] memory _tokenVote, uint256[] memory _weights) internal {\\n        // _weights[i] = percentage * 100\\n        _reset(_owner);\\n        uint256 _tokenCnt = _tokenVote.length;\\n        uint256 _weight = DILL.balanceOf(_owner);\\n        uint256 _totalVoteWeight = 0;\\n        uint256 _usedWeight = 0;\\n\\n        for (uint256 i = 0; i < _tokenCnt; i ++) {\\n            _totalVoteWeight = _totalVoteWeight.add(_weights[i]);\\n        }\\n\\n        for (uint256 i = 0; i < _tokenCnt; i ++) {\\n            address _token = _tokenVote[i];\\n            address _gauge = gauges[_token];\\n            uint256 _tokenWeight = _weights[i].mul(_weight).div(_totalVoteWeight);\\n\\n            if (_gauge != address(0x0)) {\\n                _usedWeight = _usedWeight.add(_tokenWeight);\\n                totalWeight = totalWeight.add(_tokenWeight);\\n                weights[_token] = weights[_token].add(_tokenWeight);\\n                tokenVote[_owner].push(_token);\\n                votes[_owner][_token] = _tokenWeight;\\n            }\\n        }\\n\\n        usedWeights[_owner] = _usedWeight;\\n    }\\n    \\n    \\n    // Vote with DILL on a gauge\\n    function vote(address[] calldata _tokenVote, uint256[] calldata _weights) external {\\n        require(_tokenVote.length == _weights.length);\\n        _vote(msg.sender, _tokenVote, _weights);\\n    }\\n    \\n    // Add new token gauge\\n    function addGauge(address _token) external {\\n        require(msg.sender == governance, \\\"!gov\\\");\\n        require(gauges[_token] == address(0x0), \\\"exists\\\");\\n        gauges[_token] = address(new Gauge(_token));\\n        _tokens.push(_token);\\n    }\\n    \\n    \\n    // Sets MasterChef PID\\n    function setPID(uint _pid) external {\\n        require(msg.sender == governance, \\\"!gov\\\");\\n        require(pid == 0, \\\"pid has already been set\\\");\\n        require(_pid > 0, \\\"invalid pid\\\");\\n        pid = _pid;\\n    }\\n    \\n    \\n    // Deposits mDILL into MasterChef\\n    function deposit() public {\\n        require(pid > 0, \\\"pid not initialized\\\");\\n        IERC20 _token = TOKEN;\\n        uint _balance = _token.balanceOf(address(this));\\n        _token.safeApprove(address(MASTER), 0);\\n        _token.safeApprove(address(MASTER), _balance);\\n        MASTER.deposit(pid, _balance);\\n    }\\n    \\n    \\n    // Fetches Pickle\\n    function collect() public {\\n        (uint _locked,) = MASTER.userInfo(pid, address(this));\\n        MASTER.withdraw(pid, _locked);\\n        deposit();\\n    }\\n    \\n    function length() external view returns (uint) {\\n        return _tokens.length;\\n    }\\n    \\n    function distribute() external {\\n        collect();\\n        uint _balance = PICKLE.balanceOf(address(this));\\n        if (_balance > 0 && totalWeight > 0) {\\n            for (uint i = 0; i < _tokens.length; i++) {\\n                address _token = _tokens[i];\\n                address _gauge = gauges[_token];\\n                uint _reward = _balance.mul(weights[_token]).div(totalWeight);\\n                if (_reward > 0) {\\n                    PICKLE.safeApprove(_gauge, 0);\\n                    PICKLE.safeApprove(_gauge, _reward);\\n                    Gauge(_gauge).notifyRewardAmount(_reward);\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"MasterDill","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}