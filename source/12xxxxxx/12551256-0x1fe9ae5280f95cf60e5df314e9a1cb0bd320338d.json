{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/E/eth/graphlinq/GraphLinq.Engine/GraphLinq.StakingContract/contracts/GlqStakingContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./libs/maths/SafeMath.sol\\\";\\r\\nimport \\\"./libs/string.sol\\\";\\r\\nimport \\\"./interfaces/IERC20.sol\\\";\\r\\nimport \\\"./libs/sort.sol\\\";\\r\\n\\r\\nstruct GlqStaker {\\r\\n    address wallet;\\r\\n    uint256 block_number;\\r\\n    uint256 amount;\\r\\n    uint256 index_at;\\r\\n    bool already_withdrawn;\\r\\n}\\r\\n\\r\\nstruct GraphLinqApyStruct {\\r\\n    uint256 tier1Apy;\\r\\n    uint256 tier2Apy;\\r\\n    uint256 tier3Apy;      \\r\\n}\\r\\n\\r\\ncontract GlqStakingContract {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n    using strings for *;\\r\\n    using QuickSorter for *;\\r\\n\\r\\n    event NewStakerRegistered (\\r\\n        address staker_address,\\r\\n        uint256 at_block,\\r\\n        uint256 amount_registered\\r\\n    );\\r\\n\\r\\n    /*\\r\\n    ** Address of the GLQ token hash: 0x9F9c8ec3534c3cE16F928381372BfbFBFb9F4D24\\r\\n    */\\r\\n    address private _glqTokenAddress;\\r\\n\\r\\n    /*\\r\\n    ** Manager of the contract to add/remove APYs bonuses into the staking contract\\r\\n    */\\r\\n    address private _glqDeployerManager;\\r\\n\\r\\n    /*\\r\\n    ** Current amount of GLQ available in the pool as rewards\\r\\n    */\\r\\n    uint256 private _totalGlqIncentive;\\r\\n\\r\\n    GlqStaker[]                     private _stakers;\\r\\n    uint256                         private _stakersIndex;\\r\\n    uint256                         private _totalStaked;\\r\\n    bool                            private _emergencyWithdraw;\\r\\n\\r\\n    mapping(address => uint256)     private _indexStaker;\\r\\n    uint256                         private _blocksPerYear;\\r\\n    GraphLinqApyStruct              private _apyStruct;\\r\\n\\r\\n    constructor(address glqAddr, address manager) {\\r\\n        _glqTokenAddress = glqAddr;\\r\\n        _glqDeployerManager = manager;\\r\\n\\r\\n        _totalStaked = 0;\\r\\n        _stakersIndex = 1;\\r\\n        \\r\\n        _blocksPerYear = 2250000;\\r\\n        \\r\\n        // default t1: 30%, t2: 15%, t3: 7.5%\\r\\n        _apyStruct = GraphLinqApyStruct(50*1e18, 25*1e18, 12500000000000000000);\\r\\n    }\\r\\n\\r\\n\\r\\n    /* Getter ---- Read-Only */\\r\\n\\r\\n    /*\\r\\n    ** Return the sender wallet position from the tier system\\r\\n    */\\r\\n    function getWalletCurrentTier(address wallet) public view returns (uint256) {\\r\\n        uint256 currentTier = 3;\\r\\n        uint256 index = _indexStaker[wallet];\\r\\n        require(\\r\\n            index != 0,\\r\\n            \\\"You dont have any tier rank currently in the Staking contract.\\\"\\r\\n        );\\r\\n        uint256 walletAggregatedIndex = (index).mul(1e18);\\r\\n\\r\\n        // Total length of stakers\\r\\n        uint256 totalIndex = _stakers.length.mul(1e18);\\r\\n        // 15% of hodlers in T1 \\r\\n        uint256 t1MaxIndex = totalIndex.div(100).mul(15);\\r\\n        // 55% of hodlers in T2\\r\\n        uint256 t2MaxIndex = totalIndex.div(100).mul(55);\\r\\n\\r\\n        if (walletAggregatedIndex <= t1MaxIndex) {\\r\\n            currentTier = 1;\\r\\n        } else if (walletAggregatedIndex > t1MaxIndex && walletAggregatedIndex <= t2MaxIndex) {\\r\\n            currentTier = 2;\\r\\n        }\\r\\n\\r\\n        return currentTier;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Return rank position of a wallet\\r\\n    */\\r\\n    function getPosition(address wallet) public view returns (uint256) {\\r\\n         uint256 index = _indexStaker[wallet];\\r\\n         return index;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Return the amount of GLQ that a wallet can currently claim from the staking contract\\r\\n    */\\r\\n    function getGlqToClaim(address wallet) public view returns(uint256) {\\r\\n        uint256 index = _indexStaker[wallet];\\r\\n        require (index > 0, \\\"Invalid staking index\\\");\\r\\n        GlqStaker storage staker = _stakers[index - 1];\\r\\n\\r\\n        uint256 calculatedApr = getWaitingPercentAPR(wallet);\\r\\n        return staker.amount.mul(calculatedApr).div(100).div(1e18);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Return the current percent winnable for a staker wallet\\r\\n    */\\r\\n    function getWaitingPercentAPR(address wallet) public view returns(uint256) {\\r\\n        uint256 index = _indexStaker[wallet];\\r\\n        require (index > 0, \\\"Invalid staking index\\\");\\r\\n        GlqStaker storage staker = _stakers[index - 1];\\r\\n\\r\\n        uint256 walletTier = getWalletCurrentTier(wallet);\\r\\n        uint256 blocksSpent = block.number.sub(staker.block_number);\\r\\n        if (blocksSpent == 0) { return 0; }\\r\\n        uint256 percentYearSpent = percent(blocksSpent.mul(10000), _blocksPerYear.mul(10000), 20);\\r\\n\\r\\n        uint256 percentAprGlq = _apyStruct.tier3Apy;\\r\\n        if (walletTier == 1) {\\r\\n            percentAprGlq = _apyStruct.tier1Apy;\\r\\n        } else if (walletTier == 2) {\\r\\n            percentAprGlq = _apyStruct.tier2Apy;\\r\\n        }\\r\\n\\r\\n        return percentAprGlq.mul(percentYearSpent).div(100).div(1e18);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Return the total amount of GLQ as incentive rewards in the contract\\r\\n    */\\r\\n    function getTotalIncentive() public view returns (uint256) {\\r\\n        return _totalGlqIncentive;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Return the total amount in staking for an hodler.\\r\\n    */\\r\\n    function getDepositedGLQ(address wallet) public view returns (uint256) {\\r\\n        uint256 index = _indexStaker[wallet];\\r\\n        if (index == 0) { return 0; }\\r\\n        return _stakers[index-1].amount;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Count the total numbers of stakers in the contract\\r\\n    */\\r\\n    function getTotalStakers() public view returns(uint256) {\\r\\n        return _stakers.length;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Return all APY per different Tier\\r\\n    */\\r\\n    function getTiersAPY() public view returns(uint256, uint256, uint256) {\\r\\n        return (_apyStruct.tier1Apy, _apyStruct.tier2Apy, _apyStruct.tier3Apy);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Return the Total staked amount\\r\\n    */\\r\\n    function getTotalStaked() public view returns(uint256) {\\r\\n        return _totalStaked;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Return the top 3 of stakers (by age)\\r\\n    */\\r\\n    function getTopStakers() public view returns(address[] memory, uint256[] memory) {\\r\\n        uint256 len = _stakers.length;\\r\\n        address[] memory addresses = new address[](3);\\r\\n        uint256[] memory amounts = new uint256[](3);\\r\\n\\r\\n        for (uint i = 0; i < len && i <= 2; i++) {\\r\\n            addresses[i] = _stakers[i].wallet;\\r\\n            amounts[i] = _stakers[i].amount;\\r\\n        }\\r\\n\\r\\n        return (addresses, amounts);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Return the total amount deposited on a rank tier\\r\\n    */\\r\\n    function getTierTotalStaked(uint tier) public view returns (uint256) {\\r\\n        uint256 totalAmount = 0;\\r\\n\\r\\n        // Total length of stakers\\r\\n        uint256 totalIndex = _stakers.length.mul(1e18);\\r\\n        // 15% of hodlers in T1 \\r\\n        uint256 t1MaxIndex = totalIndex.div(100).mul(15);\\r\\n        // 55% of hodlers in T2\\r\\n        uint256 t2MaxIndex = totalIndex.div(100).mul(55);\\r\\n\\r\\n        uint startIndex = (tier == 1) ? 0 : t1MaxIndex.div(1e18);\\r\\n        uint endIndex = (tier == 1) ? t1MaxIndex.div(1e18) : t2MaxIndex.div(1e18);\\r\\n        \\r\\n        if (tier == 3) {\\r\\n            startIndex = t2MaxIndex.div(1e18);\\r\\n            endIndex = _stakers.length;\\r\\n        }\\r\\n\\r\\n        for (uint i = startIndex; i <= endIndex && i < _stakers.length; i++) {\\r\\n            totalAmount +=  _stakers[i].amount;\\r\\n        }\\r\\n      \\r\\n        return totalAmount;\\r\\n    }\\r\\n\\r\\n    /* Getter ---- Read-Only */\\r\\n\\r\\n\\r\\n    /* Setter - Read & Modifications */\\r\\n\\r\\n\\r\\n    /*\\r\\n    ** Enable emergency withdraw by GLQ Deployer\\r\\n    */\\r\\n    function setEmergencyWithdraw(bool state) public {\\r\\n        require (\\r\\n            msg.sender == _glqDeployerManager,\\r\\n            \\\"Only the Glq Deployer can change the state of the emergency withdraw\\\"\\r\\n        );\\r\\n        _emergencyWithdraw = state;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Set numbers of blocks spent per year to calculate claim rewards\\r\\n    */\\r\\n    function setBlocksPerYear(uint256 blocks) public {\\r\\n        require(\\r\\n            msg.sender == _glqDeployerManager,\\r\\n            \\\"Only the Glq Deployer can change blocks spent per year\\\");\\r\\n        _blocksPerYear = blocks;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Update the APY rewards for each tier in percent per year\\r\\n    */\\r\\n    function setApyPercentRewards(uint256 t1, uint256 t2, uint256 t3) public {\\r\\n        require(\\r\\n            msg.sender == _glqDeployerManager,\\r\\n            \\\"Only the Glq Deployer can APY rewards\\\");\\r\\n        GraphLinqApyStruct memory newApy = GraphLinqApyStruct(t1, t2, t3);\\r\\n        _apyStruct = newApy;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Add GLQ liquidity in the staking contract for stakers rewards \\r\\n    */\\r\\n    function addIncentive(uint256 glqAmount) public {\\r\\n        IERC20 glqToken = IERC20(_glqTokenAddress);\\r\\n        require(\\r\\n            msg.sender == _glqDeployerManager,\\r\\n            \\\"Only the Glq Deployer can add incentive into the smart-contract\\\");\\r\\n        require(\\r\\n            glqToken.balanceOf(msg.sender) >= glqAmount,\\r\\n            \\\"Insufficient funds from the deployer contract\\\");\\r\\n        require(\\r\\n            glqToken.transferFrom(msg.sender, address(this), glqAmount) == true,\\r\\n            \\\"Error transferFrom on the contract\\\"\\r\\n        );\\r\\n        _totalGlqIncentive += glqAmount;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Remove GLQ liquidity from the staking contract for stakers rewards \\r\\n    */\\r\\n    function removeIncentive(uint256 glqAmount) public {\\r\\n        IERC20 glqToken = IERC20(_glqTokenAddress);\\r\\n        require(\\r\\n            msg.sender == _glqDeployerManager,\\r\\n            \\\"Only the Glq Deployer can remove incentive from the smart-contract\\\");\\r\\n        require(\\r\\n            glqToken.balanceOf(address(this)) >= glqAmount,\\r\\n            \\\"Insufficient funds from the deployer contract\\\");\\r\\n        require(\\r\\n            glqToken.transfer(msg.sender, glqAmount) == true,\\r\\n            \\\"Error transfer on the contract\\\"\\r\\n        );\\r\\n\\r\\n        _totalGlqIncentive -= glqAmount;\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n    ** Deposit GLQ in the staking contract to stake & earn\\r\\n    */\\r\\n    function depositGlq(uint256 glqAmount) public {\\r\\n        IERC20 glqToken = IERC20(_glqTokenAddress);\\r\\n        require(\\r\\n            glqToken.balanceOf(msg.sender) >= glqAmount,\\r\\n            \\\"Insufficient funds from the sender\\\");\\r\\n        require(\\r\\n           glqToken.transferFrom(msg.sender, address(this), glqAmount) == true,\\r\\n           \\\"Error transferFrom on the contract\\\"\\r\\n        );\\r\\n\\r\\n        uint256 index = _indexStaker[msg.sender];\\r\\n        _totalStaked += glqAmount;\\r\\n\\r\\n        if (index == 0) {\\r\\n            GlqStaker memory staker = GlqStaker(msg.sender, block.number, glqAmount, _stakersIndex, false);\\r\\n            _stakers.push(staker);\\r\\n            _indexStaker[msg.sender] = _stakersIndex;\\r\\n\\r\\n            // emit event of a new staker registered at current block position\\r\\n            emit NewStakerRegistered(msg.sender, block.number, glqAmount);\\r\\n            _stakersIndex = _stakersIndex.add(1);\\r\\n        }\\r\\n        else {\\r\\n            // claim rewards before adding new staking amount\\r\\n            if (_stakers[index-1].amount > 0) {\\r\\n                claimGlq();\\r\\n            }\\r\\n            _stakers[index-1].amount += glqAmount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeStaker(GlqStaker storage staker) private {\\r\\n        uint256 currentIndex = _indexStaker[staker.wallet]-1;\\r\\n        _indexStaker[staker.wallet] = 0;\\r\\n        for (uint256 i= currentIndex ; i < _stakers.length-1 ; i++) {\\r\\n            _stakers[i] = _stakers[i+1];\\r\\n            _stakers[i].index_at = _stakers[i].index_at.sub(1);\\r\\n            _indexStaker[_stakers[i].wallet] = _stakers[i].index_at;\\r\\n        }\\r\\n        _stakers.pop();\\r\\n\\r\\n        // Remove the staker and decrease stakers index\\r\\n        _stakersIndex = _stakersIndex.sub(1);\\r\\n        if (_stakersIndex == 0) { _stakersIndex = 1; }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Emergency withdraw enabled by GLQ team in an emergency case\\r\\n    */\\r\\n    function emergencyWithdraw() public {\\r\\n        require(\\r\\n            _emergencyWithdraw == true,\\r\\n            \\\"The emergency withdraw feature is not enabled\\\"\\r\\n        );\\r\\n        uint256 index = _indexStaker[msg.sender];\\r\\n        require (index > 0, \\\"Invalid staking index\\\");\\r\\n        GlqStaker storage staker = _stakers[index - 1];\\r\\n        IERC20 glqToken = IERC20(_glqTokenAddress);\\r\\n\\r\\n        require(\\r\\n            staker.amount > 0,\\r\\n         \\\"Not funds deposited in the staking contract\\\");\\r\\n\\r\\n        require(\\r\\n            glqToken.transfer(msg.sender, staker.amount) == true,\\r\\n            \\\"Error transfer on the contract\\\"\\r\\n        );\\r\\n        staker.amount = 0;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Withdraw Glq from the staking contract (reduce the tier position)\\r\\n    */\\r\\n    function withdrawGlq() public {\\r\\n        uint256 index = _indexStaker[msg.sender];\\r\\n        require (index > 0, \\\"Invalid staking index\\\");\\r\\n        GlqStaker storage staker = _stakers[index - 1];\\r\\n        IERC20 glqToken = IERC20(_glqTokenAddress);\\r\\n        require(\\r\\n            staker.amount > 0,\\r\\n         \\\"Not funds deposited in the staking contract\\\");\\r\\n    \\r\\n        //auto claim when withdraw\\r\\n        claimGlq();\\r\\n\\r\\n        _totalStaked -= staker.amount;\\r\\n        require(\\r\\n            glqToken.balanceOf(address(this)) >= staker.amount,\\r\\n            \\\"Insufficient funds from the deployer contract\\\");\\r\\n        require(\\r\\n            glqToken.transfer(msg.sender, staker.amount) == true,\\r\\n            \\\"Error transfer on the contract\\\"\\r\\n        );\\r\\n        staker.amount = 0;\\r\\n        \\r\\n        if (staker.already_withdrawn) {\\r\\n            removeStaker(staker);\\r\\n        } else {\\r\\n            staker.already_withdrawn = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function percent(uint256 numerator, uint256 denominator, uint256 precision) private pure returns(uint256) {\\r\\n        uint256 _numerator  = numerator * 10 ** (precision+1);\\r\\n        // with rounding of last digit\\r\\n        uint256 _quotient =  ((_numerator / denominator) + 5) / 10;\\r\\n        return ( _quotient);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    ** Claim waiting rewards from the staking contract\\r\\n    */\\r\\n    function claimGlq() public returns(uint256) {\\r\\n        uint256 index = _indexStaker[msg.sender];\\r\\n        require (index > 0, \\\"Invalid staking index\\\");\\r\\n        GlqStaker storage staker = _stakers[index - 1];\\r\\n        uint256 glqToClaim = getGlqToClaim(msg.sender);\\r\\n        IERC20 glqToken = IERC20(_glqTokenAddress);\\r\\n        if (glqToClaim == 0) { return 0; }\\r\\n\\r\\n        require(\\r\\n            glqToken.balanceOf(address(this)) >= glqToClaim,\\r\\n            \\\"Not enough funds in the staking program to claim rewards\\\"\\r\\n        );\\r\\n\\r\\n        staker.block_number = block.number;\\r\\n\\r\\n        require(\\r\\n            glqToken.transfer(msg.sender, glqToClaim) == true,\\r\\n            \\\"Error transfer on the contract\\\"\\r\\n        );\\r\\n        return (glqToClaim);\\r\\n    }\\r\\n\\r\\n    /* Setter - Read & Modifications */\\r\\n\\r\\n}\"\r\n    },\r\n    \"/E/eth/graphlinq/GraphLinq.Engine/GraphLinq.StakingContract/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"\r\n    },\r\n    \"/E/eth/graphlinq/GraphLinq.Engine/GraphLinq.StakingContract/contracts/libs/maths/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"/E/eth/graphlinq/GraphLinq.Engine/GraphLinq.StakingContract/contracts/libs/sort.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\r\\n\\r\\nlibrary QuickSorter {\\r\\n\\r\\n\\r\\n  function sort(uint[] storage data) internal {\\r\\n\\r\\n    uint n = data.length;\\r\\n    uint[] memory arr = new uint[](n);\\r\\n    uint i;\\r\\n\\r\\n    for(i=0; i<n; i++) {\\r\\n      arr[i] = data[i];\\r\\n    }\\r\\n\\r\\n    uint[] memory stack = new uint[](n+2);\\r\\n\\r\\n    //Push initial lower and higher bound\\r\\n    uint top = 1;\\r\\n    stack[top] = 0;\\r\\n    top = top + 1;\\r\\n    stack[top] = n-1;\\r\\n\\r\\n    //Keep popping from stack while is not empty\\r\\n    while (top > 0) {\\r\\n\\r\\n      uint h = stack[top];\\r\\n      top = top - 1;\\r\\n      uint l = stack[top];\\r\\n      top = top - 1;\\r\\n\\r\\n      i = l;\\r\\n      uint x = arr[h];\\r\\n\\r\\n      for(uint j=l; j<h; j++){\\r\\n        if  (arr[j] <= x) {\\r\\n          //Move smaller element\\r\\n          (arr[i], arr[j]) = (arr[j],arr[i]);\\r\\n          i = i + 1;\\r\\n        }\\r\\n      }\\r\\n      (arr[i], arr[h]) = (arr[h],arr[i]);\\r\\n      uint p = i;\\r\\n\\r\\n      //Push left side to stack\\r\\n      if (p > l + 1) {\\r\\n        top = top + 1;\\r\\n        stack[top] = l;\\r\\n        top = top + 1;\\r\\n        stack[top] = p - 1;\\r\\n      }\\r\\n\\r\\n      //Push right side to stack\\r\\n      if (p+1 < h) {\\r\\n        top = top + 1;\\r\\n        stack[top] = p + 1;\\r\\n        top = top + 1;\\r\\n        stack[top] = h;\\r\\n      }\\r\\n    }\\r\\n\\r\\n    for(i=0; i<n; i++) {\\r\\n      data[i] = arr[i];\\r\\n    }\\r\\n  }\\r\\n\\r\\n}\"\r\n    },\r\n    \"/E/eth/graphlinq/GraphLinq.Engine/GraphLinq.StakingContract/contracts/libs/string.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary strings {\\r\\n    using strings for *;\\r\\n    \\r\\n    struct slice {\\r\\n        uint _len;\\r\\n        uint _ptr;\\r\\n    }\\r\\n\\r\\n    function memcpy(uint dest, uint src, uint len_cpy) private pure {\\r\\n        // Copy word-length chunks while possible\\r\\n        for(; len_cpy >= 32; len_cpy -= 32) {\\r\\n            assembly {\\r\\n                mstore(dest, mload(src))\\r\\n            }\\r\\n            dest += 32;\\r\\n            src += 32;\\r\\n        }\\r\\n\\r\\n        // Copy remaining bytes\\r\\n        uint mask = 256 ** (32 - len_cpy) - 1;\\r\\n        assembly {\\r\\n            let srcpart := and(mload(src), not(mask))\\r\\n            let destpart := and(mload(dest), mask)\\r\\n            mstore(dest, or(destpart, srcpart))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns a slice containing the entire string.\\r\\n     * @param self The string to make a slice from.\\r\\n     * @return A newly allocated slice containing the entire string.\\r\\n     */\\r\\n    function toSlice(string memory self) internal pure returns (slice memory) {\\r\\n        uint ptr;\\r\\n        assembly {\\r\\n            ptr := add(self, 0x20)\\r\\n        }\\r\\n        return slice(bytes(self).length, ptr);\\r\\n    }\\r\\n\\r\\n\\r\\n    /*\\r\\n     * @dev Returns a new slice containing the same data as the current slice.\\r\\n     * @param self The slice to copy.\\r\\n     * @return A new slice containing the same data as `self`.\\r\\n     */\\r\\n    function copy(slice memory self) internal pure returns (slice memory) {\\r\\n        return slice(self._len, self._ptr);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Copies a slice to a new string.\\r\\n     * @param self The slice to copy.\\r\\n     * @return A newly allocated string containing the slice's text.\\r\\n     */\\r\\n    function toString(slice memory self) internal pure returns (string memory) {\\r\\n        string memory ret = new string(self._len);\\r\\n        uint retptr;\\r\\n        assembly { retptr := add(ret, 32) }\\r\\n\\r\\n        memcpy(retptr, self._ptr, self._len);\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the length in runes of the slice. Note that this operation\\r\\n     *      takes time proportional to the length of the slice; avoid using it\\r\\n     *      in loops, and call `slice.empty()` if you only need to know whether\\r\\n     *      the slice is empty or not.\\r\\n     * @param self The slice to operate on.\\r\\n     * @return The length of the slice in runes.\\r\\n     */\\r\\n    function len(slice memory self) internal pure returns (uint l) {\\r\\n        // Starting at ptr-31 means the LSB will be the byte we care about\\r\\n        uint ptr = self._ptr - 31;\\r\\n        uint end = ptr + self._len;\\r\\n        for (l = 0; ptr < end; l++) {\\r\\n            uint8 b;\\r\\n            assembly { b := and(mload(ptr), 0xFF) }\\r\\n            if (b < 0x80) {\\r\\n                ptr += 1;\\r\\n            } else if(b < 0xE0) {\\r\\n                ptr += 2;\\r\\n            } else if(b < 0xF0) {\\r\\n                ptr += 3;\\r\\n            } else if(b < 0xF8) {\\r\\n                ptr += 4;\\r\\n            } else if(b < 0xFC) {\\r\\n                ptr += 5;\\r\\n            } else {\\r\\n                ptr += 6;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if the slice is empty (has a length of 0).\\r\\n     * @param self The slice to operate on.\\r\\n     * @return True if the slice is empty, False otherwise.\\r\\n     */\\r\\n    function empty(slice memory self) internal pure returns (bool) {\\r\\n        return self._len == 0;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns a positive number if `other` comes lexicographically after\\r\\n     *      `self`, a negative number if it comes before, or zero if the\\r\\n     *      contents of the two slices are equal. Comparison is done per-rune,\\r\\n     *      on unicode codepoints.\\r\\n     * @param self The first slice to compare.\\r\\n     * @param other The second slice to compare.\\r\\n     * @return The result of the comparison.\\r\\n     */\\r\\n    function compare(slice memory self, slice memory other) internal pure returns (int) {\\r\\n        uint shortest = self._len;\\r\\n        if (other._len < self._len)\\r\\n            shortest = other._len;\\r\\n\\r\\n        uint selfptr = self._ptr;\\r\\n        uint otherptr = other._ptr;\\r\\n        for (uint idx = 0; idx < shortest; idx += 32) {\\r\\n            uint a;\\r\\n            uint b;\\r\\n            assembly {\\r\\n                a := mload(selfptr)\\r\\n                b := mload(otherptr)\\r\\n            }\\r\\n            if (a != b) {\\r\\n                // Mask out irrelevant bytes and check again\\r\\n                uint256 mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\\r\\n                uint256 diff = (a & mask) - (b & mask);\\r\\n                if (diff != 0)\\r\\n                    return int(diff);\\r\\n            }\\r\\n            selfptr += 32;\\r\\n            otherptr += 32;\\r\\n        }\\r\\n        return int(self._len) - int(other._len);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if the two slices contain the same text.\\r\\n     * @param self The first slice to compare.\\r\\n     * @param self The second slice to compare.\\r\\n     * @return True if the slices are equal, false otherwise.\\r\\n     */\\r\\n    function equals(slice memory self, slice memory other) internal pure returns (bool) {\\r\\n        return compare(self, other) == 0;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Extracts the first rune in the slice into `rune`, advancing the\\r\\n     *      slice to point to the next rune and returning `self`.\\r\\n     * @param self The slice to operate on.\\r\\n     * @param rune The slice that will contain the first rune.\\r\\n     * @return `rune`.\\r\\n     */\\r\\n    function nextRune(slice memory self, slice memory rune) internal pure returns (slice memory) {\\r\\n        rune._ptr = self._ptr;\\r\\n\\r\\n        if (self._len == 0) {\\r\\n            rune._len = 0;\\r\\n            return rune;\\r\\n        }\\r\\n\\r\\n        uint l;\\r\\n        uint b;\\r\\n        // Load the first byte of the rune into the LSBs of b\\r\\n        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\\r\\n        if (b < 0x80) {\\r\\n            l = 1;\\r\\n        } else if(b < 0xE0) {\\r\\n            l = 2;\\r\\n        } else if(b < 0xF0) {\\r\\n            l = 3;\\r\\n        } else {\\r\\n            l = 4;\\r\\n        }\\r\\n\\r\\n        // Check for truncated codepoints\\r\\n        if (l > self._len) {\\r\\n            rune._len = self._len;\\r\\n            self._ptr += self._len;\\r\\n            self._len = 0;\\r\\n            return rune;\\r\\n        }\\r\\n\\r\\n        self._ptr += l;\\r\\n        self._len -= l;\\r\\n        rune._len = l;\\r\\n        return rune;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the first rune in the slice, advancing the slice to point\\r\\n     *      to the next rune.\\r\\n     * @param self The slice to operate on.\\r\\n     * @return A slice containing only the first rune from `self`.\\r\\n     */\\r\\n    function nextRune(slice memory self) internal pure returns (slice memory ret) {\\r\\n        nextRune(self, ret);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the number of the first codepoint in the slice.\\r\\n     * @param self The slice to operate on.\\r\\n     * @return The number of the first codepoint in the slice.\\r\\n     */\\r\\n    function ord(slice memory self) internal pure returns (uint ret) {\\r\\n        if (self._len == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint word;\\r\\n        uint length;\\r\\n        uint divisor = 2 ** 248;\\r\\n\\r\\n        // Load the rune into the MSBs of b\\r\\n        assembly { word:= mload(mload(add(self, 32))) }\\r\\n        uint b = word / divisor;\\r\\n        if (b < 0x80) {\\r\\n            ret = b;\\r\\n            length = 1;\\r\\n        } else if(b < 0xE0) {\\r\\n            ret = b & 0x1F;\\r\\n            length = 2;\\r\\n        } else if(b < 0xF0) {\\r\\n            ret = b & 0x0F;\\r\\n            length = 3;\\r\\n        } else {\\r\\n            ret = b & 0x07;\\r\\n            length = 4;\\r\\n        }\\r\\n\\r\\n        // Check for truncated codepoints\\r\\n        if (length > self._len) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        for (uint i = 1; i < length; i++) {\\r\\n            divisor = divisor / 256;\\r\\n            b = (word / divisor) & 0xFF;\\r\\n            if (b & 0xC0 != 0x80) {\\r\\n                // Invalid UTF-8 sequence\\r\\n                return 0;\\r\\n            }\\r\\n            ret = (ret * 64) | (b & 0x3F);\\r\\n        }\\r\\n\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns the keccak-256 hash of the slice.\\r\\n     * @param self The slice to hash.\\r\\n     * @return The hash of the slice.\\r\\n     */\\r\\n    function keccak(slice memory self) internal pure returns (bytes32 ret) {\\r\\n        assembly {\\r\\n            ret := keccak256(mload(add(self, 32)), mload(self))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if `self` starts with `needle`.\\r\\n     * @param self The slice to operate on.\\r\\n     * @param needle The slice to search for.\\r\\n     * @return True if the slice starts with the provided text, false otherwise.\\r\\n     */\\r\\n    function startsWith(slice memory self, slice memory needle) internal pure returns (bool) {\\r\\n        if (self._len < needle._len) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        if (self._ptr == needle._ptr) {\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        bool equal;\\r\\n        assembly {\\r\\n            let length := mload(needle)\\r\\n            let selfptr := mload(add(self, 0x20))\\r\\n            let needleptr := mload(add(needle, 0x20))\\r\\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\r\\n        }\\r\\n        return equal;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns true if the slice ends with `needle`.\\r\\n     * @param self The slice to operate on.\\r\\n     * @param needle The slice to search for.\\r\\n     * @return True if the slice starts with the provided text, false otherwise.\\r\\n     */\\r\\n    function endsWith(slice memory self, slice memory needle) internal pure returns (bool) {\\r\\n        if (self._len < needle._len) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        uint selfptr = self._ptr + self._len - needle._len;\\r\\n\\r\\n        if (selfptr == needle._ptr) {\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        bool equal;\\r\\n        assembly {\\r\\n            let length := mload(needle)\\r\\n            let needleptr := mload(add(needle, 0x20))\\r\\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\r\\n        }\\r\\n\\r\\n        return equal;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev If `self` ends with `needle`, `needle` is removed from the\\r\\n     *      end of `self`. Otherwise, `self` is unmodified.\\r\\n     * @param self The slice to operate on.\\r\\n     * @param needle The slice to search for.\\r\\n     * @return `self`\\r\\n     */\\r\\n    function until(slice memory self, slice memory needle) internal pure returns (slice memory) {\\r\\n        if (self._len < needle._len) {\\r\\n            return self;\\r\\n        }\\r\\n\\r\\n        uint selfptr = self._ptr + self._len - needle._len;\\r\\n        bool equal = true;\\r\\n        if (selfptr != needle._ptr) {\\r\\n            assembly {\\r\\n                let length := mload(needle)\\r\\n                let needleptr := mload(add(needle, 0x20))\\r\\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (equal) {\\r\\n            self._len -= needle._len;\\r\\n        }\\r\\n\\r\\n        return self;\\r\\n    }\\r\\n\\r\\n    event log_bytemask(bytes32 mask);\\r\\n\\r\\n\\r\\n    // Returns the memory address of the first byte of the first occurrence of\\r\\n    // `needle` in `self`, or the first byte after `self` if not found.\\r\\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\\r\\n        uint ptr = selfptr;\\r\\n        uint idx;\\r\\n\\r\\n        if (needlelen <= selflen) {\\r\\n            if (needlelen <= 32) {\\r\\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\\r\\n\\r\\n                bytes32 needledata;\\r\\n                assembly { needledata := and(mload(needleptr), mask) }\\r\\n\\r\\n                uint end = selfptr + selflen - needlelen;\\r\\n                bytes32 ptrdata;\\r\\n                assembly { ptrdata := and(mload(ptr), mask) }\\r\\n\\r\\n                while (ptrdata != needledata) {\\r\\n                    if (ptr >= end)\\r\\n                        return selfptr + selflen;\\r\\n                    ptr++;\\r\\n                    assembly { ptrdata := and(mload(ptr), mask) }\\r\\n                }\\r\\n                return ptr;\\r\\n            } else {\\r\\n                // For long needles, use hashing\\r\\n                bytes32 hash;\\r\\n                assembly { hash := keccak256(needleptr, needlelen) }\\r\\n\\r\\n                for (idx = 0; idx <= selflen - needlelen; idx++) {\\r\\n                    bytes32 testHash;\\r\\n                    assembly { testHash := keccak256(ptr, needlelen) }\\r\\n                    if (hash == testHash)\\r\\n                        return ptr;\\r\\n                    ptr += 1;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return selfptr + selflen;\\r\\n    }\\r\\n    // Returns the memory address of the first byte after the last occurrence of\\r\\n    // `needle` in `self`, or the address of `self` if not found.\\r\\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\\r\\n        uint ptr;\\r\\n\\r\\n        if (needlelen <= selflen) {\\r\\n            if (needlelen <= 32) {\\r\\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\\r\\n\\r\\n                bytes32 needledata;\\r\\n                assembly { needledata := and(mload(needleptr), mask) }\\r\\n\\r\\n                ptr = selfptr + selflen - needlelen;\\r\\n                bytes32 ptrdata;\\r\\n                assembly { ptrdata := and(mload(ptr), mask) }\\r\\n\\r\\n                while (ptrdata != needledata) {\\r\\n                    if (ptr <= selfptr) \\r\\n                        return selfptr;\\r\\n                    ptr--;\\r\\n                    assembly { ptrdata := and(mload(ptr), mask) }\\r\\n                }\\r\\n                return ptr + needlelen;\\r\\n            } else {\\r\\n                // For long needles, use hashing\\r\\n                bytes32 hash;\\r\\n                assembly { hash := keccak256(needleptr, needlelen) }\\r\\n                ptr = selfptr + (selflen - needlelen);\\r\\n                while (ptr >= selfptr) {\\r\\n                    bytes32 testHash;\\r\\n                    assembly { testHash := keccak256(ptr, needlelen) }\\r\\n                    if (hash == testHash)\\r\\n                        return ptr + needlelen;\\r\\n                    ptr -= 1;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return selfptr;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Modifies `self` to contain everything from the first occurrence of\\r\\n     *      `needle` to the end of the slice. `self` is set to the empty slice\\r\\n     *      if `needle` is not found.\\r\\n     * @param self The slice to search and modify.\\r\\n     * @param needle The text to search for.\\r\\n     * @return `self`.\\r\\n     */\\r\\n    function find(slice memory self, slice memory needle) internal pure returns (slice memory) {\\r\\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\\r\\n        self._len -= ptr - self._ptr;\\r\\n        self._ptr = ptr;\\r\\n        return self;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Modifies `self` to contain the part of the string from the start of\\r\\n     *      `self` to the end of the first occurrence of `needle`. If `needle`\\r\\n     *      is not found, `self` is set to the empty slice.\\r\\n     * @param self The slice to search and modify.\\r\\n     * @param needle The text to search for.\\r\\n     * @return `self`.\\r\\n     */\\r\\n    function rfind(slice memory self, slice memory needle) internal pure returns (slice memory) {\\r\\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\\r\\n        self._len = ptr - self._ptr;\\r\\n        return self;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Splits the slice, setting `self` to everything after the first\\r\\n     *      occurrence of `needle`, and `token` to everything before it. If\\r\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\r\\n     *      and `token` is set to the entirety of `self`.\\r\\n     * @param self The slice to split.\\r\\n     * @param needle The text to search for in `self`.\\r\\n     * @param token An output parameter to which the first token is written.\\r\\n     * @return `token`.\\r\\n     */\\r\\n    function split(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\\r\\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\\r\\n        token._ptr = self._ptr;\\r\\n        token._len = ptr - self._ptr;\\r\\n        if (ptr == self._ptr + self._len) {\\r\\n            // Not found\\r\\n            self._len = 0;\\r\\n        } else {\\r\\n            self._len -= token._len + needle._len;\\r\\n            self._ptr = ptr + needle._len;\\r\\n        }\\r\\n        return token;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Splits the slice, setting `self` to everything after the first\\r\\n     *      occurrence of `needle`, and returning everything before it. If\\r\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\r\\n     *      and the entirety of `self` is returned.\\r\\n     * @param self The slice to split.\\r\\n     * @param needle The text to search for in `self`.\\r\\n     * @return The part of `self` up to the first occurrence of `delim`.\\r\\n     */\\r\\n    function split(slice memory self, slice memory needle) internal pure returns (slice memory token) {\\r\\n        split(self, needle, token);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Splits the slice, setting `self` to everything before the last\\r\\n     *      occurrence of `needle`, and `token` to everything after it. If\\r\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\r\\n     *      and `token` is set to the entirety of `self`.\\r\\n     * @param self The slice to split.\\r\\n     * @param needle The text to search for in `self`.\\r\\n     * @param token An output parameter to which the first token is written.\\r\\n     * @return `token`.\\r\\n     */\\r\\n    function rsplit(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\\r\\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\\r\\n        token._ptr = ptr;\\r\\n        token._len = self._len - (ptr - self._ptr);\\r\\n        if (ptr == self._ptr) {\\r\\n            // Not found\\r\\n            self._len = 0;\\r\\n        } else {\\r\\n            self._len -= token._len + needle._len;\\r\\n        }\\r\\n        return token;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Splits the slice, setting `self` to everything before the last\\r\\n     *      occurrence of `needle`, and returning everything after it. If\\r\\n     *      `needle` does not occur in `self`, `self` is set to the empty slice,\\r\\n     *      and the entirety of `self` is returned.\\r\\n     * @param self The slice to split.\\r\\n     * @param needle The text to search for in `self`.\\r\\n     * @return The part of `self` after the last occurrence of `delim`.\\r\\n     */\\r\\n    function rsplit(slice memory self, slice memory needle) internal pure returns (slice memory token) {\\r\\n        rsplit(self, needle, token);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.\\r\\n     * @param self The slice to search.\\r\\n     * @param needle The text to search for in `self`.\\r\\n     * @return The number of occurrences of `needle` found in `self`.\\r\\n     */\\r\\n    function count(slice memory self, slice memory needle) internal pure returns (uint cnt) {\\r\\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;\\r\\n        while (ptr <= self._ptr + self._len) {\\r\\n            cnt++;\\r\\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns True if `self` contains `needle`.\\r\\n     * @param self The slice to search.\\r\\n     * @param needle The text to search for in `self`.\\r\\n     * @return True if `needle` is found in `self`, false otherwise.\\r\\n     */\\r\\n    function contains(slice memory self, slice memory needle) internal pure returns (bool) {\\r\\n        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Returns a newly allocated string containing the concatenation of\\r\\n     *      `self` and `other`.\\r\\n     * @param self The first slice to concatenate.\\r\\n     * @param other The second slice to concatenate.\\r\\n     * @return The concatenation of the two strings.\\r\\n     */\\r\\n    function concat(slice memory self, slice memory other) internal pure returns (string memory) {\\r\\n        string memory ret = new string(self._len + other._len);\\r\\n        uint retptr;\\r\\n        assembly { retptr := add(ret, 32) }\\r\\n        memcpy(retptr, self._ptr, self._len);\\r\\n        memcpy(retptr + self._len, other._ptr, other._len);\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    /*\\r\\n     * @dev Joins an array of slices, using `self` as a delimiter, returning a\\r\\n     *      newly allocated string.\\r\\n     * @param self The delimiter to use.\\r\\n     * @param parts A list of slices to join.\\r\\n     * @return A newly allocated string containing all the slices in `parts`,\\r\\n     *         joined with `self`.\\r\\n     */\\r\\n    function join(slice memory self, slice[] memory parts) internal pure returns (string memory) {\\r\\n        if (parts.length == 0)\\r\\n            return \\\"\\\";\\r\\n\\r\\n        uint length = self._len * (parts.length - 1);\\r\\n        for(uint i = 0; i < parts.length; i++)\\r\\n            length += parts[i]._len;\\r\\n\\r\\n        string memory ret = new string(length);\\r\\n        uint retptr;\\r\\n        assembly { retptr := add(ret, 32) }\\r\\n\\r\\n        for(uint i = 0; i < parts.length; i++) {\\r\\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\\r\\n            retptr += parts[i]._len;\\r\\n            if (i < parts.length - 1) {\\r\\n                memcpy(retptr, self._ptr, self._len);\\r\\n                retptr += self._len;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n     function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\r\\n        if (_i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint j = _i;\\r\\n        uint lenn;\\r\\n        while (j != 0) {\\r\\n            lenn++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(lenn);\\r\\n        uint k = lenn - 1;\\r\\n        while (_i != 0) {\\r\\n            bstr[k--] = bytes1(uint8(48 + _i % 10));\\r\\n            _i /= 10;\\r\\n        }\\r\\n        return string(bstr);\\r\\n    }\\r\\n\\r\\n function parseInt(string memory _a, uint _b) internal pure returns (uint _parsedInt) {\\r\\n        bytes memory bresult = bytes(_a);\\r\\n        uint mint = 0;\\r\\n        bool decimals = false;\\r\\n        for (uint i = 0; i < bresult.length; i++) {\\r\\n            if ((uint(uint8(bresult[i])) >= 48) && (uint(uint8(bresult[i])) <= 57)) {\\r\\n                if (decimals) {\\r\\n                   if (_b == 0) {\\r\\n                       break;\\r\\n                   } else {\\r\\n                       _b--;\\r\\n                   }\\r\\n                }\\r\\n                mint *= 10;\\r\\n                mint += uint(uint8(bresult[i])) - 48;\\r\\n            } else if (uint(uint8(bresult[i])) == 46) {\\r\\n                decimals = true;\\r\\n            }\\r\\n        }\\r\\n        if (_b > 0) {\\r\\n            mint *= 10 ** _b;\\r\\n        }\\r\\n        return mint;\\r\\n    }\\r\\n\\r\\n    function split_string(string memory raw, string memory by) pure internal returns(string[] memory)\\r\\n\\t{\\r\\n\\t\\tstrings.slice memory s = raw.toSlice();\\r\\n\\t\\tstrings.slice memory delim = by.toSlice();\\r\\n\\t\\tstring[] memory parts = new string[](s.count(delim));\\r\\n\\t\\tfor (uint i = 0; i < parts.length; i++) {\\r\\n\\t\\t\\tparts[i] = s.split(delim).toString();\\r\\n\\t\\t}\\r\\n\\t\\treturn parts;\\r\\n\\t}\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"glqAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"at_block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_registered\",\"type\":\"uint256\"}],\"name\":\"NewStakerRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"glqAmount\",\"type\":\"uint256\"}],\"name\":\"addIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGlq\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"glqAmount\",\"type\":\"uint256\"}],\"name\":\"depositGlq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getDepositedGLQ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getGlqToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tier\",\"type\":\"uint256\"}],\"name\":\"getTierTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTiersAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTopStakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getWaitingPercentAPR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getWalletCurrentTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"glqAmount\",\"type\":\"uint256\"}],\"name\":\"removeIncentive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"t2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"t3\",\"type\":\"uint256\"}],\"name\":\"setApyPercentRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"setBlocksPerYear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setEmergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawGlq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"GlqStakingContract","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009f9c8ec3534c3ce16f928381372bfbfbfb9f4d24000000000000000000000000e87e9c55a720c89257302237b76cd5ba386d3819","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}