{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n\n// \ninterface IERC20 {\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n}\n\ninterface ILiquidityPool {\r\n\tfunction TOKENS (uint256) external returns (address);\r\n\tfunction TOKENS_MUL (uint256) external returns (uint256);\r\n\tfunction balance (uint256 token_) external returns (uint256);\r\n\tfunction calcBorrowFee (uint256 amount_) external returns (uint256);\r\n\tfunction borrow (\r\n\t\tuint256[5] calldata amounts_,\r\n\t\tbytes calldata data_\r\n\t) external;\r\n}\n\ncontract SimpleFlashLoaner {\r\n\t\r\n\taddress public owner;\r\n\tuint256 constant public N_TOKENS = 5;\r\n\tILiquidityPool public liquidityPool;\r\n\tIERC20[N_TOKENS] public TOKENS;\r\n\r\n\tmodifier onlyOwner() {\r\n\t\trequire(msg.sender == owner, \"caller is not the owner\");\r\n\t\t_;\r\n\t}\r\n\t\r\n\tconstructor(address liquidityPool_) {\r\n\t\towner = address(0x2CadAa8DEAeb13Ee93064CCde2D6360DAB42122a);\r\n\t\tliquidityPool = ILiquidityPool(liquidityPool_);\r\n\t\tfor (uint256 i = 0; i < N_TOKENS; i++)\r\n\t\t\tTOKENS[i] = IERC20(liquidityPool.TOKENS(i));\r\n\t}\r\n\r\n\tfunction transferOwnership(address address_) \r\n\t\texternal \r\n\t\tonlyOwner \r\n\t{\r\n\t\trequire(address_ != address(0), \"new owner is the zero address\");\r\n\t\towner = address_;\r\n\t}\r\n\t\r\n    // Call this func initilize flashloan on []amounts of each token\r\n    function flashLoan(\r\n        uint256[N_TOKENS] calldata amounts_,\r\n        uint256[N_TOKENS] calldata payAmounts_\r\n    )\r\n    \tonlyOwner\r\n    \texternal\r\n    {\r\n        bytes memory _data = abi.encodeWithSignature(\"callBack(uint256[5])\", payAmounts_);\r\n        liquidityPool.borrow(amounts_, _data);\r\n    }\r\n\r\n    // Callback implementing custom logic (there will be arbitrage/trades/market-making/liquidations logic). \r\n    function callBack(\r\n        uint256[N_TOKENS] calldata payAmounts_\r\n    )\r\n    \t// onlyOwner\r\n    \texternal\r\n    {\r\n    \trequire(msg.sender == address(liquidityPool), \"caller is not the LiquidityPool\");\r\n\r\n        // Do your logic HERE\r\n\r\n        // return flash loan \r\n        for (uint256 i = 0; i < N_TOKENS; i++) {\r\n            if (payAmounts_[i] != 0) {\r\n                TOKENS[i].transfer(address(liquidityPool), payAmounts_[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdrawERC20(address tokenAddress_)\r\n\t\texternal\r\n\t\tonlyOwner\r\n\t{\r\n\t\tIERC20 _token = IERC20(tokenAddress_);\r\n\t\tuint256 _balance = _token.balanceOf(address(this));\r\n\t\tif (_balance > 0) {\r\n\t\t\t_token.transfer(msg.sender, _balance);\r\n\t\t}\r\n\t}\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityPool_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"N_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TOKENS\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"payAmounts_\",\"type\":\"uint256[5]\"}],\"name\":\"callBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"amounts_\",\"type\":\"uint256[5]\"},{\"internalType\":\"uint256[5]\",\"name\":\"payAmounts_\",\"type\":\"uint256[5]\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPool\",\"outputs\":[{\"internalType\":\"contract ILiquidityPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SimpleFlashLoaner","CompilerVersion":"v0.7.2+commit.51b20bc0","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a4c008d90f2df3df6fadc9ca87c6b1e029f916e1","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]}