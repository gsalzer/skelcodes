{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.5;\r\n\r\ninterface IOwnable {\r\n  function manager() external view returns (address);\r\n\r\n  function renounceManagement() external;\r\n  \r\n  function pushManagement( address newOwner_ ) external;\r\n  \r\n  function pullManagement() external;\r\n}\r\n\r\ncontract Ownable is IOwnable {\r\n\r\n    address internal _owner;\r\n    address internal _newOwner;\r\n\r\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipPushed( address(0), _owner );\r\n    }\r\n\r\n    function manager() public view override returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require( _owner == msg.sender, \"Ownable: caller is not the owner\" );\r\n        _;\r\n    }\r\n\r\n    function renounceManagement() public virtual override onlyManager() {\r\n        emit OwnershipPushed( _owner, address(0) );\r\n        _owner = address(0);\r\n    }\r\n\r\n    function pushManagement( address newOwner_ ) public virtual override onlyManager() {\r\n        require( newOwner_ != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipPushed( _owner, newOwner_ );\r\n        _newOwner = newOwner_;\r\n    }\r\n    \r\n    function pullManagement() public virtual override {\r\n        require( msg.sender == _newOwner, \"Ownable: must be new owner to pull\");\r\n        emit OwnershipPulled( _owner, _newOwner );\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function sqrrt(uint256 a) internal pure returns (uint c) {\r\n        if (a > 3) {\r\n            c = a;\r\n            uint b = add( div( a, 2), 1 );\r\n            while (b < c) {\r\n                c = b;\r\n                b = div( add( div( a, b ), b), 2 );\r\n            }\r\n        } else if (a != 0) {\r\n            c = 1;\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n\r\n    function isContract(address account) internal view returns (bool) {\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addressToString(address _address) internal pure returns(string memory) {\r\n        bytes32 _bytes = bytes32(uint256(_address));\r\n        bytes memory HEX = \"0123456789abcdef\";\r\n        bytes memory _addr = new bytes(42);\r\n\r\n        _addr[0] = '0';\r\n        _addr[1] = 'x';\r\n\r\n        for(uint256 i = 0; i < 20; i++) {\r\n            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\r\n            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\r\n        }\r\n\r\n        return string(_addr);\r\n\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract ERC20 is IERC20 {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    // TODO comment actual hash value.\r\n    bytes32 constant private ERC20TOKEN_ERC1820_INTERFACE_ID = keccak256( \"ERC20Token\" );\r\n    \r\n    mapping (address => uint256) internal _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) internal _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    string internal _name;\r\n    \r\n    string internal _symbol;\r\n    \r\n    uint8 internal _decimals;\r\n\r\n    constructor (string memory name_, string memory symbol_, uint8 decimals_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account_, uint256 ammount_) internal virtual {\r\n        require(account_ != address(0), \"ERC20: mint to the zero address\");\r\n        _beforeTokenTransfer(address( this ), account_, ammount_);\r\n        _totalSupply = _totalSupply.add(ammount_);\r\n        _balances[account_] = _balances[account_].add(ammount_);\r\n        emit Transfer(address( this ), account_, ammount_);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n  function _beforeTokenTransfer( address from_, address to_, uint256 amount_ ) internal virtual { }\r\n}\r\n\r\ninterface IERC2612Permit {\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n}\r\n\r\nlibrary Counters {\r\n    using SafeMath for uint256;\r\n\r\n    struct Counter {\r\n\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        counter._value += 1;\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        counter._value = counter._value.sub(1);\r\n    }\r\n}\r\n\r\nabstract contract ERC20Permit is ERC20, IERC2612Permit {\r\n    using Counters for Counters.Counter;\r\n\r\n    mapping(address => Counters.Counter) private _nonces;\r\n\r\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n\r\n    constructor() {\r\n        uint256 chainID;\r\n        assembly {\r\n            chainID := chainid()\r\n        }\r\n\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                keccak256(bytes(name())),\r\n                keccak256(bytes(\"1\")), // Version\r\n                chainID,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public virtual override {\r\n        require(block.timestamp <= deadline, \"Permit: expired deadline\");\r\n\r\n        bytes32 hashStruct =\r\n            keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, _nonces[owner].current(), deadline));\r\n\r\n        bytes32 _hash = keccak256(abi.encodePacked(uint16(0x1901), DOMAIN_SEPARATOR, hashStruct));\r\n\r\n        address signer = ecrecover(_hash, v, r, s);\r\n        require(signer != address(0) && signer == owner, \"ZeroSwapPermit: Invalid signature\");\r\n\r\n        _nonces[owner].increment();\r\n        _approve(owner, spender, amount);\r\n    }\r\n\r\n    function nonces(address owner) public view override returns (uint256) {\r\n        return _nonces[owner].current();\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary FullMath {\r\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {\r\n        uint256 mm = mulmod(x, y, uint256(-1));\r\n        l = x * y;\r\n        h = mm - l;\r\n        if (mm < l) h -= 1;\r\n    }\r\n\r\n    function fullDiv(\r\n        uint256 l,\r\n        uint256 h,\r\n        uint256 d\r\n    ) private pure returns (uint256) {\r\n        uint256 pow2 = d & -d;\r\n        d /= pow2;\r\n        l /= pow2;\r\n        l += h * ((-pow2) / pow2 + 1);\r\n        uint256 r = 1;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        return l * r;\r\n    }\r\n\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 d\r\n    ) internal pure returns (uint256) {\r\n        (uint256 l, uint256 h) = fullMul(x, y);\r\n        uint256 mm = mulmod(x, y, d);\r\n        if (mm > l) h -= 1;\r\n        l -= mm;\r\n        require(h < d, 'FullMath::mulDiv: overflow');\r\n        return fullDiv(l, h, d);\r\n    }\r\n}\r\n\r\nlibrary FixedPoint {\r\n\r\n    struct uq112x112 {\r\n        uint224 _x;\r\n    }\r\n\r\n    struct uq144x112 {\r\n        uint256 _x;\r\n    }\r\n\r\n    uint8 private constant RESOLUTION = 112;\r\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\r\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\r\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\r\n\r\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\r\n        return uint112(self._x >> RESOLUTION);\r\n    }\r\n\r\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\r\n\r\n        return uint(self._x) / 5192296858534827;\r\n    }\r\n\r\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\r\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\r\n        if (numerator == 0) return FixedPoint.uq112x112(0);\r\n\r\n        if (numerator <= uint144(-1)) {\r\n            uint256 result = (numerator << RESOLUTION) / denominator;\r\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\r\n            return uq112x112(uint224(result));\r\n        } else {\r\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\r\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\r\n            return uq112x112(uint224(result));\r\n        }\r\n    }\r\n}\r\n\r\ninterface ITreasury {\r\n    function depositPrinciple( uint amount_ ) external returns ( bool );\r\n}\r\n\r\ninterface ICirculatingOHM {\r\n    function OHMCirculatingSupply() external view returns ( uint );\r\n}\r\n\r\ninterface IBondCalculator {\r\n    function valuation( address LP_, uint amount_ ) external view returns ( uint );\r\n    function markdown( address LP_ ) external view returns ( uint );\r\n}\r\n\r\ncontract OlympusBondDepository is Ownable {\r\n\r\n    using FixedPoint for *;\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    struct Bond {\r\n        uint valueRemaining; // value of LP given\r\n        uint payoutRemaining; // OHM remaining to be paid\r\n        uint lastBlock; // Last interaction\r\n        uint vestingPeriod; // Blocks left to vest\r\n        uint pricePaid; // In DAI, for front end viewing\r\n    }\r\n    mapping( address => Bond ) public bondInfo; \r\n\r\n    // Bond terms\r\n    uint public controlVariable;\r\n    uint public vestingTerm;\r\n    uint public minimumPrice;\r\n    uint public DAOShare; \r\n    uint public maxPayoutPercent; //  compared to circulating supply, in hundreths. i.e. 50 = 0.5%\r\n\r\n    uint256 public totalDebt; // Total value of outstanding bonds\r\n\r\n    address public immutable OHM;\r\n    address public immutable LP;\r\n\r\n    address public immutable treasury;\r\n    address public immutable distributor;\r\n    address public immutable DAO;\r\n\r\n    address public immutable circulatingOHMContract; // calculates circulating supply\r\n    address public immutable bondCalculator;\r\n\r\n    constructor ( \r\n        address OHM_,\r\n        address LP_,\r\n        address treasury_, \r\n        address distributor_, \r\n        address DAO_, \r\n        address circulatingOHMContract_,\r\n        address bondCalculator_\r\n    ) {\r\n        require( OHM_ != address(0) );\r\n        OHM = OHM_;\r\n        require( LP_ != address(0) );\r\n        LP = LP_;\r\n        require( treasury_ != address(0) );\r\n        treasury = treasury_;\r\n        require( distributor_ != address(0) );\r\n        distributor = distributor_;\r\n        require( DAO_ != address(0) );\r\n        DAO = DAO_;\r\n        require( circulatingOHMContract_ != address(0) );\r\n        circulatingOHMContract = circulatingOHMContract_;\r\n        require( bondCalculator_ != address(0) );\r\n        bondCalculator = bondCalculator_;\r\n    }\r\n\r\n    /**\r\n        @notice set parameters of new bonds\r\n        @param controlVariable_ uint\r\n        @param vestingTerm_ uint\r\n        @param minPrice_ uint\r\n        @param maxPayout_ uint\r\n        @param DAOShare_ uint\r\n        @return bool\r\n     */\r\n    function setBondTerm( \r\n        uint controlVariable_, \r\n        uint vestingTerm_, \r\n        uint minPrice_,\r\n        uint maxPayout_,\r\n        uint DAOShare_\r\n    ) external onlyManager() returns ( bool ) {\r\n        controlVariable = controlVariable_;\r\n        vestingTerm = vestingTerm_;\r\n        minimumPrice = minPrice_;\r\n        maxPayoutPercent = maxPayout_;\r\n        DAOShare = DAOShare_;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @notice deposit bond\r\n        @param amount_ uint\r\n        @param maxPremium_ uint\r\n        @param depositor_ address\r\n        @return uint\r\n     */\r\n    function deposit( \r\n        uint amount_, \r\n        uint maxPremium_,\r\n        address depositor_\r\n    ) external returns ( uint ) {\r\n        return _deposit( amount_, maxPremium_, depositor_ );\r\n    }\r\n\r\n    function _deposit( \r\n        uint amount_, \r\n        uint maxPrice_,\r\n        address depositor_\r\n    ) internal returns ( uint ) {\r\n        require( depositor_ != address(0), \"Invalid address\" );\r\n        uint price = bondPriceInDAI(); // DAI price of bond (for depositor info)\r\n\r\n        require( maxPrice_ >= bondPrice(), \"Slippage limit: more than max price\" ); // slippage protection\r\n\r\n        uint value = IBondCalculator( bondCalculator ).valuation( LP, amount_ );\r\n        uint payout = payoutFor( value );\r\n\r\n        require( payout >= 10000000, \"Bond too small\" ); // must be > 0.01 OHM\r\n        require( payout <= maxPayout(), \"Bond too large\");\r\n\r\n        // Transfer in LP\r\n        IERC20( LP ).safeTransferFrom( msg.sender, address(this), amount_ );\r\n        // Deposit LP to mint OHM\r\n        IERC20( LP ).approve( address( treasury ), amount_ );\r\n        ITreasury( treasury ).depositPrinciple( amount_ );\r\n        \r\n        // calculate profits\r\n        uint daoProfit = payout.mul( DAOShare ).div( 10000 );\r\n        // small rounding errors may occur due to improved bond calculator not used by vault\r\n        uint padding = value.div( 10000000 ); // leaves dust to ensure against underflow\r\n        uint profit = value.sub( payout ).sub( daoProfit ).sub( padding );\r\n        // Transfer profits to staking distributor and dao \r\n        IERC20( OHM ).safeTransfer( distributor, profit );\r\n        IERC20( OHM ).safeTransfer( DAO, daoProfit );\r\n\r\n        totalDebt = totalDebt.add( value ); // increase total debt\r\n        \r\n        // Store depositor info\r\n        bondInfo[ depositor_ ] = Bond({\r\n            valueRemaining: bondInfo[ depositor_ ].valueRemaining.add( value ),\r\n            payoutRemaining: bondInfo[ depositor_ ].payoutRemaining.add( payout ),\r\n            lastBlock: block.number,\r\n            vestingPeriod: vestingTerm,\r\n            pricePaid: price\r\n        });\r\n        return payout;\r\n    }\r\n\r\n    /** \r\n        @notice redeem all unvested bonds\r\n        @return payout_ uint\r\n     */ \r\n    function redeem() external returns ( uint ) {        \r\n        Bond memory info = bondInfo[ msg.sender ];\r\n        uint percentVested = percentVestedFor( msg.sender );\r\n\r\n        if ( percentVested >= 10000 ) { // if fully vested, pay full amount & clear info\r\n            delete bondInfo[msg.sender];\r\n            totalDebt = totalDebt.sub( info.valueRemaining );\r\n            IERC20( OHM ).transfer( msg.sender, info.payoutRemaining );\r\n            return info.payoutRemaining;\r\n        } else {\r\n            // calculate reductions from vesting\r\n            uint value = info.valueRemaining.mul( percentVested ).div( 10000 );\r\n            uint payout = info.payoutRemaining.mul( percentVested ).div( 10000 );\r\n            uint blocksSinceLast = block.number.sub( info.lastBlock );\r\n\r\n            // store updated deposit info\r\n            bondInfo[ msg.sender ] = Bond({\r\n                valueRemaining: info.valueRemaining.sub( value ),\r\n                payoutRemaining: info.payoutRemaining.sub( payout ),\r\n                lastBlock: block.number,\r\n                vestingPeriod: info.vestingPeriod.sub( blocksSinceLast ),\r\n                pricePaid: info.pricePaid\r\n            });\r\n\r\n            // reduce total debt by vested amount\r\n            totalDebt = totalDebt.sub( value );\r\n            // send payout\r\n            IERC20( OHM ).transfer( msg.sender, payout );\r\n\r\n            return payout;\r\n        }\r\n    }\r\n\r\n    /**\r\n        @notice use maxPayoutPercent to determine maximum bond size\r\n        @return uint\r\n     */\r\n    function maxPayout() public view returns ( uint ) {\r\n        uint circulatingOHM = ICirculatingOHM( circulatingOHMContract ).OHMCirculatingSupply();\r\n        return circulatingOHM.mul( maxPayoutPercent ).div( 10000 );\r\n    }\r\n\r\n    /**\r\n        @notice calculate how far into vesting a depositor is\r\n        @param depositor_ address\r\n        @return _percentVested uint\r\n     */\r\n    function percentVestedFor( address depositor_ ) public view returns ( uint _percentVested ) {\r\n        Bond memory bond = bondInfo[ depositor_ ];\r\n        uint blocksSinceLast = block.number.sub( bond.lastBlock );\r\n        uint vestingPeriod = bond.vestingPeriod;\r\n\r\n        if ( vestingPeriod > 0 ) {\r\n            _percentVested = blocksSinceLast.mul( 10000 ).div( vestingPeriod );\r\n        } else {\r\n            _percentVested = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n        @notice calculate amount of OHM available for claim by depositor\r\n        @param depositor_ address\r\n        @return _pendingPayout uint\r\n     */\r\n    function pendingPayoutFor( address depositor_ ) external view returns ( uint _pendingPayout ) {\r\n        uint percentVested = percentVestedFor( depositor_ );\r\n        uint payoutRemaining = bondInfo[ depositor_ ].payoutRemaining;\r\n\r\n        if ( percentVested >= 10000 ) {\r\n            _pendingPayout = payoutRemaining;\r\n        } else {\r\n            _pendingPayout = payoutRemaining.mul( percentVested ).div( 10000 );\r\n        }\r\n    }\r\n\r\n    /**\r\n        @notice calculate interest due for new bond\r\n        @param value_ uint\r\n        @return _interestDue uint\r\n     */\r\n    function payoutFor( uint value_ ) public view returns ( uint ) {\r\n        return FixedPoint.fraction( value_, bondPrice() ).decode112with18().div( 1e16 );\r\n    }\r\n\r\n    /**\r\n        @notice calculate current bond premium\r\n        @return _price uint\r\n     */\r\n    function bondPrice() public view returns ( uint _price ) {        \r\n        _price = controlVariable.mul( _calcDebtRatio() ).add( 1000000000 ).div( 1e7 );\r\n        if ( _price < minimumPrice ) {\r\n            _price = minimumPrice;\r\n        }\r\n    }\r\n\r\n    /**\r\n        @notice calculate current bond premium without a minimum\r\n        @return _price uint\r\n     */\r\n    function bondPriceWithoutFloor() external view returns ( uint _price ) {\r\n        _price = controlVariable.mul( _calcDebtRatio() ).add( 1000000000 ).div( 1e7 );\r\n    }\r\n\r\n    /**\r\n        @notice converts bond price to DAI value\r\n        @return _price uint\r\n     */\r\n    function bondPriceInDAI() public view returns ( uint _price ) {\r\n        _price = bondPrice().mul( IBondCalculator( bondCalculator ).markdown( LP ) ).div( 1e2 );\r\n    }\r\n\r\n    /**\r\n        @notice calculate current debt ratio\r\n        @return _debtRatio uint\r\n     */\r\n    function debtRatio() external view returns ( uint _debtRatio ) {\r\n        _debtRatio = _calcDebtRatio();\r\n    }\r\n\r\n    function _calcDebtRatio() internal view returns ( uint _debtRatio ) {   \r\n        uint supply = ICirculatingOHM( circulatingOHMContract ).OHMCirculatingSupply();\r\n        _debtRatio = FixedPoint.fraction( \r\n            // Must move the decimal to the right by 9 places to avoid math underflow error\r\n            totalDebt.mul( 1e9 ), \r\n            supply\r\n        ).decode112with18().div( 1e18 );\r\n    }\r\n\r\n    /**\r\n        @notice allow anyone to send lost tokens (excluding LP or OHM) to the DAO\r\n        @return bool\r\n     */\r\n    function recoverLostToken( address token_ ) external returns ( bool ) {\r\n        require( token_ != OHM );\r\n        require( token_ != LP );\r\n        IERC20( token_ ).safeTransfer( DAO, IERC20( token_ ).balanceOf( address(this) ) );\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"OHM_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"LP_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"distributor_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"DAO_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"circulatingOHMContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bondCalculator_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipPushed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAOShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OHM\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondCalculator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"valueRemaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutRemaining\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondPriceInDAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondPriceWithoutFloor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingOHMContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controlVariable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPremium_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"depositor_\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPayoutPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor_\",\"type\":\"address\"}],\"name\":\"pendingPayoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingPayout\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor_\",\"type\":\"address\"}],\"name\":\"percentVestedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentVested\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"pushManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"recoverLostToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"controlVariable_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTerm_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPayout_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DAOShare_\",\"type\":\"uint256\"}],\"name\":\"setBondTerm\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingTerm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"OlympusBondDepository","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000383518188c0c6d7730d91b2c03a03c837814a89900000000000000000000000034d7d7aaf50ad4944b70b320acb24c95fa2def7c000000000000000000000000886ce997aa9ee4f8c2282e182ab72a705762399d000000000000000000000000ce6568338708400d03f430d29f2eb40a33a3f4c4000000000000000000000000245cc372c84b3645bf0ffe6538620b04a217988b0000000000000000000000000efff9199aa1ac3c3e34e957567c1be8bf295034000000000000000000000000e2cabe86071f6ae31e1b4634baa06522b838a148","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4ea55c180b62b0d1367d83664bf52b44eb37518925acd081554731cf419671f8"}]}