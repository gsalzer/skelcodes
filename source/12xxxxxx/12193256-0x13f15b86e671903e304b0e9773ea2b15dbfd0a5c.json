{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NFTAuctionSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity ^0.6.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract NFTAuctionSale is Ownable {\\n    using SafeMath for uint256;\\n\\n    event NewAuctionItemCreated(uint256 auctionId);\\n    event EmergencyStarted();\\n    event EmergencyStopped();\\n    event BidPlaced(\\n        uint256 auctionId,\\n        address paymentTokenAddress,\\n        uint256 bidId,\\n        address addr,\\n        uint256 bidPrice,\\n        uint256 timestamp,\\n        address transaction\\n    );\\n    event BidReplaced(\\n        uint256 auctionId,\\n        address paymentTokenAddress,\\n        uint256 bidId,\\n        address addr,\\n        uint256 bidPrice,\\n        uint256 timestamp,\\n        address transaction\\n    );\\n\\n    event RewardClaimed(address addr, uint256 auctionId, uint256 tokenCount);\\n    event BidIncreased(\\n        uint256 auctionId,\\n        address paymentTokenAddress,\\n        uint256 bidId,\\n        address addr,\\n        uint256 bidPrice,\\n        uint256 timestamp,\\n        address transaction\\n    );\\n\\n    struct AuctionProgress {\\n        uint256 currentPrice;\\n        address bidder;\\n    }\\n\\n    struct AuctionInfo {\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 totalSupply;\\n        uint256 startPrice;\\n        address paymentTokenAddress; // ERC20\\n        address auctionItemAddress; // ERC1155\\n        uint256 auctionItemTokenId;\\n    }\\n\\n    address public salesPerson = address(0);\\n\\n    bool private emergencyStop = false;\\n\\n    mapping(uint256 => AuctionInfo) private auctions;\\n    mapping(uint256 => mapping(uint256 => AuctionProgress)) private bids;\\n    mapping(uint256 => mapping(address => uint256)) private currentBids;\\n\\n    uint256 public totalAuctionCount = 0;\\n\\n    constructor() public {}\\n\\n    modifier onlySalesPerson {\\n        require(\\n            _msgSender() == salesPerson,\\n            \\\"Only salesPerson can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    function setSalesPerson(address _salesPerson) external onlyOwner {\\n        salesPerson = _salesPerson;\\n    }\\n\\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function getBatchAuctions(uint256 fromId)\\n        external\\n        view\\n        returns (AuctionInfo[] memory)\\n    {\\n        require(fromId <= totalAuctionCount, \\\"Invalid auction id\\\");\\n        AuctionInfo[] memory currentAuctions =\\n            new AuctionInfo[](totalAuctionCount - fromId + 1);\\n        for (uint256 i = fromId; i <= totalAuctionCount; i++) {\\n            AuctionInfo storage auction = auctions[i];\\n            currentAuctions[i - fromId] = auction;\\n        }\\n        return currentAuctions;\\n    }\\n\\n    function getBids(uint256 auctionId)\\n        external\\n        view\\n        returns (AuctionProgress[] memory)\\n    {\\n        require(auctionId <= totalAuctionCount, \\\"Invalid auction id\\\");\\n        AuctionInfo storage auction = auctions[auctionId];\\n        AuctionProgress[] memory lBids =\\n            new AuctionProgress[](auction.totalSupply);\\n        mapping(uint256 => AuctionProgress) storage auctionBids =\\n            bids[auctionId];\\n        for (uint256 i = 0; i < auction.totalSupply; i++) {\\n            AuctionProgress storage lBid = auctionBids[i];\\n            lBids[i] = lBid;\\n        }\\n        return lBids;\\n    }\\n\\n    /// @notice Get max bid price in the specified auction\\n    /// @param auctionId Auction Id\\n    /// @return the max bid price\\n    function getMaxPrice(uint256 auctionId) public view returns (uint256) {\\n        require(auctionId <= totalAuctionCount, \\\"Invalid auction id\\\");\\n        AuctionInfo storage auction = auctions[auctionId];\\n        mapping(uint256 => AuctionProgress) storage auctionBids =\\n            bids[auctionId];\\n\\n        uint256 maxPrice = auctionBids[0].currentPrice;\\n        for (uint256 i = 1; i < auction.totalSupply; i++) {\\n            maxPrice = max(maxPrice, auctionBids[i].currentPrice);\\n        }\\n\\n        return maxPrice;\\n    }\\n\\n    /// @notice Get min bid price in the specified auction\\n    /// @param auctionId Auction Id\\n    /// @return the min bid price\\n    function getMinPrice(uint256 auctionId) public view returns (uint256) {\\n        require(auctionId <= totalAuctionCount, \\\"Invalid auction id\\\");\\n        AuctionInfo storage auction = auctions[auctionId];\\n        mapping(uint256 => AuctionProgress) storage auctionBids =\\n            bids[auctionId];\\n\\n        uint256 minPrice = auctionBids[0].currentPrice;\\n        for (uint256 i = 1; i < auction.totalSupply; i++) {\\n            minPrice = min(minPrice, auctionBids[i].currentPrice);\\n        }\\n\\n        return minPrice;\\n    }\\n\\n    /// @notice Transfers ERC20 tokens holding in contract to the contract owner\\n    /// @param tokenAddr ERC20 token address\\n    function transferERC20(address tokenAddr) external onlySalesPerson {\\n        IERC20 erc20 = IERC20(tokenAddr);\\n        erc20.transfer(_msgSender(), erc20.balanceOf(address(this)));\\n    }\\n\\n    /// @notice Transfers ETH holding in contract to the contract owner\\n    function transferETH() external onlySalesPerson {\\n        _msgSender().transfer(address(this).balance);\\n    }\\n\\n    /// @notice Create auction with specific parameters\\n    /// @param paymentTokenAddress ERC20 token address the bidders will pay\\n    /// @param paymentTokenAddress ERC1155 token address for the auction\\n    /// @param auctionItemTokenId Token ID of NFT\\n    /// @param totalSupply ERC20 token address\\n    /// @param startPrice Bid starting price\\n    /// @param startTime Auction starting time\\n    /// @param endTime Auction ending time\\n    function createAuction(\\n        address paymentTokenAddress,\\n        address auctionItemAddress,\\n        uint256 auctionItemTokenId,\\n        uint256 startPrice,\\n        uint256 totalSupply,\\n        uint256 startTime,\\n        uint256 endTime\\n    ) external onlyOwner {\\n        require(\\n            salesPerson != address(0),\\n            \\\"Salesperson address should be valid\\\"\\n        );\\n        require(emergencyStop == false, \\\"Emergency stopped\\\");\\n        require(totalSupply > 0, \\\"Total supply should be greater than 0\\\");\\n        IERC1155 auctionToken = IERC1155(auctionItemAddress);\\n\\n        // check if the input address is ERC1155\\n        require(\\n            auctionToken.supportsInterface(0xd9b67a26),\\n            \\\"Auction token is not ERC1155\\\"\\n        );\\n\\n        // check NFT balance\\n        require(\\n            auctionToken.balanceOf(salesPerson, auctionItemTokenId) >=\\n                totalSupply,\\n            \\\"NFT balance not sufficient\\\"\\n        );\\n\\n        // check allowance\\n        require(\\n            auctionToken.isApprovedForAll(salesPerson, address(this)),\\n            \\\"Auction token from sales person has no allowance for this contract\\\"\\n        );\\n\\n        // Init auction struct\\n\\n        // increment auction index and push\\n        totalAuctionCount = totalAuctionCount.add(1);\\n        auctions[totalAuctionCount] = AuctionInfo(\\n            startTime,\\n            endTime,\\n            totalSupply,\\n            startPrice,\\n            paymentTokenAddress,\\n            auctionItemAddress,\\n            auctionItemTokenId\\n        );\\n\\n        // emit event\\n        emit NewAuctionItemCreated(totalAuctionCount);\\n    }\\n\\n    /// @notice Claim auction reward tokens to the caller\\n    /// @param auctionId Auction Id\\n    function claimReward(uint256 auctionId) external {\\n        require(emergencyStop == false, \\\"Emergency stopped\\\");\\n        require(auctionId <= totalAuctionCount, \\\"Auction id is invalid\\\");\\n\\n        require(\\n            auctions[auctionId].endTime <= block.timestamp,\\n            \\\"Auction is not ended yet\\\"\\n        );\\n\\n        mapping(address => uint256) storage auctionCurrentBids =\\n            currentBids[auctionId];\\n        uint256 totalWon = auctionCurrentBids[_msgSender()];\\n\\n        require(totalWon > 0, \\\"Nothing to claim\\\");\\n\\n        auctionCurrentBids[_msgSender()] = 0;\\n\\n        IERC1155(auctions[auctionId].auctionItemAddress).safeTransferFrom(\\n            salesPerson,\\n            _msgSender(),\\n            auctions[auctionId].auctionItemTokenId,\\n            totalWon,\\n            \\\"\\\"\\n        );\\n\\n        emit RewardClaimed(_msgSender(), auctionId, totalWon);\\n    }\\n\\n    /// @notice Increase the caller's bid price\\n    /// @param auctionId Auction Id\\n    function increaseMyBidETH(uint256 auctionId) external payable {\\n        require(emergencyStop == false, \\\"Emergency stopped\\\");\\n        require(auctionId <= totalAuctionCount, \\\"Auction id is invalid\\\");\\n        require(msg.value > 0, \\\"Wrong amount\\\");\\n        require(\\n            block.timestamp < auctions[auctionId].endTime,\\n            \\\"Auction is ended\\\"\\n        );\\n\\n        AuctionInfo storage auction = auctions[auctionId];\\n\\n        require(\\n            auction.paymentTokenAddress == address(0),\\n            \\\"Cannot use ETH in this auction\\\"\\n        );\\n\\n        uint256 count = currentBids[auctionId][_msgSender()];\\n        require(count > 0, \\\"Not in current bids\\\");\\n\\n        mapping(uint256 => AuctionProgress) storage auctionBids =\\n            bids[auctionId];\\n\\n        // Iterate currentBids and increment currentPrice\\n        for (uint256 i = 0; i < auction.totalSupply; i++) {\\n            AuctionProgress storage progress = auctionBids[i];\\n            if (progress.bidder == _msgSender()) {\\n                progress.currentPrice = progress.currentPrice.add(msg.value);\\n                emit BidIncreased(\\n                    auctionId,\\n                    auction.paymentTokenAddress,\\n                    i,\\n                    _msgSender(),\\n                    progress.currentPrice,\\n                    block.timestamp,\\n                    tx.origin\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice Place bid on auction with the specified price with ETH\\n    /// @param auctionId Auction Id\\n    function makeBidETH(uint256 auctionId)\\n        external\\n        payable\\n        isBidAvailable(auctionId)\\n    {\\n        uint256 minIndex = 0;\\n        uint256 minPrice = getMinPrice(auctionId);\\n\\n        AuctionInfo storage auction = auctions[auctionId];\\n        require(\\n            auction.paymentTokenAddress == address(0),\\n            \\\"Cannot use ETH in this auction\\\"\\n        );\\n        require(\\n            msg.value >= auction.startPrice && msg.value > minPrice,\\n            \\\"Cannot place bid at low price\\\"\\n        );\\n\\n        mapping(address => uint256) storage auctionCurrentBids =\\n            currentBids[auctionId];\\n        require(\\n            auctionCurrentBids[_msgSender()] < 1,\\n            \\\"Max bid per wallet exceeded\\\"\\n        );\\n\\n        mapping(uint256 => AuctionProgress) storage auctionBids =\\n            bids[auctionId];\\n\\n        for (uint256 i = 0; i < auction.totalSupply; i++) {\\n            // Just place the bid if remaining\\n            if (auctionBids[i].currentPrice == 0) {\\n                minIndex = i;\\n                break;\\n            } else if (auctionBids[i].currentPrice == minPrice) {\\n                // Get last minimum price bidder\\n                minIndex = i;\\n            }\\n        }\\n\\n        if (auctionBids[minIndex].currentPrice != 0) {\\n            // return previous bidders tokens\\n            (bool sent, bytes memory data) =\\n                address(auctionBids[minIndex].bidder).call{\\n                    value: auctionBids[minIndex].currentPrice\\n                }(\\\"\\\");\\n            require(sent, \\\"Failed to send Ether\\\");\\n\\n            auctionCurrentBids[auctionBids[minIndex].bidder]--;\\n\\n            emit BidReplaced(\\n                auctionId,\\n                auction.paymentTokenAddress,\\n                minIndex,\\n                auctionBids[minIndex].bidder,\\n                auctionBids[minIndex].currentPrice,\\n                block.timestamp,\\n                tx.origin\\n            );\\n        }\\n\\n        auctionBids[minIndex].currentPrice = msg.value;\\n        auctionBids[minIndex].bidder = _msgSender();\\n\\n        auctionCurrentBids[_msgSender()] = auctionCurrentBids[_msgSender()].add(\\n            1\\n        );\\n\\n        emit BidPlaced(\\n            auctionId,\\n            auction.paymentTokenAddress,\\n            minIndex,\\n            _msgSender(),\\n            msg.value,\\n            block.timestamp,\\n            tx.origin\\n        );\\n    }\\n\\n    /// @notice Increase the caller's bid price\\n    /// @param auctionId Auction Id\\n    /// @param increaseAmount The incrementing price than the original bid\\n    function increaseMyBid(uint256 auctionId, uint256 increaseAmount) external {\\n        require(emergencyStop == false, \\\"Emergency stopped\\\");\\n        require(auctionId <= totalAuctionCount, \\\"Auction id is invalid\\\");\\n        require(increaseAmount > 0, \\\"Wrong amount\\\");\\n        require(\\n            block.timestamp < auctions[auctionId].endTime,\\n            \\\"Auction is ended\\\"\\n        );\\n\\n        AuctionInfo storage auction = auctions[auctionId];\\n\\n        require(auction.paymentTokenAddress != address(0), \\\"Wrong function\\\");\\n\\n        uint256 count = currentBids[auctionId][_msgSender()];\\n        require(count > 0, \\\"Not in current bids\\\");\\n\\n        IERC20(auction.paymentTokenAddress).transferFrom(\\n            _msgSender(),\\n            address(this),\\n            increaseAmount * count\\n        );\\n\\n        mapping(uint256 => AuctionProgress) storage auctionBids =\\n            bids[auctionId];\\n\\n        // Iterate currentBids and increment currentPrice\\n        for (uint256 i = 0; i < auction.totalSupply; i++) {\\n            AuctionProgress storage progress = auctionBids[i];\\n            if (progress.bidder == _msgSender()) {\\n                progress.currentPrice = progress.currentPrice.add(\\n                    increaseAmount\\n                );\\n                emit BidIncreased(\\n                    auctionId,\\n                    auction.paymentTokenAddress,\\n                    i,\\n                    _msgSender(),\\n                    progress.currentPrice,\\n                    block.timestamp,\\n                    tx.origin\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice Place bid on auction with the specified price\\n    /// @param auctionId Auction Id\\n    /// @param bidPrice ERC20 token amount\\n    function makeBid(uint256 auctionId, uint256 bidPrice)\\n        external\\n        isBidAvailable(auctionId)\\n    {\\n        uint256 minIndex = 0;\\n        uint256 minPrice = getMinPrice(auctionId);\\n\\n        AuctionInfo storage auction = auctions[auctionId];\\n        require(auction.paymentTokenAddress != address(0), \\\"Wrong function\\\");\\n        IERC20 paymentToken = IERC20(auction.paymentTokenAddress);\\n        require(\\n            bidPrice >= auction.startPrice && bidPrice > minPrice,\\n            \\\"Cannot place bid at low price\\\"\\n        );\\n\\n        uint256 allowance = paymentToken.allowance(_msgSender(), address(this));\\n        require(allowance >= bidPrice, \\\"Check the token allowance\\\");\\n\\n        mapping(address => uint256) storage auctionCurrentBids =\\n            currentBids[auctionId];\\n        require(\\n            auctionCurrentBids[_msgSender()] < 1,\\n            \\\"Max bid per wallet exceeded\\\"\\n        );\\n\\n        mapping(uint256 => AuctionProgress) storage auctionBids =\\n            bids[auctionId];\\n\\n        for (uint256 i = 0; i < auction.totalSupply; i++) {\\n            // Just place the bid if remaining\\n            if (auctionBids[i].currentPrice == 0) {\\n                minIndex = i;\\n                break;\\n            } else if (auctionBids[i].currentPrice == minPrice) {\\n                // Get last minimum price bidder\\n                minIndex = i;\\n            }\\n        }\\n\\n        // Replace current minIndex bidder with the msg.sender\\n        paymentToken.transferFrom(_msgSender(), address(this), bidPrice);\\n\\n        if (auctionBids[minIndex].currentPrice != 0) {\\n            // return previous bidders tokens\\n            paymentToken.transferFrom(\\n                address(this),\\n                auctionBids[minIndex].bidder,\\n                auctionBids[minIndex].currentPrice\\n            );\\n            auctionCurrentBids[auctionBids[minIndex].bidder]--;\\n\\n            emit BidReplaced(\\n                auctionId,\\n                auction.paymentTokenAddress,\\n                minIndex,\\n                auctionBids[minIndex].bidder,\\n                auctionBids[minIndex].currentPrice,\\n                block.timestamp,\\n                tx.origin\\n            );\\n        }\\n\\n        auctionBids[minIndex].currentPrice = bidPrice;\\n        auctionBids[minIndex].bidder = _msgSender();\\n\\n        auctionCurrentBids[_msgSender()] = auctionCurrentBids[_msgSender()].add(\\n            1\\n        );\\n\\n        emit BidPlaced(\\n            auctionId,\\n            auction.paymentTokenAddress,\\n            minIndex,\\n            _msgSender(),\\n            bidPrice,\\n            block.timestamp,\\n            tx.origin\\n        );\\n    }\\n\\n    modifier isBidAvailable(uint256 auctionId) {\\n        require(\\n            !emergencyStop &&\\n                auctionId <= totalAuctionCount &&\\n                auctions[auctionId].startTime <= block.timestamp &&\\n                auctions[auctionId].endTime > block.timestamp\\n        );\\n        _;\\n    }\\n\\n    /// @notice Check the auction is finished\\n    /// @param auctionId Auction Id\\n    /// @return bool true if finished, otherwise false\\n    function isAuctionFinished(uint256 auctionId) external view returns (bool) {\\n        require(auctionId <= totalAuctionCount, \\\"Invalid auction id\\\");\\n        return (emergencyStop || auctions[auctionId].endTime < block.timestamp);\\n    }\\n\\n    /// @notice Get remaining time for the auction\\n    /// @param auctionId Auction Id\\n    /// @return uint the remaining time for the auction\\n    function getTimeRemaining(uint256 auctionId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        require(auctionId <= totalAuctionCount, \\\"Invalid auction id\\\");\\n        return auctions[auctionId].endTime - block.timestamp;\\n    }\\n\\n    /// @notice Start emergency, only owner action\\n    function setEmergencyStart() external onlyOwner {\\n        emergencyStop = true;\\n        emit EmergencyStarted();\\n    }\\n\\n    /// @notice Stop emergency, only owner action\\n    function setEmergencyStop() external onlyOwner {\\n        emergencyStop = false;\\n        emit EmergencyStopped();\\n    }\\n\\n    /// @notice Change start time for auction\\n    /// @param auctionId Auction Id\\n    /// @param startTime new start time\\n    function setStartTimeForAuction(uint256 auctionId, uint256 startTime)\\n        external\\n        onlyOwner\\n    {\\n        require(auctionId <= totalAuctionCount, \\\"Invalid auction id\\\");\\n        auctions[auctionId].startTime = startTime;\\n    }\\n\\n    /// @notice Change end time for auction\\n    /// @param auctionId Auction Id\\n    /// @param endTime new end time\\n    function setEndTimeForAuction(uint256 auctionId, uint256 endTime)\\n        external\\n        onlyOwner\\n    {\\n        require(auctionId <= totalAuctionCount, \\\"Invalid auction id\\\");\\n        auctions[auctionId].endTime = endTime;\\n    }\\n\\n    /// @notice Change total supply for auction\\n    /// @param auctionId Auction Id\\n    /// @param totalSupply new Total supply\\n    function setTotalSupplyForAuction(uint256 auctionId, uint256 totalSupply)\\n        external\\n        onlyOwner\\n    {\\n        require(totalSupply > 0, \\\"Total supply should be greater than 0\\\");\\n        require(auctionId <= totalAuctionCount, \\\"Invalid auction id\\\");\\n        auctions[auctionId].totalSupply = totalSupply;\\n    }\\n\\n    /// @notice Change start price for auction\\n    /// @param auctionId Auction Id\\n    /// @param startPrice new Total supply\\n    function setStartPriceForAuction(uint256 auctionId, uint256 startPrice)\\n        external\\n        onlyOwner\\n    {\\n        require(auctionId <= totalAuctionCount, \\\"Invalid auction id\\\");\\n        auctions[auctionId].startPrice = startPrice;\\n    }\\n\\n    /// @notice Change ERC20 token address for auction\\n    /// @param auctionId Auction Id\\n    /// @param paymentTokenAddress new ERC20 token address\\n    function setPaymentTokenAddressForAuction(\\n        uint256 auctionId,\\n        address paymentTokenAddress\\n    ) external onlyOwner {\\n        require(auctionId <= totalAuctionCount, \\\"Invalid auction id\\\");\\n        auctions[auctionId].paymentTokenAddress = paymentTokenAddress;\\n    }\\n\\n    /// @notice Change auction item address for auction\\n    /// @param auctionId Auction Id\\n    /// @param auctionItemAddress new Auctioned item address\\n    function setAuctionItemAddress(\\n        uint256 auctionId,\\n        address auctionItemAddress\\n    ) external onlyOwner {\\n        require(auctionId <= totalAuctionCount, \\\"Invalid auction id\\\");\\n        auctions[auctionId].auctionItemAddress = auctionItemAddress;\\n    }\\n\\n    /// @notice Change auction item token id\\n    /// @param auctionId Auction Id\\n    /// @param auctionItemTokenId new token id\\n    function setAuctionItemTokenId(\\n        uint256 auctionId,\\n        uint256 auctionItemTokenId\\n    ) external onlyOwner {\\n        require(auctionId <= totalAuctionCount, \\\"Invalid auction id\\\");\\n        auctions[auctionId].auctionItemTokenId = auctionItemTokenId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transaction\",\"type\":\"address\"}],\"name\":\"BidIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transaction\",\"type\":\"address\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transaction\",\"type\":\"address\"}],\"name\":\"BidReplaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EmergencyStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"NewAuctionItemCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auctionItemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"auctionItemTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromId\",\"type\":\"uint256\"}],\"name\":\"getBatchAuctions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"auctionItemAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"auctionItemTokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTAuctionSale.AuctionInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getBids\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"currentPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"internalType\":\"struct NFTAuctionSale.AuctionProgress[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getMaxPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getMinPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getTimeRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"increaseAmount\",\"type\":\"uint256\"}],\"name\":\"increaseMyBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"increaseMyBidETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"isAuctionFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"}],\"name\":\"makeBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"makeBidETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salesPerson\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"auctionItemAddress\",\"type\":\"address\"}],\"name\":\"setAuctionItemAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionItemTokenId\",\"type\":\"uint256\"}],\"name\":\"setAuctionItemTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergencyStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergencyStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"setEndTimeForAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentTokenAddress\",\"type\":\"address\"}],\"name\":\"setPaymentTokenAddressForAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_salesPerson\",\"type\":\"address\"}],\"name\":\"setSalesPerson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"}],\"name\":\"setStartPriceForAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTimeForAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"setTotalSupplyForAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAuctionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NFTAuctionSale","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}