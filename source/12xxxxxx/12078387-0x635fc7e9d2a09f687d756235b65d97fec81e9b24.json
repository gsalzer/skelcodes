{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/roger/Dev/Blockchain/Truffle/code-collect/contracts/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Same version as openzeppelin 3.4\\npragma solidity >=0.6.0 <0.8.0;\\n\\nlibrary Utils\\n{\\n    //---------------------------\\n    // Convert\\n    //\\n\\n    function convertBlockHashToAddress(uint256 blockNumber) public view returns (address)\\n    {\\n        // https://docs.soliditylang.org/en/v0.7.6/types.html#address\\n        return address(uint160(bytes20(blockhash(blockNumber))));\\n    }\\n\\n    function getBlockSeed() public view returns (bytes20)\\n    {\\n        address s = convertBlockHashToAddress(block.number);\\n        if( s == address(0) && block.number > 0 )\\n            s = convertBlockHashToAddress(block.number-1);\\n        return bytes20(s);\\n    }\\n\\n    function convertBytesToHexString(bytes memory values) public pure returns (string memory)\\n    {\\n        bytes memory result = new bytes(values.length*2);\\n        for(uint8 i = 0; i < values.length; i++)\\n        {\\n            for(uint8 j = 0 ; j < 2; j++)\\n            {\\n                uint8 v = ( j == 0 ? uint8(values[i]>>4) : uint8(values[i] & 0x0f) );\\n                result[i*2+j] = v > 9 ? byte(55+v) : byte(48+v);\\n            }\\n        }\\n        return string(result);\\n    }\\n\\n    function convertByteToHexString(byte b) public pure returns (string memory)\\n    {\\n        bytes memory result = new bytes(2);\\n        for(uint8 j = 0 ; j < 2; j++)\\n        {\\n            uint8 v = ( j == 0 ? uint8(b>>4) : uint8(b & 0x0f) );\\n            result[j] = v > 9 ? byte(55+v) : byte(48+v);\\n        }\\n        return string(result);\\n    }\\n\\n    //---------------------------\\n    // Math\\n    //\\n\\n    function clamp_uint256(uint256 value, uint256 min, uint256 max) public pure returns (uint256)\\n    {\\n        return value < min ? min : value > max ? max : value;\\n    }\\n\\n    function min_uint256(uint256 a, uint256 b) public pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function max_uint256(uint256 a, uint256 b) public pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    function percent_uint256(uint256 value, uint256 percentage) public pure returns (uint256)\\n    {\\n        return value * percentage / 100;\\n    }\\n\\n    //---------------------------\\n    // Pixels\\n    //\\n    function step_int(int min, int max, int stepCount, int stepIndex) public pure returns (int)\\n    {\\n        if( stepIndex <= 0 || stepCount <= 1 || min == max )\\n            return min;\\n        if( stepIndex >= stepCount - 1 )\\n            return max;\\n        int d = (max - min) / (stepCount - 1);\\n        return min + (d * stepIndex);\\n    }\\n    function step_uint8(uint8 min, uint8 max, uint8 stepCount, uint8 stepIndex) public pure returns (uint8)\\n    {\\n        int result = step_int( min, max, stepCount, stepIndex );\\n        return result < 0 ? 0 : result > 255 ? 255 : uint8(result);\\n    }\\n\\n    function map_uint256(uint256 value, uint256 min, uint256 max) public pure returns (uint256)\\n    {\\n        return min + ((value * (max - min)) / 255);\\n    }\\n\\n    function map_uint8(uint8 value, uint8 min, uint8 max) public pure returns (uint8)\\n    {\\n        return uint8(int(min) + ((int(value) * int(max - min)) / 255));\\n    }\\n\\n    function rshift_bytes20(bytes20 buffer, uint256 bits) public pure returns (bytes20)\\n    {\\n        uint256 b = bits % (20*8);\\n        return (buffer >> b) | (buffer << (20*8-b));\\n    }\\n\\n    function lshift_bytes20(bytes20 buffer, uint256 bits) public pure returns (bytes20)\\n    {\\n        uint256 b = bits % (20*8);\\n        return (buffer << b) | (buffer >> (20*8-b));\\n    }\\n\\n    function sum_bytes20(bytes20 buffer) public pure returns (uint256)\\n    {\\n        uint256 sum = 0;\\n        for(uint8 i = 0 ; i < 20 ; ++i) {\\n            sum += uint8(buffer[i]);\\n        }\\n        return sum;\\n    }\\n\\n\\n    // HSV Conversion from\\n    // https://stackoverflow.com/a/14733008/360930\\n    function hsvToRgb(uint8 h, uint8 s, uint8 v) public pure returns (uint8, uint8, uint8)\\n    {\\n        if (s == 0) {\\n            return (v, v, v);\\n        }\\n        int region = h / 43;\\n        int remainder = (h - (region * 43)) * 6; \\n        int p = (v * (255 - s)) >> 8;\\n        int q = (v * (255 - ((s * remainder) >> 8))) >> 8;\\n        int t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;\\n        if(region == 0) {\\n            return(v, uint8(t), uint8(p));\\n        } else if (region == 1) {\\n            return(uint8(q), v, uint8(p));\\n        } else if (region == 2) {\\n            return(uint8(p), v, uint8(t));\\n        } else if (region == 3) {\\n            return(uint8(p), uint8(q), v);\\n        } else if (region == 4) {\\n            return(uint8(t), uint8(p), v);\\n        }\\n        return(v, uint8(p), uint8(q));\\n    }\\n\\n    function reduceColors(bytes20 s0, bytes20 s1, bytes20 s2, uint8 colorCount, uint256 offset) public pure returns (uint8[] memory)\\n    {\\n        uint8[] memory c3 = new uint8[](colorCount*3);\\n        uint256 sum0 = sum_bytes20(s0) + sum_bytes20(s1);\\n        uint256 sum2 = sum_bytes20(s2);\\n        bytes20 hues = lshift_bytes20(s2, sum2 + (offset*8));\\n        for(uint8 c = 0 ; c < colorCount ; c++) {\\n            uint8 h = uint8(hues[c]);\\n            uint8 s = map_uint8(uint8((uint256(uint8(hues[c+10])) + sum0*3) % 256), (64+(5-(colorCount/2))*30), 255);\\n            uint8 v = map_uint8(h|uint8((uint256(uint8(hues[c+10])) + sum0) % 256), (127+(5-(colorCount/2))*30), 255);\\n            h = uint8(map_uint256(h, sum2, sum2+map_uint8(uint8((sum2+sum0)%256),100,240))%256);\\n            // h = uint8(map_uint256(h, lh, lh+192)%256);\\n            (c3[c*3+0], c3[c*3+1], c3[c*3+2]) = hsvToRgb(h,s,v);\\n        }\\n        return (c3);\\n    }\\n\\n    //\\n    // From truffle/Assert.sol\\n    // MIT Licence\\n    //\\n    uint8 constant ZERO = uint8(bytes1('0'));\\n    uint8 constant A = uint8(bytes1('a'));\\n    bytes1 constant MINUS = bytes1('-');\\n    function utoa(uint n) public pure returns (string memory)\\n    {\\n        return utoa(n, 10);\\n    }\\n    function utoa(uint n, uint8 radix) public pure returns (string memory) {\\n        if (n == 0 || radix < 2 || radix > 16)\\n            return '0';\\n        bytes memory bts = new bytes(256);\\n        uint i;\\n        while (n > 0) {\\n            bts[i++] = _utoa(uint8(uint(n % radix))); // Turn it to ascii.\\n            n /= radix;\\n        }\\n        // Reverse\\n        bytes memory rev = new bytes(i);\\n        for (uint j = 0; j < i; j++)\\n            rev[j] = bts[i - j - 1];\\n        return string(rev);\\n    }\\n    function _utoa(uint8 u) public pure returns (bytes1) {\\n        if (u < 10)\\n            return bytes1(u + ZERO);\\n        else if (u < 16)\\n            return bytes1(u - 10 + A);\\n        else\\n            return 0;\\n    }\\n\\n}\\n\\n\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"u\",\"type\":\"uint8\"}],\"name\":\"_utoa\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"clamp_uint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"convertBlockHashToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes1\",\"name\":\"b\",\"type\":\"bytes1\"}],\"name\":\"convertByteToHexString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"values\",\"type\":\"bytes\"}],\"name\":\"convertBytesToHexString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockSeed\",\"outputs\":[{\"internalType\":\"bytes20\",\"name\":\"\",\"type\":\"bytes20\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"h\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"hsvToRgb\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"buffer\",\"type\":\"bytes20\"},{\"internalType\":\"uint256\",\"name\":\"bits\",\"type\":\"uint256\"}],\"name\":\"lshift_bytes20\",\"outputs\":[{\"internalType\":\"bytes20\",\"name\":\"\",\"type\":\"bytes20\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"map_uint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"value\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"max\",\"type\":\"uint8\"}],\"name\":\"map_uint8\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"max_uint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"min_uint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"percent_uint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"s0\",\"type\":\"bytes20\"},{\"internalType\":\"bytes20\",\"name\":\"s1\",\"type\":\"bytes20\"},{\"internalType\":\"bytes20\",\"name\":\"s2\",\"type\":\"bytes20\"},{\"internalType\":\"uint8\",\"name\":\"colorCount\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"reduceColors\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"buffer\",\"type\":\"bytes20\"},{\"internalType\":\"uint256\",\"name\":\"bits\",\"type\":\"uint256\"}],\"name\":\"rshift_bytes20\",\"outputs\":[{\"internalType\":\"bytes20\",\"name\":\"\",\"type\":\"bytes20\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"min\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"max\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"stepCount\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"stepIndex\",\"type\":\"int256\"}],\"name\":\"step_int\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"min\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"max\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"stepCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"stepIndex\",\"type\":\"uint8\"}],\"name\":\"step_uint8\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"buffer\",\"type\":\"bytes20\"}],\"name\":\"sum_bytes20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"radix\",\"type\":\"uint8\"}],\"name\":\"utoa\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"utoa\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"Utils","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}