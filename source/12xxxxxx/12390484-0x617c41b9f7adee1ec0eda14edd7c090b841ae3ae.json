{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Cover.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20/SafeERC20.sol\\\";\\nimport \\\"./ERC20/IERC20.sol\\\";\\nimport \\\"./proxy/Clones.sol\\\";\\nimport \\\"./utils/Create2.sol\\\";\\nimport \\\"./utils/Initializable.sol\\\";\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"./utils/ReentrancyGuard.sol\\\";\\nimport \\\"./utils/StringHelper.sol\\\";\\nimport \\\"./interfaces/ICover.sol\\\";\\nimport \\\"./interfaces/ICoverERC20.sol\\\";\\nimport \\\"./interfaces/IOwnable.sol\\\";\\nimport \\\"./interfaces/ICoverPool.sol\\\";\\nimport \\\"./interfaces/ICoverPoolFactory.sol\\\";\\nimport \\\"./interfaces/ICovTokenProxy.sol\\\";\\n\\n/**\\n * @title Cover contract\\n * @author crypto-pumpkin\\n *  - Holds collateral funds\\n *  - Mints and burns CovTokens (CoverERC20)\\n *  - Handles redeem with or without an accepted claim\\n */\\ncontract Cover is ICover, Initializable, ReentrancyGuard, Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 public override constant BASE_SCALE = 1e18;\\n\\n  bool public override deployComplete; // once true, never false\\n  uint48 public override expiry;\\n  address public override collateral;\\n  ICoverERC20 public override noclaimCovToken;\\n  string public override name; // Yearn_0_DAI_12_31_21\\n  uint256 public override feeRate; // BASE_SCALE, cannot be changed\\n  uint256 public override mintRatio; // BASE_SCALE, cannot be changed, 1 collateral mint mintRatio * 1 covTokens\\n  uint256 public override totalCoverage; // in covTokens\\n  uint256 public override claimNonce;\\n\\n  ICoverERC20[] public override futureCovTokens;\\n  mapping(bytes32 => ICoverERC20) public override claimCovTokenMap;\\n  // future token => CLAIM Token\\n  mapping(ICoverERC20 => ICoverERC20) public override futureCovTokenMap;\\n\\n  modifier onlyNotPaused() {\\n    require(!_factory().paused(), \\\"Cover: paused\\\");\\n    _;\\n  }\\n\\n  /// @dev Initialize, called once\\n  function initialize (\\n    string calldata _name,\\n    uint48 _expiry,\\n    address _collateral,\\n    uint256 _mintRatio,\\n    uint256 _claimNonce\\n  ) public initializer {\\n    initializeOwner();\\n    name = _name;\\n    expiry = _expiry;\\n    collateral = _collateral;\\n    mintRatio = _mintRatio;\\n    claimNonce = _claimNonce;\\n    uint256 yearlyFeeRate = _factory().yearlyFeeRate();\\n    feeRate = yearlyFeeRate * (uint256(_expiry) - block.timestamp) / 365 days;\\n\\n    noclaimCovToken = _createCovToken(\\\"NC_\\\");\\n    if (_coverPool().extendablePool()) {\\n      futureCovTokens.push(_createCovToken(\\\"C_FUT0_\\\"));\\n    }\\n    deploy();\\n  }\\n\\n  /// @notice only CoverPool can mint, collateral is transfered in CoverPool\\n  function mint(uint256 _receivedColAmt, address _receiver) external override onlyOwner nonReentrant {\\n    require(deployComplete, \\\"Cover: deploy incomplete\\\");\\n    ICoverPool coverPool = _coverPool();\\n    require(coverPool.claimNonce() == claimNonce, \\\"Cover: nonces dont match\\\");\\n\\n    // mintAmount has same decimals of covTokens == collateral decimals\\n    uint256 mintAmount = _receivedColAmt * mintRatio / BASE_SCALE;\\n    totalCoverage = totalCoverage + mintAmount;\\n\\n    (bytes32[] memory _riskList) = coverPool.getRiskList();\\n    for (uint i = 0; i < _riskList.length; i++) {\\n      claimCovTokenMap[_riskList[i]].mint(_receiver, mintAmount);\\n    }\\n    noclaimCovToken.mint(_receiver, mintAmount);\\n    _handleLatestFutureToken(_receiver, mintAmount, true /* mint */);\\n  }\\n\\n  /// @notice normal redeem (no claim accepted), but always allow redeem back collateral with all covTokens (must converted all eligible future token to claim tokens)\\n  function redeem(uint256 _amount) external override nonReentrant onlyNotPaused {\\n    ICoverPool coverPool = _coverPool();\\n\\n    if (coverPool.claimNonce() > claimNonce) { // accepted claim, should only redeem for not affected cover\\n      ICoverPool.ClaimDetails memory claim = _claimDetails();\\n      uint256 defaultRedeemDelay = _factory().defaultRedeemDelay();\\n      if (claim.incidentTimestamp > expiry && block.timestamp >= uint256(expiry) + defaultRedeemDelay) {\\n        // not affected cover, default delay passed, redeem with noclaim tokens only\\n        _burnNoclaimAndPay(_amount);\\n      } else { // redeem with all covTokens is always allowed\\n        _redeemWithAllCovTokens(coverPool, _amount);\\n      }\\n    } else if (block.timestamp >= uint256(expiry) + coverPool.noclaimRedeemDelay()) {\\n      // no accepted claim, expired and noclaim delay passed, redeem with noclaim tokens only. Use noclaimRedeemDelay (>= default delay) in case there are pending claims\\n      _burnNoclaimAndPay(_amount);\\n    } else { // redeem with all covTokens is always allowed\\n      _redeemWithAllCovTokens(coverPool, _amount);\\n    }\\n    emit Redeemed('Normal', msg.sender, _amount);\\n  }\\n\\n  /**\\n   * @notice convert future tokens to associated CLAIM tokens and next future tokens\\n   * Once a new risk is added into the CoverPool, the latest futureToken can be converted to the related CLAIM Token and next futureToken (both are created while adding risk to the pool).\\n   * @dev Never covert the lastest future tokens, it will revert\\n   */\\n  function convert(ICoverERC20[] calldata _futureTokens) external override onlyNotPaused {\\n    for (uint256 i = 0; i < _futureTokens.length; i++) {\\n      _convert(_futureTokens[i]);\\n    }\\n  }\\n\\n  /**\\n   * @notice called by owner (CoverPool) only, when a new risk is added to pool the first time\\n   * - create a new claim token for risk\\n   * - point the current latest (last one in futureCovTokens) future token to newly created claim token\\n   * - create a new future token and push to futureCovTokens\\n   */\\n  function addRisk(bytes32 _risk) external override onlyOwner {\\n    if (block.timestamp >= expiry) return;\\n    // if risk is added, return, so owner (CoverPool) can continue\\n    if (address(claimCovTokenMap[_risk]) != address(0)) return;\\n\\n    ICoverERC20[] memory futureCovTokensCopy = futureCovTokens;\\n    uint256 len = futureCovTokensCopy.length;\\n    ICoverERC20 latestFutureCovToken = futureCovTokensCopy[len - 1];\\n\\n    string memory riskName = StringHelper.bytes32ToString(_risk);\\n    ICoverERC20 claimToken = _createCovToken(string(abi.encodePacked(\\\"C_\\\", riskName, \\\"_\\\")));\\n    claimCovTokenMap[_risk] = claimToken;\\n    futureCovTokenMap[latestFutureCovToken] = claimToken;\\n\\n    string memory nextFutureTokenName = string(abi.encodePacked(\\\"C_FUT\\\", StringHelper.uintToString(len), \\\"_\\\"));\\n    futureCovTokens.push(_createCovToken(nextFutureTokenName));\\n  }\\n\\n  /// @notice redeem when there is an accepted claim\\n  function redeemClaim() external override nonReentrant onlyNotPaused {\\n    ICoverPool coverPool = _coverPool();\\n    require(coverPool.claimNonce() > claimNonce, \\\"Cover: no claim accepted\\\");\\n    ICoverPool.ClaimDetails memory claim = _claimDetails();\\n    require(claim.incidentTimestamp <= expiry, \\\"Cover: not eligible\\\");\\n    uint256 defaultRedeemDelay = _factory().defaultRedeemDelay();\\n    require(block.timestamp >= uint256(claim.claimEnactedTimestamp) + defaultRedeemDelay, \\\"Cover: not ready\\\");\\n\\n    // get all claim tokens eligible amount to payout\\n    uint256 eligibleAmount;\\n    for (uint256 i = 0; i < claim.payoutRiskList.length; i++) {\\n      ICoverERC20 covToken = claimCovTokenMap[claim.payoutRiskList[i]];\\n      uint256 amount = covToken.balanceOf(msg.sender);\\n      if (amount > 0) {\\n        eligibleAmount = eligibleAmount + amount * claim.payoutRates[i] / BASE_SCALE;\\n        covToken.burnByCover(msg.sender, amount);\\n      }\\n    }\\n\\n    // if total claim payout rate < 1, get noclaim token eligible amount to payout\\n    if (claim.totalPayoutRate < BASE_SCALE) {\\n      uint256 amount = noclaimCovToken.balanceOf(msg.sender);\\n      if (amount > 0) {\\n        uint256 payoutAmount = amount * (BASE_SCALE - claim.totalPayoutRate) / BASE_SCALE;\\n        eligibleAmount = eligibleAmount + payoutAmount;\\n        noclaimCovToken.burnByCover(msg.sender, amount);\\n      }\\n    }\\n\\n    require(eligibleAmount > 0, \\\"Cover: low covToken balance\\\");\\n    _payCollateral(msg.sender, eligibleAmount);\\n    emit Redeemed('Claim', msg.sender, eligibleAmount);\\n  }\\n\\n  /// @notice multi-tx/block deployment solution. Only called (1+ times depend on size of pool) at creation. Deploy covTokens as many as possible in one tx till not enough gas left.\\n  function deploy() public override {\\n    require(!deployComplete, \\\"Cover: deploy completed\\\");\\n    (bytes32[] memory _riskList) = _coverPool().getRiskList();\\n    uint256 startGas = gasleft();\\n    for (uint256 i = 0; i < _riskList.length; i++) {\\n      if (startGas < _factory().deployGasMin()) return;\\n      ICoverERC20 claimToken = claimCovTokenMap[_riskList[i]];\\n      if (address(claimToken) == address(0)) {\\n        string memory riskName = StringHelper.bytes32ToString(_riskList[i]);\\n        claimToken = _createCovToken(string(abi.encodePacked(\\\"C_\\\", riskName, \\\"_\\\")));\\n        claimCovTokenMap[_riskList[i]] = claimToken;\\n        startGas = gasleft();\\n      }\\n    }\\n    deployComplete = true;\\n    emit CoverDeployCompleted();\\n  }\\n\\n  /// @notice coverageAmt is not respected if there is a claim\\n  function viewRedeemable(address _account, uint256 _coverageAmt) external view override returns (uint256 redeemableAmt) {\\n    ICoverPool coverPool = _coverPool();\\n    if (coverPool.claimNonce() == claimNonce) {\\n      IERC20 colToken = IERC20(collateral);\\n      uint256 colBal = colToken.balanceOf(address(this));\\n      uint256 payoutColAmt = _coverageAmt * BASE_SCALE / mintRatio;\\n      uint256 payoutColAmtAfterFees = payoutColAmt - payoutColAmt * feeRate / BASE_SCALE;\\n      redeemableAmt = colBal > payoutColAmtAfterFees ? payoutColAmtAfterFees : colBal;\\n    } else {\\n      ICoverPool.ClaimDetails memory claim = _claimDetails();\\n      for (uint256 i = 0; i < claim.payoutRiskList.length; i++) {\\n        ICoverERC20 covToken = claimCovTokenMap[claim.payoutRiskList[i]];\\n        uint256 amount = covToken.balanceOf(_account);\\n        redeemableAmt = redeemableAmt + amount * claim.payoutRates[i] / BASE_SCALE;\\n      }\\n      if (claim.totalPayoutRate < BASE_SCALE) {\\n        uint256 amount = noclaimCovToken.balanceOf(_account);\\n        uint256 payoutAmount = amount * (BASE_SCALE - claim.totalPayoutRate) / BASE_SCALE;\\n        redeemableAmt = redeemableAmt + payoutAmount;\\n      }\\n    }\\n  }\\n\\n  function getCovTokens() external view override\\n    returns (\\n      ICoverERC20 _noclaimCovToken,\\n      ICoverERC20[] memory _claimCovTokens,\\n      ICoverERC20[] memory _futureCovTokens)\\n  {\\n    (bytes32[] memory _riskList) = _coverPool().getRiskList();\\n    ICoverERC20[] memory claimCovTokens = new ICoverERC20[](_riskList.length);\\n    for (uint256 i = 0; i < _riskList.length; i++) {\\n      claimCovTokens[i] = ICoverERC20(claimCovTokenMap[_riskList[i]]);\\n    }\\n    return (noclaimCovToken, claimCovTokens, futureCovTokens);\\n  }\\n\\n  /// @notice collectFees send fees to treasury, anyone can call\\n  function collectFees() public override {\\n    IERC20 colToken = IERC20(collateral);\\n    uint256 collateralBal = colToken.balanceOf(address(this));\\n    if (collateralBal == 0) return;\\n    if (totalCoverage == 0) {\\n      colToken.safeTransfer(_factory().treasury(), collateralBal);\\n    } else {\\n      uint256 totalCoverageInCol = totalCoverage * BASE_SCALE / mintRatio;\\n      uint256 feesInTheory = totalCoverageInCol * feeRate / BASE_SCALE;\\n      if (collateralBal > totalCoverageInCol - feesInTheory) {\\n        uint256 feesToCollect = feesInTheory + collateralBal - totalCoverageInCol;\\n        colToken.safeTransfer(_factory().treasury(), feesToCollect);\\n      }\\n    }\\n  }\\n\\n  // transfer collateral (amount - fee) from this contract to recevier\\n  function _payCollateral(address _receiver, uint256 _coverageAmt) private {\\n    collectFees();\\n    totalCoverage = totalCoverage - _coverageAmt;\\n\\n    IERC20 colToken = IERC20(collateral);\\n    uint256 colBal = colToken.balanceOf(address(this));\\n    uint256 payoutColAmt = _coverageAmt * BASE_SCALE / mintRatio;\\n    uint256 payoutColAmtAfterFees = payoutColAmt - payoutColAmt * feeRate / BASE_SCALE;\\n    if (colBal > payoutColAmtAfterFees) {\\n      colToken.safeTransfer(_receiver, payoutColAmtAfterFees);\\n    } else {\\n      colToken.safeTransfer(_receiver, colBal);\\n    }\\n  }\\n\\n  // must convert all future tokens to claim tokens to be able to redeem with all covTokens\\n  function _redeemWithAllCovTokens(ICoverPool coverPool, uint256 _amount) private {\\n    noclaimCovToken.burnByCover(msg.sender, _amount);\\n    _handleLatestFutureToken(msg.sender, _amount, false /* burn */);\\n\\n    (bytes32[] memory riskList) = coverPool.getRiskList();\\n    for (uint i = 0; i < riskList.length; i++) {\\n      claimCovTokenMap[riskList[i]].burnByCover(msg.sender, _amount);\\n    }\\n    _payCollateral(msg.sender, _amount);\\n  }\\n\\n  // note: futureCovTokens can be [] if the pool is not expendable. In that case, nothing to do.\\n  function _handleLatestFutureToken(address _receiver, uint256 _amount, bool _isMint) private {\\n    ICoverERC20[] memory futureCovTokensCopy = futureCovTokens;\\n    uint256 len = futureCovTokensCopy.length;\\n    if (len == 0) return;\\n    ICoverERC20 latestFutureCovToken = futureCovTokensCopy[len - 1];\\n    _isMint\\n      ? latestFutureCovToken.mint(_receiver, _amount)\\n      : latestFutureCovToken.burnByCover(_receiver, _amount);\\n  }\\n\\n  // burn noclaim covToken and pay sender\\n  function _burnNoclaimAndPay(uint256 _amount) private {\\n    noclaimCovToken.burnByCover(msg.sender, _amount);\\n    _payCollateral(msg.sender, _amount);\\n  }\\n\\n  // convert the future token to claim token and mint next future token\\n  function _convert(ICoverERC20 _futureToken) private {\\n    ICoverERC20 claimCovToken = futureCovTokenMap[_futureToken];\\n    require(address(claimCovToken) != address(0), \\\"Cover: nothing to convert\\\");\\n    uint256 amount = _futureToken.balanceOf(msg.sender);\\n    require(amount > 0, \\\"Cover: insufficient balance\\\");\\n    _futureToken.burnByCover(msg.sender, amount);\\n    claimCovToken.mint(msg.sender, amount);\\n    emit FutureTokenConverted(address(_futureToken), address(claimCovToken), amount);\\n\\n    // mint next future covTokens (the last future token points to no tokens)\\n    ICoverERC20[] memory futureCovTokensCopy = futureCovTokens;\\n    for (uint256 i = 0; i < futureCovTokensCopy.length - 1; i++) {\\n      if (futureCovTokensCopy[i] == _futureToken) {\\n        ICoverERC20 futureCovToken = futureCovTokensCopy[i + 1];\\n        futureCovToken.mint(msg.sender, amount);\\n        return;\\n      }\\n    }\\n  }\\n\\n  /// @dev Emits CovTokenCreated\\n  function _createCovToken(string memory _prefix) private returns (ICoverERC20) {\\n    uint8 decimals = uint8(IERC20(collateral).decimals());\\n    require(decimals > 0, \\\"Cover: col decimals is 0\\\");\\n\\n    address coverERC20Impl = _factory().coverERC20Impl();\\n    bytes32 salt = keccak256(abi.encodePacked(_coverPool().name(), expiry, collateral, claimNonce, _prefix));\\n    address proxyAddr = Clones.cloneDeterministic(coverERC20Impl, salt);\\n    ICovTokenProxy(proxyAddr).initialize(\\\"Cover Protocol covToken\\\", string(abi.encodePacked(_prefix, name)), decimals);\\n\\n    emit CovTokenCreated(proxyAddr);\\n    return ICoverERC20(proxyAddr);\\n  }\\n\\n  function _coverPool() private view returns (ICoverPool) {\\n    return ICoverPool(owner());\\n  }\\n\\n  // the owner of this contract is CoverPool, the owner of CoverPool is CoverPoolFactory contract\\n  function _factory() private view returns (ICoverPoolFactory) {\\n    return ICoverPoolFactory(IOwnable(owner()).owner());\\n  }\\n\\n  // get the claim details for the corresponding nonce from coverPool contract\\n  function _claimDetails() private view returns (ICoverPool.ClaimDetails memory) {\\n    return _coverPool().getClaimDetails(claimNonce);\\n  }\\n}\"\r\n    },\r\n    \"contracts/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) - value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function totalSupply() external view returns (uint256);\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `master` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address master, bytes32 salt) internal returns (address instance) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt, address deployer) internal pure returns (address predicted) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, master))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address master, bytes32 salt) internal view returns (address predicted) {\\n        return predictDeterministicAddress(master, salt, address(this));\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/Create2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address payable) {\\n        address payable addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\\n        bytes32 _data = keccak256(\\n            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\\n        );\\n        return address(uint160(uint256(_data)));\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n * @author crypto-pumpkin\\n *\\n * By initialization, the owner account will be the one that called initializeOwner. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Initializable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev COVER: Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function initializeOwner() internal initializer {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/StringHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Cover contract interface. See {Cover}.\\n * @author crypto-pumpkin\\n * Help convert other types to string\\n */\\nlibrary StringHelper {\\n  function stringToBytes32(string calldata str) internal pure returns (bytes32 result) {\\n    bytes memory strBytes = abi.encodePacked(str);\\n    assembly {\\n      result := mload(add(strBytes, 32))\\n    }\\n  }\\n\\n  function bytes32ToString(bytes32 _bytes32) internal pure returns (string memory) {\\n    uint8 i = 0;\\n    while(i < 32 && _bytes32[i] != 0) {\\n        i++;\\n    }\\n    bytes memory bytesArray = new bytes(i);\\n    for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n        bytesArray[i] = _bytes32[i];\\n    }\\n    return string(bytesArray);\\n  }\\n\\n  function uintToString(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return '0';\\n    } else {\\n      bytes32 ret;\\n      while (_i > 0) {\\n        ret = bytes32(uint(ret) / (2 ** 8));\\n        ret |= bytes32(((_i % 10) + 48) * 2 ** (8 * 31));\\n        _i /= 10;\\n      }\\n      _uintAsString = bytes32ToString(ret);\\n    }\\n  }\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICover.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ICoverERC20.sol\\\";\\n\\n/**\\n * @title Cover interface\\n * @author crypto-pumpkin\\n */\\ninterface ICover {\\n  event CovTokenCreated(address);\\n  event CoverDeployCompleted();\\n  event Redeemed(string _type, address indexed _account, uint256 _amount);\\n  event FutureTokenConverted(address indexed _futureToken, address indexed claimCovToken, uint256 _amount);\\n\\n  // state vars\\n  function BASE_SCALE() external view returns (uint256);\\n  function deployComplete() external view returns (bool);\\n  function expiry() external view returns (uint48);\\n  function collateral() external view returns (address);\\n  function noclaimCovToken() external view returns (ICoverERC20);\\n  function name() external view returns (string memory);\\n  function feeRate() external view returns (uint256);\\n  function totalCoverage() external view returns (uint256);\\n  function mintRatio() external view returns (uint256);\\n  /// @notice created as initialization, cannot be changed\\n  function claimNonce() external view returns (uint256);\\n  function futureCovTokens(uint256 _index) external view returns (ICoverERC20);\\n  function claimCovTokenMap(bytes32 _risk) external view returns (ICoverERC20);\\n  function futureCovTokenMap(ICoverERC20 _futureCovToken) external view returns (ICoverERC20 _claimCovToken);\\n\\n  // extra view\\n  function viewRedeemable(address _account, uint256 _coverageAmt) external view returns (uint256);\\n  function getCovTokens() external view\\n    returns (\\n      ICoverERC20 _noclaimCovToken,\\n      ICoverERC20[] memory _claimCovTokens,\\n      ICoverERC20[] memory _futureCovTokens);\\n\\n  // user action\\n  function deploy() external;\\n  /// @notice convert futureTokens to claimTokens\\n  function convert(ICoverERC20[] calldata _futureTokens) external;\\n  /// @notice redeem func when there is a claim on the cover, aka. the cover is affected\\n  function redeemClaim() external;\\n  /// @notice redeem func when the cover is not affected by any accepted claim, _amount is respected only when when no claim accepted before expiry (for cover with expiry)\\n  function redeem(uint256 _amount) external;\\n  function collectFees() external;\\n\\n  // access restriction - owner (CoverPool)\\n  function mint(uint256 _amount, address _receiver) external;\\n  function addRisk(bytes32 _risk) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICoverERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title CoverERC20 contract interface, implements {IERC20}. See {CoverERC20}.\\n * @author crypto-pumpkin\\n */\\ninterface ICoverERC20 is IERC20 {\\n    /// @notice access restriction - owner (Cover)\\n    function mint(address _account, uint256 _amount) external returns (bool);\\n    function burnByCover(address _account, uint256 _amount) external returns (bool);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Interface of Ownable\\n */\\ninterface IOwnable {\\n    function owner() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICoverPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev CoverPool contract interface. See {CoverPool}.\\n * @author crypto-pumpkin\\n */\\ninterface ICoverPool {\\n  event CoverCreated(address indexed);\\n  event CoverAdded(address indexed _cover, address _acount, uint256 _amount);\\n  event NoclaimRedeemDelayUpdated(uint256 _oldDelay, uint256 _newDelay);\\n  event ClaimEnacted(uint256 _enactedClaimNonce);\\n  event RiskUpdated(bytes32 _risk, bool _isAddRisk);\\n  event PoolStatusUpdated(Status _old, Status _new);\\n  event ExpiryUpdated(uint48 _expiry, string _expiryStr,  Status _status);\\n  event CollateralUpdated(address indexed _collateral, uint256 _mintRatio,  Status _status);\\n\\n  enum Status { Null, Active, Disabled }\\n\\n  struct ExpiryInfo {\\n    string name;\\n    Status status;\\n  }\\n  struct CollateralInfo {\\n    uint256 mintRatio;\\n    Status status;\\n  }\\n  struct ClaimDetails {\\n    uint48 incidentTimestamp;\\n    uint48 claimEnactedTimestamp;\\n    uint256 totalPayoutRate;\\n    bytes32[] payoutRiskList;\\n    uint256[] payoutRates;\\n  }\\n\\n  // state vars\\n  function name() external view returns (string memory);\\n  function extendablePool() external view returns (bool);\\n  function poolStatus() external view returns (Status _status);\\n  /// @notice only active (true) coverPool allows adding more covers (aka. minting more CLAIM and NOCLAIM tokens)\\n  function claimNonce() external view returns (uint256);\\n  function noclaimRedeemDelay() external view returns (uint256);\\n  function addingRiskWIP() external view returns (bool);\\n  function addingRiskIndex() external view returns (uint256);\\n  function activeCovers(uint256 _index) external view returns (address);\\n  function allCovers(uint256 _index) external view returns (address);\\n  function expiries(uint256 _index) external view returns (uint48);\\n  function collaterals(uint256 _index) external view returns (address);\\n  function riskList(uint256 _index) external view returns (bytes32);\\n  function deletedRiskList(uint256 _index) external view returns (bytes32);\\n  function riskMap(bytes32 _risk) external view returns (Status);\\n  function collateralStatusMap(address _collateral) external view returns (uint256 _mintRatio, Status _status);\\n  function expiryInfoMap(uint48 _expiry) external view returns (string memory _name, Status _status);\\n  function coverMap(address _collateral, uint48 _expiry) external view returns (address);\\n\\n  // extra view\\n  function getRiskList() external view returns (bytes32[] memory _riskList);\\n  function getClaimDetails(uint256 _claimNonce) external view returns (ClaimDetails memory);\\n  function getCoverPoolDetails()\\n    external view returns (\\n      address[] memory _collaterals,\\n      uint48[] memory _expiries,\\n      bytes32[] memory _riskList,\\n      bytes32[] memory _deletedRiskList,\\n      address[] memory _allCovers\\n    );\\n\\n  // user action\\n  /// @notice cover must be deployed first\\n  function addCover(\\n    address _collateral,\\n    uint48 _expiry,\\n    address _receiver,\\n    uint256 _colAmountIn,\\n    uint256 _amountOut,\\n    bytes calldata _data\\n  ) external;\\n  function deployCover(address _collateral, uint48 _expiry) external returns (address _coverAddress);\\n\\n  // access restriction - claimManager\\n  function enactClaim(\\n    bytes32[] calldata _payoutRiskList,\\n    uint256[] calldata _payoutRates,\\n    uint48 _incidentTimestamp,\\n    uint256 _coverPoolNonce\\n  ) external;\\n\\n  // CM and dev only\\n  function setNoclaimRedeemDelay(uint256 _noclaimRedeemDelay) external;\\n\\n  // access restriction - dev\\n  function addRisk(string calldata _risk) external returns (bool);\\n  function deleteRisk(string calldata _risk) external;\\n  function setExpiry(uint48 _expiry, string calldata _expiryName, Status _status) external;\\n  function setCollateral(address _collateral, uint256 _mintRatio, Status _status) external;\\n  function setPoolStatus(Status _poolStatus) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/ICoverPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev CoverPoolFactory contract interface. See {CoverPoolFactory}.\\n * @author crypto-pumpkin\\n */\\ninterface ICoverPoolFactory {\\n  event CoverPoolCreated(address indexed _addr);\\n  event IntUpdated(string _type, uint256 _old, uint256 _new);\\n  event AddressUpdated(string _type, address indexed _old, address indexed _new);\\n  event PausedStatusUpdated(bool _old, bool _new);\\n\\n  // state vars\\n  function MAX_REDEEM_DELAY() external view returns (uint256);\\n  function defaultRedeemDelay() external view returns (uint256);\\n  // yearlyFeeRate is scaled 1e18\\n  function yearlyFeeRate() external view returns (uint256);\\n  function paused() external view returns (bool);\\n  function responder() external view returns (address);\\n  function coverPoolImpl() external view returns (address);\\n  function coverImpl() external view returns (address);\\n  function coverERC20Impl() external view returns (address);\\n  function treasury() external view returns (address);\\n  function claimManager() external view returns (address);\\n  /// @notice min gas left requirement before continue deployments (when creating new Cover or adding risks to CoverPool)\\n  function deployGasMin() external view returns (uint256);\\n  function coverPoolNames(uint256 _index) external view returns (string memory);\\n  function coverPools(string calldata _coverPoolName) external view returns (address);\\n\\n  // extra view\\n  function getCoverPools() external view returns (address[] memory);\\n  /// @notice return contract address, the contract may not be deployed yet\\n  function getCoverPoolAddress(string calldata _name) external view returns (address);\\n  function getCoverAddress(string calldata _coverPoolName, uint48 _timestamp, address _collateral, uint256 _claimNonce) external view returns (address);\\n  /// @notice _prefix example: \\\"C_CURVE\\\", \\\"C_FUT1\\\", or \\\"NC_\\\"\\n  function getCovTokenAddress(string calldata _coverPoolName, uint48 _expiry, address _collateral, uint256 _claimNonce, string memory _prefix) external view returns (address);\\n\\n  // access restriction - owner (dev) & responder\\n  function setPaused(bool _paused) external;\\n\\n  // access restriction - owner (dev)\\n  function setYearlyFeeRate(uint256 _yearlyFeeRate) external;\\n  function setDefaultRedeemDelay(uint256 _defaultRedeemDelay) external;\\n  function setResponder(address _responder) external;\\n  function setDeployGasMin(uint256 _deployGasMin) external;\\n  /// @dev update Impl will only affect contracts deployed after\\n  function setCoverPoolImpl(address _newImpl) external;\\n  function setCoverImpl(address _newImpl) external;\\n  function setCoverERC20Impl(address _newImpl) external;\\n  function setTreasury(address _address) external;\\n  function setClaimManager(address _address) external;\\n  /**\\n   * @notice Create a new Cover Pool\\n   * @param _name name for pool, e.g. Yearn\\n   * @param _extendablePool open pools allow adding new risk\\n   * @param _riskList risk risks that are covered in this pool\\n   * @param _collateral the collateral of the pool\\n   * @param _mintRatio 18 decimals, in (0, + infinity) the deposit ratio for the collateral the pool, 1.5 means =  1 collateral mints 1.5 CLAIM/NOCLAIM tokens\\n   * @param _expiry expiration date supported for the pool\\n   * @param _expiryString MONTH_DATE_YEAR, used to create covToken symbols only\\n   * \\n   * Emits CoverPoolCreated, add a supported coverPool in COVER\\n   */\\n  function createCoverPool(\\n    string calldata _name,\\n    bool _extendablePool,\\n    string[] calldata _riskList,\\n    address _collateral,\\n    uint256 _mintRatio,\\n    uint48 _expiry,\\n    string calldata _expiryString\\n  ) external returns (address);\\n}  \"\r\n    },\r\n    \"contracts/interfaces/ICovTokenProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: No License\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Interface of the CovTokens Proxy.\\n */\\ninterface ICovTokenProxy {\\n  function initialize(string calldata _name, string calldata _symbol, uint8 _decimals) external;\\n}\"\r\n    },\r\n    \"contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"CovTokenCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CoverDeployCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_futureToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimCovToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FutureTokenConverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_type\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_risk\",\"type\":\"bytes32\"}],\"name\":\"addRisk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimCovTokenMap\",\"outputs\":[{\"internalType\":\"contract ICoverERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICoverERC20[]\",\"name\":\"_futureTokens\",\"type\":\"address[]\"}],\"name\":\"convert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployComplete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expiry\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICoverERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"futureCovTokenMap\",\"outputs\":[{\"internalType\":\"contract ICoverERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"futureCovTokens\",\"outputs\":[{\"internalType\":\"contract ICoverERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCovTokens\",\"outputs\":[{\"internalType\":\"contract ICoverERC20\",\"name\":\"_noclaimCovToken\",\"type\":\"address\"},{\"internalType\":\"contract ICoverERC20[]\",\"name\":\"_claimCovTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract ICoverERC20[]\",\"name\":\"_futureCovTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint48\",\"name\":\"_expiry\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_claimNonce\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_receivedColAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noclaimCovToken\",\"outputs\":[{\"internalType\":\"contract ICoverERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_coverageAmt\",\"type\":\"uint256\"}],\"name\":\"viewRedeemable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemableAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Cover","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}