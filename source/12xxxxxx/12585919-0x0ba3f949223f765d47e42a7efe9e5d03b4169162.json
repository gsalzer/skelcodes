{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ninterface ERC721TokenReceiver\r\n{\r\n\r\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4);\r\n\r\n}\r\n\r\nlibrary Strings {\r\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\r\n  function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory) {\r\n      bytes memory _ba = bytes(_a);\r\n      bytes memory _bb = bytes(_b);\r\n      bytes memory _bc = bytes(_c);\r\n      bytes memory _bd = bytes(_d);\r\n      bytes memory _be = bytes(_e);\r\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n      bytes memory babcde = bytes(abcde);\r\n      uint k = 0;\r\n      uint i = 0;\r\n      for (i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n      for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n      for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n      for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n      for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n      return string(babcde);\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, _c, _d, \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b, string memory _c) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, _c, \"\", \"\");\r\n    }\r\n\r\n    function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\r\n        return strConcat(_a, _b, \"\", \"\", \"\");\r\n    }\r\n\r\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint j = _i;\r\n        uint len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (_i != 0) {\r\n            bstr[k--] = byte(uint8(48 + _i % 10));\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Astroglyphs is Ownable{\r\n\r\n    event Generated(uint indexed index, address indexed a, string value);\r\n\r\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\r\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\r\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\r\n    ///  may be created and assigned without emitting Transfer. At the time of\r\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\r\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\r\n\r\n    /// @dev This emits when the approved address for an NFT is changed or\r\n    ///  reaffirmed. The zero address indicates there is no approved address.\r\n    ///  When a Transfer event emits, this also indicates that the approved\r\n    ///  address for that NFT (if any) is reset to none.\r\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\r\n\r\n    /// @dev This emits when an operator is enabled or disabled for an owner.\r\n    ///  The operator can manage all NFTs of the owner.\r\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n    bytes4 internal constant MAGIC_ON_ERC721_RECEIVED = 0x150b7a02;\r\n\r\n    uint public constant TOKEN_LIMIT = 12; // 8 for testing, 256 or 512 for prod;\r\n    uint public constant ARTIST_PRINTS = 12; // 2 for testing, 64 for prod;\r\n\r\n    uint public constant PRICE = 200 finney;\r\n\r\n    address public constant BENEFICIARY = 0x28A9dE2183817164B91B0b693788E84Da3eAc59e;\r\n\r\n    mapping (uint => address) private idToCreator;\r\n    mapping (uint => uint8) private idToSymbolScheme;\r\n\r\n    // ERC 165\r\n    mapping(bytes4 => bool) internal supportedInterfaces;\r\n\r\n    /**\r\n     * @dev A mapping from NFT ID to the address that owns it.\r\n     */\r\n    mapping (uint256 => address) internal idToOwner;\r\n\r\n    /**\r\n     * @dev A mapping from NFT ID to the seed used to make it.\r\n     */\r\n    mapping (uint256 => uint256) internal idToSeed;\r\n    mapping (uint256 => uint256) internal seedToId;\r\n\r\n    /**\r\n     * @dev Mapping from NFT ID to approved address.\r\n     */\r\n    mapping (uint256 => address) internal idToApproval;\r\n\r\n    /**\r\n     * @dev Mapping from owner address to mapping of operator addresses.\r\n     */\r\n    mapping (address => mapping (address => bool)) internal ownerToOperators;\r\n\r\n    /**\r\n     * @dev Mapping from owner to list of owned NFT IDs.\r\n     */\r\n    mapping(address => uint256[]) internal ownerToIds;\r\n\r\n    /**\r\n     * @dev Mapping from NFT ID to its index in the owner tokens list.\r\n     */\r\n    mapping(uint256 => uint256) internal idToOwnerIndex;\r\n\r\n    /**\r\n     * @dev Total number of tokens.\r\n     */\r\n    uint internal numTokens = 0;\r\n\r\n    /**\r\n     * @dev Guarantees that the msg.sender is an owner or operator of the given NFT.\r\n     * @param _tokenId ID of the NFT to validate.\r\n     */\r\n    modifier canOperate(uint256 _tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == msg.sender || ownerToOperators[tokenOwner][msg.sender]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Guarantees that the msg.sender is allowed to transfer NFT.\r\n     * @param _tokenId ID of the NFT to transfer.\r\n     */\r\n    modifier canTransfer(uint256 _tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(\r\n            tokenOwner == msg.sender\r\n            || idToApproval[_tokenId] == msg.sender\r\n            || ownerToOperators[tokenOwner][msg.sender]\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Guarantees that _tokenId is a valid Token.\r\n     * @param _tokenId ID of the NFT to validate.\r\n     */\r\n    modifier validNFToken(uint256 _tokenId) {\r\n        require(idToOwner[_tokenId] != address(0));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Contract constructor.\r\n     */\r\n    constructor() public {\r\n        supportedInterfaces[0x01ffc9a7] = true; // ERC165\r\n        supportedInterfaces[0x80ac58cd] = true; // ERC721\r\n        supportedInterfaces[0x780e9d63] = true; // ERC721 Enumerable\r\n        supportedInterfaces[0x5b5e139f] = true; // ERC721 Metadata\r\n    }\r\n\r\n    ///////////////////\r\n    //// GENERATOR ////\r\n    ///////////////////\r\n\r\n    int constant ONE = int(0x100000000);\r\n    uint constant USIZE = 64;\r\n    int constant SIZE = int(USIZE);\r\n    int constant HALF_SIZE = SIZE / int(2);\r\n\r\n    int constant SCALE = int(0x1b81a81ab1a81a823);\r\n    int constant HALF_SCALE = SCALE / int(2);    \r\n\r\n    string internal nftName = \"Astroglyphs\";\r\n    string internal nftSymbol = \"♊︎\";\r\n\r\n    // 0x2E = .\r\n    // 0x4F = O\r\n    // 0x2B = +\r\n    // 0x58 = X\r\n    // 0x7C = |\r\n    // 0x2D = -\r\n    // 0x5C = \\\r\n    // 0x2F = /\r\n    // 0x23 = #\r\n\r\n    function abs(int n) internal pure returns (int) {\r\n        if (n >= 0) return n;\r\n        return -n;\r\n    }\r\n    \r\n\r\n    /* * ** *** ***** ******** ************* ******** ***** *** ** * */\r\n\r\n    // The following code generates art.\r\n\r\n    function draw(uint id) public view returns (string) {        \r\n        //bytes memory output = new bytes(USIZE * (USIZE + 3) + 30);\r\n        bytes memory output;\r\n        if (id == 0) {\r\n            revert();\r\n        } else if (id == 1) {\r\n        output=\"data:text/plain;charset=utf-8,....................................................%0A....................................................%0A.....>/X0####XX/+..................|/X0####0X/+.....%0A....|0#0XXXXX0##0X...............+/###0XXXXX##0/....%0A..+X##/.......+X0#0/...........+X##X/.......+X##/...%0A..X##X...........X##X>.........###X........../##0+..%0A..X##/............0##X........X##X+..........|##0|..%0A../##X............+X##|......X#0/............/##X...%0A.../0#/............+X#0|....X##/............+X##+...%0A..../#0/............|0#X.../0##.............X##X....%0A.....................|r\n        \r\n        }\r\n        else if (id == 2) {\r\n        output=\"data:text/plain;charset=utf-8,....................................................%0A....................................................%0A.....###0X/+...........................+/X0###/.....%0A.....+/X0##0X.........................>0##0X>+......%0A.........X0##0X...................../0##0/..........%0A..........+X###0|..................0###/............%0A............/###0/...............+X###X.............%0A.............|X###X/+..........X0##0X+..............%0A................|X####0XXXX00####0/.................%0A.................>##############0X+.................%0A..............+X0##0X/++...++|/0###/................%0A.............0###0..............+X0##X+.............%0A............|###X+................/###X.............%0A...........|0##/...................X###.............%0A.........../##X+.................../###>............%0A.........../##0+.................../###+............%0A...........+0##X...................0###.............%0A............+###X|...............+X##0/.............%0A.............X###0+............+/0##0/..............%0A.............../0###0X/>++>|/XX###0>................%0A................../X0#########0X/+..................%0A.....................+|/////|++.....................%0A....................................................%0A....................................................\";\r\n        \r\n        }\r\n        else if (id == 3) {\r\n        output=\"data:text/plain;charset=utf-8,....................................................%0A....................................................%0A.....#0XX//|>++.....................+++|//XXX0/.....%0A.....##########0XXXXXXXXXXXXXXXXXXX00#########/.....%0A........++|/XX0###000##########00###0XX/||>+.......%0A.....########XXXXXXX////////////XXXXXX0#######/.....%0A.....XXX/>+++..........................++>|/XX/.....%0A....................................................%0A....................................................\";\r\n        \r\n        }\r\n        else if (id == 4) {\r\n        output=\"data:text/plain;charset=utf-8,....................................................%0A....................................................%0A......................+.............................%0A............+/XX0#####################0XXXXX|>++....%0A.........+/X0#########0/+++++++++++>||/XXX0####0....%0A......../##0X++...+|X0##X>...................++|....%0A....../0#X|...........X0##+.........................%0A.....+X##|.............X##/.........................%0A...../###............../##X.........................%0A.....+X##/.............X##/.........................%0A......|0#0/...........X0##..........................%0A......../##0X>++.++/X0#0X+.....>/XX####0X/|+........%0A........../X0#######0X+....../0#0XX|>>|XX0##X+......%0A.............+|///|++......+X##X>........+X0#0/.....%0A........................../0##X.............###X....%0A..........................X###/.............X##0....%0A..........................X###/.............X##0....%0A..........................|0##0............+##0/....%0A......+.....................X0#0X>......+/0#0X+.....%0A...../0XX/>++................+X###0XXXX00##0/.......%0A......|/XXX0#####0XXXXXXXXXXXX0########XX|+.........%0A..................++++++++++>>>>>+++................%0A....................................................%0A....................................................\";\r\n        \r\n        }\r\n        else if (id == 5) {\r\n        output=\"data:text/plain;charset=utf-8,....................................................%0A..........................++>||>++..................%0A.....................+X00XX////XX000X>..............%0A..................+X0#/............/0#0+............%0A..................X##X..............+X#X+...........%0A.................+##X................./#0>..........%0A.................|##/..................##/..........%0A.................+##/..................##/..........%0A..................X#X+................/#0|..........%0A..................+X#X...............+X#/...........%0A...........+>///|+./##...............X#X............%0A......../0#0XXXXX0####X............+X#0.............%0A......X0#/........+X0##/...........0#X+.............%0A...../##X...........X##X........../#X+..............%0A.....X##/............X#X........>0#/................%0A.....X##X.........../00|......./0#X.................%0A.....+X##+........./0#/........0#0>.................%0A.......+X#0XX///XX##X/........|#0|..................%0A..........+|/XXXX/+...........X#X...................%0A..............................X#/...................%0A............................../#X+.......+/+........%0A...............................X0#0XXXX0#0X/........%0A................................+/X000XX/+..........%0A....................................................\";\r\n        \r\n        }\r\n        else if (id == 6) {\r\n        output=\"data:text/plain;charset=utf-8,....................................................%0A....................................................%0A.......+/+.......+XXX/.......+/XX+..................%0A......../#0/.../00/X0#/...+X0XX0##X.................%0A.........##0/+X0X+../00|..0X+..X##0.................%0A.........X##00X......X#X/X+..../###.................%0A........./###/.......X###X...../###...|0#0X+........%0A........./###........X##X+...../###.+X#00##X........%0A........./###........X#0+....../###X00/../0#+.......%0A........./###........X#X+....../###0/.....X#/.......%0A........./###........X#X+....../###X....../#/.......%0A........./###........X#X+....../###......./#/.......%0A........./###........X#X+....../###.......X#/.......%0A........./###........X#X+....../###......|0#+.......%0A........./###........X#X+....../###.....+0#0........%0A........./###........X#X+....../###..../0#X+........%0A........./###........X#X+....../###...+0#X+.........%0A........./###........X#X+....../###.+X0X+...........%0A.........+XXX........|X/.......|0##00X|.............%0A.............................../0##X>...............%0A.........................>/XX0#XX0#X................%0A........................+X|++....+X#X+..............%0A..................................+00X/.............%0A....................................................\";\r\n        \r\n        }\r\n        else if (id == 7) {\r\n        output=\"data:text/plain;charset=utf-8,....................................................%0A....................................................%0A....................................................%0A.....................+/XXXXX/|+.....................%0A................../X0##########X/+..................%0A...............+X0##0X/+++++|/X###0+................%0A.............+X###X+...........+X0##X+..............%0A.............X###0.............../0##X..............%0A.............####/................/###/.............%0A.............####/................>###/.............%0A.............0###/................/###/.............%0A............./0###+.............+X0#0/..............%0A...../////////X####0+..........0####X///////////....%0A....+###############/..........#################....%0A.....|||||||||||||||+..........|||||||||||||||||r\n        \r\n        }\r\n        else if (id == 8) {\r\n        output=\"data:text/plain;charset=utf-8,....................................................%0A....+++.........+|X/+.........+///..................%0A.....0#0X....+X0#00##0.....|X0#####.................%0A.....>0##X..|#X/...X##/...00/..||##X................%0A......./##X........+X##/........+X#X................%0A......./##X........+X##/........+X#X................%0A......./##X........+X##/.........X#X................%0A......./##X........+X##/.........X#X+...............%0A......./##X........+X##/.........|0#X+......+.......%0A......./##X........+X##/........../##X/.....XX/+....%0A........++...........++............+XX0#########/...%0A............................................X0X|....%0A............................................++......%0A....................................................\";\r\n        \r\n        }\r\n        else if (id == 9) {\r\n        output=\"data:text/plain;charset=utf-8,....................................................%0A....................................................%0A..........................XXXXXXXXXXXXXXXXXXXXX/....%0A..........................XXXXXXXXXXXXXX0######X....%0A.......................................X0######X....%0A...................................../X##0XX###X....%0A...................................X###X|...###X....%0A................................./X##0X.....###X....%0A...............................X###X|.......###X....%0A.........+//................/X##0X/.........###X....%0A.........0##0+............/X###X|...........###X....%0A.........+X0##0/+......./X##0X|.............###X....%0A............+0###0+...X###X/........................%0A.............+X0##0//X##0X..........................%0A................+X####0/............................%0A.............../X######0/+..........................%0A............./X###X/|X###0+.........................%0A.........../X##0X|....+X0##0/+......................%0A.........X###X|..........+0###0.....................%0A......./X##0X.............+X0#0.....................%0A...../0##X|.........................................%0A.......++...........................................%0A....................................................%0A....................................................\";\r\n        \r\n        }\r\n        else if (id == 10) {\r\n        output=\"data:text/plain;charset=utf-8,....................................................%0A.......................++...........................%0A.....0XX/............/####+.........................%0A.....+|X00X+......./0#####X+........................%0A........|##X+.....X0##>+X##/........................%0A........./0#0....+##0/...X#X+.......................%0A........../##|..>0#0>....+##/.......................%0A..........+X#X..X##/......##/.......................%0A...........|00/X##/.......##X.......................%0A............X#####........##0|......................%0A............/#####........X##/.........+++..........%0A............+####X........X##X....+X0#######X+......%0A.............####/......../##0|./0#X/+.....|0#0|....%0A.............##00/........+0##XX0#0........./0#0....%0A.........................../0####X...........X##....%0A............................/###0/..........+X##....%0A............................X####0X.........X##0....%0A...........................X###+/0##XX/|//X0#0X+....%0A..........................X###/....|/XXXXXXX+.......%0A.........................+###X......................%0A......................./X0#0/.......................%0A................./#######0|.........................%0A.................+XXXX/|++..........................%0A....................................................\";\r\n        \r\n        }\r\n        else if (id == 11) {\r\n        output=\"data:text/plain;charset=utf-8,....................................................%0A....................................................%0A....................................................%0A....................................................%0A....................................................%0A............................+++.....................%0A............+/X0#0+.....+/0####+....../X00X/........%0A.........+/X0#####X/++/X0######0/++/X0######+.......%0A......+/X#0X|...>X#####0X/...>X######0X>|/X0#X+.....%0A....+0#0X.........XXX/.........0##X|........0#X+....%0A.....X/+........................++........../XX+....%0A....................................................%0A..............+|//......../X0#0........|/|+.........%0A...........+/0####/....+/X#####/....+/X###0X........%0A........+0##0///X0#######0X/XX0########X00##0>......%0A...../0##/+......+###0/+......+####X/+...../##X.....%0A....+#0X|.........|/|+........./XX/.........X#0/....%0A....................................................%0A....................................................%0A....................................................%0A....................................................%0A....................................................%0A....................................................%0A....................................................\";\r\n        \r\n        }\r\n        else if (id == 12) {\r\n        output=\"data:text/plain;charset=utf-8,....................................................%0A.........++++..........................+++++........%0A........../0#0/....................../0#0X+.........%0A............/##0/................../0##/............%0A.............X###X................+0##X.............%0A..............|0##/............../0#0/..............%0A................X##X+..........+X##X+...............%0A................+X##X..........X###+................%0A..................###X.........###X.................%0A..................0###........|###/.................%0A..................X###+......+X##0/.................%0A.........X################################X.........%0A........./XXXXXXXX0###XXXXXXXX0##0XXXXXXXX/.........%0A..................X###......../##X+.................%0A..................###X........+###/.................%0A................./##0|.........0##0.................%0A................+X##/........../0##>................%0A.............../0#0/............|0#0/...............%0A.............+X##0................X##X|.............%0A.............0##0/.................0##0.............%0A.........../0#0/..................../0#0/...........%0A........./X00|........................>000X+........%0A....................................................%0A....................................................\";\r\n        \r\n        }\r\n        else{\r\n            revert();\r\n        }\r\n        string memory result = string(output);\r\n        return result;\r\n        \r\n    }\r\n\r\n    /* * ** *** ***** ******** ************* ******** ***** *** ** * */\r\n\r\n    function creator(uint _id) external view returns (address) {\r\n        return idToCreator[_id];\r\n    }\r\n    \r\n\r\n    function createGlyph(uint seed) external payable onlyOwner returns (string) {\r\n        return _mint(msg.sender, seed);\r\n    }\r\n\r\n    //////////////////////////\r\n    //// ERC 721 and 165  ////\r\n    //////////////////////////\r\n\r\n    /**\r\n     * @dev Returns whether the target address is a contract.\r\n     * @param _addr Address to check.\r\n     * @return True if _addr is a contract, false if not.\r\n     */\r\n    function isContract(address _addr) internal view returns (bool addressCheck) {\r\n        uint256 size;\r\n        assembly { size := extcodesize(_addr) } // solhint-disable-line\r\n        addressCheck = size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check which interfaces are suported by this contract.\r\n     * @param _interfaceID Id of the interface.\r\n     * @return True if _interfaceID is supported, false otherwise.\r\n     */\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\r\n        return supportedInterfaces[_interfaceID];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of an NFT from one address to another address. This function can\r\n     * be changed to payable.\r\n     * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\r\n     * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\r\n     * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\r\n     * function checks if `_to` is a smart contract (code size > 0). If so, it calls\r\n     * `onERC721Received` on `_to` and throws if the return value is not\r\n     * `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\r\n     * @param _from The current owner of the NFT.\r\n     * @param _to The new owner.\r\n     * @param _tokenId The NFT to transfer.\r\n     * @param _data Additional data with no specified format, sent in call to `_to`.\r\n     */\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) external {\r\n        _safeTransferFrom(_from, _to, _tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers the ownership of an NFT from one address to another address. This function can\r\n     * be changed to payable.\r\n     * @notice This works identically to the other function with an extra data parameter, except this\r\n     * function just sets data to \"\"\r\n     * @param _from The current owner of the NFT.\r\n     * @param _to The new owner.\r\n     * @param _tokenId The NFT to transfer.\r\n     */\r\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external {\r\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\r\n     * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\r\n     * address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.\r\n     * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\r\n     * they maybe be permanently lost.\r\n     * @param _from The current owner of the NFT.\r\n     * @param _to The new owner.\r\n     * @param _tokenId The NFT to transfer.\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external canTransfer(_tokenId) validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == _from);\r\n        require(_to != address(0));\r\n        _transfer(_to, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Set or reaffirm the approved address for an NFT. This function can be changed to payable.\r\n     * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\r\n     * the current NFT owner, or an authorized operator of the current owner.\r\n     * @param _approved Address to be approved for the given NFT ID.\r\n     * @param _tokenId ID of the token to be approved.\r\n     */\r\n    function approve(address _approved, uint256 _tokenId) external canOperate(_tokenId) validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(_approved != tokenOwner);\r\n        idToApproval[_tokenId] = _approved;\r\n        emit Approval(tokenOwner, _approved, _tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Enables or disables approval for a third party (\"operator\") to manage all of\r\n     * `msg.sender`'s assets. It also emits the ApprovalForAll event.\r\n     * @notice This works even if sender doesn't own any tokens at the time.\r\n     * @param _operator Address to add to the set of authorized operators.\r\n     * @param _approved True if the operators is approved, false to revoke approval.\r\n     */\r\n    function setApprovalForAll(address _operator, bool _approved) external {\r\n        ownerToOperators[msg.sender][_operator] = _approved;\r\n        emit ApprovalForAll(msg.sender, _operator, _approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\r\n     * considered invalid, and this function throws for queries about the zero address.\r\n     * @param _owner Address for whom to query the balance.\r\n     * @return Balance of _owner.\r\n     */\r\n    function balanceOf(address _owner) external view returns (uint256) {\r\n        require(_owner != address(0));\r\n        return _getOwnerNFTCount(_owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\r\n     * invalid, and queries about them do throw.\r\n     * @param _tokenId The identifier for an NFT.\r\n     * @return Address of _tokenId owner.\r\n     */\r\n    function ownerOf(uint256 _tokenId) external view returns (address _owner) {\r\n        _owner = idToOwner[_tokenId];\r\n        require(_owner != address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Get the approved address for a single NFT.\r\n     * @notice Throws if `_tokenId` is not a valid NFT.\r\n     * @param _tokenId ID of the NFT to query the approval of.\r\n     * @return Address that _tokenId is approved for.\r\n     */\r\n    function getApproved(uint256 _tokenId) external view validNFToken(_tokenId) returns (address) {\r\n        return idToApproval[_tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if `_operator` is an approved operator for `_owner`.\r\n     * @param _owner The address that owns the NFTs.\r\n     * @param _operator The address that acts on behalf of the owner.\r\n     * @return True if approved for all, false otherwise.\r\n     */\r\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\r\n        return ownerToOperators[_owner][_operator];\r\n    }\r\n\r\n    /**\r\n     * @dev Actually preforms the transfer.\r\n     * @notice Does NO checks.\r\n     * @param _to Address of a new owner.\r\n     * @param _tokenId The NFT that is being transferred.\r\n     */\r\n    function _transfer(address _to, uint256 _tokenId) internal {\r\n        address from = idToOwner[_tokenId];\r\n        _clearApproval(_tokenId);\r\n\r\n        _removeNFToken(from, _tokenId);\r\n        _addNFToken(_to, _tokenId);\r\n\r\n        emit Transfer(from, _to, _tokenId);\r\n}\r\n\r\n    /**\r\n     * @dev Mints a new NFT.\r\n     * @notice This is an internal function which should be called from user-implemented external\r\n     * mint function. Its purpose is to show and properly initialize data structures when using this\r\n     * implementation.\r\n     * @param _to The address that will own the minted NFT.\r\n     */\r\n    function _mint(address _to, uint seed) internal returns (string) {\r\n        require(_to != address(0));\r\n        require(numTokens < TOKEN_LIMIT);\r\n        uint amount = 0;\r\n        if (numTokens >= ARTIST_PRINTS) {\r\n            amount = PRICE;\r\n            require(msg.value >= amount);\r\n        }\r\n        require(seedToId[seed] == 0);\r\n        uint id = numTokens + 1;\r\n\r\n        idToCreator[id] = _to;\r\n        idToSeed[id] = seed;\r\n        seedToId[seed] = id;        \r\n        string memory uri = draw(id);\r\n        emit Generated(id, _to, uri);\r\n\r\n        numTokens = numTokens + 1;\r\n        _addNFToken(_to, id);\r\n\r\n        if (msg.value > amount) {\r\n            msg.sender.transfer(msg.value - amount);\r\n        }\r\n        if (amount > 0) {\r\n            BENEFICIARY.transfer(amount);\r\n        }\r\n\r\n        emit Transfer(address(0), _to, id);\r\n        return uri;\r\n    }\r\n\r\n    /**\r\n     * @dev Assigns a new NFT to an address.\r\n     * @notice Use and override this function with caution. Wrong usage can have serious consequences.\r\n     * @param _to Address to which we want to add the NFT.\r\n     * @param _tokenId Which NFT we want to add.\r\n     */\r\n    function _addNFToken(address _to, uint256 _tokenId) internal {\r\n        require(idToOwner[_tokenId] == address(0));\r\n        idToOwner[_tokenId] = _to;\r\n\r\n        uint256 length = ownerToIds[_to].push(_tokenId);\r\n        idToOwnerIndex[_tokenId] = length - 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a NFT from an address.\r\n     * @notice Use and override this function with caution. Wrong usage can have serious consequences.\r\n     * @param _from Address from wich we want to remove the NFT.\r\n     * @param _tokenId Which NFT we want to remove.\r\n     */\r\n    function _removeNFToken(address _from, uint256 _tokenId) internal {\r\n        require(idToOwner[_tokenId] == _from);\r\n        delete idToOwner[_tokenId];\r\n\r\n        uint256 tokenToRemoveIndex = idToOwnerIndex[_tokenId];\r\n        uint256 lastTokenIndex = ownerToIds[_from].length - 1;\r\n\r\n        if (lastTokenIndex != tokenToRemoveIndex) {\r\n            uint256 lastToken = ownerToIds[_from][lastTokenIndex];\r\n            ownerToIds[_from][tokenToRemoveIndex] = lastToken;\r\n            idToOwnerIndex[lastToken] = tokenToRemoveIndex;\r\n        }\r\n\r\n        ownerToIds[_from].length--;\r\n    }\r\n\r\n    /**\r\n     * @dev Helper function that gets NFT count of owner. This is needed for overriding in enumerable\r\n     * extension to remove double storage (gas optimization) of owner nft count.\r\n     * @param _owner Address for whom to query the count.\r\n     * @return Number of _owner NFTs.\r\n     */\r\n    function _getOwnerNFTCount(address _owner) internal view returns (uint256) {\r\n        return ownerToIds[_owner].length;\r\n    }\r\n\r\n    /**\r\n     * @dev Actually perform the safeTransferFrom.\r\n     * @param _from The current owner of the NFT.\r\n     * @param _to The new owner.\r\n     * @param _tokenId The NFT to transfer.\r\n     * @param _data Additional data with no specified format, sent in call to `_to`.\r\n     */\r\n    function _safeTransferFrom(address _from,  address _to,  uint256 _tokenId,  bytes memory _data) private canTransfer(_tokenId) validNFToken(_tokenId) {\r\n        address tokenOwner = idToOwner[_tokenId];\r\n        require(tokenOwner == _from);\r\n        require(_to != address(0));\r\n\r\n        _transfer(_to, _tokenId);\r\n\r\n        if (isContract(_to)) {\r\n            bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\r\n            require(retval == MAGIC_ON_ERC721_RECEIVED);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Clears the current approval of a given NFT ID.\r\n     * @param _tokenId ID of the NFT to be transferred.\r\n     */\r\n    function _clearApproval(uint256 _tokenId) private {\r\n        if (idToApproval[_tokenId] != address(0)) {\r\n            delete idToApproval[_tokenId];\r\n        }\r\n    }\r\n\r\n    //// Enumerable\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return numTokens;\r\n    }\r\n\r\n    function tokenByIndex(uint256 index) public view returns (uint256) {\r\n        require(index < numTokens);\r\n        return index;\r\n    }\r\n\r\n    /**\r\n     * @dev returns the n-th NFT ID from a list of owner's tokens.\r\n     * @param _owner Token owner's address.\r\n     * @param _index Index number representing n-th token in owner's list of tokens.\r\n     * @return Token id.\r\n     */\r\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\r\n        require(_index < ownerToIds[_owner].length);\r\n        return ownerToIds[_owner][_index];\r\n    }\r\n\r\n    //// Metadata\r\n\r\n    /**\r\n      * @dev Returns a descriptive name for a collection of NFTokens.\r\n      * @return Representing name.\r\n      */\r\n    function name() external view returns (string memory _name) {\r\n        _name = nftName;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an abbreviated name for NFTokens.\r\n     * @return Representing symbol.\r\n     */\r\n    function symbol() external view returns (string memory _symbol) {\r\n        _symbol = nftSymbol;\r\n    }\r\n\r\n    /**\r\n     * @dev A distinct URI (RFC 3986) for a given NFT.\r\n     * @param _tokenId Id for which we want uri.\r\n     * @return URI of _tokenId.\r\n     */\r\n    function tokenURI(uint256 _tokenId) external view validNFToken(_tokenId) returns (string memory) {\r\n        //return draw(_tokenId);\r\n        return Strings.strConcat(\r\n            \"http://astroglyphs.s3-website-us-east-1.amazonaws.com/\",\r\n            Strings.uint2str(_tokenId),\r\n            \".json\"\r\n        );\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ARTIST_PRINTS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BENEFICIARY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"draw\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"createGlyph\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"a\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"string\"}],\"name\":\"Generated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Astroglyphs","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://187ff92c2afc0bd44be7de9fb073291825a79ce8a17b1b8c754a6f3579bb5715"}]}