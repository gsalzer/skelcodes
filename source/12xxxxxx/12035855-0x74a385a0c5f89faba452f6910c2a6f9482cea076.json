{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/E/Defi/force/contracts/contracts/Controllable.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\r\\n\\r\\nimport \\\"./Governable.sol\\\";\\r\\n\\r\\ncontract Controllable is Governable {\\r\\n    constructor(address _storage) public Governable(_storage) {}\\r\\n\\r\\n    modifier onlyController() {\\r\\n        require(store.isController(msg.sender), \\\"Not a controller\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyControllerOrGovernance() {\\r\\n        require(\\r\\n            (store.isController(msg.sender) || store.isGovernance(msg.sender)),\\r\\n            \\\"The caller must be controller or governance\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function controller() public view returns (address) {\\r\\n        return store.controller();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/E/Defi/force/contracts/contracts/Controller.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./interfaces/IController.sol\\\";\\r\\nimport \\\"./interfaces/IStrategy.sol\\\";\\r\\nimport \\\"./interfaces/IVault.sol\\\";\\r\\nimport \\\"./interfaces/IFeeRewardForwarder.sol\\\";\\r\\nimport \\\"./Governable.sol\\\";\\r\\nimport \\\"./GalacticRewards.sol\\\";\\r\\n\\r\\ncontract Controller is IController, Governable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // external parties\\r\\n    address public feeRewardForwarder;\\r\\n    address public treasury;\\r\\n\\r\\n    mapping(address => bool) public whiteList;\\r\\n\\r\\n    // All vaults that we have\\r\\n    mapping(address => bool) public vaults;\\r\\n\\r\\n    // Rewards for force unleash. Nullable.\\r\\n    GalacticRewards public galacticRewards;\\r\\n\\r\\n    uint256 public constant profitSharingNumerator = 5;\\r\\n    uint256 public constant profitSharingDenominator = 100;\\r\\n\\r\\n    event SharePriceChangeLog(\\r\\n        address indexed vault,\\r\\n        address indexed strategy,\\r\\n        uint256 oldSharePrice,\\r\\n        uint256 newSharePrice,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    modifier validVault(address _vault) {\\r\\n        require(vaults[_vault], \\\"vault does not exist\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    mapping(address => bool) public galacticWorkers;\\r\\n\\r\\n    modifier onlyGalacticWorkerOrGovernance() {\\r\\n        require(\\r\\n            galacticWorkers[msg.sender] || (msg.sender == governance()),\\r\\n            \\\"only force unleasher can call this\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _storage,\\r\\n        address _feeRewardForwarder,\\r\\n        address _treasury\\r\\n    ) public Governable(_storage) {\\r\\n        require(\\r\\n            _feeRewardForwarder != address(0),\\r\\n            \\\"feeRewardForwarder should not be empty\\\"\\r\\n        );\\r\\n        feeRewardForwarder = _feeRewardForwarder;\\r\\n        require(_treasury != address(0), \\\"treasury cannot be empty\\\");\\r\\n        treasury = _treasury;\\r\\n    }\\r\\n\\r\\n    function addGalacticWorker(address _worker) public onlyGovernance {\\r\\n        require(_worker != address(0), \\\"_worker must be defined\\\");\\r\\n        galacticWorkers[_worker] = true;\\r\\n    }\\r\\n\\r\\n    function removeGalacticWorker(address _worker) public onlyGovernance {\\r\\n        require(_worker != address(0), \\\"_worker must be defined\\\");\\r\\n        galacticWorkers[_worker] = false;\\r\\n    }\\r\\n\\r\\n    function hasVault(address _vault) external returns (bool) {\\r\\n        return vaults[_vault];\\r\\n    }\\r\\n\\r\\n    function addToWhiteList(address _target) public onlyGovernance {\\r\\n        whiteList[_target] = true;\\r\\n    }\\r\\n\\r\\n    function removeFromWhiteList(address _target) public onlyGovernance {\\r\\n        whiteList[_target] = false;\\r\\n    }\\r\\n\\r\\n    function setFeeRewardForwarder(address _feeRewardForwarder)\\r\\n        public\\r\\n        onlyGovernance\\r\\n    {\\r\\n        require(\\r\\n            _feeRewardForwarder != address(0),\\r\\n            \\\"new reward forwarder should not be empty\\\"\\r\\n        );\\r\\n        feeRewardForwarder = _feeRewardForwarder;\\r\\n    }\\r\\n\\r\\n    function setTreasury(address _treasury) public onlyGovernance {\\r\\n        require(_treasury != address(0), \\\"treasury cannot be empty\\\");\\r\\n        treasury = _treasury;\\r\\n    }\\r\\n\\r\\n    function addVaultAndStrategy(address _vault, address _strategy)\\r\\n        external\\r\\n        onlyGovernance\\r\\n    {\\r\\n        require(_vault != address(0), \\\"new vault shouldn't be empty\\\");\\r\\n        require(!vaults[_vault], \\\"vault already exists\\\");\\r\\n        require(_strategy != address(0), \\\"new strategy shouldn't be empty\\\");\\r\\n\\r\\n        vaults[_vault] = true;\\r\\n        // adding happens while setting\\r\\n        if (IVault(_vault).strategy() == address(0)) {\\r\\n            IVault(_vault).setStrategy(_strategy);\\r\\n        } else {\\r\\n            require(_strategy == IVault(_vault).strategy(), \\\"invalid strategy\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function forceUnleashed(address _vault)\\r\\n        external\\r\\n        onlyGalacticWorkerOrGovernance\\r\\n        validVault(_vault)\\r\\n    {\\r\\n        uint256 oldSharePrice = IVault(_vault).getPricePerFullShare();\\r\\n        IVault(_vault).forceUnleashed();\\r\\n        if (address(galacticRewards) != address(0)) {\\r\\n            // rewards are an option now\\r\\n            galacticRewards.rewardMe(msg.sender, _vault);\\r\\n        }\\r\\n        emit SharePriceChangeLog(\\r\\n            _vault,\\r\\n            IVault(_vault).strategy(),\\r\\n            oldSharePrice,\\r\\n            IVault(_vault).getPricePerFullShare(),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function rebalance(address _vault)\\r\\n        external\\r\\n        onlyGalacticWorkerOrGovernance\\r\\n        validVault(_vault)\\r\\n    {\\r\\n        IVault(_vault).rebalance();\\r\\n    }\\r\\n\\r\\n    function setGalacticRewards(address _galacticRewards)\\r\\n        external\\r\\n        onlyGovernance\\r\\n    {\\r\\n        galacticRewards = GalacticRewards(_galacticRewards);\\r\\n    }\\r\\n\\r\\n    // transfers token in the controller contract to the governance\\r\\n    function salvage(address _token, uint256 _amount) external onlyGovernance {\\r\\n        IERC20(_token).safeTransfer(governance(), _amount);\\r\\n    }\\r\\n\\r\\n    function salvageStrategy(\\r\\n        address _strategy,\\r\\n        address _token,\\r\\n        uint256 _amount\\r\\n    ) external onlyGovernance {\\r\\n        // the strategy is responsible for maintaining the list of\\r\\n        // salvagable tokens, to make sure that governance cannot come\\r\\n        // in and take away the coins\\r\\n        IStrategy(_strategy).salvage(governance(), _token, _amount);\\r\\n    }\\r\\n\\r\\n    function notifyFee(address underlying, uint256 fee) external {\\r\\n        if (fee > 0) {\\r\\n            IERC20(underlying).safeTransferFrom(msg.sender, address(this), fee);\\r\\n            IERC20(underlying).safeApprove(feeRewardForwarder, 0);\\r\\n            IERC20(underlying).safeApprove(feeRewardForwarder, fee);\\r\\n            IFeeRewardForwarder(feeRewardForwarder).poolNotifyFixedTarget(\\r\\n                underlying,\\r\\n                fee\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/E/Defi/force/contracts/contracts/GalacticRewards.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"./Governable.sol\\\";\\r\\nimport \\\"./Controllable.sol\\\";\\r\\n\\r\\ncontract GalacticRewards is Controllable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    event Rewarded(\\r\\n        address indexed recipient,\\r\\n        address indexed vault,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    // token used for rewards\\r\\n    IERC20 public token;\\r\\n\\r\\n    // how many tokens per each block\\r\\n    uint256 public blockReward;\\r\\n\\r\\n    // vault to the last rewarded block\\r\\n    mapping(address => uint256) public lastReward;\\r\\n\\r\\n    constructor(address _storage, address _token)\\r\\n        public\\r\\n        Controllable(_storage)\\r\\n    {\\r\\n        token = IERC20(_token);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Called from the controller after force unleash has been done. Defensively avoid\\r\\n     * reverting the transaction in this function.\\r\\n     */\\r\\n    function rewardMe(address recipient, address vault)\\r\\n        external\\r\\n        onlyController\\r\\n    {\\r\\n        if (address(token) == address(0) || blockReward == 0) {\\r\\n            // no rewards now\\r\\n            emit Rewarded(recipient, vault, 0);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (lastReward[vault] == 0) {\\r\\n            // vault does not exist\\r\\n            emit Rewarded(recipient, vault, 0);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 span = block.number.sub(lastReward[vault]);\\r\\n        uint256 reward = blockReward.mul(span);\\r\\n\\r\\n        if (reward > 0) {\\r\\n            uint256 balance = token.balanceOf(address(this));\\r\\n            uint256 realReward = balance >= reward ? reward : balance;\\r\\n            if (realReward > 0) {\\r\\n                token.safeTransfer(recipient, realReward);\\r\\n            }\\r\\n            emit Rewarded(recipient, vault, realReward);\\r\\n        } else {\\r\\n            emit Rewarded(recipient, vault, 0);\\r\\n        }\\r\\n        lastReward[vault] = block.number;\\r\\n    }\\r\\n\\r\\n    function addVault(address _vault) external onlyGovernance {\\r\\n        lastReward[_vault] = block.number;\\r\\n    }\\r\\n\\r\\n    function removeVault(address _vault) external onlyGovernance {\\r\\n        delete (lastReward[_vault]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Transfers tokens for the new rewards cycle. Allows for changing the rewards setting\\r\\n     * at the same time.\\r\\n     */\\r\\n    function load(\\r\\n        address _token,\\r\\n        uint256 _rate,\\r\\n        uint256 _amount\\r\\n    ) external onlyGovernance {\\r\\n        token = IERC20(_token);\\r\\n        blockReward = _rate;\\r\\n        if (address(token) != address(0) && _amount > 0) {\\r\\n            token.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/E/Defi/force/contracts/contracts/Governable.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\r\\n\\r\\nimport \\\"./Storage.sol\\\";\\r\\n\\r\\ncontract Governable {\\r\\n    Storage public store;\\r\\n\\r\\n    constructor(address _store) public {\\r\\n        require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\r\\n        store = Storage(_store);\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernance() {\\r\\n        require(store.isGovernance(msg.sender), \\\"Not governance\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setStorage(address _store) public onlyGovernance {\\r\\n        require(_store != address(0), \\\"new storage shouldn't be empty\\\");\\r\\n        store = Storage(_store);\\r\\n    }\\r\\n\\r\\n    function governance() public view returns (address) {\\r\\n        return store.governance();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/E/Defi/force/contracts/contracts/Storage.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\r\\n\\r\\ncontract Storage {\\r\\n    address public governance;\\r\\n    address public controller;\\r\\n\\r\\n    constructor() public {\\r\\n        governance = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyGovernance() {\\r\\n        require(isGovernance(msg.sender), \\\"Not governance\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setGovernance(address _governance) public onlyGovernance {\\r\\n        require(_governance != address(0), \\\"new governance shouldn't be empty\\\");\\r\\n        governance = _governance;\\r\\n    }\\r\\n\\r\\n    function setController(address _controller) public onlyGovernance {\\r\\n        require(_controller != address(0), \\\"new controller shouldn't be empty\\\");\\r\\n        controller = _controller;\\r\\n    }\\r\\n\\r\\n    function isGovernance(address account) public view returns (bool) {\\r\\n        return account == governance;\\r\\n    }\\r\\n\\r\\n    function isController(address account) public view returns (bool) {\\r\\n        return account == controller;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/E/Defi/force/contracts/contracts/interfaces/IController.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\r\\n\\r\\ninterface IController {\\r\\n    function whiteList(address _target) external view returns (bool);\\r\\n\\r\\n    function addVaultAndStrategy(address _vault, address _strategy) external;\\r\\n\\r\\n    function forceUnleashed(address _vault) external;\\r\\n\\r\\n    function hasVault(address _vault) external returns (bool);\\r\\n\\r\\n    function salvage(address _token, uint256 amount) external;\\r\\n\\r\\n    function salvageStrategy(\\r\\n        address _strategy,\\r\\n        address _token,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function notifyFee(address _underlying, uint256 fee) external;\\r\\n\\r\\n    function profitSharingNumerator() external view returns (uint256);\\r\\n\\r\\n    function profitSharingDenominator() external view returns (uint256);\\r\\n\\r\\n    function treasury() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/E/Defi/force/contracts/contracts/interfaces/IFeeRewardForwarder.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\r\\n\\r\\ninterface IFeeRewardForwarder {\\r\\n    function poolNotifyFixedTarget(address _token, uint256 _amount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/E/Defi/force/contracts/contracts/interfaces/IStrategy.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\r\\n\\r\\ninterface IStrategy {\\r\\n    function unsalvagableTokens(address tokens) external view returns (bool);\\r\\n\\r\\n    function governance() external view returns (address);\\r\\n\\r\\n    function controller() external view returns (address);\\r\\n\\r\\n    function underlying() external view returns (address);\\r\\n\\r\\n    function vault() external view returns (address);\\r\\n\\r\\n    function withdrawAllToVault() external;\\r\\n\\r\\n    function withdrawToVault(uint256 amount) external;\\r\\n\\r\\n    function investedUnderlyingBalance() external view returns (uint256); // itsNotMuch()\\r\\n\\r\\n    // should only be called by controller\\r\\n    function salvage(\\r\\n        address recipient,\\r\\n        address token,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function forceUnleashed() external;\\r\\n\\r\\n    function depositArbCheck() external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/E/Defi/force/contracts/contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"pragma solidity 0.5.16;\\r\\n\\r\\ninterface IVault {\\r\\n    function underlyingBalanceInVault() external view returns (uint256);\\r\\n\\r\\n    function underlyingBalanceWithInvestment() external view returns (uint256);\\r\\n\\r\\n    function governance() external view returns (address);\\r\\n\\r\\n    function controller() external view returns (address);\\r\\n\\r\\n    function underlying() external view returns (address);\\r\\n\\r\\n    function strategy() external view returns (address);\\r\\n\\r\\n    function setStrategy(address _strategy) external;\\r\\n\\r\\n    function setVaultFractionToInvest(uint256 numerator, uint256 denominator)\\r\\n        external;\\r\\n\\r\\n    function deposit(uint256 amountWei) external;\\r\\n\\r\\n    function depositFor(uint256 amountWei, address holder) external;\\r\\n\\r\\n    function withdrawAll() external;\\r\\n\\r\\n    function withdraw(uint256 numberOfShares) external;\\r\\n\\r\\n    function getPricePerFullShare() external view returns (uint256);\\r\\n\\r\\n    function underlyingBalanceWithInvestmentForHolder(address holder)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    // force unleash should be callable only by the controller (by the force unleasher) or by governance\\r\\n    function forceUnleashed() external;\\r\\n\\r\\n    function rebalance() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.5.5;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following \\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` into `address payable`. Note that this is\\n     * simply a type cast: the actual underlying value is not changed.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function toPayable(address account) internal pure returns (address payable) {\\n        return address(uint160(account));\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-call-value\\n        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRewardForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SharePriceChangeLog\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"addGalacticWorker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"addToWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"addVaultAndStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRewardForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"forceUnleashed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"galacticRewards\",\"outputs\":[{\"internalType\":\"contract GalacticRewards\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"galacticWorkers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"hasVault\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"notifyFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitSharingDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitSharingNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"rebalance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"removeFromWhiteList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"removeGalacticWorker\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"salvage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"salvageStrategy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRewardForwarder\",\"type\":\"address\"}],\"name\":\"setFeeRewardForwarder\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_galacticRewards\",\"type\":\"address\"}],\"name\":\"setGalacticRewards\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract Storage\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Controller","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000837b73e6e8f04e3e4685c41b9a8c6f2bebc9e70f00000000000000000000000084ca01bf22162c5d8ea5f652ae46d7516c251f0f000000000000000000000000ccee4a893d5d97829008af8bee5b7169176bee5a","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}