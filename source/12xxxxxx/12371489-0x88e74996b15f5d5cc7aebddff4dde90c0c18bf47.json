{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"temp-contracts/distribution/CancelableDelegatingVester.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\ncontract CancelableDelegatingVester {\\n  using SafeMath for uint256;\\n\\n  /// @dev The name of this contract\\n  string public constant name = \\\"Indexed Team Vesting Contract\\\";\\n\\n  address public immutable terminator;\\n  address public immutable ndx;\\n\\n  uint256 public immutable vestingAmount;\\n  uint256 public immutable vestingBegin;\\n  uint256 public immutable vestingEnd;\\n\\n  address public recipient;\\n  uint256 public lastUpdate;\\n\\n  constructor(\\n    address terminator_,\\n    address ndx_,\\n    address recipient_,\\n    uint256 vestingAmount_,\\n    uint256 vestingBegin_,\\n    uint256 vestingEnd_\\n  ) public {\\n    require(\\n      vestingBegin_ >= block.timestamp,\\n      \\\"CancelableDelegatingVester::constructor: vesting begin too early\\\"\\n    );\\n    require(\\n      vestingEnd_ > vestingBegin_,\\n      \\\"CancelableDelegatingVester::constructor: vesting end too early\\\"\\n    );\\n\\n    terminator = terminator_;\\n    ndx = ndx_;\\n    recipient = recipient_;\\n\\n    vestingAmount = vestingAmount_;\\n    vestingBegin = vestingBegin_;\\n    vestingEnd = vestingEnd_;\\n\\n    lastUpdate = vestingBegin_;\\n  }\\n\\n  function delegate(address delegatee) external {\\n    require(\\n      msg.sender == recipient,\\n      \\\"CancelableDelegatingVester::delegate: unauthorized\\\"\\n    );\\n    INdx(ndx).delegate(delegatee);\\n  }\\n\\n  function setRecipient(address recipient_) external {\\n    require(\\n      msg.sender == recipient,\\n      \\\"CancelableDelegatingVester::setRecipient: unauthorized\\\"\\n    );\\n    recipient = recipient_;\\n  }\\n\\n  function claim() public {\\n    uint256 amount;\\n    if (block.timestamp >= vestingEnd) {\\n      amount = INdx(ndx).balanceOf(address(this));\\n    } else {\\n      amount = vestingAmount.mul(block.timestamp - lastUpdate).div(\\n        vestingEnd - vestingBegin\\n      );\\n      lastUpdate = block.timestamp;\\n    }\\n    INdx(ndx).transfer(recipient, amount);\\n  }\\n\\n  function terminate() external {\\n    require(\\n      msg.sender == terminator,\\n      \\\"CancelableDelegatingVester::terminate: unauthorized\\\"\\n    );\\n    claim();\\n    uint256 amount = INdx(ndx).balanceOf(address(this));\\n    INdx(ndx).transfer(terminator, amount);\\n  }\\n}\\n\\ninterface INdx {\\n  function balanceOf(address account) external view returns (uint256);\\n  function transfer(address dst, uint256 rawAmount) external returns (bool);\\n  function transferFrom(address src, address dst, uint256 rawAmount) external returns (bool);\\n  function delegate(address delegatee) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"temp-contracts/distribution/VestingFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./CancelableDelegatingVester.sol\\\";\\n\\n\\ncontract VestingFactory {\\n  address public immutable ndx;\\n\\n  constructor(address ndx_) public {\\n    ndx = ndx_;\\n  }\\n\\n  function createVestingContract(\\n    address terminator,\\n    address recipient,\\n    uint256 vestingAmount,\\n    uint256 numDays\\n  ) external {\\n    require(numDays <= 730, \\\"Excessive duration\\\");\\n    uint256 vestingBegin = block.timestamp;\\n    uint256 vestingEnd = vestingBegin + (numDays * 86400);\\n    CancelableDelegatingVester vester = new CancelableDelegatingVester(\\n      terminator,\\n      ndx,\\n      recipient,\\n      vestingAmount,\\n      vestingBegin,\\n      vestingEnd\\n    );\\n    INdx(ndx).transferFrom(msg.sender, address(vester), vestingAmount);\\n  }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ndx_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"terminator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vestingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numDays\",\"type\":\"uint256\"}],\"name\":\"createVestingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ndx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"VestingFactory","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000086772b1409b61c639eaac9ba0acfbb6e238e5f83","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}