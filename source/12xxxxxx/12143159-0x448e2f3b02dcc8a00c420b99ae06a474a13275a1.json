{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/IntegralDelayJob.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"./interfaces/IIntegralDelay.sol\\\";\\nimport \\\"./interfaces/IKeep3rV1.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\ncontract IntegralDelayJob {\\n    address public governance;\\n    address public pendingGovernance;\\n\\n    address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    IKeep3rV1 public constant KP3R = IKeep3rV1(0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44);\\n\\n    address public integralDelay; // 0x8743cc30727e9E460A5E69E217893f42DFad1650\\n    uint256 internal constant decimals = 10000;\\n    uint256 internal reducedPaymentPercent;\\n    uint256 internal n = 10;\\n\\n    constructor(address _integralDelay, uint256 _reducedPaymentPercent) {\\n        governance = msg.sender;\\n        integralDelay = _integralDelay;\\n        reducedPaymentPercent = _reducedPaymentPercent;\\n    }\\n\\n    receive() external payable {}\\n\\n    function setGovernance(address _governance) external {\\n        require(msg.sender == governance, \\\"!G\\\");\\n        pendingGovernance = _governance;\\n    }\\n\\n    function acceptGovernance() external {\\n        require(msg.sender == pendingGovernance, \\\"!pG\\\");\\n        governance = pendingGovernance;\\n    }\\n\\n    function setIntegralDelay(address _integralDelay) external {\\n        require(msg.sender == governance, \\\"!G\\\");\\n        integralDelay = _integralDelay;\\n    }\\n\\n    function setReducedPaymentPercent(uint256 _reducedPaymentPercent) external {\\n        require(msg.sender == governance, \\\"!G\\\");\\n        reducedPaymentPercent = _reducedPaymentPercent;\\n    }\\n\\n    function setN(uint256 _n) external {\\n        require(msg.sender == governance, \\\"!G\\\");\\n        n = _n;\\n    }\\n\\n    function getRewards(address erc20) external {\\n        require(msg.sender == governance, \\\"!G\\\");\\n        if (erc20 == ETH) return payable(governance).transfer(address(this).balance);\\n        IERC20(erc20).transfer(governance, IERC20(erc20).balanceOf(address(this)));\\n    }\\n\\n    function work() external upkeep {\\n        require(workable(), \\\"!W\\\");\\n        IIntegralDelay(integralDelay).execute(n);\\n    }\\n\\n    function workForFree() external keeper {\\n        IIntegralDelay(integralDelay).execute(n);\\n    }\\n\\n    function workable() public view returns (bool canWork) {\\n        uint256 botExecuteTime = IIntegralDelay(integralDelay).botExecuteTime();\\n        for (uint256 i = 0; i < n; i++) {\\n            uint256 lastProcessedOrderId = IIntegralDelay(integralDelay).lastProcessedOrderId();\\n            if (IIntegralDelay(integralDelay).isOrderCanceled(lastProcessedOrderId + 1)) {\\n                continue;\\n            }\\n            (Orders.OrderType orderType, uint256 validAfterTimestamp) = IIntegralDelay(integralDelay).getOrder(lastProcessedOrderId + 1);\\n            if (orderType == Orders.OrderType.Empty || validAfterTimestamp >= block.timestamp) {\\n                break;\\n            }\\n            if (block.timestamp >= validAfterTimestamp + botExecuteTime) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    modifier keeper() {\\n        require(KP3R.keepers(msg.sender), \\\"!K\\\");\\n        _;\\n    }\\n\\n    modifier upkeep() {\\n        uint256 _gasUsed = gasleft();\\n        require(KP3R.keepers(msg.sender), \\\"!K\\\");\\n        _;\\n        uint256 _received = KP3R.KPRH().getQuoteLimit(_gasUsed - gasleft());\\n        uint256 _fairPayment = (_received * decimals) / reducedPaymentPercent;\\n        KP3R.receipt(address(KP3R), msg.sender, _fairPayment);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IIntegralDelay.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IOrders.sol\\\";\\n\\ninterface IIntegralDelay {\\n    function lastProcessedOrderId() external view returns (uint256);\\n\\n    function isOrderCanceled(uint256 orderId) external view returns (bool);\\n\\n    function getOrder(uint256 orderId) external view returns (Orders.OrderType orderType, uint256 validAfterTimestamp);\\n\\n    function botExecuteTime() external view returns (uint256);\\n\\n    function execute(uint256 n) external;\\n\\n    // event OrderExecuted(uint256 indexed id, bool indexed success, bytes data, uint256 gasSpent, uint256 ethRefunded);\\n    // event RefundFailed(address indexed to, address indexed token, uint256 amount, bytes data);\\n    // event EthRefund(address indexed to, bool indexed success, uint256 value);\\n    // event OwnerSet(address owner);\\n    // event BotSet(address bot);\\n    // event DelaySet(uint256 delay);\\n    // event MaxGasLimitSet(uint256 maxGasLimit);\\n    // event GasPriceInertiaSet(uint256 gasPriceInertia);\\n    // event MaxGasPriceImpactSet(uint256 maxGasPriceImpact);\\n    // event TransferGasCostSet(address token, uint256 gasCost);\\n    // event OrderDisabled(address pair, Orders.OrderType orderType, bool disabled);\\n    // event UnwrapFailed(address to, uint256 amount);\\n    // event Execute(address sender, uint256 n);\\n\\n    // function factory() external returns (address);\\n\\n    // function owner() external returns (address);\\n\\n    // function bot() external returns (address);\\n\\n    // function gasPriceInertia() external returns (uint256);\\n\\n    // function gasPrice() external returns (uint256);\\n\\n    // function maxGasPriceImpact() external returns (uint256);\\n\\n    // function maxGasLimit() external returns (uint256);\\n\\n    // function delay() external returns (uint256);\\n\\n    // function totalShares(address token) external returns (uint256);\\n\\n    // function weth() external returns (address);\\n\\n    // function getTransferGasCost(address token) external returns (uint256);\\n\\n    // function getDepositOrder(uint256 orderId) external returns (Orders.DepositOrder memory order);\\n\\n    // function getWithdrawOrder(uint256 orderId) external returns (Orders.WithdrawOrder memory order);\\n\\n    // function getSellOrder(uint256 orderId) external returns (Orders.SellOrder memory order);\\n\\n    // function getBuyOrder(uint256 orderId) external returns (Orders.BuyOrder memory order);\\n\\n    // function getDepositDisabled(address pair) external returns (bool);\\n\\n    // function getWithdrawDisabled(address pair) external returns (bool);\\n\\n    // function getBuyDisabled(address pair) external returns (bool);\\n\\n    // function getSellDisabled(address pair) external returns (bool);\\n\\n    // function getOrderStatus(uint256 orderId) external returns (Orders.OrderStatus);\\n\\n    // function setOrderDisabled(\\n    //     address pair,\\n    //     Orders.OrderType orderType,\\n    //     bool disabled\\n    // ) external;\\n\\n    // function setOwner(address _owner) external;\\n\\n    // function setBot(address _bot) external;\\n\\n    // function setMaxGasLimit(uint256 _maxGasLimit) external;\\n\\n    // function setDelay(uint256 _delay) external;\\n\\n    // function setGasPriceInertia(uint256 _gasPriceInertia) external;\\n\\n    // function setMaxGasPriceImpact(uint256 _maxGasPriceImpact) external;\\n\\n    // function setTransferGasCost(address token, uint256 gasCost) external;\\n\\n    // function deposit(Orders.DepositParams memory depositParams) external payable returns (uint256 orderId);\\n\\n    // function withdraw(Orders.WithdrawParams memory withdrawParams) external payable returns (uint256 orderId);\\n\\n    // function sell(Orders.SellParams memory sellParams) external payable returns (uint256 orderId);\\n\\n    // function buy(Orders.BuyParams memory buyParams) external payable returns (uint256 orderId);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IKeep3rV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\ninterface IKeep3rV1Helper {\\n    function getQuoteLimit(uint256 gasUsed) external view returns (uint256);\\n}\\n\\ninterface IKeep3rV1 {\\n    function keepers(address keeper) external returns (bool);\\n\\n    function KPRH() external view returns (IKeep3rV1Helper);\\n\\n    function receipt(\\n        address credit,\\n        address keeper,\\n        uint256 amount\\n    ) external;\\n\\n    function workReceipt(address keeper, uint256 amount) external;\\n\\n    function addJob(address job) external;\\n\\n    function addKPRCredit(address job, uint256 amount) external;\\n\\n    function bond(address bonding, uint256 amount) external;\\n\\n    function activate(address bonding) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\n\\ninterface IERC20 {\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOrders.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.2;\\npragma experimental ABIEncoderV2;\\n\\nlibrary Orders {\\n    enum OrderType {Empty, Deposit, Withdraw, Sell, Buy}\\n    enum OrderStatus {NonExistent, EnqueuedWaiting, EnqueuedReady, ExecutedSucceeded, ExecutedFailed, Canceled}\\n\\n    event MaxGasLimitSet(uint256 maxGasLimit);\\n    event GasPriceInertiaSet(uint256 gasPriceInertia);\\n    event MaxGasPriceImpactSet(uint256 maxGasPriceImpact);\\n    event TransferGasCostSet(address token, uint256 gasCost);\\n\\n    event DepositEnqueued(uint256 indexed orderId, uint128 validAfterTimestamp, uint256 gasPrice);\\n    event WithdrawEnqueued(uint256 indexed orderId, uint128 validAfterTimestamp, uint256 gasPrice);\\n    event SellEnqueued(uint256 indexed orderId, uint128 validAfterTimestamp, uint256 gasPrice);\\n    event BuyEnqueued(uint256 indexed orderId, uint128 validAfterTimestamp, uint256 gasPrice);\\n\\n    struct PairInfo {\\n        address pair;\\n        address token0;\\n        address token1;\\n    }\\n\\n    struct Data {\\n        uint256 delay;\\n        uint256 newestOrderId;\\n        uint256 lastProcessedOrderId;\\n        mapping(uint256 => StoredOrder) orderQueue;\\n        address factory;\\n        uint256 maxGasLimit;\\n        uint256 gasPrice;\\n        uint256 gasPriceInertia;\\n        uint256 maxGasPriceImpact;\\n        mapping(uint32 => PairInfo) pairs;\\n        mapping(address => uint256) transferGasCosts;\\n        mapping(uint256 => bool) canceled;\\n        mapping(address => bool) depositDisabled;\\n        mapping(address => bool) withdrawDisabled;\\n        mapping(address => bool) buyDisabled;\\n        mapping(address => bool) sellDisabled;\\n    }\\n\\n    struct StoredOrder {\\n        // slot 1\\n        uint8 orderType;\\n        uint32 validAfterTimestamp;\\n        uint8 unwrapAndFailure;\\n        uint32 deadline;\\n        uint32 gasLimit;\\n        uint32 gasPrice;\\n        uint112 liquidityOrRatio;\\n        // slot 1\\n        uint112 value0;\\n        uint112 value1;\\n        uint32 pairId;\\n        // slot2\\n        address to;\\n        uint32 minRatioChangeToSwap;\\n        uint32 minSwapPrice;\\n        uint32 maxSwapPrice;\\n    }\\n\\n    struct DepositOrder {\\n        uint32 pairId;\\n        uint256 share0;\\n        uint256 share1;\\n        uint256 initialRatio;\\n        uint256 minRatioChangeToSwap;\\n        uint256 minSwapPrice;\\n        uint256 maxSwapPrice;\\n        bool unwrap;\\n        address to;\\n        uint256 gasPrice;\\n        uint256 gasLimit;\\n        uint256 deadline;\\n    }\\n\\n    struct WithdrawOrder {\\n        uint32 pairId;\\n        uint256 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        bool unwrap;\\n        address to;\\n        uint256 gasPrice;\\n        uint256 gasLimit;\\n        uint256 deadline;\\n    }\\n\\n    struct SellOrder {\\n        uint32 pairId;\\n        bool inverse;\\n        uint256 shareIn;\\n        uint256 amountOutMin;\\n        bool unwrap;\\n        address to;\\n        uint256 gasPrice;\\n        uint256 gasLimit;\\n        uint256 deadline;\\n    }\\n\\n    struct BuyOrder {\\n        uint32 pairId;\\n        bool inverse;\\n        uint256 shareInMax;\\n        uint256 amountOut;\\n        bool unwrap;\\n        address to;\\n        uint256 gasPrice;\\n        uint256 gasLimit;\\n        uint256 deadline;\\n    }\\n\\n    struct DepositParams {\\n        address token0;\\n        address token1;\\n        uint256 amount0;\\n        uint256 amount1;\\n        uint256 initialRatio;\\n        uint256 minRatioChangeToSwap;\\n        uint256 minSwapPrice;\\n        uint256 maxSwapPrice;\\n        bool wrap;\\n        address to;\\n        uint256 gasLimit;\\n        uint256 submitDeadline;\\n        uint256 executionDeadline;\\n    }\\n\\n    struct WithdrawParams {\\n        address token0;\\n        address token1;\\n        uint256 liquidity;\\n        uint256 amount0Min;\\n        uint256 amount1Min;\\n        bool unwrap;\\n        address to;\\n        uint256 gasLimit;\\n        uint256 submitDeadline;\\n        uint256 executionDeadline;\\n    }\\n\\n    struct SellParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        uint256 amountOutMin;\\n        bool wrapUnwrap;\\n        address to;\\n        uint256 gasLimit;\\n        uint256 submitDeadline;\\n        uint256 executionDeadline;\\n    }\\n\\n    struct BuyParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountInMax;\\n        uint256 amountOut;\\n        bool wrapUnwrap;\\n        address to;\\n        uint256 gasLimit;\\n        uint256 submitDeadline;\\n        uint256 executionDeadline;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integralDelay\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reducedPaymentPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KP3R\",\"outputs\":[{\"internalType\":\"contract IKeep3rV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"getRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"integralDelay\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integralDelay\",\"type\":\"address\"}],\"name\":\"setIntegralDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_n\",\"type\":\"uint256\"}],\"name\":\"setN\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reducedPaymentPercent\",\"type\":\"uint256\"}],\"name\":\"setReducedPaymentPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"work\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workForFree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canWork\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"IntegralDelayJob","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"0000000000000000000000008743cc30727e9e460a5e69e217893f42dfad16500000000000000000000000000000000000000000000000000000000000002328","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}