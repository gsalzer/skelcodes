{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity >=0.8.0;\r\n\r\n\r\n// SPDX-License-Identifier: BSD-3-Clause\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint(_at(set._inner, index))));\r\n    }\r\n\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor()  {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\ninterface Token {\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function transfer(address, uint) external returns (bool);\r\n}\r\n\r\ncontract EU21_France is Ownable {\r\n    using SafeMath for uint;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    \r\n    event RewardsTransferred(address holder, uint amount);\r\n    \r\n    // EU21 token contract address\r\n    address public constant tokenAddress = 0x87ea1F06d7293161B9ff080662c1b0DF775122D3;\r\n    \r\n    // amount disbursed per victory\r\n    uint public amountToDisburse = 1000000000000000000000;   // 1000 EU21 PER VICTORY\r\n    \r\n    // total games rewards for each pool    \r\n    uint public totalReward = 7000000000000000000000; // 7000 EU21 TOTAL GAMES REWARDS (EXCLUDING THE GRAND PRIZE)\r\n    \r\n    // unstaking possible after ...\r\n    uint public constant unstakeTime = 37 days;\r\n    // claiming possible after ...\r\n    uint public constant claimTime = 37 days;\r\n    \r\n    \r\n    uint public totalClaimedRewards = 0;\r\n    uint public totalDeposited = 0;\r\n    uint public totalDisbursed = 0;\r\n    bool public ended ;\r\n    uint public startTime = block.timestamp;\r\n    \r\n    EnumerableSet.AddressSet private holders;\r\n    \r\n    mapping (address => uint) public depositedTokens;\r\n    mapping (address => uint) public pending; \r\n    mapping (address => uint) public totalEarnedTokens;\r\n    \r\n    mapping (address => uint) public rewardEnded;\r\n    \r\n    function disburse () public onlyOwner returns (bool){\r\n        require(!ended, \"Staking already ended\");\r\n        \r\n        \r\n        address _hold;\r\n        uint _add;\r\n        for(uint i = 0; i < holders.length(); i = i.add(1)){\r\n            _hold = holders.at(i);\r\n            _add = depositedTokens[_hold].mul(amountToDisburse).div(totalDeposited);\r\n            pending[_hold] = pending[_hold].add(_add);\r\n        }\r\n        totalDisbursed = totalDisbursed.add(amountToDisburse);\r\n        return true;\r\n        \r\n    }\r\n    //Disburse and End the staking pool\r\n    function disburseAndEnd(uint _finalDisburseAmount) public onlyOwner returns (bool){\r\n        require(!ended, \"Staking already ended\");\r\n        require(_finalDisburseAmount > 0);\r\n        \r\n        address _hold;\r\n        uint _add;\r\n        for(uint i = 0; i < holders.length(); i = i.add(1)){\r\n            _hold = holders.at(i);\r\n            _add = depositedTokens[_hold].mul(_finalDisburseAmount).div(totalDeposited);\r\n            pending[_hold] = pending[_hold].add(_add);\r\n        }\r\n        totalDisbursed = totalDisbursed.add(_finalDisburseAmount);\r\n        \r\n        ended = true;\r\n        return true;\r\n    }\r\n    \r\n    //End the staking pool\r\n    function end() public onlyOwner returns (bool){\r\n        require(!ended, \"Staking already ended\");\r\n                ended = true;\r\n        return true;\r\n    }\r\n    \r\n    function updateAccount(address account) private {\r\n        uint pendingDivs = getPendingDivs(account);\r\n        if (pendingDivs > 0) {\r\n            pending[account] = 0;\r\n            depositedTokens[account] = depositedTokens[account].add(pendingDivs);\r\n            totalDeposited = totalDeposited.add(pendingDivs);\r\n            totalEarnedTokens[account] = totalEarnedTokens[account].add(pendingDivs);\r\n            totalClaimedRewards = totalClaimedRewards.add(pendingDivs);\r\n        }\r\n        \r\n    }\r\n    \r\n    function getPendingDivs(address _holder) public view returns (uint) {\r\n        if (!holders.contains(_holder)) return 0;\r\n        \r\n        uint pendingDivs = pending[_holder];\r\n       \r\n        return pendingDivs;\r\n    }\r\n    \r\n    function getNumberOfHolders() public view returns (uint) {\r\n        return holders.length();\r\n    }\r\n    \r\n    \r\n    function deposit(uint amountToStake) public {\r\n        require(!ended, \"Staking has ended\");\r\n        require(amountToStake > 0, \"Cannot deposit 0 Tokens\");\r\n    \r\n        require(Token(tokenAddress).transferFrom(msg.sender, address(this), amountToStake), \"Insufficient Token Allowance\");\r\n        \r\n        \r\n        updateAccount(msg.sender);\r\n        \r\n        \r\n        depositedTokens[msg.sender] = depositedTokens[msg.sender].add(amountToStake);\r\n        totalDeposited = totalDeposited.add(amountToStake);\r\n        \r\n        if (!holders.contains(msg.sender)) {\r\n            holders.add(msg.sender);\r\n            \r\n        }\r\n        \r\n    }\r\n    function claim() public{\r\n        require(holders.contains(msg.sender));\r\n        require(block.timestamp.sub(startTime) > claimTime || ended, \"Not yet.\");\r\n        require(pending[msg.sender] > 0);\r\n        \r\n        \r\n        uint _reward = pending[msg.sender];\r\n        pending[msg.sender] = 0;\r\n        require(Token(tokenAddress).transfer(msg.sender, _reward), \"Could not transfer tokens.\");\r\n        totalClaimedRewards = totalClaimedRewards.add(_reward);\r\n        totalEarnedTokens[msg.sender] = totalEarnedTokens[msg.sender].add(_reward);\r\n        \r\n        if(depositedTokens[msg.sender] == 0){\r\n            holders.remove(msg.sender);    \r\n        }\r\n    }\r\n    function withdraw(uint _amount) public{\r\n        require(block.timestamp.sub(startTime) > unstakeTime || ended, \"Not yet.\");\r\n        require(depositedTokens[msg.sender] >= _amount);\r\n        require(_amount > 0);\r\n        \r\n        \r\n        depositedTokens[msg.sender] = depositedTokens[msg.sender].sub(_amount);\r\n        totalDeposited = totalDeposited.sub(_amount);\r\n        require(Token(tokenAddress).transfer(msg.sender, _amount), \"Could not transfer tokens.\");\r\n        \r\n        if(depositedTokens[msg.sender] == 0 && pending[msg.sender] == 0){\r\n            holders.remove(msg.sender);    \r\n        }\r\n        \r\n    }\r\n    /*\r\n    function withdrawAllAfterEnd() public {\r\n        require(ended, \"Staking has not ended\");\r\n       \r\n        uint _pend = pending[msg.sender];\r\n        uint amountToWithdraw = _pend.add(depositedTokens[msg.sender]);\r\n        \r\n        require(amountToWithdraw >= 0, \"Invalid amount to withdraw\");\r\n        pending[msg.sender] = 0;\r\n        depositedTokens[msg.sender] = 0;\r\n        totalDeposited = totalDeposited.sub(depositedTokens[msg.sender]);\r\n        require(Token(tokenAddress).transfer(msg.sender, amountToWithdraw), \"Could not transfer tokens.\");\r\n        \r\n        totalClaimedRewards = totalClaimedRewards.add(_pend);\r\n        totalEarnedTokens[msg.sender] = totalEarnedTokens[msg.sender].add(_pend);\r\n         \r\n        holders.remove(msg.sender);\r\n        \r\n    }*/\r\n\r\n    \r\n    function getStakersList(uint startIndex, uint endIndex) \r\n        public \r\n        view \r\n        returns (address[] memory stakers, \r\n            uint[] memory stakingTimestamps, \r\n            uint[] memory lastClaimedTimeStamps,\r\n            uint[] memory stakedTokens) {\r\n        require (startIndex < endIndex);\r\n        \r\n        uint length = endIndex.sub(startIndex);\r\n        address[] memory _stakers = new address[](length);\r\n        uint[] memory _stakingTimestamps = new uint[](length);\r\n        uint[] memory _lastClaimedTimeStamps = new uint[](length);\r\n        uint[] memory _stakedTokens = new uint[](length);\r\n        \r\n        for (uint i = startIndex; i < endIndex; i = i.add(1)) {\r\n            address staker = holders.at(i);\r\n            uint listIndex = i.sub(startIndex);\r\n            _stakers[listIndex] = staker;\r\n            _stakedTokens[listIndex] = depositedTokens[staker];\r\n        }\r\n        \r\n        return (_stakers, _stakingTimestamps, _lastClaimedTimeStamps, _stakedTokens);\r\n    }\r\n    \r\n    // function to allow admin to claim *other* ERC20 tokens sent to this contract (by mistake)\r\n    function transferAnyERC20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner {\r\n        require (_tokenAddr != tokenAddress , \"Cannot Transfer Out this token\");\r\n        Token(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"amountToDisburse\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToStake\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disburse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_finalDisburseAmount\",\"type\":\"uint256\"}],\"name\":\"disburseAndEnd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getPendingDivs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getStakersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"stakers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakingTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lastClaimedTimeStamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakedTokens\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardEnded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDisbursed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalEarnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EU21_France","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"BSD-3-Clause","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8daea7d80962cdbe4603772cbb5dda17ee6028fc18008215611cfea445e5158d"}]}