{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: bsl-1.1\r\n\r\n// File: localhost/contracts/interfaces/IVault.sol\r\n\r\ninterface IVault {\r\n    function DENOMINATOR_1E2 (  ) external view returns ( uint256 );\r\n    function DENOMINATOR_1E5 (  ) external view returns ( uint256 );\r\n    function borrow ( address asset, address user, uint256 amount ) external returns ( uint256 );\r\n    function calculateFee ( address asset, address user, uint256 amount ) external view returns ( uint256 );\r\n    function changeOracleType ( address asset, address user, uint256 newOracleType ) external;\r\n    function chargeFee ( address asset, address user, uint256 amount ) external;\r\n    function col (  ) external view returns ( address );\r\n    function colToken ( address, address ) external view returns ( uint256 );\r\n    function collaterals ( address, address ) external view returns ( uint256 );\r\n    function debts ( address, address ) external view returns ( uint256 );\r\n    function depositCol ( address asset, address user, uint256 amount ) external;\r\n    function depositEth ( address user ) external payable;\r\n    function depositMain ( address asset, address user, uint256 amount ) external;\r\n    function destroy ( address asset, address user ) external;\r\n    function getTotalDebt ( address asset, address user ) external view returns ( uint256 );\r\n    function lastUpdate ( address, address ) external view returns ( uint256 );\r\n    function liquidate ( address asset, address positionOwner, uint256 mainAssetToLiquidator, uint256 colToLiquidator, uint256 mainAssetToPositionOwner, uint256 colToPositionOwner, uint256 repayment, uint256 penalty, address liquidator ) external;\r\n    function liquidationBlock ( address, address ) external view returns ( uint256 );\r\n    function liquidationFee ( address, address ) external view returns ( uint256 );\r\n    function liquidationPrice ( address, address ) external view returns ( uint256 );\r\n    function oracleType ( address, address ) external view returns ( uint256 );\r\n    function repay ( address asset, address user, uint256 amount ) external returns ( uint256 );\r\n    function spawn ( address asset, address user, uint256 _oracleType ) external;\r\n    function stabilityFee ( address, address ) external view returns ( uint256 );\r\n    function tokenDebts ( address ) external view returns ( uint256 );\r\n    function triggerLiquidation ( address asset, address positionOwner, uint256 initialPrice ) external;\r\n    function update ( address asset, address user ) external;\r\n    function usdp (  ) external view returns ( address );\r\n    function vaultParameters (  ) external view returns ( address );\r\n    function weth (  ) external view returns ( address payable );\r\n    function withdrawCol ( address asset, address user, uint256 amount ) external;\r\n    function withdrawEth ( address user, uint256 amount ) external;\r\n    function withdrawMain ( address asset, address user, uint256 amount ) external;\r\n}\r\n\r\n// File: localhost/contracts/interfaces/ICollateralRegistry.sol\r\n\r\ninterface ICollateralRegistry {\r\n    function addCollateral ( address asset ) external;\r\n    function collateralId ( address ) external view returns ( uint256 );\r\n    function collaterals (  ) external view returns ( address[] memory );\r\n    function removeCollateral ( address asset ) external;\r\n    function vaultParameters (  ) external view returns ( address );\r\n    function isCollateral ( address asset ) external view returns ( bool );\r\n    function collateralList ( uint id ) external view returns ( address );\r\n    function collateralsCount (  ) external view returns ( uint );\r\n}\r\n\r\n// File: localhost/contracts/interfaces/IOracleRegistry.sol\r\n\r\npragma abicoder v2;\r\n\r\n\r\ninterface IOracleRegistry {\r\n\r\n    struct Oracle {\r\n        uint oracleType;\r\n        address oracleAddress;\r\n    }\r\n\r\n    function WETH (  ) external view returns ( address );\r\n    function getKeydonixOracleTypes (  ) external view returns ( uint256[] memory );\r\n    function getOracles (  ) external view returns ( Oracle[] memory foundOracles );\r\n    function keydonixOracleTypes ( uint256 ) external view returns ( uint256 );\r\n    function maxOracleType (  ) external view returns ( uint256 );\r\n    function oracleByAsset ( address asset ) external view returns ( address );\r\n    function oracleByType ( uint256 ) external view returns ( address );\r\n    function oracleTypeByAsset ( address ) external view returns ( uint256 );\r\n    function oracleTypeByOracle ( address ) external view returns ( uint256 );\r\n    function setKeydonixOracleTypes ( uint256[] memory _keydonixOracleTypes ) external;\r\n    function setOracle ( uint256 oracleType, address oracle ) external;\r\n    function setOracleTypeForAsset ( address asset, uint256 oracleType ) external;\r\n    function setOracleTypeForAssets ( address[] memory assets, uint256 oracleType ) external;\r\n    function unsetOracle ( uint256 oracleType ) external;\r\n    function unsetOracleForAsset ( address asset ) external;\r\n    function unsetOracleForAssets ( address[] memory assets ) external;\r\n    function vaultParameters (  ) external view returns ( address );\r\n}\r\n\r\n// File: localhost/contracts/interfaces/IBearingAssetOracle.sol\r\n\r\ninterface IBearingAssetOracle {\r\n    function assetToUsd ( address bearing, uint256 amount ) external view returns ( uint256 );\r\n    function bearingToUnderlying ( address bearing, uint256 amount ) external view returns ( address, uint256 );\r\n    function oracleRegistry (  ) external view returns ( address );\r\n    function setUnderlying ( address bearing, address underlying ) external;\r\n    function vaultParameters (  ) external view returns ( address );\r\n}\r\n\r\n// File: localhost/contracts/interfaces/IVaultManagerParameters.sol\r\n\r\ninterface IVaultManagerParameters {\r\n    function devaluationPeriod ( address ) external view returns ( uint256 );\r\n    function initialCollateralRatio ( address ) external view returns ( uint256 );\r\n    function liquidationDiscount ( address ) external view returns ( uint256 );\r\n    function liquidationRatio ( address ) external view returns ( uint256 );\r\n    function maxColPercent ( address ) external view returns ( uint256 );\r\n    function minColPercent ( address ) external view returns ( uint256 );\r\n    function setColPartRange ( address asset, uint256 min, uint256 max ) external;\r\n    function setCollateral (\r\n        address asset,\r\n        uint256 stabilityFeeValue,\r\n        uint256 liquidationFeeValue,\r\n        uint256 initialCollateralRatioValue,\r\n        uint256 liquidationRatioValue,\r\n        uint256 liquidationDiscountValue,\r\n        uint256 devaluationPeriodValue,\r\n        uint256 usdpLimit,\r\n        uint256[] calldata oracles,\r\n        uint256 minColP,\r\n        uint256 maxColP\r\n    ) external;\r\n    function setDevaluationPeriod ( address asset, uint256 newValue ) external;\r\n    function setInitialCollateralRatio ( address asset, uint256 newValue ) external;\r\n    function setLiquidationDiscount ( address asset, uint256 newValue ) external;\r\n    function setLiquidationRatio ( address asset, uint256 newValue ) external;\r\n    function vaultParameters (  ) external view returns ( address );\r\n}\r\n\r\n// File: localhost/contracts/VaultParameters.sol\r\n\r\n/*\r\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\r\n*/\r\npragma solidity 0.7.6;\r\n\r\n\r\n\r\n/**\r\n * @title Auth\r\n * @dev Manages USDP's system access\r\n **/\r\ncontract Auth {\r\n\r\n    // address of the the contract with vault parameters\r\n    VaultParameters public vaultParameters;\r\n\r\n    constructor(address _parameters) {\r\n        vaultParameters = VaultParameters(_parameters);\r\n    }\r\n\r\n    // ensures tx's sender is a manager\r\n    modifier onlyManager() {\r\n        require(vaultParameters.isManager(msg.sender), \"Unit Protocol: AUTH_FAILED\");\r\n        _;\r\n    }\r\n\r\n    // ensures tx's sender is able to modify the Vault\r\n    modifier hasVaultAccess() {\r\n        require(vaultParameters.canModifyVault(msg.sender), \"Unit Protocol: AUTH_FAILED\");\r\n        _;\r\n    }\r\n\r\n    // ensures tx's sender is the Vault\r\n    modifier onlyVault() {\r\n        require(msg.sender == vaultParameters.vault(), \"Unit Protocol: AUTH_FAILED\");\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title VaultParameters\r\n **/\r\ncontract VaultParameters is Auth {\r\n\r\n    // map token to stability fee percentage; 3 decimals\r\n    mapping(address => uint) public stabilityFee;\r\n\r\n    // map token to liquidation fee percentage, 0 decimals\r\n    mapping(address => uint) public liquidationFee;\r\n\r\n    // map token to USDP mint limit\r\n    mapping(address => uint) public tokenDebtLimit;\r\n\r\n    // permissions to modify the Vault\r\n    mapping(address => bool) public canModifyVault;\r\n\r\n    // managers\r\n    mapping(address => bool) public isManager;\r\n\r\n    // enabled oracle types\r\n    mapping(uint => mapping (address => bool)) public isOracleTypeEnabled;\r\n\r\n    // address of the Vault\r\n    address payable public vault;\r\n\r\n    // The foundation address\r\n    address public foundation;\r\n\r\n    /**\r\n     * The address for an Ethereum contract is deterministically computed from the address of its creator (sender)\r\n     * and how many transactions the creator has sent (nonce). The sender and nonce are RLP encoded and then\r\n     * hashed with Keccak-256.\r\n     * Therefore, the Vault address can be pre-computed and passed as an argument before deployment.\r\n    **/\r\n    constructor(address payable _vault, address _foundation) Auth(address(this)) {\r\n        require(_vault != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n        require(_foundation != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n\r\n        isManager[msg.sender] = true;\r\n        vault = _vault;\r\n        foundation = _foundation;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Grants and revokes manager's status of any address\r\n     * @param who The target address\r\n     * @param permit The permission flag\r\n     **/\r\n    function setManager(address who, bool permit) external onlyManager {\r\n        isManager[who] = permit;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets the foundation address\r\n     * @param newFoundation The new foundation address\r\n     **/\r\n    function setFoundation(address newFoundation) external onlyManager {\r\n        require(newFoundation != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n        foundation = newFoundation;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets ability to use token as the main collateral\r\n     * @param asset The address of the main collateral token\r\n     * @param stabilityFeeValue The percentage of the year stability fee (3 decimals)\r\n     * @param liquidationFeeValue The liquidation fee percentage (0 decimals)\r\n     * @param usdpLimit The USDP token issue limit\r\n     * @param oracles The enables oracle types\r\n     **/\r\n    function setCollateral(\r\n        address asset,\r\n        uint stabilityFeeValue,\r\n        uint liquidationFeeValue,\r\n        uint usdpLimit,\r\n        uint[] calldata oracles\r\n    ) external onlyManager {\r\n        setStabilityFee(asset, stabilityFeeValue);\r\n        setLiquidationFee(asset, liquidationFeeValue);\r\n        setTokenDebtLimit(asset, usdpLimit);\r\n        for (uint i=0; i < oracles.length; i++) {\r\n            setOracleType(oracles[i], asset, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets a permission for an address to modify the Vault\r\n     * @param who The target address\r\n     * @param permit The permission flag\r\n     **/\r\n    function setVaultAccess(address who, bool permit) external onlyManager {\r\n        canModifyVault[who] = permit;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets the percentage of the year stability fee for a particular collateral\r\n     * @param asset The address of the main collateral token\r\n     * @param newValue The stability fee percentage (3 decimals)\r\n     **/\r\n    function setStabilityFee(address asset, uint newValue) public onlyManager {\r\n        stabilityFee[asset] = newValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets the percentage of the liquidation fee for a particular collateral\r\n     * @param asset The address of the main collateral token\r\n     * @param newValue The liquidation fee percentage (0 decimals)\r\n     **/\r\n    function setLiquidationFee(address asset, uint newValue) public onlyManager {\r\n        require(newValue <= 100, \"Unit Protocol: VALUE_OUT_OF_RANGE\");\r\n        liquidationFee[asset] = newValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Enables/disables oracle types\r\n     * @param _type The type of the oracle\r\n     * @param asset The address of the main collateral token\r\n     * @param enabled The control flag\r\n     **/\r\n    function setOracleType(uint _type, address asset, bool enabled) public onlyManager {\r\n        isOracleTypeEnabled[_type][asset] = enabled;\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets USDP limit for a specific collateral\r\n     * @param asset The address of the main collateral token\r\n     * @param limit The limit number\r\n     **/\r\n    function setTokenDebtLimit(address asset, uint limit) public onlyManager {\r\n        tokenDebtLimit[asset] = limit;\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/ParametersBatchUpdater.sol\r\n\r\n/*\r\n  Copyright 2020 Unit Protocol: Artem Zakharov (az@unit.xyz).\r\n*/\r\n\r\npragma solidity 0.7.6;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ParametersBatchUpdater\r\n **/\r\ncontract ParametersBatchUpdater is Auth {\r\n\r\n    IVaultManagerParameters public immutable vaultManagerParameters;\r\n    IOracleRegistry public immutable oracleRegistry;\r\n    ICollateralRegistry public immutable collateralRegistry;\r\n\r\n    uint public constant BEARING_ASSET_ORACLE_TYPE = 9;\r\n\r\n    constructor(\r\n        address _vaultManagerParameters,\r\n        address _oracleRegistry,\r\n        address _collateralRegistry\r\n    ) Auth(IVaultManagerParameters(_vaultManagerParameters).vaultParameters()) {\r\n        require(\r\n            _vaultManagerParameters != address(0) &&\r\n            _oracleRegistry != address(0) &&\r\n            _collateralRegistry != address(0), \"Unit Protocol: ZERO_ADDRESS\");\r\n        vaultManagerParameters = IVaultManagerParameters(_vaultManagerParameters);\r\n        oracleRegistry = IOracleRegistry(_oracleRegistry);\r\n        collateralRegistry = ICollateralRegistry(_collateralRegistry);\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Grants and revokes manager's status\r\n     * @param who The array of target addresses\r\n     * @param permit The array of permission flags\r\n     **/\r\n    function setManagers(address[] calldata who, bool[] calldata permit) external onlyManager {\r\n        require(who.length == permit.length, \"Unit Protocol: ARGUMENTS_LENGTH_MISMATCH\");\r\n        for (uint i = 0; i < who.length; i++) {\r\n            vaultParameters.setManager(who[i], permit[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets a permission for provided addresses to modify the Vault\r\n     * @param who The array of target addresses\r\n     * @param permit The array of permission flags\r\n     **/\r\n    function setVaultAccesses(address[] calldata who, bool[] calldata permit) external onlyManager {\r\n        require(who.length == permit.length, \"Unit Protocol: ARGUMENTS_LENGTH_MISMATCH\");\r\n        for (uint i = 0; i < who.length; i++) {\r\n            vaultParameters.setVaultAccess(who[i], permit[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets the percentage of the year stability fee for a particular collateral\r\n     * @param assets The array of addresses of the main collateral tokens\r\n     * @param newValues The array of stability fee percentages (3 decimals)\r\n     **/\r\n    function setStabilityFees(address[] calldata assets, uint[] calldata newValues) public onlyManager {\r\n        require(assets.length == newValues.length, \"Unit Protocol: ARGUMENTS_LENGTH_MISMATCH\");\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            vaultParameters.setStabilityFee(assets[i], newValues[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets the percentages of the liquidation fee for provided collaterals\r\n     * @param assets The array of addresses of the main collateral tokens\r\n     * @param newValues The array of liquidation fee percentages (0 decimals)\r\n     **/\r\n    function setLiquidationFees(address[] calldata assets, uint[] calldata newValues) public onlyManager {\r\n        require(assets.length == newValues.length, \"Unit Protocol: ARGUMENTS_LENGTH_MISMATCH\");\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            vaultParameters.setLiquidationFee(assets[i], newValues[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Enables/disables oracle types\r\n     * @param _types The array of types of the oracles\r\n     * @param assets The array of addresses of the main collateral tokens\r\n     * @param flags The array of control flags\r\n     **/\r\n    function setOracleTypes(uint[] calldata _types, address[] calldata assets, bool[] calldata flags) public onlyManager {\r\n        require(_types.length == assets.length && _types.length == flags.length, \"Unit Protocol: ARGUMENTS_LENGTH_MISMATCH\");\r\n        for (uint i = 0; i < _types.length; i++) {\r\n            vaultParameters.setOracleType(_types[i], assets[i], flags[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Only manager is able to call this function\r\n     * @dev Sets USDP limits for a provided collaterals\r\n     * @param assets The addresses of the main collateral tokens\r\n     * @param limits The borrow USDP limits\r\n     **/\r\n    function setTokenDebtLimits(address[] calldata assets, uint[] calldata limits) public onlyManager {\r\n        require(assets.length == limits.length, \"Unit Protocol: ARGUMENTS_LENGTH_MISMATCH\");\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            vaultParameters.setTokenDebtLimit(assets[i], limits[i]);\r\n        }\r\n    }\r\n\r\n    function changeOracleTypes(address[] calldata assets, address[] calldata users, uint[] calldata oracleTypes) public onlyManager {\r\n        require(assets.length == users.length && assets.length == oracleTypes.length, \"Unit Protocol: ARGUMENTS_LENGTH_MISMATCH\");\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            IVault(vaultParameters.vault()).changeOracleType(assets[i], users[i], oracleTypes[i]);\r\n        }\r\n    }\r\n\r\n    function setInitialCollateralRatios(address[] calldata assets, uint[] calldata values) public onlyManager {\r\n        require(assets.length == values.length, \"Unit Protocol: ARGUMENTS_LENGTH_MISMATCH\");\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            vaultManagerParameters.setInitialCollateralRatio(assets[i], values[i]);\r\n        }\r\n    }\r\n\r\n    function setLiquidationRatios(address[] calldata assets, uint[] calldata values) public onlyManager {\r\n        require(assets.length == values.length, \"Unit Protocol: ARGUMENTS_LENGTH_MISMATCH\");\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            vaultManagerParameters.setLiquidationRatio(assets[i], values[i]);\r\n        }\r\n    }\r\n\r\n    function setLiquidationDiscounts(address[] calldata assets, uint[] calldata values) public onlyManager {\r\n        require(assets.length == values.length, \"Unit Protocol: ARGUMENTS_LENGTH_MISMATCH\");\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            vaultManagerParameters.setLiquidationDiscount(assets[i], values[i]);\r\n        }\r\n    }\r\n\r\n    function setDevaluationPeriods(address[] calldata assets, uint[] calldata values) public onlyManager {\r\n        require(assets.length == values.length, \"Unit Protocol: ARGUMENTS_LENGTH_MISMATCH\");\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            vaultManagerParameters.setDevaluationPeriod(assets[i], values[i]);\r\n        }\r\n    }\r\n\r\n    function setOracleTypesInRegistry(uint[] calldata oracleTypes, address[] calldata oracles) public onlyManager {\r\n        require(oracleTypes.length == oracles.length, \"Unit Protocol: ARGUMENTS_LENGTH_MISMATCH\");\r\n        for (uint i = 0; i < oracleTypes.length; i++) {\r\n            oracleRegistry.setOracle(oracleTypes[i], oracles[i]);\r\n        }\r\n    }\r\n\r\n    function setOracleTypesToAssets(address[] calldata assets, uint[] calldata oracleTypes) public onlyManager {\r\n        require(oracleTypes.length == assets.length, \"Unit Protocol: ARGUMENTS_LENGTH_MISMATCH\");\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            oracleRegistry.setOracleTypeForAsset(assets[i], oracleTypes[i]);\r\n        }\r\n    }\r\n\r\n    function setOracleTypesToAssetsBatch(address[][] calldata assets, uint[] calldata oracleTypes) public onlyManager {\r\n        require(oracleTypes.length == assets.length, \"Unit Protocol: ARGUMENTS_LENGTH_MISMATCH\");\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            oracleRegistry.setOracleTypeForAssets(assets[i], oracleTypes[i]);\r\n        }\r\n    }\r\n\r\n    function setUnderlyings(address[] calldata bearings, address[] calldata underlyings) public onlyManager {\r\n        require(bearings.length == underlyings.length, \"Unit Protocol: ARGUMENTS_LENGTH_MISMATCH\");\r\n        for (uint i = 0; i < bearings.length; i++) {\r\n            IBearingAssetOracle(oracleRegistry.oracleByType(BEARING_ASSET_ORACLE_TYPE)).setUnderlying(bearings[i], underlyings[i]);\r\n        }\r\n    }\r\n\r\n    function setCollaterals(\r\n        address[] calldata assets,\r\n        uint stabilityFeeValue,\r\n        uint liquidationFeeValue,\r\n        uint initialCollateralRatioValue,\r\n        uint liquidationRatioValue,\r\n        uint liquidationDiscountValue,\r\n        uint devaluationPeriodValue,\r\n        uint usdpLimit,\r\n        uint[] calldata oracles\r\n    ) external onlyManager {\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            vaultManagerParameters.setCollateral(\r\n                assets[i],\r\n                stabilityFeeValue,\r\n                liquidationFeeValue,\r\n                initialCollateralRatioValue,\r\n                liquidationRatioValue,\r\n                liquidationDiscountValue,\r\n                devaluationPeriodValue,\r\n                usdpLimit,\r\n                oracles,\r\n                0,\r\n                0\r\n            );\r\n\r\n            collateralRegistry.addCollateral(assets[i]);\r\n        }\r\n    }\r\n\r\n    function setCollateralAddresses(address[] calldata assets, bool add) external onlyManager {\r\n        for (uint i = 0; i < assets.length; i++) {\r\n            add ? collateralRegistry.addCollateral(assets[i]) : collateralRegistry.removeCollateral(assets[i]);\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultManagerParameters\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BEARING_ASSET_ORACLE_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"oracleTypes\",\"type\":\"uint256[]\"}],\"name\":\"changeOracleTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralRegistry\",\"outputs\":[{\"internalType\":\"contract ICollateralRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRegistry\",\"outputs\":[{\"internalType\":\"contract IOracleRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"setCollateralAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"stabilityFeeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationFeeValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialCollateralRatioValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatioValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationDiscountValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devaluationPeriodValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdpLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"oracles\",\"type\":\"uint256[]\"}],\"name\":\"setCollaterals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"setDevaluationPeriods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"setInitialCollateralRatios\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"setLiquidationDiscounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newValues\",\"type\":\"uint256[]\"}],\"name\":\"setLiquidationFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"setLiquidationRatios\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"who\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"permit\",\"type\":\"bool[]\"}],\"name\":\"setManagers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_types\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"flags\",\"type\":\"bool[]\"}],\"name\":\"setOracleTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"oracleTypes\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"oracles\",\"type\":\"address[]\"}],\"name\":\"setOracleTypesInRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"oracleTypes\",\"type\":\"uint256[]\"}],\"name\":\"setOracleTypesToAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[][]\",\"name\":\"assets\",\"type\":\"address[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"oracleTypes\",\"type\":\"uint256[]\"}],\"name\":\"setOracleTypesToAssetsBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newValues\",\"type\":\"uint256[]\"}],\"name\":\"setStabilityFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"limits\",\"type\":\"uint256[]\"}],\"name\":\"setTokenDebtLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bearings\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"underlyings\",\"type\":\"address[]\"}],\"name\":\"setUnderlyings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"who\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"permit\",\"type\":\"bool[]\"}],\"name\":\"setVaultAccesses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultManagerParameters\",\"outputs\":[{\"internalType\":\"contract IVaultManagerParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParameters\",\"outputs\":[{\"internalType\":\"contract VaultParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ParametersBatchUpdater","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000203153522b9eaef4ae17c6e99851ee7b2f7d312e00000000000000000000000075fbfe26b21fd3ea008af0c764949f8214150c8f0000000000000000000000003db39b538db1123389c77f888a213f1a6dd22ef3","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8a64021887f19872378bc99445a753ed8ec854526b1ceeaa1d88f9fdf6d8d311"}]}