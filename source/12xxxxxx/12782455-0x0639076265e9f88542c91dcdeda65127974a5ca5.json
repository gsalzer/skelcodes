{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.11 \\u003c0.9.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\"},\"CommunalFarm.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity \\u003e=0.6.11;\\npragma experimental ABIEncoderV2;\\n\\n// ====================================================================\\n// |     ______                   _______                             |\\n// |    / _____________ __  __   / ____(_____  ____ _____  ________   |\\n// |   / /_  / ___/ __ `| |/_/  / /_  / / __ \\\\/ __ `/ __ \\\\/ ___/ _ \\\\  |\\n// |  / __/ / /  / /_/ _\\u003e  \\u003c   / __/ / / / / / /_/ / / / / /__/  __/  |\\n// | /_/   /_/   \\\\__,_/_/|_|  /_/   /_/_/ /_/\\\\__,_/_/ /_/\\\\___/\\\\___/   |\\n// |                                                                  |\\n// ====================================================================\\n// =========================== CommunalFarm ===========================\\n// ====================================================================\\n// Multiple tokens with different reward rates can be emitted\\n// Multiple teams can set the reward rates for their token(s)\\n// Apes together strong\\n\\n// Frax Finance: https://github.com/FraxFinance\\n\\n// Primary Author(s)\\n// Travis Moore: https://github.com/FortisFortuna\\n\\n// Reviewer(s) / Contributor(s)\\n// Jason Huan: https://github.com/jasonhuan \\n// Sam Kazemian: https://github.com/samkazemian\\n// Saddle Team: https://github.com/saddle-finance\\n// Fei Team: https://github.com/fei-protocol\\n// Alchemix Team: https://github.com/alchemix-finance\\n// Liquity Team: https://github.com/liquity\\n\\n// Modified from the Synthetix.io original\\n// https://raw.githubusercontent.com/Synthetixio/synthetix/develop/contracts/StakingRewards.sol\\n\\nimport \\\"./Math.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\u0027./TransferHelper.sol\\u0027;\\nimport \\\"./ISaddleD4_LP.sol\\\";\\nimport \\\"./ReentrancyGuard.sol\\\";\\n\\n// Inheritance\\nimport \\\"./Owned.sol\\\";\\n\\ncontract CommunalFarm is Owned, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // Instances\\n    ISaddleD4_LP private stakingToken;\\n    \\n    // Constant for various precisions\\n    uint256 private constant MULTIPLIER_PRECISION = 1e18;\\n\\n    // Time tracking\\n    uint256 public periodFinish;\\n    uint256 public lastUpdateTime;\\n\\n    // Lock time and multiplier settings\\n    uint256 public lock_max_multiplier = uint256(3e18); // E18. 1x = e18\\n    uint256 public lock_time_for_max_multiplier = 1 * 365 * 86400; // 1 year\\n    uint256 public lock_time_min = 86400; // 1 * 86400  (1 day)\\n\\n    // Reward addresses, rates, and managers\\n    mapping(address =\\u003e address) public rewardManagers; // token addr -\\u003e manager addr\\n    address[] public rewardTokens;\\n    uint256[] public rewardRates;\\n    string[] public rewardSymbols;\\n    mapping(address =\\u003e uint256) public rewardTokenAddrToIdx; // token addr -\\u003e token index\\n    \\n    // Reward period\\n    uint256 public rewardsDuration = 604800; // 7 * 86400  (7 days)\\n\\n    // Reward tracking\\n    uint256[] private rewardsPerTokenStored;\\n    mapping(address =\\u003e mapping(uint256 =\\u003e uint256)) private userRewardsPerTokenPaid; // staker addr -\\u003e token id -\\u003e paid amount\\n    mapping(address =\\u003e mapping(uint256 =\\u003e uint256)) private rewards; // staker addr -\\u003e token id -\\u003e reward amount\\n    mapping(address =\\u003e uint256) private lastRewardClaimTime; // staker addr -\\u003e timestamp\\n\\n    // Balance tracking\\n    uint256 private _total_liquidity_locked;\\n    uint256 private _total_combined_weight;\\n    mapping(address =\\u003e uint256) private _locked_liquidity;\\n    mapping(address =\\u003e uint256) private _combined_weights;\\n\\n    // Stake tracking\\n    mapping(address =\\u003e LockedStake[]) private lockedStakes;\\n\\n    // Greylisting of bad addresses\\n    mapping(address =\\u003e bool) public greylist;\\n\\n    // Administrative booleans\\n    bool public stakesUnlocked; // Release locked stakes in case of emergency\\n    bool public withdrawalsPaused; // For emergencies\\n    bool public rewardsCollectionPaused; // For emergencies\\n    bool public stakingPaused; // For emergencies\\n\\n    /* ========== STRUCTS ========== */\\n    \\n    struct LockedStake {\\n        bytes32 kek_id;\\n        uint256 start_timestamp;\\n        uint256 liquidity;\\n        uint256 ending_timestamp;\\n        uint256 lock_multiplier; // 6 decimals of precision. 1x = 1000000\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyByOwner() {\\n        require(msg.sender == owner, \\\"You are not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyTokenManagers(address reward_token_address) {\\n        require(msg.sender == owner || isTokenManagerFor(msg.sender, reward_token_address), \\\"You are not the owner or the correct token manager\\\");\\n        _;\\n    }\\n\\n    modifier notStakingPaused() {\\n        require(stakingPaused == false, \\\"Staking is paused\\\");\\n        _;\\n    }\\n\\n    modifier updateRewardAndBalance(address account, bool sync_too) {\\n        _updateRewardAndBalance(account, sync_too);\\n        _;\\n    }\\n    \\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address _owner,\\n        address _stakingToken,\\n        string[] memory _rewardSymbols,\\n        address[] memory _rewardTokens,\\n        address[] memory _rewardManagers,\\n        uint256[] memory _rewardRates\\n    ) Owned(_owner){\\n        stakingToken = ISaddleD4_LP(_stakingToken);\\n\\n        rewardTokens = _rewardTokens;\\n        rewardRates = _rewardRates;\\n        rewardSymbols = _rewardSymbols;\\n\\n        lastUpdateTime = block.timestamp;\\n\\n        for (uint256 i = 0; i \\u003c _rewardTokens.length; i++){ \\n            // For fast token address -\\u003e token ID lookups later\\n            rewardTokenAddrToIdx[_rewardTokens[i]] = i;\\n\\n            // Initialize the stored rewards\\n            rewardsPerTokenStored.push(0);\\n\\n            // Initialize the reward managers\\n            rewardManagers[_rewardTokens[i]] = _rewardManagers[i];\\n        }\\n\\n        // Other booleans\\n        stakesUnlocked = false;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    // Total locked liquidity tokens\\n    function totalLiquidityLocked() external view returns (uint256) {\\n        return _total_liquidity_locked;\\n    }\\n\\n    // Locked liquidity for a given account\\n    function lockedLiquidityOf(address account) external view returns (uint256) {\\n        return _locked_liquidity[account];\\n    }\\n\\n    // Total \\u0027balance\\u0027 used for calculating the percent of the pool the account owns\\n    // Takes into account the locked stake time multiplier\\n    function totalCombinedWeight() external view returns (uint256) {\\n        return _total_combined_weight;\\n    }\\n\\n    // Combined weight for a specific account\\n    function combinedWeightOf(address account) external view returns (uint256) {\\n        return _combined_weights[account];\\n    }\\n\\n    // Calculated the combined weight for an account\\n    function calcCurCombinedWeight(address account) public view\\n        returns (\\n            uint256 old_combined_weight,\\n            uint256 new_combined_weight\\n        )\\n    {\\n        // Get the old combined weight\\n        old_combined_weight = _combined_weights[account];\\n\\n        // Loop through the locked stakes, first by getting the liquidity * lock_multiplier portion\\n        new_combined_weight = 0;\\n        for (uint256 i = 0; i \\u003c lockedStakes[account].length; i++) {\\n            LockedStake memory thisStake = lockedStakes[account][i];\\n            uint256 lock_multiplier = thisStake.lock_multiplier;\\n\\n            // If the lock is expired\\n            if (thisStake.ending_timestamp \\u003c= block.timestamp) {\\n                // If the lock expired in the time since the last claim, the weight needs to be proportionately averaged this time\\n                if (lastRewardClaimTime[account] \\u003c thisStake.ending_timestamp){\\n                    uint256 time_before_expiry = (thisStake.ending_timestamp).sub(lastRewardClaimTime[account]);\\n                    uint256 time_after_expiry = (block.timestamp).sub(thisStake.ending_timestamp);\\n\\n                    // Get the weighted-average lock_multiplier\\n                    uint256 numerator = ((lock_multiplier).mul(time_before_expiry)).add(((MULTIPLIER_PRECISION).mul(time_after_expiry)));\\n                    lock_multiplier = numerator.div(time_before_expiry.add(time_after_expiry));\\n                }\\n                // Otherwise, it needs to just be 1x\\n                else {\\n                    lock_multiplier = MULTIPLIER_PRECISION;\\n                }\\n            }\\n\\n            uint256 liquidity = thisStake.liquidity;\\n            uint256 combined_boosted_amount = liquidity.mul(lock_multiplier).div(MULTIPLIER_PRECISION);\\n            new_combined_weight = new_combined_weight.add(combined_boosted_amount);\\n        }\\n    }\\n\\n    // All the locked stakes for a given account\\n    function lockedStakesOf(address account) external view returns (LockedStake[] memory) {\\n        return lockedStakes[account];\\n    }\\n\\n    // All the locked stakes for a given account\\n    function getRewardSymbols() external view returns (string[] memory) {\\n        return rewardSymbols;\\n    }\\n\\n    // All the reward tokens\\n    function getAllRewardTokens() external view returns (address[] memory) {\\n        return rewardTokens;\\n    }\\n    \\n    // Multiplier amount, given the length of the lock\\n    function lockMultiplier(uint256 secs) public view returns (uint256) {\\n        uint256 lock_multiplier =\\n            uint256(MULTIPLIER_PRECISION).add(\\n                secs\\n                    .mul(lock_max_multiplier.sub(MULTIPLIER_PRECISION))\\n                    .div(lock_time_for_max_multiplier)\\n            );\\n        if (lock_multiplier \\u003e lock_max_multiplier) lock_multiplier = lock_max_multiplier;\\n        return lock_multiplier;\\n    }\\n\\n    // Last time the reward was applicable\\n    function lastTimeRewardApplicable() internal view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    // Amount of reward tokens per LP token\\n    function rewardsPerToken() public view returns (uint256[] memory newRewardsPerTokenStored) {\\n        if (_total_liquidity_locked == 0 || _total_combined_weight == 0) {\\n            return rewardsPerTokenStored;\\n        }\\n        else {\\n            newRewardsPerTokenStored = new uint256[](rewardTokens.length);\\n            for (uint256 i = 0; i \\u003c rewardsPerTokenStored.length; i++){ \\n                newRewardsPerTokenStored[i] = rewardsPerTokenStored[i].add(\\n                    lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRates[i]).mul(1e18).div(_total_combined_weight)\\n                );\\n            }\\n            return newRewardsPerTokenStored;\\n        }\\n    }\\n\\n    // Amount of reward tokens an account has earned / accrued\\n    // Note: In the edge-case of one of the account\\u0027s stake expiring since the last claim, this will\\n    // return a slightly inflated number\\n    function earned(address account) public view returns (uint256[] memory new_earned) {\\n        uint256[] memory reward_arr = rewardsPerToken();\\n        new_earned = new uint256[](rewardTokens.length);\\n\\n        if (_combined_weights[account] == 0){\\n            for (uint256 i = 0; i \\u003c rewardTokens.length; i++){ \\n                new_earned[i] = 0;\\n            }\\n        }\\n        else {\\n            for (uint256 i = 0; i \\u003c rewardTokens.length; i++){ \\n                new_earned[i] = (_combined_weights[account])\\n                    .mul(reward_arr[i].sub(userRewardsPerTokenPaid[account][i]))\\n                    .div(1e18)\\n                    .add(rewards[account][i]);\\n            }\\n        }\\n    }\\n\\n    // Total reward tokens emitted in the given period\\n    function getRewardForDuration() external view returns (uint256[] memory rewards_per_duration_arr) {\\n        rewards_per_duration_arr = new uint256[](rewardRates.length);\\n\\n        for (uint256 i = 0; i \\u003c rewardRates.length; i++){ \\n            rewards_per_duration_arr[i] = rewardRates[i].mul(rewardsDuration);\\n        }\\n    }\\n\\n    // See if the caller_addr is a manager for the reward token \\n    function isTokenManagerFor(address caller_addr, address reward_token_addr) public view returns (bool){\\n        if (caller_addr == owner) return true; // Contract owner\\n        else if (rewardManagers[reward_token_addr] == caller_addr) return true; // Reward manager\\n        return false; \\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function _updateRewardAndBalance(address account, bool sync_too) internal {\\n        // Need to retro-adjust some things if the period hasn\\u0027t been renewed, then start a new one\\n        if (sync_too){\\n            sync();\\n        }\\n        \\n        if (account != address(0)) {\\n            // To keep the math correct, the user\\u0027s combined weight must be recomputed\\n            (   \\n                uint256 old_combined_weight,\\n                uint256 new_combined_weight\\n            ) = calcCurCombinedWeight(account);\\n\\n            // Calculate the earnings first\\n            _syncEarned(account);\\n\\n            // Update the user\\u0027s and the global combined weights\\n            if (new_combined_weight \\u003e= old_combined_weight) {\\n                uint256 weight_diff = new_combined_weight.sub(old_combined_weight);\\n                _total_combined_weight = _total_combined_weight.add(weight_diff);\\n                _combined_weights[account] = old_combined_weight.add(weight_diff);\\n            } else {\\n                uint256 weight_diff = old_combined_weight.sub(new_combined_weight);\\n                _total_combined_weight = _total_combined_weight.sub(weight_diff);\\n                _combined_weights[account] = old_combined_weight.sub(weight_diff);\\n            }\\n\\n        }\\n    }\\n\\n    function _syncEarned(address account) internal {\\n        if (account != address(0)) {\\n            // Calculate the earnings\\n            uint256[] memory earned_arr = earned(account);\\n\\n            // Update the rewards array\\n            for (uint256 i = 0; i \\u003c earned_arr.length; i++){ \\n                rewards[account][i] = earned_arr[i];\\n            }\\n\\n            // Update the rewards paid array\\n            for (uint256 i = 0; i \\u003c earned_arr.length; i++){ \\n                userRewardsPerTokenPaid[account][i] = rewardsPerTokenStored[i];\\n            }\\n        }\\n    }\\n\\n    // Two different stake functions are needed because of delegateCall and msg.sender issues\\n    function stakeLocked(uint256 liquidity, uint256 secs) nonReentrant public {\\n        _stakeLocked(msg.sender, msg.sender, liquidity, secs, block.timestamp);\\n    }\\n\\n    // If this were not internal, and source_address had an infinite approve, this could be exploitable\\n    // (pull funds from source_address and stake for an arbitrary staker_address)\\n    function _stakeLocked(\\n        address staker_address, \\n        address source_address, \\n        uint256 liquidity, \\n        uint256 secs,\\n        uint256 start_timestamp\\n    ) internal updateRewardAndBalance(staker_address, true) {\\n        require(!stakingPaused, \\\"Staking is paused\\\");\\n        require(liquidity \\u003e 0, \\\"Must stake more than zero\\\");\\n        require(greylist[staker_address] == false, \\\"Address has been greylisted\\\");\\n        require(secs \\u003e= lock_time_min, \\\"Minimum stake time not met\\\");\\n        require(secs \\u003c= lock_time_for_max_multiplier,\\\"Trying to lock for too long\\\");\\n\\n        uint256 lock_multiplier = lockMultiplier(secs);\\n        bytes32 kek_id = keccak256(abi.encodePacked(staker_address, start_timestamp, liquidity, _locked_liquidity[staker_address]));\\n        lockedStakes[staker_address].push(LockedStake(\\n            kek_id,\\n            start_timestamp,\\n            liquidity,\\n            start_timestamp.add(secs),\\n            lock_multiplier\\n        ));\\n\\n        // Pull the tokens from the source_address\\n        TransferHelper.safeTransferFrom(address(stakingToken), source_address, address(this), liquidity);\\n\\n        // Update liquidities\\n        _total_liquidity_locked = _total_liquidity_locked.add(liquidity);\\n        _locked_liquidity[staker_address] = _locked_liquidity[staker_address].add(liquidity);\\n\\n        // Need to call to update the combined weights\\n        _updateRewardAndBalance(staker_address, false);\\n\\n        // Needed for edge case if the staker only claims once, and after the lock expired\\n        if (lastRewardClaimTime[staker_address] == 0) lastRewardClaimTime[staker_address] = block.timestamp;\\n\\n        emit StakeLocked(staker_address, liquidity, secs, kek_id, source_address);\\n    }\\n\\n    // Two different withdrawLocked functions are needed because of delegateCall and msg.sender issues\\n    function withdrawLocked(bytes32 kek_id) nonReentrant public {\\n        require(withdrawalsPaused == false, \\\"Withdrawals paused\\\");\\n        _withdrawLocked(msg.sender, msg.sender, kek_id);\\n    }\\n\\n    // No withdrawer == msg.sender check needed since this is only internally callable and the checks are done in the wrapper\\n    // functions like withdraw()\\n    function _withdrawLocked(address staker_address, address destination_address, bytes32 kek_id) internal  {\\n        // Collect rewards first and then update the balances\\n        _getReward(staker_address, destination_address);\\n\\n        LockedStake memory thisStake;\\n        thisStake.liquidity = 0;\\n        uint theArrayIndex;\\n        for (uint256 i = 0; i \\u003c lockedStakes[staker_address].length; i++){ \\n            if (kek_id == lockedStakes[staker_address][i].kek_id){\\n                thisStake = lockedStakes[staker_address][i];\\n                theArrayIndex = i;\\n                break;\\n            }\\n        }\\n        require(thisStake.kek_id == kek_id, \\\"Stake not found\\\");\\n        require(block.timestamp \\u003e= thisStake.ending_timestamp || stakesUnlocked == true, \\\"Stake is still locked!\\\");\\n\\n        uint256 liquidity = thisStake.liquidity;\\n\\n        if (liquidity \\u003e 0) {\\n            // Update liquidities\\n            _total_liquidity_locked = _total_liquidity_locked.sub(liquidity);\\n            _locked_liquidity[staker_address] = _locked_liquidity[staker_address].sub(liquidity);\\n\\n            // Remove the stake from the array\\n            delete lockedStakes[staker_address][theArrayIndex];\\n\\n            // Need to call to update the combined weights\\n            _updateRewardAndBalance(staker_address, false);\\n\\n            // Give the tokens to the destination_address\\n            // Should throw if insufficient balance\\n            stakingToken.transfer(destination_address, liquidity);\\n\\n            emit WithdrawLocked(staker_address, liquidity, kek_id, destination_address);\\n        }\\n\\n    }\\n    \\n    // Two different getReward functions are needed because of delegateCall and msg.sender issues\\n    function getReward() external nonReentrant returns (uint256[] memory) {\\n        require(rewardsCollectionPaused == false,\\\"Rewards collection paused\\\");\\n        return _getReward(msg.sender, msg.sender);\\n    }\\n\\n    // No withdrawer == msg.sender check needed since this is only internally callable\\n    function _getReward(address rewardee, address destination_address) internal updateRewardAndBalance(rewardee, true) returns (uint256[] memory rewards_before) {\\n        // Update the rewards array and distribute rewards\\n        rewards_before = new uint256[](rewardTokens.length);\\n\\n        for (uint256 i = 0; i \\u003c rewardTokens.length; i++){ \\n            rewards_before[i] = rewards[rewardee][i];\\n            rewards[rewardee][i] = 0;\\n            ERC20(rewardTokens[i]).transfer(destination_address, rewards_before[i]);\\n            emit RewardPaid(rewardee, rewards_before[i], rewardTokens[i], destination_address);\\n        }\\n\\n        lastRewardClaimTime[rewardee] = block.timestamp;\\n    }\\n\\n    // If the period expired, renew it\\n    function retroCatchUp() internal {\\n        // Failsafe check\\n        require(block.timestamp \\u003e periodFinish, \\\"Period has not expired yet!\\\");\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 num_periods_elapsed = uint256(block.timestamp.sub(periodFinish)) / rewardsDuration; // Floor division to the nearest period\\n        \\n        // Make sure there are enough tokens to renew the reward period\\n        for (uint256 i = 0; i \\u003c rewardTokens.length; i++){ \\n            require(rewardRates[i].mul(rewardsDuration).mul(num_periods_elapsed + 1) \\u003c= ERC20(rewardTokens[i]).balanceOf(address(this)), string(abi.encodePacked(\\\"Not enough reward tokens available: \\\", rewardTokens[i])) );\\n        }\\n        \\n        // uint256 old_lastUpdateTime = lastUpdateTime;\\n        // uint256 new_lastUpdateTime = block.timestamp;\\n\\n        // lastUpdateTime = periodFinish;\\n        periodFinish = periodFinish.add((num_periods_elapsed.add(1)).mul(rewardsDuration));\\n\\n        _updateStoredRewardsAndTime();\\n\\n        emit RewardsPeriodRenewed(address(stakingToken));\\n    }\\n\\n    function _updateStoredRewardsAndTime() internal {\\n        // Get the rewards\\n        uint256[] memory rewards_per_token = rewardsPerToken();\\n\\n        // Update the rewardsPerTokenStored\\n        for (uint256 i = 0; i \\u003c rewardsPerTokenStored.length; i++){ \\n            rewardsPerTokenStored[i] = rewards_per_token[i];\\n        }\\n\\n        // Update the last stored time\\n        lastUpdateTime = lastTimeRewardApplicable();\\n    }\\n\\n    function sync() public {\\n        if (block.timestamp \\u003e periodFinish) {\\n            retroCatchUp();\\n        }\\n        else {\\n            _updateStoredRewardsAndTime();\\n        }\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    // Added to support recovering LP Rewards and other mistaken tokens from other systems to be distributed to holders\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyTokenManagers(tokenAddress) {\\n        // Cannot rug the staking / LP tokens\\n        require(tokenAddress != address(stakingToken), \\\"Cannot rug staking / LP tokens\\\");\\n\\n        // Check if the desired token is a reward token\\n        bool isRewardToken = false;\\n        for (uint256 i = 0; i \\u003c rewardTokens.length; i++){ \\n            if (rewardTokens[i] == tokenAddress) {\\n                isRewardToken = true;\\n                break;\\n            }\\n        }\\n\\n        // Only the reward managers can take back their reward tokens\\n        if (isRewardToken \\u0026\\u0026 rewardManagers[tokenAddress] == msg.sender){\\n            ERC20(tokenAddress).transfer(msg.sender, tokenAmount);\\n            emit Recovered(msg.sender, tokenAddress, tokenAmount);\\n            return;\\n        }\\n\\n        // Other tokens, like airdrops or accidental deposits, can be withdrawn by the owner\\n        else if (!isRewardToken \\u0026\\u0026 (msg.sender == owner)){\\n            ERC20(tokenAddress).transfer(msg.sender, tokenAmount);\\n            emit Recovered(msg.sender, tokenAddress, tokenAmount);\\n            return;\\n        }\\n\\n        // If none of the above conditions are true\\n        else {\\n            revert(\\\"No valid tokens to recover\\\");\\n        }\\n    }\\n\\n    function setRewardsDuration(uint256 _rewardsDuration) external onlyByOwner {\\n        require(_rewardsDuration \\u003e= 86400, \\\"Rewards duration must be at least one day\\\");\\n        require(\\n            periodFinish == 0 || block.timestamp \\u003e periodFinish,\\n            \\\"Reward period incomplete\\\"\\n        );\\n        rewardsDuration = _rewardsDuration;\\n        emit RewardsDurationUpdated(rewardsDuration);\\n    }\\n\\n    function setMultipliers(uint256 _lock_max_multiplier) external onlyByOwner {\\n        require(_lock_max_multiplier \\u003e= uint256(1e18), \\\"Multiplier must be greater than or equal to 1e18\\\");\\n        lock_max_multiplier = _lock_max_multiplier;\\n        emit LockedStakeMaxMultiplierUpdated(lock_max_multiplier);\\n    }\\n\\n    function setLockedStakeTimeForMinAndMaxMultiplier(uint256 _lock_time_for_max_multiplier, uint256 _lock_time_min) external onlyByOwner {\\n        require(_lock_time_for_max_multiplier \\u003e= 1, \\\"Mul max time must be \\u003e= 1\\\");\\n        require(_lock_time_min \\u003e= 1, \\\"Mul min time must be \\u003e= 1\\\");\\n\\n        lock_time_for_max_multiplier = _lock_time_for_max_multiplier;\\n        lock_time_min = _lock_time_min;\\n\\n        emit LockedStakeTimeForMaxMultiplier(lock_time_for_max_multiplier);\\n        emit LockedStakeMinTime(_lock_time_min);\\n    }\\n\\n    function initializeDefault() external onlyByOwner {\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(rewardsDuration);\\n        emit DefaultInitialization();\\n    }\\n\\n    function greylistAddress(address _address) external onlyByOwner {\\n        greylist[_address] = !(greylist[_address]);\\n    }\\n\\n    function unlockStakes() external onlyByOwner {\\n        stakesUnlocked = !stakesUnlocked;\\n    }\\n\\n    function toggleStaking() external onlyByOwner {\\n        stakingPaused = !stakingPaused;\\n    }\\n\\n    function toggleWithdrawals() external onlyByOwner {\\n        withdrawalsPaused = !withdrawalsPaused;\\n    }\\n\\n    function toggleRewardsCollection() external onlyByOwner {\\n        rewardsCollectionPaused = !rewardsCollectionPaused;\\n    }\\n\\n    // The owner or the reward token managers can set reward rates \\n    function setRewardRate(address reward_token_address, uint256 new_rate, bool sync_too) external onlyTokenManagers(reward_token_address) {\\n        rewardRates[rewardTokenAddrToIdx[reward_token_address]] = new_rate;\\n        \\n        if (sync_too){\\n            sync();\\n        }\\n    }\\n\\n    // The owner or the reward token managers can change managers\\n    function changeTokenManager(address reward_token_address, address new_manager_address) external onlyTokenManagers(reward_token_address) {\\n        rewardManagers[reward_token_address] = new_manager_address;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event StakeLocked(address indexed user, uint256 amount, uint256 secs, bytes32 kek_id, address source_address);\\n    event WithdrawLocked(address indexed user, uint256 amount, bytes32 kek_id, address destination_address);\\n    event RewardPaid(address indexed user, uint256 reward, address token_address, address destination_address);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event Recovered(address destination_address, address token, uint256 amount);\\n    event RewardsPeriodRenewed(address token);\\n    event DefaultInitialization();\\n    event LockedStakeMaxMultiplierUpdated(uint256 multiplier);\\n    event LockedStakeTimeForMaxMultiplier(uint256 secs);\\n    event LockedStakeMinTime(uint256 secs);\\n}\\n\"},\"CommunalFarm_SaddleD4.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity \\u003e=0.6.11;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./CommunalFarm.sol\\\";\\n\\ncontract CommunalFarm_SaddleD4 is CommunalFarm {\\n    constructor(\\n        address _owner,\\n        address _stakingToken,\\n        string[] memory _rewardSymbols,\\n        address[] memory _rewardTokens,\\n        address[] memory _rewardManagers,\\n        uint256[] memory _rewardRates\\n    ) \\n    CommunalFarm(_owner, _stakingToken, _rewardSymbols, _rewardTokens, _rewardManagers, _rewardRates)\\n    {}\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.11;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.11;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20Mintable}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\n \\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address =\\u003e uint256) private _balances;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n    \\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory __name, string memory __symbol) public {\\n        _name = __name;\\n        _symbol = __symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.approve(address spender, uint256 amount)\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for `sender`\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller\\u0027s\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for `accounts`\\u0027s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\\n     * from the caller\\u0027s allowance.\\n     *\\n     * See {_burn} and {_approve}.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal virtual {\\n        _burn(account, amount);\\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \\\"ERC20: burn amount exceeds allowance\\\"));\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of `from`\\u0027s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of `from`\\u0027s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:using-hooks.adoc[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.11;\\n\\nimport \\\"./Context.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see {ERC20Detailed}.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\"},\"ISaddleD4_LP.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity \\u003e=0.6.11;\\n\\ninterface ISaddleD4_LP {\\n  function allowance(address owner, address spender) external view returns (uint256);\\n  function approve(address spender, uint256 amount) external returns (bool);\\n  function balanceOf(address account) external view returns (uint256);\\n  function burn(uint256 amount) external;\\n  function burnFrom(address account, uint256 amount) external;\\n  function decimals() external view returns (uint8);\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n  function initialize(string memory name, string memory symbol) external returns (bool);\\n  function mint(address recipient, uint256 amount) external;\\n  function name() external view returns (string memory);\\n  function owner() external view returns (address);\\n  function renounceOwnership() external;\\n  function symbol() external view returns (string memory);\\n  function totalSupply() external view returns (uint256);\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n  function transferOwnership(address newOwner) external;\\n}\\n\"},\"Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.11;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003e= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003c b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y \\u003e 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x \\u003c z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\"},\"Owned.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity \\u003e=0.6.11;\\n\\n// https://docs.synthetix.io/contracts/Owned\\ncontract Owned {\\n    address public owner;\\n    address public nominatedOwner;\\n\\n    constructor(address _owner) public {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\n        _;\\n    }\\n\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n}\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.11;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.11;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\"},\"SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.11;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\"},\"TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity \\u003e=0.6.11;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\u0027approve(address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027TransferHelper: APPROVE_FAILED\\u0027);\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\u0027transfer(address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027TransferHelper: TRANSFER_FAILED\\u0027);\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes(\\u0027transferFrom(address,address,uint256)\\u0027)));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success \\u0026\\u0026 (data.length == 0 || abi.decode(data, (bool))), \\u0027TransferHelper: TRANSFER_FROM_FAILED\\u0027);\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, \\u0027TransferHelper: ETH_TRANSFER_FAILED\\u0027);\\n    }\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_rewardSymbols\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_rewardManagers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardRates\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DefaultInitialization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"LockedStakeMaxMultiplierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"LockedStakeMinTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"LockedStakeTimeForMaxMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination_address\",\"type\":\"address\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"RewardsPeriodRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source_address\",\"type\":\"address\"}],\"name\":\"StakeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination_address\",\"type\":\"address\"}],\"name\":\"WithdrawLocked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calcCurCombinedWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"old_combined_weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_combined_weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward_token_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"new_manager_address\",\"type\":\"address\"}],\"name\":\"changeTokenManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"combinedWeightOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"new_earned\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"rewards_per_duration_arr\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardSymbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"greylist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"greylistAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeDefault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller_addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward_token_addr\",\"type\":\"address\"}],\"name\":\"isTokenManagerFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"lockMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock_max_multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock_time_for_max_multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock_time_min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedLiquidityOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"lockedStakesOf\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"start_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ending_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lock_multiplier\",\"type\":\"uint256\"}],\"internalType\":\"struct CommunalFarm.LockedStake[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardSymbols\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardTokenAddrToIdx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsCollectionPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"newRewardsPerTokenStored\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lock_time_for_max_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lock_time_min\",\"type\":\"uint256\"}],\"name\":\"setLockedStakeTimeForMinAndMaxMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lock_max_multiplier\",\"type\":\"uint256\"}],\"name\":\"setMultipliers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward_token_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"new_rate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sync_too\",\"type\":\"bool\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secs\",\"type\":\"uint256\"}],\"name\":\"stakeLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakesUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleRewardsCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCombinedWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidityLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"kek_id\",\"type\":\"bytes32\"}],\"name\":\"withdrawLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalsPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CommunalFarm_SaddleD4","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"100000","ConstructorArguments":"000000000000000000000000ff5b4bcbf765fe363269114e1c765229a29edefd000000000000000000000000d48cf4d7fb0824cc8bae055df3092584d0a1726a00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000003a00000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000034658530000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000554524942450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004414c43580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044c5154590000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000003432b6a60d23ca0dfca7761b7ab56459d9c964d0000000000000000000000000c7283b66eb1eb5fb86327f08e1b5816b0720212b000000000000000000000000dbdb4d16eda451d0503b854cf79d55697f90c8df0000000000000000000000006dea81c8171d0ba574754ef6f8b412f2ed88c54d0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000a448833bece66fd8803ac0c390936c79b5fd6edf000000000000000000000000639572471f2f318464dc01066a56867130e45e2500000000000000000000000051e029a5ef288fb87c5e8dd46895c353ad9aaaec000000000000000000000000a850535d3628cd4dfeb528dc85cfa93051ff298400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000010d7adb7d2f0000000000000000000000000000000000000000000000000000010d7adb7d2f0000000000000000000000000000000000000000000000000000010d7adb7d2f0000000000000000000000000000000000000000000000000000010d7adb7d2f","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv2","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3a4bfeef7c769d9c79dcc284b25e34a35835007868c12b2938a36622fd6db423"}]}