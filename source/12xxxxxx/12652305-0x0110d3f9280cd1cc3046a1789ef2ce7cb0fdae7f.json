{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\r\n    assert(token.transfer(to, value));\r\n  }\r\n\r\n  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n    assert(token.transferFrom(from, to, value));\r\n  }\r\n\r\n  function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n    assert(token.approve(spender, value));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Basic token with transfer and deposit fees\r\n * @dev Basic version of StandardToken, with transfer and deposit fees.\r\n */\r\ncontract BasicTokenWithTransferAndDepositFees is ERC20Basic {\r\n  using SafeMath for uint256;\r\n  \r\n  uint256 ONE_DAY_DURATION_IN_SECONDS = 86400;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n  \r\n  bool isLocked;\r\n  \r\n  address fee_address; \r\n  uint256 fee_base; \r\n  uint256 fee_rate;\r\n  bool no_transfer_fee;\r\n  \r\n  address deposit_fee_address; \r\n  uint256 deposit_fee_base; \r\n  uint256 deposit_fee_rate;\r\n  bool no_deposit_fee;\r\n  \r\n  mapping (address => bool) transfer_fee_exceptions_receiver;\r\n  mapping (address => bool) transfer_fee_exceptions_sender;\r\n  mapping (address => bool) deposit_fee_exceptions;\r\n  \r\n  mapping (address => uint256) last_deposit_fee_timestamps;\r\n  address[] deposit_accounts;\r\n  \r\n  \r\n  \r\n  /**\r\n   * @dev Throws if contract is locked\r\n   */\r\n  modifier notLocked() {\r\n    require(!isLocked);\r\n    _;\r\n  }\r\n  \r\n  \r\n  /**\r\n  * Constructor that initializes default values\r\n  * fee_address: default to the address which created the token\r\n  * fee_base: default to 10000\r\n  * fee_rate: default to 20 which equals 20 / 10000 = 0.20% transfer fee\r\n  * deposit_address: default to the address which created the token\r\n  * deposit_fee_base: default to 10000000\r\n  * deposit_fee_rate: default to 33 which equals 33 / 10000000 = 0.00033% deposit fee\r\n  */\r\n  function BasicTokenWithTransferAndDepositFees() public {\r\n    fee_address = msg.sender;\r\n    fee_base = 10000;\r\n    fee_rate = 20;\r\n    no_transfer_fee = false;\r\n    deposit_fee_address = msg.sender;\r\n    deposit_fee_base = 10000000;\r\n    deposit_fee_rate = 33;\r\n    no_deposit_fee = false;\r\n    transfer_fee_exceptions_receiver[msg.sender] = true;\r\n    transfer_fee_exceptions_sender[msg.sender] = true;\r\n    deposit_fee_exceptions[msg.sender] = true;\r\n    isLocked = false;\r\n  }\r\n  \r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n  \r\n  /**\r\n  * @dev return the transfer fee configs\r\n  */\r\n  function showTransferFeeConfig() public view returns (address, uint256, uint256, bool) {\r\n    return (fee_address, fee_base, fee_rate, no_transfer_fee);\r\n  }\r\n  \r\n  /**\r\n  * @dev return the deposit fee configs\r\n  */\r\n  function showDepositFeeConfig() public view returns (address, uint256, uint256, bool) {\r\n    return (deposit_fee_address, deposit_fee_base, deposit_fee_rate, no_deposit_fee);\r\n  }\r\n  \r\n  /**\r\n  * @dev executes the deposit fees for the account _account\r\n  */\r\n  function executeDepositFees(address _account) internal {\r\n    if(last_deposit_fee_timestamps[_account] != 0) {\r\n        if(!(no_deposit_fee || deposit_fee_exceptions[_account])) {\r\n            uint256 days_elapsed = (now - last_deposit_fee_timestamps[_account]) / ONE_DAY_DURATION_IN_SECONDS;\r\n            uint256 deposit_fee = days_elapsed * balances[_account] * deposit_fee_rate / deposit_fee_base;\r\n            if(deposit_fee != 0) {\r\n                balances[_account] = balances[_account].sub(deposit_fee);\r\n                balances[deposit_fee_address] = balances[deposit_fee_address].add(deposit_fee);\r\n                Transfer(_account, deposit_fee_address, deposit_fee);\r\n            }\r\n        }\r\n        last_deposit_fee_timestamps[_account] = last_deposit_fee_timestamps[_account].add(days_elapsed * ONE_DAY_DURATION_IN_SECONDS);\r\n    }\r\n  }\r\n  \r\n  /**\r\n  * @dev calculates the deposit fees for the account _account\r\n  */\r\n  function calculateDepositFees(address _account) internal view returns (uint256) {\r\n    if(last_deposit_fee_timestamps[_account] != 0) {\r\n        if(!(no_deposit_fee || deposit_fee_exceptions[_account])) {\r\n            uint256 days_elapsed = (now - last_deposit_fee_timestamps[_account]) / ONE_DAY_DURATION_IN_SECONDS;\r\n            uint256 deposit_fee = days_elapsed * balances[_account] * deposit_fee_rate / deposit_fee_base;\r\n            return deposit_fee;\r\n        }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public notLocked returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balanceOf(msg.sender));\r\n    \r\n    /** Execution of deposit fees FROM account */\r\n    executeDepositFees(msg.sender);\r\n    \r\n    /** Execution of deposit fees TO account */\r\n    executeDepositFees(_to);\r\n    \r\n\r\n    /** Calculation of transfer fees */\r\n    if(!(no_transfer_fee || transfer_fee_exceptions_receiver[_to] || transfer_fee_exceptions_sender[msg.sender])) {\r\n        uint256 transfer_fee = 2 * _value * fee_rate / fee_base;\r\n    }\r\n    \r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    if(!(no_transfer_fee || transfer_fee_exceptions_receiver[_to] || transfer_fee_exceptions_sender[msg.sender])) {\r\n        balances[_to] = balances[_to].add(_value - transfer_fee);\r\n        balances[fee_address] = balances[fee_address].add(transfer_fee);\r\n        Transfer(msg.sender, fee_address, transfer_fee);\r\n    } else {\r\n        balances[_to] = balances[_to].add(_value);\r\n    }\r\n    \r\n    if(last_deposit_fee_timestamps[_to] == 0) {\r\n        last_deposit_fee_timestamps[_to] = now;\r\n        deposit_accounts.push(_to);\r\n    }\r\n    \r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner] - calculateDepositFees(_owner);\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicTokenWithTransferAndDepositFees {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public notLocked returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balanceOf(_from));\r\n    require(_value <= allowed[_from][msg.sender]);\r\n    \r\n    /** Execution of deposit fees FROM account */\r\n    executeDepositFees(_from);\r\n    \r\n    /** Execution of deposit fees TO account */\r\n    executeDepositFees(_to);\r\n    \r\n    /** Calculation of transfer fees */\r\n    if(!(no_transfer_fee || transfer_fee_exceptions_receiver[_to] || transfer_fee_exceptions_sender[_from])) {\r\n        uint256 transfer_fee = 2 * _value * fee_rate / fee_base;\r\n    }\r\n    \r\n    balances[_from] = balances[_from].sub(_value);\r\n    if(!(no_transfer_fee || transfer_fee_exceptions_receiver[_to] || transfer_fee_exceptions_sender[_from])) {\r\n        balances[_to] = balances[_to].add(_value - transfer_fee);\r\n        balances[fee_address] = balances[fee_address].add(transfer_fee);\r\n        Transfer(_from, fee_address, transfer_fee);\r\n    } else {\r\n        balances[_to] = balances[_to].add(_value);\r\n    }\r\n    \r\n    if(last_deposit_fee_timestamps[_to] == 0) {\r\n        last_deposit_fee_timestamps[_to] = now;\r\n        deposit_accounts.push(_to);\r\n    }\r\n    \r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public notLocked returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public notLocked returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public notLocked returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * SCX Token, \"Digital Asset Fund\"\r\n * Features:\r\n *  - ERC20 compliant\r\n *  - Lock-Up with variable time/amount (owner only)\r\n *  - Burn with variable amount (anyone)\r\n */\r\ncontract SCX is StandardToken, Ownable { \r\n    \r\n    event Burn(address indexed burner, uint256 value);\r\n    \r\n    // Public variables of the token\r\n    string public constant symbol = \"SCX\";\r\n    string public constant name =  \"Digital Asset Fund\";\r\n    \r\n    uint8 public constant decimals = 8;\r\n    \r\n    // 100.000.000 tokens + 8 DECIMALS = 25 * 10^14 units \r\n    uint256 public constant INITIAL_SUPPLY = 10000000000000000;\r\n\r\n    /**\r\n    * Constructor that gives msg.sender all of existing tokens.\r\n    */\r\n    function SCX() public {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = INITIAL_SUPPLY;\r\n        Transfer(0x0, msg.sender, INITIAL_SUPPLY);\r\n    }\r\n    \r\n    /**\r\n    * @dev mines new SCX tokens\r\n    */\r\n    function mine(uint256 _amount) public onlyOwner notLocked {\r\n        totalSupply_ = totalSupply_.add(_amount);\r\n        balances[msg.sender] = balances[msg.sender].add(_amount);\r\n        Transfer(0x0, msg.sender, _amount);\r\n    }\r\n    \r\n    /**\r\n    * @dev Burns a specific amount of tokens.\r\n    * @param _value The amount of token to be burned.\r\n    */\r\n    function burn(uint256 _value) public onlyOwner notLocked {\r\n        require(_value <= balanceOf(msg.sender));\r\n        // no need to require value <= totalSupply, since that would imply the\r\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\r\n        \r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        totalSupply_ = totalSupply_.sub(_value);\r\n        Burn(burner, _value);\r\n    }\r\n    \r\n    /**\r\n     * @dev executes the deposit fee payment for all accounts \r\n     */\r\n    function executeDepositFeesForAllAccounts() public onlyOwner notLocked {\r\n        uint arrayLength = deposit_accounts.length;\r\n        for (uint i = 0; i < arrayLength; i++) {\r\n            executeDepositFees(deposit_accounts[i]);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev executes the deposit fee payment for accounts from index _from to _to where _to index is excluded.\r\n     */\r\n    function executeDepositFeesForAccountsFromTo(uint256 _from, uint256 _to) public onlyOwner notLocked {\r\n        uint arrayLength = deposit_accounts.length;\r\n        require(_from <= _to);\r\n        require(_to <= arrayLength);\r\n        for (uint i = _from; i < _to; i++) {\r\n            executeDepositFees(deposit_accounts[i]);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @dev calculate the deposit fee payment for all accounts \r\n     */\r\n    function calculateDepositFeesForAllAccounts() public onlyOwner view returns (uint) {\r\n        uint arrayLength = deposit_accounts.length;\r\n        uint sum = 0;\r\n        for (uint i = 0; i < arrayLength; i++) {\r\n            sum += calculateDepositFees(deposit_accounts[i]);\r\n        }\r\n        return sum;\r\n    }\r\n    \r\n    /**\r\n     * @dev get all accounts which are registered for deposit fees\r\n     */\r\n    function depositAccounts() public onlyOwner view returns (address[]) {\r\n        return deposit_accounts;\r\n    }\r\n    \r\n    /**\r\n    * @dev set fee base\r\n    */\r\n    function setFeeRate(uint256 _fee_rate) public onlyOwner notLocked {\r\n        fee_rate = _fee_rate;\r\n    }\r\n    \r\n    /**\r\n    * @dev set fee rate\r\n    */\r\n    function setFeeBase(uint256 _fee_base) public onlyOwner notLocked {\r\n        fee_base = _fee_base;\r\n    }\r\n    \r\n    /**\r\n    * @dev set fee address\r\n    */\r\n    function setFeeAddress(address _fee_address) public onlyOwner notLocked {\r\n        fee_address = _fee_address;\r\n    }\r\n    \r\n    /**\r\n    * @dev set boolean for global no transfer fee\r\n    */\r\n    function setNoTransferFee(bool _no_transfer_fee) public onlyOwner notLocked {\r\n        no_transfer_fee = _no_transfer_fee;\r\n    }\r\n    \r\n    /**\r\n    * @dev set fee base\r\n    */\r\n    function setDepositFeeRate(uint256 _deposit_fee_rate) public onlyOwner notLocked {\r\n        deposit_fee_rate = _deposit_fee_rate;\r\n    }\r\n    \r\n    /**\r\n    * @dev set fee rate\r\n    */\r\n    function setDepositFeeBase(uint256 _deposit_fee_base) public onlyOwner notLocked {\r\n        deposit_fee_base = _deposit_fee_base;\r\n    }\r\n    \r\n    /**\r\n    * @dev set fee address\r\n    */\r\n    function setDepositFeeAddress(address _deposit_fee_address) public onlyOwner notLocked {\r\n        deposit_fee_address = _deposit_fee_address;\r\n    }\r\n    \r\n    /**\r\n    * @dev set boolean for global no deposit fee\r\n    *      and possibility to reset the deposit timestamp with range from _from to _to\r\n    */\r\n    function setNoDepositFee(bool _no_deposit_fee, bool _reset_deposit_timestamp, uint256 _from, uint256 _to) public onlyOwner notLocked {\r\n        no_deposit_fee = _no_deposit_fee;\r\n        if(_reset_deposit_timestamp) {\r\n            uint arrayLength = deposit_accounts.length;\r\n            require(_from <= _to);\r\n            require(_to <= arrayLength);\r\n            for (uint i = _from; i < _to; i++) {\r\n                last_deposit_fee_timestamps[deposit_accounts[i]] = now;\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * @dev add transfer fee exception for receiver\r\n    */\r\n    function addTransferFeeExceptionReceiver(address _add_transfer_fee_exception) public onlyOwner notLocked {\r\n        transfer_fee_exceptions_receiver[_add_transfer_fee_exception] = true;\r\n    }\r\n    \r\n    /**\r\n    * @dev remove transfer fee exception for receiver\r\n    */\r\n    function removeTransferFeeExceptionReceiver(address _remove_transfer_fee_exception) public onlyOwner notLocked {\r\n        transfer_fee_exceptions_receiver[_remove_transfer_fee_exception] = false;\r\n    }\r\n    \r\n    /**\r\n    * @dev add transfer fee exception for sender\r\n    */\r\n    function addTransferFeeExceptionSender(address _add_transfer_fee_exception) public onlyOwner notLocked {\r\n        transfer_fee_exceptions_sender[_add_transfer_fee_exception] = true;\r\n    }\r\n    \r\n    /**\r\n    * @dev remove transfer fee exception for receiver\r\n    */\r\n    function removeTransferFeeExceptionSender(address _remove_transfer_fee_exception) public onlyOwner notLocked {\r\n        transfer_fee_exceptions_sender[_remove_transfer_fee_exception] = false;\r\n    }\r\n    \r\n    /**\r\n    * @dev add deposit fee exception\r\n    */\r\n    function addDepositFeeException(address _add_deposit_fee_exception) public onlyOwner notLocked {\r\n        deposit_fee_exceptions[_add_deposit_fee_exception] = true;\r\n    }\r\n    \r\n    /**\r\n    * @dev remove deposit fee exception\r\n    */\r\n    function removeDepositFeeException(address _remove_deposit_fee_exception) public onlyOwner notLocked {\r\n        deposit_fee_exceptions[_remove_deposit_fee_exception] = false;\r\n        if(last_deposit_fee_timestamps[_remove_deposit_fee_exception] != 0) {\r\n            last_deposit_fee_timestamps[_remove_deposit_fee_exception] = now;\r\n        }\r\n    }\r\n    \r\n    /**\r\n    * @dev set isLocked attribute of the smart contract\r\n    */\r\n    function setIsLocked(bool _isLocked) public onlyOwner {\r\n        isLocked = _isLocked;\r\n    }\r\n    \r\n    /**\r\n    * @dev get isLocked attribute of the smart contract\r\n    */\r\n    function getIsLocked() public view returns (bool) {\r\n        return isLocked;\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_fee_base\",\"type\":\"uint256\"}],\"name\":\"setFeeBase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_remove_transfer_fee_exception\",\"type\":\"address\"}],\"name\":\"removeTransferFeeExceptionSender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_no_transfer_fee\",\"type\":\"bool\"}],\"name\":\"setNoTransferFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deposit_fee_address\",\"type\":\"address\"}],\"name\":\"setDepositFeeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_remove_transfer_fee_exception\",\"type\":\"address\"}],\"name\":\"removeTransferFeeExceptionReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee_rate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mine\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add_transfer_fee_exception\",\"type\":\"address\"}],\"name\":\"addTransferFeeExceptionSender\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"calculateDepositFeesForAllAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add_deposit_fee_exception\",\"type\":\"address\"}],\"name\":\"addDepositFeeException\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getIsLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showTransferFeeConfig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_no_deposit_fee\",\"type\":\"bool\"},{\"name\":\"_reset_deposit_timestamp\",\"type\":\"bool\"},{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"setNoDepositFee\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"showDepositFeeConfig\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_remove_deposit_fee_exception\",\"type\":\"address\"}],\"name\":\"removeDepositFeeException\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fee_address\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isLocked\",\"type\":\"bool\"}],\"name\":\"setIsLocked\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deposit_fee_rate\",\"type\":\"uint256\"}],\"name\":\"setDepositFeeRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"executeDepositFeesForAccountsFromTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_deposit_fee_base\",\"type\":\"uint256\"}],\"name\":\"setDepositFeeBase\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositAccounts\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"executeDepositFeesForAllAccounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_add_transfer_fee_exception\",\"type\":\"address\"}],\"name\":\"addTransferFeeExceptionReceiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"SCX","CompilerVersion":"v0.4.18+commit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://a2e104a50d2988371d13c82461b59cb556b00a356d705c4c694ece598b06b191"}]}