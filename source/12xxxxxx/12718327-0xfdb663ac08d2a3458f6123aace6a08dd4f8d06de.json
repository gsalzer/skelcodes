{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.4;\r\n\r\ninterface IERC20 {\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IWETH is IERC20 {\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256) external;\r\n}\r\n\r\ncontract ArbitrageExecutor {\r\n    address payable public immutable owner;\r\n    address private immutable executor;\r\n    IWETH private constant WETH =\r\n        IWETH(0xd0A1E359811322d97991E03f863a0C30C2cF029C);\r\n\r\n    modifier onlyExecutor() {\r\n        require(msg.sender == executor, \"OE\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"OO\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    constructor(address _executor) payable {\r\n        owner = payable(msg.sender);\r\n        executor = _executor;\r\n        if (msg.value > 0) WETH.deposit{value: msg.value}();\r\n    }\r\n\r\n    function arbWeth(\r\n        uint256 _wethAmountToFirstMarket,\r\n        uint256 _ethAmountToCoinbase,\r\n        address[] memory _targets,\r\n        bytes[] memory _payloads\r\n    ) external payable onlyExecutor {\r\n        require(_targets.length == _payloads.length);\r\n        uint256 _wethBalanceBefore = WETH.balanceOf(address(this));\r\n        WETH.transfer(_targets[0], _wethAmountToFirstMarket);\r\n        for (uint256 i = 0; i < _targets.length; i++) {\r\n            (bool _success, bytes memory _response) = _targets[i].call(\r\n                _payloads[i]\r\n            );\r\n            require(_success);\r\n            _response;\r\n        }\r\n\r\n        uint256 _wethBalanceAfter = WETH.balanceOf(address(this));\r\n        require(_wethBalanceAfter > _wethBalanceBefore + _ethAmountToCoinbase);\r\n        if (_ethAmountToCoinbase == 0) return;\r\n\r\n        uint256 _ethBalance = address(this).balance;\r\n        if (_ethBalance < _ethAmountToCoinbase)\r\n            WETH.withdraw(_ethAmountToCoinbase - _ethBalance);\r\n\r\n        (bool success, ) = block.coinbase.call{value: _ethAmountToCoinbase}(\r\n            new bytes(0)\r\n        );\r\n        require(success, \"CB\");\r\n    }\r\n\r\n    function call(\r\n        address payable _to,\r\n        uint256 _value,\r\n        bytes calldata _data\r\n    ) external payable onlyOwner returns (bytes memory) {\r\n        require(_to != address(0));\r\n        (bool _success, bytes memory _result) = _to.call{value: _value}(_data);\r\n        require(_success);\r\n        return _result;\r\n    }\r\n\r\n    function withdraw(uint256 value) external payable onlyOwner {\r\n        if (value > address(this).balance) WETH.withdraw(value);\r\n\r\n        require(address(this).balance >= value, \"NEE\");\r\n        (bool success, ) = owner.call{value: value}(\"\");\r\n        require(success, \"WF\");\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wethAmountToFirstMarket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethAmountToCoinbase\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_payloads\",\"type\":\"bytes[]\"}],\"name\":\"arbWeth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"call\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"ArbitrageExecutor","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000e7bf5b3138f372d42faa8a37804ff9fa81395fb7","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1d9ee85af6dd2746cff6063f61ee2e1adb1490499168b04827a10265b7eb51f4"}]}