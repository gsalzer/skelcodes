{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2021-02-21\r\n*/\r\n\r\n// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.6.0;\r\n\r\ncontract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuardUpgradeable is Initializable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function __ReentrancyGuard_init() internal initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal initializer {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    uint256[49] private __gap; \r\n}\r\n\r\ncontract Staking is ReentrancyGuardUpgradeable {\r\n    using SafeMath for uint256;\r\n\r\n    uint128 constant private BASE_MULTIPLIER = uint128(1 * 10 ** 18);\r\n\r\n    // timestamp for the epoch 1\r\n    // everything before that is considered epoch 0 which won't have a reward but allows for the initial stake\r\n    uint256 public epoch1Start;\r\n\r\n    // duration of each epoch\r\n    uint256 public epochDuration;\r\n\r\n    // holds the current balance of the user for each token\r\n    mapping(address => mapping(address => uint256)) private balances;\r\n\r\n    struct Pool {\r\n        uint256 size;\r\n        bool set;\r\n    }\r\n\r\n    // for each token, we store the total pool size\r\n    mapping(address => mapping(uint256 => Pool)) private poolSize;\r\n\r\n    // a checkpoint of the valid balance of a user for an epoch\r\n    struct Checkpoint {\r\n        uint128 epochId;\r\n        uint128 multiplier;\r\n        uint256 startBalance;\r\n        uint256 newDeposits;\r\n    }\r\n\r\n    // balanceCheckpoints[user][token][]\r\n    mapping(address => mapping(address => Checkpoint[])) private balanceCheckpoints;\r\n\r\n    mapping(address => uint128) private lastWithdrawEpochId;\r\n\r\n    event Deposit(address indexed user, address indexed tokenAddress, uint256 amount);\r\n    event Withdraw(address indexed user, address indexed tokenAddress, uint256 amount);\r\n    event ManualEpochInit(address indexed caller, uint128 indexed epochId, address[] tokens);\r\n    event EmergencyWithdraw(address indexed user, address indexed tokenAddress, uint256 amount);\r\n\r\n    function initialize (uint256 _epoch1Start, uint256 _epochDuration) public initializer {\r\n        epoch1Start = _epoch1Start; \r\n        epochDuration = _epochDuration;\r\n    }\r\n\r\n    /*\r\n     * Stores `amount` of `tokenAddress` tokens for the `user` into the vault\r\n     */\r\n    function deposit(address tokenAddress, uint256 amount) public nonReentrant {\r\n        require(amount > 0, \"Staking: Amount must be > 0\");\r\n\r\n        IERC20 token = IERC20(tokenAddress);\r\n        uint256 allowance = token.allowance(msg.sender, address(this));\r\n        require(allowance >= amount, \"Staking: Token allowance too small\");\r\n\r\n        balances[msg.sender][tokenAddress] = balances[msg.sender][tokenAddress].add(amount);\r\n\r\n        token.transferFrom(msg.sender, address(this), amount);\r\n\r\n        // epoch logic\r\n        uint128 currentEpoch = getCurrentEpoch();\r\n        uint128 currentMultiplier = currentEpochMultiplier();\r\n\r\n        if (!epochIsInitialized(tokenAddress, currentEpoch)) {\r\n            address[] memory tokens = new address[](1);\r\n            tokens[0] = tokenAddress;\r\n            manualEpochInit(tokens, currentEpoch);\r\n        }\r\n\r\n        // update the next epoch pool size\r\n        Pool storage pNextEpoch = poolSize[tokenAddress][currentEpoch + 1];\r\n        pNextEpoch.size = token.balanceOf(address(this));\r\n        pNextEpoch.set = true;\r\n\r\n        Checkpoint[] storage checkpoints = balanceCheckpoints[msg.sender][tokenAddress];\r\n\r\n        uint256 balanceBefore = getEpochUserBalance(msg.sender, tokenAddress, currentEpoch);\r\n\r\n        // if there's no checkpoint yet, it means the user didn't have any activity\r\n        // we want to store checkpoints both for the current epoch and next epoch because\r\n        // if a user does a withdraw, the current epoch can also be modified and\r\n        // we don't want to insert another checkpoint in the middle of the array as that could be expensive\r\n        if (checkpoints.length == 0) {\r\n            checkpoints.push(Checkpoint(currentEpoch, currentMultiplier, 0, amount));\r\n\r\n            // next epoch => multiplier is 1, epoch deposits is 0\r\n            checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, amount, 0));\r\n        } else {\r\n            uint256 last = checkpoints.length - 1;\r\n\r\n            // the last action happened in an older epoch (e.g. a deposit in epoch 3, current epoch is >=5)\r\n            if (checkpoints[last].epochId < currentEpoch) {\r\n                uint128 multiplier = computeNewMultiplier(\r\n                    getCheckpointBalance(checkpoints[last]),\r\n                    BASE_MULTIPLIER,\r\n                    amount,\r\n                    currentMultiplier\r\n                );\r\n                checkpoints.push(Checkpoint(currentEpoch, multiplier, getCheckpointBalance(checkpoints[last]), amount));\r\n                checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, balances[msg.sender][tokenAddress], 0));\r\n            }\r\n            // the last action happened in the previous epoch\r\n            else if (checkpoints[last].epochId == currentEpoch) {\r\n                checkpoints[last].multiplier = computeNewMultiplier(\r\n                    getCheckpointBalance(checkpoints[last]),\r\n                    checkpoints[last].multiplier,\r\n                    amount,\r\n                    currentMultiplier\r\n                );\r\n                checkpoints[last].newDeposits = checkpoints[last].newDeposits.add(amount);\r\n\r\n                checkpoints.push(Checkpoint(currentEpoch + 1, BASE_MULTIPLIER, balances[msg.sender][tokenAddress], 0));\r\n            }\r\n            // the last action happened in the current epoch\r\n            else {\r\n                if (last >= 1 && checkpoints[last - 1].epochId == currentEpoch) {\r\n                    checkpoints[last - 1].multiplier = computeNewMultiplier(\r\n                        getCheckpointBalance(checkpoints[last - 1]),\r\n                        checkpoints[last - 1].multiplier,\r\n                        amount,\r\n                        currentMultiplier\r\n                    );\r\n                    checkpoints[last - 1].newDeposits = checkpoints[last - 1].newDeposits.add(amount);\r\n                }\r\n\r\n                checkpoints[last].startBalance = balances[msg.sender][tokenAddress];\r\n            }\r\n        }\r\n\r\n        uint256 balanceAfter = getEpochUserBalance(msg.sender, tokenAddress, currentEpoch);\r\n\r\n        poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.add(balanceAfter.sub(balanceBefore));\r\n\r\n        emit Deposit(msg.sender, tokenAddress, amount);\r\n    }\r\n\r\n    /*\r\n     * Removes the deposit of the user and sends the amount of `tokenAddress` back to the `user`\r\n     */\r\n    function withdraw(address tokenAddress, uint256 amount) public nonReentrant {\r\n        require(balances[msg.sender][tokenAddress] >= amount, \"Staking: balance too small\");\r\n\r\n        balances[msg.sender][tokenAddress] = balances[msg.sender][tokenAddress].sub(amount);\r\n\r\n        IERC20 token = IERC20(tokenAddress);\r\n        token.transfer(msg.sender, amount);\r\n\r\n        // epoch logic\r\n        uint128 currentEpoch = getCurrentEpoch();\r\n\r\n        lastWithdrawEpochId[tokenAddress] = currentEpoch;\r\n\r\n        if (!epochIsInitialized(tokenAddress, currentEpoch)) {\r\n            address[] memory tokens = new address[](1);\r\n            tokens[0] = tokenAddress;\r\n            manualEpochInit(tokens, currentEpoch);\r\n        }\r\n\r\n        // update the pool size of the next epoch to its current balance\r\n        Pool storage pNextEpoch = poolSize[tokenAddress][currentEpoch + 1];\r\n        pNextEpoch.size = token.balanceOf(address(this));\r\n        pNextEpoch.set = true;\r\n\r\n        Checkpoint[] storage checkpoints = balanceCheckpoints[msg.sender][tokenAddress];\r\n        uint256 last = checkpoints.length - 1;\r\n\r\n        // note: it's impossible to have a withdraw and no checkpoints because the balance would be 0 and revert\r\n\r\n        // there was a deposit in an older epoch (more than 1 behind [eg: previous 0, now 5]) but no other action since then\r\n        if (checkpoints[last].epochId < currentEpoch) {\r\n            checkpoints.push(Checkpoint(currentEpoch, BASE_MULTIPLIER, balances[msg.sender][tokenAddress], 0));\r\n\r\n            poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.sub(amount);\r\n        }\r\n        // there was a deposit in the `epochId - 1` epoch => we have a checkpoint for the current epoch\r\n        else if (checkpoints[last].epochId == currentEpoch) {\r\n            checkpoints[last].startBalance = balances[msg.sender][tokenAddress];\r\n            checkpoints[last].newDeposits = 0;\r\n            checkpoints[last].multiplier = BASE_MULTIPLIER;\r\n\r\n            poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.sub(amount);\r\n        }\r\n        // there was a deposit in the current epoch\r\n        else {\r\n            Checkpoint storage currentEpochCheckpoint = checkpoints[last - 1];\r\n\r\n            uint256 balanceBefore = getCheckpointEffectiveBalance(currentEpochCheckpoint);\r\n\r\n            // in case of withdraw, we have 2 branches:\r\n            // 1. the user withdraws less than he added in the current epoch\r\n            // 2. the user withdraws more than he added in the current epoch (including 0)\r\n            if (amount < currentEpochCheckpoint.newDeposits) {\r\n                uint128 avgDepositMultiplier = uint128(\r\n                    balanceBefore.sub(currentEpochCheckpoint.startBalance).mul(BASE_MULTIPLIER).div(currentEpochCheckpoint.newDeposits)\r\n                );\r\n\r\n                currentEpochCheckpoint.newDeposits = currentEpochCheckpoint.newDeposits.sub(amount);\r\n\r\n                currentEpochCheckpoint.multiplier = computeNewMultiplier(\r\n                    currentEpochCheckpoint.startBalance,\r\n                    BASE_MULTIPLIER,\r\n                    currentEpochCheckpoint.newDeposits,\r\n                    avgDepositMultiplier\r\n                );\r\n            } else {\r\n                currentEpochCheckpoint.startBalance = currentEpochCheckpoint.startBalance.sub(\r\n                    amount.sub(currentEpochCheckpoint.newDeposits)\r\n                );\r\n                currentEpochCheckpoint.newDeposits = 0;\r\n                currentEpochCheckpoint.multiplier = BASE_MULTIPLIER;\r\n            }\r\n\r\n            uint256 balanceAfter = getCheckpointEffectiveBalance(currentEpochCheckpoint);\r\n\r\n            poolSize[tokenAddress][currentEpoch].size = poolSize[tokenAddress][currentEpoch].size.sub(balanceBefore.sub(balanceAfter));\r\n\r\n            checkpoints[last].startBalance = balances[msg.sender][tokenAddress];\r\n        }\r\n\r\n        emit Withdraw(msg.sender, tokenAddress, amount);\r\n    }\r\n\r\n    /*\r\n     * manualEpochInit can be used by anyone to initialize an epoch based on the previous one\r\n     * This is only applicable if there was no action (deposit/withdraw) in the current epoch.\r\n     * Any deposit and withdraw will automatically initialize the current and next epoch.\r\n     */\r\n    function manualEpochInit(address[] memory tokens, uint128 epochId) public {\r\n        require(epochId <= getCurrentEpoch(), \"can't init a future epoch\");\r\n\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            Pool storage p = poolSize[tokens[i]][epochId];\r\n\r\n            if (epochId == 0) {\r\n                p.size = uint256(0);\r\n                p.set = true;\r\n            } else {\r\n                require(!epochIsInitialized(tokens[i], epochId), \"Staking: epoch already initialized\");\r\n                require(epochIsInitialized(tokens[i], epochId - 1), \"Staking: previous epoch not initialized\");\r\n\r\n                p.size = poolSize[tokens[i]][epochId - 1].size;\r\n                p.set = true;\r\n            }\r\n        }\r\n\r\n        emit ManualEpochInit(msg.sender, epochId, tokens);\r\n    }\r\n\r\n    function emergencyWithdraw(address tokenAddress) public {\r\n        require((getCurrentEpoch() - lastWithdrawEpochId[tokenAddress]) >= 10, \"At least 10 epochs must pass without success\");\r\n\r\n        uint256 totalUserBalance = balances[msg.sender][tokenAddress];\r\n        require(totalUserBalance > 0, \"Amount must be > 0\");\r\n\r\n        balances[msg.sender][tokenAddress] = 0;\r\n\r\n        IERC20 token = IERC20(tokenAddress);\r\n        token.transfer(msg.sender, totalUserBalance);\r\n\r\n        emit EmergencyWithdraw(msg.sender, tokenAddress, totalUserBalance);\r\n    }\r\n\r\n    /*\r\n     * Returns the valid balance of a user that was taken into consideration in the total pool size for the epoch\r\n     * A deposit will only change the next epoch balance.\r\n     * A withdraw will decrease the current epoch (and subsequent) balance.\r\n     */\r\n    function getEpochUserBalance(address user, address token, uint128 epochId) public view returns (uint256) {\r\n        Checkpoint[] storage checkpoints = balanceCheckpoints[user][token];\r\n\r\n        // if there are no checkpoints, it means the user never deposited any tokens, so the balance is 0\r\n        if (checkpoints.length == 0 || epochId < checkpoints[0].epochId) {\r\n            return 0;\r\n        }\r\n\r\n        uint min = 0;\r\n        uint max = checkpoints.length - 1;\r\n\r\n        // shortcut for blocks newer than the latest checkpoint == current balance\r\n        if (epochId >= checkpoints[max].epochId) {\r\n            return getCheckpointEffectiveBalance(checkpoints[max]);\r\n        }\r\n\r\n        // binary search of the value in the array\r\n        while (max > min) {\r\n            uint mid = (max + min + 1) / 2;\r\n            if (checkpoints[mid].epochId <= epochId) {\r\n                min = mid;\r\n            } else {\r\n                max = mid - 1;\r\n            }\r\n        }\r\n\r\n        return getCheckpointEffectiveBalance(checkpoints[min]);\r\n    }\r\n\r\n    /*\r\n     * Returns the amount of `token` that the `user` has currently staked\r\n     */\r\n    function balanceOf(address user, address token) public view returns (uint256) {\r\n        return balances[user][token];\r\n    }\r\n\r\n    /*\r\n     * Returns the id of the current epoch derived from block.timestamp\r\n     */\r\n    function getCurrentEpoch() public view returns (uint128) {\r\n        if (block.timestamp < epoch1Start) {\r\n            return 0;\r\n        }\r\n\r\n        return uint128((block.timestamp - epoch1Start) / epochDuration + 1);\r\n    }\r\n\r\n    /*\r\n     * Returns the total amount of `tokenAddress` that was locked from beginning to end of epoch identified by `epochId`\r\n     */\r\n    function getEpochPoolSize(address tokenAddress, uint128 epochId) public view returns (uint256) {\r\n        // Premises:\r\n        // 1. it's impossible to have gaps of uninitialized epochs\r\n        // - any deposit or withdraw initialize the current epoch which requires the previous one to be initialized\r\n        if (epochIsInitialized(tokenAddress, epochId)) {\r\n            return poolSize[tokenAddress][epochId].size;\r\n        }\r\n\r\n        // epochId not initialized and epoch 0 not initialized => there was never any action on this pool\r\n        if (!epochIsInitialized(tokenAddress, 0)) {\r\n            return 0;\r\n        }\r\n\r\n        // epoch 0 is initialized => there was an action at some point but none that initialized the epochId\r\n        // which means the current pool size is equal to the current balance of token held by the staking contract\r\n        IERC20 token = IERC20(tokenAddress);\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    /*\r\n     * Returns the percentage of time left in the current epoch\r\n     */\r\n    function currentEpochMultiplier() public view returns (uint128) {\r\n        uint128 currentEpoch = getCurrentEpoch();\r\n        uint256 currentEpochEnd = epoch1Start + currentEpoch * epochDuration;\r\n        uint256 timeLeft = currentEpochEnd - block.timestamp;\r\n        uint128 multiplier = uint128(timeLeft * BASE_MULTIPLIER / epochDuration);\r\n\r\n        return multiplier;\r\n    }\r\n\r\n    function computeNewMultiplier(uint256 prevBalance, uint128 prevMultiplier, uint256 amount, uint128 currentMultiplier) public pure returns (uint128) {\r\n        uint256 prevAmount = prevBalance.mul(prevMultiplier).div(BASE_MULTIPLIER);\r\n        uint256 addAmount = amount.mul(currentMultiplier).div(BASE_MULTIPLIER);\r\n        uint128 newMultiplier = uint128(prevAmount.add(addAmount).mul(BASE_MULTIPLIER).div(prevBalance.add(amount)));\r\n\r\n        return newMultiplier;\r\n    }\r\n\r\n    /*\r\n     * Checks if an epoch is initialized, meaning we have a pool size set for it\r\n     */\r\n    function epochIsInitialized(address token, uint128 epochId) public view returns (bool) {\r\n        return poolSize[token][epochId].set;\r\n    }\r\n\r\n    function getCheckpointBalance(Checkpoint memory c) internal pure returns (uint256) {\r\n        return c.startBalance.add(c.newDeposits);\r\n    }\r\n\r\n    function getCheckpointEffectiveBalance(Checkpoint memory c) internal pure returns (uint256) {\r\n        return getCheckpointBalance(c).mul(c.multiplier).div(BASE_MULTIPLIER);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"ManualEpochInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prevBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"prevMultiplier\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"currentMultiplier\",\"type\":\"uint128\"}],\"name\":\"computeNewMultiplier\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpochMultiplier\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch1Start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"epochIsInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"getEpochPoolSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"getEpochUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epoch1Start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_epochDuration\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint128\",\"name\":\"epochId\",\"type\":\"uint128\"}],\"name\":\"manualEpochInit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Staking","CompilerVersion":"v0.6.0+commit.26b70077","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2b2a87503dab853c509fcb2b0972295a3bfe289dcf4aac890161ae38d33f681c"}]}