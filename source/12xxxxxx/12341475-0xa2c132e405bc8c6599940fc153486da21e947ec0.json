{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath{\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        if (a == 0) {\r\n        return 0;}\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) \r\n    {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n}\r\n/**\r\n * @dev Interface of the ERC standard.\r\n */\r\npragma solidity ^0.8.0;\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Staker {\r\n    using SafeMath for uint;\r\n    \r\n    IERC20 public xDNA;\r\n    uint[] timespans = [2592000, 7776000, 15552000, 31536000];\r\n    uint[] rates = [103, 110, 123, 149];\r\n    mapping(uint => address) public ownerOf;\r\n    struct Stake {\r\n        uint amount;\r\n        uint reward;\r\n        uint start;\r\n        uint8 timespan;\r\n        bool withdrawn;\r\n        uint256 stakedAt;\r\n    }\r\n    Stake[] public stakes;\r\n\r\n    function stake(uint _amount, uint8 _timespan) public returns (uint _tokenId) {\r\n        require(block.timestamp < 1656547200,'Cannot Stake Amount After 30th June,2022');\r\n        require(_amount >= 1000000000000000000,'Minimum of 1 token can be staked');\r\n        require(_timespan < 4);\r\n        require(xDNA.transferFrom(msg.sender, address(this), _amount));\r\n        Stake memory _stake = Stake({\r\n            amount: _amount,\r\n            reward:_amount.mul(rates[_timespan]).div(100),\r\n            start: block.timestamp,\r\n            timespan: _timespan,\r\n            withdrawn: false,\r\n            stakedAt:block.timestamp\r\n        });\r\n        _tokenId = stakes.length;\r\n        stakes.push(_stake);\r\n        ownerOf[_tokenId] = msg.sender;\r\n    }\r\n    \r\n    function unstake(uint _id) public {\r\n        require(msg.sender == ownerOf[_id]);\r\n        Stake storage _s = stakes[_id];\r\n        uint8 _t = _s.timespan;\r\n        require(_s.withdrawn == false);\r\n        require(block.timestamp >= _s.start + timespans[_t]);\r\n        require(xDNA.transfer(msg.sender, _s.amount.mul(rates[_t]).div(100)));\r\n        _s.withdrawn = true;\r\n    }\r\n    \r\n   \r\n    function tokenUsed() public view returns (IERC20 t) {\r\n        return xDNA;\r\n    }\r\n    function tokensOf(address _owner) public view returns (Stake[] memory ownerTokens) {\r\n        uint _count = 0;\r\n        for (uint i = 0; i < stakes.length; i++) {\r\n            if (ownerOf[i] == _owner) _count++;\r\n        }\r\n        if (_count == 0) return new Stake[](0);\r\n        ownerTokens = new Stake[](_count);\r\n        uint _index = 0;        \r\n        for (uint i = 0; i < stakes.length; i++) {\r\n\r\n            if (ownerOf[i] == _owner) ownerTokens[_index++] = stakes[i];\r\n        }\r\n    }\r\n    \r\n    constructor (IERC20 _token) {\r\n        xDNA = IERC20(_token);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_timespan\",\"type\":\"uint8\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"timespan\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenUsed\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"t\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"tokensOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"timespan\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"withdrawn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stakedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Staker.Stake[]\",\"name\":\"ownerTokens\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xDNA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Staker","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008e57c27761ebbd381b0f9d09bb92ceb51a358abb","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://77fd9208344157f3f4a1fd664ac37926f5b6369790c88861569da30bd487c126"}]}