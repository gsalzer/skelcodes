{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIXED\r\n\r\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringMath.sol@v1.2.2\r\n// License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n/// @notice A library for performing overflow-/underflow-safe math,\r\n/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\r\nlibrary BoringMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b == 0 || (c = a * b) / b == a, \"BoringMath: Mul Overflow\");\r\n    }\r\n\r\n    function to128(uint256 a) internal pure returns (uint128 c) {\r\n        require(a <= uint128(-1), \"BoringMath: uint128 Overflow\");\r\n        c = uint128(a);\r\n    }\r\n\r\n    function to64(uint256 a) internal pure returns (uint64 c) {\r\n        require(a <= uint64(-1), \"BoringMath: uint64 Overflow\");\r\n        c = uint64(a);\r\n    }\r\n\r\n    function to32(uint256 a) internal pure returns (uint32 c) {\r\n        require(a <= uint32(-1), \"BoringMath: uint32 Overflow\");\r\n        c = uint32(a);\r\n    }\r\n}\r\n\r\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\r\nlibrary BoringMath128 {\r\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n}\r\n\r\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint64.\r\nlibrary BoringMath64 {\r\n    function add(uint64 a, uint64 b) internal pure returns (uint64 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint64 a, uint64 b) internal pure returns (uint64 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n}\r\n\r\n/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint32.\r\nlibrary BoringMath32 {\r\n    function add(uint32 a, uint32 b) internal pure returns (uint32 c) {\r\n        require((c = a + b) >= b, \"BoringMath: Add Overflow\");\r\n    }\r\n\r\n    function sub(uint32 a, uint32 b) internal pure returns (uint32 c) {\r\n        require((c = a - b) <= a, \"BoringMath: Underflow\");\r\n    }\r\n}\r\n\r\n// File @sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Factory.sol@v1.4.2\r\n// License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function migrator() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n    function setMigrator(address) external;\r\n}\r\n\r\n// File @sushiswap/core/contracts/uniswapv2/interfaces/IUniswapV2Pair.sol@v1.4.2\r\n// License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File @boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol@v1.2.2\r\n// License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /// @notice EIP 2612\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n}\r\n\r\n// File @boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol@v1.2.2\r\n// License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\nstruct Rebase {\r\n    uint128 elastic;\r\n    uint128 base;\r\n}\r\n\r\n/// @notice A rebasing library using overflow-/underflow-safe math.\r\nlibrary RebaseLibrary {\r\n    using BoringMath for uint256;\r\n    using BoringMath128 for uint128;\r\n\r\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\r\n    function toBase(\r\n        Rebase memory total,\r\n        uint256 elastic,\r\n        bool roundUp\r\n    ) internal pure returns (uint256 base) {\r\n        if (total.elastic == 0) {\r\n            base = elastic;\r\n        } else {\r\n            base = elastic.mul(total.base) / total.elastic;\r\n            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\r\n                base = base.add(1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\r\n    function toElastic(\r\n        Rebase memory total,\r\n        uint256 base,\r\n        bool roundUp\r\n    ) internal pure returns (uint256 elastic) {\r\n        if (total.base == 0) {\r\n            elastic = base;\r\n        } else {\r\n            elastic = base.mul(total.elastic) / total.base;\r\n            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\r\n                elastic = elastic.add(1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\r\n    /// @return (Rebase) The new total.\r\n    /// @return base in relationship to `elastic`.\r\n    function add(\r\n        Rebase memory total,\r\n        uint256 elastic,\r\n        bool roundUp\r\n    ) internal pure returns (Rebase memory, uint256 base) {\r\n        base = toBase(total, elastic, roundUp);\r\n        total.elastic = total.elastic.add(elastic.to128());\r\n        total.base = total.base.add(base.to128());\r\n        return (total, base);\r\n    }\r\n\r\n    /// @notice Sub `base` from `total` and update `total.elastic`.\r\n    /// @return (Rebase) The new total.\r\n    /// @return elastic in relationship to `base`.\r\n    function sub(\r\n        Rebase memory total,\r\n        uint256 base,\r\n        bool roundUp\r\n    ) internal pure returns (Rebase memory, uint256 elastic) {\r\n        elastic = toElastic(total, base, roundUp);\r\n        total.elastic = total.elastic.sub(elastic.to128());\r\n        total.base = total.base.sub(base.to128());\r\n        return (total, elastic);\r\n    }\r\n\r\n    /// @notice Add `elastic` and `base` to `total`.\r\n    function add(\r\n        Rebase memory total,\r\n        uint256 elastic,\r\n        uint256 base\r\n    ) internal pure returns (Rebase memory) {\r\n        total.elastic = total.elastic.add(elastic.to128());\r\n        total.base = total.base.add(base.to128());\r\n        return total;\r\n    }\r\n\r\n    /// @notice Subtract `elastic` and `base` to `total`.\r\n    function sub(\r\n        Rebase memory total,\r\n        uint256 elastic,\r\n        uint256 base\r\n    ) internal pure returns (Rebase memory) {\r\n        total.elastic = total.elastic.sub(elastic.to128());\r\n        total.base = total.base.sub(base.to128());\r\n        return total;\r\n    }\r\n\r\n    /// @notice Add `elastic` to `total` and update storage.\r\n    /// @return newElastic Returns updated `elastic`.\r\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\r\n        newElastic = total.elastic = total.elastic.add(elastic.to128());\r\n    }\r\n\r\n    /// @notice Subtract `elastic` from `total` and update storage.\r\n    /// @return newElastic Returns updated `elastic`.\r\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\r\n        newElastic = total.elastic = total.elastic.sub(elastic.to128());\r\n    }\r\n}\r\n\r\n// File @sushiswap/bentobox-sdk/contracts/IBatchFlashBorrower.sol@v1.0.2\r\n// License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IBatchFlashBorrower {\r\n    function onBatchFlashLoan(\r\n        address sender,\r\n        IERC20[] calldata tokens,\r\n        uint256[] calldata amounts,\r\n        uint256[] calldata fees,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File @sushiswap/bentobox-sdk/contracts/IFlashBorrower.sol@v1.0.2\r\n// License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IFlashBorrower {\r\n    function onFlashLoan(\r\n        address sender,\r\n        IERC20 token,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File @sushiswap/bentobox-sdk/contracts/IStrategy.sol@v1.0.2\r\n// License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\ninterface IStrategy {\r\n    // Send the assets to the Strategy and call skim to invest them\r\n    function skim(uint256 amount) external;\r\n\r\n    // Harvest any profits made converted to the asset and pass them to the caller\r\n    function harvest(uint256 balance, address sender) external returns (int256 amountAdded);\r\n\r\n    // Withdraw assets. The returned amount can differ from the requested amount due to rounding.\r\n    // The actualAmount should be very close to the amount. The difference should NOT be used to report a loss. That's what harvest is for.\r\n    function withdraw(uint256 amount) external returns (uint256 actualAmount);\r\n\r\n    // Withdraw all assets in the safest way possible. This shouldn't fail.\r\n    function exit(uint256 balance) external returns (int256 amountAdded);\r\n}\r\n\r\n// File @sushiswap/bentobox-sdk/contracts/IBentoBoxV1.sol@v1.0.2\r\n// License-Identifier: MIT\r\npragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\ninterface IBentoBoxV1 {\r\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\r\n    event LogDeposit(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\r\n    event LogFlashLoan(address indexed borrower, address indexed token, uint256 amount, uint256 feeAmount, address indexed receiver);\r\n    event LogRegisterProtocol(address indexed protocol);\r\n    event LogSetMasterContractApproval(address indexed masterContract, address indexed user, bool approved);\r\n    event LogStrategyDivest(address indexed token, uint256 amount);\r\n    event LogStrategyInvest(address indexed token, uint256 amount);\r\n    event LogStrategyLoss(address indexed token, uint256 amount);\r\n    event LogStrategyProfit(address indexed token, uint256 amount);\r\n    event LogStrategyQueued(address indexed token, address indexed strategy);\r\n    event LogStrategySet(address indexed token, address indexed strategy);\r\n    event LogStrategyTargetPercentage(address indexed token, uint256 targetPercentage);\r\n    event LogTransfer(address indexed token, address indexed from, address indexed to, uint256 share);\r\n    event LogWhiteListMasterContract(address indexed masterContract, bool approved);\r\n    event LogWithdraw(address indexed token, address indexed from, address indexed to, uint256 amount, uint256 share);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    function balanceOf(IERC20, address) external view returns (uint256);\r\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results);\r\n    function batchFlashLoan(IBatchFlashBorrower borrower, address[] calldata receivers, IERC20[] calldata tokens, uint256[] calldata amounts, bytes calldata data) external;\r\n    function claimOwnership() external;\r\n    function deploy(address masterContract, bytes calldata data, bool useCreate2) external payable;\r\n    function deposit(IERC20 token_, address from, address to, uint256 amount, uint256 share) external payable returns (uint256 amountOut, uint256 shareOut);\r\n    function flashLoan(IFlashBorrower borrower, address receiver, IERC20 token, uint256 amount, bytes calldata data) external;\r\n    function harvest(IERC20 token, bool balance, uint256 maxChangeAmount) external;\r\n    function masterContractApproved(address, address) external view returns (bool);\r\n    function masterContractOf(address) external view returns (address);\r\n    function nonces(address) external view returns (uint256);\r\n    function owner() external view returns (address);\r\n    function pendingOwner() external view returns (address);\r\n    function pendingStrategy(IERC20) external view returns (IStrategy);\r\n    function permitToken(IERC20 token, address from, address to, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    function registerProtocol() external;\r\n    function setMasterContractApproval(address user, address masterContract, bool approved, uint8 v, bytes32 r, bytes32 s) external;\r\n    function setStrategy(IERC20 token, IStrategy newStrategy) external;\r\n    function setStrategyTargetPercentage(IERC20 token, uint64 targetPercentage_) external;\r\n    function strategy(IERC20) external view returns (IStrategy);\r\n    function strategyData(IERC20) external view returns (uint64 strategyStartDate, uint64 targetPercentage, uint128 balance);\r\n    function toAmount(IERC20 token, uint256 share, bool roundUp) external view returns (uint256 amount);\r\n    function toShare(IERC20 token, uint256 amount, bool roundUp) external view returns (uint256 share);\r\n    function totals(IERC20) external view returns (Rebase memory totals_);\r\n    function transfer(IERC20 token, address from, address to, uint256 share) external;\r\n    function transferMultiple(IERC20 token, address from, address[] calldata tos, uint256[] calldata shares) external;\r\n    function transferOwnership(address newOwner, bool direct, bool renounce) external;\r\n    function whitelistMasterContract(address masterContract, bool approved) external;\r\n    function whitelistedMasterContracts(address) external view returns (bool);\r\n    function withdraw(IERC20 token_, address from, address to, uint256 amount, uint256 share) external returns (uint256 amountOut, uint256 shareOut);\r\n}\r\n\r\n// File contracts/swappers/Leverage/YVWETHLevSwapper.sol\r\n// License-Identifier: MIT\r\npragma solidity 0.6.12;\r\n\r\n\r\n\r\n\r\ninterface CurvePool {\r\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy, address receiver) external returns (uint256);\r\n}\r\n\r\ninterface YearnVault {\r\n    function withdraw() external returns (uint256);\r\n    function deposit(uint256 amount, address recipient) external returns (uint256);\r\n}\r\n\r\ninterface TetherToken {\r\n    function approve(address _spender, uint256 _value) external;\r\n}\r\ncontract YVWETHLevSwapper{\r\n    using BoringMath for uint256;\r\n\r\n    // Local variables\r\n    IBentoBoxV1 public immutable bentoBox;\r\n\r\n    CurvePool public constant MIM3POOL = CurvePool(0x5a6A4D54456819380173272A5E8E9B9904BdF41B);\r\n    TetherToken public constant TETHER = TetherToken(0xdAC17F958D2ee523a2206206994597C13D831ec7); \r\n    YearnVault public constant WETH_VAULT = YearnVault(0xa258C4606Ca8206D8aA700cE2143D7db854D168c);\r\n    IUniswapV2Pair constant pair = IUniswapV2Pair(0x06da0fd433C1A5d7a4faa01111c044910A184553);\r\n    IERC20 constant WETH = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    IERC20 public constant MIM = IERC20(0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3);\r\n\r\n    constructor(\r\n        IBentoBoxV1 bentoBox_\r\n    ) public {\r\n        bentoBox = bentoBox_;\r\n        WETH.approve(address(WETH_VAULT), type(uint256).max);\r\n        MIM.approve(address(MIM3POOL), type(uint256).max);\r\n    }\r\n\r\n    // Given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) internal pure returns (uint256 amountOut) {\r\n        uint256 amountInWithFee = amountIn.mul(997);\r\n        uint256 numerator = amountInWithFee.mul(reserveOut);\r\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // Given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) internal pure returns (uint256 amountIn) {\r\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // Swaps to a flexible amount, from an exact input amount\r\n    function swap(\r\n        address recipient,\r\n        uint256 shareToMin,\r\n        uint256 shareFrom\r\n    ) public returns (uint256 extraShare, uint256 shareReturned) {\r\n\r\n        (uint256 amountFrom, ) = bentoBox.withdraw(MIM, address(this), address(this), 0, shareFrom);\r\n\r\n        uint256 amountIntermediate = MIM3POOL.exchange_underlying(0, 3, amountFrom, 0, address(pair));\r\n\r\n        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\r\n        \r\n        uint256  amountInt2 = getAmountOut(amountIntermediate, reserve1, reserve0);\r\n        pair.swap(amountInt2, 0, address(this), new bytes(0));\r\n\r\n        uint256 amountTo = WETH_VAULT.deposit(type(uint256).max, address(bentoBox));\r\n\r\n        (, shareReturned) = bentoBox.deposit(IERC20(address(WETH_VAULT)), address(bentoBox), recipient, amountTo, 0);\r\n        extraShare = shareReturned.sub(shareToMin);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"bentoBox_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MIM\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIM3POOL\",\"outputs\":[{\"internalType\":\"contract CurvePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TETHER\",\"outputs\":[{\"internalType\":\"contract TetherToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH_VAULT\",\"outputs\":[{\"internalType\":\"contract YearnVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bentoBox\",\"outputs\":[{\"internalType\":\"contract IBentoBoxV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareToMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareFrom\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extraShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareReturned\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"YVWETHLevSwapper","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"350","ConstructorArguments":"000000000000000000000000f5bce5077908a1b7370b9ae04adc565ebd643966","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://044e821b19b92ceab649b4691276b047a3619e4241fd1f3c899a8c8733ea9624"}]}