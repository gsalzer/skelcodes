{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.7;\r\n\r\nabstract contract ESMLike {\r\n    function settled() virtual public view returns (uint256);\r\n    function modifyParameters(bytes32, uint256) virtual external;\r\n}\r\nabstract contract ProtocolTokenLike {\r\n    function balanceOf(address) virtual public view returns (uint256);\r\n    function totalSupply() virtual public view returns (uint256);\r\n}\r\n\r\ncontract ESMThresholdSetter {\r\n    // --- Auth ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    /**\r\n     * @notice Add auth to an account\r\n     * @param account Account to add auth to\r\n     */\r\n    function addAuthorization(address account) public isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    /**\r\n     * @notice Remove auth from an account\r\n     * @param account Account to remove auth from\r\n     */\r\n    function removeAuthorization(address account) public isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    /**\r\n    * @notice Checks whether msg.sender can call an authed function\r\n    **/\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"ESMThresholdSetter/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Variables ---\r\n    // The minimum amount of protocol tokens that must be burned to trigger settlement using the ESM\r\n    uint256           public minAmountToBurn;         // [wad]\r\n    // The percentage of outstanding protocol tokens to burn in order to trigger settlement using the ESM\r\n    uint256           public supplyPercentageToBurn;  // [thousand]\r\n\r\n    // The address of the protocol token\r\n    ProtocolTokenLike public protocolToken;\r\n    // The address of the ESM contract\r\n    ESMLike           public esm;\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event ModifyParameters(bytes32 parameter, address account);\r\n\r\n    constructor(\r\n      address protocolToken_,\r\n      uint256 minAmountToBurn_,\r\n      uint256 supplyPercentageToBurn_\r\n    ) public {\r\n        require(protocolToken_ != address(0), \"ESMThresholdSetter/\");\r\n        require(both(supplyPercentageToBurn_ > 0, supplyPercentageToBurn_ < THOUSAND), \"ESMThresholdSetter/invalid-percentage-to-burn\");\r\n        require(minAmountToBurn_ > 0, \"ESMThresholdSetter/null-min-amount-to-burn\");\r\n\r\n        authorizedAccounts[msg.sender] = 1;\r\n\r\n        minAmountToBurn        = minAmountToBurn_;\r\n        supplyPercentageToBurn = supplyPercentageToBurn_;\r\n        protocolToken          = ProtocolTokenLike(protocolToken_);\r\n\r\n        require(protocolToken.totalSupply() > 0, \"ESMThresholdSetter/null-token-supply\");\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n\r\n    // --- Math ---\r\n    uint256 constant THOUSAND = 10 ** 3;\r\n    function maximum(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = (x >= y) ? x : y;\r\n    }\r\n    function subtract(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ESMThresholdSetter/sub-uint-uint-underflow\");\r\n    }\r\n    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ESMThresholdSetter/multiply-uint-uint-overflow\");\r\n    }\r\n\r\n    // --- Administration ---\r\n    /*\r\n    * @notify Change the ESM address\r\n    * @parameter Name of the parameter (should only be \"esm\")\r\n    * @param New ESM address\r\n    */\r\n    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\r\n        require(addr != address(0), \"ESMThresholdSetter/null-addr\");\r\n        if (parameter == \"esm\") {\r\n          require(address(esm) == address(0), \"ESMThresholdSetter/esm-already-set\");\r\n          esm = ESMLike(addr);\r\n          require(esm.settled() == 0, \"ESMThresholdSetter/esm-disabled\");\r\n        } else revert(\"ESMThresholdSetter/modify-unrecognized-param\");\r\n        emit ModifyParameters(\"esm\", addr);\r\n    }\r\n    /*\r\n    * @notify Calculate and set a new protocol token threshold in the ESM\r\n    */\r\n    function recomputeThreshold() public {\r\n        // The ESM must still be functional\r\n        require(esm.settled() == 0, \"ESMThresholdSetter/esm-disabled\");\r\n\r\n        uint256 currentTokenSupply = protocolToken.totalSupply();\r\n        if (currentTokenSupply == 0) { // If the current supply is zero, set the min amount to burn\r\n          esm.modifyParameters(\"triggerThreshold\", minAmountToBurn);\r\n        } else { // Otherwise compute a new threshold taking into account supplyPercentageToBurn\r\n          uint256 newThreshold = multiply(subtract(currentTokenSupply, protocolToken.balanceOf(address(0))), supplyPercentageToBurn) / THOUSAND;\r\n          esm.modifyParameters(\"triggerThreshold\", maximum(minAmountToBurn, newThreshold));\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocolToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minAmountToBurn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyPercentageToBurn_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esm\",\"outputs\":[{\"internalType\":\"contract ESMLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountToBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolToken\",\"outputs\":[{\"internalType\":\"contract ProtocolTokenLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recomputeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyPercentageToBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ESMThresholdSetter","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000006243d8cea23066d098a15582d81a598b4e8391f4000000000000000000000000000000000000000000000a968163f0a57b4000000000000000000000000000000000000000000000000000000000000000000064","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cc8b470add812a086486c2f8fcc7ba8486c37f84bdec1b153d38661af3a57f41"}]}