{"status":"1","message":"OK","result":[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size \\u003e 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"Locker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Platinum Software Dev Team\\n// Locker  Beta  version.\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./LockerTypes.sol\\\";\\n\\ncontract Locker is LockerTypes {\\n    using SafeERC20 for IERC20;\\n\\n    string  constant public name = \\\"Lock \\u0026 Registry v0.0.3\\\";\\n\\n\\n    /**\\n     * @dev Then more records in VestingRecord array then more gas will spend\\n     * in  `lockTokens` method  and in every getter call_getAvailableAmountByLockIndex.\\n     * So in some case it can revert After test we decide use yhis value. But it\\n     * is not up limit and you can try more\\n     */\\n    uint256 constant public MAX_VESTING_RECORDS_PER_LOCK  = 21;\\n    /**\\n     * @dev Then more records in _beneficiaries then more gas will spend\\n     * in  `lockTokens` method. After test we decide use yhis value. But it\\n     * is not up limit and you can try more\\n     */    \\n    uint256 constant public MAX_BENEFICIARIES_PER_LOCK    = 160;\\n    uint256 constant public MAX_LOCkS_PER_BENEFICIARY    = 1000;\\n\\n    /**\\n     * @dev Then more TOTAL_IN_PERCENT then more precision.\\n     * but be attention with _beneficiariesShares array\\n     * accordingly this value\\n     */\\n    uint256 constant public TOTAL_IN_PERCENT = 1e13;\\n    LockStorageRecord[] lockerStorage;\\n\\n    //map from users(investors)  to locked shares\\n    mapping(address =\\u003e RegistryShare[])  public registry;\\n\\n    //map from lockIndex to beneficiaries list\\n    mapping(uint256 =\\u003e address[]) beneficiariesInLock;\\n\\n    \\n    event NewLock(address indexed erc20, address indexed who, uint256 lockedAmount, uint256 lockId);\\n    \\n    /**\\n     * @dev Any who have token balance \\u003e 0 can lock  it here.\\n     *\\n     * Emits a NewLock event.\\n     *\\n     * Requirements:\\n     *\\n     * - `_ERC20` token contract address for lock.\\n     * - `_amount` amount of tokens to be locked.\\n     * - `_unlockedFrom` array of unlock dates in unixtime format.\\n     * - `_unlockAmount` array of unlock amounts.\\n     * - `_beneficiaries` array of address for beneficiaries.\\n     * - `_beneficiariesShares` array of beneficiaries shares, in % but \\n     * - scaled on TOTAL_IN_PERCENT/100. So 20% = 2000 if TOTAL_IN_PERCENT=10000, 0.1% = 10 and etc.\\n     * Caller must approve _ERC20 tokens to this contract address before lock\\n     */\\n    function lockTokens(\\n        address _ERC20, \\n        uint256 _amount, \\n        uint256[] memory _unlockedFrom, \\n        uint256[] memory _unlockAmount,\\n        address[] memory _beneficiaries,\\n        uint256[] memory _beneficiariesShares\\n\\n    )\\n        external \\n\\n    {\\n        require(_amount \\u003e 0, \\\"Cant lock 0 amount\\\");\\n        require(IERC20(_ERC20).allowance(msg.sender, address(this)) \\u003e= _amount, \\\"Please approve first\\\");\\n        require(_getArraySum(_unlockAmount) == _amount, \\\"Sum vesting records must be equal lock amount\\\");\\n        require(_unlockedFrom.length == _unlockAmount.length, \\\"Length of periods and amounts arrays must be equal\\\");\\n        require(_beneficiaries.length == _beneficiariesShares.length, \\\"Length of beneficiaries and shares arrays must be equal\\\");\\n        require(_getArraySum(_beneficiariesShares) == TOTAL_IN_PERCENT, \\\"Sum of shares array must be equal to 100%\\\");\\n        require(_beneficiaries.length \\u003c MAX_BENEFICIARIES_PER_LOCK,   \\\"MAX_BENEFICIARIES_PER_LOCK LIMIT\\\");\\n        require(_unlockedFrom.length  \\u003c MAX_VESTING_RECORDS_PER_LOCK, \\\"MAX_VESTING_RECORDS_PER_LOCK LIMIT\\\");\\n\\n        //Lets prepare vestings array\\n        VestingRecord[] memory v = new VestingRecord[](_unlockedFrom.length);\\n        for (uint256 i = 0; i \\u003c _unlockedFrom.length; i ++ ) {\\n                v[i].unlockTime = _unlockedFrom[i];\\n                v[i].amountUnlock = _unlockAmount[i]; \\n        }\\n        \\n        //Save lock info in storage\\n        LockStorageRecord storage lock = lockerStorage.push();\\n        lock.ltype = LockType.ERC20;\\n        lock.token = _ERC20;\\n        lock.amount = _amount;\\n\\n\\n        //Copying of type struct LockerTypes.VestingRecord memory[] memory \\n        //to storage not yet supported.\\n        //so we need this cycle\\n        for (uint256 i = 0; i \\u003c _unlockedFrom.length; i ++ ) {\\n            lock.vestings.push(v[i]);    \\n        }\\n\\n        //Lets save _beneficiaries for this lock\\n        for (uint256 i = 0; i \\u003c _beneficiaries.length; i ++ ) {\\n            require(_beneficiaries[i] != address(0), \\u0027Cant add zero address\\u0027);\\n            require(_beneficiaries[i] != address(this), \\u0027Bad idea\\u0027);\\n            RegistryShare[] storage shares = registry[_beneficiaries[i]];\\n            require(\\n                shares.length \\u003c= MAX_LOCkS_PER_BENEFICIARY, \\n                \\u0027MAX_LOCkS_PER_BENEFICIARY LIMIT\\u0027\\n            );\\n            shares.push(RegistryShare({\\n                lockIndex: lockerStorage.length - 1,\\n                sharePercent: _beneficiariesShares[i],\\n                claimedAmount: 0\\n            }));\\n            //Save beneficaries in one map for use in child conatrcts\\n            beneficiariesInLock[lockerStorage.length - 1].push(_beneficiaries[i]);\\n        }\\n\\n        \\n        IERC20 token = IERC20(_ERC20);\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n        emit NewLock(_ERC20, msg.sender, _amount, lockerStorage.length - 1);\\n\\n    }\\n\\n    /**\\n     * @dev Any _beneficiaries can claim their tokens after vesting lock time is expired.\\n     *\\n     * Requirements:\\n     *\\n     * - `_lockIndex` array index, number of lock record in  storage. For one project lock case = 0\\n     * - `_desiredAmount` amount of tokens to be unlocked. Only after vesting lock time is expired\\n     * - If now date less then vesting lock time tx will be revert\\n     */\\n    function claimTokens(uint256 _lockIndex, uint256 _desiredAmount) external {\\n        //Lets get our lockRecord by index\\n        require(_lockIndex \\u003c lockerStorage.length, \\\"Lock record not saved yet\\\");\\n        require(_desiredAmount \\u003e 0, \\\"Cant claim zero\\\");\\n        LockStorageRecord memory lock = lockerStorage[_lockIndex];\\n        (uint256 percentShares, uint256 wasClaimed) = \\n            _getUserSharePercentAndClaimedAmount(msg.sender, _lockIndex);\\n        uint256 availableAmount =\\n            _getAvailableAmountByLockIndex(_lockIndex)\\n            * percentShares / TOTAL_IN_PERCENT\\n            - wasClaimed;\\n\\n        require(_desiredAmount \\u003c= availableAmount, \\\"Insufficient for now\\\");\\n        availableAmount = _desiredAmount;\\n\\n        //update claimed amount\\n        _decreaseAvailableAmount(msg.sender, _lockIndex, availableAmount);\\n\\n        //send tokens\\n        IERC20 token = IERC20(lock.token);\\n        token.safeTransfer(msg.sender, availableAmount);\\n    }\\n\\n    \\n\\n    /**\\n     * @dev Returns array of shares for user (beneficiary).\\n     * See LockerTypes.RegistryShare description.\\n     * In case of one project this will only one record\\n     * \\n     * Requirements:\\n     *\\n     * - `_user` beneficiary address\\n     */\\n    function getUserShares(address _user) external view returns (RegistryShare[] memory) {\\n        return _getUsersShares(_user);\\n    }\\n\\n\\n    /**\\n     * @dev Returns tuple (totalBalance, available balance).\\n     * totalBalance - amount of all user shares minus already claimed\\n     * available - user balance that available for NOW, minus already claimed\\n     * -\\n     * Requirements:\\n     *\\n     * - `_user` beneficiary address\\n     * - `_lockIndex` array index, number of lock record in  storage. For one project lock case = 0\\n     */\\n    function getUserBalances(address _user, uint256 _lockIndex) external view returns (uint256, uint256) {\\n        return _getUserBalances(_user, _lockIndex);\\n    }\\n\\n    /**\\n     * @dev Returns LockStorageRecord data struture.See LockerTypes.LockStorageRecord description.\\n     * -\\n     * Requirements:\\n     *\\n     * - `_index` array index, number of lock record in  storage. For one project lock case = 0\\n     */\\n    function getLockRecordByIndex(uint256 _index) external view returns (LockStorageRecord memory){\\n        return _getLockRecordByIndex(_index);\\n    }\\n\\n    \\n    /**\\n     * @dev Returns LockStorage Record count, for iteration from app.\\n     * \\n     */\\n    function getLockCount() external view returns (uint256) {\\n        return lockerStorage.length;\\n    }\\n\\n\\n\\n    /**\\n     * @dev Just helper for array summ.\\n     * \\n     */\\n    function getArraySum(uint256[] memory _array) external pure returns (uint256) {\\n        return _getArraySum(_array);\\n    }\\n\\n    ////////////////////////////////////////////////////////////\\n    /////////// Internals           ////////////////////////////\\n    ////////////////////////////////////////////////////////////\\n    function _decreaseAvailableAmount(address user, uint256 _lockIndex, uint256 _amount) internal {\\n        RegistryShare[] storage shares = registry[user];\\n        for (uint256 i = 0; i \\u003c shares.length; i ++ ) {\\n            if  (shares[i].lockIndex == _lockIndex) {\\n                //It does not matter what record will update\\n                // with same _lockIndex. but only one!!!!\\n                shares[i].claimedAmount += _amount;\\n                break;\\n            }\\n        }\\n\\n    }\\n\\n    function _getArraySum(uint256[] memory _array) internal pure returns (uint256) {\\n        uint256 res = 0;\\n        for (uint256 i = 0; i \\u003c _array.length; i++) {\\n            res += _array[i];           \\n        }\\n        return res;\\n    }\\n\\n    function _getAvailableAmountByLockIndex(uint256 _lockIndex) \\n        internal \\n        view \\n        virtual\\n        returns(uint256)\\n    {\\n        VestingRecord[] memory v = lockerStorage[_lockIndex].vestings;\\n        uint256 res = 0;\\n        for (uint256 i = 0; i \\u003c v.length; i ++ ) {\\n            if  (v[i].unlockTime \\u003c= block.timestamp \\u0026\\u0026 !v[i].isNFT) {\\n                res += v[i].amountUnlock;\\n            }\\n        }\\n        return res;\\n    }\\n\\n\\n    function _getUserSharePercentAndClaimedAmount(address _user, uint256 _lockIndex) \\n        internal \\n        view \\n        returns(uint256 percent, uint256 claimed)\\n    {\\n        RegistryShare[] memory shares = registry[_user];\\n        for (uint256 i = 0; i \\u003c shares.length; i ++ ) {\\n            if  (shares[i].lockIndex == _lockIndex) {\\n                //We do this cycle because one address can exist\\n                //more then once in one lock\\n                percent += shares[i].sharePercent;\\n                claimed += shares[i].claimedAmount;\\n            }\\n        }\\n        return (percent, claimed);\\n    }\\n\\n    function _getUsersShares(address _user) internal view returns (RegistryShare[] memory) {\\n        return registry[_user];\\n    }\\n\\n    function _getUserBalances(address _user, uint256 _lockIndex) internal view returns (uint256, uint256) {\\n\\n        (uint256 percentShares, uint256 wasClaimed) =\\n            _getUserSharePercentAndClaimedAmount(_user, _lockIndex);\\n\\n        uint256 totalBalance =\\n        lockerStorage[_lockIndex].amount\\n        * percentShares / TOTAL_IN_PERCENT\\n        - wasClaimed;\\n\\n        uint256 available =\\n        _getAvailableAmountByLockIndex(_lockIndex)\\n        * percentShares / TOTAL_IN_PERCENT\\n        - wasClaimed;\\n\\n        return (totalBalance, available);\\n     }\\n\\n\\n    function _getVestingsByLockIndex(uint256 _index) internal view returns (VestingRecord[] memory) {\\n        VestingRecord[] memory v = _getLockRecordByIndex(_index).vestings;\\n        return v;\\n\\n    }\\n\\n    function _getLockRecordByIndex(uint256 _index) internal view returns (LockStorageRecord memory){\\n        return lockerStorage[_index];\\n    }\\n\\n}\"},\"LockerByBlock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Platinum Software Dev Team\\n// Locker  Beta  version.\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./Locker.sol\\\";\\n\\ncontract LockerByBlock is Locker {\\n\\n    function _getAvailableAmountByLockIndex(uint256 _lockIndex) \\n        internal \\n        view\\n        override  \\n        returns(uint256)\\n    {\\n        VestingRecord[] memory v = lockerStorage[_lockIndex].vestings;\\n        uint256 res = 0;\\n        for (uint256 i = 0; i \\u003c v.length; i ++ ) {\\n            if  (v[i].unlockTime \\u003c= block.number \\u0026\\u0026 !v[i].isNFT) {\\n                res += v[i].amountUnlock;\\n            }\\n        }\\n        return res;\\n    }\\n\\n}\"},\"LockerTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Base datstructures for Locker contracts set\\n * \\n */\\nabstract contract LockerTypes {\\n    //Just enum for good readability\\n    enum LockType {ERC20, LP}\\n    \\n    //Lock storage record\\n    struct  LockStorageRecord {\\n        LockType ltype;  //Most time it equal ERC20\\n        address token;   //Address of project token smart contract to lock\\n        uint256 amount;  //Lock amount for all investors/lendings\\n        VestingRecord[] vestings; //Array of vedtings records (see below)\\n    }\\n\\n    //One vesting record\\n    struct VestingRecord {\\n        uint256 unlockTime;  //only after this moment locked amount will be available\\n        uint256 amountUnlock;//after unlockTime this amount will be available for all investors according  percentage share\\n        bool isNFT; //for use with futeres lock\\n    }\\n\\n    //Investor\\u0027s share record\\n    struct RegistryShare {\\n        uint256 lockIndex;     //Array index of lock record\\n        uint256 sharePercent;  //Investors share in this lock\\n        uint256 claimedAmount; //Already claimed amount\\n    }\\n\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance \\u003e= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length \\u003e 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"name\":\"NewLock\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_BENEFICIARIES_PER_LOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOCkS_PER_BENEFICIARY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VESTING_RECORDS_PER_LOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOTAL_IN_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_desiredAmount\",\"type\":\"uint256\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_array\",\"type\":\"uint256[]\"}],\"name\":\"getArraySum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLockRecordByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"enum LockerTypes.LockType\",\"name\":\"ltype\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUnlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isNFT\",\"type\":\"bool\"}],\"internalType\":\"struct LockerTypes.VestingRecord[]\",\"name\":\"vestings\",\"type\":\"tuple[]\"}],\"internalType\":\"struct LockerTypes.LockStorageRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockIndex\",\"type\":\"uint256\"}],\"name\":\"getUserBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserShares\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lockIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct LockerTypes.RegistryShare[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ERC20\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_unlockedFrom\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_unlockAmount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_beneficiariesShares\",\"type\":\"uint256[]\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LockerByBlock","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://596b5811bd6b06faec92fbe52724693e2e2ce3b9621245a3166cdae7ca725e8f"}]}