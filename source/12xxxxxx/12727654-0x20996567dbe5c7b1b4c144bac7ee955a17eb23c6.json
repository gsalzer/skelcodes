{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts/Whitelist.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity >=0.5.0 <0.7.0;\r\n\r\ncontract Whitelist {\r\n    uint256 groupId;\r\n    address public whiteListManager;\r\n    struct WhitelistGroup {\r\n        mapping(address => bool) members;\r\n        mapping(address => bool) whitelistGroupAdmin;\r\n        bool created;\r\n    }\r\n    mapping(uint256 => WhitelistGroup) private whitelistGroups;\r\n    event GroupCreated(address, uint256);\r\n\r\n    constructor() public {\r\n        whiteListManager = msg.sender;\r\n    }\r\n\r\n    modifier onlyWhitelistManager {\r\n        require(\r\n            msg.sender == whiteListManager,\r\n            \"Only Whitelist manager can call this function.\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev Function to change the whitelist manager of Yieldster.\r\n    /// @param _manager Address of the new manager.\r\n    function changeManager(address _manager) public onlyWhitelistManager {\r\n        whiteListManager = _manager;\r\n    }\r\n\r\n    /// @dev Function that returns if a whitelist group is exist.\r\n    /// @param _groupId Group Id of the whitelist group.\r\n    function _isGroup(uint256 _groupId) private view returns (bool) {\r\n        return whitelistGroups[_groupId].created;\r\n    }\r\n\r\n    /// @dev Function that returns if the msg.sender is the whitelist group admin.\r\n    /// @param _groupId Group Id of the whitelist group.\r\n    function _isGroupAdmin(uint256 _groupId) public view returns (bool) {\r\n        return whitelistGroups[_groupId].whitelistGroupAdmin[msg.sender];\r\n    }\r\n\r\n    /// @dev Function to create a new whitelist group.\r\n    /// @param _whitelistGroupAdmin Address of the whitelist group admin.\r\n    function createGroup(address _whitelistGroupAdmin)\r\n        public\r\n        returns (uint256)\r\n    {\r\n        groupId += 1;\r\n        require(!whitelistGroups[groupId].created, \"Group already exists\");\r\n        WhitelistGroup memory newGroup = WhitelistGroup({created: true});\r\n        whitelistGroups[groupId] = newGroup;\r\n        whitelistGroups[groupId].members[_whitelistGroupAdmin] = true;\r\n        whitelistGroups[groupId].whitelistGroupAdmin[\r\n            _whitelistGroupAdmin\r\n        ] = true;\r\n        whitelistGroups[groupId].members[msg.sender] = true;\r\n        emit GroupCreated(msg.sender, groupId);\r\n        return groupId;\r\n    }\r\n\r\n    /// @dev Function to delete a whitelist group.\r\n    /// @param _groupId Group Id of the whitelist group.\r\n    function deleteGroup(uint256 _groupId) public {\r\n        require(_isGroup(_groupId), \"Group doesn't exist!\");\r\n        require(\r\n            _isGroupAdmin(_groupId),\r\n            \"Only Whitelist Group admin is permitted for this operation\"\r\n        );\r\n        delete whitelistGroups[_groupId];\r\n    }\r\n\r\n    /// @dev Function to add members to a whitelist group.\r\n    /// @param _groupId Group Id of the whitelist group.\r\n    /// @param _memberAddress List of address to be added to the whitelist group.\r\n    function addMembersToGroup(\r\n        uint256 _groupId,\r\n        address[] memory _memberAddress\r\n    ) public {\r\n        require(_isGroup(_groupId), \"Group doesn't exist!\");\r\n        require(\r\n            _isGroupAdmin(_groupId),\r\n            \"Only goup admin is permitted for this operation\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < _memberAddress.length; i++) {\r\n            whitelistGroups[_groupId].members[_memberAddress[i]] = true;\r\n        }\r\n    }\r\n\r\n    /// @dev Function to remove members from a whitelist group.\r\n    /// @param _groupId Group Id of the whitelist group.\r\n    /// @param _memberAddress List of address to be removed from the whitelist group.\r\n    function removeMembersFromGroup(\r\n        uint256 _groupId,\r\n        address[] memory _memberAddress\r\n    ) public {\r\n        require(_isGroup(_groupId), \"Group doesn't exist!\");\r\n        require(\r\n            _isGroupAdmin(_groupId),\r\n            \"Only Whitelist Group admin is permitted for this operation\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < _memberAddress.length; i++) {\r\n            whitelistGroups[_groupId].members[_memberAddress[i]] = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Function to check if an address is a whitelisted address.\r\n    /// @param _groupId Group Id of the whitelist group.\r\n    /// @param _memberAddress Address to check.\r\n    function isMember(uint256 _groupId, address _memberAddress)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        require(_isGroup(_groupId), \"Group doesn't exist!\");\r\n        return whitelistGroups[_groupId].members[_memberAddress];\r\n    }\r\n\r\n    // /// @dev Function that returns the address of the whitelist group admin.\r\n    // /// @param _groupId Group Id of the whitelist group.\r\n    // function getWhitelistAdmin(uint256 _groupId) public view returns (address) {\r\n    //     require(_isGroup(_groupId), \"Group doesn't exist!\");\r\n    //     return whitelistGroups[_groupId].whitelistGroupAdmin;\r\n    // }\r\n\r\n    /// @dev Function to add the whitelist admin of a group.\r\n    /// @param _groupId Group Id of the whitelist group.\r\n    /// @param _whitelistGroupAdmin Address of the new whitelist admin.\r\n    function addWhitelistAdmin(uint256 _groupId, address _whitelistGroupAdmin)\r\n        public\r\n    {\r\n        require(_isGroup(_groupId), \"Group doesn't exist!\");\r\n        require(\r\n            _isGroupAdmin(_groupId),\r\n            \"Only existing whitelist admin can perform this operation\"\r\n        );\r\n        whitelistGroups[_groupId].whitelistGroupAdmin[\r\n            _whitelistGroupAdmin\r\n        ] = true;\r\n    }\r\n\r\n    function removeWhitelistAdmin(\r\n        uint256 _groupId,\r\n        address _whitelistGroupAdmin\r\n    ) public {\r\n        require(_isGroup(_groupId), \"Group doesn't exist!\");\r\n        require(_whitelistGroupAdmin != msg.sender, \"Cannot remove yourself\");\r\n        require(\r\n            _isGroupAdmin(_groupId),\r\n            \"Only existing whitelist admin can perform this operation\"\r\n        );\r\n        delete whitelistGroups[_groupId].whitelistGroupAdmin[\r\n            _whitelistGroupAdmin\r\n        ];\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"GroupCreated\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"_isGroupAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_memberAddress\",\"type\":\"address[]\"}],\"name\":\"addMembersToGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_whitelistGroupAdmin\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"changeManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_whitelistGroupAdmin\",\"type\":\"address\"}],\"name\":\"createGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"}],\"name\":\"deleteGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_memberAddress\",\"type\":\"address[]\"}],\"name\":\"removeMembersFromGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_whitelistGroupAdmin\",\"type\":\"address\"}],\"name\":\"removeWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whiteListManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Whitelist","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://dc6fdaea31f0122bbdde1a57035805a7e76273a976f7dd1f435083a54768ed97"}]}