{"status":"1","message":"OK","result":[{"SourceCode":"{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// File @openzeppelin/contracts/utils/Context.sol@v4.0.0\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.0.0\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n}\\r\\n\"},\"TokenFees.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n// ALL RIGHTS RESERVED\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ninterface ITokenFees {\\r\\n    function getFlatFee() view external returns(uint256);\\r\\n    function setFlatFee(uint _tokenFee) external;\\r\\n\\r\\n    function getTotalSupplyFee() view external returns(uint256);\\r\\n    function setTotalSupplyFee(uint _tokenFee) external;\\r\\n    \\r\\n    function getTokenFeeAddress() view external returns(address);\\r\\n    function setTokenFeeAddress(address payable _tokenFeeAddress) external;\\r\\n}\\r\\n\\r\\ncontract TokenFees is Ownable{\\r\\n    \\r\\n    struct Settings {\\r\\n        uint256 FLAT_FEE;\\r\\n        uint256 TS_FEE; // totalSupply fee\\r\\n        address payable TOKEN_FEE_ADDRESS;\\r\\n    }\\r\\n    \\r\\n    Settings public SETTINGS;\\r\\n    \\r\\n    constructor() {\\r\\n        SETTINGS.FLAT_FEE = 1e18;\\r\\n        SETTINGS.TS_FEE = 2;\\r\\n        SETTINGS.TOKEN_FEE_ADDRESS = payable(0xAA3d85aD9D128DFECb55424085754F6dFa643eb1);\\r\\n    }\\r\\n    \\r\\n    function getFlatFee() view external returns(uint256) {\\r\\n        return SETTINGS.FLAT_FEE;\\r\\n    }\\r\\n    \\r\\n    function setFlatFee(uint _flatFee) external onlyOwner {\\r\\n        SETTINGS.FLAT_FEE = _flatFee;\\r\\n    }\\r\\n\\r\\n    function getTotalSupplyFee() view external returns(uint256) {\\r\\n        return SETTINGS.TS_FEE;\\r\\n    }\\r\\n    \\r\\n    function setTotalSupplyFee(uint _tsFee) external onlyOwner {\\r\\n        SETTINGS.TS_FEE = _tsFee;\\r\\n    }\\r\\n    \\r\\n    function getTokenFeeAddress() view external returns(address) {\\r\\n        return SETTINGS.TOKEN_FEE_ADDRESS;\\r\\n    }\\r\\n    \\r\\n    function setTokenFeeAddress(address payable _tokenFeeAddress) external onlyOwner {\\r\\n        SETTINGS.TOKEN_FEE_ADDRESS = _tokenFeeAddress;\\r\\n    }\\r\\n} \"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SETTINGS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"FLAT_FEE\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"TS_FEE\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"TOKEN_FEE_ADDRESS\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlatFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSupplyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_flatFee\",\"type\":\"uint256\"}],\"name\":\"setFlatFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_tokenFeeAddress\",\"type\":\"address\"}],\"name\":\"setTokenFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tsFee\",\"type\":\"uint256\"}],\"name\":\"setTotalSupplyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenFees","CompilerVersion":"v0.8.1+commit.df193b15","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://16c8eecd4415d683352edda9c1296cd146bafe88e2980d6545105d57591a24a2"}]}