{"status":"1","message":"OK","result":[{"SourceCode":"// File: contracts\\lib\\IERC20.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.8.3;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\lib\\TransferHelper.sol\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n// File: contracts\\interface\\INestMapping.sol\r\n\r\n/// @dev The interface defines methods for nest builtin contract address mapping\r\ninterface INestMapping {\r\n\r\n    /// @dev Set the built-in contract address of the system\r\n    /// @param nestTokenAddress Address of nest token contract\r\n    /// @param nestNodeAddress Address of nest node contract\r\n    /// @param nestLedgerAddress INestLedger implementation contract address\r\n    /// @param nestMiningAddress INestMining implementation contract address for nest\r\n    /// @param ntokenMiningAddress INestMining implementation contract address for ntoken\r\n    /// @param nestPriceFacadeAddress INestPriceFacade implementation contract address\r\n    /// @param nestVoteAddress INestVote implementation contract address\r\n    /// @param nestQueryAddress INestQuery implementation contract address\r\n    /// @param nnIncomeAddress NNIncome contract address\r\n    /// @param nTokenControllerAddress INTokenController implementation contract address\r\n    function setBuiltinAddress(\r\n        address nestTokenAddress,\r\n        address nestNodeAddress,\r\n        address nestLedgerAddress,\r\n        address nestMiningAddress,\r\n        address ntokenMiningAddress,\r\n        address nestPriceFacadeAddress,\r\n        address nestVoteAddress,\r\n        address nestQueryAddress,\r\n        address nnIncomeAddress,\r\n        address nTokenControllerAddress\r\n    ) external;\r\n\r\n    /// @dev Get the built-in contract address of the system\r\n    /// @return nestTokenAddress Address of nest token contract\r\n    /// @return nestNodeAddress Address of nest node contract\r\n    /// @return nestLedgerAddress INestLedger implementation contract address\r\n    /// @return nestMiningAddress INestMining implementation contract address for nest\r\n    /// @return ntokenMiningAddress INestMining implementation contract address for ntoken\r\n    /// @return nestPriceFacadeAddress INestPriceFacade implementation contract address\r\n    /// @return nestVoteAddress INestVote implementation contract address\r\n    /// @return nestQueryAddress INestQuery implementation contract address\r\n    /// @return nnIncomeAddress NNIncome contract address\r\n    /// @return nTokenControllerAddress INTokenController implementation contract address\r\n    function getBuiltinAddress() external view returns (\r\n        address nestTokenAddress,\r\n        address nestNodeAddress,\r\n        address nestLedgerAddress,\r\n        address nestMiningAddress,\r\n        address ntokenMiningAddress,\r\n        address nestPriceFacadeAddress,\r\n        address nestVoteAddress,\r\n        address nestQueryAddress,\r\n        address nnIncomeAddress,\r\n        address nTokenControllerAddress\r\n    );\r\n\r\n    /// @dev Get address of nest token contract\r\n    /// @return Address of nest token contract\r\n    function getNestTokenAddress() external view returns (address);\r\n\r\n    /// @dev Get address of nest node contract\r\n    /// @return Address of nest node contract\r\n    function getNestNodeAddress() external view returns (address);\r\n\r\n    /// @dev Get INestLedger implementation contract address\r\n    /// @return INestLedger implementation contract address\r\n    function getNestLedgerAddress() external view returns (address);\r\n\r\n    /// @dev Get INestMining implementation contract address for nest\r\n    /// @return INestMining implementation contract address for nest\r\n    function getNestMiningAddress() external view returns (address);\r\n\r\n    /// @dev Get INestMining implementation contract address for ntoken\r\n    /// @return INestMining implementation contract address for ntoken\r\n    function getNTokenMiningAddress() external view returns (address);\r\n\r\n    /// @dev Get INestPriceFacade implementation contract address\r\n    /// @return INestPriceFacade implementation contract address\r\n    function getNestPriceFacadeAddress() external view returns (address);\r\n\r\n    /// @dev Get INestVote implementation contract address\r\n    /// @return INestVote implementation contract address\r\n    function getNestVoteAddress() external view returns (address);\r\n\r\n    /// @dev Get INestQuery implementation contract address\r\n    /// @return INestQuery implementation contract address\r\n    function getNestQueryAddress() external view returns (address);\r\n\r\n    /// @dev Get NNIncome contract address\r\n    /// @return NNIncome contract address\r\n    function getNnIncomeAddress() external view returns (address);\r\n\r\n    /// @dev Get INTokenController implementation contract address\r\n    /// @return INTokenController implementation contract address\r\n    function getNTokenControllerAddress() external view returns (address);\r\n\r\n    /// @dev Registered address. The address registered here is the address accepted by nest system\r\n    /// @param key The key\r\n    /// @param addr Destination address. 0 means to delete the registration information\r\n    function registerAddress(string memory key, address addr) external;\r\n\r\n    /// @dev Get registered address\r\n    /// @param key The key\r\n    /// @return Destination address. 0 means empty\r\n    function checkAddress(string memory key) external view returns (address);\r\n}\r\n\r\n// File: contracts\\interface\\INestGovernance.sol\r\n\r\n/// @dev This interface defines the governance methods\r\ninterface INestGovernance is INestMapping {\r\n\r\n    /// @dev Set governance authority\r\n    /// @param addr Destination address\r\n    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function setGovernance(address addr, uint flag) external;\r\n\r\n    /// @dev Get governance rights\r\n    /// @param addr Destination address\r\n    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \r\n    ///        implemented in the current system, only the difference between authorized and unauthorized. \r\n    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\r\n    function getGovernance(address addr) external view returns (uint);\r\n\r\n    /// @dev Check whether the target address has governance rights for the given target\r\n    /// @param addr Destination address\r\n    /// @param flag Permission weight. The permission of the target address must be greater than this weight to pass the check\r\n    /// @return True indicates permission\r\n    function checkGovernance(address addr, uint flag) external view returns (bool);\r\n}\r\n\r\n// File: contracts\\interface\\INestLedger.sol\r\n\r\n/// @dev This interface defines the nest ledger methods\r\ninterface INestLedger {\r\n\r\n    /// @dev Application Flag Changed event\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    event ApplicationChanged(address addr, uint flag);\r\n    \r\n    /// @dev Configuration structure of nest ledger contract\r\n    struct Config {\r\n        \r\n        // nest reward scale(10000 based). 2000\r\n        uint16 nestRewardScale;\r\n\r\n        // // ntoken reward scale(10000 based). 8000\r\n        // uint16 ntokenRewardScale;\r\n    }\r\n    \r\n    /// @dev Modify configuration\r\n    /// @param config Configuration object\r\n    function setConfig(Config memory config) external;\r\n\r\n    /// @dev Get configuration\r\n    /// @return Configuration object\r\n    function getConfig() external view returns (Config memory);\r\n\r\n    /// @dev Set DAO application\r\n    /// @param addr DAO application contract address\r\n    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function setApplication(address addr, uint flag) external;\r\n\r\n    /// @dev Check DAO application flag\r\n    /// @param addr DAO application contract address\r\n    /// @return Authorization flag, 1 means authorization, 0 means cancel authorization\r\n    function checkApplication(address addr) external view returns (uint);\r\n\r\n    /// @dev Carve reward\r\n    /// @param ntokenAddress Destination ntoken address\r\n    function carveETHReward(address ntokenAddress) external payable;\r\n\r\n    /// @dev Add reward\r\n    /// @param ntokenAddress Destination ntoken address\r\n    function addETHReward(address ntokenAddress) external payable;\r\n\r\n    /// @dev The function returns eth rewards of specified ntoken\r\n    /// @param ntokenAddress The ntoken address\r\n    function totalETHRewards(address ntokenAddress) external view returns (uint);\r\n\r\n    /// @dev Pay\r\n    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to pay with\r\n    /// @param tokenAddress Token address of receiving funds (0 means ETH)\r\n    /// @param to Address to receive\r\n    /// @param value Amount to receive\r\n    function pay(address ntokenAddress, address tokenAddress, address to, uint value) external;\r\n\r\n    /// @dev Settlement\r\n    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to settle with\r\n    /// @param tokenAddress Token address of receiving funds (0 means ETH)\r\n    /// @param to Address to receive\r\n    /// @param value Amount to receive\r\n    function settle(address ntokenAddress, address tokenAddress, address to, uint value) external payable;\r\n}\r\n\r\n// File: contracts\\NestBase.sol\r\n\r\n/// @dev Base contract of nest\r\ncontract NestBase {\r\n\r\n    // Address of nest token contract\r\n    address constant NEST_TOKEN_ADDRESS = 0x04abEdA201850aC0124161F037Efd70c74ddC74C;\r\n\r\n    // Genesis block number of nest\r\n    // NEST token contract is created at block height 6913517. However, because the mining algorithm of nest1.0\r\n    // is different from that at present, a new mining algorithm is adopted from nest2.0. The new algorithm\r\n    // includes the attenuation logic according to the block. Therefore, it is necessary to trace the block\r\n    // where the nest begins to decay. According to the circulation when nest2.0 is online, the new mining\r\n    // algorithm is used to deduce and convert the nest, and the new algorithm is used to mine the nest2.0\r\n    // on-line flow, the actual block is 5120000\r\n    uint constant NEST_GENESIS_BLOCK = 5120000;\r\n\r\n    /// @dev To support open-zeppelin/upgrades\r\n    /// @param nestGovernanceAddress INestGovernance implementation contract address\r\n    function initialize(address nestGovernanceAddress) virtual public {\r\n        require(_governance == address(0), 'NEST:!initialize');\r\n        _governance = nestGovernanceAddress;\r\n    }\r\n\r\n    /// @dev INestGovernance implementation contract address\r\n    address public _governance;\r\n\r\n    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \r\n    ///      super.update(nestGovernanceAddress) when overriding, and override method without onlyGovernance\r\n    /// @param nestGovernanceAddress INestGovernance implementation contract address\r\n    function update(address nestGovernanceAddress) virtual public {\r\n\r\n        address governance = _governance;\r\n        require(governance == msg.sender || INestGovernance(governance).checkGovernance(msg.sender, 0), \"NEST:!gov\");\r\n        _governance = nestGovernanceAddress;\r\n    }\r\n\r\n    /// @dev Migrate funds from current contract to NestLedger\r\n    /// @param tokenAddress Destination token address.(0 means eth)\r\n    /// @param value Migrate amount\r\n    function migrate(address tokenAddress, uint value) external onlyGovernance {\r\n\r\n        address to = INestGovernance(_governance).getNestLedgerAddress();\r\n        if (tokenAddress == address(0)) {\r\n            INestLedger(to).addETHReward { value: value } (address(0));\r\n        } else {\r\n            TransferHelper.safeTransfer(tokenAddress, to, value);\r\n        }\r\n    }\r\n\r\n    //---------modifier------------\r\n\r\n    modifier onlyGovernance() {\r\n        require(INestGovernance(_governance).checkGovernance(msg.sender, 0), \"NEST:!gov\");\r\n        _;\r\n    }\r\n\r\n    modifier noContract() {\r\n        require(msg.sender == tx.origin, \"NEST:!contract\");\r\n        _;\r\n    }\r\n}\r\n\r\n// File: contracts\\interface\\INNIncome.sol\r\n\r\n/// @dev This interface defines the methods for NNIncome\r\ninterface INNIncome {\r\n\r\n    /// @dev Reset the blockCursor\r\n    /// @param blockCursor blockCursor value\r\n    function setBlockCursor(uint blockCursor) external;\r\n    \r\n    /// @dev Nest node transfer settlement. This method is triggered during nest node transfer and must be called by nest node contract\r\n    /// @param from Transfer from address\r\n    /// @param to Transfer to address\r\n    function settle(address from, address to) external;\r\n\r\n    /// @dev Claim nest\r\n    function claim() external;\r\n\r\n    /// @dev Calculation of ore drawing increment\r\n    /// @return Ore drawing increment\r\n    function increment() external view returns (uint);\r\n\r\n    /// @dev Query the current available nest\r\n    /// @param owner Destination address\r\n    /// @return Number of nest currently available\r\n    function earned(address owner) external view returns (uint);\r\n\r\n    /// @dev Get generatedNest value\r\n    /// @return GeneratedNest value\r\n    function getGeneratedNest() external view returns (uint);\r\n\r\n    /// @dev Get blockCursor value\r\n    /// @return blockCursor value\r\n    function getBlockCursor() external view returns (uint);\r\n}\r\n\r\n// File: contracts\\NNIncome.sol\r\n\r\n/// @dev NestNode mining contract\r\ncontract NNIncome is NestBase, INNIncome {\r\n\r\n    // /// @param nestNodeAddress Address of nest node contract\r\n    // /// @param nestTokenAddress Address of nest token contract\r\n    // /// @param nestGenesisBlock Genesis block number of nest\r\n    // constructor(address nestNodeAddress, address nestTokenAddress, uint nestGenesisBlock) {\r\n        \r\n    //     NEST_NODE_ADDRESS = nestNodeAddress;\r\n    //     NEST_TOKEN_ADDRESS = nestTokenAddress;\r\n    //     NEST_GENESIS_BLOCK = nestGenesisBlock;\r\n\r\n    //     _blockCursor = block.number;\r\n    // }\r\n\r\n    // /// @dev To support open-zeppelin/upgrades\r\n    // /// @param nestGovernanceAddress INestGovernance implementation contract address\r\n    // function initialize(address nestGovernanceAddress) override public {\r\n    //     super.initialize(nestGovernanceAddress);\r\n    // }\r\n\r\n    /// @dev Reset the blockCursor\r\n    /// @param blockCursor blockCursor value\r\n    function setBlockCursor(uint blockCursor) override external onlyGovernance {\r\n        _blockCursor = blockCursor;\r\n    }\r\n\r\n    // Total supply of nest node\r\n    uint constant NEST_NODE_TOTALSUPPLY = 1500;\r\n\r\n    // Address of nest node contract\r\n    address constant NEST_NODE_ADDRESS = 0xC028E81e11F374f7c1A3bE6b8D2a815fa3E96E6e;\r\n\r\n    // Generated nest\r\n    uint _generatedNest;\r\n    \r\n    // Latest block number of operationed\r\n    uint _blockCursor;\r\n\r\n    // Personal ledger\r\n    mapping(address=>uint) _infoMapping;\r\n\r\n    //---------transaction---------\r\n\r\n    /// @dev Nest node transfer settlement. This method is triggered during nest node transfer and must be called by nest node contract\r\n    /// @param from Transfer from address\r\n    /// @param to Transfer to address\r\n    function nodeCount(address from, address to) external {\r\n        settle(from, to);\r\n    }\r\n\r\n    /// @dev Nest node transfer settlement. This method is triggered during nest node transfer and must be called by nest node contract\r\n    /// @param from Transfer from address\r\n    /// @param to Transfer to address\r\n    function settle(address from, address to) override public {\r\n\r\n        require(msg.sender == NEST_NODE_ADDRESS, \"NNIncome:!nestNode\");\r\n        \r\n        // Check balance\r\n        IERC20 nn = IERC20(NEST_NODE_ADDRESS);\r\n        uint balanceFrom = nn.balanceOf(from);\r\n        require(balanceFrom > 0, \"NNIncome:!balance\");\r\n\r\n        // Calculation of ore drawing increment\r\n        uint generatedNest = _generatedNest = _generatedNest + increment();\r\n\r\n        // Update latest block number of operationed\r\n        _blockCursor = block.number;\r\n\r\n        mapping(address=>uint) storage infoMapping = _infoMapping;\r\n        // Calculation mining amount for (from)\r\n        uint thisAmountFrom = (generatedNest - infoMapping[from]) * balanceFrom / NEST_NODE_TOTALSUPPLY;\r\n        infoMapping[from] = generatedNest;\r\n\r\n        if (thisAmountFrom > 0) {\r\n            require(IERC20(NEST_TOKEN_ADDRESS).transfer(from, thisAmountFrom), \"NNIncome:!transfer from\");\r\n        }\r\n\r\n        // Calculation mining amount for (to)\r\n        uint balanceTo = nn.balanceOf(to);\r\n        if (balanceTo > 0) {\r\n            uint thisAmountTo = (generatedNest - infoMapping[to]) * balanceTo / NEST_NODE_TOTALSUPPLY;\r\n            infoMapping[to] = generatedNest;\r\n\r\n            if (thisAmountTo > 0) {\r\n                require(IERC20(NEST_TOKEN_ADDRESS).transfer(to, thisAmountTo), \"NNIncome:!transfer to\");\r\n            }\r\n        } else {\r\n            infoMapping[to] = generatedNest;\r\n        }\r\n    }\r\n\r\n    /// @dev Claim nest\r\n    function claim() override external noContract {\r\n        \r\n        // Check balance\r\n        IERC20 nn = IERC20(NEST_NODE_ADDRESS);\r\n        uint balance = nn.balanceOf(msg.sender);\r\n        require(balance > 0, \"NNIncome:!balance\");\r\n\r\n        // Calculation of ore drawing increment\r\n        uint generatedNest = _generatedNest = _generatedNest + increment();\r\n\r\n        // Update latest block number of operationed\r\n        _blockCursor = block.number;\r\n\r\n        // Calculation for current mining\r\n        uint thisAmount = (generatedNest - _infoMapping[msg.sender]) * balance / NEST_NODE_TOTALSUPPLY;\r\n\r\n        _infoMapping[msg.sender] = generatedNest;\r\n\r\n        require(IERC20(NEST_TOKEN_ADDRESS).transfer(msg.sender, thisAmount), \"NNIncome:!transfer\");\r\n    }\r\n\r\n    //---------view----------------\r\n\r\n    /// @dev Calculation of ore drawing increment\r\n    /// @return Ore drawing increment\r\n    function increment() override public view returns (uint) {\r\n        //return _redution(block.number - NEST_GENESIS_BLOCK) * (block.number - _blockCursor) * 15 ether / 100;\r\n        return _redution(block.number - NEST_GENESIS_BLOCK) * (block.number - _blockCursor) * 0.15 ether;\r\n    }\r\n\r\n    /// @dev Query the current available nest\r\n    /// @param owner Destination address\r\n    /// @return Number of nest currently available\r\n    function earned(address owner) override external view returns (uint) {\r\n        uint balance = IERC20(NEST_NODE_ADDRESS).balanceOf(owner);\r\n        return (_generatedNest + increment() - _infoMapping[owner]) * balance / NEST_NODE_TOTALSUPPLY;\r\n    }\r\n\r\n    /// @dev Get generatedNest value\r\n    /// @return GeneratedNest value\r\n    function getGeneratedNest() override external view returns (uint) {\r\n        return _generatedNest;\r\n    }\r\n\r\n    /// @dev Get blockCursor value\r\n    /// @return blockCursor value\r\n    function getBlockCursor() override external view returns (uint) {\r\n        return _blockCursor;\r\n    }\r\n\r\n    // Nest ore drawing attenuation interval. 2400000 blocks, about one year\r\n    uint constant NEST_REDUCTION_SPAN = 2400000;\r\n    // The decay limit of nest ore drawing becomes stable after exceeding this interval. 24 million blocks, about 10 years\r\n    uint constant NEST_REDUCTION_LIMIT = 24000000; // NEST_REDUCTION_SPAN * 10;\r\n    // Attenuation gradient array, each attenuation step value occupies 16 bits. The attenuation value is an integer\r\n    uint constant NEST_REDUCTION_STEPS = 0x280035004300530068008300A300CC010001400190;\r\n        // 0\r\n        // | (uint(400 / uint(1)) << (16 * 0))\r\n        // | (uint(400 * 8 / uint(10)) << (16 * 1))\r\n        // | (uint(400 * 8 * 8 / uint(10 * 10)) << (16 * 2))\r\n        // | (uint(400 * 8 * 8 * 8 / uint(10 * 10 * 10)) << (16 * 3))\r\n        // | (uint(400 * 8 * 8 * 8 * 8 / uint(10 * 10 * 10 * 10)) << (16 * 4))\r\n        // | (uint(400 * 8 * 8 * 8 * 8 * 8 / uint(10 * 10 * 10 * 10 * 10)) << (16 * 5))\r\n        // | (uint(400 * 8 * 8 * 8 * 8 * 8 * 8 / uint(10 * 10 * 10 * 10 * 10 * 10)) << (16 * 6))\r\n        // | (uint(400 * 8 * 8 * 8 * 8 * 8 * 8 * 8 / uint(10 * 10 * 10 * 10 * 10 * 10 * 10)) << (16 * 7))\r\n        // | (uint(400 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 / uint(10 * 10 * 10 * 10 * 10 * 10 * 10 * 10)) << (16 * 8))\r\n        // | (uint(400 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 / uint(10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10)) << (16 * 9))\r\n        // //| (uint(400 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 * 8 / uint(10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10)) << (16 * 10));\r\n        // | (uint(40) << (16 * 10));\r\n\r\n    // Calculation of attenuation gradient\r\n    function _redution(uint delta) private pure returns (uint) {\r\n        \r\n        if (delta < NEST_REDUCTION_LIMIT) {\r\n            return (NEST_REDUCTION_STEPS >> ((delta / NEST_REDUCTION_SPAN) << 4)) & 0xFFFF;\r\n        }\r\n        return (NEST_REDUCTION_STEPS >> 160) & 0xFFFF;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"_governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockCursor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGeneratedNest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nestGovernanceAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"nodeCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockCursor\",\"type\":\"uint256\"}],\"name\":\"setBlockCursor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nestGovernanceAddress\",\"type\":\"address\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NNIncome","CompilerVersion":"v0.8.3+commit.8d00100c","OptimizationUsed":"1","Runs":"256","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5321f064032f93ebff5ed7a1c89bec3240a7704b0a001adf4c15617ea96f6b37"}]}