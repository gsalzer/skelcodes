{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity 0.6.12;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\n\r\n// File: contracts/GSN/Context.sol\r\n// SPDX-License-Identifier: MIT\r\n// File: contracts/token/ERC20/IERC20.sol\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/utils/Address.sol\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20/ERC20.sol\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface UniswapRouterV2 {\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n}\r\n\r\ninterface IController {\r\n    function vaults(address) external view returns (address);\r\n\r\n    function devfund() external view returns (address);\r\n\r\n    function treasury() external view returns (address);\r\n\r\n}\r\n\r\ninterface IUnitVaultParameters{\r\n\tfunction tokenDebtLimit(address asset) external view returns (uint);\r\n}\r\n\r\ninterface IUnitVault{\r\n\tfunction calculateFee(address asset, address user, uint amount) external view returns (uint);\r\n\tfunction getTotalDebt(address asset, address user) external view returns (uint);\r\n\tfunction debts(address asset, address user) external view returns (uint);\r\n\tfunction collaterals(address asset, address user) external view returns (uint);\r\n\tfunction tokenDebts(address asset) external view returns (uint);\r\n}\r\n\r\ninterface IUnitCDPManager {\r\n\tfunction exit(address asset, uint assetAmount, uint usdpAmount) external returns (uint);\r\n\tfunction join(address asset, uint assetAmount, uint usdpAmount) external;\r\n}\r\n\r\ninterface IMasterchef {\r\n    function notifyBuybackReward(uint256 _amount) external;\r\n}\r\n\r\ninterface ICurveFi_2 {\r\n    function get_virtual_price() external view returns (uint256);\r\n\t\r\n    function calc_token_amount(uint256[2] calldata amounts, bool deposit) external view returns (uint256);\r\n\t\r\n    function remove_liquidity_one_coin(uint256 _token_amount, int128 i, uint256 min_amount) external;\r\n \r\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\r\n}\r\n\r\ninterface ICurveGauge {\r\n    function deposit(uint256 _value) external;\r\n\r\n    function deposit(uint256 _value, address addr) external;\r\n\r\n    function balanceOf(address arg0) external view returns (uint256);\r\n\r\n    function withdraw(uint256 _value) external;\r\n\r\n    function withdraw(uint256 _value, bool claim_rewards) external;\r\n\r\n    function claim_rewards() external;\r\n\r\n    function claim_rewards(address addr) external;\r\n\r\n    function claimable_tokens(address addr) external returns (uint256);\r\n\r\n    function claimable_reward(address addr) external view returns (uint256);\r\n\r\n    function integrate_fraction(address arg0) external view returns (uint256);\r\n}\r\n\r\ninterface ICurveMintr {\r\n    function mint(address) external;\r\n\r\n    function minted(address arg0, address arg1) external view returns (uint256);\r\n}\r\n\r\ninterface IUniswapV2SlidingOracle {\r\n    function current(\r\n        address tokenIn,\r\n        uint256 amountIn,\r\n        address tokenOut\r\n    ) external view returns (uint256);\r\n    function work() external;\r\n    function updatePair(address pair) external;\r\n    function observationLength(address pair) external view returns (uint);\r\n    function lastObservation(address pair) external view returns (uint timestamp, uint price0Cumulative, uint price1Cumulative);\r\n    function observations(address pair, uint256 idx) external view returns (uint timestamp, uint price0Cumulative, uint price1Cumulative);\r\n}\r\n\r\n// Strategy Contract Basics\r\nabstract contract StrategyBase {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    // Perfomance fee 30% to buyback\r\n    uint256 public performanceFee = 30000;\r\n    uint256 public constant performanceMax = 100000;\r\n\r\n    // Withdrawal fee 0.2% to buyback\r\n    // - 0.14% to treasury\r\n    // - 0.06% to dev fund\r\n    uint256 public treasuryFee = 140;\r\n    uint256 public constant treasuryMax = 100000;\r\n\r\n    uint256 public devFundFee = 60;\r\n    uint256 public constant devFundMax = 100000;\r\n\r\n    // delay yield profit realization\r\n    uint256 public delayBlockRequired = 1000;\r\n    uint256 public lastHarvestBlock;\r\n    uint256 public lastHarvestInWant;\r\n\r\n    // buyback ready\r\n    bool public buybackEnabled = true;\r\n    address public mmToken = 0xa283aA7CfBB27EF0cfBcb2493dD9F4330E0fd304;\r\n    address public masterChef = 0xf8873a6080e8dbF41ADa900498DE0951074af577;\r\n\r\n    //curve rewards\r\n    address public crv = 0xD533a949740bb3306d119CC777fa900bA034cd52;\r\n\r\n    // Tokens\r\n    address public want;\r\n    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    // buyback coins\r\n    address public constant usdcBuyback = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address public constant zrxBuyback = 0xE41d2489571d322189246DaFA5ebDe1F4699F498;\r\n\r\n    // User accounts\r\n    address public governance;\r\n    address public controller;\r\n    address public strategist;\r\n    address public timelock;\r\n\r\n    // Dex\r\n    address public univ2Router2 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    //Sushi\r\n    address constant public sushiRouter = address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\r\n\r\n    constructor(\r\n        address _want,\r\n        address _governance,\r\n        address _strategist,\r\n        address _controller,\r\n        address _timelock\r\n    ) public {\r\n        require(_want != address(0));\r\n        require(_governance != address(0));\r\n        require(_strategist != address(0));\r\n        require(_controller != address(0));\r\n        require(_timelock != address(0));\r\n\r\n        want = _want;\r\n        governance = _governance;\r\n        strategist = _strategist;\r\n        controller = _controller;\r\n        timelock = _timelock;\r\n    }\r\n\r\n    // **** Modifiers **** //\r\n\r\n    modifier onlyBenevolent {\r\n        require(\r\n            msg.sender == tx.origin ||\r\n                msg.sender == governance ||\r\n                msg.sender == strategist\r\n        );\r\n        _;\r\n    }\r\n\r\n    // **** Views **** //\r\n\r\n    function balanceOfWant() public view returns (uint256) {\r\n        return IERC20(want).balanceOf(address(this));\r\n    }\r\n\r\n    function balanceOfPool() public virtual view returns (uint256);\r\n\r\n    function balanceOf() public view returns (uint256) {\r\n        uint256 delayReduction;\r\n        uint256 currentBlock = block.number;\r\n        if (delayBlockRequired > 0 && lastHarvestInWant > 0 && currentBlock.sub(lastHarvestBlock) < delayBlockRequired){\r\n            uint256 diffBlock = lastHarvestBlock.add(delayBlockRequired).sub(currentBlock);\r\n            delayReduction = lastHarvestInWant.mul(diffBlock).mul(1e18).div(delayBlockRequired).div(1e18);\r\n        }\r\n        return balanceOfWant().add(balanceOfPool()).sub(delayReduction);\r\n    }\r\n\r\n    function getName() external virtual pure returns (string memory);\r\n\r\n    // **** Setters **** //\r\n\r\n    function setDelayBlockRequired(uint256 _delayBlockRequired) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        delayBlockRequired = _delayBlockRequired;\r\n    }\r\n\r\n    function setDevFundFee(uint256 _devFundFee) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        devFundFee = _devFundFee;\r\n    }\r\n\r\n    function setTreasuryFee(uint256 _treasuryFee) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        treasuryFee = _treasuryFee;\r\n    }\r\n\r\n    function setPerformanceFee(uint256 _performanceFee) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        performanceFee = _performanceFee;\r\n    }\r\n\r\n    function setStrategist(address _strategist) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        strategist = _strategist;\r\n    }\r\n\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n\r\n    function setTimelock(address _timelock) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        timelock = _timelock;\r\n    }\r\n\r\n    function setController(address _controller) external {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        controller = _controller;\r\n    }\r\n\r\n    function setMmToken(address _mmToken) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        mmToken = _mmToken;\r\n    }\r\n\r\n    function setBuybackEnabled(bool _buybackEnabled) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        buybackEnabled = _buybackEnabled;\r\n    }\r\n\r\n    function setMasterChef(address _masterChef) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        masterChef = _masterChef;\r\n    }\r\n\r\n    // **** State mutations **** //\r\n    function deposit() public virtual;\r\n\r\n    function withdraw(IERC20 _asset) external virtual returns (uint256 balance);\r\n\r\n    // Controller only function for creating additional rewards from dust\r\n    function _withdrawNonWantAsset(IERC20 _asset) internal returns (uint256 balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        require(want != address(_asset), \"want\");\r\n        balance = _asset.balanceOf(address(this));\r\n        _asset.safeTransfer(controller, balance);\r\n    }\r\n\r\n    // Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdraw(uint256 _amount) external {\r\n        require(msg.sender == controller, \"!controller\");\r\n        uint256 _balance = IERC20(want).balanceOf(address(this));\r\n        if (_balance < _amount) {\r\n            _amount = _withdrawSome(_amount.sub(_balance));\r\n            _amount = _amount.add(_balance);\r\n        }\r\n\t\t\t\t\r\n        uint256 _feeDev = _amount.mul(devFundFee).div(devFundMax);\r\n        uint256 _feeTreasury = _amount.mul(treasuryFee).div(treasuryMax);\r\n\r\n        if (buybackEnabled == true) {\r\n            // we want buyback mm using LP token\r\n            (address _buybackPrinciple, uint256 _buybackAmount) = _convertWantToBuyback(_feeDev.add(_feeTreasury));\r\n            buybackAndNotify(_buybackPrinciple, _buybackAmount);\r\n        } else {\r\n            IERC20(want).safeTransfer(IController(controller).devfund(), _feeDev);\r\n            IERC20(want).safeTransfer(IController(controller).treasury(), _feeTreasury);\r\n        }\r\n\r\n        address _vault = IController(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n\r\n        IERC20(want).safeTransfer(_vault, _amount.sub(_feeDev).sub(_feeTreasury));\r\n    }\r\n\t\r\n    // buyback MM and notify MasterChef\r\n    function buybackAndNotify(address _buybackPrinciple, uint256 _buybackAmount) internal {\r\n        if (buybackEnabled == true) {\r\n            _swapUniswap(_buybackPrinciple, mmToken, _buybackAmount);\r\n            uint256 _mmBought = IERC20(mmToken).balanceOf(address(this));\r\n            IERC20(mmToken).safeTransfer(masterChef, _mmBought);\r\n            IMasterchef(masterChef).notifyBuybackReward(_mmBought);\r\n        }\r\n    }\r\n\r\n    // Withdraw all funds, normally used when migrating strategies\r\n    function withdrawAll() external returns (uint256 balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        _withdrawAll();\r\n\r\n        balance = IERC20(want).balanceOf(address(this));\r\n\r\n        address _vault = IController(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n        IERC20(want).safeTransfer(_vault, balance);\r\n    }\r\n\r\n    function _withdrawAll() internal {\r\n        _withdrawSome(balanceOfPool());\r\n    }\r\n\r\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\t\r\n\t\r\n    // convert LP to buyback principle token\r\n    function _convertWantToBuyback(uint256 _lpAmount) internal virtual returns (address, uint256);\r\n\r\n    // each harvest need to update `lastHarvestBlock=block.number` and `lastHarvestInWant=yield profit converted to want for re-invest`\r\n    function harvest() public virtual;\r\n\r\n    // **** Emergency functions ****\r\n\r\n    function execute(address _target, bytes memory _data)\r\n        public\r\n        payable\r\n        returns (bytes memory response)\r\n    {\r\n        require(msg.sender == timelock, \"!timelock\");\r\n        require(_target != address(0), \"!target\");\r\n\r\n        // call contract in current context\r\n        assembly {\r\n            let succeeded := delegatecall(\r\n                sub(gas(), 5000),\r\n                _target,\r\n                add(_data, 0x20),\r\n                mload(_data),\r\n                0,\r\n                0\r\n            )\r\n            let size := returndatasize()\r\n\r\n            response := mload(0x40)\r\n            mstore(\r\n                0x40,\r\n                add(response, and(add(add(size, 0x20), 0x1f), not(0x1f)))\r\n            )\r\n            mstore(response, size)\r\n            returndatacopy(add(response, 0x20), 0, size)\r\n\r\n            switch iszero(succeeded)\r\n                case 1 {\r\n                    // throw if delegatecall failed\r\n                    revert(add(response, 0x20), size)\r\n                }\r\n        }\r\n    }\r\n\r\n    // **** Internal functions ****\r\n    function _swapUniswap(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal {\r\n        require(_to != address(0));\r\n\r\n        if (_amount > 0){\r\n\r\n            address[] memory path = (_to == usdcBuyback)? new address[](3) : new address[](2);\r\n            path[0] = _from;\r\n            if (_to == usdcBuyback){\r\n                path[1] = weth;\r\n                path[2] = _to;\r\n            }else{\r\n                path[1] = _to;\r\n            }\r\n\r\n            UniswapRouterV2(univ2Router2).swapExactTokensForTokens(\r\n                _amount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                now\r\n            );\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ninterface AggregatorV3Interface {\r\n  \r\n  function latestRoundData() external view returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n  );\r\n\r\n}\r\n\r\n\r\nabstract contract StrategyUnitBase is StrategyBase {\r\n    // Unit Protocol module: https://github.com/unitprotocol/core/blob/master/CONTRACTS.md\t\r\n    address public constant cdpMgr01 = 0x0e13ab042eC5AB9Fc6F43979406088B9028F66fA;\r\n    address public constant unitVault = 0xb1cFF81b9305166ff1EFc49A129ad2AfCd7BCf19;\t\t\r\n    address public constant unitVaultParameters = 0xB46F8CF42e504Efe8BEf895f848741daA55e9f1D;\t\r\n    address public constant debtToken = 0x1456688345527bE1f37E9e627DA0837D6f08C925;\r\n    address public constant eth_usd = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\r\n\r\n    // sub-strategy related constants\r\n    address public collateral;\r\n    uint256 public collateralDecimal = 1e18;\r\n    address public unitOracle;\r\n    uint256 public collateralPriceDecimal = 1;\r\n    bool public collateralPriceEth = false;\r\n\t\r\n    // configurable minimum collateralization percent this strategy would hold for CDP\r\n    uint256 public minRatio = 200;\r\n    // collateralization percent buffer in CDP debt actions\r\n    uint256 public ratioBuff = 200;\r\n    uint256 public constant ratioBuffMax = 10000;\r\n\r\n    // Keeper bots, maintain ratio above minimum requirement\r\n    mapping(address => bool) public keepers;\r\n\r\n    constructor(\r\n        address _collateral,\r\n        uint256 _collateralDecimal,\r\n        address _collateralOracle,\r\n        uint256 _collateralPriceDecimal,\r\n        bool _collateralPriceEth,\r\n        address _want,\r\n        address _governance,\r\n        address _strategist,\r\n        address _controller,\r\n        address _timelock\r\n    )\r\n        public\r\n        StrategyBase(_want, _governance, _strategist, _controller, _timelock)\r\n    {\r\n        require(_want == _collateral, '!mismatchWant');\r\n\t\t    \r\n        collateral = _collateral;   \r\n        collateralDecimal = _collateralDecimal;\r\n        unitOracle = _collateralOracle;\r\n        collateralPriceDecimal = _collateralPriceDecimal;\r\n        collateralPriceEth = _collateralPriceEth;\t\t\r\n\t\t\r\n        IERC20(collateral).safeApprove(unitVault, uint256(-1));\r\n        IERC20(debtToken).safeApprove(unitVault, uint256(-1));\r\n    }\r\n\r\n    // **** Modifiers **** //\r\n\r\n    modifier onlyKeepers {\r\n        require(keepers[msg.sender] || msg.sender == address(this) || msg.sender == strategist || msg.sender == governance, \"!keepers\");\r\n        _;\r\n    }\r\n\t\r\n    modifier onlyGovernanceAndStrategist {\r\n        require(msg.sender == governance || msg.sender == strategist, \"!governance\");\r\n        _;\r\n    }\r\n\t\r\n    modifier onlyCDPInUse {\r\n        uint256 collateralAmt = getCollateralBalance();\r\n        require(collateralAmt > 0, '!zeroCollateral');\r\n\t\t\r\n        uint256 debtAmt = getDebtBalance();\r\n        require(debtAmt > 0, '!zeroDebt');\t\t\r\n        _;\r\n    }\r\n\t\r\n    function getCollateralBalance() public view returns (uint256) {\r\n        return IUnitVault(unitVault).collaterals(collateral, address(this));\r\n    }\r\n\t\r\n    function getDebtBalance() public view returns (uint256) {\r\n        return IUnitVault(unitVault).getTotalDebt(collateral, address(this));\r\n    }\t\r\n\t\r\n    function getDebtWithoutFee() public view returns (uint256) {\r\n        return IUnitVault(unitVault).debts(collateral, address(this));\r\n    }\t\r\n\r\n    // **** Getters ****\r\n\t\r\n    function debtLimit() public view returns (uint256){\r\n        return IUnitVaultParameters(unitVaultParameters).tokenDebtLimit(collateral);\r\n    }\r\n\t\r\n    function debtUsed() public view returns (uint256){\r\n        return IUnitVault(unitVault).tokenDebts(collateral);\r\n    }\r\n\t\r\n    function balanceOfPool() public override view returns (uint256){\r\n        return getCollateralBalance();\r\n    }\r\n\r\n    function collateralValue(uint256 collateralAmt) public view returns (uint256){\r\n        uint256 collateralPrice = getLatestCollateralPrice();\r\n        return collateralAmt.mul(collateralPrice).mul(1e18).div(collateralDecimal).div(collateralPriceDecimal);// debtToken in 1e18 decimal\r\n    }\r\n\r\n    function currentRatio() public onlyCDPInUse view returns (uint256) {\t    \r\n        uint256 collateralAmt = collateralValue(getCollateralBalance()).mul(100);\r\n        uint256 debtAmt = getDebtBalance();\t\t\r\n        return collateralAmt.div(debtAmt);\r\n    } \r\n    \r\n    // if borrow is true (for lockAndDraw): return (maxDebt - currentDebt) if positive value, otherwise return 0\r\n    // if borrow is false (for redeemAndFree): return (currentDebt - maxDebt) if positive value, otherwise return 0\r\n    function calculateDebtFor(uint256 collateralAmt, bool borrow) public view returns (uint256) {\r\n        uint256 maxDebt = collateralValue(collateralAmt).mul(ratioBuffMax).div(_getBufferedMinRatio(ratioBuffMax));\r\n\t\t\r\n        uint256 debtAmt = getDebtBalance();\r\n\t\t\r\n        uint256 debt = 0;\r\n        \r\n        if (borrow && maxDebt >= debtAmt){\r\n            debt = maxDebt.sub(debtAmt);\r\n        } else if (!borrow && debtAmt >= maxDebt){\r\n            debt = debtAmt.sub(maxDebt);\r\n        }\r\n        \r\n        return (debt > 0)? debt : 0;\r\n    }\r\n\t\r\n    function _getBufferedMinRatio(uint256 _multiplier) internal view returns (uint256){\r\n        return minRatio.mul(_multiplier).mul(ratioBuffMax.add(ratioBuff)).div(ratioBuffMax).div(100);\r\n    }\r\n\r\n    function borrowableDebt() public view returns (uint256) {\r\n        uint256 collateralAmt = getCollateralBalance();\r\n        return calculateDebtFor(collateralAmt, true);\r\n    }\r\n\r\n    function requiredPaidDebt(uint256 _redeemCollateralAmt) public view returns (uint256) {\r\n        uint256 collateralAmt = getCollateralBalance().sub(_redeemCollateralAmt);\r\n        return calculateDebtFor(collateralAmt, false);\r\n    }\r\n\r\n    // **** sub-strategy implementation ****\r\n    function _convertWantToBuyback(uint256 _lpAmount) internal virtual override returns (address, uint256);\r\n\t\r\n    function _depositUSDP(uint256 _usdpAmt) internal virtual;\r\n\t\r\n    function _withdrawUSDP(uint256 _usdpAmt) internal virtual;\r\n\t\r\n    // **** Oracle (using chainlink) ****\r\n\t\r\n    function getLatestCollateralPrice() public view returns (uint256){\r\n        require(unitOracle != address(0), '!_collateralOracle');\t\r\n\t\t\r\n        (,int price,,,) = AggregatorV3Interface(unitOracle).latestRoundData();\r\n\t\t\r\n        if (price > 0){\t\t\r\n            int ethPrice = 1;\r\n            if (collateralPriceEth){\r\n               (,ethPrice,,,) = AggregatorV3Interface(eth_usd).latestRoundData();// eth price from chainlink in 1e8 decimal\t\t\r\n            }\r\n            return uint256(price).mul(collateralPriceDecimal).mul(uint256(ethPrice)).div(1e8).div(collateralPriceEth? 1e18 : 1);\r\n        } else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // **** Setters ****\r\n\t\r\n    function setMinRatio(uint256 _minRatio) external onlyGovernanceAndStrategist {\r\n        minRatio = _minRatio;\r\n    }\t\r\n\t\r\n    function setRatioBuff(uint256 _ratioBuff) external onlyGovernanceAndStrategist {\r\n        ratioBuff = _ratioBuff;\r\n    }\t\r\n\r\n    function setKeeper(address _keeper, bool _enabled) external onlyGovernanceAndStrategist {\r\n        keepers[_keeper] = _enabled;\r\n    }\r\n\t\r\n    // **** Unit Protocol CDP actions ****\r\n\t\r\n    function addCollateralAndBorrow(uint256 _collateralAmt, uint256 _usdpAmt) internal {   \r\n        require(_usdpAmt.add(debtUsed()) < debtLimit(), '!exceedLimit');\r\n        IUnitCDPManager(cdpMgr01).join(collateral, _collateralAmt, _usdpAmt);\t\t\r\n    } \r\n\t\r\n    function repayAndRedeemCollateral(uint256 _collateralAmt, uint _usdpAmt) internal { \r\n        IUnitCDPManager(cdpMgr01).exit(collateral, _collateralAmt, _usdpAmt);     \t\t\r\n    } \r\n\r\n    // **** State Mutation functions ****\r\n\t\r\n    function keepMinRatio() external onlyCDPInUse onlyKeepers {\t\t\r\n        uint256 requiredPaidback = requiredPaidDebt(0);\r\n        if (requiredPaidback > 0){\r\n            _withdrawUSDP(requiredPaidback);\r\n\t\t\t\r\n            uint256 _actualPaidDebt = IERC20(debtToken).balanceOf(address(this));\r\n            uint256 _fee = getDebtBalance().sub(getDebtWithoutFee());\r\n\t\t\t\r\n            require(_actualPaidDebt > _fee, '!notEnoughForFee');\t\r\n            _actualPaidDebt = _actualPaidDebt.sub(_fee);// unit protocol will charge fee first\r\n            _actualPaidDebt = _capMaxDebtPaid(_actualPaidDebt);\t\t\t\r\n\t\t\t\r\n            require(IERC20(debtToken).balanceOf(address(this)) >= _actualPaidDebt.add(_fee), '!notEnoughRepayment');\r\n            repayAndRedeemCollateral(0, _actualPaidDebt);\r\n        }\r\n    }\r\n\t\r\n    function deposit() public override {\r\n        uint256 _want = IERC20(want).balanceOf(address(this));\r\n        if (_want > 0) {\t\r\n            uint256 _newDebt = calculateDebtFor(_want.add(getCollateralBalance()), true);\r\n            if (_newDebt > 0){\r\n                addCollateralAndBorrow(_want, _newDebt);\r\n                uint256 wad = IERC20(debtToken).balanceOf(address(this));\r\n                _depositUSDP(_newDebt > wad? wad : _newDebt);\r\n            }\r\n        }\r\n    }\r\n\t\r\n    // to avoid repay all debt\r\n    function _capMaxDebtPaid(uint256 _actualPaidDebt) internal view returns(uint256){\r\n        uint256 _maxDebtToRepay = getDebtWithoutFee().sub(ratioBuffMax);\r\n        return _actualPaidDebt >= _maxDebtToRepay? _maxDebtToRepay : _actualPaidDebt;\r\n    }\r\n\r\n    function _withdrawSome(uint256 _amount) internal override returns (uint256) {\r\n        if (_amount == 0){\r\n            return _amount;\r\n        }\r\n        \r\n        uint256 requiredPaidback = requiredPaidDebt(_amount);\t\t\r\n        if (requiredPaidback > 0){\r\n            _withdrawUSDP(requiredPaidback);\r\n        }\r\n\t\t\r\n        bool _fullWithdraw = _amount == balanceOfPool();\r\n        uint256 _wantBefore = IERC20(want).balanceOf(address(this));\r\n        if (!_fullWithdraw){\r\n            uint256 _actualPaidDebt = IERC20(debtToken).balanceOf(address(this));\r\n            uint256 _fee = getDebtBalance().sub(getDebtWithoutFee());\r\n\t\t\r\n            require(_actualPaidDebt > _fee, '!notEnoughForFee');\t\t\t\t\r\n            _actualPaidDebt = _actualPaidDebt.sub(_fee); // unit protocol will charge fee first\r\n            _actualPaidDebt = _capMaxDebtPaid(_actualPaidDebt);\r\n\t\t\t\r\n            require(IERC20(debtToken).balanceOf(address(this)) >= _actualPaidDebt.add(_fee), '!notEnoughRepayment');\r\n            repayAndRedeemCollateral(_amount, _actualPaidDebt);\t\t\t\r\n        }else{\r\n            require(IERC20(debtToken).balanceOf(address(this)) >= getDebtBalance(), '!notEnoughFullRepayment');\r\n            repayAndRedeemCollateral(_amount, getDebtBalance());\r\n            require(getDebtBalance() == 0, '!leftDebt');\r\n            require(getCollateralBalance() == 0, '!leftCollateral');\r\n        }\r\n\t\t\r\n        uint256 _wantAfter = IERC20(want).balanceOf(address(this));\t\t\r\n        return _wantAfter.sub(_wantBefore);\r\n    }\r\n    \r\n}\r\n\r\ncontract StrategyUnitRenbtcV1 is StrategyUnitBase {\r\n    // strategy specific\r\n    address public constant renbtc_collateral = 0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D;\r\n    uint256 public constant renbtc_collateral_decimal = 1e8;\r\n    address public constant renbtc_oracle = 0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c;\r\n    uint256 public constant renbtc_price_decimal = 1;\r\n    bool public constant renbtc_price_eth = false;\r\n\t\r\n    // farming in usdp3crv \r\n    address public constant usdp3crv = 0x7Eb40E450b9655f4B3cC4259BCC731c63ff55ae6;\r\n    address public constant usdp = 0x1456688345527bE1f37E9e627DA0837D6f08C925;\r\n    address public constant usdp_gauge = 0x055be5DDB7A925BfEF3417FC157f53CA77cA7222;\r\n    address public constant curvePool = 0x42d7025938bEc20B69cBae5A77421082407f053A;\r\n    address public constant mintr = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\r\n    \r\n    // slippage protection for one-sided ape in/out\r\n    uint256 public slippageProtectionIn = 50; // max 0.5%\r\n    uint256 public slippageProtectionOut = 50; // max 0.5%\r\n    uint256 public constant DENOMINATOR = 10000;\r\n\r\n    constructor(address _governance, address _strategist, address _controller, address _timelock) \r\n        public StrategyUnitBase(\r\n            renbtc_collateral,\r\n            renbtc_collateral_decimal,\r\n            renbtc_oracle,\r\n            renbtc_price_decimal,\r\n            renbtc_price_eth,\r\n            renbtc_collateral,\r\n            _governance,\r\n            _strategist,\r\n            _controller,\r\n            _timelock\r\n        )\r\n    {\r\n        // approve for Curve pool and DEX\r\n        IERC20(usdp).safeApprove(curvePool, uint256(-1));\r\n        IERC20(usdp3crv).safeApprove(curvePool, uint256(-1));\r\n        \r\n        IERC20(usdp3crv).safeApprove(usdp_gauge, uint256(-1));\r\n        \r\n        IERC20(crv).safeApprove(univ2Router2, uint256(-1));\r\n        IERC20(weth).safeApprove(univ2Router2, uint256(-1));\r\n        IERC20(renbtc_collateral).safeApprove(univ2Router2, uint256(-1));\r\n        IERC20(usdcBuyback).safeApprove(univ2Router2, uint256(-1));\r\n    }\r\n\t\r\n    // **** Setters ****\t\r\n\t\r\n    function setSlippageProtectionIn(uint256 _slippage) external onlyGovernanceAndStrategist{\r\n        slippageProtectionIn = _slippage;\r\n    }\r\n\t\r\n    function setSlippageProtectionOut(uint256 _slippage) external onlyGovernanceAndStrategist{\r\n        slippageProtectionOut = _slippage;\r\n    }\r\n\t\r\n    // **** State Mutation functions ****\t\r\n\r\n    function getHarvestable() external returns (uint256) {\r\n        return ICurveGauge(usdp_gauge).claimable_tokens(address(this));\r\n    }\r\n\r\n    function _convertWantToBuyback(uint256 _lpAmount) internal override returns (address, uint256){\r\n        _swapUniswap(renbtc_collateral, usdcBuyback, _lpAmount);\r\n        return (usdcBuyback, IERC20(usdcBuyback).balanceOf(address(this)));\r\n    }\t\r\n\t\r\n    function harvest() public override onlyBenevolent {\r\n\r\n        // Collects crv tokens\r\n        ICurveMintr(mintr).mint(usdp_gauge);\r\n        uint256 _crv = IERC20(crv).balanceOf(address(this));\r\n        if (_crv > 0) {\r\n            _swapUniswap(crv, weth, _crv);\r\n        }\r\n\r\n        // buyback $MM\r\n        uint256 _to = IERC20(weth).balanceOf(address(this));\r\n        uint256 _buybackAmount = _to.mul(performanceFee).div(performanceMax);\t\t\r\n        if (buybackEnabled == true && _buybackAmount > 0) {\r\n            buybackAndNotify(weth, _buybackAmount);\r\n        }\r\n\t\t\r\n        // re-invest to compounding profit\r\n        _swapUniswap(weth, want, IERC20(weth).balanceOf(address(this)));\r\n        uint256 _want = IERC20(want).balanceOf(address(this));\r\n        if (_want > 0) {\r\n            lastHarvestBlock = block.number;\r\n            lastHarvestInWant = _want;\r\n            deposit();\r\n        }\r\n    }\r\n\t\r\n    function _depositUSDP(uint256 _usdpAmt) internal override{\t\r\n        if (_usdpAmt > 0 && checkSlip(_usdpAmt)) {\r\n            uint256[2] memory amounts = [_usdpAmt, 0]; \r\n            ICurveFi_2(curvePool).add_liquidity(amounts, 0);\r\n        }\r\n\t\t\r\n        uint256 _usdp3crv = IERC20(usdp3crv).balanceOf(address(this));\r\n        if (_usdp3crv > 0){\r\n            ICurveGauge(usdp_gauge).deposit(_usdp3crv);\t\t\r\n        }\r\n    }\r\n\t\r\n    function _withdrawUSDP(uint256 _usdpAmt) internal override {\t\r\n        uint256 _requiredUsdp3crv = estimateRequiredUsdp3crv(_usdpAmt);\r\n        _requiredUsdp3crv = _requiredUsdp3crv.mul(DENOMINATOR.add(slippageProtectionOut)).div(DENOMINATOR);// try to remove bit more\r\n\t\t\r\n        uint256 _usdp3crv = IERC20(usdp3crv).balanceOf(address(this));\r\n        uint256 _withdrawFromGauge = _usdp3crv < _requiredUsdp3crv? _requiredUsdp3crv.sub(_usdp3crv) : 0;\r\n\t\t\t\r\n        if (_withdrawFromGauge > 0){\r\n            uint256 maxInGauge = ICurveGauge(usdp_gauge).balanceOf(address(this));\r\n            ICurveGauge(usdp_gauge).withdraw(maxInGauge < _withdrawFromGauge? maxInGauge : _withdrawFromGauge);\t\t\t\r\n        }\r\n\t\t    \t\r\n        _usdp3crv = IERC20(usdp3crv).balanceOf(address(this));\r\n        if (_usdp3crv > 0){\r\n            _requiredUsdp3crv = _requiredUsdp3crv > _usdp3crv?  _usdp3crv : _requiredUsdp3crv;\r\n            uint256 maxSlippage = _requiredUsdp3crv.mul(DENOMINATOR.sub(slippageProtectionOut)).div(DENOMINATOR);\r\n            ICurveFi_2(curvePool).remove_liquidity_one_coin(_requiredUsdp3crv, 0, maxSlippage);\t\t\t\r\n        }\r\n    }\r\n\r\n    // Controller only function for creating additional rewards from dust\r\n    function withdraw(IERC20 _asset) external override returns (uint256 balance) {\r\n        require(usdp3crv != address(_asset), \"!usdp3crv\");\r\n        require(usdp != address(_asset), \"!usdp\");\r\n        return _withdrawNonWantAsset(_asset);\r\n    }\r\n\r\n    // **** Views ****\r\n\r\n    function virtualPriceToWant() public view returns (uint256) {\r\n        return ICurveFi_2(curvePool).get_virtual_price();\r\n    }\r\n\t\r\n    function estimateRequiredUsdp3crv(uint256 _usdpAmt) public view returns (uint256) {\r\n        uint256[2] memory amounts = [_usdpAmt, 0]; \r\n        return ICurveFi_2(curvePool).calc_token_amount(amounts, false);\r\n    }\r\n\t\r\n    function checkSlip(uint256 _usdpAmt) public view returns (bool){\r\n        uint256 expectedOut = _usdpAmt.mul(1e18).div(virtualPriceToWant());\r\n        uint256 maxSlip = expectedOut.mul(DENOMINATOR.sub(slippageProtectionIn)).div(DENOMINATOR);\r\n\r\n        uint256[2] memory amounts = [_usdpAmt, 0]; \r\n        return ICurveFi_2(curvePool).calc_token_amount(amounts, true) >= maxSlip;\r\n    }\r\n\r\n    function getName() external override pure returns (string memory) {\r\n        return \"StrategyUnitRenbtcV1\";\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowableDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"borrow\",\"type\":\"bool\"}],\"name\":\"calculateDebtFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cdpMgr01\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdpAmt\",\"type\":\"uint256\"}],\"name\":\"checkSlip\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralPriceDecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralPriceEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmt\",\"type\":\"uint256\"}],\"name\":\"collateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curvePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayBlockRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFundMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdpAmt\",\"type\":\"uint256\"}],\"name\":\"estimateRequiredUsdp3crv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eth_usd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebtBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebtWithoutFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHarvestable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestCollateralPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepMinRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvestBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvestInWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterChef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mmToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratioBuff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratioBuffMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renbtc_collateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renbtc_collateral_decimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renbtc_oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renbtc_price_decimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renbtc_price_eth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redeemCollateralAmt\",\"type\":\"uint256\"}],\"name\":\"requiredPaidDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_buybackEnabled\",\"type\":\"bool\"}],\"name\":\"setBuybackEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delayBlockRequired\",\"type\":\"uint256\"}],\"name\":\"setDelayBlockRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_devFundFee\",\"type\":\"uint256\"}],\"name\":\"setDevFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterChef\",\"type\":\"address\"}],\"name\":\"setMasterChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minRatio\",\"type\":\"uint256\"}],\"name\":\"setMinRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mmToken\",\"type\":\"address\"}],\"name\":\"setMmToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratioBuff\",\"type\":\"uint256\"}],\"name\":\"setRatioBuff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setSlippageProtectionIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setSlippageProtectionOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_treasuryFee\",\"type\":\"uint256\"}],\"name\":\"setTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageProtectionIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageProtectionOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unitOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unitVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unitVaultParameters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"univ2Router2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcBuyback\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdp3crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdp_gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualPriceToWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zrxBuyback\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StrategyUnitRenbtcV1","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000043229759e12efbe3e2a0fb0510b15e516d0464420000000000000000000000000bd1d668d8e83d14252f2e01d5873df77a6511f00000000000000000000000004bf5059065541a2b176500928e91fbfd0b121d070000000000000000000000005dae9b27313670663b34ac8bffd18825bb9df736","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a086e408f20d08f4aedda1d01bbe6caa9c26ee3881bd2ca85f2963284b472ce6"}]}