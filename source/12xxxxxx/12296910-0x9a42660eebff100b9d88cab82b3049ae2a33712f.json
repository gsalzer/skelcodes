{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"./contracts/SafeBox.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/ERC20.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/IERC20.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/SafeERC20.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/cryptography/MerkleProof.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/math/SafeMath.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/utils/ReentrancyGuard.sol';\\nimport './Governable.sol';\\nimport '../interfaces/ICErc20.sol';\\n\\ncontract SafeBox is Governable, ERC20, ReentrancyGuard {\\n  using SafeMath for uint;\\n  using SafeERC20 for IERC20;\\n  event Claim(address user, uint amount);\\n\\n  ICErc20 public immutable cToken;\\n  IERC20 public immutable uToken;\\n\\n  address public relayer;\\n  bytes32 public root;\\n  mapping(address => uint) public claimed;\\n\\n  constructor(\\n    ICErc20 _cToken,\\n    string memory _name,\\n    string memory _symbol\\n  ) public ERC20(_name, _symbol) {\\n    _setupDecimals(_cToken.decimals());\\n    IERC20 _uToken = IERC20(_cToken.underlying());\\n    __Governable__init();\\n    cToken = _cToken;\\n    uToken = _uToken;\\n    relayer = msg.sender;\\n    _uToken.safeApprove(address(_cToken), uint(-1));\\n  }\\n\\n  function setRelayer(address _relayer) external onlyGov {\\n    relayer = _relayer;\\n  }\\n\\n  function updateRoot(bytes32 _root) external {\\n    require(msg.sender == relayer || msg.sender == governor, '!relayer');\\n    root = _root;\\n  }\\n\\n  function deposit(uint amount) external nonReentrant {\\n    uint uBalanceBefore = uToken.balanceOf(address(this));\\n    uToken.safeTransferFrom(msg.sender, address(this), amount);\\n    uint uBalanceAfter = uToken.balanceOf(address(this));\\n    uint cBalanceBefore = cToken.balanceOf(address(this));\\n    require(cToken.mint(uBalanceAfter.sub(uBalanceBefore)) == 0, '!mint');\\n    uint cBalanceAfter = cToken.balanceOf(address(this));\\n    _mint(msg.sender, cBalanceAfter.sub(cBalanceBefore));\\n  }\\n\\n  function withdraw(uint amount) public nonReentrant {\\n    _burn(msg.sender, amount);\\n    uint uBalanceBefore = uToken.balanceOf(address(this));\\n    require(cToken.redeem(amount) == 0, '!redeem');\\n    uint uBalanceAfter = uToken.balanceOf(address(this));\\n    uToken.safeTransfer(msg.sender, uBalanceAfter.sub(uBalanceBefore));\\n  }\\n\\n  function claim(uint totalAmount, bytes32[] memory proof) public nonReentrant {\\n    bytes32 leaf = keccak256(abi.encodePacked(msg.sender, totalAmount));\\n    require(MerkleProof.verify(proof, root, leaf), '!proof');\\n    uint send = totalAmount.sub(claimed[msg.sender]);\\n    claimed[msg.sender] = totalAmount;\\n    uToken.safeTransfer(msg.sender, send);\\n    emit Claim(msg.sender, send);\\n  }\\n\\n  function adminClaim(uint amount) external onlyGov {\\n    uToken.safeTransfer(msg.sender, amount);\\n  }\\n\\n  function claimAndWithdraw(\\n    uint totalAmount,\\n    bytes32[] memory proof,\\n    uint withdrawAmount\\n  ) external {\\n    claim(totalAmount, proof);\\n    withdraw(withdrawAmount);\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/Governable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/proxy/Initializable.sol';\\n\\ncontract Governable is Initializable {\\n  event SetGovernor(address governor);\\n  event SetPendingGovernor(address pendingGovernor);\\n  event AcceptGovernor(address governor);\\n\\n  address public governor; // The current governor.\\n  address public pendingGovernor; // The address pending to become the governor once accepted.\\n\\n  bytes32[64] _gap; // reserve space for upgrade\\n\\n  modifier onlyGov() {\\n    require(msg.sender == governor, 'not the governor');\\n    _;\\n  }\\n\\n  /// @dev Initialize using msg.sender as the first governor.\\n  function __Governable__init() internal initializer {\\n    governor = msg.sender;\\n    pendingGovernor = address(0);\\n    emit SetGovernor(msg.sender);\\n  }\\n\\n  /// @dev Set the pending governor, which will be the governor once accepted.\\n  /// @param _pendingGovernor The address to become the pending governor.\\n  function setPendingGovernor(address _pendingGovernor) external onlyGov {\\n    pendingGovernor = _pendingGovernor;\\n    emit SetPendingGovernor(_pendingGovernor);\\n  }\\n\\n  /// @dev Accept to become the new governor. Must be called by the pending governor.\\n  function acceptGovernor() external {\\n    require(msg.sender == pendingGovernor, 'not the pending governor');\\n    pendingGovernor = address(0);\\n    governor = msg.sender;\\n    emit AcceptGovernor(msg.sender);\\n  }\\n}\\n\"\r\n    },\r\n    \"./interfaces/ICErc20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ICErc20 {\\n  function decimals() external returns (uint8);\\n\\n  function underlying() external returns (address);\\n\\n  function mint(uint mintAmount) external returns (uint);\\n\\n  function redeem(uint redeemTokens) external returns (uint);\\n\\n  function balanceOf(address user) external view returns (uint);\\n\\n  function borrowBalanceCurrent(address account) external returns (uint);\\n\\n  function borrowBalanceStored(address account) external view returns (uint);\\n\\n  function borrow(uint borrowAmount) external returns (uint);\\n\\n  function repayBorrow(uint repayAmount) external returns (uint);\\n}\\n\"\r\n    },\r\n    \"./contracts/wrapper/WERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC1155/ERC1155.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/SafeERC20.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/utils/ReentrancyGuard.sol';\\n\\nimport '../../interfaces/IWERC20.sol';\\n\\ncontract WERC20 is ERC1155('WERC20'), ReentrancyGuard, IWERC20 {\\n  using SafeERC20 for IERC20;\\n\\n  /// @dev Return the underlying ERC-20 for the given ERC-1155 token id.\\n  /// @param id token id (corresponds to token address for wrapped ERC20)\\n  function getUnderlyingToken(uint id) external view override returns (address) {\\n    address token = address(id);\\n    require(uint(token) == id, 'id overflow');\\n    return token;\\n  }\\n\\n  /// @dev Return the conversion rate from ERC-1155 to ERC-20, multiplied by 2**112.\\n  function getUnderlyingRate(uint) external view override returns (uint) {\\n    return 2**112;\\n  }\\n\\n  /// @dev Return the underlying ERC20 balance for the user.\\n  /// @param token token address to get balance of\\n  /// @param user user address to get balance of\\n  function balanceOfERC20(address token, address user) external view override returns (uint) {\\n    return balanceOf(user, uint(token));\\n  }\\n\\n  /// @dev Mint ERC1155 token for the given ERC20 token.\\n  /// @param token token address to wrap\\n  /// @param amount token amount to wrap\\n  function mint(address token, uint amount) external override nonReentrant {\\n    uint balanceBefore = IERC20(token).balanceOf(address(this));\\n    IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n    uint balanceAfter = IERC20(token).balanceOf(address(this));\\n    _mint(msg.sender, uint(token), balanceAfter.sub(balanceBefore), '');\\n  }\\n\\n  /// @dev Burn ERC1155 token to redeem ERC20 token back.\\n  /// @param token token address to burn\\n  /// @param amount token amount to burn\\n  function burn(address token, uint amount) external override nonReentrant {\\n    _burn(msg.sender, uint(token), amount);\\n    IERC20(token).safeTransfer(msg.sender, amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"./interfaces/IWERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC1155/IERC1155.sol';\\n\\nimport './IERC20Wrapper.sol';\\n\\ninterface IWERC20 is IERC1155, IERC20Wrapper {\\n  /// @dev Return the underlying ERC20 balance for the user.\\n  function balanceOfERC20(address token, address user) external view returns (uint);\\n\\n  /// @dev Mint ERC1155 token for the given ERC20 token.\\n  function mint(address token, uint amount) external;\\n\\n  /// @dev Burn ERC1155 token to redeem ERC20 token back.\\n  function burn(address token, uint amount) external;\\n}\\n\"\r\n    },\r\n    \"./interfaces/IERC20Wrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IERC20Wrapper {\\n  /// @dev Return the underlying ERC-20 for the given ERC-1155 token id.\\n  function getUnderlyingToken(uint id) external view returns (address);\\n\\n  /// @dev Return the conversion rate from ERC-1155 to ERC-20, multiplied by 2**112.\\n  function getUnderlyingRate(uint id) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"./contracts/wrapper/WStakingRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC1155/ERC1155.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/SafeERC20.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/utils/ReentrancyGuard.sol';\\n\\nimport '../utils/HomoraMath.sol';\\nimport '../../interfaces/IERC20Wrapper.sol';\\nimport '../../interfaces/IStakingRewards.sol';\\n\\ncontract WStakingRewards is ERC1155('WStakingRewards'), ReentrancyGuard, IERC20Wrapper {\\n  using SafeMath for uint;\\n  using HomoraMath for uint;\\n  using SafeERC20 for IERC20;\\n\\n  address public immutable staking; // Staking reward contract address\\n  address public immutable underlying; // Underlying token address\\n  address public immutable reward; // Reward token address\\n\\n  constructor(\\n    address _staking,\\n    address _underlying,\\n    address _reward\\n  ) public {\\n    staking = _staking;\\n    underlying = _underlying;\\n    reward = _reward;\\n    IERC20(_underlying).safeApprove(_staking, uint(-1));\\n  }\\n\\n  /// @dev Return the underlying ERC20 for the given ERC1155 token id.\\n  function getUnderlyingToken(uint) external view override returns (address) {\\n    return underlying;\\n  }\\n\\n  /// @dev Return the conversion rate from ERC1155 to ERC20, multiplied 2**112.\\n  function getUnderlyingRate(uint) external view override returns (uint) {\\n    return 2**112;\\n  }\\n\\n  /// @dev Mint ERC1155 token for the specified amount\\n  /// @param amount Token amount to wrap\\n  function mint(uint amount) external nonReentrant returns (uint) {\\n    IERC20(underlying).safeTransferFrom(msg.sender, address(this), amount);\\n    IStakingRewards(staking).stake(amount);\\n    uint rewardPerToken = IStakingRewards(staking).rewardPerToken();\\n    _mint(msg.sender, rewardPerToken, amount, '');\\n    return rewardPerToken;\\n  }\\n\\n  /// @dev Burn ERC1155 token to redeem ERC20 token back.\\n  /// @param id Token id to burn\\n  /// @param amount Token amount to burn\\n  function burn(uint id, uint amount) external nonReentrant returns (uint) {\\n    if (amount == uint(-1)) {\\n      amount = balanceOf(msg.sender, id);\\n    }\\n    _burn(msg.sender, id, amount);\\n    IStakingRewards(staking).withdraw(amount);\\n    IStakingRewards(staking).getReward();\\n    IERC20(underlying).safeTransfer(msg.sender, amount);\\n    uint stRewardPerToken = id;\\n    uint enRewardPerToken = IStakingRewards(staking).rewardPerToken();\\n    uint stReward = stRewardPerToken.mul(amount).divCeil(1e18);\\n    uint enReward = enRewardPerToken.mul(amount).div(1e18);\\n    if (enReward > stReward) {\\n      IERC20(reward).safeTransfer(msg.sender, enReward.sub(stReward));\\n    }\\n    return enRewardPerToken;\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/utils/HomoraMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/math/SafeMath.sol';\\n\\nlibrary HomoraMath {\\n  using SafeMath for uint;\\n\\n  function divCeil(uint lhs, uint rhs) internal pure returns (uint) {\\n    return lhs.add(rhs).sub(1) / rhs;\\n  }\\n\\n  function fmul(uint lhs, uint rhs) internal pure returns (uint) {\\n    return lhs.mul(rhs) / (2**112);\\n  }\\n\\n  function fdiv(uint lhs, uint rhs) internal pure returns (uint) {\\n    return lhs.mul(2**112) / rhs;\\n  }\\n\\n  // implementation from https://github.com/Uniswap/uniswap-lib/commit/99f3f28770640ba1bb1ff460ac7c5292fb8291a0\\n  // original implementation: https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n  function sqrt(uint x) internal pure returns (uint) {\\n    if (x == 0) return 0;\\n    uint xx = x;\\n    uint r = 1;\\n\\n    if (xx >= 0x100000000000000000000000000000000) {\\n      xx >>= 128;\\n      r <<= 64;\\n    }\\n\\n    if (xx >= 0x10000000000000000) {\\n      xx >>= 64;\\n      r <<= 32;\\n    }\\n    if (xx >= 0x100000000) {\\n      xx >>= 32;\\n      r <<= 16;\\n    }\\n    if (xx >= 0x10000) {\\n      xx >>= 16;\\n      r <<= 8;\\n    }\\n    if (xx >= 0x100) {\\n      xx >>= 8;\\n      r <<= 4;\\n    }\\n    if (xx >= 0x10) {\\n      xx >>= 4;\\n      r <<= 2;\\n    }\\n    if (xx >= 0x8) {\\n      r <<= 1;\\n    }\\n\\n    r = (r + x / r) >> 1;\\n    r = (r + x / r) >> 1;\\n    r = (r + x / r) >> 1;\\n    r = (r + x / r) >> 1;\\n    r = (r + x / r) >> 1;\\n    r = (r + x / r) >> 1;\\n    r = (r + x / r) >> 1; // Seven iterations should be enough\\n    uint r1 = x / r;\\n    return (r < r1 ? r : r1);\\n  }\\n}\\n\"\r\n    },\r\n    \"./interfaces/IStakingRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IStakingRewards {\\n  function rewardPerToken() external view returns (uint);\\n\\n  function stake(uint amount) external;\\n\\n  function withdraw(uint amount) external;\\n\\n  function getReward() external;\\n}\\n\"\r\n    },\r\n    \"./contracts/wrapper/WLiquidityGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC1155/ERC1155.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/SafeERC20.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/utils/ReentrancyGuard.sol';\\n\\nimport '../Governable.sol';\\nimport '../utils/HomoraMath.sol';\\nimport '../../interfaces/IERC20Wrapper.sol';\\nimport '../../interfaces/ICurveRegistry.sol';\\nimport '../../interfaces/ILiquidityGauge.sol';\\n\\ninterface ILiquidityGaugeMinter {\\n  function mint(address gauge) external;\\n}\\n\\ncontract WLiquidityGauge is ERC1155('WLiquidityGauge'), ReentrancyGuard, IERC20Wrapper, Governable {\\n  using SafeMath for uint;\\n  using HomoraMath for uint;\\n  using SafeERC20 for IERC20;\\n\\n  struct GaugeInfo {\\n    ILiquidityGauge impl; // Gauge implementation\\n    uint accCrvPerShare; // Accumulated CRV per share\\n  }\\n\\n  ICurveRegistry public immutable registry; // Curve registry\\n  IERC20 public immutable crv; // CRV token\\n  mapping(uint => mapping(uint => GaugeInfo)) public gauges; // Mapping from pool id to (mapping from gauge id to GaugeInfo)\\n\\n  constructor(ICurveRegistry _registry, IERC20 _crv) public {\\n    __Governable__init();\\n    registry = _registry;\\n    crv = _crv;\\n  }\\n\\n  /// @dev Encode pid, gid, crvPerShare to a ERC1155 token id\\n  /// @param pid Curve pool id (10-bit)\\n  /// @param gid Curve gauge id (6-bit)\\n  /// @param crvPerShare CRV amount per share, multiplied by 1e18 (240-bit)\\n  function encodeId(\\n    uint pid,\\n    uint gid,\\n    uint crvPerShare\\n  ) public pure returns (uint) {\\n    require(pid < (1 << 10), 'bad pid');\\n    require(gid < (1 << 6), 'bad gid');\\n    require(crvPerShare < (1 << 240), 'bad crv per share');\\n    return (pid << 246) | (gid << 240) | crvPerShare;\\n  }\\n\\n  /// @dev Decode ERC1155 token id to pid, gid, crvPerShare\\n  /// @param id Token id to decode\\n  function decodeId(uint id)\\n    public\\n    pure\\n    returns (\\n      uint pid,\\n      uint gid,\\n      uint crvPerShare\\n    )\\n  {\\n    pid = id >> 246; // First 10 bits\\n    gid = (id >> 240) & (63); // Next 6 bits\\n    crvPerShare = id & ((1 << 240) - 1); // Last 240 bits\\n  }\\n\\n  /// @dev Get underlying ERC20 token of ERC1155 given pid, gid\\n  /// @param pid pool id\\n  /// @param gid gauge id\\n  function getUnderlyingTokenFromIds(uint pid, uint gid) public view returns (address) {\\n    ILiquidityGauge impl = gauges[pid][gid].impl;\\n    require(address(impl) != address(0), 'no gauge');\\n    return impl.lp_token();\\n  }\\n\\n  /// @dev Get underlying ERC20 token of ERC1155 given token id\\n  /// @param id Token id\\n  function getUnderlyingToken(uint id) external view override returns (address) {\\n    (uint pid, uint gid, ) = decodeId(id);\\n    return getUnderlyingTokenFromIds(pid, gid);\\n  }\\n\\n  /// @dev Return the conversion rate from ERC-1155 to ERC-20, multiplied by 2**112.\\n  function getUnderlyingRate(uint) external view override returns (uint) {\\n    return 2**112;\\n  }\\n\\n  /// @dev Register curve gauge to storage given pool id and gauge id\\n  /// @param pid Pool id\\n  /// @param gid Gauge id\\n  function registerGauge(uint pid, uint gid) external onlyGov {\\n    require(address(gauges[pid][gid].impl) == address(0), 'gauge already exists');\\n    address pool = registry.pool_list(pid);\\n    require(pool != address(0), 'no pool');\\n    (address[10] memory _gauges, ) = registry.get_gauges(pool);\\n    address gauge = _gauges[gid];\\n    require(gauge != address(0), 'no gauge');\\n    IERC20 lpToken = IERC20(ILiquidityGauge(gauge).lp_token());\\n    lpToken.approve(gauge, 0);\\n    lpToken.approve(gauge, uint(-1));\\n    gauges[pid][gid] = GaugeInfo({impl: ILiquidityGauge(gauge), accCrvPerShare: 0});\\n  }\\n\\n  /// @dev Mint ERC1155 token for the given ERC20 token\\n  /// @param pid Pool id\\n  /// @param gid Gauge id\\n  /// @param amount Token amount to wrap\\n  function mint(\\n    uint pid,\\n    uint gid,\\n    uint amount\\n  ) external nonReentrant returns (uint) {\\n    GaugeInfo storage gauge = gauges[pid][gid];\\n    ILiquidityGauge impl = gauge.impl;\\n    require(address(impl) != address(0), 'gauge not registered');\\n    mintCrv(gauge);\\n    IERC20 lpToken = IERC20(impl.lp_token());\\n    lpToken.safeTransferFrom(msg.sender, address(this), amount);\\n    impl.deposit(amount);\\n    uint id = encodeId(pid, gid, gauge.accCrvPerShare);\\n    _mint(msg.sender, id, amount, '');\\n    return id;\\n  }\\n\\n  /// @dev Burn ERC1155 token to redeem ERC20 token back\\n  /// @param id Token id to burn\\n  /// @param amount Token amount to burn\\n  function burn(uint id, uint amount) external nonReentrant returns (uint) {\\n    if (amount == uint(-1)) {\\n      amount = balanceOf(msg.sender, id);\\n    }\\n    (uint pid, uint gid, uint stCrvPerShare) = decodeId(id);\\n    _burn(msg.sender, id, amount);\\n    GaugeInfo storage gauge = gauges[pid][gid];\\n    ILiquidityGauge impl = gauge.impl;\\n    require(address(impl) != address(0), 'gauge not registered');\\n    mintCrv(gauge);\\n    impl.withdraw(amount);\\n    IERC20(impl.lp_token()).safeTransfer(msg.sender, amount);\\n    uint stCrv = stCrvPerShare.mul(amount).divCeil(1e18);\\n    uint enCrv = gauge.accCrvPerShare.mul(amount).div(1e18);\\n    if (enCrv > stCrv) {\\n      crv.safeTransfer(msg.sender, enCrv.sub(stCrv));\\n    }\\n    return pid;\\n  }\\n\\n  /// @dev Mint CRV reward for curve gauge\\n  /// @param gauge Curve gauge to mint reward\\n  function mintCrv(GaugeInfo storage gauge) internal {\\n    ILiquidityGauge impl = gauge.impl;\\n    uint balanceBefore = crv.balanceOf(address(this));\\n    ILiquidityGaugeMinter(impl.minter()).mint(address(impl));\\n    uint balanceAfter = crv.balanceOf(address(this));\\n    uint gain = balanceAfter.sub(balanceBefore);\\n    uint supply = impl.balanceOf(address(this));\\n    if (gain > 0 && supply > 0) {\\n      gauge.accCrvPerShare = gauge.accCrvPerShare.add(gain.mul(1e18).div(supply));\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"./interfaces/ICurveRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ICurveRegistry {\\n  function get_n_coins(address lp) external view returns (uint, uint);\\n\\n  function pool_list(uint id) external view returns (address);\\n\\n  function get_coins(address pool) external view returns (address[8] memory);\\n\\n  function get_gauges(address pool) external view returns (address[10] memory, uint128[10] memory);\\n\\n  function get_lp_token(address pool) external view returns (address);\\n\\n  function get_pool_from_lp_token(address lp) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"./interfaces/ILiquidityGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ILiquidityGauge {\\n  function minter() external view returns (address);\\n\\n  function crv_token() external view returns (address);\\n\\n  function lp_token() external view returns (address);\\n\\n  function balanceOf(address addr) external view returns (uint);\\n\\n  function deposit(uint value) external;\\n\\n  function withdraw(uint value) external;\\n}\\n\"\r\n    },\r\n    \"./contracts/wrapper/WMasterChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC1155/ERC1155.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/SafeERC20.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/utils/ReentrancyGuard.sol';\\n\\nimport '../utils/HomoraMath.sol';\\nimport '../../interfaces/IERC20Wrapper.sol';\\nimport '../../interfaces/IMasterChef.sol';\\n\\ncontract WMasterChef is ERC1155('WMasterChef'), ReentrancyGuard, IERC20Wrapper {\\n  using SafeMath for uint;\\n  using HomoraMath for uint;\\n  using SafeERC20 for IERC20;\\n\\n  IMasterChef public immutable chef; // Sushiswap masterChef\\n  IERC20 public immutable sushi; // Sushi token\\n\\n  constructor(IMasterChef _chef) public {\\n    chef = _chef;\\n    sushi = IERC20(_chef.sushi());\\n  }\\n\\n  /// @dev Encode pid, sushiPerShare to ERC1155 token id\\n  /// @param pid Pool id (16-bit)\\n  /// @param sushiPerShare Sushi amount per share, multiplied by 1e18 (240-bit)\\n  function encodeId(uint pid, uint sushiPerShare) public pure returns (uint id) {\\n    require(pid < (1 << 16), 'bad pid');\\n    require(sushiPerShare < (1 << 240), 'bad sushi per share');\\n    return (pid << 240) | sushiPerShare;\\n  }\\n\\n  /// @dev Decode ERC1155 token id to pid, sushiPerShare\\n  /// @param id Token id\\n  function decodeId(uint id) public pure returns (uint pid, uint sushiPerShare) {\\n    pid = id >> 240; // First 16 bits\\n    sushiPerShare = id & ((1 << 240) - 1); // Last 240 bits\\n  }\\n\\n  /// @dev Return the underlying ERC-20 for the given ERC-1155 token id.\\n  /// @param id Token id\\n  function getUnderlyingToken(uint id) external view override returns (address) {\\n    (uint pid, ) = decodeId(id);\\n    (address lpToken, , , ) = chef.poolInfo(pid);\\n    return lpToken;\\n  }\\n\\n  /// @dev Return the conversion rate from ERC-1155 to ERC-20, multiplied by 2**112.\\n  function getUnderlyingRate(uint) external view override returns (uint) {\\n    return 2**112;\\n  }\\n\\n  /// @dev Mint ERC1155 token for the given pool id.\\n  /// @param pid Pool id\\n  /// @param amount Token amount to wrap\\n  /// @return The token id that got minted.\\n  function mint(uint pid, uint amount) external nonReentrant returns (uint) {\\n    (address lpToken, , , ) = chef.poolInfo(pid);\\n    IERC20(lpToken).safeTransferFrom(msg.sender, address(this), amount);\\n    if (IERC20(lpToken).allowance(address(this), address(chef)) != uint(-1)) {\\n      // We only need to do this once per pool, as LP token's allowance won't decrease if it's -1.\\n      IERC20(lpToken).safeApprove(address(chef), uint(-1));\\n    }\\n    chef.deposit(pid, amount);\\n    (, , , uint sushiPerShare) = chef.poolInfo(pid);\\n    uint id = encodeId(pid, sushiPerShare);\\n    _mint(msg.sender, id, amount, '');\\n    return id;\\n  }\\n\\n  /// @dev Burn ERC1155 token to redeem LP ERC20 token back plus SUSHI rewards.\\n  /// @param id Token id\\n  /// @param amount Token amount to burn\\n  /// @return The pool id that that you will receive LP token back.\\n  function burn(uint id, uint amount) external nonReentrant returns (uint) {\\n    if (amount == uint(-1)) {\\n      amount = balanceOf(msg.sender, id);\\n    }\\n    (uint pid, uint stSushiPerShare) = decodeId(id);\\n    _burn(msg.sender, id, amount);\\n    chef.withdraw(pid, amount);\\n    (address lpToken, , , uint enSushiPerShare) = chef.poolInfo(pid);\\n    IERC20(lpToken).safeTransfer(msg.sender, amount);\\n    uint stSushi = stSushiPerShare.mul(amount).divCeil(1e12);\\n    uint enSushi = enSushiPerShare.mul(amount).div(1e12);\\n    if (enSushi > stSushi) {\\n      sushi.safeTransfer(msg.sender, enSushi.sub(stSushi));\\n    }\\n    return pid;\\n  }\\n}\\n\"\r\n    },\r\n    \"./interfaces/IMasterChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IMasterChef {\\n  function sushi() external view returns (address);\\n\\n  function poolInfo(uint pid)\\n    external\\n    view\\n    returns (\\n      address lpToken,\\n      uint allocPoint,\\n      uint lastRewardBlock,\\n      uint accSushiPerShare\\n    );\\n\\n  function deposit(uint pid, uint amount) external;\\n\\n  function withdraw(uint pid, uint amount) external;\\n}\\n\"\r\n    },\r\n    \"./contracts/spell/UniswapV2SpellV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/IERC20.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/math/SafeMath.sol';\\n\\nimport './WhitelistSpell.sol';\\nimport '../utils/HomoraMath.sol';\\nimport '../../interfaces/IUniswapV2Factory.sol';\\nimport '../../interfaces/IUniswapV2Router02.sol';\\nimport '../../interfaces/IUniswapV2Pair.sol';\\nimport '../../interfaces/IWStakingRewards.sol';\\n\\ncontract UniswapV2SpellV1 is WhitelistSpell {\\n  using SafeMath for uint;\\n  using HomoraMath for uint;\\n\\n  IUniswapV2Factory public immutable factory; // Uniswap factory\\n  IUniswapV2Router02 public immutable router; // Uniswap router\\n\\n  mapping(address => mapping(address => address)) public pairs; // Mapping from tokenA to (mapping from tokenB to LP token)\\n\\n  constructor(\\n    IBank _bank,\\n    address _werc20,\\n    IUniswapV2Router02 _router\\n  ) public WhitelistSpell(_bank, _werc20, _router.WETH()) {\\n    router = _router;\\n    factory = IUniswapV2Factory(_router.factory());\\n  }\\n\\n  /// @dev Return the LP token for the token pairs (can be in any order)\\n  /// @param tokenA Token A to get LP token\\n  /// @param tokenB Token B to get LP token\\n  function getAndApprovePair(address tokenA, address tokenB) public returns (address) {\\n    address lp = pairs[tokenA][tokenB];\\n    if (lp == address(0)) {\\n      lp = factory.getPair(tokenA, tokenB);\\n      require(lp != address(0), 'no lp token');\\n      ensureApprove(tokenA, address(router));\\n      ensureApprove(tokenB, address(router));\\n      ensureApprove(lp, address(router));\\n      pairs[tokenA][tokenB] = lp;\\n      pairs[tokenB][tokenA] = lp;\\n    }\\n    return lp;\\n  }\\n\\n  /// @dev Compute optimal deposit amount\\n  /// @param amtA amount of token A desired to deposit\\n  /// @param amtB amount of token B desired to deposit\\n  /// @param resA amount of token A in reserve\\n  /// @param resB amount of token B in reserve\\n  function optimalDeposit(\\n    uint amtA,\\n    uint amtB,\\n    uint resA,\\n    uint resB\\n  ) internal pure returns (uint swapAmt, bool isReversed) {\\n    if (amtA.mul(resB) >= amtB.mul(resA)) {\\n      swapAmt = _optimalDepositA(amtA, amtB, resA, resB);\\n      isReversed = false;\\n    } else {\\n      swapAmt = _optimalDepositA(amtB, amtA, resB, resA);\\n      isReversed = true;\\n    }\\n  }\\n\\n  /// @dev Compute optimal deposit amount helper.\\n  /// @param amtA amount of token A desired to deposit\\n  /// @param amtB amount of token B desired to deposit\\n  /// @param resA amount of token A in reserve\\n  /// @param resB amount of token B in reserve\\n  /// Formula: https://blog.alphafinance.io/byot/\\n  function _optimalDepositA(\\n    uint amtA,\\n    uint amtB,\\n    uint resA,\\n    uint resB\\n  ) internal pure returns (uint) {\\n    require(amtA.mul(resB) >= amtB.mul(resA), 'Reversed');\\n    uint a = 997;\\n    uint b = uint(1997).mul(resA);\\n    uint _c = (amtA.mul(resB)).sub(amtB.mul(resA));\\n    uint c = _c.mul(1000).div(amtB.add(resB)).mul(resA);\\n    uint d = a.mul(c).mul(4);\\n    uint e = HomoraMath.sqrt(b.mul(b).add(d));\\n    uint numerator = e.sub(b);\\n    uint denominator = a.mul(2);\\n    return numerator.div(denominator);\\n  }\\n\\n  struct Amounts {\\n    uint amtAUser; // Supplied tokenA amount\\n    uint amtBUser; // Supplied tokenB amount\\n    uint amtLPUser; // Supplied LP token amount\\n    uint amtABorrow; // Borrow tokenA amount\\n    uint amtBBorrow; // Borrow tokenB amount\\n    uint amtLPBorrow; // Borrow LP token amount\\n    uint amtAMin; // Desired tokenA amount (slippage control)\\n    uint amtBMin; // Desired tokenB amount (slippage control)\\n  }\\n\\n  /// @dev Add liquidity to Uniswap pool\\n  /// @param tokenA Token A for the pair\\n  /// @param tokenB Token B for the pair\\n  /// @param amt Amounts of tokens to supply, borrow, and get.\\n  function addLiquidityInternal(\\n    address tokenA,\\n    address tokenB,\\n    Amounts calldata amt,\\n    address lp\\n  ) internal {\\n    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\\n\\n    // 1. Get user input amounts\\n    doTransmitETH();\\n    doTransmit(tokenA, amt.amtAUser);\\n    doTransmit(tokenB, amt.amtBUser);\\n    doTransmit(lp, amt.amtLPUser);\\n\\n    // 2. Borrow specified amounts\\n    doBorrow(tokenA, amt.amtABorrow);\\n    doBorrow(tokenB, amt.amtBBorrow);\\n    doBorrow(lp, amt.amtLPBorrow);\\n\\n    // 3. Calculate optimal swap amount\\n    uint swapAmt;\\n    bool isReversed;\\n    {\\n      uint amtA = IERC20(tokenA).balanceOf(address(this));\\n      uint amtB = IERC20(tokenB).balanceOf(address(this));\\n      uint resA;\\n      uint resB;\\n      if (IUniswapV2Pair(lp).token0() == tokenA) {\\n        (resA, resB, ) = IUniswapV2Pair(lp).getReserves();\\n      } else {\\n        (resB, resA, ) = IUniswapV2Pair(lp).getReserves();\\n      }\\n      (swapAmt, isReversed) = optimalDeposit(amtA, amtB, resA, resB);\\n    }\\n\\n    // 4. Swap optimal amount\\n    if (swapAmt > 0) {\\n      address[] memory path = new address[](2);\\n      (path[0], path[1]) = isReversed ? (tokenB, tokenA) : (tokenA, tokenB);\\n      router.swapExactTokensForTokens(swapAmt, 0, path, address(this), block.timestamp);\\n    }\\n\\n    // 5. Add liquidity\\n    uint balA = IERC20(tokenA).balanceOf(address(this));\\n    uint balB = IERC20(tokenB).balanceOf(address(this));\\n    if (balA > 0 || balB > 0) {\\n      router.addLiquidity(\\n        tokenA,\\n        tokenB,\\n        balA,\\n        balB,\\n        amt.amtAMin,\\n        amt.amtBMin,\\n        address(this),\\n        block.timestamp\\n      );\\n    }\\n  }\\n\\n  /// @dev Add liquidity to Uniswap pool, with no staking rewards (use WERC20 wrapper)\\n  /// @param tokenA Token A for the pair\\n  /// @param tokenB Token B for the pair\\n  /// @param amt Amounts of tokens to supply, borrow, and get.\\n  function addLiquidityWERC20(\\n    address tokenA,\\n    address tokenB,\\n    Amounts calldata amt\\n  ) external payable {\\n    address lp = getAndApprovePair(tokenA, tokenB);\\n    // 1-5. add liquidity\\n    addLiquidityInternal(tokenA, tokenB, amt, lp);\\n\\n    // 6. Put collateral\\n    doPutCollateral(lp, IERC20(lp).balanceOf(address(this)));\\n\\n    // 7. Refund leftovers to users\\n    doRefundETH();\\n    doRefund(tokenA);\\n    doRefund(tokenB);\\n  }\\n\\n  /// @dev Add liquidity to Uniswap pool, with staking rewards\\n  /// @param tokenA Token A for the pair\\n  /// @param tokenB Token B for the pair\\n  /// @param amt Amounts of tokens to supply, borrow, and get.\\n  /// @param wstaking Wrapped staking rewards address\\n  function addLiquidityWStakingRewards(\\n    address tokenA,\\n    address tokenB,\\n    Amounts calldata amt,\\n    address wstaking\\n  ) external payable {\\n    address lp = getAndApprovePair(tokenA, tokenB);\\n    address reward = IWStakingRewards(wstaking).reward();\\n\\n    // 1-5. add liquidity\\n    addLiquidityInternal(tokenA, tokenB, amt, lp);\\n\\n    // 6. Take out collateral\\n    (, address collToken, uint collId, uint collSize) = bank.getCurrentPositionInfo();\\n    if (collSize > 0) {\\n      require(IWStakingRewards(collToken).getUnderlyingToken(collId) == lp, 'incorrect underlying');\\n      require(collToken == wstaking, 'collateral token & wstaking mismatched');\\n      bank.takeCollateral(wstaking, collId, collSize);\\n      IWStakingRewards(wstaking).burn(collId, collSize);\\n    }\\n\\n    // 7. Put collateral\\n    ensureApprove(lp, wstaking);\\n    uint amount = IERC20(lp).balanceOf(address(this));\\n    uint id = IWStakingRewards(wstaking).mint(amount);\\n    if (!IWStakingRewards(wstaking).isApprovedForAll(address(this), address(bank))) {\\n      IWStakingRewards(wstaking).setApprovalForAll(address(bank), true);\\n    }\\n    bank.putCollateral(address(wstaking), id, amount);\\n\\n    // 8. Refund leftovers to users\\n    doRefundETH();\\n    doRefund(tokenA);\\n    doRefund(tokenB);\\n\\n    // 9. Refund reward\\n    doRefund(reward);\\n  }\\n\\n  struct RepayAmounts {\\n    uint amtLPTake; // Take out LP token amount (from Homora)\\n    uint amtLPWithdraw; // Withdraw LP token amount (back to caller)\\n    uint amtARepay; // Repay tokenA amount\\n    uint amtBRepay; // Repay tokenB amount\\n    uint amtLPRepay; // Repay LP token amount\\n    uint amtAMin; // Desired tokenA amount\\n    uint amtBMin; // Desired tokenB amount\\n  }\\n\\n  /// @dev Remove liquidity from Uniswap pool\\n  /// @param tokenA Token A for the pair\\n  /// @param tokenB Token B for the pair\\n  /// @param amt Amounts of tokens to take out, withdraw, repay, and get.\\n  function removeLiquidityInternal(\\n    address tokenA,\\n    address tokenB,\\n    RepayAmounts calldata amt,\\n    address lp\\n  ) internal {\\n    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\\n    uint positionId = bank.POSITION_ID();\\n\\n    uint amtARepay = amt.amtARepay;\\n    uint amtBRepay = amt.amtBRepay;\\n    uint amtLPRepay = amt.amtLPRepay;\\n\\n    // 2. Compute repay amount if MAX_INT is supplied (max debt)\\n    if (amtARepay == uint(-1)) {\\n      amtARepay = bank.borrowBalanceCurrent(positionId, tokenA);\\n    }\\n    if (amtBRepay == uint(-1)) {\\n      amtBRepay = bank.borrowBalanceCurrent(positionId, tokenB);\\n    }\\n    if (amtLPRepay == uint(-1)) {\\n      amtLPRepay = bank.borrowBalanceCurrent(positionId, lp);\\n    }\\n\\n    // 3. Compute amount to actually remove\\n    uint amtLPToRemove = IERC20(lp).balanceOf(address(this)).sub(amt.amtLPWithdraw);\\n\\n    // 4. Remove liquidity\\n    uint amtA;\\n    uint amtB;\\n    if (amtLPToRemove > 0) {\\n      (amtA, amtB) = router.removeLiquidity(\\n        tokenA,\\n        tokenB,\\n        amtLPToRemove,\\n        0,\\n        0,\\n        address(this),\\n        block.timestamp\\n      );\\n    }\\n\\n    // 5. MinimizeTrading\\n    uint amtADesired = amtARepay.add(amt.amtAMin);\\n    uint amtBDesired = amtBRepay.add(amt.amtBMin);\\n\\n    if (amtA < amtADesired && amtB > amtBDesired) {\\n      address[] memory path = new address[](2);\\n      (path[0], path[1]) = (tokenB, tokenA);\\n      router.swapTokensForExactTokens(\\n        amtADesired.sub(amtA),\\n        amtB.sub(amtBDesired),\\n        path,\\n        address(this),\\n        block.timestamp\\n      );\\n    } else if (amtA > amtADesired && amtB < amtBDesired) {\\n      address[] memory path = new address[](2);\\n      (path[0], path[1]) = (tokenA, tokenB);\\n      router.swapTokensForExactTokens(\\n        amtBDesired.sub(amtB),\\n        amtA.sub(amtADesired),\\n        path,\\n        address(this),\\n        block.timestamp\\n      );\\n    }\\n\\n    // 6. Repay\\n    doRepay(tokenA, amtARepay);\\n    doRepay(tokenB, amtBRepay);\\n    doRepay(lp, amtLPRepay);\\n\\n    // 7. Slippage control\\n    require(IERC20(tokenA).balanceOf(address(this)) >= amt.amtAMin);\\n    require(IERC20(tokenB).balanceOf(address(this)) >= amt.amtBMin);\\n    require(IERC20(lp).balanceOf(address(this)) >= amt.amtLPWithdraw);\\n\\n    // 8. Refund leftover\\n    doRefundETH();\\n    doRefund(tokenA);\\n    doRefund(tokenB);\\n    doRefund(lp);\\n  }\\n\\n  /// @dev Remove liquidity from Uniswap pool, with no staking rewards (use WERC20 wrapper)\\n  /// @param tokenA Token A for the pair\\n  /// @param tokenB Token B for the pair\\n  /// @param amt Amounts of tokens to take out, withdraw, repay, and get.\\n  function removeLiquidityWERC20(\\n    address tokenA,\\n    address tokenB,\\n    RepayAmounts calldata amt\\n  ) external {\\n    address lp = getAndApprovePair(tokenA, tokenB);\\n\\n    // 1. Take out collateral\\n    doTakeCollateral(lp, amt.amtLPTake);\\n\\n    // 2-8. remove liquidity\\n    removeLiquidityInternal(tokenA, tokenB, amt, lp);\\n  }\\n\\n  /// @dev Remove liquidity from Uniswap pool, from staking rewards\\n  /// @param tokenA Token A for the pair\\n  /// @param tokenB Token B for the pair\\n  /// @param amt Amounts of tokens to take out, withdraw, repay, and get.\\n  function removeLiquidityWStakingRewards(\\n    address tokenA,\\n    address tokenB,\\n    RepayAmounts calldata amt,\\n    address wstaking\\n  ) external {\\n    address lp = getAndApprovePair(tokenA, tokenB);\\n    (, address collToken, uint collId, ) = bank.getCurrentPositionInfo();\\n    address reward = IWStakingRewards(wstaking).reward();\\n\\n    // 1. Take out collateral\\n    require(IWStakingRewards(collToken).getUnderlyingToken(collId) == lp, 'incorrect underlying');\\n    require(collToken == wstaking, 'collateral token & wstaking mismatched');\\n    bank.takeCollateral(wstaking, collId, amt.amtLPTake);\\n    IWStakingRewards(wstaking).burn(collId, amt.amtLPTake);\\n\\n    // 2-8. remove liquidity\\n    removeLiquidityInternal(tokenA, tokenB, amt, lp);\\n\\n    // 9. Refund reward\\n    doRefund(reward);\\n  }\\n\\n  /// @dev Harvest staking reward tokens to in-exec position's owner\\n  /// @param wstaking Wrapped staking rewards address\\n  function harvestWStakingRewards(address wstaking) external {\\n    address reward = IWStakingRewards(wstaking).reward();\\n    (, address collToken, uint collId, ) = bank.getCurrentPositionInfo();\\n    address lp = IWStakingRewards(wstaking).getUnderlyingToken(collId);\\n    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\\n    require(collToken == wstaking, 'collateral token & wstaking mismatched');\\n\\n    // 1. Take out collateral\\n    bank.takeCollateral(wstaking, collId, uint(-1));\\n    IWStakingRewards(wstaking).burn(collId, uint(-1));\\n\\n    // 2. put collateral\\n    uint amount = IERC20(lp).balanceOf(address(this));\\n    ensureApprove(lp, wstaking);\\n    uint id = IWStakingRewards(wstaking).mint(amount);\\n    bank.putCollateral(wstaking, id, amount);\\n\\n    // 3. Refund reward\\n    doRefund(reward);\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/spell/WhitelistSpell.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport './BasicSpell.sol';\\nimport '../Governable.sol';\\n\\ncontract WhitelistSpell is BasicSpell, Governable {\\n  mapping(address => bool) public whitelistedLpTokens; // mapping from lp token to whitelist status\\n\\n  constructor(\\n    IBank _bank,\\n    address _werc20,\\n    address _weth\\n  ) public BasicSpell(_bank, _werc20, _weth) {\\n    __Governable__init();\\n  }\\n\\n  /// @dev Set whitelist LP token statuses for spell\\n  /// @param lpTokens LP tokens to set whitelist statuses\\n  /// @param statuses Whitelist statuses\\n  function setWhitelistLPTokens(address[] calldata lpTokens, bool[] calldata statuses)\\n    external\\n    onlyGov\\n  {\\n    require(lpTokens.length == statuses.length, 'lpTokens & statuses length mismatched');\\n    for (uint idx = 0; idx < lpTokens.length; idx++) {\\n      if (statuses[idx]) {\\n        require(bank.support(lpTokens[idx]), 'oracle not support lp token');\\n      }\\n      whitelistedLpTokens[lpTokens[idx]] = statuses[idx];\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/spell/BasicSpell.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/IERC20.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/SafeERC20.sol';\\n\\nimport '../utils/ERC1155NaiveReceiver.sol';\\nimport '../../interfaces/IBank.sol';\\nimport '../../interfaces/IWERC20.sol';\\nimport '../../interfaces/IWETH.sol';\\n\\nabstract contract BasicSpell is ERC1155NaiveReceiver {\\n  using SafeERC20 for IERC20;\\n\\n  IBank public immutable bank;\\n  IWERC20 public immutable werc20;\\n  address public immutable weth;\\n\\n  mapping(address => mapping(address => bool)) public approved; // Mapping from token to (mapping from spender to approve status)\\n\\n  constructor(\\n    IBank _bank,\\n    address _werc20,\\n    address _weth\\n  ) public {\\n    bank = _bank;\\n    werc20 = IWERC20(_werc20);\\n    weth = _weth;\\n    ensureApprove(_weth, address(_bank));\\n    IWERC20(_werc20).setApprovalForAll(address(_bank), true);\\n  }\\n\\n  /// @dev Ensure that the spell has approved the given spender to spend all of its tokens.\\n  /// @param token The token to approve.\\n  /// @param spender The spender to allow spending.\\n  /// NOTE: This is safe because spell is never built to hold fund custody.\\n  function ensureApprove(address token, address spender) internal {\\n    if (!approved[token][spender]) {\\n      IERC20(token).safeApprove(spender, uint(-1));\\n      approved[token][spender] = true;\\n    }\\n  }\\n\\n  /// @dev Internal call to convert msg.value ETH to WETH inside the contract.\\n  function doTransmitETH() internal {\\n    if (msg.value > 0) {\\n      IWETH(weth).deposit{value: msg.value}();\\n    }\\n  }\\n\\n  /// @dev Internal call to transmit tokens from the bank if amount is positive.\\n  /// @param token The token to perform the transmit action.\\n  /// @param amount The amount to transmit.\\n  /// @notice Do not use `amount` input argument to handle the received amount.\\n  function doTransmit(address token, uint amount) internal {\\n    if (amount > 0) {\\n      bank.transmit(token, amount);\\n    }\\n  }\\n\\n  /// @dev Internal call to refund tokens to the current bank executor.\\n  /// @param token The token to perform the refund action.\\n  function doRefund(address token) internal {\\n    uint balance = IERC20(token).balanceOf(address(this));\\n    if (balance > 0) {\\n      IERC20(token).safeTransfer(bank.EXECUTOR(), balance);\\n    }\\n  }\\n\\n  /// @dev Internal call to refund all WETH to the current executor as native ETH.\\n  function doRefundETH() internal {\\n    uint balance = IWETH(weth).balanceOf(address(this));\\n    if (balance > 0) {\\n      IWETH(weth).withdraw(balance);\\n      (bool success, ) = bank.EXECUTOR().call{value: balance}(new bytes(0));\\n      require(success, 'refund ETH failed');\\n    }\\n  }\\n\\n  /// @dev Internal call to borrow tokens from the bank on behalf of the current executor.\\n  /// @param token The token to borrow from the bank.\\n  /// @param amount The amount to borrow.\\n  /// @notice Do not use `amount` input argument to handle the received amount.\\n  function doBorrow(address token, uint amount) internal {\\n    if (amount > 0) {\\n      bank.borrow(token, amount);\\n    }\\n  }\\n\\n  /// @dev Internal call to repay tokens to the bank on behalf of the current executor.\\n  /// @param token The token to repay to the bank.\\n  /// @param amount The amount to repay.\\n  function doRepay(address token, uint amount) internal {\\n    if (amount > 0) {\\n      ensureApprove(token, address(bank));\\n      bank.repay(token, amount);\\n    }\\n  }\\n\\n  /// @dev Internal call to put collateral tokens in the bank.\\n  /// @param token The token to put in the bank.\\n  /// @param amount The amount to put in the bank.\\n  function doPutCollateral(address token, uint amount) internal {\\n    if (amount > 0) {\\n      ensureApprove(token, address(werc20));\\n      werc20.mint(token, amount);\\n      bank.putCollateral(address(werc20), uint(token), amount);\\n    }\\n  }\\n\\n  /// @dev Internal call to take collateral tokens from the bank.\\n  /// @param token The token to take back.\\n  /// @param amount The amount to take back.\\n  function doTakeCollateral(address token, uint amount) internal {\\n    if (amount > 0) {\\n      if (amount == uint(-1)) {\\n        (, , , amount) = bank.getCurrentPositionInfo();\\n      }\\n      bank.takeCollateral(address(werc20), uint(token), amount);\\n      werc20.burn(token, amount);\\n    }\\n  }\\n\\n  /// @dev Fallback function. Can only receive ETH from WETH contract.\\n  receive() external payable {\\n    require(msg.sender == weth, 'ETH must come from WETH');\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/utils/ERC1155NaiveReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC1155/ERC1155Receiver.sol';\\n\\ncontract ERC1155NaiveReceiver is ERC1155Receiver {\\n  bytes32[64] __gap; // reserve space for upgrade\\n\\n  function onERC1155Received(\\n    address operator,\\n    address from,\\n    uint id,\\n    uint value,\\n    bytes calldata data\\n  ) external override returns (bytes4) {\\n    return this.onERC1155Received.selector;\\n  }\\n\\n  function onERC1155BatchReceived(\\n    address operator,\\n    address from,\\n    uint[] calldata ids,\\n    uint[] calldata values,\\n    bytes calldata data\\n  ) external override returns (bytes4) {\\n    return this.onERC1155BatchReceived.selector;\\n  }\\n}\\n\"\r\n    },\r\n    \"./interfaces/IBank.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IBank {\\n  /// The governor adds a new bank gets added to the system.\\n  event AddBank(address token, address cToken);\\n  /// The governor sets the address of the oracle smart contract.\\n  event SetOracle(address oracle);\\n  /// The governor sets the basis point fee of the bank.\\n  event SetFeeBps(uint feeBps);\\n  /// The governor withdraw tokens from the reserve of a bank.\\n  event WithdrawReserve(address user, address token, uint amount);\\n  /// Someone borrows tokens from a bank via a spell caller.\\n  event Borrow(uint positionId, address caller, address token, uint amount, uint share);\\n  /// Someone repays tokens to a bank via a spell caller.\\n  event Repay(uint positionId, address caller, address token, uint amount, uint share);\\n  /// Someone puts tokens as collateral via a spell caller.\\n  event PutCollateral(uint positionId, address caller, address token, uint id, uint amount);\\n  /// Someone takes tokens from collateral via a spell caller.\\n  event TakeCollateral(uint positionId, address caller, address token, uint id, uint amount);\\n  /// Someone calls liquidatation on a position, paying debt and taking collateral tokens.\\n  event Liquidate(\\n    uint positionId,\\n    address liquidator,\\n    address debtToken,\\n    uint amount,\\n    uint share,\\n    uint bounty\\n  );\\n\\n  /// @dev Return the current position while under execution.\\n  function POSITION_ID() external view returns (uint);\\n\\n  /// @dev Return the current target while under execution.\\n  function SPELL() external view returns (address);\\n\\n  /// @dev Return the current executor (the owner of the current position).\\n  function EXECUTOR() external view returns (address);\\n\\n  /// @dev Return bank information for the given token.\\n  function getBankInfo(address token)\\n    external\\n    view\\n    returns (\\n      bool isListed,\\n      address cToken,\\n      uint reserve,\\n      uint totalDebt,\\n      uint totalShare\\n    );\\n\\n  /// @dev Return position information for the given position id.\\n  function getPositionInfo(uint positionId)\\n    external\\n    view\\n    returns (\\n      address owner,\\n      address collToken,\\n      uint collId,\\n      uint collateralSize\\n    );\\n\\n  /// @dev Return the borrow balance for given positon and token without trigger interest accrual.\\n  function borrowBalanceStored(uint positionId, address token) external view returns (uint);\\n\\n  /// @dev Trigger interest accrual and return the current borrow balance.\\n  function borrowBalanceCurrent(uint positionId, address token) external returns (uint);\\n\\n  /// @dev Borrow tokens from the bank.\\n  function borrow(address token, uint amount) external;\\n\\n  /// @dev Repays tokens to the bank.\\n  function repay(address token, uint amountCall) external;\\n\\n  /// @dev Transmit user assets to the spell.\\n  function transmit(address token, uint amount) external;\\n\\n  /// @dev Put more collateral for users.\\n  function putCollateral(\\n    address collToken,\\n    uint collId,\\n    uint amountCall\\n  ) external;\\n\\n  /// @dev Take some collateral back.\\n  function takeCollateral(\\n    address collToken,\\n    uint collId,\\n    uint amount\\n  ) external;\\n\\n  /// @dev Liquidate a position.\\n  function liquidate(\\n    uint positionId,\\n    address debtToken,\\n    uint amountCall\\n  ) external;\\n\\n  function getBorrowETHValue(uint positionId) external view returns (uint);\\n\\n  function accrue(address token) external;\\n\\n  function nextPositionId() external view returns (uint);\\n\\n  /// @dev Return current position information.\\n  function getCurrentPositionInfo()\\n    external\\n    view\\n    returns (\\n      address owner,\\n      address collToken,\\n      uint collId,\\n      uint collateralSize\\n    );\\n\\n  function support(address token) external view returns (bool);\\n\\n}\\n\"\r\n    },\r\n    \"./interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IWETH {\\n  function balanceOf(address user) external returns (uint);\\n\\n  function approve(address to, uint value) external returns (bool);\\n\\n  function transfer(address to, uint value) external returns (bool);\\n\\n  function deposit() external payable;\\n\\n  function withdraw(uint) external;\\n}\\n\"\r\n    },\r\n    \"./interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\n// https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Factory.sol\\n\\ninterface IUniswapV2Factory {\\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n  function feeTo() external view returns (address);\\n\\n  function feeToSetter() external view returns (address);\\n\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n  function allPairs(uint) external view returns (address pair);\\n\\n  function allPairsLength() external view returns (uint);\\n\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n  function setFeeTo(address) external;\\n\\n  function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"./interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\n// https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"./interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\n// https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\\n\\ninterface IUniswapV2Router01 {\\n  function factory() external pure returns (address);\\n\\n  function WETH() external pure returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (\\n      uint amountA,\\n      uint amountB,\\n      uint liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint amountTokenDesired,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint amountToken,\\n      uint amountETH,\\n      uint liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountA, uint amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountToken, uint amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint amountA, uint amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint amountToken, uint amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external payable returns (uint[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external payable returns (uint[] memory amounts);\\n\\n  function quote(\\n    uint amountA,\\n    uint reserveA,\\n    uint reserveB\\n  ) external pure returns (uint amountB);\\n\\n  function getAmountOut(\\n    uint amountIn,\\n    uint reserveIn,\\n    uint reserveOut\\n  ) external pure returns (uint amountOut);\\n\\n  function getAmountIn(\\n    uint amountOut,\\n    uint reserveIn,\\n    uint reserveOut\\n  ) external pure returns (uint amountIn);\\n\\n  function getAmountsOut(uint amountIn, address[] calldata path)\\n    external\\n    view\\n    returns (uint[] memory amounts);\\n\\n  function getAmountsIn(uint amountOut, address[] calldata path)\\n    external\\n    view\\n    returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"./interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\n// https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Pair.sol\\n\\ninterface IUniswapV2Pair {\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  function name() external pure returns (string memory);\\n\\n  function symbol() external pure returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint);\\n\\n  function balanceOf(address owner) external view returns (uint);\\n\\n  function allowance(address owner, address spender) external view returns (uint);\\n\\n  function approve(address spender, uint value) external returns (bool);\\n\\n  function transfer(address to, uint value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint value\\n  ) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  function nonces(address owner) external view returns (uint);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint value,\\n    uint deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  event Mint(address indexed sender, uint amount0, uint amount1);\\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n  event Swap(\\n    address indexed sender,\\n    uint amount0In,\\n    uint amount1In,\\n    uint amount0Out,\\n    uint amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\\n\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint);\\n\\n  function price1CumulativeLast() external view returns (uint);\\n\\n  function kLast() external view returns (uint);\\n\\n  function mint(address to) external returns (uint liquidity);\\n\\n  function burn(address to) external returns (uint amount0, uint amount1);\\n\\n  function swap(\\n    uint amount0Out,\\n    uint amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n\\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"./interfaces/IWStakingRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC1155/IERC1155.sol';\\n\\nimport './IERC20Wrapper.sol';\\n\\ninterface IWStakingRewards is IERC1155, IERC20Wrapper {\\n  /// @dev Mint ERC1155 token for the given ERC20 token.\\n  function mint(uint amount) external returns (uint id);\\n\\n  /// @dev Burn ERC1155 token to redeem ERC20 token back.\\n  function burn(uint id, uint amount) external returns (uint);\\n\\n  function reward() external returns (address);\\n}\\n\"\r\n    },\r\n    \"./contracts/spell/CurveSpellV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/IERC20.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/math/SafeMath.sol';\\n\\nimport './WhitelistSpell.sol';\\nimport '../utils/HomoraMath.sol';\\nimport '../../interfaces/ICurvePool.sol';\\nimport '../../interfaces/ICurveRegistry.sol';\\nimport '../../interfaces/IWLiquidityGauge.sol';\\n\\ncontract CurveSpellV1 is WhitelistSpell {\\n  using SafeMath for uint;\\n  using HomoraMath for uint;\\n\\n  ICurveRegistry public immutable registry; // Curve registry\\n  IWLiquidityGauge public immutable wgauge; // Wrapped liquidity gauge\\n  address public immutable crv; // CRV token address\\n  mapping(address => address[]) public ulTokens; // Mapping from LP token address -> underlying token addresses\\n  mapping(address => address) public poolOf; // Mapping from LP token address to -> pool address\\n\\n  constructor(\\n    IBank _bank,\\n    address _werc20,\\n    address _weth,\\n    address _wgauge\\n  ) public WhitelistSpell(_bank, _werc20, _weth) {\\n    wgauge = IWLiquidityGauge(_wgauge);\\n    IWLiquidityGauge(_wgauge).setApprovalForAll(address(_bank), true);\\n    registry = IWLiquidityGauge(_wgauge).registry();\\n    crv = address(IWLiquidityGauge(_wgauge).crv());\\n  }\\n\\n  /// @dev Return pool address given LP token and update pool info if not exist.\\n  /// @param lp LP token to find the corresponding pool.\\n  function getPool(address lp) public returns (address) {\\n    address pool = poolOf[lp];\\n    if (pool == address(0)) {\\n      require(lp != address(0), 'no lp token');\\n      pool = registry.get_pool_from_lp_token(lp);\\n      require(pool != address(0), 'no corresponding pool for lp token');\\n      poolOf[lp] = pool;\\n      (uint n, ) = registry.get_n_coins(pool);\\n      address[8] memory tokens = registry.get_coins(pool);\\n      ulTokens[lp] = new address[](n);\\n      for (uint i = 0; i < n; i++) {\\n        ulTokens[lp][i] = tokens[i];\\n      }\\n    }\\n    return pool;\\n  }\\n\\n  /// @dev Ensure approval of underlying tokens to the corresponding Curve pool\\n  /// @param lp LP token for the pool\\n  /// @param n Number of pool's underlying tokens\\n  function ensureApproveN(address lp, uint n) public {\\n    require(ulTokens[lp].length == n, 'incorrect pool length');\\n    address pool = poolOf[lp];\\n    address[] memory tokens = ulTokens[lp];\\n    for (uint idx = 0; idx < n; idx++) {\\n      ensureApprove(tokens[idx], pool);\\n    }\\n  }\\n\\n  /// @dev Add liquidity to Curve pool with 2 underlying tokens, with staking to Curve gauge\\n  /// @param lp LP token for the pool\\n  /// @param amtsUser Supplied underlying token amounts\\n  /// @param amtLPUser Supplied LP token amount\\n  /// @param amtsBorrow Borrow underlying token amounts\\n  /// @param amtLPBorrow Borrow LP token amount\\n  /// @param minLPMint Desired LP token amount (slippage control)\\n  /// @param pid Curve pool id for the pool\\n  /// @param gid Curve gauge id for the pool\\n  function addLiquidity2(\\n    address lp,\\n    uint[2] calldata amtsUser,\\n    uint amtLPUser,\\n    uint[2] calldata amtsBorrow,\\n    uint amtLPBorrow,\\n    uint minLPMint,\\n    uint pid,\\n    uint gid\\n  ) external {\\n    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\\n    address pool = getPool(lp);\\n    require(ulTokens[lp].length == 2, 'incorrect pool length');\\n    require(wgauge.getUnderlyingTokenFromIds(pid, gid) == lp, 'incorrect underlying');\\n    address[] memory tokens = ulTokens[lp];\\n\\n    // 0. Take out collateral\\n    (, address collToken, uint collId, uint collSize) = bank.getCurrentPositionInfo();\\n    if (collSize > 0) {\\n      (uint decodedPid, uint decodedGid, ) = wgauge.decodeId(collId);\\n      require(decodedPid == pid && decodedGid == gid, 'bad pid or gid');\\n      require(collToken == address(wgauge), 'collateral token & wgauge mismatched');\\n      bank.takeCollateral(address(wgauge), collId, collSize);\\n      wgauge.burn(collId, collSize);\\n    }\\n\\n    // 1. Ensure approve 2 underlying tokens\\n    ensureApproveN(lp, 2);\\n\\n    // 2. Get user input amounts\\n    for (uint i = 0; i < 2; i++) doTransmit(tokens[i], amtsUser[i]);\\n    doTransmit(lp, amtLPUser);\\n\\n    // 3. Borrow specified amounts\\n    for (uint i = 0; i < 2; i++) doBorrow(tokens[i], amtsBorrow[i]);\\n    doBorrow(lp, amtLPBorrow);\\n\\n    // 4. add liquidity\\n    uint[2] memory suppliedAmts;\\n    for (uint i = 0; i < 2; i++) {\\n      suppliedAmts[i] = IERC20(tokens[i]).balanceOf(address(this));\\n    }\\n    if (suppliedAmts[0] > 0 || suppliedAmts[1] > 0) {\\n      ICurvePool(pool).add_liquidity(suppliedAmts, minLPMint);\\n    }\\n\\n    // 5. Put collateral\\n    ensureApprove(lp, address(wgauge));\\n    {\\n      uint amount = IERC20(lp).balanceOf(address(this));\\n      uint id = wgauge.mint(pid, gid, amount);\\n      bank.putCollateral(address(wgauge), id, amount);\\n    }\\n\\n    // 6. Refund\\n    for (uint i = 0; i < 2; i++) doRefund(tokens[i]);\\n\\n    // 7. Refund crv\\n    doRefund(crv);\\n  }\\n\\n  /// @dev Add liquidity to Curve pool with 3 underlying tokens, with staking to Curve gauge\\n  /// @param lp LP token for the pool\\n  /// @param amtsUser Supplied underlying token amounts\\n  /// @param amtLPUser Supplied LP token amount\\n  /// @param amtsBorrow Borrow underlying token amounts\\n  /// @param amtLPBorrow Borrow LP token amount\\n  /// @param minLPMint Desired LP token amount (slippage control)\\n  /// @param pid CUrve pool id for the pool\\n  /// @param gid Curve gauge id for the pool\\n  function addLiquidity3(\\n    address lp,\\n    uint[3] calldata amtsUser,\\n    uint amtLPUser,\\n    uint[3] calldata amtsBorrow,\\n    uint amtLPBorrow,\\n    uint minLPMint,\\n    uint pid,\\n    uint gid\\n  ) external {\\n    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\\n    address pool = getPool(lp);\\n    require(ulTokens[lp].length == 3, 'incorrect pool length');\\n    require(wgauge.getUnderlyingTokenFromIds(pid, gid) == lp, 'incorrect underlying');\\n    address[] memory tokens = ulTokens[lp];\\n\\n    // 0. take out collateral\\n    (, address collToken, uint collId, uint collSize) = bank.getCurrentPositionInfo();\\n    if (collSize > 0) {\\n      (uint decodedPid, uint decodedGid, ) = wgauge.decodeId(collId);\\n      require(decodedPid == pid && decodedGid == gid, 'incorrect coll id');\\n      require(collToken == address(wgauge), 'collateral token & wgauge mismatched');\\n      bank.takeCollateral(address(wgauge), collId, collSize);\\n      wgauge.burn(collId, collSize);\\n    }\\n\\n    // 1. Ensure approve 3 underlying tokens\\n    ensureApproveN(lp, 3);\\n\\n    // 2. Get user input amounts\\n    for (uint i = 0; i < 3; i++) doTransmit(tokens[i], amtsUser[i]);\\n    doTransmit(lp, amtLPUser);\\n\\n    // 3. Borrow specified amounts\\n    for (uint i = 0; i < 3; i++) doBorrow(tokens[i], amtsBorrow[i]);\\n    doBorrow(lp, amtLPBorrow);\\n\\n    // 4. add liquidity\\n    uint[3] memory suppliedAmts;\\n    for (uint i = 0; i < 3; i++) {\\n      suppliedAmts[i] = IERC20(tokens[i]).balanceOf(address(this));\\n    }\\n    if (suppliedAmts[0] > 0 || suppliedAmts[1] > 0 || suppliedAmts[2] > 0) {\\n      ICurvePool(pool).add_liquidity(suppliedAmts, minLPMint);\\n    }\\n\\n    // 5. put collateral\\n    ensureApprove(lp, address(wgauge));\\n    {\\n      uint amount = IERC20(lp).balanceOf(address(this));\\n      uint id = wgauge.mint(pid, gid, amount);\\n      bank.putCollateral(address(wgauge), id, amount);\\n    }\\n\\n    // 6. Refund\\n    for (uint i = 0; i < 3; i++) doRefund(tokens[i]);\\n\\n    // 7. Refund crv\\n    doRefund(crv);\\n  }\\n\\n  /// @dev Add liquidity to Curve pool with 4 underlying tokens, with staking to Curve gauge\\n  /// @param lp LP token for the pool\\n  /// @param amtsUser Supplied underlying token amounts\\n  /// @param amtLPUser Supplied LP token amount\\n  /// @param amtsBorrow Borrow underlying token amounts\\n  /// @param amtLPBorrow Borrow LP token amount\\n  /// @param minLPMint Desired LP token amount (slippage control)\\n  /// @param pid CUrve pool id for the pool\\n  /// @param gid Curve gauge id for the pool\\n  function addLiquidity4(\\n    address lp,\\n    uint[4] calldata amtsUser,\\n    uint amtLPUser,\\n    uint[4] calldata amtsBorrow,\\n    uint amtLPBorrow,\\n    uint minLPMint,\\n    uint pid,\\n    uint gid\\n  ) external {\\n    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\\n    address pool = getPool(lp);\\n    require(ulTokens[lp].length == 4, 'incorrect pool length');\\n    require(wgauge.getUnderlyingTokenFromIds(pid, gid) == lp, 'incorrect underlying');\\n    address[] memory tokens = ulTokens[lp];\\n\\n    // 0. Take out collateral\\n    (, address collToken, uint collId, uint collSize) = bank.getCurrentPositionInfo();\\n    if (collSize > 0) {\\n      (uint decodedPid, uint decodedGid, ) = wgauge.decodeId(collId);\\n      require(decodedPid == pid && decodedGid == gid, 'incorrect coll id');\\n      require(collToken == address(wgauge), 'collateral token & wgauge mismatched');\\n      bank.takeCollateral(address(wgauge), collId, collSize);\\n      wgauge.burn(collId, collSize);\\n    }\\n\\n    // 1. Ensure approve 4 underlying tokens\\n    ensureApproveN(lp, 4);\\n\\n    // 2. Get user input amounts\\n    for (uint i = 0; i < 4; i++) doTransmit(tokens[i], amtsUser[i]);\\n    doTransmit(lp, amtLPUser);\\n\\n    // 3. Borrow specified amounts\\n    for (uint i = 0; i < 4; i++) doBorrow(tokens[i], amtsBorrow[i]);\\n    doBorrow(lp, amtLPBorrow);\\n\\n    // 4. add liquidity\\n    uint[4] memory suppliedAmts;\\n    for (uint i = 0; i < 4; i++) {\\n      suppliedAmts[i] = IERC20(tokens[i]).balanceOf(address(this));\\n    }\\n    if (suppliedAmts[0] > 0 || suppliedAmts[1] > 0 || suppliedAmts[2] > 0 || suppliedAmts[3] > 0) {\\n      ICurvePool(pool).add_liquidity(suppliedAmts, minLPMint);\\n    }\\n\\n    // 5. Put collateral\\n    ensureApprove(lp, address(wgauge));\\n    {\\n      uint amount = IERC20(lp).balanceOf(address(this));\\n      uint id = wgauge.mint(pid, gid, amount);\\n      bank.putCollateral(address(wgauge), id, amount);\\n    }\\n\\n    // 6. Refund\\n    for (uint i = 0; i < 4; i++) doRefund(tokens[i]);\\n\\n    // 7. Refund crv\\n    doRefund(crv);\\n  }\\n\\n  /// @dev Remove liquidity from Curve pool with 2 underlying tokens\\n  /// @param lp LP token for the pool\\n  /// @param amtLPTake Take out LP token amount (from Homora)\\n  /// @param amtLPWithdraw Withdraw LP token amount (back to caller)\\n  /// @param amtsRepay Repay underlying token amounts\\n  /// @param amtLPRepay Repay LP token amount\\n  /// @param amtsMin Desired underlying token amounts (slippage control)\\n  function removeLiquidity2(\\n    address lp,\\n    uint amtLPTake,\\n    uint amtLPWithdraw,\\n    uint[2] calldata amtsRepay,\\n    uint amtLPRepay,\\n    uint[2] calldata amtsMin\\n  ) external {\\n    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\\n    address pool = getPool(lp);\\n    uint positionId = bank.POSITION_ID();\\n    (, address collToken, uint collId, ) = bank.getPositionInfo(positionId);\\n    require(IWLiquidityGauge(collToken).getUnderlyingToken(collId) == lp, 'incorrect underlying');\\n    require(collToken == address(wgauge), 'collateral token & wgauge mismatched');\\n    address[] memory tokens = ulTokens[lp];\\n\\n    // 0. Ensure approve\\n    ensureApproveN(lp, 2);\\n\\n    // 1. Compute repay amount if MAX_INT is supplied (max debt)\\n    uint[2] memory actualAmtsRepay;\\n    for (uint i = 0; i < 2; i++) {\\n      actualAmtsRepay[i] = amtsRepay[i] == uint(-1)\\n        ? bank.borrowBalanceCurrent(positionId, tokens[i])\\n        : amtsRepay[i];\\n    }\\n    uint[2] memory amtsDesired;\\n    for (uint i = 0; i < 2; i++) {\\n      amtsDesired[i] = actualAmtsRepay[i].add(amtsMin[i]); // repay amt + slippage control\\n    }\\n\\n    // 2. Take out collateral\\n    bank.takeCollateral(address(wgauge), collId, amtLPTake);\\n    wgauge.burn(collId, amtLPTake);\\n\\n    // 3. Compute amount to actually remove. Remove to repay just enough\\n    uint amtLPToRemove;\\n    if (amtsDesired[0] > 0 || amtsDesired[1] > 0) {\\n      amtLPToRemove = IERC20(lp).balanceOf(address(this)).sub(amtLPWithdraw);\\n      ICurvePool(pool).remove_liquidity_imbalance(amtsDesired, amtLPToRemove);\\n    }\\n\\n    // 4. Compute leftover amount to remove. Remove balancedly.\\n    amtLPToRemove = IERC20(lp).balanceOf(address(this)).sub(amtLPWithdraw);\\n    if (amtLPToRemove > 0) {\\n      uint[2] memory mins;\\n      ICurvePool(pool).remove_liquidity(amtLPToRemove, mins);\\n    }\\n    // 5. Repay\\n    for (uint i = 0; i < 2; i++) {\\n      doRepay(tokens[i], actualAmtsRepay[i]);\\n    }\\n    doRepay(lp, amtLPRepay);\\n\\n    // 6. Refund\\n    for (uint i = 0; i < 2; i++) {\\n      doRefund(tokens[i]);\\n    }\\n    doRefund(lp);\\n\\n    // 7. Refund crv\\n    doRefund(crv);\\n  }\\n\\n  /// @dev Remove liquidity from Curve pool with 3 underlying tokens\\n  /// @param lp LP token for the pool\\n  /// @param amtLPTake Take out LP token amount (from Homora)\\n  /// @param amtLPWithdraw Withdraw LP token amount (back to caller)\\n  /// @param amtsRepay Repay underlying token amounts\\n  /// @param amtLPRepay Repay LP token amount\\n  /// @param amtsMin Desired underlying token amounts (slippage control)\\n  function removeLiquidity3(\\n    address lp,\\n    uint amtLPTake,\\n    uint amtLPWithdraw,\\n    uint[3] calldata amtsRepay,\\n    uint amtLPRepay,\\n    uint[3] calldata amtsMin\\n  ) external {\\n    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\\n    address pool = getPool(lp);\\n    uint positionId = bank.POSITION_ID();\\n    (, address collToken, uint collId, ) = bank.getPositionInfo(positionId);\\n    require(IWLiquidityGauge(collToken).getUnderlyingToken(collId) == lp, 'incorrect underlying');\\n    require(collToken == address(wgauge), 'collateral token & wgauge mismatched');\\n    address[] memory tokens = ulTokens[lp];\\n\\n    // 0. Ensure approve\\n    ensureApproveN(lp, 3);\\n\\n    // 1. Compute repay amount if MAX_INT is supplied (max debt)\\n    uint[3] memory actualAmtsRepay;\\n    for (uint i = 0; i < 3; i++) {\\n      actualAmtsRepay[i] = amtsRepay[i] == uint(-1)\\n        ? bank.borrowBalanceCurrent(positionId, tokens[i])\\n        : amtsRepay[i];\\n    }\\n    uint[3] memory amtsDesired;\\n    for (uint i = 0; i < 3; i++) {\\n      amtsDesired[i] = actualAmtsRepay[i].add(amtsMin[i]); // repay amt + slippage control\\n    }\\n\\n    // 2. Take out collateral\\n    bank.takeCollateral(address(wgauge), collId, amtLPTake);\\n    wgauge.burn(collId, amtLPTake);\\n\\n    // 3. Compute amount to actually remove. Remove to repay just enough\\n    uint amtLPToRemove;\\n    if (amtsDesired[0] > 0 || amtsDesired[1] > 0 || amtsDesired[2] > 0) {\\n      amtLPToRemove = IERC20(lp).balanceOf(address(this)).sub(amtLPWithdraw);\\n      ICurvePool(pool).remove_liquidity_imbalance(amtsDesired, amtLPToRemove);\\n    }\\n\\n    // 4. Compute leftover amount to remove. Remove balancedly.\\n    amtLPToRemove = IERC20(lp).balanceOf(address(this)).sub(amtLPWithdraw);\\n    if (amtLPToRemove > 0) {\\n      uint[3] memory mins;\\n      ICurvePool(pool).remove_liquidity(amtLPToRemove, mins);\\n    }\\n\\n    // 5. Repay\\n    for (uint i = 0; i < 3; i++) {\\n      doRepay(tokens[i], actualAmtsRepay[i]);\\n    }\\n    doRepay(lp, amtLPRepay);\\n\\n    // 6. Refund\\n    for (uint i = 0; i < 3; i++) {\\n      doRefund(tokens[i]);\\n    }\\n    doRefund(lp);\\n\\n    // 7. Refund crv\\n    doRefund(crv);\\n  }\\n\\n  /// @dev Remove liquidity from Curve pool with 4 underlying tokens\\n  /// @param lp LP token for the pool\\n  /// @param amtLPTake Take out LP token amount (from Homora)\\n  /// @param amtLPWithdraw Withdraw LP token amount (back to caller)\\n  /// @param amtsRepay Repay underlying token amounts\\n  /// @param amtLPRepay Repay LP token amount\\n  /// @param amtsMin Desired underlying token amounts (slippage control)\\n  function removeLiquidity4(\\n    address lp,\\n    uint amtLPTake,\\n    uint amtLPWithdraw,\\n    uint[4] calldata amtsRepay,\\n    uint amtLPRepay,\\n    uint[4] calldata amtsMin\\n  ) external {\\n    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\\n    address pool = getPool(lp);\\n    uint positionId = bank.POSITION_ID();\\n    (, address collToken, uint collId, ) = bank.getPositionInfo(positionId);\\n    require(IWLiquidityGauge(collToken).getUnderlyingToken(collId) == lp, 'incorrect underlying');\\n    require(collToken == address(wgauge), 'collateral token & wgauge mismatched');\\n    address[] memory tokens = ulTokens[lp];\\n\\n    // 0. Ensure approve\\n    ensureApproveN(lp, 4);\\n\\n    // 1. Compute repay amount if MAX_INT is supplied (max debt)\\n    uint[4] memory actualAmtsRepay;\\n    for (uint i = 0; i < 4; i++) {\\n      actualAmtsRepay[i] = amtsRepay[i] == uint(-1)\\n        ? bank.borrowBalanceCurrent(positionId, tokens[i])\\n        : amtsRepay[i];\\n    }\\n    uint[4] memory amtsDesired;\\n    for (uint i = 0; i < 4; i++) {\\n      amtsDesired[i] = actualAmtsRepay[i].add(amtsMin[i]); // repay amt + slippage control\\n    }\\n\\n    // 2. Take out collateral\\n    bank.takeCollateral(address(wgauge), collId, amtLPTake);\\n    wgauge.burn(collId, amtLPTake);\\n\\n    // 3. Compute amount to actually remove. Remove to repay just enough\\n    uint amtLPToRemove;\\n    if (amtsDesired[0] > 0 || amtsDesired[1] > 0 || amtsDesired[2] > 0 || amtsDesired[3] > 0) {\\n      amtLPToRemove = IERC20(lp).balanceOf(address(this)).sub(amtLPWithdraw);\\n      ICurvePool(pool).remove_liquidity_imbalance(amtsDesired, amtLPToRemove);\\n    }\\n\\n    // 4. Compute leftover amount to remove. Remove balancedly.\\n    amtLPToRemove = IERC20(lp).balanceOf(address(this)).sub(amtLPWithdraw);\\n    if (amtLPToRemove > 0) {\\n      uint[4] memory mins;\\n      ICurvePool(pool).remove_liquidity(amtLPToRemove, mins);\\n    }\\n\\n    // 5. Repay\\n    for (uint i = 0; i < 4; i++) {\\n      doRepay(tokens[i], actualAmtsRepay[i]);\\n    }\\n    doRepay(lp, amtLPRepay);\\n\\n    // 6. Refund\\n    for (uint i = 0; i < 4; i++) {\\n      doRefund(tokens[i]);\\n    }\\n    doRefund(lp);\\n\\n    // 7. Refund crv\\n    doRefund(crv);\\n  }\\n\\n  /// @dev Harvest CRV reward tokens to in-exec position's owner\\n  function harvest() external {\\n    (, address collToken, uint collId, uint collSize) = bank.getCurrentPositionInfo();\\n    (uint pid, uint gid, ) = wgauge.decodeId(collId);\\n    address lp = wgauge.getUnderlyingToken(collId);\\n    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\\n    require(collToken == address(wgauge), 'collateral token & wgauge mismatched');\\n\\n    // 1. Take out collateral\\n    bank.takeCollateral(address(wgauge), collId, collSize);\\n    wgauge.burn(collId, collSize);\\n\\n    // 2. Put collateral\\n    uint amount = IERC20(lp).balanceOf(address(this));\\n    ensureApprove(lp, address(wgauge));\\n    uint id = wgauge.mint(pid, gid, amount);\\n    bank.putCollateral(address(wgauge), id, amount);\\n\\n    // 3. Refund crv\\n    doRefund(crv);\\n  }\\n}\\n\"\r\n    },\r\n    \"./interfaces/ICurvePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface ICurvePool {\\n  function add_liquidity(uint[2] calldata, uint) external;\\n\\n  function add_liquidity(uint[3] calldata, uint) external;\\n\\n  function add_liquidity(uint[4] calldata, uint) external;\\n\\n  function remove_liquidity(uint, uint[2] calldata) external;\\n\\n  function remove_liquidity(uint, uint[3] calldata) external;\\n\\n  function remove_liquidity(uint, uint[4] calldata) external;\\n\\n  function remove_liquidity_imbalance(uint[2] calldata, uint) external;\\n\\n  function remove_liquidity_imbalance(uint[3] calldata, uint) external;\\n\\n  function remove_liquidity_imbalance(uint[4] calldata, uint) external;\\n\\n  function remove_liquidity_one_coin(\\n    uint,\\n    int128,\\n    uint\\n  ) external;\\n\\n  function get_virtual_price() external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"./interfaces/IWLiquidityGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC1155/IERC1155.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/IERC20.sol';\\n\\nimport './IERC20Wrapper.sol';\\nimport './ICurveRegistry.sol';\\nimport './ILiquidityGauge.sol';\\n\\ninterface IWLiquidityGauge is IERC1155, IERC20Wrapper {\\n  /// @dev Mint ERC1155 token for the given ERC20 token.\\n  function mint(\\n    uint pid,\\n    uint gid,\\n    uint amount\\n  ) external returns (uint id);\\n\\n  /// @dev Burn ERC1155 token to redeem ERC20 token back.\\n  function burn(uint id, uint amount) external returns (uint pid);\\n\\n  function crv() external returns (IERC20);\\n\\n  function registry() external returns (ICurveRegistry);\\n\\n  function encodeId(\\n    uint,\\n    uint,\\n    uint\\n  ) external pure returns (uint);\\n\\n  function decodeId(uint id)\\n    external\\n    pure\\n    returns (\\n      uint,\\n      uint,\\n      uint\\n    );\\n\\n  function getUnderlyingTokenFromIds(uint pid, uint gid) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"./contracts/spell/SushiswapSpellV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/IERC20.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/math/SafeMath.sol';\\n\\nimport './WhitelistSpell.sol';\\nimport '../utils/HomoraMath.sol';\\nimport '../../interfaces/IUniswapV2Factory.sol';\\nimport '../../interfaces/IUniswapV2Router02.sol';\\nimport '../../interfaces/IUniswapV2Pair.sol';\\nimport '../../interfaces/IWMasterChef.sol';\\n\\ncontract SushiswapSpellV1 is WhitelistSpell {\\n  using SafeMath for uint;\\n  using HomoraMath for uint;\\n\\n  IUniswapV2Factory public immutable factory; // Sushiswap factory\\n  IUniswapV2Router02 public immutable router; // Sushiswap router\\n\\n  mapping(address => mapping(address => address)) public pairs; // Mapping from tokenA to (mapping from tokenB to LP token)\\n\\n  IWMasterChef public immutable wmasterchef; // Wrapped masterChef\\n\\n  address public immutable sushi; // Sushi token address\\n\\n  constructor(\\n    IBank _bank,\\n    address _werc20,\\n    IUniswapV2Router02 _router,\\n    address _wmasterchef\\n  ) public WhitelistSpell(_bank, _werc20, _router.WETH()) {\\n    router = _router;\\n    factory = IUniswapV2Factory(_router.factory());\\n    wmasterchef = IWMasterChef(_wmasterchef);\\n    IWMasterChef(_wmasterchef).setApprovalForAll(address(_bank), true);\\n    sushi = address(IWMasterChef(_wmasterchef).sushi());\\n  }\\n\\n  /// @dev Return the LP token for the token pairs (can be in any order)\\n  /// @param tokenA Token A to get LP token\\n  /// @param tokenB Token B to get LP token\\n  function getAndApprovePair(address tokenA, address tokenB) public returns (address) {\\n    address lp = pairs[tokenA][tokenB];\\n    if (lp == address(0)) {\\n      lp = factory.getPair(tokenA, tokenB);\\n      require(lp != address(0), 'no lp token');\\n      ensureApprove(tokenA, address(router));\\n      ensureApprove(tokenB, address(router));\\n      ensureApprove(lp, address(router));\\n      pairs[tokenA][tokenB] = lp;\\n      pairs[tokenB][tokenA] = lp;\\n    }\\n    return lp;\\n  }\\n\\n  /// @dev Compute optimal deposit amount\\n  /// @param amtA amount of token A desired to deposit\\n  /// @param amtB amount of token B desired to deposit\\n  /// @param resA amount of token A in reserve\\n  /// @param resB amount of token B in reserve\\n  function optimalDeposit(\\n    uint amtA,\\n    uint amtB,\\n    uint resA,\\n    uint resB\\n  ) internal pure returns (uint swapAmt, bool isReversed) {\\n    if (amtA.mul(resB) >= amtB.mul(resA)) {\\n      swapAmt = _optimalDepositA(amtA, amtB, resA, resB);\\n      isReversed = false;\\n    } else {\\n      swapAmt = _optimalDepositA(amtB, amtA, resB, resA);\\n      isReversed = true;\\n    }\\n  }\\n\\n  /// @dev Compute optimal deposit amount helper.\\n  /// @param amtA amount of token A desired to deposit\\n  /// @param amtB amount of token B desired to deposit\\n  /// @param resA amount of token A in reserve\\n  /// @param resB amount of token B in reserve\\n  /// Formula: https://blog.alphafinance.io/byot/\\n  function _optimalDepositA(\\n    uint amtA,\\n    uint amtB,\\n    uint resA,\\n    uint resB\\n  ) internal pure returns (uint) {\\n    require(amtA.mul(resB) >= amtB.mul(resA), 'Reversed');\\n    uint a = 997;\\n    uint b = uint(1997).mul(resA);\\n    uint _c = (amtA.mul(resB)).sub(amtB.mul(resA));\\n    uint c = _c.mul(1000).div(amtB.add(resB)).mul(resA);\\n    uint d = a.mul(c).mul(4);\\n    uint e = HomoraMath.sqrt(b.mul(b).add(d));\\n    uint numerator = e.sub(b);\\n    uint denominator = a.mul(2);\\n    return numerator.div(denominator);\\n  }\\n\\n  struct Amounts {\\n    uint amtAUser; // Supplied tokenA amount\\n    uint amtBUser; // Supplied tokenB amount\\n    uint amtLPUser; // Supplied LP token amount\\n    uint amtABorrow; // Borrow tokenA amount\\n    uint amtBBorrow; // Borrow tokenB amount\\n    uint amtLPBorrow; // Borrow LP token amount\\n    uint amtAMin; // Desired tokenA amount (slippage control)\\n    uint amtBMin; // Desired tokenB amount (slippage control)\\n  }\\n\\n  /// @dev Add liquidity to Sushiswap pool\\n  /// @param tokenA Token A for the pair\\n  /// @param tokenB Token B for the pair\\n  /// @param amt Amounts of tokens to supply, borrow, and get.\\n  function addLiquidityInternal(\\n    address tokenA,\\n    address tokenB,\\n    Amounts calldata amt,\\n    address lp\\n  ) internal {\\n    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\\n\\n    // 1. Get user input amounts\\n    doTransmitETH();\\n    doTransmit(tokenA, amt.amtAUser);\\n    doTransmit(tokenB, amt.amtBUser);\\n    doTransmit(lp, amt.amtLPUser);\\n\\n    // 2. Borrow specified amounts\\n    doBorrow(tokenA, amt.amtABorrow);\\n    doBorrow(tokenB, amt.amtBBorrow);\\n    doBorrow(lp, amt.amtLPBorrow);\\n\\n    // 3. Calculate optimal swap amount\\n    uint swapAmt;\\n    bool isReversed;\\n    {\\n      uint amtA = IERC20(tokenA).balanceOf(address(this));\\n      uint amtB = IERC20(tokenB).balanceOf(address(this));\\n      uint resA;\\n      uint resB;\\n      if (IUniswapV2Pair(lp).token0() == tokenA) {\\n        (resA, resB, ) = IUniswapV2Pair(lp).getReserves();\\n      } else {\\n        (resB, resA, ) = IUniswapV2Pair(lp).getReserves();\\n      }\\n      (swapAmt, isReversed) = optimalDeposit(amtA, amtB, resA, resB);\\n    }\\n\\n    // 4. Swap optimal amount\\n    if (swapAmt > 0) {\\n      address[] memory path = new address[](2);\\n      (path[0], path[1]) = isReversed ? (tokenB, tokenA) : (tokenA, tokenB);\\n      router.swapExactTokensForTokens(swapAmt, 0, path, address(this), block.timestamp);\\n    }\\n\\n    // 5. Add liquidity\\n    uint balA = IERC20(tokenA).balanceOf(address(this));\\n    uint balB = IERC20(tokenB).balanceOf(address(this));\\n    if (balA > 0 || balB > 0) {\\n      router.addLiquidity(\\n        tokenA,\\n        tokenB,\\n        balA,\\n        balB,\\n        amt.amtAMin,\\n        amt.amtBMin,\\n        address(this),\\n        block.timestamp\\n      );\\n    }\\n  }\\n\\n  /// @dev Add liquidity to Sushiswap pool, with no staking rewards (use WERC20 wrapper)\\n  /// @param tokenA Token A for the pair\\n  /// @param tokenB Token B for the pair\\n  /// @param amt Amounts of tokens to supply, borrow, and get.\\n  function addLiquidityWERC20(\\n    address tokenA,\\n    address tokenB,\\n    Amounts calldata amt\\n  ) external payable {\\n    address lp = getAndApprovePair(tokenA, tokenB);\\n    // 1-5. add liquidity\\n    addLiquidityInternal(tokenA, tokenB, amt, lp);\\n\\n    // 6. Put collateral\\n    doPutCollateral(lp, IERC20(lp).balanceOf(address(this)));\\n\\n    // 7. Refund leftovers to users\\n    doRefundETH();\\n    doRefund(tokenA);\\n    doRefund(tokenB);\\n  }\\n\\n  /// @dev Add liquidity to Sushiswap pool, with staking to masterChef\\n  /// @param tokenA Token A for the pair\\n  /// @param tokenB Token B for the pair\\n  /// @param amt Amounts of tokens to supply, borrow, and get.\\n  /// @param pid Pool id\\n  function addLiquidityWMasterChef(\\n    address tokenA,\\n    address tokenB,\\n    Amounts calldata amt,\\n    uint pid\\n  ) external payable {\\n    address lp = getAndApprovePair(tokenA, tokenB);\\n    (address lpToken, , , ) = wmasterchef.chef().poolInfo(pid);\\n    require(lpToken == lp, 'incorrect lp token');\\n\\n    // 1-5. add liquidity\\n    addLiquidityInternal(tokenA, tokenB, amt, lp);\\n\\n    // 6. Take out collateral\\n    (, address collToken, uint collId, uint collSize) = bank.getCurrentPositionInfo();\\n    if (collSize > 0) {\\n      (uint decodedPid, ) = wmasterchef.decodeId(collId);\\n      require(pid == decodedPid, 'incorrect pid');\\n      require(collToken == address(wmasterchef), 'collateral token & wmasterchef mismatched');\\n      bank.takeCollateral(address(wmasterchef), collId, collSize);\\n      wmasterchef.burn(collId, collSize);\\n    }\\n\\n    // 7. Put collateral\\n    ensureApprove(lp, address(wmasterchef));\\n    uint amount = IERC20(lp).balanceOf(address(this));\\n    uint id = wmasterchef.mint(pid, amount);\\n    bank.putCollateral(address(wmasterchef), id, amount);\\n\\n    // 8. Refund leftovers to users\\n    doRefundETH();\\n    doRefund(tokenA);\\n    doRefund(tokenB);\\n\\n    // 9. Refund sushi\\n    doRefund(sushi);\\n  }\\n\\n  struct RepayAmounts {\\n    uint amtLPTake; // Take out LP token amount (from Homora)\\n    uint amtLPWithdraw; // Withdraw LP token amount (back to caller)\\n    uint amtARepay; // Repay tokenA amount\\n    uint amtBRepay; // Repay tokenB amount\\n    uint amtLPRepay; // Repay LP token amount\\n    uint amtAMin; // Desired tokenA amount\\n    uint amtBMin; // Desired tokenB amount\\n  }\\n\\n  /// @dev Remove liquidity from Sushiswap pool\\n  /// @param tokenA Token A for the pair\\n  /// @param tokenB Token B for the pair\\n  /// @param amt Amounts of tokens to take out, withdraw, repay, and get.\\n  function removeLiquidityInternal(\\n    address tokenA,\\n    address tokenB,\\n    RepayAmounts calldata amt,\\n    address lp\\n  ) internal {\\n    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\\n    uint positionId = bank.POSITION_ID();\\n\\n    uint amtARepay = amt.amtARepay;\\n    uint amtBRepay = amt.amtBRepay;\\n    uint amtLPRepay = amt.amtLPRepay;\\n\\n    // 2. Compute repay amount if MAX_INT is supplied (max debt)\\n    if (amtARepay == uint(-1)) {\\n      amtARepay = bank.borrowBalanceCurrent(positionId, tokenA);\\n    }\\n    if (amtBRepay == uint(-1)) {\\n      amtBRepay = bank.borrowBalanceCurrent(positionId, tokenB);\\n    }\\n    if (amtLPRepay == uint(-1)) {\\n      amtLPRepay = bank.borrowBalanceCurrent(positionId, lp);\\n    }\\n\\n    // 3. Compute amount to actually remove\\n    uint amtLPToRemove = IERC20(lp).balanceOf(address(this)).sub(amt.amtLPWithdraw);\\n\\n    // 4. Remove liquidity\\n    uint amtA;\\n    uint amtB;\\n    if (amtLPToRemove > 0) {\\n      (amtA, amtB) = router.removeLiquidity(\\n        tokenA,\\n        tokenB,\\n        amtLPToRemove,\\n        0,\\n        0,\\n        address(this),\\n        block.timestamp\\n      );\\n    }\\n\\n    // 5. MinimizeTrading\\n    uint amtADesired = amtARepay.add(amt.amtAMin);\\n    uint amtBDesired = amtBRepay.add(amt.amtBMin);\\n\\n    if (amtA < amtADesired && amtB > amtBDesired) {\\n      address[] memory path = new address[](2);\\n      (path[0], path[1]) = (tokenB, tokenA);\\n      router.swapTokensForExactTokens(\\n        amtADesired.sub(amtA),\\n        amtB.sub(amtBDesired),\\n        path,\\n        address(this),\\n        block.timestamp\\n      );\\n    } else if (amtA > amtADesired && amtB < amtBDesired) {\\n      address[] memory path = new address[](2);\\n      (path[0], path[1]) = (tokenA, tokenB);\\n      router.swapTokensForExactTokens(\\n        amtBDesired.sub(amtB),\\n        amtA.sub(amtADesired),\\n        path,\\n        address(this),\\n        block.timestamp\\n      );\\n    }\\n\\n    // 6. Repay\\n    doRepay(tokenA, amtARepay);\\n    doRepay(tokenB, amtBRepay);\\n    doRepay(lp, amtLPRepay);\\n\\n    // 7. Slippage control\\n    require(IERC20(tokenA).balanceOf(address(this)) >= amt.amtAMin);\\n    require(IERC20(tokenB).balanceOf(address(this)) >= amt.amtBMin);\\n    require(IERC20(lp).balanceOf(address(this)) >= amt.amtLPWithdraw);\\n\\n    // 8. Refund leftover\\n    doRefundETH();\\n    doRefund(tokenA);\\n    doRefund(tokenB);\\n    doRefund(lp);\\n  }\\n\\n  /// @dev Remove liquidity from Sushiswap pool, with no staking rewards (use WERC20 wrapper)\\n  /// @param tokenA Token A for the pair\\n  /// @param tokenB Token B for the pair\\n  /// @param amt Amounts of tokens to take out, withdraw, repay, and get.\\n  function removeLiquidityWERC20(\\n    address tokenA,\\n    address tokenB,\\n    RepayAmounts calldata amt\\n  ) external {\\n    address lp = getAndApprovePair(tokenA, tokenB);\\n\\n    // 1. Take out collateral\\n    doTakeCollateral(lp, amt.amtLPTake);\\n\\n    // 2-8. remove liquidity\\n    removeLiquidityInternal(tokenA, tokenB, amt, lp);\\n  }\\n\\n  /// @dev Remove liquidity from Sushiswap pool, from masterChef staking\\n  /// @param tokenA Token A for the pair\\n  /// @param tokenB Token B for the pair\\n  /// @param amt Amounts of tokens to take out, withdraw, repay, and get.\\n  function removeLiquidityWMasterChef(\\n    address tokenA,\\n    address tokenB,\\n    RepayAmounts calldata amt\\n  ) external {\\n    address lp = getAndApprovePair(tokenA, tokenB);\\n    (, address collToken, uint collId, ) = bank.getCurrentPositionInfo();\\n    require(IWMasterChef(collToken).getUnderlyingToken(collId) == lp, 'incorrect underlying');\\n    require(collToken == address(wmasterchef), 'collateral token & wmasterchef mismatched');\\n\\n    // 1. Take out collateral\\n    bank.takeCollateral(address(wmasterchef), collId, amt.amtLPTake);\\n    wmasterchef.burn(collId, amt.amtLPTake);\\n\\n    // 2-8. remove liquidity\\n    removeLiquidityInternal(tokenA, tokenB, amt, lp);\\n\\n    // 9. Refund sushi\\n    doRefund(sushi);\\n  }\\n\\n  /// @dev Harvest SUSHI reward tokens to in-exec position's owner\\n  function harvestWMasterChef() external {\\n    (, address collToken, uint collId, ) = bank.getCurrentPositionInfo();\\n    (uint pid, ) = wmasterchef.decodeId(collId);\\n    address lp = wmasterchef.getUnderlyingToken(collId);\\n    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\\n    require(collToken == address(wmasterchef), 'collateral token & wmasterchef mismatched');\\n\\n    // 1. Take out collateral\\n    bank.takeCollateral(address(wmasterchef), collId, uint(-1));\\n    wmasterchef.burn(collId, uint(-1));\\n\\n    // 2. put collateral\\n    uint amount = IERC20(lp).balanceOf(address(this));\\n    ensureApprove(lp, address(wmasterchef));\\n    uint id = wmasterchef.mint(pid, amount);\\n    bank.putCollateral(address(wmasterchef), id, amount);\\n\\n    // 3. Refund sushi\\n    doRefund(sushi);\\n  }\\n}\\n\"\r\n    },\r\n    \"./interfaces/IWMasterChef.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC1155/IERC1155.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/IERC20.sol';\\n\\nimport './IERC20Wrapper.sol';\\nimport './IMasterChef.sol';\\n\\ninterface IWMasterChef is IERC1155, IERC20Wrapper {\\n  /// @dev Mint ERC1155 token for the given ERC20 token.\\n  function mint(uint pid, uint amount) external returns (uint id);\\n\\n  /// @dev Burn ERC1155 token to redeem ERC20 token back.\\n  function burn(uint id, uint amount) external returns (uint pid);\\n\\n  function sushi() external returns (IERC20);\\n\\n  function decodeId(uint id) external pure returns (uint, uint);\\n\\n  function chef() external view returns (IMasterChef);\\n}\\n\"\r\n    },\r\n    \"./contracts/spell/BalancerSpellV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/IERC20.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/math/SafeMath.sol';\\n\\nimport './WhitelistSpell.sol';\\nimport '../utils/HomoraMath.sol';\\nimport '../../interfaces/IBalancerPool.sol';\\nimport '../../interfaces/IWStakingRewards.sol';\\n\\ncontract BalancerSpellV1 is WhitelistSpell {\\n  using SafeMath for uint;\\n  using HomoraMath for uint;\\n\\n  mapping(address => address[2]) public pairs; // Mapping from lp token to underlying token (only pairs)\\n\\n  constructor(\\n    IBank _bank,\\n    address _werc20,\\n    address _weth\\n  ) public WhitelistSpell(_bank, _werc20, _weth) {}\\n\\n  /// @dev Return the underlying pairs for the lp token.\\n  /// @param lp LP token\\n  function getAndApprovePair(address lp) public returns (address, address) {\\n    address[2] memory ulTokens = pairs[lp];\\n    if (ulTokens[0] == address(0) || ulTokens[1] == address(0)) {\\n      address[] memory tokens = IBalancerPool(lp).getFinalTokens();\\n      require(tokens.length == 2, 'underlying tokens not 2');\\n      ulTokens[0] = tokens[0];\\n      ulTokens[1] = tokens[1];\\n      pairs[lp] = ulTokens;\\n      ensureApprove(ulTokens[0], lp);\\n      ensureApprove(ulTokens[1], lp);\\n    }\\n    return (ulTokens[0], ulTokens[1]);\\n  }\\n\\n  struct Amounts {\\n    uint amtAUser; // Supplied tokenA amount\\n    uint amtBUser; // Supplied tokenB amount\\n    uint amtLPUser; // Supplied LP token amount\\n    uint amtABorrow; // Borrow tokenA amount\\n    uint amtBBorrow; // Borrow tokenB amount\\n    uint amtLPBorrow; // Borrow LP token amount\\n    uint amtLPDesired; // Desired LP token amount (slippage control)\\n  }\\n\\n  /// @dev Add liquidity to Balancer pool\\n  /// @param lp LP token for the pool\\n  /// @param amt Amounts of tokens to supply, borrow, and get.\\n  /// @return added lp amount\\n  function addLiquidityInternal(address lp, Amounts calldata amt) internal returns (uint) {\\n    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\\n    (address tokenA, address tokenB) = getAndApprovePair(lp);\\n\\n    // 1. Get user input amounts\\n    doTransmitETH();\\n    doTransmit(tokenA, amt.amtAUser);\\n    doTransmit(tokenB, amt.amtBUser);\\n    doTransmit(lp, amt.amtLPUser);\\n\\n    // 2. Borrow specified amounts\\n    doBorrow(tokenA, amt.amtABorrow);\\n    doBorrow(tokenB, amt.amtBBorrow);\\n    doBorrow(lp, amt.amtLPBorrow);\\n\\n    // 3.1 Add Liquidity using equal value two side to minimize swap fee\\n    uint[] memory maxAmountsIn = new uint[](2);\\n    maxAmountsIn[0] = IERC20(tokenA).balanceOf(address(this));\\n    maxAmountsIn[1] = IERC20(tokenB).balanceOf(address(this));\\n    uint totalLPSupply = IBalancerPool(lp).totalSupply();\\n    uint poolAmountFromA =\\n      maxAmountsIn[0].mul(1e18).div(IBalancerPool(lp).getBalance(tokenA)).mul(totalLPSupply).div(\\n        1e18\\n      ); // compute in reverse order of how Balancer's `joinPool` computes tokenAmountIn\\n    uint poolAmountFromB =\\n      maxAmountsIn[1].mul(1e18).div(IBalancerPool(lp).getBalance(tokenB)).mul(totalLPSupply).div(\\n        1e18\\n      ); // compute in reverse order of how Balancer's `joinPool` computes tokenAmountIn\\n\\n    uint poolAmountOut = poolAmountFromA > poolAmountFromB ? poolAmountFromB : poolAmountFromA;\\n    if (poolAmountOut > 0) IBalancerPool(lp).joinPool(poolAmountOut, maxAmountsIn);\\n\\n    // 3.2 Add Liquidity leftover for each token\\n    uint ABal = IERC20(tokenA).balanceOf(address(this));\\n    uint BBal = IERC20(tokenB).balanceOf(address(this));\\n    if (ABal > 0) IBalancerPool(lp).joinswapExternAmountIn(tokenA, ABal, 0);\\n    if (BBal > 0) IBalancerPool(lp).joinswapExternAmountIn(tokenB, BBal, 0);\\n\\n    // 4. Slippage control\\n    uint lpBalance = IERC20(lp).balanceOf(address(this));\\n    require(lpBalance >= amt.amtLPDesired, 'lp desired not met');\\n\\n    return lpBalance;\\n  }\\n\\n  /// @dev Add liquidity to Balancer pool (with 2 underlying tokens), without staking rewards (use WERC20 wrapper)\\n  /// @param lp LP token for the pool\\n  /// @param amt Amounts of tokens to supply, borrow, and get.\\n  function addLiquidityWERC20(address lp, Amounts calldata amt) external payable {\\n    // 1-4. add liquidity\\n    uint lpBalance = addLiquidityInternal(lp, amt);\\n\\n    // 5. Put collateral\\n    doPutCollateral(lp, lpBalance);\\n\\n    // 6. Refund leftovers to users\\n    (address tokenA, address tokenB) = getAndApprovePair(lp);\\n    doRefundETH();\\n    doRefund(tokenA);\\n    doRefund(tokenB);\\n  }\\n\\n  /// @dev Add liquidity to Balancer pool (with 2 underlying tokens), with staking rewards (use WStakingRewards)\\n  /// @param lp LP token for the pool\\n  /// @param amt Amounts of tokens to supply, borrow, and desire.\\n  /// @param wstaking Wrapped staking rewards contract address\\n  function addLiquidityWStakingRewards(\\n    address lp,\\n    Amounts calldata amt,\\n    address wstaking\\n  ) external payable {\\n    // 1-4. add liquidity\\n    addLiquidityInternal(lp, amt);\\n\\n    // 5. Take out collateral\\n    (, address collToken, uint collId, uint collSize) = bank.getCurrentPositionInfo();\\n    if (collSize > 0) {\\n      require(IWStakingRewards(collToken).getUnderlyingToken(collId) == lp, 'incorrect underlying');\\n      require(collToken == wstaking, 'collateral token & wstaking mismatched');\\n      bank.takeCollateral(wstaking, collId, collSize);\\n      IWStakingRewards(wstaking).burn(collId, collSize);\\n    }\\n\\n    // 6. Put collateral\\n    ensureApprove(lp, wstaking);\\n    uint amount = IERC20(lp).balanceOf(address(this));\\n    uint id = IWStakingRewards(wstaking).mint(amount);\\n    if (!IWStakingRewards(wstaking).isApprovedForAll(address(this), address(bank))) {\\n      IWStakingRewards(wstaking).setApprovalForAll(address(bank), true);\\n    }\\n    bank.putCollateral(address(wstaking), id, amount);\\n\\n    // 7. Refund leftovers to users\\n    (address tokenA, address tokenB) = getAndApprovePair(lp);\\n    doRefundETH();\\n    doRefund(tokenA);\\n    doRefund(tokenB);\\n\\n    // 8. Refund reward\\n    doRefund(IWStakingRewards(wstaking).reward());\\n  }\\n\\n  struct RepayAmounts {\\n    uint amtLPTake; // Take out LP token amount (from Homora)\\n    uint amtLPWithdraw; // Withdraw LP token amount (back to caller)\\n    uint amtARepay; // Repay tokenA amount\\n    uint amtBRepay; // Repay tokenB amount\\n    uint amtLPRepay; // Repay LP token amount\\n    uint amtAMin; // Desired tokenA amount (slippage control)\\n    uint amtBMin; // Desired tokenB amount (slippage control)\\n  }\\n\\n  /// @dev Remove liquidity from Balancer pool (with 2 underlying tokens)\\n  /// @param lp LP token for the pool\\n  /// @param amt Amounts of tokens to take out, withdraw, repay and get.\\n  function removeLiquidityInternal(address lp, RepayAmounts calldata amt) internal {\\n    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\\n    (address tokenA, address tokenB) = getAndApprovePair(lp);\\n    uint amtARepay = amt.amtARepay;\\n    uint amtBRepay = amt.amtBRepay;\\n    uint amtLPRepay = amt.amtLPRepay;\\n\\n    // 2. Compute repay amount if MAX_INT is supplied (max debt)\\n    {\\n      uint positionId = bank.POSITION_ID();\\n      if (amtARepay == uint(-1)) {\\n        amtARepay = bank.borrowBalanceCurrent(positionId, tokenA);\\n      }\\n      if (amtBRepay == uint(-1)) {\\n        amtBRepay = bank.borrowBalanceCurrent(positionId, tokenB);\\n      }\\n      if (amtLPRepay == uint(-1)) {\\n        amtLPRepay = bank.borrowBalanceCurrent(positionId, lp);\\n      }\\n    }\\n\\n    // 3.1 Remove liquidity 2 sides\\n    uint amtLPToRemove = IERC20(lp).balanceOf(address(this)).sub(amt.amtLPWithdraw);\\n\\n    if (amtLPToRemove > 0) {\\n      uint[] memory minAmountsOut = new uint[](2);\\n      IBalancerPool(lp).exitPool(amtLPToRemove, minAmountsOut);\\n    }\\n\\n    // 3.2 Minimize trading\\n    uint amtADesired = amtARepay.add(amt.amtAMin);\\n    uint amtBDesired = amtBRepay.add(amt.amtBMin);\\n\\n    uint amtA = IERC20(tokenA).balanceOf(address(this));\\n    uint amtB = IERC20(tokenB).balanceOf(address(this));\\n\\n    if (amtA < amtADesired && amtB > amtBDesired) {\\n      IBalancerPool(lp).swapExactAmountOut(\\n        tokenB,\\n        amtB.sub(amtBDesired),\\n        tokenA,\\n        amtADesired.sub(amtA),\\n        uint(-1)\\n      );\\n    } else if (amtA > amtADesired && amtB < amtBDesired) {\\n      IBalancerPool(lp).swapExactAmountOut(\\n        tokenA,\\n        amtA.sub(amtADesired),\\n        tokenB,\\n        amtBDesired.sub(amtB),\\n        uint(-1)\\n      );\\n    }\\n\\n    // 4. Repay\\n    doRepay(tokenA, amtARepay);\\n    doRepay(tokenB, amtBRepay);\\n    doRepay(lp, amtLPRepay);\\n\\n    // 5. Slippage control\\n    require(IERC20(tokenA).balanceOf(address(this)) >= amt.amtAMin);\\n    require(IERC20(tokenB).balanceOf(address(this)) >= amt.amtBMin);\\n    require(IERC20(lp).balanceOf(address(this)) >= amt.amtLPWithdraw);\\n\\n    // 6. Refund leftover\\n    doRefundETH();\\n    doRefund(tokenA);\\n    doRefund(tokenB);\\n    doRefund(lp);\\n  }\\n\\n  /// @dev Remove liquidity from Balancer pool (with 2 underlying tokens), without staking rewards (use WERC20 wrapper)\\n  /// @param lp LP token for the pool\\n  /// @param amt Amounts of tokens to take out, withdraw, repay, and get.\\n  function removeLiquidityWERC20(address lp, RepayAmounts calldata amt) external {\\n    // 1. Take out collateral\\n    doTakeCollateral(lp, amt.amtLPTake);\\n\\n    // 2-6. remove liquidity\\n    removeLiquidityInternal(lp, amt);\\n  }\\n\\n  /// @dev Remove liquidity from Balancer pool (with 2 underlying tokens), with staking rewards\\n  /// @param lp LP token for the pool\\n  /// @param amt Amounts of tokens to take out, withdraw, repay, and get.v\\n  function removeLiquidityWStakingRewards(\\n    address lp,\\n    RepayAmounts calldata amt,\\n    address wstaking\\n  ) external {\\n    (, address collToken, uint collId, ) = bank.getCurrentPositionInfo();\\n\\n    // 1. Take out collateral\\n    require(IWStakingRewards(collToken).getUnderlyingToken(collId) == lp, 'incorrect underlying');\\n    require(collToken == wstaking, 'collateral token & wstaking mismatched');\\n    bank.takeCollateral(wstaking, collId, amt.amtLPTake);\\n    IWStakingRewards(wstaking).burn(collId, amt.amtLPTake);\\n\\n    // 2-6. remove liquidity\\n    removeLiquidityInternal(lp, amt);\\n\\n    // 7. Refund reward\\n    doRefund(IWStakingRewards(wstaking).reward());\\n  }\\n\\n  /// @dev Harvest staking reward tokens to in-exec position's owner\\n  /// @param wstaking Wrapped staking rewards\\n  function harvestWStakingRewards(address wstaking) external {\\n    (, address collToken, uint collId, ) = bank.getCurrentPositionInfo();\\n    address lp = IWStakingRewards(wstaking).getUnderlyingToken(collId);\\n    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\\n    require(collToken == wstaking, 'collateral token & wstaking mismatched');\\n\\n    // 1. Take out collateral\\n    bank.takeCollateral(wstaking, collId, uint(-1));\\n    IWStakingRewards(wstaking).burn(collId, uint(-1));\\n\\n    // 2. put collateral\\n    uint amount = IERC20(lp).balanceOf(address(this));\\n    ensureApprove(lp, wstaking);\\n    uint id = IWStakingRewards(wstaking).mint(amount);\\n    bank.putCollateral(wstaking, id, amount);\\n\\n    // 3. Refund reward\\n    doRefund(IWStakingRewards(wstaking).reward());\\n  }\\n}\\n\"\r\n    },\r\n    \"./interfaces/IBalancerPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IBalancerPool {\\n  function getFinalTokens() external view returns (address[] memory);\\n\\n  function getNormalizedWeight(address token) external view returns (uint);\\n\\n  function getSwapFee() external view returns (uint);\\n\\n  function getNumTokens() external view returns (uint);\\n\\n  function getBalance(address token) external view returns (uint);\\n\\n  function totalSupply() external view returns (uint);\\n\\n  function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\\n\\n  function swapExactAmountOut(\\n    address tokenIn,\\n    uint maxAmountIn,\\n    address tokenOut,\\n    uint tokenAmountOut,\\n    uint maxPrice\\n  ) external returns (uint tokenAmountIn, uint spotPriceAfter);\\n\\n  function joinswapExternAmountIn(\\n    address tokenIn,\\n    uint tokenAmountIn,\\n    uint minPoolAmountOut\\n  ) external returns (uint poolAmountOut);\\n\\n  function exitPool(uint poolAmoutnIn, uint[] calldata minAmountsOut) external;\\n\\n  function exitswapExternAmountOut(\\n    address tokenOut,\\n    uint tokenAmountOut,\\n    uint maxPoolAmountIn\\n  ) external returns (uint poolAmountIn);\\n}\\n\"\r\n    },\r\n    \"./contracts/spell/HouseHoldSpell.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/IERC20.sol';\\n\\nimport './BasicSpell.sol';\\nimport '../../interfaces/IBank.sol';\\nimport '../../interfaces/IWETH.sol';\\n\\ncontract HouseHoldSpell is BasicSpell {\\n  constructor(\\n    IBank _bank,\\n    address _werc20,\\n    address _weth\\n  ) public BasicSpell(_bank, _werc20, _weth) {}\\n\\n  function borrowETH(uint amount) external {\\n    doBorrow(weth, amount);\\n    doRefundETH();\\n  }\\n\\n  function borrow(address token, uint amount) external {\\n    doBorrow(token, amount);\\n    doRefund(token);\\n  }\\n\\n  function repayETH(uint amount) external payable {\\n    doTransmitETH();\\n    doRepay(weth, amount);\\n    doRefundETH();\\n  }\\n\\n  function repay(address token, uint amount) external {\\n    doTransmit(token, amount);\\n    doRepay(token, IERC20(token).balanceOf(address(this)));\\n  }\\n\\n  function putCollateral(address token, uint amount) external {\\n    doTransmit(token, amount);\\n    doPutCollateral(token, IERC20(token).balanceOf(address(this)));\\n  }\\n\\n  function takeCollateral(address token, uint amount) external {\\n    doTakeCollateral(token, amount);\\n    doRefund(token);\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/mock/MockERC1155.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC1155/ERC1155.sol';\\n\\ncontract MockERC1155 is ERC1155('Mock') {\\n  function mint(uint id, uint amount) public {\\n    _mint(msg.sender, id, amount, '');\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/mock/MockUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\ninterface MockUniswapV2FactoryIUniswapV2Factory {\\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n  function feeTo() external view returns (address);\\n\\n  function feeToSetter() external view returns (address);\\n\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n  function allPairs(uint) external view returns (address pair);\\n\\n  function allPairsLength() external view returns (uint);\\n\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n  function setFeeTo(address) external;\\n\\n  function setFeeToSetter(address) external;\\n}\\n\\ninterface MockUniswapV2FactoryIUniswapV2Pair {\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  function name() external pure returns (string memory);\\n\\n  function symbol() external pure returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint);\\n\\n  function balanceOf(address owner) external view returns (uint);\\n\\n  function allowance(address owner, address spender) external view returns (uint);\\n\\n  function approve(address spender, uint value) external returns (bool);\\n\\n  function transfer(address to, uint value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint value\\n  ) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  function nonces(address owner) external view returns (uint);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint value,\\n    uint deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  event Mint(address indexed sender, uint amount0, uint amount1);\\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n  event Swap(\\n    address indexed sender,\\n    uint amount0In,\\n    uint amount1In,\\n    uint amount0Out,\\n    uint amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\\n\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint);\\n\\n  function price1CumulativeLast() external view returns (uint);\\n\\n  function kLast() external view returns (uint);\\n\\n  function mint(address to) external returns (uint liquidity);\\n\\n  function burn(address to) external returns (uint amount0, uint amount1);\\n\\n  function swap(\\n    uint amount0Out,\\n    uint amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n\\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(address, address) external;\\n}\\n\\ninterface MockUniswapV2FactoryIUniswapV2ERC20 {\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  function name() external pure returns (string memory);\\n\\n  function symbol() external pure returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint);\\n\\n  function balanceOf(address owner) external view returns (uint);\\n\\n  function allowance(address owner, address spender) external view returns (uint);\\n\\n  function approve(address spender, uint value) external returns (bool);\\n\\n  function transfer(address to, uint value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint value\\n  ) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  function nonces(address owner) external view returns (uint);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint value,\\n    uint deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n}\\n\\ninterface MockUniswapV2FactoryIERC20 {\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function totalSupply() external view returns (uint);\\n\\n  function balanceOf(address owner) external view returns (uint);\\n\\n  function allowance(address owner, address spender) external view returns (uint);\\n\\n  function approve(address spender, uint value) external returns (bool);\\n\\n  function transfer(address to, uint value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint value\\n  ) external returns (bool);\\n}\\n\\ninterface IUniswapV2Callee {\\n  function uniswapV2Call(\\n    address sender,\\n    uint amount0,\\n    uint amount1,\\n    bytes calldata data\\n  ) external;\\n}\\n\\ncontract UniswapV2ERC20 {\\n  using MockUniswapV2FactorySafeMath for uint;\\n\\n  string public constant name = 'Uniswap V2';\\n  string public constant symbol = 'UNI-V2';\\n  uint8 public constant decimals = 18;\\n  uint public totalSupply;\\n  mapping(address => uint) public balanceOf;\\n  mapping(address => mapping(address => uint)) public allowance;\\n\\n  bytes32 public DOMAIN_SEPARATOR;\\n  // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n  bytes32 public constant PERMIT_TYPEHASH =\\n    0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n  mapping(address => uint) public nonces;\\n\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  constructor() public {\\n    uint chainId;\\n    assembly {\\n      chainId := chainid()\\n    }\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        keccak256(\\n          'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'\\n        ),\\n        keccak256(bytes(name)),\\n        keccak256(bytes('1')),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n  }\\n\\n  function _mint(address to, uint value) internal {\\n    totalSupply = totalSupply.add(value);\\n    balanceOf[to] = balanceOf[to].add(value);\\n    emit Transfer(address(0), to, value);\\n  }\\n\\n  function _burn(address from, uint value) internal {\\n    balanceOf[from] = balanceOf[from].sub(value);\\n    totalSupply = totalSupply.sub(value);\\n    emit Transfer(from, address(0), value);\\n  }\\n\\n  function _approve(\\n    address owner,\\n    address spender,\\n    uint value\\n  ) private {\\n    allowance[owner][spender] = value;\\n    emit Approval(owner, spender, value);\\n  }\\n\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint value\\n  ) private {\\n    balanceOf[from] = balanceOf[from].sub(value);\\n    balanceOf[to] = balanceOf[to].add(value);\\n    emit Transfer(from, to, value);\\n  }\\n\\n  function approve(address spender, uint value) external returns (bool) {\\n    _approve(msg.sender, spender, value);\\n    return true;\\n  }\\n\\n  function transfer(address to, uint value) external returns (bool) {\\n    _transfer(msg.sender, to, value);\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint value\\n  ) external returns (bool) {\\n    if (allowance[from][msg.sender] != uint(-1)) {\\n      allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\\n    }\\n    _transfer(from, to, value);\\n    return true;\\n  }\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint value,\\n    uint deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external {\\n    require(deadline >= block.timestamp, 'UniswapV2: EXPIRED');\\n    bytes32 digest =\\n      keccak256(\\n        abi.encodePacked(\\n          '\\\\x19\\\\x01',\\n          DOMAIN_SEPARATOR,\\n          keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\\n        )\\n      );\\n    address recoveredAddress = ecrecover(digest, v, r, s);\\n    require(\\n      recoveredAddress != address(0) && recoveredAddress == owner,\\n      'UniswapV2: INVALID_SIGNATURE'\\n    );\\n    _approve(owner, spender, value);\\n  }\\n}\\n\\ncontract MockUniswapV2FactoryUniswapV2Pair is UniswapV2ERC20 {\\n  using MockUniswapV2FactorySafeMath for uint;\\n  using UQ112x112 for uint224;\\n\\n  uint public constant MINIMUM_LIQUIDITY = 10**3;\\n  bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\\n\\n  address public factory;\\n  address public token0;\\n  address public token1;\\n\\n  uint112 private reserve0; // uses single storage slot, accessible via getReserves\\n  uint112 private reserve1; // uses single storage slot, accessible via getReserves\\n  uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\\n\\n  uint public price0CumulativeLast;\\n  uint public price1CumulativeLast;\\n  uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\\n\\n  uint private unlocked = 1;\\n  modifier lock() {\\n    require(unlocked == 1, 'UniswapV2: LOCKED');\\n    unlocked = 0;\\n    _;\\n    unlocked = 1;\\n  }\\n\\n  function getReserves()\\n    public\\n    view\\n    returns (\\n      uint112 _reserve0,\\n      uint112 _reserve1,\\n      uint32 _blockTimestampLast\\n    )\\n  {\\n    _reserve0 = reserve0;\\n    _reserve1 = reserve1;\\n    _blockTimestampLast = blockTimestampLast;\\n  }\\n\\n  function _safeTransfer(\\n    address token,\\n    address to,\\n    uint value\\n  ) private {\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      'UniswapV2: TRANSFER_FAILED'\\n    );\\n  }\\n\\n  event Mint(address indexed sender, uint amount0, uint amount1);\\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n  event Swap(\\n    address indexed sender,\\n    uint amount0In,\\n    uint amount1In,\\n    uint amount0Out,\\n    uint amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  constructor() public {\\n    factory = msg.sender;\\n  }\\n\\n  // called once by the factory at time of deployment\\n  function initialize(address _token0, address _token1) external {\\n    require(msg.sender == factory, 'UniswapV2: FORBIDDEN'); // sufficient check\\n    token0 = _token0;\\n    token1 = _token1;\\n  }\\n\\n  // update reserves and, on the first call per block, price accumulators\\n  function _update(\\n    uint balance0,\\n    uint balance1,\\n    uint112 _reserve0,\\n    uint112 _reserve1\\n  ) private {\\n    require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'UniswapV2: OVERFLOW');\\n    uint32 blockTimestamp = uint32(block.timestamp % 2**32);\\n    uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n    if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n      // * never overflows, and + overflow is desired\\n      price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\\n      price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\\n    }\\n    reserve0 = uint112(balance0);\\n    reserve1 = uint112(balance1);\\n    blockTimestampLast = blockTimestamp;\\n    emit Sync(reserve0, reserve1);\\n  }\\n\\n  // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\\n  function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\\n    address feeTo = MockUniswapV2FactoryIUniswapV2Factory(factory).feeTo();\\n    feeOn = feeTo != address(0);\\n    uint _kLast = kLast; // gas savings\\n    if (feeOn) {\\n      if (_kLast != 0) {\\n        uint rootK = MockUniswapV2FactoryMah.sqrt(uint(_reserve0).mul(_reserve1));\\n        uint rootKLast = MockUniswapV2FactoryMah.sqrt(_kLast);\\n        if (rootK > rootKLast) {\\n          uint numerator = totalSupply.mul(rootK.sub(rootKLast));\\n          uint denominator = rootK.mul(5).add(rootKLast);\\n          uint liquidity = numerator / denominator;\\n          if (liquidity > 0) _mint(feeTo, liquidity);\\n        }\\n      }\\n    } else if (_kLast != 0) {\\n      kLast = 0;\\n    }\\n  }\\n\\n  // this low-level function should be called from a contract which performs important safety checks\\n  function mint(address to) external lock returns (uint liquidity) {\\n    (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n    uint balance0 = MockUniswapV2FactoryIERC20(token0).balanceOf(address(this));\\n    uint balance1 = MockUniswapV2FactoryIERC20(token1).balanceOf(address(this));\\n    uint amount0 = balance0.sub(_reserve0);\\n    uint amount1 = balance1.sub(_reserve1);\\n\\n    bool feeOn = _mintFee(_reserve0, _reserve1);\\n    uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n    if (_totalSupply == 0) {\\n      liquidity = MockUniswapV2FactoryMah.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\\n      _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n    } else {\\n      liquidity = MockUniswapV2FactoryMah.min(\\n        amount0.mul(_totalSupply) / _reserve0,\\n        amount1.mul(_totalSupply) / _reserve1\\n      );\\n    }\\n    require(liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED');\\n    _mint(to, liquidity);\\n\\n    _update(balance0, balance1, _reserve0, _reserve1);\\n    if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n    emit Mint(msg.sender, amount0, amount1);\\n  }\\n\\n  // this low-level function should be called from a contract which performs important safety checks\\n  function burn(address to) external lock returns (uint amount0, uint amount1) {\\n    (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n    address _token0 = token0; // gas savings\\n    address _token1 = token1; // gas savings\\n    uint balance0 = MockUniswapV2FactoryIERC20(_token0).balanceOf(address(this));\\n    uint balance1 = MockUniswapV2FactoryIERC20(_token1).balanceOf(address(this));\\n    uint liquidity = balanceOf[address(this)];\\n\\n    bool feeOn = _mintFee(_reserve0, _reserve1);\\n    uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n    amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n    amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n    require(amount0 > 0 && amount1 > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED');\\n    _burn(address(this), liquidity);\\n    _safeTransfer(_token0, to, amount0);\\n    _safeTransfer(_token1, to, amount1);\\n    balance0 = MockUniswapV2FactoryIERC20(_token0).balanceOf(address(this));\\n    balance1 = MockUniswapV2FactoryIERC20(_token1).balanceOf(address(this));\\n\\n    _update(balance0, balance1, _reserve0, _reserve1);\\n    if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\\n    emit Burn(msg.sender, amount0, amount1, to);\\n  }\\n\\n  // this low-level function should be called from a contract which performs important safety checks\\n  function swap(\\n    uint amount0Out,\\n    uint amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external lock {\\n    require(amount0Out > 0 || amount1Out > 0, 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT');\\n    (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\\n    require(amount0Out < _reserve0 && amount1Out < _reserve1, 'UniswapV2: INSUFFICIENT_LIQUIDITY');\\n\\n    uint balance0;\\n    uint balance1;\\n    {\\n      // scope for _token{0,1}, avoids stack too deep errors\\n      address _token0 = token0;\\n      address _token1 = token1;\\n      require(to != _token0 && to != _token1, 'UniswapV2: INVALID_TO');\\n      if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n      if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n      if (data.length > 0)\\n        IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\\n      balance0 = MockUniswapV2FactoryIERC20(_token0).balanceOf(address(this));\\n      balance1 = MockUniswapV2FactoryIERC20(_token1).balanceOf(address(this));\\n    }\\n    uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\\n    uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\\n    require(amount0In > 0 || amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT');\\n    {\\n      // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n      uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\\n      uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\\n      require(\\n        balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2),\\n        'UniswapV2: K'\\n      );\\n    }\\n\\n    _update(balance0, balance1, _reserve0, _reserve1);\\n    emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n  }\\n\\n  // force balances to match reserves\\n  function skim(address to) external lock {\\n    address _token0 = token0; // gas savings\\n    address _token1 = token1; // gas savings\\n    _safeTransfer(\\n      _token0,\\n      to,\\n      MockUniswapV2FactoryIERC20(_token0).balanceOf(address(this)).sub(reserve0)\\n    );\\n    _safeTransfer(\\n      _token1,\\n      to,\\n      MockUniswapV2FactoryIERC20(_token1).balanceOf(address(this)).sub(reserve1)\\n    );\\n  }\\n\\n  // force reserves to match balances\\n  function sync() external lock {\\n    _update(\\n      MockUniswapV2FactoryIERC20(token0).balanceOf(address(this)),\\n      MockUniswapV2FactoryIERC20(token1).balanceOf(address(this)),\\n      reserve0,\\n      reserve1\\n    );\\n  }\\n}\\n\\ncontract MockUniswapV2Factory {\\n  address public feeTo;\\n  address public feeToSetter;\\n\\n  mapping(address => mapping(address => address)) public getPair;\\n  address[] public allPairs;\\n\\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n  constructor(address _feeToSetter) public {\\n    feeToSetter = _feeToSetter;\\n  }\\n\\n  function allPairsLength() external view returns (uint) {\\n    return allPairs.length;\\n  }\\n\\n  function createPair(address tokenA, address tokenB) external returns (address pair) {\\n    require(tokenA != tokenB, 'UniswapV2: IDENTICAL_ADDRESSES');\\n    (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    require(token0 != address(0), 'UniswapV2: ZERO_ADDRESS');\\n    require(getPair[token0][token1] == address(0), 'UniswapV2: PAIR_EXISTS'); // single check is sufficient\\n    bytes memory bytecode = type(MockUniswapV2FactoryUniswapV2Pair).creationCode;\\n    bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n    assembly {\\n      pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n    }\\n    MockUniswapV2FactoryIUniswapV2Pair(pair).initialize(token0, token1);\\n    getPair[token0][token1] = pair;\\n    getPair[token1][token0] = pair; // populate mapping in the reverse direction\\n    allPairs.push(pair);\\n    emit PairCreated(token0, token1, pair, allPairs.length);\\n  }\\n\\n  function setFeeTo(address _feeTo) external {\\n    require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');\\n    feeTo = _feeTo;\\n  }\\n\\n  function setFeeToSetter(address _feeToSetter) external {\\n    require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');\\n    feeToSetter = _feeToSetter;\\n  }\\n}\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary MockUniswapV2FactorySafeMath {\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    require((z = x + y) >= x, 'ds-math-add-overflow');\\n  }\\n\\n  function sub(uint x, uint y) internal pure returns (uint z) {\\n    require((z = x - y) <= x, 'ds-math-sub-underflow');\\n  }\\n\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n  }\\n}\\n\\n// a library for performing various math operations\\n\\nlibrary MockUniswapV2FactoryMah {\\n  function min(uint x, uint y) internal pure returns (uint z) {\\n    z = x < y ? x : y;\\n  }\\n\\n  // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n  function sqrt(uint y) internal pure returns (uint z) {\\n    if (y > 3) {\\n      z = y;\\n      uint x = y / 2 + 1;\\n      while (x < z) {\\n        z = x;\\n        x = (y / x + x) / 2;\\n      }\\n    } else if (y != 0) {\\n      z = 1;\\n    }\\n  }\\n}\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\n\\n// range: [0, 2**112 - 1]\\n// resolution: 1 / 2**112\\n\\nlibrary UQ112x112 {\\n  uint224 constant Q112 = 2**112;\\n\\n  // encode a uint112 as a UQ112x112\\n  function encode(uint112 y) internal pure returns (uint224 z) {\\n    z = uint224(y) * Q112; // never overflows\\n  }\\n\\n  // divide a UQ112x112 by a uint112, returning a UQ112x112\\n  function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\\n    z = x / uint224(y);\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/mock/MockERC20.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/ERC20.sol';\\n\\ncontract MockERC20 is ERC20 {\\n  constructor(\\n    string memory name,\\n    string memory symbol,\\n    uint8 decimals\\n  ) public ERC20(name, symbol) {\\n    _setupDecimals(decimals);\\n  }\\n\\n  function mint(address to, uint amount) public {\\n    _mint(to, amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/mock/MockCErc20_2.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\n// import 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/IERC20.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/SafeERC20.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/math/SafeMath.sol';\\n\\nimport '../../interfaces/ICErc20_2.sol';\\n\\ncontract MockCErc20_2 is ICErc20_2 {\\n  using SafeMath for uint;\\n  using SafeERC20 for IERC20;\\n\\n  IERC20 public token;\\n  uint public mintRate = 1e18;\\n  uint public totalSupply = 0;\\n  mapping(address => uint) public override balanceOf;\\n\\n  constructor(IERC20 _token) public {\\n    token = _token;\\n  }\\n\\n  function setMintRate(uint _mintRate) external override {\\n    mintRate = _mintRate;\\n  }\\n\\n  function underlying() external override returns (address) {\\n    return address(token);\\n  }\\n\\n  function mint(uint mintAmount) external override returns (uint) {\\n    uint amountIn = mintAmount.mul(mintRate).div(1e18);\\n    IERC20(token).safeTransferFrom(msg.sender, address(this), amountIn);\\n    totalSupply = totalSupply.add(mintAmount);\\n    balanceOf[msg.sender] = balanceOf[msg.sender].add(mintAmount);\\n    return 0;\\n  }\\n\\n  function redeem(uint redeemAmount) external override returns (uint) {\\n    uint amountOut = redeemAmount.mul(1e18).div(mintRate);\\n    IERC20(token).safeTransfer(msg.sender, amountOut);\\n    totalSupply = totalSupply.sub(redeemAmount);\\n    balanceOf[msg.sender] = balanceOf[msg.sender].sub(redeemAmount);\\n    return 0;\\n  }\\n}\\n\"\r\n    },\r\n    \"./interfaces/ICErc20_2.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\ninterface ICErc20_2 {\\n  function underlying() external returns (address);\\n\\n  function mint(uint mintAmount) external returns (uint);\\n\\n  function redeem(uint redeemTokens) external returns (uint);\\n\\n  function balanceOf(address user) external view returns (uint);\\n\\n  function setMintRate(uint mintRate) external;\\n}\\n\"\r\n    },\r\n    \"./contracts/mock/MockUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\ninterface MockUniswapV2Router02IUniswapV2Factory {\\n  event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n  function feeTo() external view returns (address);\\n\\n  function feeToSetter() external view returns (address);\\n\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n  function allPairs(uint) external view returns (address pair);\\n\\n  function allPairsLength() external view returns (uint);\\n\\n  function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n  function setFeeTo(address) external;\\n\\n  function setFeeToSetter(address) external;\\n}\\n\\ninterface MockUniswapV2Router02IUniswapV2Pair {\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  function name() external pure returns (string memory);\\n\\n  function symbol() external pure returns (string memory);\\n\\n  function decimals() external pure returns (uint8);\\n\\n  function totalSupply() external view returns (uint);\\n\\n  function balanceOf(address owner) external view returns (uint);\\n\\n  function allowance(address owner, address spender) external view returns (uint);\\n\\n  function approve(address spender, uint value) external returns (bool);\\n\\n  function transfer(address to, uint value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint value\\n  ) external returns (bool);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n  function nonces(address owner) external view returns (uint);\\n\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint value,\\n    uint deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  event Mint(address indexed sender, uint amount0, uint amount1);\\n  event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n  event Swap(\\n    address indexed sender,\\n    uint amount0In,\\n    uint amount1In,\\n    uint amount0Out,\\n    uint amount1Out,\\n    address indexed to\\n  );\\n  event Sync(uint112 reserve0, uint112 reserve1);\\n\\n  function MINIMUM_LIQUIDITY() external pure returns (uint);\\n\\n  function factory() external view returns (address);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint);\\n\\n  function price1CumulativeLast() external view returns (uint);\\n\\n  function kLast() external view returns (uint);\\n\\n  function mint(address to) external returns (uint liquidity);\\n\\n  function burn(address to) external returns (uint amount0, uint amount1);\\n\\n  function swap(\\n    uint amount0Out,\\n    uint amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n\\n  function skim(address to) external;\\n\\n  function sync() external;\\n\\n  function initialize(address, address) external;\\n}\\n\\ninterface MockUniswapV2Router02IUniswapV2Router01 {\\n  function factory() external pure returns (address);\\n\\n  function WETH() external pure returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (\\n      uint amountA,\\n      uint amountB,\\n      uint liquidity\\n    );\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint amountTokenDesired,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable\\n    returns (\\n      uint amountToken,\\n      uint amountETH,\\n      uint liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountA, uint amountB);\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountToken, uint amountETH);\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint amountA, uint amountB);\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint amountToken, uint amountETH);\\n\\n  function swapExactTokensForTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapTokensForExactTokens(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapExactETHForTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external payable returns (uint[] memory amounts);\\n\\n  function swapTokensForExactETH(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapExactTokensForETH(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n\\n  function swapETHForExactTokens(\\n    uint amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external payable returns (uint[] memory amounts);\\n\\n  function quote(\\n    uint amountA,\\n    uint reserveA,\\n    uint reserveB\\n  ) external pure returns (uint amountB);\\n\\n  function getAmountOut(\\n    uint amountIn,\\n    uint reserveIn,\\n    uint reserveOut\\n  ) external pure returns (uint amountOut);\\n\\n  function getAmountIn(\\n    uint amountOut,\\n    uint reserveIn,\\n    uint reserveOut\\n  ) external pure returns (uint amountIn);\\n\\n  function getAmountsOut(uint amountIn, address[] calldata path)\\n    external\\n    view\\n    returns (uint[] memory amounts);\\n\\n  function getAmountsIn(uint amountOut, address[] calldata path)\\n    external\\n    view\\n    returns (uint[] memory amounts);\\n}\\n\\ninterface MockUniswapV2Router02IUniswapV2Router02 is MockUniswapV2Router02IUniswapV2Router01 {\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountETH);\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external returns (uint amountETH);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external;\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external payable;\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external;\\n}\\n\\ninterface IERC20 {\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n  event Transfer(address indexed from, address indexed to, uint value);\\n\\n  function name() external view returns (string memory);\\n\\n  function symbol() external view returns (string memory);\\n\\n  function decimals() external view returns (uint8);\\n\\n  function totalSupply() external view returns (uint);\\n\\n  function balanceOf(address owner) external view returns (uint);\\n\\n  function allowance(address owner, address spender) external view returns (uint);\\n\\n  function approve(address spender, uint value) external returns (bool);\\n\\n  function transfer(address to, uint value) external returns (bool);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint value\\n  ) external returns (bool);\\n}\\n\\ninterface MockUniswapV2Router02IWETH {\\n  function deposit() external payable;\\n\\n  function transfer(address to, uint value) external returns (bool);\\n\\n  function withdraw(uint) external;\\n}\\n\\ncontract MockUniswapV2Router02 is MockUniswapV2Router02IUniswapV2Router02 {\\n  using MockUniswapV2Router02SafeMath for uint;\\n\\n  address public immutable override factory;\\n  address public immutable override WETH;\\n\\n  modifier ensure(uint deadline) {\\n    require(deadline >= block.timestamp, 'UniswapV2Router: EXPIRED');\\n    _;\\n  }\\n\\n  constructor(address _factory, address _WETH) public {\\n    factory = _factory;\\n    WETH = _WETH;\\n  }\\n\\n  receive() external payable {\\n    assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\\n  }\\n\\n  // **** ADD LIQUIDITY ****\\n  function _addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin\\n  ) internal virtual returns (uint amountA, uint amountB) {\\n    // create the pair if it doesn't exist yet\\n    if (MockUniswapV2Router02IUniswapV2Factory(factory).getPair(tokenA, tokenB) == address(0)) {\\n      MockUniswapV2Router02IUniswapV2Factory(factory).createPair(tokenA, tokenB);\\n    }\\n    (uint reserveA, uint reserveB) =\\n      MockUniswapV2Router02UniswapV2Library.getReserves(factory, tokenA, tokenB);\\n    if (reserveA == 0 && reserveB == 0) {\\n      (amountA, amountB) = (amountADesired, amountBDesired);\\n    } else {\\n      uint amountBOptimal =\\n        MockUniswapV2Router02UniswapV2Library.quote(amountADesired, reserveA, reserveB);\\n      if (amountBOptimal <= amountBDesired) {\\n        require(amountBOptimal >= amountBMin, 'UniswapV2Router: INSUFFICIENT_B_AMOUNT');\\n        (amountA, amountB) = (amountADesired, amountBOptimal);\\n      } else {\\n        uint amountAOptimal =\\n          MockUniswapV2Router02UniswapV2Library.quote(amountBDesired, reserveB, reserveA);\\n        assert(amountAOptimal <= amountADesired);\\n        require(amountAOptimal >= amountAMin, 'UniswapV2Router: INSUFFICIENT_A_AMOUNT');\\n        (amountA, amountB) = (amountAOptimal, amountBDesired);\\n      }\\n    }\\n  }\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    virtual\\n    override\\n    ensure(deadline)\\n    returns (\\n      uint amountA,\\n      uint amountB,\\n      uint liquidity\\n    )\\n  {\\n    (amountA, amountB) = _addLiquidity(\\n      tokenA,\\n      tokenB,\\n      amountADesired,\\n      amountBDesired,\\n      amountAMin,\\n      amountBMin\\n    );\\n    address pair = MockUniswapV2Router02UniswapV2Library.pairFor(factory, tokenA, tokenB);\\n    MockUniswapV2Router02TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);\\n    MockUniswapV2Router02TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);\\n    liquidity = MockUniswapV2Router02IUniswapV2Pair(pair).mint(to);\\n  }\\n\\n  function addLiquidityETH(\\n    address token,\\n    uint amountTokenDesired,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    payable\\n    virtual\\n    override\\n    ensure(deadline)\\n    returns (\\n      uint amountToken,\\n      uint amountETH,\\n      uint liquidity\\n    )\\n  {\\n    (amountToken, amountETH) = _addLiquidity(\\n      token,\\n      WETH,\\n      amountTokenDesired,\\n      msg.value,\\n      amountTokenMin,\\n      amountETHMin\\n    );\\n    address pair = MockUniswapV2Router02UniswapV2Library.pairFor(factory, token, WETH);\\n    MockUniswapV2Router02TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);\\n    MockUniswapV2Router02IWETH(WETH).deposit{value: amountETH}();\\n    assert(MockUniswapV2Router02IWETH(WETH).transfer(pair, amountETH));\\n    liquidity = MockUniswapV2Router02IUniswapV2Pair(pair).mint(to);\\n    // refund dust eth, if any\\n    if (msg.value > amountETH)\\n      MockUniswapV2Router02TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);\\n  }\\n\\n  // **** REMOVE LIQUIDITY ****\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  ) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {\\n    address pair = MockUniswapV2Router02UniswapV2Library.pairFor(factory, tokenA, tokenB);\\n    MockUniswapV2Router02IUniswapV2Pair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair\\n    (uint amount0, uint amount1) = MockUniswapV2Router02IUniswapV2Pair(pair).burn(to);\\n    (address token0, ) = MockUniswapV2Router02UniswapV2Library.sortTokens(tokenA, tokenB);\\n    (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\\n    require(amountA >= amountAMin, 'UniswapV2Router: INSUFFICIENT_A_AMOUNT');\\n    require(amountB >= amountBMin, 'UniswapV2Router: INSUFFICIENT_B_AMOUNT');\\n  }\\n\\n  function removeLiquidityETH(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  ) public virtual override ensure(deadline) returns (uint amountToken, uint amountETH) {\\n    (amountToken, amountETH) = removeLiquidity(\\n      token,\\n      WETH,\\n      liquidity,\\n      amountTokenMin,\\n      amountETHMin,\\n      address(this),\\n      deadline\\n    );\\n    MockUniswapV2Router02TransferHelper.safeTransfer(token, to, amountToken);\\n    MockUniswapV2Router02IWETH(WETH).withdraw(amountETH);\\n    MockUniswapV2Router02TransferHelper.safeTransferETH(to, amountETH);\\n  }\\n\\n  function removeLiquidityWithPermit(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual override returns (uint amountA, uint amountB) {\\n    address pair = MockUniswapV2Router02UniswapV2Library.pairFor(factory, tokenA, tokenB);\\n    uint value = approveMax ? uint(-1) : liquidity;\\n    MockUniswapV2Router02IUniswapV2Pair(pair).permit(\\n      msg.sender,\\n      address(this),\\n      value,\\n      deadline,\\n      v,\\n      r,\\n      s\\n    );\\n    (amountA, amountB) = removeLiquidity(\\n      tokenA,\\n      tokenB,\\n      liquidity,\\n      amountAMin,\\n      amountBMin,\\n      to,\\n      deadline\\n    );\\n  }\\n\\n  function removeLiquidityETHWithPermit(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual override returns (uint amountToken, uint amountETH) {\\n    address pair = MockUniswapV2Router02UniswapV2Library.pairFor(factory, token, WETH);\\n    uint value = approveMax ? uint(-1) : liquidity;\\n    MockUniswapV2Router02IUniswapV2Pair(pair).permit(\\n      msg.sender,\\n      address(this),\\n      value,\\n      deadline,\\n      v,\\n      r,\\n      s\\n    );\\n    (amountToken, amountETH) = removeLiquidityETH(\\n      token,\\n      liquidity,\\n      amountTokenMin,\\n      amountETHMin,\\n      to,\\n      deadline\\n    );\\n  }\\n\\n  // **** REMOVE LIQUIDITY (supporting fee-on-transfer tokens) ****\\n  function removeLiquidityETHSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline\\n  ) public virtual override ensure(deadline) returns (uint amountETH) {\\n    (, amountETH) = removeLiquidity(\\n      token,\\n      WETH,\\n      liquidity,\\n      amountTokenMin,\\n      amountETHMin,\\n      address(this),\\n      deadline\\n    );\\n    MockUniswapV2Router02TransferHelper.safeTransfer(\\n      token,\\n      to,\\n      IERC20(token).balanceOf(address(this))\\n    );\\n    MockUniswapV2Router02IWETH(WETH).withdraw(amountETH);\\n    MockUniswapV2Router02TransferHelper.safeTransferETH(to, amountETH);\\n  }\\n\\n  function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n    address token,\\n    uint liquidity,\\n    uint amountTokenMin,\\n    uint amountETHMin,\\n    address to,\\n    uint deadline,\\n    bool approveMax,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external virtual override returns (uint amountETH) {\\n    address pair = MockUniswapV2Router02UniswapV2Library.pairFor(factory, token, WETH);\\n    uint value = approveMax ? uint(-1) : liquidity;\\n    MockUniswapV2Router02IUniswapV2Pair(pair).permit(\\n      msg.sender,\\n      address(this),\\n      value,\\n      deadline,\\n      v,\\n      r,\\n      s\\n    );\\n    amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(\\n      token,\\n      liquidity,\\n      amountTokenMin,\\n      amountETHMin,\\n      to,\\n      deadline\\n    );\\n  }\\n\\n  // **** SWAP ****\\n  // requires the initial amount to have already been sent to the first pair\\n  function _swap(\\n    uint[] memory amounts,\\n    address[] memory path,\\n    address _to\\n  ) internal virtual {\\n    for (uint i; i < path.length - 1; i++) {\\n      (address input, address output) = (path[i], path[i + 1]);\\n      (address token0, ) = MockUniswapV2Router02UniswapV2Library.sortTokens(input, output);\\n      uint amountOut = amounts[i + 1];\\n      (uint amount0Out, uint amount1Out) =\\n        input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\\n      address to =\\n        i < path.length - 2\\n          ? MockUniswapV2Router02UniswapV2Library.pairFor(factory, output, path[i + 2])\\n          : _to;\\n      MockUniswapV2Router02IUniswapV2Pair(\\n        MockUniswapV2Router02UniswapV2Library.pairFor(factory, input, output)\\n      )\\n        .swap(amount0Out, amount1Out, to, new bytes(0));\\n    }\\n  }\\n\\n  function swapExactTokensForTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\\n    amounts = MockUniswapV2Router02UniswapV2Library.getAmountsOut(factory, amountIn, path);\\n    require(\\n      amounts[amounts.length - 1] >= amountOutMin,\\n      'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\\n    );\\n    MockUniswapV2Router02TransferHelper.safeTransferFrom(\\n      path[0],\\n      msg.sender,\\n      MockUniswapV2Router02UniswapV2Library.pairFor(factory, path[0], path[1]),\\n      amounts[0]\\n    );\\n    _swap(amounts, path, to);\\n  }\\n\\n  function swapTokensForExactTokens(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\\n    amounts = MockUniswapV2Router02UniswapV2Library.getAmountsIn(factory, amountOut, path);\\n    require(amounts[0] <= amountInMax, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');\\n    MockUniswapV2Router02TransferHelper.safeTransferFrom(\\n      path[0],\\n      msg.sender,\\n      MockUniswapV2Router02UniswapV2Library.pairFor(factory, path[0], path[1]),\\n      amounts[0]\\n    );\\n    _swap(amounts, path, to);\\n  }\\n\\n  function swapExactETHForTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external payable virtual override ensure(deadline) returns (uint[] memory amounts) {\\n    require(path[0] == WETH, 'UniswapV2Router: INVALID_PATH');\\n    amounts = MockUniswapV2Router02UniswapV2Library.getAmountsOut(factory, msg.value, path);\\n    require(\\n      amounts[amounts.length - 1] >= amountOutMin,\\n      'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\\n    );\\n    MockUniswapV2Router02IWETH(WETH).deposit{value: amounts[0]}();\\n    assert(\\n      MockUniswapV2Router02IWETH(WETH).transfer(\\n        MockUniswapV2Router02UniswapV2Library.pairFor(factory, path[0], path[1]),\\n        amounts[0]\\n      )\\n    );\\n    _swap(amounts, path, to);\\n  }\\n\\n  function swapTokensForExactETH(\\n    uint amountOut,\\n    uint amountInMax,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\\n    require(path[path.length - 1] == WETH, 'UniswapV2Router: INVALID_PATH');\\n    amounts = MockUniswapV2Router02UniswapV2Library.getAmountsIn(factory, amountOut, path);\\n    require(amounts[0] <= amountInMax, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');\\n    MockUniswapV2Router02TransferHelper.safeTransferFrom(\\n      path[0],\\n      msg.sender,\\n      MockUniswapV2Router02UniswapV2Library.pairFor(factory, path[0], path[1]),\\n      amounts[0]\\n    );\\n    _swap(amounts, path, address(this));\\n    MockUniswapV2Router02IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n    MockUniswapV2Router02TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\n  }\\n\\n  function swapExactTokensForETH(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external virtual override ensure(deadline) returns (uint[] memory amounts) {\\n    require(path[path.length - 1] == WETH, 'UniswapV2Router: INVALID_PATH');\\n    amounts = MockUniswapV2Router02UniswapV2Library.getAmountsOut(factory, amountIn, path);\\n    require(\\n      amounts[amounts.length - 1] >= amountOutMin,\\n      'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\\n    );\\n    MockUniswapV2Router02TransferHelper.safeTransferFrom(\\n      path[0],\\n      msg.sender,\\n      MockUniswapV2Router02UniswapV2Library.pairFor(factory, path[0], path[1]),\\n      amounts[0]\\n    );\\n    _swap(amounts, path, address(this));\\n    MockUniswapV2Router02IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n    MockUniswapV2Router02TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\\n  }\\n\\n  function swapETHForExactTokens(\\n    uint amountOut,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external payable virtual override ensure(deadline) returns (uint[] memory amounts) {\\n    require(path[0] == WETH, 'UniswapV2Router: INVALID_PATH');\\n    amounts = MockUniswapV2Router02UniswapV2Library.getAmountsIn(factory, amountOut, path);\\n    require(amounts[0] <= msg.value, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');\\n    MockUniswapV2Router02IWETH(WETH).deposit{value: amounts[0]}();\\n    assert(\\n      MockUniswapV2Router02IWETH(WETH).transfer(\\n        MockUniswapV2Router02UniswapV2Library.pairFor(factory, path[0], path[1]),\\n        amounts[0]\\n      )\\n    );\\n    _swap(amounts, path, to);\\n    // refund dust eth, if any\\n    if (msg.value > amounts[0])\\n      MockUniswapV2Router02TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);\\n  }\\n\\n  // **** SWAP (supporting fee-on-transfer tokens) ****\\n  // requires the initial amount to have already been sent to the first pair\\n  function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {\\n    for (uint i; i < path.length - 1; i++) {\\n      (address input, address output) = (path[i], path[i + 1]);\\n      (address token0, ) = MockUniswapV2Router02UniswapV2Library.sortTokens(input, output);\\n      MockUniswapV2Router02IUniswapV2Pair pair =\\n        MockUniswapV2Router02IUniswapV2Pair(\\n          MockUniswapV2Router02UniswapV2Library.pairFor(factory, input, output)\\n        );\\n      uint amountInput;\\n      uint amountOutput;\\n      {\\n        // scope to avoid stack too deep errors\\n        (uint reserve0, uint reserve1, ) = pair.getReserves();\\n        (uint reserveInput, uint reserveOutput) =\\n          input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n        amountInput = IERC20(input).balanceOf(address(pair)).sub(reserveInput);\\n        amountOutput = MockUniswapV2Router02UniswapV2Library.getAmountOut(\\n          amountInput,\\n          reserveInput,\\n          reserveOutput\\n        );\\n      }\\n      (uint amount0Out, uint amount1Out) =\\n        input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\\n      address to =\\n        i < path.length - 2\\n          ? MockUniswapV2Router02UniswapV2Library.pairFor(factory, output, path[i + 2])\\n          : _to;\\n      pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n    }\\n  }\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external virtual override ensure(deadline) {\\n    MockUniswapV2Router02TransferHelper.safeTransferFrom(\\n      path[0],\\n      msg.sender,\\n      MockUniswapV2Router02UniswapV2Library.pairFor(factory, path[0], path[1]),\\n      amountIn\\n    );\\n    uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\n    _swapSupportingFeeOnTransferTokens(path, to);\\n    require(\\n      IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\\n      'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\\n    );\\n  }\\n\\n  function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external payable virtual override ensure(deadline) {\\n    require(path[0] == WETH, 'UniswapV2Router: INVALID_PATH');\\n    uint amountIn = msg.value;\\n    MockUniswapV2Router02IWETH(WETH).deposit{value: amountIn}();\\n    assert(\\n      MockUniswapV2Router02IWETH(WETH).transfer(\\n        MockUniswapV2Router02UniswapV2Library.pairFor(factory, path[0], path[1]),\\n        amountIn\\n      )\\n    );\\n    uint balanceBefore = IERC20(path[path.length - 1]).balanceOf(to);\\n    _swapSupportingFeeOnTransferTokens(path, to);\\n    require(\\n      IERC20(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,\\n      'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'\\n    );\\n  }\\n\\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external virtual override ensure(deadline) {\\n    require(path[path.length - 1] == WETH, 'UniswapV2Router: INVALID_PATH');\\n    MockUniswapV2Router02TransferHelper.safeTransferFrom(\\n      path[0],\\n      msg.sender,\\n      MockUniswapV2Router02UniswapV2Library.pairFor(factory, path[0], path[1]),\\n      amountIn\\n    );\\n    _swapSupportingFeeOnTransferTokens(path, address(this));\\n    uint amountOut = IERC20(WETH).balanceOf(address(this));\\n    require(amountOut >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');\\n    MockUniswapV2Router02IWETH(WETH).withdraw(amountOut);\\n    MockUniswapV2Router02TransferHelper.safeTransferETH(to, amountOut);\\n  }\\n\\n  // **** LIBRARY FUNCTIONS ****\\n  function quote(\\n    uint amountA,\\n    uint reserveA,\\n    uint reserveB\\n  ) public pure virtual override returns (uint amountB) {\\n    return MockUniswapV2Router02UniswapV2Library.quote(amountA, reserveA, reserveB);\\n  }\\n\\n  function getAmountOut(\\n    uint amountIn,\\n    uint reserveIn,\\n    uint reserveOut\\n  ) public pure virtual override returns (uint amountOut) {\\n    return MockUniswapV2Router02UniswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);\\n  }\\n\\n  function getAmountIn(\\n    uint amountOut,\\n    uint reserveIn,\\n    uint reserveOut\\n  ) public pure virtual override returns (uint amountIn) {\\n    return MockUniswapV2Router02UniswapV2Library.getAmountIn(amountOut, reserveIn, reserveOut);\\n  }\\n\\n  function getAmountsOut(uint amountIn, address[] memory path)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint[] memory amounts)\\n  {\\n    return MockUniswapV2Router02UniswapV2Library.getAmountsOut(factory, amountIn, path);\\n  }\\n\\n  function getAmountsIn(uint amountOut, address[] memory path)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint[] memory amounts)\\n  {\\n    return MockUniswapV2Router02UniswapV2Library.getAmountsIn(factory, amountOut, path);\\n  }\\n}\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary MockUniswapV2Router02SafeMath {\\n  function add(uint x, uint y) internal pure returns (uint z) {\\n    require((z = x + y) >= x, 'ds-math-add-overflow');\\n  }\\n\\n  function sub(uint x, uint y) internal pure returns (uint z) {\\n    require((z = x - y) <= x, 'ds-math-sub-underflow');\\n  }\\n\\n  function mul(uint x, uint y) internal pure returns (uint z) {\\n    require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n  }\\n}\\n\\nlibrary MockUniswapV2Router02UniswapV2Library {\\n  using MockUniswapV2Router02SafeMath for uint;\\n\\n  // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n  function sortTokens(address tokenA, address tokenB)\\n    internal\\n    pure\\n    returns (address token0, address token1)\\n  {\\n    require(tokenA != tokenB, 'MockUniswapV2Router02UniswapV2Library: IDENTICAL_ADDRESSES');\\n    (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    require(token0 != address(0), 'MockUniswapV2Router02UniswapV2Library: ZERO_ADDRESS');\\n  }\\n\\n  // calculates the CREATE2 address for a pair without making any external calls\\n  function pairFor(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) internal view returns (address pair) {\\n    return MockUniswapV2Router02IUniswapV2Factory(factory).getPair(tokenA, tokenB);\\n  }\\n\\n  // fetches and sorts the reserves for a pair\\n  function getReserves(\\n    address factory,\\n    address tokenA,\\n    address tokenB\\n  ) internal view returns (uint reserveA, uint reserveB) {\\n    (address token0, ) = sortTokens(tokenA, tokenB);\\n    (uint reserve0, uint reserve1, ) =\\n      MockUniswapV2Router02IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n    (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n  }\\n\\n  // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n  function quote(\\n    uint amountA,\\n    uint reserveA,\\n    uint reserveB\\n  ) internal pure returns (uint amountB) {\\n    require(amountA > 0, 'MockUniswapV2Router02UniswapV2Library: INSUFFICIENT_AMOUNT');\\n    require(\\n      reserveA > 0 && reserveB > 0,\\n      'MockUniswapV2Router02UniswapV2Library: INSUFFICIENT_LIQUIDITY'\\n    );\\n    amountB = amountA.mul(reserveB) / reserveA;\\n  }\\n\\n  // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n  function getAmountOut(\\n    uint amountIn,\\n    uint reserveIn,\\n    uint reserveOut\\n  ) internal pure returns (uint amountOut) {\\n    require(amountIn > 0, 'MockUniswapV2Router02UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\n    require(\\n      reserveIn > 0 && reserveOut > 0,\\n      'MockUniswapV2Router02UniswapV2Library: INSUFFICIENT_LIQUIDITY'\\n    );\\n    uint amountInWithFee = amountIn.mul(997);\\n    uint numerator = amountInWithFee.mul(reserveOut);\\n    uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n    amountOut = numerator / denominator;\\n  }\\n\\n  // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n  function getAmountIn(\\n    uint amountOut,\\n    uint reserveIn,\\n    uint reserveOut\\n  ) internal pure returns (uint amountIn) {\\n    require(amountOut > 0, 'MockUniswapV2Router02UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\\n    require(\\n      reserveIn > 0 && reserveOut > 0,\\n      'MockUniswapV2Router02UniswapV2Library: INSUFFICIENT_LIQUIDITY'\\n    );\\n    uint numerator = reserveIn.mul(amountOut).mul(1000);\\n    uint denominator = reserveOut.sub(amountOut).mul(997);\\n    amountIn = (numerator / denominator).add(1);\\n  }\\n\\n  // performs chained getAmountOut calculations on any number of pairs\\n  function getAmountsOut(\\n    address factory,\\n    uint amountIn,\\n    address[] memory path\\n  ) internal view returns (uint[] memory amounts) {\\n    require(path.length >= 2, 'MockUniswapV2Router02UniswapV2Library: INVALID_PATH');\\n    amounts = new uint[](path.length);\\n    amounts[0] = amountIn;\\n    for (uint i; i < path.length - 1; i++) {\\n      (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n      amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n\\n  // performs chained getAmountIn calculations on any number of pairs\\n  function getAmountsIn(\\n    address factory,\\n    uint amountOut,\\n    address[] memory path\\n  ) internal view returns (uint[] memory amounts) {\\n    require(path.length >= 2, 'MockUniswapV2Router02UniswapV2Library: INVALID_PATH');\\n    amounts = new uint[](path.length);\\n    amounts[amounts.length - 1] = amountOut;\\n    for (uint i = path.length - 1; i > 0; i--) {\\n      (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n      amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n    }\\n  }\\n}\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary MockUniswapV2Router02TransferHelper {\\n  function safeApprove(\\n    address token,\\n    address to,\\n    uint value\\n  ) internal {\\n    // bytes4(keccak256(bytes('approve(address,uint256)')));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      'MockUniswapV2Router02TransferHelper: APPROVE_FAILED'\\n    );\\n  }\\n\\n  function safeTransfer(\\n    address token,\\n    address to,\\n    uint value\\n  ) internal {\\n    // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      'MockUniswapV2Router02TransferHelper: TRANSFER_FAILED'\\n    );\\n  }\\n\\n  function safeTransferFrom(\\n    address token,\\n    address from,\\n    address to,\\n    uint value\\n  ) internal {\\n    // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n    (bool success, bytes memory data) =\\n      token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n    require(\\n      success && (data.length == 0 || abi.decode(data, (bool))),\\n      'MockUniswapV2Router02TransferHelper: TRANSFER_FROM_FAILED'\\n    );\\n  }\\n\\n  function safeTransferETH(address to, uint value) internal {\\n    (bool success, ) = to.call{value: value}(new bytes(0));\\n    require(success, 'MockUniswapV2Router02TransferHelper: ETH_TRANSFER_FAILED');\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/mock/MockCErc20.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/IERC20.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/math/SafeMath.sol';\\n\\nimport '../../interfaces/ICErc20.sol';\\n\\ncontract MockCErc20 is ICErc20 {\\n  using SafeMath for uint;\\n\\n  IERC20 public token;\\n  uint public interestPerYear = 10e16; // 10% per year\\n\\n  mapping(address => uint) public borrows;\\n  mapping(address => uint) public lastBlock;\\n\\n  constructor(IERC20 _token) public {\\n    token = _token;\\n  }\\n\\n  function decimals() external override returns (uint8) {\\n    return 8;\\n  }\\n\\n  function underlying() external override returns (address) {\\n    return address(token);\\n  }\\n\\n  function mint(uint mintAmount) external override returns (uint) {\\n    // Not implemented\\n    return 0;\\n  }\\n\\n  function redeem(uint redeemTokens) external override returns (uint) {\\n    // Not implemented\\n    return 0;\\n  }\\n\\n  function balanceOf(address user) external view override returns (uint) {\\n    // Not implemented\\n    return 0;\\n  }\\n\\n  function borrowBalanceCurrent(address account) public override returns (uint) {\\n    uint timePast = now - lastBlock[account];\\n    if (timePast > 0) {\\n      uint interest = borrows[account].mul(interestPerYear).div(100e16).mul(timePast).div(365 days);\\n      borrows[account] = borrows[account].add(interest);\\n      lastBlock[account] = now;\\n    }\\n    return borrows[account];\\n  }\\n\\n  function borrowBalanceStored(address account) external view override returns (uint) {\\n    return borrows[account];\\n  }\\n\\n  function borrow(uint borrowAmount) external override returns (uint) {\\n    borrowBalanceCurrent(msg.sender);\\n    token.transfer(msg.sender, borrowAmount);\\n    borrows[msg.sender] = borrows[msg.sender].add(borrowAmount);\\n    return 0;\\n  }\\n\\n  function repayBorrow(uint repayAmount) external override returns (uint) {\\n    borrowBalanceCurrent(msg.sender);\\n    token.transferFrom(msg.sender, address(this), repayAmount);\\n    borrows[msg.sender] = borrows[msg.sender].sub(repayAmount);\\n    return 0;\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/mock/MockWETH.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\ncontract MockWETH {\\n  string public name = 'Wrapped Ether';\\n  string public symbol = 'WETH';\\n  uint8 public decimals = 18;\\n\\n  event Approval(address indexed src, address indexed guy, uint wad);\\n  event Transfer(address indexed src, address indexed dst, uint wad);\\n  event Deposit(address indexed dst, uint wad);\\n  event Withdrawal(address indexed src, uint wad);\\n\\n  mapping(address => uint) public balanceOf;\\n  mapping(address => mapping(address => uint)) public allowance;\\n\\n  receive() external payable {\\n    deposit();\\n  }\\n\\n  function deposit() public payable {\\n    balanceOf[msg.sender] += msg.value;\\n    emit Deposit(msg.sender, msg.value);\\n  }\\n\\n  function withdraw(uint wad) public {\\n    require(balanceOf[msg.sender] >= wad);\\n    balanceOf[msg.sender] -= wad;\\n    msg.sender.transfer(wad);\\n    emit Withdrawal(msg.sender, wad);\\n  }\\n\\n  function totalSupply() public view returns (uint) {\\n    return address(this).balance;\\n  }\\n\\n  function approve(address guy, uint wad) public returns (bool) {\\n    allowance[msg.sender][guy] = wad;\\n    emit Approval(msg.sender, guy, wad);\\n    return true;\\n  }\\n\\n  function transfer(address dst, uint wad) public returns (bool) {\\n    return transferFrom(msg.sender, dst, wad);\\n  }\\n\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint wad\\n  ) public returns (bool) {\\n    require(balanceOf[src] >= wad);\\n\\n    if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\\n      require(allowance[src][msg.sender] >= wad);\\n      allowance[src][msg.sender] -= wad;\\n    }\\n\\n    balanceOf[src] -= wad;\\n    balanceOf[dst] += wad;\\n\\n    emit Transfer(src, dst, wad);\\n\\n    return true;\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/oracle/UsingBaseOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '../../interfaces/IBaseOracle.sol';\\n\\ncontract UsingBaseOracle {\\n  IBaseOracle public immutable base; // Base oracle source\\n\\n  constructor(IBaseOracle _base) public {\\n    base = _base;\\n  }\\n}\\n\"\r\n    },\r\n    \"./interfaces/IBaseOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IBaseOracle {\\n  /// @dev Return the value of the given input as ETH per unit, multiplied by 2**112.\\n  /// @param token The ERC-20 token to check the value.\\n  function getETHPx(address token) external view returns (uint);\\n}\\n\"\r\n    },\r\n    \"./contracts/oracle/SimpleOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '../Governable.sol';\\nimport '../../interfaces/IBaseOracle.sol';\\n\\ncontract SimpleOracle is IBaseOracle, Governable {\\n  mapping(address => uint) public prices; // Mapping from token to price in ETH (times 2**112).\\n\\n  /// The governor sets oracle price for a token.\\n  event SetETHPx(address token, uint px);\\n\\n  /// @dev Create the contract and initialize the first governor.\\n  constructor() public {\\n    __Governable__init();\\n  }\\n\\n  /// @dev Return the value of the given input as ETH per unit, multiplied by 2**112.\\n  /// @param token The ERC-20 token to check the value.\\n  function getETHPx(address token) external view override returns (uint) {\\n    uint px = prices[token];\\n    require(px != 0, 'no px');\\n    return px;\\n  }\\n\\n  /// @dev Set the prices of the given token addresses.\\n  /// @param tokens The token addresses to set the prices.\\n  /// @param pxs The price data points, representing token value in ETH times 2**112.\\n  function setETHPx(address[] memory tokens, uint[] memory pxs) external onlyGov {\\n    require(tokens.length == pxs.length, 'inconsistent length');\\n    for (uint idx = 0; idx < tokens.length; idx++) {\\n      prices[tokens[idx]] = pxs[idx];\\n      emit SetETHPx(tokens[idx], pxs[idx]);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/oracle/BandAdapterOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/math/SafeMath.sol';\\n\\nimport '../Governable.sol';\\nimport '../../interfaces/IBaseOracle.sol';\\n\\ninterface IStdReference {\\n  /// A structure returned whenever someone requests for standard reference data.\\n  struct ReferenceData {\\n    uint rate; // base/quote exchange rate, multiplied by 1e18.\\n    uint lastUpdatedBase; // UNIX epoch of the last time when base price gets updated.\\n    uint lastUpdatedQuote; // UNIX epoch of the last time when quote price gets updated.\\n  }\\n\\n  /// @dev Returns the price data for the given base/quote pair. Revert if not available.\\n  function getReferenceData(string memory _base, string memory _quote)\\n    external\\n    view\\n    returns (ReferenceData memory);\\n\\n  /// @dev Similar to getReferenceData, but with multiple base/quote pairs at once.\\n  function getReferenceDataBulk(string[] memory _bases, string[] memory _quotes)\\n    external\\n    view\\n    returns (ReferenceData[] memory);\\n}\\n\\ninterface BandDetailedERC20 {\\n  function decimals() external view returns (uint8);\\n}\\n\\ncontract BandAdapterOracle is IBaseOracle, Governable {\\n  using SafeMath for uint;\\n\\n  event SetSymbol(address token, string symbol);\\n  event SetRef(address ref);\\n  event SetMaxDelayTime(address token, uint maxDelayTime);\\n\\n  string public constant ETH = 'ETH';\\n  address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  IStdReference public ref; // Standard reference\\n\\n  mapping(address => string) public symbols; // Mapping from token to symbol string\\n  mapping(address => uint) public maxDelayTimes; // Mapping from token address to max delay time\\n\\n  constructor(IStdReference _ref) public {\\n    __Governable__init();\\n    ref = _ref;\\n  }\\n\\n  /// @dev Set token symbols\\n  /// @param tokens List of tokens\\n  /// @param syms List of string symbols\\n  function setSymbols(address[] memory tokens, string[] memory syms) external onlyGov {\\n    require(syms.length == tokens.length, 'inconsistent length');\\n    for (uint idx = 0; idx < syms.length; idx++) {\\n      symbols[tokens[idx]] = syms[idx];\\n      emit SetSymbol(tokens[idx], syms[idx]);\\n    }\\n  }\\n\\n  /// @dev Set standard reference source\\n  /// @param _ref Standard reference source\\n  function setRef(IStdReference _ref) external onlyGov {\\n    ref = _ref;\\n    emit SetRef(address(_ref));\\n  }\\n\\n  /// @dev Set max delay time for each token\\n  /// @param tokens list of tokens to set max delay\\n  /// @param maxDelays list of max delay times to set to\\n  function setMaxDelayTimes(address[] calldata tokens, uint[] calldata maxDelays) external onlyGov {\\n    require(tokens.length == maxDelays.length, 'tokens & maxDelays length mismatched');\\n    for (uint idx = 0; idx < tokens.length; idx++) {\\n      maxDelayTimes[tokens[idx]] = maxDelays[idx];\\n      emit SetMaxDelayTime(tokens[idx], maxDelays[idx]);\\n    }\\n  }\\n\\n  /// @dev Return the value of the given input as ETH per unit, multiplied by 2**112.\\n  /// @param token The ERC-20 token to check the value.\\n  function getETHPx(address token) external view override returns (uint) {\\n    if (token == WETH || token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) return uint(2**112);\\n\\n    string memory sym = symbols[token];\\n    uint maxDelayTime = maxDelayTimes[token];\\n    require(bytes(sym).length != 0, 'no mapping');\\n    require(maxDelayTime != 0, 'max delay time not set');\\n    uint decimals = uint(BandDetailedERC20(token).decimals());\\n    IStdReference.ReferenceData memory data = ref.getReferenceData(sym, ETH);\\n    require(data.lastUpdatedBase >= block.timestamp.sub(maxDelayTime), 'delayed base data');\\n    require(data.lastUpdatedQuote >= block.timestamp.sub(maxDelayTime), 'delayed quote data');\\n    return data.rate.mul(2**112).div(10**decimals);\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/oracle/UniswapV2Oracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/math/SafeMath.sol';\\n\\nimport './UsingBaseOracle.sol';\\nimport '../utils/HomoraMath.sol';\\nimport '../../interfaces/IBaseOracle.sol';\\nimport '../../interfaces/IUniswapV2Pair.sol';\\n\\ncontract UniswapV2Oracle is UsingBaseOracle, IBaseOracle {\\n  using SafeMath for uint;\\n  using HomoraMath for uint;\\n\\n  constructor(IBaseOracle _base) public UsingBaseOracle(_base) {}\\n\\n  /// @dev Return the value of the given input as ETH per unit, multiplied by 2**112.\\n  /// @param pair The Uniswap pair to check the value.\\n  function getETHPx(address pair) external view override returns (uint) {\\n    address token0 = IUniswapV2Pair(pair).token0();\\n    address token1 = IUniswapV2Pair(pair).token1();\\n    uint totalSupply = IUniswapV2Pair(pair).totalSupply();\\n    (uint r0, uint r1, ) = IUniswapV2Pair(pair).getReserves();\\n    uint sqrtK = HomoraMath.sqrt(r0.mul(r1)).fdiv(totalSupply); // in 2**112\\n    uint px0 = base.getETHPx(token0); // in 2**112\\n    uint px1 = base.getETHPx(token1); // in 2**112\\n    // fair token0 amt: sqrtK * sqrt(px1/px0)\\n    // fair token1 amt: sqrtK * sqrt(px0/px1)\\n    // fair lp price = 2 * sqrt(px0 * px1)\\n    // split into 2 sqrts multiplication to prevent uint overflow (note the 2**112)\\n    return sqrtK.mul(2).mul(HomoraMath.sqrt(px0)).div(2**56).mul(HomoraMath.sqrt(px1)).div(2**56);\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/oracle/BalancerPairOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/math/SafeMath.sol';\\n\\nimport './UsingBaseOracle.sol';\\nimport '../utils/BNum.sol';\\nimport '../../interfaces/IBaseOracle.sol';\\nimport '../../interfaces/IBalancerPool.sol';\\n\\ncontract BalancerPairOracle is UsingBaseOracle, IBaseOracle, BNum {\\n  using SafeMath for uint;\\n\\n  constructor(IBaseOracle _base) public UsingBaseOracle(_base) {}\\n\\n  /// @dev Return fair reserve amounts given spot reserves, weights, and fair prices.\\n  /// @param resA Reserve of the first asset\\n  /// @param resB Reserve of the second asset\\n  /// @param wA Weight of the first asset\\n  /// @param wB Weight of the second asset\\n  /// @param pxA Fair price of the first asset\\n  /// @param pxB Fair price of the second asset\\n  function computeFairReserves(\\n    uint resA,\\n    uint resB,\\n    uint wA,\\n    uint wB,\\n    uint pxA,\\n    uint pxB\\n  ) internal pure returns (uint fairResA, uint fairResB) {\\n    // NOTE: wA + wB = 1 (normalize weights)\\n    // constant product = resA^wA * resB^wB\\n    // constraints:\\n    // - fairResA^wA * fairResB^wB = constant product\\n    // - fairResA * pxA / wA = fairResB * pxB / wB\\n    // Solving equations:\\n    // --> fairResA^wA * (fairResA * (pxA * wB) / (wA * pxB))^wB = constant product\\n    // --> fairResA / r1^wB = constant product\\n    // --> fairResA = resA^wA * resB^wB * r1^wB\\n    // --> fairResA = resA * (resB/resA)^wB * r1^wB = resA * (r1/r0)^wB\\n    uint r0 = bdiv(resA, resB);\\n    uint r1 = bdiv(bmul(wA, pxB), bmul(wB, pxA));\\n    // fairResA = resA * (r1 / r0) ^ wB\\n    // fairResB = resB * (r0 / r1) ^ wA\\n    if (r0 > r1) {\\n      uint ratio = bdiv(r1, r0);\\n      fairResA = bmul(resA, bpow(ratio, wB));\\n      fairResB = bdiv(resB, bpow(ratio, wA));\\n    } else {\\n      uint ratio = bdiv(r0, r1);\\n      fairResA = bdiv(resA, bpow(ratio, wB));\\n      fairResB = bmul(resB, bpow(ratio, wA));\\n    }\\n  }\\n\\n  /// @dev Return the value of the given input as ETH per unit, multiplied by 2**112.\\n  /// @param token The ERC-20 token to check the value.\\n  function getETHPx(address token) external view override returns (uint) {\\n    IBalancerPool pool = IBalancerPool(token);\\n    require(pool.getNumTokens() == 2, 'num tokens must be 2');\\n    address[] memory tokens = pool.getFinalTokens();\\n    address tokenA = tokens[0];\\n    address tokenB = tokens[1];\\n    uint pxA = base.getETHPx(tokenA);\\n    uint pxB = base.getETHPx(tokenB);\\n    (uint fairResA, uint fairResB) =\\n      computeFairReserves(\\n        pool.getBalance(tokenA),\\n        pool.getBalance(tokenB),\\n        pool.getNormalizedWeight(tokenA),\\n        pool.getNormalizedWeight(tokenB),\\n        pxA,\\n        pxB\\n      );\\n    // use fairReserveA and fairReserveB to compute LP token price\\n    // LP price = (fairResA * pxA + fairResB * pxB) / totalLPSupply\\n    return fairResA.mul(pxA).add(fairResB.mul(pxB)).div(pool.totalSupply());\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/utils/BNum.sol\": {\r\n      \"content\": \"// https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.6.12;\\n\\nimport './BConst.sol';\\n\\ncontract BNum is BConst {\\n  function btoi(uint a) internal pure returns (uint) {\\n    return a / BONE;\\n  }\\n\\n  function bfloor(uint a) internal pure returns (uint) {\\n    return btoi(a) * BONE;\\n  }\\n\\n  function badd(uint a, uint b) internal pure returns (uint) {\\n    uint c = a + b;\\n    require(c >= a, 'ERR_ADD_OVERFLOW');\\n    return c;\\n  }\\n\\n  function bsub(uint a, uint b) internal pure returns (uint) {\\n    (uint c, bool flag) = bsubSign(a, b);\\n    require(!flag, 'ERR_SUB_UNDERFLOW');\\n    return c;\\n  }\\n\\n  function bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n    if (a >= b) {\\n      return (a - b, false);\\n    } else {\\n      return (b - a, true);\\n    }\\n  }\\n\\n  function bmul(uint a, uint b) internal pure returns (uint) {\\n    uint c0 = a * b;\\n    require(a == 0 || c0 / a == b, 'ERR_MUL_OVERFLOW');\\n    uint c1 = c0 + (BONE / 2);\\n    require(c1 >= c0, 'ERR_MUL_OVERFLOW');\\n    uint c2 = c1 / BONE;\\n    return c2;\\n  }\\n\\n  function bdiv(uint a, uint b) internal pure returns (uint) {\\n    require(b != 0, 'ERR_DIV_ZERO');\\n    uint c0 = a * BONE;\\n    require(a == 0 || c0 / a == BONE, 'ERR_DIV_INTERNAL'); // bmul overflow\\n    uint c1 = c0 + (b / 2);\\n    require(c1 >= c0, 'ERR_DIV_INTERNAL'); //  badd require\\n    uint c2 = c1 / b;\\n    return c2;\\n  }\\n\\n  // DSMath.wpow\\n  function bpowi(uint a, uint n) internal pure returns (uint) {\\n    uint z = n % 2 != 0 ? a : BONE;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n      a = bmul(a, a);\\n\\n      if (n % 2 != 0) {\\n        z = bmul(z, a);\\n      }\\n    }\\n    return z;\\n  }\\n\\n  // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\n  // Use `bpowi` for `b^e` and `bpowK` for k iterations\\n  // of approximation of b^0.w\\n  function bpow(uint base, uint exp) internal pure returns (uint) {\\n    require(base >= MIN_BPOW_BASE, 'ERR_BPOW_BASE_TOO_LOW');\\n    require(base <= MAX_BPOW_BASE, 'ERR_BPOW_BASE_TOO_HIGH');\\n\\n    uint whole = bfloor(exp);\\n    uint remain = bsub(exp, whole);\\n\\n    uint wholePow = bpowi(base, btoi(whole));\\n\\n    if (remain == 0) {\\n      return wholePow;\\n    }\\n\\n    uint partialResult = bpowApprox(base, remain, BPOW_PRECISION);\\n    return bmul(wholePow, partialResult);\\n  }\\n\\n  function bpowApprox(\\n    uint base,\\n    uint exp,\\n    uint precision\\n  ) internal pure returns (uint) {\\n    // term 0:\\n    uint a = exp;\\n    (uint x, bool xneg) = bsubSign(base, BONE);\\n    uint term = BONE;\\n    uint sum = term;\\n    bool negative = false;\\n\\n    // term(k) = numer / denom\\n    //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\n    // each iteration, multiply previous term by (a-(k-1)) * x / k\\n    // continue until term is less than precision\\n    for (uint i = 1; term >= precision; i++) {\\n      uint bigK = i * BONE;\\n      (uint c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\\n      term = bmul(term, bmul(c, x));\\n      term = bdiv(term, bigK);\\n      if (term == 0) break;\\n\\n      if (xneg) negative = !negative;\\n      if (cneg) negative = !negative;\\n      if (negative) {\\n        sum = bsub(sum, term);\\n      } else {\\n        sum = badd(sum, term);\\n      }\\n    }\\n\\n    return sum;\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/utils/BConst.sol\": {\r\n      \"content\": \"// https://github.com/balancer-labs/balancer-core/blob/master/contracts/BConst.sol\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity 0.6.12;\\n\\ncontract BConst {\\n  uint public constant BONE = 10**18;\\n\\n  uint public constant MIN_BOUND_TOKENS = 2;\\n  uint public constant MAX_BOUND_TOKENS = 8;\\n\\n  uint public constant MIN_FEE = BONE / 10**6;\\n  uint public constant MAX_FEE = BONE / 10;\\n  uint public constant EXIT_FEE = 0;\\n\\n  uint public constant MIN_WEIGHT = BONE;\\n  uint public constant MAX_WEIGHT = BONE * 50;\\n  uint public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n  uint public constant MIN_BALANCE = BONE / 10**12;\\n\\n  uint public constant INIT_POOL_SUPPLY = BONE * 100;\\n\\n  uint public constant MIN_BPOW_BASE = 1 wei;\\n  uint public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\\n  uint public constant BPOW_PRECISION = BONE / 10**10;\\n\\n  uint public constant MAX_IN_RATIO = BONE / 2;\\n  uint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n}\\n\"\r\n    },\r\n    \"./contracts/oracle/CurveOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/math/SafeMath.sol';\\n\\nimport './UsingBaseOracle.sol';\\nimport '../../interfaces/IBaseOracle.sol';\\nimport '../../interfaces/ICurvePool.sol';\\nimport '../../interfaces/ICurveRegistry.sol';\\n\\ninterface IERC20Decimal {\\n  function decimals() external view returns (uint8);\\n}\\n\\ncontract CurveOracle is UsingBaseOracle, IBaseOracle {\\n  using SafeMath for uint;\\n\\n  ICurveRegistry public immutable registry; // Curve registry\\n\\n  struct UnderlyingToken {\\n    uint8 decimals; // token decimals\\n    address token; // token address\\n  }\\n\\n  mapping(address => UnderlyingToken[]) public ulTokens; // Mapping from LP token to underlying tokens\\n  mapping(address => address) public poolOf; // Mapping from LP token to pool\\n\\n  constructor(IBaseOracle _base, ICurveRegistry _registry) public UsingBaseOracle(_base) {\\n    registry = _registry;\\n  }\\n\\n  /// @dev Register the pool given LP token address and set the pool info.\\n  /// @param lp LP token to find the corresponding pool.\\n  function registerPool(address lp) external {\\n    address pool = poolOf[lp];\\n    require(pool == address(0), 'lp is already registered');\\n    pool = registry.get_pool_from_lp_token(lp);\\n    require(pool != address(0), 'no corresponding pool for lp token');\\n    poolOf[lp] = pool;\\n    (uint n, ) = registry.get_n_coins(pool);\\n    address[8] memory tokens = registry.get_coins(pool);\\n    for (uint i = 0; i < n; i++) {\\n      ulTokens[lp].push(\\n        UnderlyingToken({token: tokens[i], decimals: IERC20Decimal(tokens[i]).decimals()})\\n      );\\n    }\\n  }\\n\\n  /// @dev Return the value of the given input as ETH per unit, multiplied by 2**112.\\n  /// @param lp The ERC-20 LP token to check the value.\\n  function getETHPx(address lp) external view override returns (uint) {\\n    address pool = poolOf[lp];\\n    require(pool != address(0), 'lp is not registered');\\n    UnderlyingToken[] memory tokens = ulTokens[lp];\\n    uint minPx = uint(-1);\\n    uint n = tokens.length;\\n    for (uint idx = 0; idx < n; idx++) {\\n      UnderlyingToken memory ulToken = tokens[idx];\\n      uint tokenPx = base.getETHPx(ulToken.token);\\n      if (ulToken.decimals < 18) tokenPx = tokenPx.div(10**(18 - uint(ulToken.decimals)));\\n      if (ulToken.decimals > 18) tokenPx = tokenPx.mul(10**(uint(ulToken.decimals) - 18));\\n      if (tokenPx < minPx) minPx = tokenPx;\\n    }\\n    require(minPx != uint(-1), 'no min px');\\n    // use min underlying token prices\\n    return minPx.mul(ICurvePool(pool).get_virtual_price()).div(1e18);\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/oracle/ChainlinkAdapterOracle.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.2.0/contracts/math/SafeMath.sol';\\n\\nimport '../Governable.sol';\\nimport '../../interfaces/IBaseOracle.sol';\\n\\ninterface IAggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int answer,\\n      uint startedAt,\\n      uint updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int answer,\\n      uint startedAt,\\n      uint updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\\ninterface ChainlinkDetailedERC20 {\\n  function decimals() external view returns (uint8);\\n}\\n\\ncontract ChainlinkAdapterOracle is IBaseOracle, Governable {\\n  using SafeMath for uint;\\n\\n  event SetRefETH(address token, address ref);\\n  event SetRefUSD(address token, address ref);\\n  event SetMaxDelayTime(address token, uint maxDelayTime);\\n  event SetRefETHUSD(address ref);\\n\\n  address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n  address public refETHUSD = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419; // ETH-USD price reference\\n  mapping(address => address) public refsETH; // Mapping from token address to ETH price reference\\n  mapping(address => address) public refsUSD; // Mapping from token address to USD price reference\\n  mapping(address => uint) public maxDelayTimes; // Mapping from token address to max delay time\\n\\n  constructor() public {\\n    __Governable__init();\\n  }\\n\\n  /// @dev Set price reference for ETH pair\\n  /// @param tokens list of tokens to set reference\\n  /// @param refs list of reference contract addresses\\n  function setRefsETH(address[] calldata tokens, address[] calldata refs) external onlyGov {\\n    require(tokens.length == refs.length, 'tokens & refs length mismatched');\\n    for (uint idx = 0; idx < tokens.length; idx++) {\\n      refsETH[tokens[idx]] = refs[idx];\\n      emit SetRefETH(tokens[idx], refs[idx]);\\n    }\\n  }\\n\\n  /// @dev Set price reference for USD pair\\n  /// @param tokens list of tokens to set reference\\n  /// @param refs list of reference contract addresses\\n  function setRefsUSD(address[] calldata tokens, address[] calldata refs) external onlyGov {\\n    require(tokens.length == refs.length, 'tokens & refs length mismatched');\\n    for (uint idx = 0; idx < tokens.length; idx++) {\\n      refsUSD[tokens[idx]] = refs[idx];\\n      emit SetRefUSD(tokens[idx], refs[idx]);\\n    }\\n  }\\n\\n  /// @dev Set max delay time for each token\\n  /// @param tokens list of tokens to set max delay\\n  /// @param maxDelays list of max delay times to set to\\n  function setMaxDelayTimes(address[] calldata tokens, uint[] calldata maxDelays) external onlyGov {\\n    require(tokens.length == maxDelays.length, 'tokens & maxDelays length mismatched');\\n    for (uint idx = 0; idx < tokens.length; idx++) {\\n      maxDelayTimes[tokens[idx]] = maxDelays[idx];\\n      emit SetMaxDelayTime(tokens[idx], maxDelays[idx]);\\n    }\\n  }\\n\\n  /// @dev Set ETH-USD to the new reference\\n  /// @param _refETHUSD The new ETH-USD reference address to set to\\n  function setRefETHUSD(address _refETHUSD) external onlyGov {\\n    refETHUSD = _refETHUSD;\\n    emit SetRefETHUSD(_refETHUSD);\\n  }\\n\\n  /// @dev Return token price in ETH, multiplied by 2**112\\n  /// @param token Token address to get price\\n  function getETHPx(address token) external view override returns (uint) {\\n    if (token == WETH || token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) return uint(2**112);\\n    uint decimals = uint(ChainlinkDetailedERC20(token).decimals());\\n    uint maxDelayTime = maxDelayTimes[token];\\n    require(maxDelayTime != 0, 'max delay time not set');\\n\\n    // 1. Check token-ETH price ref\\n    address refETH = refsETH[token];\\n    if (refETH != address(0)) {\\n      (, int answer, , uint updatedAt, ) = IAggregatorV3Interface(refETH).latestRoundData();\\n      require(updatedAt >= block.timestamp.sub(maxDelayTime), 'delayed update time');\\n      return uint(answer).mul(2**112).div(10**decimals);\\n    }\\n\\n    // 2. Check token-USD price ref\\n    address refUSD = refsUSD[token];\\n    if (refUSD != address(0)) {\\n      (, int answer, , uint updatedAt, ) = IAggregatorV3Interface(refUSD).latestRoundData();\\n      require(updatedAt >= block.timestamp.sub(maxDelayTime), 'delayed update time');\\n      (, int ethAnswer, , uint ethUpdatedAt, ) =\\n        IAggregatorV3Interface(refETHUSD).latestRoundData();\\n      require(ethUpdatedAt >= block.timestamp.sub(maxDelayTime), 'delayed eth-usd update time');\\n      return uint(answer).mul(2**112).div(uint(ethAnswer)).div(10**decimals);\\n    }\\n\\n    revert('no valid price reference for token');\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/oracle/ERC20KP3ROracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport './BaseKP3ROracle.sol';\\nimport '../../interfaces/IBaseOracle.sol';\\nimport '../../interfaces/IKeep3rV1Oracle.sol';\\nimport '../../interfaces/IUniswapV2Factory.sol';\\n\\ncontract ERC20KP3ROracle is IBaseOracle, BaseKP3ROracle {\\n  constructor(IKeep3rV1Oracle _kp3r) public BaseKP3ROracle(_kp3r) {}\\n\\n  /// @dev Return the value of the given input as ETH per unit, multiplied by 2**112.\\n  /// @param token The ERC-20 token to check the value.\\n  function getETHPx(address token) external view override returns (uint) {\\n    if (token == weth || token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\\n      return 2**112;\\n    }\\n    address pair = IUniswapV2Factory(factory).getPair(token, weth);\\n    if (token < weth) {\\n      return price0TWAP(pair);\\n    } else {\\n      return price1TWAP(pair);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/oracle/BaseKP3ROracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/proxy/Initializable.sol';\\n\\nimport '../../interfaces/IKeep3rV1Oracle.sol';\\nimport '../../interfaces/IUniswapV2Pair.sol';\\n\\ncontract BaseKP3ROracle is Initializable {\\n  uint public constant MIN_TWAP_TIME = 15 minutes;\\n  uint public constant MAX_TWAP_TIME = 60 minutes;\\n\\n  IKeep3rV1Oracle public immutable kp3r;\\n  address public immutable factory;\\n  address public immutable weth;\\n\\n  constructor(IKeep3rV1Oracle _kp3r) public {\\n    kp3r = _kp3r;\\n    factory = _kp3r.factory();\\n    weth = _kp3r.WETH();\\n  }\\n\\n  /// @dev Return the TWAP value price0. Revert if TWAP time range is not within the threshold.\\n  /// @param pair The pair to query for price0.\\n  function price0TWAP(address pair) public view returns (uint) {\\n    uint length = kp3r.observationLength(pair);\\n    require(length > 0, 'no length-1 observation');\\n    (uint lastTime, uint lastPx0Cumu, ) = kp3r.observations(pair, length - 1);\\n    if (lastTime > block.timestamp - MIN_TWAP_TIME) {\\n      require(length > 1, 'no length-2 observation');\\n      (lastTime, lastPx0Cumu, ) = kp3r.observations(pair, length - 2);\\n    }\\n    uint elapsedTime = block.timestamp - lastTime;\\n    require(elapsedTime >= MIN_TWAP_TIME && elapsedTime <= MAX_TWAP_TIME, 'bad TWAP time');\\n    uint currPx0Cumu = currentPx0Cumu(pair);\\n    return (currPx0Cumu - lastPx0Cumu) / (block.timestamp - lastTime); // overflow is desired\\n  }\\n\\n  /// @dev Return the TWAP value price1. Revert if TWAP time range is not within the threshold.\\n  /// @param pair The pair to query for price1.\\n  function price1TWAP(address pair) public view returns (uint) {\\n    uint length = kp3r.observationLength(pair);\\n    require(length > 0, 'no length-1 observation');\\n    (uint lastTime, , uint lastPx1Cumu) = kp3r.observations(pair, length - 1);\\n    if (lastTime > block.timestamp - MIN_TWAP_TIME) {\\n      require(length > 1, 'no length-2 observation');\\n      (lastTime, , lastPx1Cumu) = kp3r.observations(pair, length - 2);\\n    }\\n    uint elapsedTime = block.timestamp - lastTime;\\n    require(elapsedTime >= MIN_TWAP_TIME && elapsedTime <= MAX_TWAP_TIME, 'bad TWAP time');\\n    uint currPx1Cumu = currentPx1Cumu(pair);\\n    return (currPx1Cumu - lastPx1Cumu) / (block.timestamp - lastTime); // overflow is desired\\n  }\\n\\n  /// @dev Return the current price0 cumulative value on uniswap.\\n  /// @param pair The uniswap pair to query for price0 cumulative value.\\n  function currentPx0Cumu(address pair) public view returns (uint px0Cumu) {\\n    uint32 currTime = uint32(block.timestamp);\\n    px0Cumu = IUniswapV2Pair(pair).price0CumulativeLast();\\n    (uint reserve0, uint reserve1, uint32 lastTime) = IUniswapV2Pair(pair).getReserves();\\n    if (lastTime != block.timestamp) {\\n      uint32 timeElapsed = currTime - lastTime; // overflow is desired\\n      px0Cumu += uint((reserve1 << 112) / reserve0) * timeElapsed; // overflow is desired\\n    }\\n  }\\n\\n  /// @dev Return the current price1 cumulative value on uniswap.\\n  /// @param pair The uniswap pair to query for price1 cumulative value.\\n  function currentPx1Cumu(address pair) public view returns (uint px1Cumu) {\\n    uint32 currTime = uint32(block.timestamp);\\n    px1Cumu = IUniswapV2Pair(pair).price1CumulativeLast();\\n    (uint reserve0, uint reserve1, uint32 lastTime) = IUniswapV2Pair(pair).getReserves();\\n    if (lastTime != currTime) {\\n      uint32 timeElapsed = currTime - lastTime; // overflow is desired\\n      px1Cumu += uint((reserve0 << 112) / reserve1) * timeElapsed; // overflow is desired\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"./interfaces/IKeep3rV1Oracle.sol\": {\r\n      \"content\": \"pragma solidity 0.6.12;\\n\\nabstract contract IKeep3rV1Oracle {\\n  struct Observation {\\n    uint timestamp;\\n    uint price0Cumulative;\\n    uint price1Cumulative;\\n  }\\n\\n  function WETH() external pure virtual returns (address);\\n\\n  function factory() external pure virtual returns (address);\\n\\n  mapping(address => Observation[]) public observations;\\n\\n  function observationLength(address pair) external view virtual returns (uint);\\n}\\n\"\r\n    },\r\n    \"./contracts/oracle/AggregatorOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/math/SafeMath.sol';\\n\\nimport '../Governable.sol';\\nimport '../../interfaces/IBaseOracle.sol';\\n\\ncontract AggregatorOracle is IBaseOracle, Governable {\\n  using SafeMath for uint;\\n\\n  event SetPrimarySources(address indexed token, uint maxPriceDeviation, IBaseOracle[] oracles);\\n\\n  address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // WETH address\\n  mapping(address => uint) public primarySourceCount; // Mapping from token to number of sources\\n  mapping(address => mapping(uint => IBaseOracle)) public primarySources; // Mapping from token to (mapping from index to oracle source)\\n  mapping(address => uint) public maxPriceDeviations; // Mapping from token to max price deviation (multiplied by 1e18)\\n\\n  uint public constant MIN_PRICE_DEVIATION = 1e18; // min price deviation\\n  uint public constant MAX_PRICE_DEVIATION = 1.5e18; // max price deviation\\n\\n  constructor() public {\\n    __Governable__init();\\n  }\\n\\n  /// @dev Set oracle primary sources for the token\\n  /// @param token Token address to set oracle sources\\n  /// @param maxPriceDeviation Max price deviation (in 1e18) for token\\n  /// @param sources Oracle sources for the token\\n  function setPrimarySources(\\n    address token,\\n    uint maxPriceDeviation,\\n    IBaseOracle[] memory sources\\n  ) external onlyGov {\\n    _setPrimarySources(token, maxPriceDeviation, sources);\\n  }\\n\\n  /// @dev Set oracle primary sources for multiple tokens\\n  /// @param tokens List of token addresses to set oracle sources\\n  /// @param maxPriceDeviationList List of max price deviations (in 1e18) for tokens\\n  /// @param allSources List of oracle sources for tokens\\n  function setMultiPrimarySources(\\n    address[] memory tokens,\\n    uint[] memory maxPriceDeviationList,\\n    IBaseOracle[][] memory allSources\\n  ) external onlyGov {\\n    require(tokens.length == allSources.length, 'inconsistent length');\\n    require(tokens.length == maxPriceDeviationList.length, 'inconsistent length');\\n    for (uint idx = 0; idx < tokens.length; idx++) {\\n      _setPrimarySources(tokens[idx], maxPriceDeviationList[idx], allSources[idx]);\\n    }\\n  }\\n\\n  /// @dev Set oracle primary sources for tokens\\n  /// @param token Token to set oracle sources\\n  /// @param maxPriceDeviation Max price deviation (in 1e18) for token\\n  /// @param sources Oracle sources for the token\\n  function _setPrimarySources(\\n    address token,\\n    uint maxPriceDeviation,\\n    IBaseOracle[] memory sources\\n  ) internal {\\n    primarySourceCount[token] = sources.length;\\n    require(\\n      maxPriceDeviation >= MIN_PRICE_DEVIATION && maxPriceDeviation <= MAX_PRICE_DEVIATION,\\n      'bad max deviation value'\\n    );\\n    require(sources.length <= 3, 'sources length exceed 3');\\n    maxPriceDeviations[token] = maxPriceDeviation;\\n    for (uint idx = 0; idx < sources.length; idx++) {\\n      primarySources[token][idx] = sources[idx];\\n    }\\n    emit SetPrimarySources(token, maxPriceDeviation, sources);\\n  }\\n\\n  /// @dev Return token price relative to ETH, multiplied by 2**112\\n  /// @param token Token to get price of\\n  /// NOTE: Support at most 3 oracle sources per token\\n  function getETHPx(address token) public view override returns (uint) {\\n    uint candidateSourceCount = primarySourceCount[token];\\n    require(candidateSourceCount > 0, 'no primary source');\\n    uint[] memory prices = new uint[](candidateSourceCount);\\n\\n    // Get valid oracle sources\\n    uint validSourceCount = 0;\\n    for (uint idx = 0; idx < candidateSourceCount; idx++) {\\n      try primarySources[token][idx].getETHPx(token) returns (uint px) {\\n        prices[validSourceCount++] = px;\\n      } catch {}\\n    }\\n    require(validSourceCount > 0, 'no valid source');\\n    for (uint i = 0; i < validSourceCount - 1; i++) {\\n      for (uint j = 0; j < validSourceCount - i - 1; j++) {\\n        if (prices[j] > prices[j + 1]) {\\n          (prices[j], prices[j + 1]) = (prices[j + 1], prices[j]);\\n        }\\n      }\\n    }\\n    uint maxPriceDeviation = maxPriceDeviations[token];\\n\\n    // Algo:\\n    // - 1 valid source --> return price\\n    // - 2 valid sources\\n    //     --> if the prices within deviation threshold, return average\\n    //     --> else revert\\n    // - 3 valid sources --> check deviation threshold of each pair\\n    //     --> if all within threshold, return median\\n    //     --> if one pair within threshold, return average of the pair\\n    //     --> if none, revert\\n    // - revert otherwise\\n    if (validSourceCount == 1) {\\n      return prices[0]; // if 1 valid source, return\\n    } else if (validSourceCount == 2) {\\n      require(\\n        prices[1].mul(1e18) / prices[0] <= maxPriceDeviation,\\n        'too much deviation (2 valid sources)'\\n      );\\n      return prices[0].add(prices[1]) / 2; // if 2 valid sources, return average\\n    } else if (validSourceCount == 3) {\\n      bool midMinOk = prices[1].mul(1e18) / prices[0] <= maxPriceDeviation;\\n      bool maxMidOk = prices[2].mul(1e18) / prices[1] <= maxPriceDeviation;\\n      if (midMinOk && maxMidOk) {\\n        return prices[1]; // if 3 valid sources, and each pair is within thresh, return median\\n      } else if (midMinOk) {\\n        return prices[0].add(prices[1]) / 2; // return average of pair within thresh\\n      } else if (maxMidOk) {\\n        return prices[1].add(prices[2]) / 2; // return average of pair within thresh\\n      } else {\\n        revert('too much deviation (3 valid sources)');\\n      }\\n    } else {\\n      revert('more than 3 valid sources not supported');\\n    }\\n  }\\n\\n  /// @dev Return the price of token0/token1, multiplied by 1e18\\n  /// @notice One of the input tokens must be WETH\\n  function getPrice(address token0, address token1) external view returns (uint, uint) {\\n    require(token0 == WETH || token1 == WETH, 'one of the requested tokens must be ETH or WETH');\\n    if (token0 == WETH) {\\n      return (uint(2**112).mul(1e18).div(getETHPx(token1)), block.timestamp);\\n    } else {\\n      return (getETHPx(token0).mul(1e18).div(2**112), block.timestamp);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/oracle/ProxyOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/math/SafeMath.sol';\\n\\nimport '../Governable.sol';\\nimport '../../interfaces/IOracle.sol';\\nimport '../../interfaces/IBaseOracle.sol';\\nimport '../../interfaces/IERC20Wrapper.sol';\\n\\ncontract ProxyOracle is IOracle, Governable {\\n  using SafeMath for uint;\\n\\n  /// The governor sets oracle information for a token.\\n  event SetOracle(address indexed token, TokenFactors info);\\n  /// The governor unsets oracle information for a token.\\n  event UnsetOracle(address indexed token);\\n  /// The governor sets token whitelist for an ERC1155 token.\\n  event SetWhitelist(address indexed token, bool ok);\\n\\n  struct TokenFactors {\\n    uint16 borrowFactor; // The borrow factor for this token, multiplied by 1e4.\\n    uint16 collateralFactor; // The collateral factor for this token, multiplied by 1e4.\\n    uint16 liqIncentive; // The liquidation incentive, multiplied by 1e4.\\n  }\\n\\n  IBaseOracle public immutable source; // Main oracle source\\n  mapping(address => TokenFactors) public oracles; // Mapping from token address to oracle info.\\n  mapping(address => bool) public whitelistERC1155; // Mapping from token address to whitelist status\\n\\n  /// @dev Create the contract and initialize the first governor.\\n  constructor(IBaseOracle _source) public {\\n    source = _source;\\n    __Governable__init();\\n  }\\n\\n  /// @dev Set oracle information for the given list of token addresses.\\n  /// @param tokens List of tokens to set info\\n  /// @param info List of oracle info\\n  function setOracles(address[] memory tokens, TokenFactors[] memory info) external onlyGov {\\n    require(tokens.length == info.length, 'inconsistent length');\\n    for (uint idx = 0; idx < tokens.length; idx++) {\\n      require(info[idx].borrowFactor >= 10000, 'borrow factor must be at least 100%');\\n      require(info[idx].collateralFactor <= 10000, 'collateral factor must be at most 100%');\\n      require(info[idx].liqIncentive >= 10000, 'incentive must be at least 100%');\\n      require(info[idx].liqIncentive <= 20000, 'incentive must be at most 200%');\\n      oracles[tokens[idx]] = info[idx];\\n      emit SetOracle(tokens[idx], info[idx]);\\n    }\\n  }\\n\\n  /// @dev Unset oracle information for the given list of token addresses\\n  /// @param tokens List of tokens to unset info\\n  function unsetOracles(address[] memory tokens) external onlyGov {\\n    for (uint idx = 0; idx < tokens.length; idx++) {\\n      delete oracles[tokens[idx]];\\n      emit UnsetOracle(tokens[idx]);\\n    }\\n  }\\n\\n  /// @dev Set whitelist status for the given list of token addresses.\\n  /// @param tokens List of tokens to set whitelist status\\n  /// @param ok Whitelist status\\n  function setWhitelistERC1155(address[] memory tokens, bool ok) external onlyGov {\\n    for (uint idx = 0; idx < tokens.length; idx++) {\\n      whitelistERC1155[tokens[idx]] = ok;\\n      emit SetWhitelist(tokens[idx], ok);\\n    }\\n  }\\n\\n  /// @dev Return whether the oracle supports evaluating collateral value of the given token.\\n  /// @param token ERC1155 token address to check for support\\n  /// @param id ERC1155 token id to check for support\\n  function supportWrappedToken(address token, uint id) external view override returns (bool) {\\n    if (!whitelistERC1155[token]) return false;\\n    address tokenUnderlying = IERC20Wrapper(token).getUnderlyingToken(id);\\n    return oracles[tokenUnderlying].liqIncentive != 0;\\n  }\\n\\n  /// @dev Return the amount of token out as liquidation reward for liquidating token in.\\n  /// @param tokenIn Input ERC20 token\\n  /// @param tokenOut Output ERC1155 token\\n  /// @param tokenOutId Output ERC1155 token id\\n  /// @param amountIn Input ERC20 token amount\\n  function convertForLiquidation(\\n    address tokenIn,\\n    address tokenOut,\\n    uint tokenOutId,\\n    uint amountIn\\n  ) external view override returns (uint) {\\n    require(whitelistERC1155[tokenOut], 'bad token');\\n    address tokenOutUnderlying = IERC20Wrapper(tokenOut).getUnderlyingToken(tokenOutId);\\n    uint rateUnderlying = IERC20Wrapper(tokenOut).getUnderlyingRate(tokenOutId);\\n    TokenFactors memory oracleIn = oracles[tokenIn];\\n    TokenFactors memory oracleOut = oracles[tokenOutUnderlying];\\n    require(oracleIn.liqIncentive != 0, 'bad underlying in');\\n    require(oracleOut.liqIncentive != 0, 'bad underlying out');\\n    uint pxIn = source.getETHPx(tokenIn);\\n    uint pxOut = source.getETHPx(tokenOutUnderlying);\\n    uint amountOut = amountIn.mul(pxIn).div(pxOut);\\n    amountOut = amountOut.mul(2**112).div(rateUnderlying);\\n    return amountOut.mul(oracleIn.liqIncentive).mul(oracleOut.liqIncentive).div(10000 * 10000);\\n  }\\n\\n  /// @dev Return the value of the given input as ETH for collateral purpose.\\n  /// @param token ERC1155 token address to get collateral value\\n  /// @param id ERC1155 token id to get collateral value\\n  /// @param amount Token amount to get collateral value\\n  /// @param owner Token owner address (currently unused by this implementation)\\n  function asETHCollateral(\\n    address token,\\n    uint id,\\n    uint amount,\\n    address owner\\n  ) external view override returns (uint) {\\n    require(whitelistERC1155[token], 'bad token');\\n    address tokenUnderlying = IERC20Wrapper(token).getUnderlyingToken(id);\\n    uint rateUnderlying = IERC20Wrapper(token).getUnderlyingRate(id);\\n    uint amountUnderlying = amount.mul(rateUnderlying).div(2**112);\\n    TokenFactors memory oracle = oracles[tokenUnderlying];\\n    require(oracle.liqIncentive != 0, 'bad underlying collateral');\\n    uint ethValue = source.getETHPx(tokenUnderlying).mul(amountUnderlying).div(2**112);\\n    return ethValue.mul(oracle.collateralFactor).div(10000);\\n  }\\n\\n  /// @dev Return the value of the given input as ETH for borrow purpose.\\n  /// @param token ERC20 token address to get borrow value\\n  /// @param amount ERC20 token amount to get borrow value\\n  /// @param owner Token owner address (currently unused by this implementation)\\n  function asETHBorrow(\\n    address token,\\n    uint amount,\\n    address owner\\n  ) external view override returns (uint) {\\n    TokenFactors memory oracle = oracles[token];\\n    require(oracle.liqIncentive != 0, 'bad underlying borrow');\\n    uint ethValue = source.getETHPx(token).mul(amount).div(2**112);\\n    return ethValue.mul(oracle.borrowFactor).div(10000);\\n  }\\n\\n  /// @dev Return whether the ERC20 token is supported\\n  /// @param token The ERC20 token to check for support\\n  function support(address token) external view override returns (bool) {\\n    try source.getETHPx(token) returns (uint px) {\\n      return px != 0 && oracles[token].liqIncentive != 0;\\n    } catch {\\n      return false;\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"./interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\ninterface IOracle {\\n  /// @dev Return whether the oracle supports evaluating collateral value of the given address.\\n  /// @param token The ERC-1155 token to check the acceptence.\\n  /// @param id The token id to check the acceptance.\\n  function supportWrappedToken(address token, uint id) external view returns (bool);\\n\\n  /// @dev Return the amount of token out as liquidation reward for liquidating token in.\\n  /// @param tokenIn The ERC-20 token that gets liquidated.\\n  /// @param tokenOut The ERC-1155 token to pay as reward.\\n  /// @param tokenOutId The id of the token to pay as reward.\\n  /// @param amountIn The amount of liquidating tokens.\\n  function convertForLiquidation(\\n    address tokenIn,\\n    address tokenOut,\\n    uint tokenOutId,\\n    uint amountIn\\n  ) external view returns (uint);\\n\\n  /// @dev Return the value of the given input as ETH for collateral purpose.\\n  /// @param token The ERC-1155 token to check the value.\\n  /// @param id The id of the token to check the value.\\n  /// @param amount The amount of tokens to check the value.\\n  /// @param owner The owner of the token to check for collateral credit.\\n  function asETHCollateral(\\n    address token,\\n    uint id,\\n    uint amount,\\n    address owner\\n  ) external view returns (uint);\\n\\n  /// @dev Return the value of the given input as ETH for borrow purpose.\\n  /// @param token The ERC-20 token to check the value.\\n  /// @param amount The amount of tokens to check the value.\\n  /// @param owner The owner of the token to check for borrow credit.\\n  function asETHBorrow(\\n    address token,\\n    uint amount,\\n    address owner\\n  ) external view returns (uint);\\n\\n  /// @dev Return whether the ERC-20 token is supported\\n  /// @param token The ERC-20 token to check for support\\n  function support(address token) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"./contracts/oracle/CoreOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport '../../interfaces/IBaseOracle.sol';\\nimport '../Governable.sol';\\n\\ncontract CoreOracle is IBaseOracle, Governable {\\n  event SetRoute(address indexed token, address route);\\n  mapping(address => address) public routes; // Mapping from token to oracle source\\n\\n  constructor() public {\\n    __Governable__init();\\n  }\\n\\n  /// @dev Set oracle source routes for tokens\\n  /// @param tokens List of tokens\\n  /// @param targets List of oracle source routes\\n  function setRoute(address[] calldata tokens, address[] calldata targets) external onlyGov {\\n    require(tokens.length == targets.length, 'inconsistent length');\\n    for (uint idx = 0; idx < tokens.length; idx++) {\\n      routes[tokens[idx]] = targets[idx];\\n      emit SetRoute(tokens[idx], targets[idx]);\\n    }\\n  }\\n\\n  /// @dev Return the value of the given input as ETH per unit, multiplied by 2**112.\\n  /// @param token The ERC-20 token to check the value.\\n  function getETHPx(address token) external view override returns (uint) {\\n    uint px = IBaseOracle(routes[token]).getETHPx(token);\\n    require(px != 0, 'price oracle failure');\\n    return px;\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/IbETHRouterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/math/SafeMath.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/IERC20.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/SafeERC20.sol';\\nimport './utils/HomoraMath.sol';\\n\\ninterface IbETHRouterV2IbETHv2 is IERC20 {\\n  function deposit() external payable;\\n\\n  function withdraw(uint amount) external;\\n}\\n\\ninterface IbETHRouterV2UniswapPair is IERC20 {\\n  function token0() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint,\\n      uint,\\n      uint\\n    );\\n}\\n\\ninterface IbETHRouterV2UniswapRouter {\\n  function factory() external view returns (address);\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint amountADesired,\\n    uint amountBDesired,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  )\\n    external\\n    returns (\\n      uint amountA,\\n      uint amountB,\\n      uint liquidity\\n    );\\n\\n  function removeLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint liquidity,\\n    uint amountAMin,\\n    uint amountBMin,\\n    address to,\\n    uint deadline\\n  ) external returns (uint amountA, uint amountB);\\n\\n  function swapExactTokensForTokens(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint deadline\\n  ) external returns (uint[] memory amounts);\\n}\\n\\ninterface IbETHRouterV2UniswapFactory {\\n  function getPair(address tokenA, address tokenB) external view returns (address);\\n}\\n\\ncontract IbETHRouterV2 {\\n  using SafeMath for uint;\\n  using SafeERC20 for IERC20;\\n\\n  IERC20 public immutable alpha;\\n  IbETHRouterV2IbETHv2 public immutable ibETHv2;\\n  IbETHRouterV2UniswapPair public immutable lpToken;\\n  IbETHRouterV2UniswapRouter public immutable router;\\n\\n  constructor(\\n    IERC20 _alpha,\\n    IbETHRouterV2IbETHv2 _ibETHv2,\\n    IbETHRouterV2UniswapRouter _router\\n  ) public {\\n    IbETHRouterV2UniswapPair _lpToken =\\n      IbETHRouterV2UniswapPair(\\n        IbETHRouterV2UniswapFactory(_router.factory()).getPair(address(_alpha), address(_ibETHv2))\\n      );\\n    alpha = _alpha;\\n    ibETHv2 = _ibETHv2;\\n    lpToken = _lpToken;\\n    router = _router;\\n    IERC20(_alpha).safeApprove(address(_router), uint(-1));\\n    IERC20(_ibETHv2).safeApprove(address(_router), uint(-1));\\n    IERC20(_lpToken).safeApprove(address(_router), uint(-1));\\n  }\\n\\n  function optimalDeposit(\\n    uint amtA,\\n    uint amtB,\\n    uint resA,\\n    uint resB\\n  ) internal pure returns (uint swapAmt, bool isReversed) {\\n    if (amtA.mul(resB) >= amtB.mul(resA)) {\\n      swapAmt = _optimalDepositA(amtA, amtB, resA, resB);\\n      isReversed = false;\\n    } else {\\n      swapAmt = _optimalDepositA(amtB, amtA, resB, resA);\\n      isReversed = true;\\n    }\\n  }\\n\\n  function _optimalDepositA(\\n    uint amtA,\\n    uint amtB,\\n    uint resA,\\n    uint resB\\n  ) internal pure returns (uint) {\\n    require(amtA.mul(resB) >= amtB.mul(resA), 'Reversed');\\n    uint a = 997;\\n    uint b = uint(1997).mul(resA);\\n    uint _c = (amtA.mul(resB)).sub(amtB.mul(resA));\\n    uint c = _c.mul(1000).div(amtB.add(resB)).mul(resA);\\n    uint d = a.mul(c).mul(4);\\n    uint e = HomoraMath.sqrt(b.mul(b).add(d));\\n    uint numerator = e.sub(b);\\n    uint denominator = a.mul(2);\\n    return numerator.div(denominator);\\n  }\\n\\n  function swapExactETHToAlpha(\\n    uint amountOutMin,\\n    address to,\\n    uint deadline\\n  ) external payable {\\n    ibETHv2.deposit{value: msg.value}();\\n    address[] memory path = new address[](2);\\n    path[0] = address(ibETHv2);\\n    path[1] = address(alpha);\\n    router.swapExactTokensForTokens(\\n      ibETHv2.balanceOf(address(this)),\\n      amountOutMin,\\n      path,\\n      to,\\n      deadline\\n    );\\n  }\\n\\n  function swapExactAlphaToETH(\\n    uint amountIn,\\n    uint amountOutMin,\\n    address to,\\n    uint deadline\\n  ) external {\\n    alpha.transferFrom(msg.sender, address(this), amountIn);\\n    address[] memory path = new address[](2);\\n    path[0] = address(alpha);\\n    path[1] = address(ibETHv2);\\n    router.swapExactTokensForTokens(amountIn, 0, path, address(this), deadline);\\n    ibETHv2.withdraw(ibETHv2.balanceOf(address(this)));\\n    uint ethBalance = address(this).balance;\\n    require(ethBalance >= amountOutMin, '!amountOutMin');\\n    (bool success, ) = to.call{value: ethBalance}(new bytes(0));\\n    require(success, '!eth');\\n  }\\n\\n  function addLiquidityETHAlphaOptimal(\\n    uint amountAlpha,\\n    uint minLp,\\n    address to,\\n    uint deadline\\n  ) external payable {\\n    if (amountAlpha > 0) alpha.transferFrom(msg.sender, address(this), amountAlpha);\\n    ibETHv2.deposit{value: msg.value}();\\n    uint amountIbETHv2 = ibETHv2.balanceOf(address(this));\\n    uint swapAmt;\\n    bool isReversed;\\n    {\\n      (uint r0, uint r1, ) = lpToken.getReserves();\\n      (uint ibETHv2Reserve, uint alphaReserve) =\\n        lpToken.token0() == address(ibETHv2) ? (r0, r1) : (r1, r0);\\n      (swapAmt, isReversed) = optimalDeposit(\\n        amountIbETHv2,\\n        amountAlpha,\\n        ibETHv2Reserve,\\n        alphaReserve\\n      );\\n    }\\n    if (swapAmt > 0) {\\n      address[] memory path = new address[](2);\\n      (path[0], path[1]) = isReversed\\n        ? (address(alpha), address(ibETHv2))\\n        : (address(ibETHv2), address(alpha));\\n      router.swapExactTokensForTokens(swapAmt, 0, path, address(this), deadline);\\n    }\\n    (, , uint liquidity) =\\n      router.addLiquidity(\\n        address(alpha),\\n        address(ibETHv2),\\n        alpha.balanceOf(address(this)),\\n        ibETHv2.balanceOf(address(this)),\\n        0,\\n        0,\\n        to,\\n        deadline\\n      );\\n    require(liquidity >= minLp, '!minLP');\\n  }\\n\\n  function addLiquidityIbETHv2AlphaOptimal(\\n    uint amountIbETHv2,\\n    uint amountAlpha,\\n    uint minLp,\\n    address to,\\n    uint deadline\\n  ) external {\\n    if (amountAlpha > 0) alpha.transferFrom(msg.sender, address(this), amountAlpha);\\n    if (amountIbETHv2 > 0) ibETHv2.transferFrom(msg.sender, address(this), amountIbETHv2);\\n    uint swapAmt;\\n    bool isReversed;\\n    {\\n      (uint r0, uint r1, ) = lpToken.getReserves();\\n      (uint ibETHv2Reserve, uint alphaReserve) =\\n        lpToken.token0() == address(ibETHv2) ? (r0, r1) : (r1, r0);\\n      (swapAmt, isReversed) = optimalDeposit(\\n        amountIbETHv2,\\n        amountAlpha,\\n        ibETHv2Reserve,\\n        alphaReserve\\n      );\\n    }\\n    if (swapAmt > 0) {\\n      address[] memory path = new address[](2);\\n      (path[0], path[1]) = isReversed\\n        ? (address(alpha), address(ibETHv2))\\n        : (address(ibETHv2), address(alpha));\\n      router.swapExactTokensForTokens(swapAmt, 0, path, address(this), deadline);\\n    }\\n    (, , uint liquidity) =\\n      router.addLiquidity(\\n        address(alpha),\\n        address(ibETHv2),\\n        alpha.balanceOf(address(this)),\\n        ibETHv2.balanceOf(address(this)),\\n        0,\\n        0,\\n        to,\\n        deadline\\n      );\\n    require(liquidity >= minLp, '!minLP');\\n  }\\n\\n  function removeLiquidityETHAlpha(\\n    uint liquidity,\\n    uint minETH,\\n    uint minAlpha,\\n    address to,\\n    uint deadline\\n  ) external {\\n    lpToken.transferFrom(msg.sender, address(this), liquidity);\\n    router.removeLiquidity(\\n      address(alpha),\\n      address(ibETHv2),\\n      liquidity,\\n      minAlpha,\\n      0,\\n      address(this),\\n      deadline\\n    );\\n    alpha.transfer(msg.sender, alpha.balanceOf(address(this)));\\n    ibETHv2.withdraw(ibETHv2.balanceOf(address(this)));\\n    uint ethBalance = address(this).balance;\\n    require(ethBalance >= minETH, '!minETH');\\n    (bool success, ) = to.call{value: ethBalance}(new bytes(0));\\n    require(success, '!eth');\\n  }\\n\\n  function removeLiquidityAlphaOnly(\\n    uint liquidity,\\n    uint minAlpha,\\n    address to,\\n    uint deadline\\n  ) external {\\n    lpToken.transferFrom(msg.sender, address(this), liquidity);\\n    router.removeLiquidity(\\n      address(alpha),\\n      address(ibETHv2),\\n      liquidity,\\n      0,\\n      0,\\n      address(this),\\n      deadline\\n    );\\n    address[] memory path = new address[](2);\\n    path[0] = address(ibETHv2);\\n    path[1] = address(alpha);\\n    router.swapExactTokensForTokens(\\n      ibETHv2.balanceOf(address(this)),\\n      0,\\n      path,\\n      address(this),\\n      deadline\\n    );\\n    uint alphaBalance = alpha.balanceOf(address(this));\\n    require(alphaBalance >= minAlpha, '!minAlpha');\\n    alpha.transfer(to, alphaBalance);\\n  }\\n\\n  receive() external payable {\\n    require(msg.sender == address(ibETHv2), '!ibETHv2');\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/ProxyAdminImpl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.2.0/contracts/proxy/ProxyAdmin.sol';\\n\\ncontract ProxyAdminImpl is ProxyAdmin {}\\n\"\r\n    },\r\n    \"./contracts/HomoraBank.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/IERC20.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/SafeERC20.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC1155/IERC1155.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/math/SafeMath.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/math/Math.sol';\\n\\nimport './Governable.sol';\\nimport './utils/ERC1155NaiveReceiver.sol';\\nimport '../interfaces/IBank.sol';\\nimport '../interfaces/ICErc20.sol';\\nimport '../interfaces/IOracle.sol';\\n\\nlibrary HomoraSafeMath {\\n  using SafeMath for uint;\\n\\n  /// @dev Computes round-up division.\\n  function ceilDiv(uint a, uint b) internal pure returns (uint) {\\n    return a.add(b).sub(1).div(b);\\n  }\\n}\\n\\ncontract HomoraCaster {\\n  /// @dev Call to the target using the given data.\\n  /// @param target The address target to call.\\n  /// @param data The data used in the call.\\n  function cast(address target, bytes calldata data) external payable {\\n    (bool ok, bytes memory returndata) = target.call{value: msg.value}(data);\\n    if (!ok) {\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert('bad cast call');\\n      }\\n    }\\n  }\\n}\\n\\ncontract HomoraBank is Governable, ERC1155NaiveReceiver, IBank {\\n  using SafeMath for uint;\\n  using HomoraSafeMath for uint;\\n  using SafeERC20 for IERC20;\\n\\n  uint private constant _NOT_ENTERED = 1;\\n  uint private constant _ENTERED = 2;\\n  uint private constant _NO_ID = uint(-1);\\n  address private constant _NO_ADDRESS = address(1);\\n\\n  struct Bank {\\n    bool isListed; // Whether this market exists.\\n    uint8 index; // Reverse look up index for this bank.\\n    address cToken; // The CToken to draw liquidity from.\\n    uint reserve; // The reserve portion allocated to Homora protocol.\\n    uint totalDebt; // The last recorded total debt since last action.\\n    uint totalShare; // The total debt share count across all open positions.\\n  }\\n\\n  struct Position {\\n    address owner; // The owner of this position.\\n    address collToken; // The ERC1155 token used as collateral for this position.\\n    uint collId; // The token id used as collateral.\\n    uint collateralSize; // The size of collateral token for this position.\\n    uint debtMap; // Bitmap of nonzero debt. i^th bit is set iff debt share of i^th bank is nonzero.\\n    mapping(address => uint) debtShareOf; // The debt share for each token.\\n  }\\n\\n  uint public _GENERAL_LOCK; // TEMPORARY: re-entrancy lock guard.\\n  uint public _IN_EXEC_LOCK; // TEMPORARY: exec lock guard.\\n  uint public override POSITION_ID; // TEMPORARY: position ID currently under execution.\\n  address public override SPELL; // TEMPORARY: spell currently under execution.\\n\\n  address public caster; // The caster address for untrusted execution.\\n  IOracle public oracle; // The oracle address for determining prices.\\n  uint public feeBps; // The fee collected as protocol reserve in basis points from interest.\\n  uint public override nextPositionId; // Next available position ID, starting from 1 (see initialize).\\n\\n  address[] public allBanks; // The list of all listed banks.\\n  mapping(address => Bank) public banks; // Mapping from token to bank data.\\n  mapping(address => bool) public cTokenInBank; // Mapping from cToken to its existence in bank.\\n  mapping(uint => Position) public positions; // Mapping from position ID to position data.\\n\\n  bool public allowContractCalls; // The boolean status whether to allow call from contract (false = onlyEOA)\\n  mapping(address => bool) public whitelistedTokens; // Mapping from token to whitelist status\\n  mapping(address => bool) public whitelistedSpells; // Mapping from spell to whitelist status\\n  mapping(address => bool) public whitelistedUsers; // Mapping from user to whitelist status\\n\\n  uint public bankStatus; // Each bit stores certain bank status, e.g. borrow allowed, repay allowed\\n\\n  /// @dev Ensure that the function is called from EOA when allowContractCalls is set to false and caller is not whitelisted\\n  modifier onlyEOAEx() {\\n    if (!allowContractCalls && !whitelistedUsers[msg.sender]) {\\n      require(msg.sender == tx.origin, 'not eoa');\\n    }\\n    _;\\n  }\\n\\n  /// @dev Reentrancy lock guard.\\n  modifier lock() {\\n    require(_GENERAL_LOCK == _NOT_ENTERED, 'general lock');\\n    _GENERAL_LOCK = _ENTERED;\\n    _;\\n    _GENERAL_LOCK = _NOT_ENTERED;\\n  }\\n\\n  /// @dev Ensure that the function is called from within the execution scope.\\n  modifier inExec() {\\n    require(POSITION_ID != _NO_ID, 'not within execution');\\n    require(SPELL == msg.sender, 'not from spell');\\n    require(_IN_EXEC_LOCK == _NOT_ENTERED, 'in exec lock');\\n    _IN_EXEC_LOCK = _ENTERED;\\n    _;\\n    _IN_EXEC_LOCK = _NOT_ENTERED;\\n  }\\n\\n  /// @dev Ensure that the interest rate of the given token is accrued.\\n  modifier poke(address token) {\\n    accrue(token);\\n    _;\\n  }\\n\\n  /// @dev Initialize the bank smart contract, using msg.sender as the first governor.\\n  /// @param _oracle The oracle smart contract address.\\n  /// @param _feeBps The fee collected to Homora bank.\\n  function initialize(IOracle _oracle, uint _feeBps) external initializer {\\n    __Governable__init();\\n    _GENERAL_LOCK = _NOT_ENTERED;\\n    _IN_EXEC_LOCK = _NOT_ENTERED;\\n    POSITION_ID = _NO_ID;\\n    SPELL = _NO_ADDRESS;\\n    caster = address(new HomoraCaster());\\n    oracle = _oracle;\\n    require(address(_oracle) != address(0), 'bad oracle address');\\n    feeBps = _feeBps;\\n    nextPositionId = 1;\\n    bankStatus = 3; // allow both borrow and repay\\n    emit SetOracle(address(_oracle));\\n    emit SetFeeBps(_feeBps);\\n  }\\n\\n  /// @dev Return the current executor (the owner of the current position).\\n  function EXECUTOR() external view override returns (address) {\\n    uint positionId = POSITION_ID;\\n    require(positionId != _NO_ID, 'not under execution');\\n    return positions[positionId].owner;\\n  }\\n\\n  /// @dev Set allowContractCalls\\n  /// @param ok The status to set allowContractCalls to (false = onlyEOA)\\n  function setAllowContractCalls(bool ok) external onlyGov {\\n    allowContractCalls = ok;\\n  }\\n\\n  /// @dev Set whitelist spell status\\n  /// @param spells list of spells to change status\\n  /// @param statuses list of statuses to change to\\n  function setWhitelistSpells(address[] calldata spells, bool[] calldata statuses)\\n    external\\n    onlyGov\\n  {\\n    require(spells.length == statuses.length, 'spells & statuses length mismatched');\\n    for (uint idx = 0; idx < spells.length; idx++) {\\n      whitelistedSpells[spells[idx]] = statuses[idx];\\n    }\\n  }\\n\\n  /// @dev Set whitelist token status\\n  /// @param tokens list of tokens to change status\\n  /// @param statuses list of statuses to change to\\n  function setWhitelistTokens(address[] calldata tokens, bool[] calldata statuses)\\n    external\\n    onlyGov\\n  {\\n    require(tokens.length == statuses.length, 'tokens & statuses length mismatched');\\n    for (uint idx = 0; idx < tokens.length; idx++) {\\n      if (statuses[idx]) {\\n        // check oracle suppport\\n        require(support(tokens[idx]), 'oracle not support token');\\n      }\\n      whitelistedTokens[tokens[idx]] = statuses[idx];\\n    }\\n  }\\n\\n  /// @dev Set whitelist user status\\n  /// @param users list of users to change status\\n  /// @param statuses list of statuses to change to\\n  function setWhitelistUsers(address[] calldata users, bool[] calldata statuses) external onlyGov {\\n    require(users.length == statuses.length, 'users & statuses length mismatched');\\n    for (uint idx = 0; idx < users.length; idx++) {\\n      whitelistedUsers[users[idx]] = statuses[idx];\\n    }\\n  }\\n\\n  /// @dev Check whether the oracle supports the token\\n  /// @param token ERC-20 token to check for support\\n  function support(address token) public view override returns (bool) {\\n    return oracle.support(token);\\n  }\\n\\n  /// @dev Set bank status\\n  /// @param _bankStatus new bank status to change to\\n  function setBankStatus(uint _bankStatus) external onlyGov {\\n    bankStatus = _bankStatus;\\n  }\\n\\n  /// @dev Bank borrow status allowed or not\\n  /// @notice check last bit of bankStatus\\n  function allowBorrowStatus() public view returns (bool) {\\n    return (bankStatus & 0x01) > 0;\\n  }\\n\\n  /// @dev Bank repay status allowed or not\\n  /// @notice Check second-to-last bit of bankStatus\\n  function allowRepayStatus() public view returns (bool) {\\n    return (bankStatus & 0x02) > 0;\\n  }\\n\\n  /// @dev Trigger interest accrual for the given bank.\\n  /// @param token The underlying token to trigger the interest accrual.\\n  function accrue(address token) public override {\\n    Bank storage bank = banks[token];\\n    require(bank.isListed, 'bank not exist');\\n    uint totalDebt = bank.totalDebt;\\n    uint debt = ICErc20(bank.cToken).borrowBalanceCurrent(address(this));\\n    if (debt > totalDebt) {\\n      uint fee = debt.sub(totalDebt).mul(feeBps).div(10000);\\n      bank.totalDebt = debt;\\n      bank.reserve = bank.reserve.add(doBorrow(token, fee));\\n    } else if (totalDebt != debt) {\\n      // We should never reach here because CREAMv2 does not support *repayBorrowBehalf*\\n      // functionality. We set bank.totalDebt = debt nonetheless to ensure consistency. But do\\n      // note that if *repayBorrowBehalf* exists, an attacker can maliciously deflate debt\\n      // share value and potentially make this contract stop working due to math overflow.\\n      bank.totalDebt = debt;\\n    }\\n  }\\n\\n  /// @dev Convenient function to trigger interest accrual for a list of banks.\\n  /// @param tokens The list of banks to trigger interest accrual.\\n  function accrueAll(address[] memory tokens) external {\\n    for (uint idx = 0; idx < tokens.length; idx++) {\\n      accrue(tokens[idx]);\\n    }\\n  }\\n\\n  /// @dev Return the borrow balance for given position and token without triggering interest accrual.\\n  /// @param positionId The position to query for borrow balance.\\n  /// @param token The token to query for borrow balance.\\n  function borrowBalanceStored(uint positionId, address token) public view override returns (uint) {\\n    uint totalDebt = banks[token].totalDebt;\\n    uint totalShare = banks[token].totalShare;\\n    uint share = positions[positionId].debtShareOf[token];\\n    if (share == 0 || totalDebt == 0) {\\n      return 0;\\n    } else {\\n      return share.mul(totalDebt).ceilDiv(totalShare);\\n    }\\n  }\\n\\n  /// @dev Trigger interest accrual and return the current borrow balance.\\n  /// @param positionId The position to query for borrow balance.\\n  /// @param token The token to query for borrow balance.\\n  function borrowBalanceCurrent(uint positionId, address token) external override returns (uint) {\\n    accrue(token);\\n    return borrowBalanceStored(positionId, token);\\n  }\\n\\n  /// @dev Return bank information for the given token.\\n  /// @param token The token address to query for bank information.\\n  function getBankInfo(address token)\\n    external\\n    view\\n    override\\n    returns (\\n      bool isListed,\\n      address cToken,\\n      uint reserve,\\n      uint totalDebt,\\n      uint totalShare\\n    )\\n  {\\n    Bank storage bank = banks[token];\\n    return (bank.isListed, bank.cToken, bank.reserve, bank.totalDebt, bank.totalShare);\\n  }\\n\\n  /// @dev Return position information for the given position id.\\n  /// @param positionId The position id to query for position information.\\n  function getPositionInfo(uint positionId)\\n    public\\n    view\\n    override\\n    returns (\\n      address owner,\\n      address collToken,\\n      uint collId,\\n      uint collateralSize\\n    )\\n  {\\n    Position storage pos = positions[positionId];\\n    return (pos.owner, pos.collToken, pos.collId, pos.collateralSize);\\n  }\\n\\n  /// @dev Return current position information\\n  function getCurrentPositionInfo()\\n    external\\n    view\\n    override\\n    returns (\\n      address owner,\\n      address collToken,\\n      uint collId,\\n      uint collateralSize\\n    )\\n  {\\n    require(POSITION_ID != _NO_ID, 'no id');\\n    return getPositionInfo(POSITION_ID);\\n  }\\n\\n  /// @dev Return the debt share of the given bank token for the given position id.\\n  /// @param positionId position id to get debt of\\n  /// @param token ERC20 debt token to query\\n  function getPositionDebtShareOf(uint positionId, address token) external view returns (uint) {\\n    return positions[positionId].debtShareOf[token];\\n  }\\n\\n  /// @dev Return the list of all debts for the given position id.\\n  /// @param positionId position id to get debts of\\n  function getPositionDebts(uint positionId)\\n    external\\n    view\\n    returns (address[] memory tokens, uint[] memory debts)\\n  {\\n    Position storage pos = positions[positionId];\\n    uint count = 0;\\n    uint bitMap = pos.debtMap;\\n    while (bitMap > 0) {\\n      if ((bitMap & 1) != 0) {\\n        count++;\\n      }\\n      bitMap >>= 1;\\n    }\\n    tokens = new address[](count);\\n    debts = new uint[](count);\\n    bitMap = pos.debtMap;\\n    count = 0;\\n    uint idx = 0;\\n    while (bitMap > 0) {\\n      if ((bitMap & 1) != 0) {\\n        address token = allBanks[idx];\\n        Bank storage bank = banks[token];\\n        tokens[count] = token;\\n        debts[count] = pos.debtShareOf[token].mul(bank.totalDebt).ceilDiv(bank.totalShare);\\n        count++;\\n      }\\n      idx++;\\n      bitMap >>= 1;\\n    }\\n  }\\n\\n  /// @dev Return the total collateral value of the given position in ETH.\\n  /// @param positionId The position ID to query for the collateral value.\\n  function getCollateralETHValue(uint positionId) public view returns (uint) {\\n    Position storage pos = positions[positionId];\\n    uint size = pos.collateralSize;\\n    if (size == 0) {\\n      return 0;\\n    } else {\\n      require(pos.collToken != address(0), 'bad collateral token');\\n      return oracle.asETHCollateral(pos.collToken, pos.collId, size, pos.owner);\\n    }\\n  }\\n\\n  /// @dev Return the total borrow value of the given position in ETH.\\n  /// @param positionId The position ID to query for the borrow value.\\n  function getBorrowETHValue(uint positionId) public view override returns (uint) {\\n    uint value = 0;\\n    Position storage pos = positions[positionId];\\n    address owner = pos.owner;\\n    uint bitMap = pos.debtMap;\\n    uint idx = 0;\\n    while (bitMap > 0) {\\n      if ((bitMap & 1) != 0) {\\n        address token = allBanks[idx];\\n        uint share = pos.debtShareOf[token];\\n        Bank storage bank = banks[token];\\n        uint debt = share.mul(bank.totalDebt).ceilDiv(bank.totalShare);\\n        value = value.add(oracle.asETHBorrow(token, debt, owner));\\n      }\\n      idx++;\\n      bitMap >>= 1;\\n    }\\n    return value;\\n  }\\n\\n  /// @dev Add a new bank to the ecosystem.\\n  /// @param token The underlying token for the bank.\\n  /// @param cToken The address of the cToken smart contract.\\n  function addBank(address token, address cToken) external onlyGov {\\n    Bank storage bank = banks[token];\\n    require(!cTokenInBank[cToken], 'cToken already exists');\\n    require(!bank.isListed, 'bank already exists');\\n    cTokenInBank[cToken] = true;\\n    bank.isListed = true;\\n    require(allBanks.length < 256, 'reach bank limit');\\n    bank.index = uint8(allBanks.length);\\n    bank.cToken = cToken;\\n    IERC20(token).safeApprove(cToken, 0);\\n    IERC20(token).safeApprove(cToken, uint(-1));\\n    allBanks.push(token);\\n    emit AddBank(token, cToken);\\n  }\\n\\n  /// @dev Set the oracle smart contract address.\\n  /// @param _oracle The new oracle smart contract address.\\n  function setOracle(IOracle _oracle) external onlyGov {\\n    require(address(_oracle) != address(0), 'cannot set zero address oracle');\\n    oracle = _oracle;\\n    emit SetOracle(address(_oracle));\\n  }\\n\\n  /// @dev Set the fee bps value that Homora bank charges.\\n  /// @param _feeBps The new fee bps value.\\n  function setFeeBps(uint _feeBps) external onlyGov {\\n    require(_feeBps <= 10000, 'fee too high');\\n    feeBps = _feeBps;\\n    emit SetFeeBps(_feeBps);\\n  }\\n\\n  /// @dev Withdraw the reserve portion of the bank.\\n  /// @param amount The amount of tokens to withdraw.\\n  function withdrawReserve(address token, uint amount) external onlyGov lock {\\n    Bank storage bank = banks[token];\\n    require(bank.isListed, 'bank not exist');\\n    bank.reserve = bank.reserve.sub(amount);\\n    IERC20(token).safeTransfer(msg.sender, amount);\\n    emit WithdrawReserve(msg.sender, token, amount);\\n  }\\n\\n  /// @dev Liquidate a position. Pay debt for its owner and take the collateral.\\n  /// @param positionId The position ID to liquidate.\\n  /// @param debtToken The debt token to repay.\\n  /// @param amountCall The amount to repay when doing transferFrom call.\\n  function liquidate(\\n    uint positionId,\\n    address debtToken,\\n    uint amountCall\\n  ) external override lock poke(debtToken) {\\n    uint collateralValue = getCollateralETHValue(positionId);\\n    uint borrowValue = getBorrowETHValue(positionId);\\n    require(collateralValue < borrowValue, 'position still healthy');\\n    Position storage pos = positions[positionId];\\n    (uint amountPaid, uint share) = repayInternal(positionId, debtToken, amountCall);\\n    require(pos.collToken != address(0), 'bad collateral token');\\n    uint bounty =\\n      Math.min(\\n        oracle.convertForLiquidation(debtToken, pos.collToken, pos.collId, amountPaid),\\n        pos.collateralSize\\n      );\\n    pos.collateralSize = pos.collateralSize.sub(bounty);\\n    IERC1155(pos.collToken).safeTransferFrom(address(this), msg.sender, pos.collId, bounty, '');\\n    emit Liquidate(positionId, msg.sender, debtToken, amountPaid, share, bounty);\\n  }\\n\\n  /// @dev Execute the action via HomoraCaster, calling its function with the supplied data.\\n  /// @param positionId The position ID to execute the action, or zero for new position.\\n  /// @param spell The target spell to invoke the execution via HomoraCaster.\\n  /// @param data Extra data to pass to the target for the execution.\\n  function execute(\\n    uint positionId,\\n    address spell,\\n    bytes memory data\\n  ) external payable lock onlyEOAEx returns (uint) {\\n    require(whitelistedSpells[spell], 'spell not whitelisted');\\n    if (positionId == 0) {\\n      positionId = nextPositionId++;\\n      positions[positionId].owner = msg.sender;\\n    } else {\\n      require(positionId < nextPositionId, 'position id not exists');\\n      require(msg.sender == positions[positionId].owner, 'not position owner');\\n    }\\n    POSITION_ID = positionId;\\n    SPELL = spell;\\n    HomoraCaster(caster).cast{value: msg.value}(spell, data);\\n    uint collateralValue = getCollateralETHValue(positionId);\\n    uint borrowValue = getBorrowETHValue(positionId);\\n    require(collateralValue >= borrowValue, 'insufficient collateral');\\n    POSITION_ID = _NO_ID;\\n    SPELL = _NO_ADDRESS;\\n    return positionId;\\n  }\\n\\n  /// @dev Borrow tokens from that bank. Must only be called while under execution.\\n  /// @param token The token to borrow from the bank.\\n  /// @param amount The amount of tokens to borrow.\\n  function borrow(address token, uint amount) external override inExec poke(token) {\\n    require(allowBorrowStatus(), 'borrow not allowed');\\n    require(whitelistedTokens[token], 'token not whitelisted');\\n    Bank storage bank = banks[token];\\n    Position storage pos = positions[POSITION_ID];\\n    uint totalShare = bank.totalShare;\\n    uint totalDebt = bank.totalDebt;\\n    uint share = totalShare == 0 ? amount : amount.mul(totalShare).ceilDiv(totalDebt);\\n    bank.totalShare = bank.totalShare.add(share);\\n    uint newShare = pos.debtShareOf[token].add(share);\\n    pos.debtShareOf[token] = newShare;\\n    if (newShare > 0) {\\n      pos.debtMap |= (1 << uint(bank.index));\\n    }\\n    IERC20(token).safeTransfer(msg.sender, doBorrow(token, amount));\\n    emit Borrow(POSITION_ID, msg.sender, token, amount, share);\\n  }\\n\\n  /// @dev Repay tokens to the bank. Must only be called while under execution.\\n  /// @param token The token to repay to the bank.\\n  /// @param amountCall The amount of tokens to repay via transferFrom.\\n  function repay(address token, uint amountCall) external override inExec poke(token) {\\n    require(allowRepayStatus(), 'repay not allowed');\\n    require(whitelistedTokens[token], 'token not whitelisted');\\n    (uint amount, uint share) = repayInternal(POSITION_ID, token, amountCall);\\n    emit Repay(POSITION_ID, msg.sender, token, amount, share);\\n  }\\n\\n  /// @dev Perform repay action. Return the amount actually taken and the debt share reduced.\\n  /// @param positionId The position ID to repay the debt.\\n  /// @param token The bank token to pay the debt.\\n  /// @param amountCall The amount to repay by calling transferFrom, or -1 for debt size.\\n  function repayInternal(\\n    uint positionId,\\n    address token,\\n    uint amountCall\\n  ) internal returns (uint, uint) {\\n    Bank storage bank = banks[token];\\n    Position storage pos = positions[positionId];\\n    uint totalShare = bank.totalShare;\\n    uint totalDebt = bank.totalDebt;\\n    uint oldShare = pos.debtShareOf[token];\\n    uint oldDebt = oldShare.mul(totalDebt).ceilDiv(totalShare);\\n    if (amountCall == uint(-1)) {\\n      amountCall = oldDebt;\\n    }\\n    uint paid = doRepay(token, doERC20TransferIn(token, amountCall));\\n    require(paid <= oldDebt, 'paid exceeds debt'); // prevent share overflow attack\\n    uint lessShare = paid == oldDebt ? oldShare : paid.mul(totalShare).div(totalDebt);\\n    bank.totalShare = totalShare.sub(lessShare);\\n    uint newShare = oldShare.sub(lessShare);\\n    pos.debtShareOf[token] = newShare;\\n    if (newShare == 0) {\\n      pos.debtMap &= ~(1 << uint(bank.index));\\n    }\\n    return (paid, lessShare);\\n  }\\n\\n  /// @dev Transmit user assets to the caller, so users only need to approve Bank for spending.\\n  /// @param token The token to transfer from user to the caller.\\n  /// @param amount The amount to transfer.\\n  function transmit(address token, uint amount) external override inExec {\\n    Position storage pos = positions[POSITION_ID];\\n    IERC20(token).safeTransferFrom(pos.owner, msg.sender, amount);\\n  }\\n\\n  /// @dev Put more collateral for users. Must only be called during execution.\\n  /// @param collToken The ERC1155 token to collateral.\\n  /// @param collId The token id to collateral.\\n  /// @param amountCall The amount of tokens to put via transferFrom.\\n  function putCollateral(\\n    address collToken,\\n    uint collId,\\n    uint amountCall\\n  ) external override inExec {\\n    Position storage pos = positions[POSITION_ID];\\n    if (pos.collToken != collToken || pos.collId != collId) {\\n      require(oracle.supportWrappedToken(collToken, collId), 'collateral not supported');\\n      require(pos.collateralSize == 0, 'another type of collateral already exists');\\n      pos.collToken = collToken;\\n      pos.collId = collId;\\n    }\\n    uint amount = doERC1155TransferIn(collToken, collId, amountCall);\\n    pos.collateralSize = pos.collateralSize.add(amount);\\n    emit PutCollateral(POSITION_ID, msg.sender, collToken, collId, amount);\\n  }\\n\\n  /// @dev Take some collateral back. Must only be called during execution.\\n  /// @param collToken The ERC1155 token to take back.\\n  /// @param collId The token id to take back.\\n  /// @param amount The amount of tokens to take back via transfer.\\n  function takeCollateral(\\n    address collToken,\\n    uint collId,\\n    uint amount\\n  ) external override inExec {\\n    Position storage pos = positions[POSITION_ID];\\n    require(collToken == pos.collToken, 'invalid collateral token');\\n    require(collId == pos.collId, 'invalid collateral token');\\n    if (amount == uint(-1)) {\\n      amount = pos.collateralSize;\\n    }\\n    pos.collateralSize = pos.collateralSize.sub(amount);\\n    IERC1155(collToken).safeTransferFrom(address(this), msg.sender, collId, amount, '');\\n    emit TakeCollateral(POSITION_ID, msg.sender, collToken, collId, amount);\\n  }\\n\\n  /// @dev Internal function to perform borrow from the bank and return the amount received.\\n  /// @param token The token to perform borrow action.\\n  /// @param amountCall The amount use in the transferFrom call.\\n  /// NOTE: Caller must ensure that cToken interest was already accrued up to this block.\\n  function doBorrow(address token, uint amountCall) internal returns (uint) {\\n    Bank storage bank = banks[token]; // assume the input is already sanity checked.\\n    uint balanceBefore = IERC20(token).balanceOf(address(this));\\n    require(ICErc20(bank.cToken).borrow(amountCall) == 0, 'bad borrow');\\n    uint balanceAfter = IERC20(token).balanceOf(address(this));\\n    bank.totalDebt = bank.totalDebt.add(amountCall);\\n    return balanceAfter.sub(balanceBefore);\\n  }\\n\\n  /// @dev Internal function to perform repay to the bank and return the amount actually repaid.\\n  /// @param token The token to perform repay action.\\n  /// @param amountCall The amount to use in the repay call.\\n  /// NOTE: Caller must ensure that cToken interest was already accrued up to this block.\\n  function doRepay(address token, uint amountCall) internal returns (uint) {\\n    Bank storage bank = banks[token]; // assume the input is already sanity checked.\\n    ICErc20 cToken = ICErc20(bank.cToken);\\n    uint oldDebt = bank.totalDebt;\\n    require(cToken.repayBorrow(amountCall) == 0, 'bad repay');\\n    uint newDebt = cToken.borrowBalanceStored(address(this));\\n    bank.totalDebt = newDebt;\\n    return oldDebt.sub(newDebt);\\n  }\\n\\n  /// @dev Internal function to perform ERC20 transfer in and return amount actually received.\\n  /// @param token The token to perform transferFrom action.\\n  /// @param amountCall The amount use in the transferFrom call.\\n  function doERC20TransferIn(address token, uint amountCall) internal returns (uint) {\\n    uint balanceBefore = IERC20(token).balanceOf(address(this));\\n    IERC20(token).safeTransferFrom(msg.sender, address(this), amountCall);\\n    uint balanceAfter = IERC20(token).balanceOf(address(this));\\n    return balanceAfter.sub(balanceBefore);\\n  }\\n\\n  /// @dev Internal function to perform ERC1155 transfer in and return amount actually received.\\n  /// @param token The token to perform transferFrom action.\\n  /// @param id The id to perform transferFrom action.\\n  /// @param amountCall The amount use in the transferFrom call.\\n  function doERC1155TransferIn(\\n    address token,\\n    uint id,\\n    uint amountCall\\n  ) internal returns (uint) {\\n    uint balanceBefore = IERC1155(token).balanceOf(address(this), id);\\n    IERC1155(token).safeTransferFrom(msg.sender, address(this), id, amountCall, '');\\n    uint balanceAfter = IERC1155(token).balanceOf(address(this), id);\\n    return balanceAfter.sub(balanceBefore);\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/SafeBoxETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/ERC20.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/cryptography/MerkleProof.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/math/SafeMath.sol';\\nimport 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/utils/ReentrancyGuard.sol';\\nimport './Governable.sol';\\nimport '../interfaces/ICErc20.sol';\\nimport '../interfaces/IWETH.sol';\\n\\ncontract SafeBoxETH is Governable, ERC20, ReentrancyGuard {\\n  using SafeMath for uint;\\n  event Claim(address user, uint amount);\\n\\n  ICErc20 public immutable cToken;\\n  IWETH public immutable weth;\\n\\n  address public relayer;\\n  bytes32 public root;\\n  mapping(address => uint) public claimed;\\n\\n  constructor(\\n    ICErc20 _cToken,\\n    string memory _name,\\n    string memory _symbol\\n  ) public ERC20(_name, _symbol) {\\n    _setupDecimals(_cToken.decimals());\\n    IWETH _weth = IWETH(_cToken.underlying());\\n    __Governable__init();\\n    cToken = _cToken;\\n    weth = _weth;\\n    relayer = msg.sender;\\n    _weth.approve(address(_cToken), uint(-1));\\n  }\\n\\n  function setRelayer(address _relayer) external onlyGov {\\n    relayer = _relayer;\\n  }\\n\\n  function updateRoot(bytes32 _root) external {\\n    require(msg.sender == relayer || msg.sender == governor, '!relayer');\\n    root = _root;\\n  }\\n\\n  function deposit() external payable nonReentrant {\\n    weth.deposit{value: msg.value}();\\n    uint cBalanceBefore = cToken.balanceOf(address(this));\\n    require(cToken.mint(msg.value) == 0, '!mint');\\n    uint cBalanceAfter = cToken.balanceOf(address(this));\\n    _mint(msg.sender, cBalanceAfter.sub(cBalanceBefore));\\n  }\\n\\n  function withdraw(uint amount) public nonReentrant {\\n    _burn(msg.sender, amount);\\n    uint wethBalanceBefore = weth.balanceOf(address(this));\\n    require(cToken.redeem(amount) == 0, '!redeem');\\n    uint wethBalanceAfter = weth.balanceOf(address(this));\\n    uint wethAmount = wethBalanceAfter.sub(wethBalanceBefore);\\n    weth.withdraw(wethAmount);\\n    (bool success, ) = msg.sender.call{value: wethAmount}(new bytes(0));\\n    require(success, '!withdraw');\\n  }\\n\\n  function claim(uint totalAmount, bytes32[] memory proof) public nonReentrant {\\n    bytes32 leaf = keccak256(abi.encodePacked(msg.sender, totalAmount));\\n    require(MerkleProof.verify(proof, root, leaf), '!proof');\\n    uint send = totalAmount.sub(claimed[msg.sender]);\\n    claimed[msg.sender] = totalAmount;\\n    weth.withdraw(send);\\n    (bool success, ) = msg.sender.call{value: send}(new bytes(0));\\n    require(success, '!claim');\\n    emit Claim(msg.sender, send);\\n  }\\n\\n  function adminClaim(uint amount) external onlyGov {\\n    weth.withdraw(amount);\\n    (bool success, ) = msg.sender.call{value: amount}(new bytes(0));\\n    require(success, '!adminClaim');\\n  }\\n\\n  function claimAndWithdraw(\\n    uint totalAmount,\\n    bytes32[] memory proof,\\n    uint withdrawAmount\\n  ) external {\\n    claim(totalAmount, proof);\\n    withdraw(withdrawAmount);\\n  }\\n\\n  receive() external payable {\\n    require(msg.sender == address(weth), '!weth');\\n  }\\n}\\n\"\r\n    },\r\n    \"./contracts/TransparentUpgradeableProxyImpl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport 'OpenZeppelin/openzeppelin-contracts@3.2.0/contracts/proxy/TransparentUpgradeableProxy.sol';\\n\\ncontract TransparentUpgradeableProxyImpl is TransparentUpgradeableProxy {\\n  constructor(\\n    address _logic,\\n    address _admin,\\n    bytes memory _data\\n  ) public payable TransparentUpgradeableProxy(_logic, _admin, _data) {}\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle trees (hash trees),\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC1155/ERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155MetadataURI.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\\n     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\\n     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\\n     *\\n     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\\n     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    /*\\n     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor (string memory uri_) public {\\n        _setURI(uri_);\\n\\n        // register the supported interfaces to conform to ERC1155 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155);\\n\\n        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) external view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][from] = _balances[id][from].sub(amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][to] = _balances[id][to].add(amount);\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            _balances[id][from] = _balances[id][from].sub(\\n                amount,\\n                \\\"ERC1155: insufficient balance for transfer\\\"\\n            );\\n            _balances[id][to] = _balances[id][to].add(amount);\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] = _balances[id][account].add(amount);\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        _balances[id][account] = _balances[id][account].sub(\\n            amount,\\n            \\\"ERC1155: burn amount exceeds balance\\\"\\n        );\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\\n                amounts[i],\\n                \\\"ERC1155: burn amount exceeds balance\\\"\\n            );\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC1155/IERC1155MetadataURI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/token/ERC1155/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    constructor() internal {\\n        _registerInterface(\\n            ERC1155Receiver(address(0)).onERC1155Received.selector ^\\n            ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.2.0/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.2.0/contracts/proxy/ProxyAdmin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../access/Ownable.sol\\\";\\nimport \\\"./TransparentUpgradeableProxy.sol\\\";\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n\\n    /**\\n     * @dev Returns the current implementation of `proxy`.\\n     * \\n     * Requirements:\\n     * \\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"5c60da1b\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Returns the current admin of `proxy`.\\n     * \\n     * Requirements:\\n     * \\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"f851a440\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Changes the admin of `proxy` to `newAdmin`.\\n     * \\n     * Requirements:\\n     * \\n     * - This contract must be the current admin of `proxy`.\\n     */\\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public onlyOwner {\\n        proxy.changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\\n     * \\n     * Requirements:\\n     * \\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public onlyOwner {\\n        proxy.upgradeTo(implementation);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\\n     * \\n     * Requirements:\\n     * \\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgradeAndCall(TransparentUpgradeableProxy proxy, address implementation, bytes memory data) public payable onlyOwner {\\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n    }\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.2.0/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.2.0/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.2.0/contracts/proxy/TransparentUpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./UpgradeableProxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n * \\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n * \\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n * \\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n * \\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative inerface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is UpgradeableProxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}.\\n     */\\n    constructor(address _logic, address _admin, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _setAdmin(_admin);\\n    }\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _admin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     * \\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address) {\\n        return _admin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     * \\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address) {\\n        return _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     * \\n     * Emits an {AdminChanged} event.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external ifAdmin {\\n        require(newAdmin != address(0), \\\"TransparentUpgradeableProxy: new admin is the zero address\\\");\\n        emit AdminChanged(_admin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeTo(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     * \\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeTo(newImplementation);\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success,) = newImplementation.delegatecall(data);\\n        require(success);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view returns (address adm) {\\n        bytes32 slot = _ADMIN_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            adm := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        bytes32 slot = _ADMIN_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newAdmin)\\n        }\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal override virtual {\\n        require(msg.sender != _admin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.2.0/contracts/proxy/UpgradeableProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n * \\n * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\\n * {TransparentUpgradeableProxy}.\\n */\\ncontract UpgradeableProxy is Proxy {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     * \\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) public payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _setImplementation(_logic);\\n        if(_data.length > 0) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success,) = _logic.delegatecall(_data);\\n            require(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal override view returns (address impl) {\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Upgrades the proxy to a new implementation.\\n     * \\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableProxy: new implementation is not a contract\\\");\\n\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newImplementation)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.2.0/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n * \\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n * \\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     * \\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal virtual view returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     * \\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () payable external {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () payable external {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     * \\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {\\n    }\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.2.0/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"AcceptGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"name\":\"SetGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxDelayTime\",\"type\":\"uint256\"}],\"name\":\"SetMaxDelayTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernor\",\"type\":\"address\"}],\"name\":\"SetPendingGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"SetRefETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"SetRefETHUSD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"SetRefUSD\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getETHPx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDelayTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refETHUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refsETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refsUSD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxDelays\",\"type\":\"uint256[]\"}],\"name\":\"setMaxDelayTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernor\",\"type\":\"address\"}],\"name\":\"setPendingGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_refETHUSD\",\"type\":\"address\"}],\"name\":\"setRefETHUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"refs\",\"type\":\"address[]\"}],\"name\":\"setRefsETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"refs\",\"type\":\"address[]\"}],\"name\":\"setRefsUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ChainlinkAdapterOracle","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1ba4c765757049b1415c91dc2ab0edfbbe6a0c007d62217d6c5e192da05d63af"}]}