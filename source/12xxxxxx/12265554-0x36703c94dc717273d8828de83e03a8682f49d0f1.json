{"status":"1","message":"OK","result":[{"SourceCode":"//SPDX-License-Identifier: MIT \r\npragma solidity 0.6.11; \r\npragma experimental ABIEncoderV2;\r\n\r\n// ====================================================================\r\n//     ________                   _______                           \r\n//    / ____/ /__  ____  ____ _  / ____(_)___  ____ _____  ________ \r\n//   / __/ / / _ \\/ __ \\/ __ `/ / /_  / / __ \\/ __ `/ __ \\/ ___/ _ \\\r\n//  / /___/ /  __/ / / / /_/ / / __/ / / / / / /_/ / / / / /__/  __/\r\n// /_____/_/\\___/_/ /_/\\__,_(_)_/   /_/_/ /_/\\__,_/_/ /_/\\___/\\___/                                                                                                                     \r\n//                                                                        \r\n// ====================================================================\r\n// ====================== Elena Protocol (USE) ========================\r\n// ====================================================================\r\n\r\n// Dapp    :  https://elena.finance\r\n// Twitter :  https://twitter.com/ElenaProtocol\r\n// Telegram:  https://t.me/ElenaFinance\r\n// ====================================================================\r\n\r\n// File: contracts\\@openzeppelin\\contracts\\math\\SafeMath.sol\r\n// License: MIT\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts\\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\r\n// License: MIT\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\@openzeppelin\\contracts\\utils\\EnumerableSet.sol\r\n// License: MIT\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n    // AddressSet\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n    // UintSet\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n}\r\n\r\n// File: contracts\\@openzeppelin\\contracts\\utils\\Address.sol\r\n// License: MIT\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\@openzeppelin\\contracts\\GSN\\Context.sol\r\n// License: MIT\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts\\@openzeppelin\\contracts\\access\\AccessControl.sol\r\n// License: MIT\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module that allows children to implement role-based access\r\n * control mechanisms.\r\n *\r\n * Roles are referred to by their `bytes32` identifier. These should be exposed\r\n * in the external API and be unique. The best way to achieve this is by\r\n * using `public constant` hash digests:\r\n *\r\n * ```\r\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\r\n * ```\r\n *\r\n * Roles can be used to represent a set of permissions. To restrict access to a\r\n * function call, use {hasRole}:\r\n *\r\n * ```\r\n * function foo() public {\r\n *     require(hasRole(MY_ROLE, msg.sender));\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Roles can be granted and revoked dynamically via the {grantRole} and\r\n * {revokeRole} functions. Each role has an associated admin role, and only\r\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\r\n *\r\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\r\n * that only accounts with this role will be able to grant or revoke other\r\n * roles. More complex role relationships can be created by using\r\n * {_setRoleAdmin}.\r\n *\r\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\r\n * grant and revoke this role. Extra precautions should be taken to secure\r\n * accounts that have been granted it.\r\n */\r\nabstract contract AccessControl is Context {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using Address for address;\r\n    struct RoleData {\r\n        EnumerableSet.AddressSet members;\r\n        bytes32 adminRole;\r\n    }\r\n    mapping (bytes32 => RoleData) private _roles;\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n    /**\r\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\r\n     *\r\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\r\n     * {RoleAdminChanged} not being emitted signaling this.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n    /**\r\n     * @dev Emitted when `account` is granted `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call, an admin role\r\n     * bearer except when using {_setupRole}.\r\n     */\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n    /**\r\n     * @dev Emitted when `account` is revoked `role`.\r\n     *\r\n     * `sender` is the account that originated the contract call:\r\n     *   - if using `revokeRole`, it is the admin role bearer\r\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\r\n     */\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n    /**\r\n     * @dev Returns `true` if `account` has been granted `role`.\r\n     */\r\n    function hasRole(bytes32 role, address account) public view returns (bool) {\r\n        return _roles[role].members.contains(account);\r\n    }\r\n    /**\r\n     * @dev Returns the number of accounts that have `role`. Can be used\r\n     * together with {getRoleMember} to enumerate all bearers of a role.\r\n     */\r\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\r\n        return _roles[role].members.length();\r\n    }\r\n    /**\r\n     * @dev Returns one of the accounts that have `role`. `index` must be a\r\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\r\n     *\r\n     * Role bearers are not sorted in any particular way, and their ordering may\r\n     * change at any point.\r\n     *\r\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\r\n     * you perform all queries on the same block. See the following\r\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\r\n     * for more information.\r\n     */\r\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\r\n        return _roles[role].members.at(index);\r\n    }\r\n    /**\r\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\r\n     * {revokeRole}.\r\n     *\r\n     * To change a role's admin, use {_setRoleAdmin}.\r\n     */\r\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\r\n        return _roles[role].adminRole;\r\n    }\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function grantRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to grant\");\r\n        _grantRole(role, account);\r\n    }\r\n    /**\r\n     * @dev Revokes `role` from `account`.\r\n     *\r\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have ``role``'s admin role.\r\n     */\r\n    function revokeRole(bytes32 role, address account) public virtual {\r\n        require(hasRole(_roles[role].adminRole, _msgSender()), \"AccessControl: sender must be an admin to revoke\");\r\n        _revokeRole(role, account);\r\n    }\r\n    /**\r\n     * @dev Revokes `role` from the calling account.\r\n     *\r\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\r\n     * purpose is to provide a mechanism for accounts to lose their privileges\r\n     * if they are compromised (such as when a trusted device is misplaced).\r\n     *\r\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\r\n     * event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be `account`.\r\n     */\r\n    function renounceRole(bytes32 role, address account) public virtual {\r\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\r\n        _revokeRole(role, account);\r\n    }\r\n    /**\r\n     * @dev Grants `role` to `account`.\r\n     *\r\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\r\n     * event. Note that unlike {grantRole}, this function doesn't perform any\r\n     * checks on the calling account.\r\n     *\r\n     * [WARNING]\r\n     * ====\r\n     * This function should only be called from the constructor when setting\r\n     * up the initial roles for the system.\r\n     *\r\n     * Using this function in any other way is effectively circumventing the admin\r\n     * system imposed by {AccessControl}.\r\n     * ====\r\n     */\r\n    function _setupRole(bytes32 role, address account) internal virtual {\r\n        _grantRole(role, account);\r\n    }\r\n    /**\r\n     * @dev Sets `adminRole` as ``role``'s admin role.\r\n     *\r\n     * Emits a {RoleAdminChanged} event.\r\n     */\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\r\n        _roles[role].adminRole = adminRole;\r\n    }\r\n    function _grantRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.add(account)) {\r\n            emit RoleGranted(role, account, _msgSender());\r\n        }\r\n    }\r\n    function _revokeRole(bytes32 role, address account) private {\r\n        if (_roles[role].members.remove(account)) {\r\n            emit RoleRevoked(role, account, _msgSender());\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\Common\\ContractGuard.sol\r\n// License: MIT\r\n\r\ncontract ContractGuard {\r\n    mapping(uint256 => mapping(address => bool)) private _status;\r\n    function checkSameOriginReentranted() internal view returns (bool) {\r\n        return _status[block.number][tx.origin];\r\n    }\r\n    function checkSameSenderReentranted() internal view returns (bool) {\r\n        return _status[block.number][msg.sender];\r\n    }\r\n    modifier onlyOneBlock() {\r\n        require(\r\n            !checkSameOriginReentranted(),\r\n            'ContractGuard: one block, one function'\r\n        );\r\n        require(\r\n            !checkSameSenderReentranted(),\r\n            'ContractGuard: one block, one function'\r\n        );\r\n        _;\r\n        _status[block.number][tx.origin] = true;\r\n        _status[block.number][msg.sender] = true;\r\n    }\r\n}\r\n\r\n// File: contracts\\Common\\IERC20Detail.sol\r\n// License: MIT\r\n\r\n\r\ninterface IERC20Detail is IERC20 {\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts\\Share\\IShareToken.sol\r\n// License: MIT\r\n\r\n\r\n\r\ninterface IShareToken is IERC20 {  \r\n    function pool_mint(address m_address, uint256 m_amount) external; \r\n    function pool_burn_from(address b_address, uint256 b_amount) external; \r\n    function burn(uint256 amount) external;\r\n}\r\n\r\n// File: contracts\\Oracle\\IUniswapPairOracle.sol\r\n// License: MIT\r\n\r\n// Fixed window oracle that recomputes the average price for the entire period once every period\r\n// Note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\r\ninterface IUniswapPairOracle { \r\n    function getPairToken(address token) external view returns(address);\r\n    function containsToken(address token) external view returns(bool);\r\n    function getSwapTokenReserve(address token) external view returns(uint256);\r\n    function update() external returns(bool);\r\n    // Note this will always return 0 before update has been called successfully for the first time.\r\n    function consult(address token, uint amountIn) external view returns (uint amountOut);\r\n}\r\n\r\n// File: contracts\\USE\\IUSEStablecoin.sol\r\n// License: MIT\r\n\r\n\r\ninterface IUSEStablecoin {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function owner_address() external returns (address);\r\n    function creator_address() external returns (address);\r\n    function timelock_address() external returns (address); \r\n    function genesis_supply() external returns (uint256); \r\n    function refresh_cooldown() external returns (uint256);\r\n    function price_target() external returns (uint256);\r\n    function price_band() external returns (uint256);\r\n    function DEFAULT_ADMIN_ADDRESS() external returns (address);\r\n    function COLLATERAL_RATIO_PAUSER() external returns (bytes32);\r\n    function collateral_ratio_paused() external returns (bool);\r\n    function last_call_time() external returns (uint256);\r\n    function USEDAIOracle() external returns (IUniswapPairOracle);\r\n    function USESharesOracle() external returns (IUniswapPairOracle); \r\n    /* ========== VIEWS ========== */\r\n    function use_pools(address a) external view returns (bool);\r\n    function global_collateral_ratio() external view returns (uint256);\r\n    function use_price() external view returns (uint256);\r\n    function share_price()  external view returns (uint256);\r\n    function share_price_in_use()  external view returns (uint256); \r\n    function globalCollateralValue() external view returns (uint256);\r\n    /* ========== PUBLIC FUNCTIONS ========== */\r\n    function refreshCollateralRatio() external;\r\n    function swapCollateralAmount() external view returns(uint256);\r\n    function pool_mint(address m_address, uint256 m_amount) external;\r\n    function pool_burn_from(address b_address, uint256 b_amount) external;\r\n    function burn(uint256 amount) external;\r\n}\r\n\r\n// File: contracts\\USE\\Pools\\USEPoolAlgo.sol\r\n// License: MIT\r\n\r\n\r\n\r\ncontract USEPoolAlgo {\r\n    using SafeMath for uint256;\r\n    // Constants for various precisions\r\n    uint256 public constant PRICE_PRECISION = 1e6;\r\n    uint256 public constant COLLATERAL_RATIO_PRECISION = 1e6;\r\n    // ================ Structs ================\r\n    // Needed to lower stack size\r\n    struct MintFU_Params {\r\n        uint256 shares_price_usd; \r\n        uint256 col_price_usd;\r\n        uint256 shares_amount;\r\n        uint256 collateral_amount;\r\n        uint256 col_ratio;\r\n    }\r\n    struct BuybackShares_Params {\r\n        uint256 excess_collateral_dollar_value_d18;\r\n        uint256 shares_price_usd;\r\n        uint256 col_price_usd;\r\n        uint256 shares_amount;\r\n    }\r\n    // ================ Functions ================\r\n    function calcMint1t1USE(uint256 col_price, uint256 collateral_amount_d18) public pure returns (uint256) {\r\n        return (collateral_amount_d18.mul(col_price)).div(1e6);\r\n    } \r\n    // Must be internal because of the struct\r\n    function calcMintFractionalUSE(MintFU_Params memory params) public pure returns (uint256,uint256, uint256) {\r\n          (uint256 mint_amount1, uint256 collateral_need_d18_1, uint256 shares_needed1) = calcMintFractionalWithCollateral(params);\r\n          (uint256 mint_amount2, uint256 collateral_need_d18_2, uint256 shares_needed2) = calcMintFractionalWithShare(params);\r\n          if(mint_amount1 > mint_amount2){\r\n              return (mint_amount2,collateral_need_d18_2,shares_needed2);\r\n          }else{\r\n              return (mint_amount1,collateral_need_d18_1,shares_needed1);\r\n          }\r\n    }\r\n    // Must be internal because of the struct\r\n    function calcMintFractionalWithCollateral(MintFU_Params memory params) public pure returns (uint256,uint256, uint256) {\r\n        // Since solidity truncates division, every division operation must be the last operation in the equation to ensure minimum error\r\n        // The contract must check the proper ratio was sent to mint USE. We do this by seeing the minimum mintable USE based on each amount \r\n        uint256 c_dollar_value_d18_with_precision = params.collateral_amount.mul(params.col_price_usd);\r\n        uint256 c_dollar_value_d18 = c_dollar_value_d18_with_precision.div(1e6); \r\n        uint calculated_shares_dollar_value_d18 = \r\n                    (c_dollar_value_d18_with_precision.div(params.col_ratio))\r\n                    .sub(c_dollar_value_d18);\r\n        uint calculated_shares_needed = calculated_shares_dollar_value_d18.mul(1e6).div(params.shares_price_usd);\r\n        return (\r\n            c_dollar_value_d18.add(calculated_shares_dollar_value_d18),\r\n            params.collateral_amount,\r\n            calculated_shares_needed\r\n        );\r\n    }\r\n     // Must be internal because of the struct\r\n    function calcMintFractionalWithShare(MintFU_Params memory params) public pure returns (uint256,uint256, uint256) {\r\n        // Since solidity truncates division, every division operation must be the last operation in the equation to ensure minimum error\r\n        // The contract must check the proper ratio was sent to mint USE. We do this by seeing the minimum mintable USE based on each amount \r\n        uint256 shares_dollar_value_d18_with_precision = params.shares_amount.mul(params.shares_price_usd);\r\n        uint256 shares_dollar_value_d18 = shares_dollar_value_d18_with_precision.div(1e6); \r\n        uint calculated_collateral_dollar_value_d18 = \r\n                    shares_dollar_value_d18_with_precision.mul(params.col_ratio)\r\n                    .div(COLLATERAL_RATIO_PRECISION.sub(params.col_ratio)).div(1e6); \r\n        uint calculated_collateral_needed = calculated_collateral_dollar_value_d18.mul(1e6).div(params.col_price_usd);\r\n        return (\r\n            shares_dollar_value_d18.add(calculated_collateral_dollar_value_d18),\r\n            calculated_collateral_needed,\r\n            params.shares_amount\r\n        );\r\n    }\r\n    function calcRedeem1t1USE(uint256 col_price_usd, uint256 use_amount) public pure returns (uint256) {\r\n        return use_amount.mul(1e6).div(col_price_usd);\r\n    }\r\n    // Must be internal because of the struct\r\n    function calcBuyBackShares(BuybackShares_Params memory params) public pure returns (uint256) {\r\n        // If the total collateral value is higher than the amount required at the current collateral ratio then buy back up to the possible Shares with the desired collateral\r\n        require(params.excess_collateral_dollar_value_d18 > 0, \"No excess collateral to buy back!\");\r\n        // Make sure not to take more than is available\r\n        uint256 shares_dollar_value_d18 = params.shares_amount.mul(params.shares_price_usd).div(1e6);\r\n        require(shares_dollar_value_d18 <= params.excess_collateral_dollar_value_d18, \"You are trying to buy back more than the excess!\");\r\n        // Get the equivalent amount of collateral based on the market value of Shares provided \r\n        uint256 collateral_equivalent_d18 = shares_dollar_value_d18.mul(1e6).div(params.col_price_usd);\r\n        //collateral_equivalent_d18 = collateral_equivalent_d18.sub((collateral_equivalent_d18.mul(params.buyback_fee)).div(1e6));\r\n        return (\r\n            collateral_equivalent_d18\r\n        );\r\n    }\r\n    // Returns value of collateral that must increase to reach recollateralization target (if 0 means no recollateralization)\r\n    function recollateralizeAmount(uint256 total_supply, uint256 global_collateral_ratio, uint256 global_collat_value) public pure returns (uint256) {\r\n        uint256 target_collat_value = total_supply.mul(global_collateral_ratio).div(1e6); // We want 18 decimals of precision so divide by 1e6; total_supply is 1e18 and global_collateral_ratio is 1e6\r\n        // Subtract the current value of collateral from the target value needed, if higher than 0 then system needs to recollateralize\r\n        return target_collat_value.sub(global_collat_value); // If recollateralization is not needed, throws a subtraction underflow\r\n        // return(recollateralization_left);\r\n    }\r\n    function calcRecollateralizeUSEInner(\r\n        uint256 collateral_amount, \r\n        uint256 col_price,\r\n        uint256 global_collat_value,\r\n        uint256 frax_total_supply,\r\n        uint256 global_collateral_ratio\r\n    ) public pure returns (uint256, uint256) {\r\n        uint256 collat_value_attempted = collateral_amount.mul(col_price).div(1e6);\r\n        uint256 effective_collateral_ratio = global_collat_value.mul(1e6).div(frax_total_supply); //returns it in 1e6\r\n        uint256 recollat_possible = (global_collateral_ratio.mul(frax_total_supply).sub(frax_total_supply.mul(effective_collateral_ratio))).div(1e6);\r\n        uint256 amount_to_recollat;\r\n        if(collat_value_attempted <= recollat_possible){\r\n            amount_to_recollat = collat_value_attempted;\r\n        } else {\r\n            amount_to_recollat = recollat_possible;\r\n        }\r\n        return (amount_to_recollat.mul(1e6).div(col_price), amount_to_recollat);\r\n    }\r\n}\r\n\r\n// File: contracts\\USE\\Pools\\USEPool.sol\r\n// License: MIT\r\n\r\nabstract contract USEPool is USEPoolAlgo,ContractGuard,AccessControl {\r\n    using SafeMath for uint256;\r\n    /* ========== STATE VARIABLES ========== */\r\n    IERC20Detail public collateral_token;\r\n    address public collateral_address;\r\n    address public owner_address;\r\n    address public community_address;\r\n    address public use_contract_address;\r\n    address public shares_contract_address;\r\n    address public timelock_address;\r\n    IShareToken private SHARE;\r\n    IUSEStablecoin private USE; \r\n    uint256 public minting_tax_base;\r\n    uint256 public minting_tax_multiplier; \r\n    uint256 public minting_required_reserve_ratio;\r\n    uint256 public redemption_gcr_adj = PRECISION;   // PRECISION/PRECISION = 1\r\n    uint256 public redemption_tax_base;\r\n    uint256 public redemption_tax_multiplier;\r\n    uint256 public redemption_tax_exponent;\r\n    uint256 public redemption_required_reserve_ratio = 800000;\r\n    uint256 public buyback_tax;\r\n    uint256 public recollat_tax;\r\n    uint256 public community_rate_ratio = 15000;\r\n    uint256 public community_rate_in_use;\r\n    uint256 public community_rate_in_share;\r\n    mapping (address => uint256) public redeemSharesBalances;\r\n    mapping (address => uint256) public redeemCollateralBalances;\r\n    uint256 public unclaimedPoolCollateral;\r\n    uint256 public unclaimedPoolShares;\r\n    mapping (address => uint256) public lastRedeemed;\r\n    // Constants for various precisions\r\n    uint256 public constant PRECISION = 1e6;  \r\n    uint256 public constant RESERVE_RATIO_PRECISION = 1e6;    \r\n    uint256 public constant COLLATERAL_RATIO_MAX = 1e6;\r\n    // Number of decimals needed to get to 18\r\n    uint256 public immutable missing_decimals;\r\n    // Pool_ceiling is the total units of collateral that a pool contract can hold\r\n    uint256 public pool_ceiling = 10000000000e18;\r\n    // Stores price of the collateral, if price is paused\r\n    uint256 public pausedPrice = 0;\r\n    // Bonus rate on Shares minted during recollateralizeUSE(); 6 decimals of precision, set to 0.5% on genesis\r\n    uint256 public bonus_rate = 5000;\r\n    // Number of blocks to wait before being able to collectRedemption()\r\n    uint256 public redemption_delay = 2;\r\n    uint256 public global_use_supply_adj = 1000e18;  //genesis_supply\r\n    // AccessControl Roles\r\n    bytes32 public constant MINT_PAUSER = keccak256(\"MINT_PAUSER\");\r\n    bytes32 public constant REDEEM_PAUSER = keccak256(\"REDEEM_PAUSER\");\r\n    bytes32 public constant BUYBACK_PAUSER = keccak256(\"BUYBACK_PAUSER\");\r\n    bytes32 public constant RECOLLATERALIZE_PAUSER = keccak256(\"RECOLLATERALIZE_PAUSER\");\r\n    bytes32 public constant COLLATERAL_PRICE_PAUSER = keccak256(\"COLLATERAL_PRICE_PAUSER\");\r\n    bytes32 public constant COMMUNITY_RATER = keccak256(\"COMMUNITY_RATER\");\r\n    // AccessControl state variables\r\n    bool public mintPaused = false;\r\n    bool public redeemPaused = false;\r\n    bool public recollateralizePaused = false;\r\n    bool public buyBackPaused = false;\r\n    bool public collateralPricePaused = false;\r\n    event UpdateOracleBonus(address indexed user,bool bonus1, bool bonus2);\r\n    /* ========== MODIFIERS ========== */\r\n    modifier onlyByOwnerOrGovernance() {\r\n        require(msg.sender == timelock_address || msg.sender == owner_address, \"You are not the owner or the governance timelock\");\r\n        _;\r\n    }\r\n    modifier notRedeemPaused() {\r\n        require(redeemPaused == false, \"Redeeming is paused\");\r\n        require(redemptionOpened() == true,\"Redeeming is closed\");\r\n        _;\r\n    }\r\n    modifier notMintPaused() {\r\n        require(mintPaused == false, \"Minting is paused\");\r\n        require(mintingOpened() == true,\"Minting is closed\");\r\n        _;\r\n    }\r\n    /* ========== CONSTRUCTOR ========== */\r\n    constructor(\r\n        address _use_contract_address,\r\n        address _shares_contract_address,\r\n        address _collateral_address,\r\n        address _creator_address,\r\n        address _timelock_address,\r\n        address _community_address\r\n    ) public {\r\n        USE = IUSEStablecoin(_use_contract_address);\r\n        SHARE = IShareToken(_shares_contract_address);\r\n        use_contract_address = _use_contract_address;\r\n        shares_contract_address = _shares_contract_address;\r\n        collateral_address = _collateral_address;\r\n        timelock_address = _timelock_address;\r\n        owner_address = _creator_address;\r\n        community_address = _community_address;\r\n        collateral_token = IERC20Detail(_collateral_address); \r\n        missing_decimals = uint(18).sub(collateral_token.decimals());\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        grantRole(MINT_PAUSER, timelock_address);\r\n        grantRole(REDEEM_PAUSER, timelock_address);\r\n        grantRole(RECOLLATERALIZE_PAUSER, timelock_address);\r\n        grantRole(BUYBACK_PAUSER, timelock_address);\r\n        grantRole(COLLATERAL_PRICE_PAUSER, timelock_address);\r\n        grantRole(COMMUNITY_RATER, _community_address);\r\n    }\r\n    /* ========== VIEWS ========== */\r\n    // Returns dollar value of collateral held in this USE pool\r\n    function collatDollarBalance() public view returns (uint256) {\r\n        uint256 collateral_amount = collateral_token.balanceOf(address(this)).sub(unclaimedPoolCollateral);\r\n        uint256 collat_usd_price = collateralPricePaused == true ? pausedPrice : getCollateralPrice();\r\n        return collateral_amount.mul(10 ** missing_decimals).mul(collat_usd_price).div(PRICE_PRECISION); \r\n    }\r\n    // Returns the value of excess collateral held in this USE pool, compared to what is needed to maintain the global collateral ratio\r\n    function availableExcessCollatDV() public view returns (uint256) {      \r\n        uint256 total_supply = USE.totalSupply().sub(global_use_supply_adj);       \r\n        uint256 global_collat_value = USE.globalCollateralValue();\r\n        uint256 global_collateral_ratio = USE.global_collateral_ratio();\r\n        // Handles an overcollateralized contract with CR > 1\r\n        if (global_collateral_ratio > COLLATERAL_RATIO_PRECISION) {\r\n            global_collateral_ratio = COLLATERAL_RATIO_PRECISION; \r\n        }\r\n        // Calculates collateral needed to back each 1 USE with $1 of collateral at current collat ratio\r\n        uint256 required_collat_dollar_value_d18 = (total_supply.mul(global_collateral_ratio)).div(COLLATERAL_RATIO_PRECISION);\r\n        if (global_collat_value > required_collat_dollar_value_d18) {\r\n           return global_collat_value.sub(required_collat_dollar_value_d18);\r\n        }\r\n        return 0;\r\n    }\r\n    /* ========== PUBLIC FUNCTIONS ========== */ \r\n    function getCollateralPrice() public view virtual returns (uint256);\r\n    function getCollateralAmount()   public view  returns (uint256){\r\n        return collateral_token.balanceOf(address(this)).sub(unclaimedPoolCollateral);\r\n    }\r\n    function requiredReserveRatio() public view returns(uint256){\r\n        uint256 pool_collateral_amount = getCollateralAmount();\r\n        uint256 swap_collateral_amount = USE.swapCollateralAmount();\r\n        require(swap_collateral_amount>0,\"swap collateral is empty?\");\r\n        return pool_collateral_amount.mul(RESERVE_RATIO_PRECISION).div(swap_collateral_amount);\r\n    }\r\n    function mintingOpened() public view returns(bool){ \r\n        return  (requiredReserveRatio() >= minting_required_reserve_ratio);\r\n    }\r\n    function redemptionOpened() public view returns(bool){\r\n        return  (requiredReserveRatio() >= redemption_required_reserve_ratio);\r\n    }\r\n    //\r\n    function mintingTax() public view returns(uint256){\r\n        uint256 _dynamicTax =  minting_tax_multiplier.mul(requiredReserveRatio()).div(RESERVE_RATIO_PRECISION); \r\n        return  minting_tax_base + _dynamicTax;       \r\n    }\r\n    function dynamicRedemptionTax(uint256 ratio,uint256 multiplier,uint256 exponent) public pure returns(uint256){        \r\n        return multiplier.mul(RESERVE_RATIO_PRECISION**exponent).div(ratio**exponent);\r\n    }\r\n    //\r\n    function redemptionTax() public view returns(uint256){\r\n        uint256 _dynamicTax =dynamicRedemptionTax(requiredReserveRatio(),redemption_tax_multiplier,redemption_tax_exponent);\r\n        return  redemption_tax_base + _dynamicTax;       \r\n    } \r\n    function updateOraclePrice() public { \r\n        IUniswapPairOracle _useDaiOracle = USE.USEDAIOracle();\r\n        IUniswapPairOracle _useSharesOracle = USE.USESharesOracle();\r\n        bool _bonus1 = _useDaiOracle.update();\r\n        bool _bonus2 = _useSharesOracle.update(); \r\n        if(_bonus1 || _bonus2){\r\n            emit UpdateOracleBonus(msg.sender,_bonus1,_bonus2);\r\n        }\r\n    }\r\n    // We separate out the 1t1, fractional and algorithmic minting functions for gas efficiency \r\n    function mint1t1USE(uint256 collateral_amount, uint256 use_out_min) external onlyOneBlock notMintPaused { \r\n        updateOraclePrice();       \r\n        uint256 collateral_amount_d18 = collateral_amount * (10 ** missing_decimals);\r\n        require(USE.global_collateral_ratio() >= COLLATERAL_RATIO_MAX, \"Collateral ratio must be >= 1\");\r\n        require(getCollateralAmount().add(collateral_amount) <= pool_ceiling, \"[Pool's Closed]: Ceiling reached\");\r\n        (uint256 use_amount_d18) = calcMint1t1USE(\r\n            getCollateralPrice(),\r\n            collateral_amount_d18\r\n        ); //1 USE for each $1 worth of collateral\r\n        community_rate_in_use  =  community_rate_in_use.add(use_amount_d18.mul(community_rate_ratio).div(PRECISION));\r\n        use_amount_d18 = (use_amount_d18.mul(uint(1e6).sub(mintingTax()))).div(1e6); //remove precision at the end\r\n        require(use_out_min <= use_amount_d18, \"Slippage limit reached\");\r\n        collateral_token.transferFrom(msg.sender, address(this), collateral_amount);\r\n        USE.pool_mint(msg.sender, use_amount_d18);  \r\n    }\r\n    // Will fail if fully collateralized or fully algorithmic\r\n    // > 0% and < 100% collateral-backed\r\n    function mintFractionalUSE(uint256 collateral_amount, uint256 shares_amount, uint256 use_out_min) external onlyOneBlock notMintPaused {\r\n        updateOraclePrice();\r\n        uint256 share_price = USE.share_price();\r\n        uint256 global_collateral_ratio = USE.global_collateral_ratio();\r\n        require(global_collateral_ratio < COLLATERAL_RATIO_MAX && global_collateral_ratio > 0, \"Collateral ratio needs to be between .000001 and .999999\");\r\n        require(getCollateralAmount().add(collateral_amount) <= pool_ceiling, \"Pool ceiling reached, no more USE can be minted with this collateral\");\r\n        uint256 collateral_amount_d18 = collateral_amount * (10 ** missing_decimals);\r\n        MintFU_Params memory input_params = MintFU_Params(\r\n            share_price,\r\n            getCollateralPrice(),\r\n            shares_amount,\r\n            collateral_amount_d18,\r\n            global_collateral_ratio\r\n        );\r\n        (uint256 mint_amount,uint256 collateral_need_d18, uint256 shares_needed) = calcMintFractionalUSE(input_params);\r\n        community_rate_in_use  =  community_rate_in_use.add(mint_amount.mul(community_rate_ratio).div(PRECISION));\r\n        mint_amount = (mint_amount.mul(uint(1e6).sub(mintingTax()))).div(1e6);\r\n        require(use_out_min <= mint_amount, \"Slippage limit reached\");\r\n        require(shares_needed <= shares_amount, \"Not enough Shares inputted\");\r\n        uint256 collateral_need = collateral_need_d18.div(10 ** missing_decimals);\r\n        SHARE.pool_burn_from(msg.sender, shares_needed);\r\n        collateral_token.transferFrom(msg.sender, address(this), collateral_need);\r\n        USE.pool_mint(msg.sender, mint_amount);      \r\n    }\r\n    // Redeem collateral. 100% collateral-backed\r\n    function redeem1t1USE(uint256 use_amount, uint256 COLLATERAL_out_min) external onlyOneBlock notRedeemPaused {\r\n        updateOraclePrice();\r\n        require(USE.global_collateral_ratio() == COLLATERAL_RATIO_MAX, \"Collateral ratio must be == 1\");\r\n        // Need to adjust for decimals of collateral\r\n        uint256 use_amount_precision = use_amount.div(10 ** missing_decimals);\r\n        (uint256 collateral_needed) = calcRedeem1t1USE(\r\n            getCollateralPrice(),\r\n            use_amount_precision\r\n        );\r\n        community_rate_in_use  =  community_rate_in_use.add(use_amount.mul(community_rate_ratio).div(PRECISION));\r\n        collateral_needed = (collateral_needed.mul(uint(1e6).sub(redemptionTax()))).div(1e6);\r\n        require(collateral_needed <= getCollateralAmount(), \"Not enough collateral in pool\");\r\n        require(COLLATERAL_out_min <= collateral_needed, \"Slippage limit reached\");\r\n        redeemCollateralBalances[msg.sender] = redeemCollateralBalances[msg.sender].add(collateral_needed);\r\n        unclaimedPoolCollateral = unclaimedPoolCollateral.add(collateral_needed);\r\n        lastRedeemed[msg.sender] = block.number;\r\n        // Move all external functions to the end\r\n        USE.pool_burn_from(msg.sender, use_amount); \r\n        require(redemptionOpened() == true,\"Redeem amount too large !\");\r\n    }\r\n    // Will fail if fully collateralized or algorithmic\r\n    // Redeem USE for collateral and SHARE. > 0% and < 100% collateral-backed\r\n    function redeemFractionalUSE(uint256 use_amount, uint256 shares_out_min, uint256 COLLATERAL_out_min) external onlyOneBlock notRedeemPaused {\r\n        updateOraclePrice();\r\n        uint256 global_collateral_ratio = USE.global_collateral_ratio();\r\n        require(global_collateral_ratio < COLLATERAL_RATIO_MAX && global_collateral_ratio > 0, \"Collateral ratio needs to be between .000001 and .999999\");\r\n        global_collateral_ratio = global_collateral_ratio.mul(redemption_gcr_adj).div(PRECISION);\r\n        uint256 use_amount_post_tax = (use_amount.mul(uint(1e6).sub(redemptionTax()))).div(PRICE_PRECISION);\r\n        uint256 shares_dollar_value_d18 = use_amount_post_tax.sub(use_amount_post_tax.mul(global_collateral_ratio).div(PRICE_PRECISION));\r\n        uint256 shares_amount = shares_dollar_value_d18.mul(PRICE_PRECISION).div(USE.share_price());\r\n        // Need to adjust for decimals of collateral\r\n        uint256 use_amount_precision = use_amount_post_tax.div(10 ** missing_decimals);\r\n        uint256 collateral_dollar_value = use_amount_precision.mul(global_collateral_ratio).div(PRICE_PRECISION);\r\n        uint256 collateral_amount = collateral_dollar_value.mul(PRICE_PRECISION).div(getCollateralPrice());\r\n        require(collateral_amount <= getCollateralAmount(), \"Not enough collateral in pool\");\r\n        require(COLLATERAL_out_min <= collateral_amount, \"Slippage limit reached [collateral]\");\r\n        require(shares_out_min <= shares_amount, \"Slippage limit reached [Shares]\");\r\n        community_rate_in_use  =  community_rate_in_use.add(use_amount.mul(community_rate_ratio).div(PRECISION));\r\n        redeemCollateralBalances[msg.sender] = redeemCollateralBalances[msg.sender].add(collateral_amount);\r\n        unclaimedPoolCollateral = unclaimedPoolCollateral.add(collateral_amount);\r\n        redeemSharesBalances[msg.sender] = redeemSharesBalances[msg.sender].add(shares_amount);\r\n        unclaimedPoolShares = unclaimedPoolShares.add(shares_amount);\r\n        lastRedeemed[msg.sender] = block.number;\r\n        // Move all external functions to the end\r\n        USE.pool_burn_from(msg.sender, use_amount);\r\n        SHARE.pool_mint(address(this), shares_amount);\r\n        require(redemptionOpened() == true,\"Redeem amount too large !\");\r\n    }\r\n    // After a redemption happens, transfer the newly minted Shares and owed collateral from this pool\r\n    // contract to the user. Redemption is split into two functions to prevent flash loans from being able\r\n    // to take out USE/collateral from the system, use an AMM to trade the new price, and then mint back into the system.\r\n    function collectRedemption() external onlyOneBlock{        \r\n        require((lastRedeemed[msg.sender].add(redemption_delay)) <= block.number, \"Must wait for redemption_delay blocks before collecting redemption\");\r\n        bool sendShares = false;\r\n        bool sendCollateral = false;\r\n        uint sharesAmount;\r\n        uint CollateralAmount;\r\n        // Use Checks-Effects-Interactions pattern\r\n        if(redeemSharesBalances[msg.sender] > 0){\r\n            sharesAmount = redeemSharesBalances[msg.sender];\r\n            redeemSharesBalances[msg.sender] = 0;\r\n            unclaimedPoolShares = unclaimedPoolShares.sub(sharesAmount);\r\n            sendShares = true;\r\n        }\r\n        if(redeemCollateralBalances[msg.sender] > 0){\r\n            CollateralAmount = redeemCollateralBalances[msg.sender];\r\n            redeemCollateralBalances[msg.sender] = 0;\r\n            unclaimedPoolCollateral = unclaimedPoolCollateral.sub(CollateralAmount);\r\n            sendCollateral = true;\r\n        }\r\n        if(sendShares == true){\r\n            SHARE.transfer(msg.sender, sharesAmount);\r\n        }\r\n        if(sendCollateral == true){\r\n            collateral_token.transfer(msg.sender, CollateralAmount);\r\n        }\r\n    }\r\n    // When the protocol is recollateralizing, we need to give a discount of Shares to hit the new CR target\r\n    // Thus, if the target collateral ratio is higher than the actual value of collateral, minters get Shares for adding collateral\r\n    // This function simply rewards anyone that sends collateral to a pool with the same amount of Shares + the bonus rate\r\n    // Anyone can call this function to recollateralize the protocol and take the extra Shares value from the bonus rate as an arb opportunity\r\n    function recollateralizeUSE(uint256 collateral_amount, uint256 shares_out_min) external onlyOneBlock {\r\n        require(recollateralizePaused == false, \"Recollateralize is paused\");\r\n        updateOraclePrice();\r\n        uint256 collateral_amount_d18 = collateral_amount * (10 ** missing_decimals);\r\n        uint256 share_price = USE.share_price();\r\n        uint256 use_total_supply = USE.totalSupply().sub(global_use_supply_adj);\r\n        uint256 global_collateral_ratio = USE.global_collateral_ratio();\r\n        uint256 global_collat_value = USE.globalCollateralValue();\r\n        (uint256 collateral_units, uint256 amount_to_recollat) = calcRecollateralizeUSEInner(\r\n            collateral_amount_d18,\r\n            getCollateralPrice(),\r\n            global_collat_value,\r\n            use_total_supply,\r\n            global_collateral_ratio\r\n        ); \r\n        uint256 collateral_units_precision = collateral_units.div(10 ** missing_decimals);\r\n        uint256 shares_paid_back = amount_to_recollat.mul(uint(1e6).add(bonus_rate).sub(recollat_tax)).div(share_price);\r\n        require(shares_out_min <= shares_paid_back, \"Slippage limit reached\");\r\n        community_rate_in_share =  community_rate_in_share.add(shares_paid_back.mul(community_rate_ratio).div(PRECISION));\r\n        collateral_token.transferFrom(msg.sender, address(this), collateral_units_precision);\r\n        SHARE.pool_mint(msg.sender, shares_paid_back);\r\n    }\r\n    // Function can be called by an Shares holder to have the protocol buy back Shares with excess collateral value from a desired collateral pool\r\n    // This can also happen if the collateral ratio > 1\r\n    function buyBackShares(uint256 shares_amount, uint256 COLLATERAL_out_min) external onlyOneBlock {\r\n        require(buyBackPaused == false, \"Buyback is paused\");\r\n        updateOraclePrice();\r\n        uint256 share_price = USE.share_price();\r\n        BuybackShares_Params memory input_params = BuybackShares_Params(\r\n            availableExcessCollatDV(),\r\n            share_price,\r\n            getCollateralPrice(),\r\n            shares_amount\r\n        );\r\n        (uint256 collateral_equivalent_d18) = (calcBuyBackShares(input_params)).mul(uint(1e6).sub(buyback_tax)).div(1e6);\r\n        uint256 collateral_precision = collateral_equivalent_d18.div(10 ** missing_decimals);\r\n        require(COLLATERAL_out_min <= collateral_precision, \"Slippage limit reached\");\r\n        community_rate_in_share  =  community_rate_in_share.add(shares_amount.mul(community_rate_ratio).div(PRECISION));\r\n        // Give the sender their desired collateral and burn the Shares\r\n        SHARE.pool_burn_from(msg.sender, shares_amount);\r\n        collateral_token.transfer(msg.sender, collateral_precision);\r\n    }\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n    function toggleMinting() external {\r\n        require(hasRole(MINT_PAUSER, msg.sender));\r\n        mintPaused = !mintPaused;\r\n    }\r\n    function toggleRedeeming() external {\r\n        require(hasRole(REDEEM_PAUSER, msg.sender));\r\n        redeemPaused = !redeemPaused;\r\n    }\r\n    function toggleRecollateralize() external {\r\n        require(hasRole(RECOLLATERALIZE_PAUSER, msg.sender));\r\n        recollateralizePaused = !recollateralizePaused;\r\n    }\r\n    function toggleBuyBack() external {\r\n        require(hasRole(BUYBACK_PAUSER, msg.sender));\r\n        buyBackPaused = !buyBackPaused;\r\n    }\r\n    function toggleCollateralPrice(uint256 _new_price) external {\r\n        require(hasRole(COLLATERAL_PRICE_PAUSER, msg.sender));\r\n        // If pausing, set paused price; else if unpausing, clear pausedPrice\r\n        if(collateralPricePaused == false){\r\n            pausedPrice = _new_price;\r\n        } else {\r\n            pausedPrice = 0;\r\n        }\r\n        collateralPricePaused = !collateralPricePaused;\r\n    }\r\n    function toggleCommunityInSharesRate(uint256 _rate) external{\r\n        require(community_rate_in_share>0,\"No SHARE rate\");\r\n        require(hasRole(COMMUNITY_RATER, msg.sender));\r\n        uint256 _amount_rate = community_rate_in_share.mul(_rate).div(PRECISION);\r\n        community_rate_in_share = community_rate_in_share.sub(_amount_rate);\r\n        SHARE.pool_mint(msg.sender,_amount_rate);  \r\n    }\r\n    function toggleCommunityInUSERate(uint256 _rate) external{\r\n        require(community_rate_in_use>0,\"No USE rate\");\r\n        require(hasRole(COMMUNITY_RATER, msg.sender));\r\n        uint256 _amount_rate_use = community_rate_in_use.mul(_rate).div(PRECISION);        \r\n        community_rate_in_use = community_rate_in_use.sub(_amount_rate_use);\r\n        uint256 _share_price_use = USE.share_price_in_use();\r\n        uint256 _amount_rate = _amount_rate_use.mul(PRICE_PRECISION).div(_share_price_use);\r\n        SHARE.pool_mint(msg.sender,_amount_rate);  \r\n    }\r\n    // Combined into one function due to 24KiB contract memory limit\r\n    function setPoolParameters(uint256 new_ceiling, \r\n                               uint256 new_bonus_rate, \r\n                               uint256 new_redemption_delay, \r\n                               uint256 new_buyback_tax, \r\n                               uint256 new_recollat_tax,\r\n                               uint256 use_supply_adj) external onlyByOwnerOrGovernance {\r\n        pool_ceiling = new_ceiling;\r\n        bonus_rate = new_bonus_rate;\r\n        redemption_delay = new_redemption_delay; \r\n        buyback_tax = new_buyback_tax;\r\n        recollat_tax = new_recollat_tax;\r\n        global_use_supply_adj = use_supply_adj;\r\n    }\r\n    function setMintingParameters(uint256 _ratioLevel,\r\n                                  uint256 _tax_base,\r\n                                  uint256 _tax_multiplier) external onlyByOwnerOrGovernance{\r\n        minting_required_reserve_ratio = _ratioLevel;\r\n        minting_tax_base = _tax_base;\r\n        minting_tax_multiplier = _tax_multiplier;\r\n    }\r\n    function setRedemptionParameters(uint256 _ratioLevel,\r\n                                     uint256 _tax_base,\r\n                                     uint256 _tax_multiplier,\r\n                                     uint256 _tax_exponent,\r\n                                     uint256 _redeem_gcr_adj) external onlyByOwnerOrGovernance{\r\n        redemption_required_reserve_ratio = _ratioLevel;\r\n        redemption_tax_base = _tax_base;\r\n        redemption_tax_multiplier = _tax_multiplier;\r\n        redemption_tax_exponent = _tax_exponent;\r\n        redemption_gcr_adj = _redeem_gcr_adj;\r\n    }\r\n    function setTimelock(address new_timelock) external onlyByOwnerOrGovernance {\r\n        timelock_address = new_timelock;\r\n    }\r\n    function setOwner(address _owner_address) external onlyByOwnerOrGovernance {\r\n        owner_address = _owner_address;\r\n    }\r\n    function setCommunityParameters(address _community_address,uint256 _ratio) external onlyByOwnerOrGovernance {\r\n        community_address = _community_address;\r\n        community_rate_ratio = _ratio;\r\n    } \r\n    /* ========== EVENTS ========== */\r\n}\r\n\r\n// File: contracts\\USE\\Pools\\USEPoolDAI.sol\r\n// License: MIT\r\n\r\ncontract USEPoolDAI is USEPool {\r\n    address public DAI_address;\r\n    constructor(\r\n        address _use_contract_address,\r\n        address _shares_contract_address,\r\n        address _collateral_address,\r\n        address _creator_address, \r\n        address _timelock_address,\r\n        address _community_address\r\n    ) \r\n    USEPool(_use_contract_address, _shares_contract_address, _collateral_address, _creator_address, _timelock_address,_community_address)\r\n    public {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\r\n        DAI_address = _collateral_address;\r\n    }\r\n    // Returns the price of the pool collateral in USD\r\n    function getCollateralPrice() public view override returns (uint256) {\r\n        if(collateralPricePaused == true){\r\n            return pausedPrice;\r\n        } else { \r\n            //Only For Dai\r\n            return 1 * PRICE_PRECISION; \r\n        }\r\n    } \r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_use_contract_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_shares_contract_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creator_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_community_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"bonus1\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"bonus2\",\"type\":\"bool\"}],\"name\":\"UpdateOracleBonus\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUYBACK_PAUSER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLLATERAL_PRICE_PAUSER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLLATERAL_RATIO_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLLATERAL_RATIO_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMUNITY_RATER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_PAUSER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECOLLATERALIZE_PAUSER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEEM_PAUSER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESERVE_RATIO_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableExcessCollatDV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonus_rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBackPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"COLLATERAL_out_min\",\"type\":\"uint256\"}],\"name\":\"buyBackShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyback_tax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"excess_collateral_dollar_value_d18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares_price_usd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"col_price_usd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares_amount\",\"type\":\"uint256\"}],\"internalType\":\"struct USEPoolAlgo.BuybackShares_Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"calcBuyBackShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"col_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral_amount_d18\",\"type\":\"uint256\"}],\"name\":\"calcMint1t1USE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares_price_usd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"col_price_usd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"col_ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct USEPoolAlgo.MintFU_Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"calcMintFractionalUSE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares_price_usd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"col_price_usd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"col_ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct USEPoolAlgo.MintFU_Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"calcMintFractionalWithCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shares_price_usd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"col_price_usd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"col_ratio\",\"type\":\"uint256\"}],\"internalType\":\"struct USEPoolAlgo.MintFU_Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"calcMintFractionalWithShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"col_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"global_collat_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"frax_total_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"global_collateral_ratio\",\"type\":\"uint256\"}],\"name\":\"calcRecollateralizeUSEInner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"col_price_usd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"use_amount\",\"type\":\"uint256\"}],\"name\":\"calcRedeem1t1USE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collatDollarBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralPricePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral_token\",\"outputs\":[{\"internalType\":\"contract IERC20Detail\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectRedemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"community_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"community_rate_in_share\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"community_rate_in_use\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"community_rate_ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exponent\",\"type\":\"uint256\"}],\"name\":\"dynamicRedemptionTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"global_use_supply_adj\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"use_out_min\",\"type\":\"uint256\"}],\"name\":\"mint1t1USE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"use_out_min\",\"type\":\"uint256\"}],\"name\":\"mintFractionalUSE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintingTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minting_required_reserve_ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minting_tax_base\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minting_tax_multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"missing_decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pausedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool_ceiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recollat_tax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"total_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"global_collateral_ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"global_collat_value\",\"type\":\"uint256\"}],\"name\":\"recollateralizeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recollateralizePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares_out_min\",\"type\":\"uint256\"}],\"name\":\"recollateralizeUSE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"use_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"COLLATERAL_out_min\",\"type\":\"uint256\"}],\"name\":\"redeem1t1USE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemCollateralBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"use_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares_out_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"COLLATERAL_out_min\",\"type\":\"uint256\"}],\"name\":\"redeemFractionalUSE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemSharesBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemption_delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemption_gcr_adj\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemption_required_reserve_ratio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemption_tax_base\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemption_tax_exponent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemption_tax_multiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredReserveRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_community_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ratio\",\"type\":\"uint256\"}],\"name\":\"setCommunityParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratioLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tax_base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tax_multiplier\",\"type\":\"uint256\"}],\"name\":\"setMintingParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner_address\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_ceiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_bonus_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_redemption_delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_buyback_tax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_recollat_tax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"use_supply_adj\",\"type\":\"uint256\"}],\"name\":\"setPoolParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ratioLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tax_base\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tax_multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tax_exponent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_redeem_gcr_adj\",\"type\":\"uint256\"}],\"name\":\"setRedemptionParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_timelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shares_contract_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleBuyBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_new_price\",\"type\":\"uint256\"}],\"name\":\"toggleCollateralPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"toggleCommunityInSharesRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"toggleCommunityInUSERate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleRecollateralize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleRedeeming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedPoolCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedPoolShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateOraclePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"use_contract_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"USEPoolDAI","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000147e3d644d53adadd18a28201b91e2b98aeb7f940000000000000000000000006f0f28ceee6ae686ee0f939375674c01b156365a0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000059d35caf82d5368de76565ce11dea3e14177459d000000000000000000000000292b1cae42d10d4ef3f16944e7623e06cab9eae6000000000000000000000000292b1cae42d10d4ef3f16944e7623e06cab9eae6","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://c17662340e277aad17588f8822bd2699ae1e15e3880ad463915f47f3b7d1d9c8"}]}