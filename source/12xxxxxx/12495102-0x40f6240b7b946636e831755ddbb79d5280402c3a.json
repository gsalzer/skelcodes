{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.6;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface UniswapV2Pair is IERC20 {\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n}\r\n\r\ninterface IVoteProxy {\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address _voter) external view returns (uint256);\r\n}\r\n\r\ninterface IMasterChef {\r\n    function userInfo(uint256, address) external view returns (uint256, uint256);\r\n\r\n    function poolInfo(uint256)\r\n        external\r\n        view\r\n        returns (\r\n            address lpToken,\r\n            uint256 allocPoint,\r\n            uint256 lastRewardBlock,\r\n            uint256 accRewardPerShare\r\n        );\r\n}\r\n\r\ncontract popVoteProxyImpl is IVoteProxy {\r\n    address public baseToken = 0x7fC3eC3574d408F3b59CD88709baCb42575EBF2b;\r\n\r\n    function decimals() public pure virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return IERC20(baseToken).totalSupply();\r\n    }\r\n\r\n    function getTokenInPair(\r\n        uint256 lpAmount,\r\n        address token,\r\n        address pair\r\n    ) public view returns (uint256) {\r\n        uint256 supply = UniswapV2Pair(pair).totalSupply();\r\n        (uint112 r0, uint112 r1, ) = UniswapV2Pair(pair).getReserves();\r\n        if (UniswapV2Pair(pair).token0() == token) {\r\n            return (r0 * lpAmount) / supply;\r\n        } else if (UniswapV2Pair(pair).token1() == token) {\r\n            return (r1 * lpAmount) / supply;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getTokenInPairMasterChef(\r\n        uint256 pid,\r\n        address chef,\r\n        address user,\r\n        address token,\r\n        address pair\r\n    ) public view returns (uint256) {\r\n        (uint256 amount, ) = IMasterChef(chef).userInfo(pid, user);\r\n        return getTokenInPair(amount, token, pair);\r\n    }\r\n\r\n    function getTokenBalanceInPair(\r\n        address user,\r\n        address token,\r\n        address pair\r\n    ) public view returns (uint256) {\r\n        return getTokenInPair(IERC20(pair).balanceOf(user), token, pair);\r\n    }\r\n\r\n    function balanceOfDetail(address user) public view virtual returns (uint256[] memory detailBalances) {\r\n        // pop\r\n        detailBalances = new uint256[](3);\r\n        detailBalances[0] = IERC20(baseToken).balanceOf(user);\r\n        // pair pop/weth\r\n        address popWethPair = 0x7E5D0da0f5BA5c24043DcEb0DA78E97dfddCA7Df;\r\n        detailBalances[1] = getTokenBalanceInPair(user, baseToken, popWethPair);\r\n\r\n        // mlp pop/weth\r\n        detailBalances[2] = getTokenInPairMasterChef(0, 0x1A13B10C13650eE3C33F0D6488a84CBB8603B47E, user, baseToken, popWethPair);\r\n    }\r\n\r\n    function balanceOf(address user) public view virtual override returns (uint256) {\r\n        uint256[] memory detailBalances = balanceOfDetail(user);\r\n        uint256 balance = 0;\r\n        for (uint8 pid = 0; pid < detailBalances.length; ++pid) {\r\n            balance += detailBalances[pid];\r\n        }\r\n        return balance;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOfDetail\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"detailBalances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getTokenBalanceInPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getTokenInPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"chef\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getTokenInPairMasterChef\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"popVoteProxyImpl","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://34705b0e98f0bcc28e8cb3fff25f5b9b86a3e862765631428c1c092521a70989"}]}