{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity ^0.5.15;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IBasicIssuanceModule {\r\n    function issue(\r\n        address _setToken,\r\n        uint256 _quantity,\r\n        address _to\r\n    ) external;\r\n}\r\n\r\ncontract SetJoiner {\r\n    address constant SET_TOKEN = 0x7b18913D945242A9c313573E6c99064cd940c6aF;\r\n\r\n    IBasicIssuanceModule constant ISSUANCE_MODULE =\r\n        IBasicIssuanceModule(0xd8EF3cACe8b4907117a45B0b125c68560532F94D);\r\n\r\n    IERC20 constant TOKEN = IERC20(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2);\r\n\r\n    address constant TREASURY_MULTISIG =\r\n        0xe94B5EEC1fA96CEecbD33EF5Baa8d00E4493F4f3;\r\n\r\n    function execute() public {\r\n        require(\r\n            msg.sender == 0x189bC085565697509cFA34131521Dc7981BACDA0 ||\r\n            msg.sender == 0x285b7EEa81a5B66B62e7276a24c1e0F83F7409c1 ||\r\n            msg.sender == TREASURY_MULTISIG\r\n        );\r\n\r\n        uint256 balance = TOKEN.balanceOf(address(this));\r\n\r\n        TOKEN.approve(address(ISSUANCE_MODULE), balance);\r\n\r\n        ISSUANCE_MODULE.issue(SET_TOKEN, balance, TREASURY_MULTISIG);\r\n    }\r\n\r\n    function abort() public {\r\n        require(msg.sender == 0x285b7EEa81a5B66B62e7276a24c1e0F83F7409c1);\r\n        TOKEN.transfer(TREASURY_MULTISIG, TOKEN.balanceOf(address(this)));\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"abort\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SetJoiner","CompilerVersion":"v0.5.15+commit.6a57276f","OptimizationUsed":"1","Runs":"5","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://90bc4f5a51c807c97766c7d3369a5c8da69d3883800041caa2f5dc7cc24b0f9b"}]}