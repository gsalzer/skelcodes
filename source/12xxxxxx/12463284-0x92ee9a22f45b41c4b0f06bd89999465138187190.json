{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/C/Users/khera/Documents/GitHub/Gnosis/contracts/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.5.3;\\r\\n\\r\\n/// @title Proxy - GSVE  proxy contract allows to execute all transactions applying the code of a master contract and then burning a gas token.\\r\\n/// @author Stefan George - <stefan@gnosis.io>\\r\\n/// @author Richard Meissner - <richard@gnosis.io>\\r\\n/// @author Gas Save Protocol - <GasSave.org>\\r\\n\\r\\ninterface IGasToken {\\r\\n    /**\\r\\n     * @dev return number of tokens freed up.\\r\\n     */\\r\\n    function freeFromUpTo(address from, uint256 value) external returns (uint256); \\r\\n}\\r\\n\\r\\n/**\\r\\n* @dev interface to allow gsve to be burned for upgrades\\r\\n*/\\r\\ninterface IBeacon {\\r\\n    function getAddressGastoken(address safe) external view returns(address);\\r\\n    function getAddressGasTokenSaving(address safe) external view returns(uint256);\\r\\n}\\r\\n\\r\\ncontract Proxy {\\r\\n\\r\\n    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\\r\\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\\r\\n    address internal masterCopy;\\r\\n\\r\\n    /// @dev Constructor function sets address of master copy contract.\\r\\n    /// @param _masterCopy Master copy address.\\r\\n    constructor(address _masterCopy)\\r\\n        public\\r\\n    {\\r\\n        require(_masterCopy != address(0), \\\"Invalid master copy address provided\\\");\\r\\n        masterCopy = _masterCopy;\\r\\n    }\\r\\n\\r\\n    /// @dev Fallback function forwards all transactions and returns all received return data.\\r\\n    function () \\r\\n        external\\r\\n        payable\\r\\n    {\\r\\n        uint256 gasStart = gasleft();\\r\\n        uint256 returnDataLength;\\r\\n        bool success;\\r\\n        bytes memory returndata;\\r\\n\\r\\n        // solium-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\\r\\n            // 0xa619486e == keccak(\\\"masterCopy()\\\"). The value is right padded to 32-bytes with 0s\\r\\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\\r\\n                mstore(0, masterCopy)\\r\\n                return(0, 0x20)\\r\\n            }\\r\\n\\r\\n            //set returndata to the location of the free data pointer\\r\\n            returndata := mload(0x40)\\r\\n            calldatacopy(0, 0, calldatasize())\\r\\n            success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\\r\\n\\r\\n            //copy the return data and then MOVE the free data pointer to avoid overwriting. Without this movement, the operation reverts.\\r\\n            //ptr movement amount is probably overkill and wastes a few hundred gas for no reason, but better to be safe!\\r\\n            returndatacopy(returndata, 0, returndatasize())\\r\\n            returnDataLength:= returndatasize()\\r\\n            mstore(0x40, add(0x40, add(0x200, mul(returndatasize(), 0x20)))) \\r\\n        }\\r\\n\\r\\n        //work out how much gas we've spent so far\\r\\n        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\\r\\n        \\r\\n        //if the gas amount is low, then don't burn anything and finish the proxy operation\\r\\n        if(gasSpent < 48000){\\r\\n            assembly{\\r\\n                if eq(success, 0) { revert(returndata, returnDataLength) }\\r\\n                return(returndata, returnDataLength)\\r\\n            }\\r\\n        }\\r\\n        //if the operation has been expensive, then look at burning gas tokens\\r\\n        else{\\r\\n            //query the beacon to see what gas token the user want's to burn\\r\\n            IBeacon beacon = IBeacon(0x1370CAf8181771871cb493DFDC312cdeD17a2de8);\\r\\n            address gsveBeaconGastoken = beacon.getAddressGastoken(address(this));\\r\\n            if(gsveBeaconGastoken == address(0)){\\r\\n                assembly{\\r\\n                    if eq(success, 0) { revert(returndata, returnDataLength) }\\r\\n                    return(returndata, returnDataLength)\\r\\n                }\\r\\n            }\\r\\n            else{\\r\\n                uint256 gsveBeaconAmount = beacon.getAddressGasTokenSaving(gsveBeaconGastoken);\\r\\n                gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\\r\\n                IGasToken(gsveBeaconGastoken).freeFromUpTo(msg.sender,  (gasSpent + 16000) / gsveBeaconAmount);\\r\\n                assembly{\\r\\n                    if eq(success, 0) { revert(returndata, returnDataLength) }\\r\\n                    return(returndata, returnDataLength)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/C/Users/khera/Documents/GitHub/Gnosis/contracts/ProxyFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.5.3;\\r\\n\\r\\nimport \\\"./Proxy.sol\\\";\\r\\n\\r\\ninterface IProxyCreationCallback {\\r\\n    function proxyCreated(Proxy proxy, address _mastercopy, bytes calldata initializer, uint256 saltNonce) external;\\r\\n}\\r\\n\\r\\n/// @title IProxy - Helper interface to access masterCopy of the Proxy on-chain\\r\\n/// @author Richard Meissner - <richard@gnosis.io>\\r\\n/// @author Gas Save - <GasSave.org>\\r\\ninterface IProxy {\\r\\n    function masterCopy() external view returns (address);\\r\\n}\\r\\n\\r\\n/**\\r\\n* @dev interface to allow gsve to be burned for upgrades\\r\\n*/\\r\\ninterface IGSVEToken {\\r\\n    function burnFrom(address account, uint256 amount) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n* @dev interface to allow gsve to be burned for upgrades\\r\\n*/\\r\\ninterface IGSVEBeacon {\\r\\n    function initSafe(address owner, address safe) external;\\r\\n}\\r\\n\\r\\n/// @title Proxy Factory - Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\\r\\n/// @author Stefan George - <stefan@gnosis.pm>\\r\\n/// @author Gas Save - <GasSave.org>\\r\\ncontract ProxyFactory {\\r\\n    address public GSVEToken;\\r\\n    address public GSVEBeacon;\\r\\n    event ProxyCreation(Proxy proxy);\\r\\n    \\r\\n    /// @dev sets the addresses of the GSVE token AND GSVE Beacon. Used in the creation process\\r\\n    constructor (address _GSVEToken, address _GSVEBeacon) public {\\r\\n        GSVEToken = _GSVEToken;\\r\\n        GSVEBeacon = _GSVEBeacon;\\r\\n    }\\r\\n    \\r\\n\\r\\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\\r\\n    /// @param masterCopy Address of master copy.\\r\\n    /// @param data Payload for message call sent to new proxy contract.\\r\\n    function createProxy(address masterCopy, bytes memory data)\\r\\n        public\\r\\n        returns (Proxy proxy)\\r\\n    {\\r\\n        proxy = new Proxy(masterCopy);\\r\\n        if (data.length > 0)\\r\\n            // solium-disable-next-line security/no-inline-assembly\\r\\n            assembly {\\r\\n                if eq(call(gas, proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) { revert(0, 0) }\\r\\n            }\\r\\n        emit ProxyCreation(proxy);\\r\\n    }\\r\\n\\r\\n    /// @dev Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.\\r\\n    function proxyRuntimeCode() public pure returns (bytes memory) {\\r\\n        return type(Proxy).runtimeCode;\\r\\n    }\\r\\n\\r\\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\\r\\n    function proxyCreationCode() public pure returns (bytes memory) {\\r\\n        return type(Proxy).creationCode;\\r\\n    }\\r\\n\\r\\n    /// @dev Allows to create new proxy contact using CREATE2 but it doesn't run the initializer.\\r\\n    ///      This method is only meant as an utility to be called from other methods\\r\\n    /// @param _mastercopy Address of master copy.\\r\\n    /// @param initializer Payload for message call sent to new proxy contract.\\r\\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\\r\\n    function deployProxyWithNonce(address _mastercopy, bytes memory initializer, uint256 saltNonce)\\r\\n        internal\\r\\n        returns (Proxy proxy)\\r\\n    {\\r\\n        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it\\r\\n        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce));\\r\\n        bytes memory deploymentData = abi.encodePacked(type(Proxy).creationCode, uint256(_mastercopy));\\r\\n        // solium-disable-next-line security/no-inline-assembly\\r\\n        assembly {\\r\\n            proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)\\r\\n        }\\r\\n        require(address(proxy) != address(0), \\\"Create2 call failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\\r\\n    /// @param _mastercopy Address of master copy.\\r\\n    /// @param initializer Payload for message call sent to new proxy contract.\\r\\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\\r\\n    /// BURNS GSVE IN THE PROCESS OF CREATING THE PROXY AND ADDS THE CREATED SAFE TO THE BEACON\\r\\n    function createProxyWithNonce(address _mastercopy, bytes memory initializer, uint256 saltNonce)\\r\\n        public\\r\\n        returns (Proxy proxy)\\r\\n    {\\r\\n        IGSVEToken(GSVEToken).burnFrom(msg.sender, 50*10**18);\\r\\n        proxy = deployProxyWithNonce(_mastercopy, initializer, saltNonce);\\r\\n        if (initializer.length > 0)\\r\\n            // solium-disable-next-line security/no-inline-assembly\\r\\n            assembly {\\r\\n                if eq(call(gas, proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) { revert(0,0) }\\r\\n            }\\r\\n\\r\\n        IGSVEBeacon(GSVEBeacon).initSafe(msg.sender, address(proxy));\\r\\n        emit ProxyCreation(proxy);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_GSVEToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_GSVEBeacon\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract Proxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"ProxyCreation\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"GSVEBeacon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"GSVEToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterCopy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"createProxy\",\"outputs\":[{\"internalType\":\"contract Proxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mastercopy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"initializer\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"saltNonce\",\"type\":\"uint256\"}],\"name\":\"createProxyWithNonce\",\"outputs\":[{\"internalType\":\"contract Proxy\",\"name\":\"proxy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxyCreationCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxyRuntimeCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"ProxyFactory","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000e01999859eebfe39ecd039f67a540000000000000000000000001370caf8181771871cb493dfdc312cded17a2de8","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}