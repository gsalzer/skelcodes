{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/sale_v2.sol\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.4;\r\n\r\n//@R\r\n\r\n//+---------------------------------------------------------------------------------------+\r\n// Imports\r\n//+---------------------------------------------------------------------------------------+\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n//+---------------------------------------------------------------------------------------+\r\n// Contracts\r\n//+---------------------------------------------------------------------------------------+\r\n\r\n/** This contract is designed for coordinating the sale of wLiti tokens to purchasers\r\n  *     and includes a referral system where referrers earn bonus tokens on each wLiti\r\n  *     sale.\r\n  **/\r\ncontract wLitiSale is Context, Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    //+---------------------------------------------------------------------------------------+\r\n    // Structures\r\n    //+---------------------------------------------------------------------------------------+\r\n\r\n    //Type for tracking referral memebers and their bonus percentages\r\n    struct Referrer {\r\n\r\n        bool isReferrer;  //If true, referer is allowed to receive referral bonuses\r\n        uint256 bonusPercent; //Percentage bonus amount\r\n\r\n    }\r\n\r\n    //+---------------------------------------------------------------------------------------+\r\n    // Contract Data Members\r\n    //+---------------------------------------------------------------------------------------+\r\n\r\n    //Referral info\r\n    address private _masterReferrerWallet; //Wallet of the master referrer (this person ALWAYS recieves a bonus)\r\n    uint256 private _maxBonusPercent; //Max bonus that can be given to referrers\r\n    mapping(address => Referrer) _referrers; //Track referrer info\r\n\r\n    //Sale info\r\n    IERC20 private _token; //Token to be sold\r\n    address private _ETHWallet; //Wallet ETH is sent to\r\n    uint256 private _saleCount; //Counts the number of sales\r\n    uint256 private _tokenPrice; //ETH price per token\r\n    uint256 private _saleSupplyLeft; //Supply left in sale\r\n    uint256 private _saleSupplyTotal; //Total supply of sale\r\n    uint256 private _saleStartTime; //Sale start epoch timestamp\r\n    uint256 private _saleEndTime; //Sale end epoch timestamp\r\n    mapping(uint256 => uint256) _weiRaised; //Track wei raised from each sale\r\n\r\n    //+---------------------------------------------------------------------------------------+\r\n    // Constructors\r\n    //+---------------------------------------------------------------------------------------+\r\n\r\n    /** Constructor to build the contract\r\n      *\r\n      * @param token - the contract address of the token that is being sold\r\n      * @param ETHWallet - the wallet that ETH will be sent to after every purchase\r\n      * @param masterReferrerWallet - the wallet of the master referrer\r\n      *\r\n      **/\r\n    constructor(address token, address ETHWallet, address masterReferrerWallet) {\r\n\r\n        _token = IERC20(token);\r\n        _ETHWallet = ETHWallet;\r\n        _masterReferrerWallet = masterReferrerWallet;\r\n\r\n    }\r\n\r\n    //+---------------------------------------------------------------------------------------+\r\n    // Getters\r\n    //+---------------------------------------------------------------------------------------+\r\n\r\n    function getMasterReferrerWallet() public view returns (address) { return _masterReferrerWallet; }\r\n\r\n    function getReferrerBonusPercent(address referrer) public view returns (uint256) { return _referrers[referrer].bonusPercent; }\r\n\r\n    function getMaxBonusPercent() public view returns (uint256) { return _maxBonusPercent; }\r\n\r\n    function getTokenPrice() public view returns (uint256) { return _tokenPrice; }\r\n\r\n    function getSaleSupplyLeft() public view returns (uint256) { return _saleSupplyLeft; }\r\n\r\n    function getSaleSupplyTotal() public view returns (uint256) { return _saleSupplyTotal; }\r\n\r\n    function getSaleStartTime() public view returns (uint256) { return _saleStartTime; }\r\n\r\n    function getSaleEndTime() public view returns (uint256) { return _saleEndTime; }\r\n\r\n    function getSaleCount() public view returns (uint256) { return _saleCount; }\r\n\r\n    function getWeiRaised(uint256 sale) public view returns (uint256) { return _weiRaised[sale]; }\r\n\r\n    function getETHWallet() public view returns (address) { return _ETHWallet; }\r\n\r\n    function isSaleActive() public view returns (bool) {\r\n\r\n        return (block.timestamp > _saleStartTime &&\r\n                block.timestamp < _saleEndTime);\r\n\r\n    }\r\n\r\n    function isReferrer(address referrer) public view returns (bool) { return _referrers[referrer].isReferrer; }\r\n\r\n    //+---------------------------------------------------------------------------------------+\r\n    // Private Functions\r\n    //+---------------------------------------------------------------------------------------+\r\n\r\n    function transferReferralTokens(address referrer, uint256 bonusPercent, uint purchaseAmountBig) private {\r\n\r\n        uint256 referralAmountBig = purchaseAmountBig.mul(bonusPercent).div(10**2);\r\n        _token.transfer(referrer, (referralAmountBig));\r\n\r\n    }\r\n\r\n    //+---------------------------------------------------------------------------------------+\r\n    // Public/User Functions\r\n    //+---------------------------------------------------------------------------------------+\r\n\r\n    /** Purchase tokens from contract and distribute token bonuses to referrers. Master referrer will ALWAYS recieve at least\r\n      *     a 1% token bonus. A second referrer address is required to be provided when purchasing and they will recieve at least 1%.\r\n      *     A third referrer is optional, but not required. If the optional referrer is an autherized Referrer by the contract owner, then\r\n      *     the optional referrer will receive a minimum of a 1% token bonus.\r\n      *\r\n      *  @param purchaseAmount - the amount of tokens that the purchaser wants to buy\r\n      *  @param referrer - second referrer that is required\r\n      *  @param optionalReferrer - third referrer that is optional\r\n      **/\r\n    function purchaseTokens(uint256 purchaseAmount, address referrer, address optionalReferrer) public payable {\r\n\r\n        require(_msgSender() != address(0), \"AddressZero cannot purchase tokens\");\r\n        require(isSaleActive(), \"Sale is not active\");\r\n        require(getTokenPrice() != 0, \"Token price is not set\");\r\n        require(getMaxBonusPercent() != 0, \"Referral bonus percent is not set\");\r\n        require(isReferrer(referrer), \"Referrer is not authorized\");\r\n\r\n        //Calculate big number amounts\r\n        uint256 purchaseAmountBig = purchaseAmount * 1 ether; //Amount of tokens user is purchasing\r\n        uint256 totalRAmountBig = purchaseAmountBig.mul(_maxBonusPercent).div(10**2); //Amount of tokens referrers will earn\r\n        uint256 totalAmountBig = purchaseAmountBig.add(totalRAmountBig); //Total amount of tokens being distributed\r\n        uint256 masterBonusPercent = _maxBonusPercent; //Bonus percent for the master referrer\r\n\r\n        require(totalAmountBig <= _saleSupplyLeft, \"Purchase amount is bigger than the remaining sale supply\");\r\n\r\n        uint256 totalPrice = purchaseAmount * _tokenPrice; //Total ETH price for tokens\r\n        require(msg.value >= totalPrice, \"Payment amount too low\");\r\n\r\n        //If the optionalReferrer is an authorized referrer, then distribute referral bonus tokens\r\n        if(isReferrer(optionalReferrer)) {\r\n\r\n            require(_referrers[referrer].bonusPercent + _referrers[optionalReferrer].bonusPercent < _maxBonusPercent,\r\n                \"Referrers bonus percent must be less than max bonus\");\r\n\r\n            //Subtract the master's bonus by the referrers' bonus AND transfer tokens to the optional referrer\r\n            masterBonusPercent = masterBonusPercent.sub(_referrers[referrer].bonusPercent).sub(_referrers[optionalReferrer].bonusPercent);\r\n            transferReferralTokens(optionalReferrer, _referrers[optionalReferrer].bonusPercent, purchaseAmountBig);\r\n\r\n        }\r\n        //There is only one referrer, ignore the optional referrer\r\n        else {\r\n\r\n            require(_referrers[referrer].bonusPercent < _maxBonusPercent, \"Referrer bonus percent must be less than max bonus\");\r\n\r\n            //Subtract the master's bonus by the referrer's bonus\r\n            masterBonusPercent = masterBonusPercent.sub(_referrers[referrer].bonusPercent);\r\n\r\n        }\r\n\r\n        //Transfer tokens to referrer, master referrer, and purchaser\r\n        transferReferralTokens(referrer, _referrers[referrer].bonusPercent, purchaseAmountBig);\r\n        transferReferralTokens(_masterReferrerWallet, masterBonusPercent, purchaseAmountBig);\r\n        _token.transfer(msg.sender, (purchaseAmountBig));\r\n\r\n        //Modify sale information\r\n        _weiRaised[_saleCount] = _weiRaised[_saleCount] + totalPrice;\r\n        _saleSupplyLeft = _saleSupplyLeft - (totalAmountBig);\r\n\r\n        //Transfer ETH back to presale wallet\r\n        address payable walletPayable = payable(_ETHWallet);\r\n        walletPayable.transfer(totalPrice);\r\n\r\n        //Transfer extra ETH back to buyer\r\n        address payable client = payable(msg.sender);\r\n        client.transfer(msg.value - totalPrice);\r\n\r\n    }\r\n\r\n    //+---------------------------------------------------------------------------------------+\r\n    // Setters (Owner Only)\r\n    //+---------------------------------------------------------------------------------------+\r\n\r\n    //Set the max bonue that referrers can earn\r\n    function setMaxBonusPercent(uint256 percent) public onlyOwner { _maxBonusPercent = percent; }\r\n\r\n    //Set the ETH price of the tokens\r\n    function setTokenPrice(uint256 price) public onlyOwner { _tokenPrice = price; }\r\n\r\n    //Set the wallet to receive ETH\r\n    function setETHWallet(address ETHWallet) public onlyOwner { _ETHWallet = ETHWallet; }\r\n\r\n    //Set the master referrer wallet\r\n    function setMasterReferrerWallet(address masterReferrerWallet) public onlyOwner { _masterReferrerWallet = masterReferrerWallet; }\r\n\r\n    //Set referrer bonus percent\r\n    function setReferrerBonusPercent(address referrer, uint256 bonusPercent) public onlyOwner {\r\n\r\n        _referrers[referrer].bonusPercent = bonusPercent;\r\n\r\n    }\r\n\r\n    //+---------------------------------------------------------------------------------------+\r\n    // Controls (Owner Only)\r\n    //+---------------------------------------------------------------------------------------+\r\n\r\n    //Add a referrer\r\n    function addReferrer(address referrer, uint256 bonusPercent) public onlyOwner {\r\n\r\n        require(!isReferrer(referrer), \"Address is already a referrer\");\r\n        require(bonusPercent < _maxBonusPercent, \"Referrer bonus cannot be equal to or greater than max bonus\");\r\n        require(bonusPercent > 0, \"Bonus percent must be greater than 0\");\r\n\r\n        _referrers[referrer].isReferrer = true;\r\n        _referrers[referrer].bonusPercent = bonusPercent;\r\n\r\n    }\r\n\r\n    //Remove a referrer\r\n    function removeReferrer(address referrer) public onlyOwner {\r\n\r\n        require(isReferrer(referrer), \"Address already is not a referrer\");\r\n\r\n        delete _referrers[referrer];\r\n\r\n    }\r\n\r\n    //Withdraw a number of tokens from contract to the contract owner\r\n    function withdrawToken(uint256 amount) public onlyOwner {\r\n        _token.transfer(owner(), amount);\r\n    }\r\n\r\n    //Withdraw ALL tokens from contract to the contract owner\r\n    function withdrawAllTokens() public onlyOwner {\r\n        _token.transfer(owner(), _token.balanceOf(address(this)));\r\n    }\r\n\r\n    //Create a sale\r\n    function createSale(uint256 supply, uint256 timeStart, uint256 timeEnd) public onlyOwner {\r\n\r\n        require(supply <= _token.balanceOf(address(this)), \"Supply too high, not enough tokens in contract\");\r\n        require(timeStart >= block.timestamp, \"Sale start time cannot be in the past\");\r\n        require(timeEnd > timeStart, \"Sale start time cannot be before the end time\");\r\n\r\n        //Store sale info\r\n        _saleSupplyTotal = supply;\r\n        _saleSupplyLeft = supply;\r\n        _saleStartTime = timeStart;\r\n        _saleEndTime = timeEnd;\r\n        _saleCount += 1;\r\n\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ETHWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"masterReferrerWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bonusPercent\",\"type\":\"uint256\"}],\"name\":\"addReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeEnd\",\"type\":\"uint256\"}],\"name\":\"createSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getETHWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMasterReferrerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxBonusPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"getReferrerBonusPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleSupplyLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSaleSupplyTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sale\",\"type\":\"uint256\"}],\"name\":\"getWeiRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"isReferrer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"optionalReferrer\",\"type\":\"address\"}],\"name\":\"purchaseTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"removeReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ETHWallet\",\"type\":\"address\"}],\"name\":\"setETHWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterReferrerWallet\",\"type\":\"address\"}],\"name\":\"setMasterReferrerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"setMaxBonusPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bonusPercent\",\"type\":\"uint256\"}],\"name\":\"setReferrerBonusPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"wLitiSale","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000b63128c40737b13647552e0c926bcfeccc35f930000000000000000000000002289e6700dc91d0f0ba7e13e550300a15c01a6540000000000000000000000002289e6700dc91d0f0ba7e13e550300a15c01a654","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b24e14118d33786bade45bceeb7ce49003f32b5084868b2f844205dd423ab771"}]}