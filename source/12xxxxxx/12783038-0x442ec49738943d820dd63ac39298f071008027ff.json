{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/src/investment/Controller.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2020-2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\n\\nimport '../utils/AddressBook.sol';\\nimport '../utils/interfaces/IAddressRegistry.sol';\\n\\nimport './interfaces/IController.sol';\\nimport './interfaces/IFarm.sol';\\nimport './interfaces/IRewardHandler.sol';\\n\\ncontract Controller is IController, Context, Ownable {\\n  using SafeMath for uint256;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // State\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  // We need the previous controller for calculation of pending rewards\\n  address public previousController;\\n\\n  // Our rewardHandler which distributes rewards\\n  IRewardHandler public rewardHandler;\\n\\n  // The address which is alowed to call service functions\\n  address public worker;\\n\\n  address private farmHead;\\n  struct Farm {\\n    address nextFarm;\\n    uint256 farmStartedAtBlock;\\n    uint256 farmEndedAtBlock;\\n    uint256 rewardCap;\\n    uint256 rewardProvided;\\n    uint256 rewardPerDuration;\\n    uint32 rewardFee;\\n    bool paused;\\n    bool active;\\n  }\\n\\n  mapping(address => Farm) public farms;\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Events\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  event FarmRegistered(address indexed farm);\\n\\n  event FarmUpdated(address indexed farm);\\n\\n  event FarmDisabled(address indexed farm);\\n\\n  event FarmPaused(address indexed farm, bool pause);\\n\\n  event FarmTransfered(address indexed farm, address indexed to);\\n\\n  event Rebalanced(address indexed farm);\\n\\n  event Refueled(address indexed farm, uint256 amount);\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Modifiers\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  modifier onlyWorker {\\n    require(_msgSender() == worker, 'not worker');\\n    _;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Initialization\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev rewardHandler is the instance which finally stores the reward token\\n   * and distributes them to the different recipients\\n   *\\n   * @param _addressRegistry IAdressRegistry to get system addresses\\n   * @param _rewardHandler Handler of reward distribution\\n   * @param _previousController The previous controller\\n   */\\n  constructor(\\n    IAddressRegistry _addressRegistry,\\n    address _rewardHandler,\\n    address _previousController\\n  ) {\\n    // Initialize state\\n    setRewardHandler(_rewardHandler);\\n    previousController = _previousController;\\n\\n    // Initialize {Ownable}\\n    address _marketingWallet =\\n      _addressRegistry.getRegistryEntry(AddressBook.MARKETING_WALLET);\\n    transferOwnership(_marketingWallet);\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Routing\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  function setRewardHandler(address _rewardHandler) public onlyOwner {\\n    rewardHandler = IRewardHandler(_rewardHandler);\\n  }\\n\\n  function setWorker(address _worker) external onlyOwner {\\n    worker = _worker;\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation of {IController}\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev See {IController-onDeposit}\\n   */\\n  function onDeposit(\\n    uint256 /* amount*/\\n  ) external view override returns (uint256 fee) {\\n    // Load state\\n    Farm storage farm = farms[_msgSender()];\\n\\n    // Validate state\\n    require(farm.farmStartedAtBlock > 0, 'Caller not a farm');\\n    require(farm.farmEndedAtBlock == 0, 'Farm closed');\\n    require(!farm.paused, 'Farm paused');\\n\\n    return 0;\\n  }\\n\\n  /**\\n   * @dev See {IController-onDeposit}\\n   */\\n  function onWithdraw(\\n    uint256 /* amount*/\\n  ) external view override returns (uint256 fee) {\\n    // Validate state\\n    require(!farms[_msgSender()].paused, 'Farm paused');\\n\\n    return 0;\\n  }\\n\\n  /**\\n   * @dev See {IController-payOutRewards}\\n   */\\n  function payOutRewards(address recipient, uint256 amount) external override {\\n    // Load state\\n    Farm storage farm = farms[_msgSender()];\\n\\n    // Validate state\\n    require(farm.farmStartedAtBlock > 0, 'Caller not a farm');\\n    require(recipient != address(0), 'Recipient 0 address');\\n    require(!farm.paused, 'Farm paused');\\n    require(\\n      amount.add(farm.rewardProvided) <= farm.rewardCap,\\n      'Reward cap reached'\\n    );\\n\\n    // Update state\\n    rewardHandler.distribute2(recipient, amount, farm.rewardFee);\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Farm management\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  /**\\n   * @dev registerFarm can be called from outside (for new Farms deployed with\\n   * this controller) or from transferFarm() call\\n   *\\n   * Contracts are active from the time of registering, but to provide rewards,\\n   * refuelFarms must be called (for new Farms / due Farms).\\n   *\\n   * Use this function also for updating reward parameters and / or fee.\\n   * _rewardProvided should be left 0, it is mainly used if a farm is\\n   * transferred.\\n   *\\n   * @param _farmAddress Contract address of farm\\n   * @param _rewardCap Maximum amount of tokens rewardable\\n   * @param _rewardPerDuration Refuel amount of tokens, duration is fixed in\\n   * farm contract\\n   * @param _rewardProvided Already provided rewards for this farm, should be 0\\n   * for external calls\\n   * @param _rewardFee Fee we take from the reward and distribute through\\n   * components (1e6 factor)\\n   */\\n  function registerFarm(\\n    address _farmAddress,\\n    uint256 _rewardCap,\\n    uint256 _rewardPerDuration,\\n    uint256 _rewardProvided,\\n    uint32 _rewardFee\\n  ) external {\\n    // Validate access\\n    require(\\n      _msgSender() == owner() || _msgSender() == previousController,\\n      'Not allowed'\\n    );\\n\\n    // Validate parameters\\n    require(_farmAddress != address(0), 'Invalid farm (0)');\\n    require(IFarm(_farmAddress).controller() == this, 'Invalid farm (C)');\\n\\n    // Farm existent, add new reward logic\\n    Farm storage farm = farms[_farmAddress];\\n    if (farm.farmStartedAtBlock > 0) {\\n      // Re-enable farm if disabled\\n      farm.farmEndedAtBlock = 0;\\n      farm.paused = false;\\n      farm.active = true;\\n      farm.rewardCap = _rewardCap;\\n      farm.rewardFee = _rewardFee;\\n      farm.rewardPerDuration = _rewardPerDuration;\\n      if (_rewardProvided > 0) farm.rewardProvided = _rewardProvided;\\n\\n      // Dispatch event\\n      emit FarmUpdated(_farmAddress);\\n    }\\n    // We have a new farm\\n    else {\\n      // If we have one with same name, deactivate old one\\n      bytes32 farmName =\\n        keccak256(abi.encodePacked(IFarm(_farmAddress).farmName()));\\n      address searchAddress = farmHead;\\n      while (\\n        searchAddress != address(0) &&\\n        farmName != keccak256(abi.encodePacked(IFarm(searchAddress).farmName()))\\n      ) searchAddress = farms[searchAddress].nextFarm;\\n\\n      // If found (update), disable existing farm\\n      if (searchAddress != address(0)) {\\n        farms[searchAddress].farmEndedAtBlock = block.number;\\n        _rewardProvided = farms[searchAddress].rewardProvided;\\n      }\\n\\n      // Insert the new Farm\\n      farm.nextFarm = farmHead;\\n      farm.farmStartedAtBlock = block.number;\\n      farm.farmEndedAtBlock = 0;\\n      farm.rewardCap = _rewardCap;\\n      farm.rewardProvided = _rewardProvided;\\n      farm.rewardPerDuration = _rewardPerDuration;\\n      farm.rewardFee = _rewardFee;\\n      farm.paused = false;\\n      farm.active = true;\\n      farmHead = _farmAddress;\\n\\n      // Dispatch event\\n      emit FarmRegistered(_farmAddress);\\n    }\\n  }\\n\\n  /**\\n   * @dev Note that disabled farms can only be enabled again by calling\\n   * registerFarm() with new parameters\\n   *\\n   * This function is meant to finally end a farm.\\n   *\\n   * @param _farmAddress Contract address of farm to disable\\n   */\\n  function disableFarm(address _farmAddress) external onlyOwner {\\n    // Load state\\n    Farm storage farm = farms[_farmAddress];\\n\\n    // Validate state\\n    require(farm.farmStartedAtBlock > 0, 'Not a farm');\\n\\n    // Update state\\n    farm.farmEndedAtBlock = block.number;\\n\\n    // Dispatch event\\n    emit FarmDisabled(_farmAddress);\\n\\n    _checkActive(farm);\\n  }\\n\\n  /**\\n   * @dev This is an emergency pause, which should be called in case of serious\\n   * issues.\\n   *\\n   * Deposit / withdraw and rewards are disabled while pause is set to true.\\n   *\\n   * @param _farmAddress Contract address of farm to disable\\n   * @param _pause To enable / disable a farm\\n   */\\n  function pauseFarm(address _farmAddress, bool _pause) external onlyOwner {\\n    // Load state\\n    Farm storage farm = farms[_farmAddress];\\n\\n    // Validate state\\n    require(farm.farmStartedAtBlock > 0, 'Not a farm');\\n\\n    // Update state\\n    farm.paused = _pause;\\n\\n    // Dispatch event\\n    emit FarmPaused(_farmAddress, _pause);\\n\\n    _checkActive(farm);\\n  }\\n\\n  function transferFarm(address _farmAddress, address _newController)\\n    public\\n    onlyOwner\\n  {\\n    // Validate parameters\\n    require(_newController != address(0), 'newController = 0');\\n    require(_newController != address(this), 'newController = this');\\n\\n    // Load state\\n    Farm storage farm = farms[_farmAddress];\\n\\n    // Validate state\\n    require(farm.farmStartedAtBlock > 0, 'Farm not registered');\\n\\n    // Update state\\n    IFarm(_farmAddress).setController(_newController);\\n\\n    // Register this farm in the new controller\\n    Controller(_newController).registerFarm(\\n      _farmAddress,\\n      farm.rewardCap,\\n      farm.rewardPerDuration,\\n      farm.rewardProvided,\\n      farm.rewardFee\\n    );\\n\\n    // Remove this farm from controller\\n    if (_farmAddress == farmHead) {\\n      farmHead = farm.nextFarm;\\n    } else {\\n      address searchAddress = farmHead;\\n      while (farms[searchAddress].nextFarm != _farmAddress)\\n        searchAddress = farms[searchAddress].nextFarm;\\n      farms[searchAddress].nextFarm = farm.nextFarm;\\n    }\\n\\n    delete (farms[_farmAddress]);\\n\\n    // Dispatch event\\n    emit FarmTransfered(_farmAddress, _newController);\\n  }\\n\\n  function transferAllFarms(address _newController) external onlyOwner {\\n    while (farmHead != address(0)) {\\n      transferFarm(farmHead, _newController);\\n    }\\n  }\\n\\n  function setFarmRewardDuration(address farmAddress, uint256 newDuration)\\n    external\\n    onlyOwner\\n  {\\n    require(IFarm(farmAddress).controller() == this, 'Invalid farm (C)');\\n    IFarm(farmAddress).setRewardsDuration(newDuration);\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Utility functions\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  function rebalance() external onlyWorker {\\n    // Update state\\n    address iterAddress = farmHead;\\n    while (iterAddress != address(0)) {\\n      if (farms[iterAddress].active) {\\n        IFarm(iterAddress).rebalance();\\n      }\\n      iterAddress = farms[iterAddress].nextFarm;\\n    }\\n\\n    // Dispatch event\\n    emit Rebalanced(iterAddress);\\n  }\\n\\n  function refuelFarms() external onlyWorker {\\n    address iterAddress = farmHead;\\n    bool oneRefueled = false;\\n    while (iterAddress != address(0)) {\\n      // Refuel if farm end is one day ahead\\n      Farm storage farm = farms[iterAddress];\\n      if (\\n        farm.active &&\\n        // solhint-disable-next-line not-rely-on-time\\n        block.timestamp + 86400 >= IFarm(iterAddress).periodFinish()\\n      ) {\\n        // Update state\\n        IFarm(iterAddress).notifyRewardAmount(farm.rewardPerDuration);\\n        farm.rewardProvided = farm.rewardProvided.add(farm.rewardPerDuration);\\n        oneRefueled = true;\\n\\n        // Dispatch event\\n        emit Refueled(iterAddress, farm.rewardPerDuration);\\n      }\\n      iterAddress = farm.nextFarm;\\n    }\\n    require(oneRefueled, 'NOP');\\n  }\\n\\n  //////////////////////////////////////////////////////////////////////////////\\n  // Implementation details\\n  //////////////////////////////////////////////////////////////////////////////\\n\\n  function _checkActive(Farm storage farm) internal {\\n    farm.active = !(farm.paused || farm.farmEndedAtBlock > 0);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/src/investment/interfaces/IController.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2020-2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\ninterface IController {\\n  /**\\n   * @dev Used to control fees and accessibility instead having an implementation\\n   * in each farm contract\\n   *\\n   * Deposit is only allowed if farm is open and not not paused. Must revert on\\n   * failure.\\n   *\\n   * @param amount Number of tokens the user wants to deposit\\n   *\\n   * @return fee The deposit fee (1e18 factor) on success\\n   */\\n  function onDeposit(uint256 amount) external view returns (uint256 fee);\\n\\n  /**\\n   * @dev Used to control fees and accessibility instead having an\\n   * implementation in each farm contract\\n   *\\n   * Withdraw is only allowed if farm is not paused. Must revert on failure\\n   *\\n   * @param amount Number of tokens the user wants to withdraw\\n   *\\n   * @return fee The withdrawal fee (1e18 factor) on success\\n   */\\n  function onWithdraw(uint256 amount) external view returns (uint256 fee);\\n\\n  /**\\n   * @dev Distribute rewards to sender and fee to internal contracts\\n   */\\n  function payOutRewards(address recipient, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/investment/interfaces/IFarm.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2020-2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport './IController.sol';\\n\\ninterface IFarm {\\n  /**\\n   * @dev Return the farm's controller\\n   */\\n  function controller() external view returns (IController);\\n\\n  /**\\n   * @dev Return a unique, case-sensitive farm name\\n   */\\n  function farmName() external view returns (string memory);\\n\\n  /**\\n   * @dev Return when reward period is finished (UTC timestamp)\\n   */\\n  function periodFinish() external view returns (uint256);\\n\\n  /**\\n   * @dev Sets a new controller, can only called by current controller\\n   */\\n  function setController(address newController) external;\\n\\n  /**\\n   * @dev This function must be called initially and close at the time the\\n   * reward period ends\\n   */\\n  function notifyRewardAmount(uint256 reward) external;\\n\\n  /**\\n   * @dev Set the duration of farm rewards, to continue rewards,\\n   * notifyRewardAmount() has to called for the next period\\n   */\\n  function setRewardsDuration(uint256 _rewardsDuration) external;\\n\\n  /**\\n   * @dev Rebalance strategies (if implemented)\\n   */\\n  function rebalance() external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/investment/interfaces/IRewardHandler.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2020-2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\ninterface IRewardHandler {\\n  /**\\n   * @dev Transfer reward and distribute the fee\\n   *\\n   * This is the new implementation of distribute() which uses internal fees\\n   * defined in the {RewardHandler} contract.\\n   *\\n   * @param recipient The recipient of the reward\\n   * @param amount The amount of WOWS to transfer to the recipient\\n   * @param fee The reward fee in 1e6 factor notation\\n   */\\n\\n  function distribute2(\\n    address recipient,\\n    uint256 amount,\\n    uint32 fee\\n  ) external;\\n\\n  /**\\n   * @dev Transfer reward and distribute the fee\\n   *\\n   * This is the current implementation, needed for backward compatibility.\\n   *\\n   * Current ERC1155Minter and Controller call this function, later\\n   * reward handler clients should call the the new one with internal\\n   * fees specified in this contract.\\n   *\\n   * uint32 values are in 1e6 factor notation.\\n   */\\n  function distribute(\\n    address recipient,\\n    uint256 amount,\\n    uint32 fee,\\n    uint32 toTeam,\\n    uint32 toMarketing,\\n    uint32 toBooster,\\n    uint32 toRewardPool\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/src/utils/AddressBook.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2020-2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\nlibrary AddressBook {\\n  bytes32 public constant DEPLOYER = 'DEPLOYER';\\n  bytes32 public constant TEAM_WALLET = 'TEAM_WALLET';\\n  bytes32 public constant MARKETING_WALLET = 'MARKETING_WALLET';\\n  bytes32 public constant UNISWAP_V2_ROUTER02 = 'UNISWAP_V2_ROUTER02';\\n  bytes32 public constant WETH_WOWS_STAKE_FARM = 'WETH_WOWS_STAKE_FARM';\\n  bytes32 public constant WOWS_TOKEN = 'WOWS_TOKEN';\\n  bytes32 public constant UNISWAP_V2_PAIR = 'UNISWAP_V2_PAIR';\\n  bytes32 public constant WOWS_BOOSTER = 'WOWS_BOOSTER';\\n  bytes32 public constant REWARD_HANDLER = 'REWARD_HANDLER';\\n  bytes32 public constant SFT_MINTER = 'SFT_MINTER';\\n  bytes32 public constant SFT_HOLDER = 'SFT_HOLDER';\\n  bytes32 public constant BOIS_REWARDS = 'BOIS_REWARDS';\\n  bytes32 public constant WOLVES_REWARDS = 'WOLVES_REWARDS';\\n  bytes32 public constant SFT_EVALUATOR_PROXY = 'SFT_EVALUATOR_PROXY';\\n  bytes32 public constant TRADE_FLOOR_PROXY = 'TRADE_FLOOR_PROXY';\\n  bytes32 public constant CURVE_Y_TOKEN = 'CURVE_Y_TOKEN';\\n  bytes32 public constant CURVE_Y_DEPOSIT = 'CURVE_Y_DEPOSIT';\\n}\\n\"\r\n    },\r\n    \"contracts/src/utils/interfaces/IAddressRegistry.sol\": {\r\n      \"content\": \"/*\\n * Copyright (C) 2021 The Wolfpack\\n * This file is part of wolves.finance - https://github.com/wolvesofwallstreet/wolves.finance\\n *\\n * SPDX-License-Identifier: Apache-2.0\\n * See the file LICENSES/README.md for more information.\\n */\\n\\npragma solidity >=0.7.0 <0.8.0;\\n\\ninterface IAddressRegistry {\\n  /**\\n   * @dev Set an abitrary key / address pair into the registry\\n   */\\n  function setRegistryEntry(bytes32 _key, address _location) external;\\n\\n  /**\\n   * @dev Get a registry enty with by key, returns 0 address if not existing\\n   */\\n  function getRegistryEntry(bytes32 _key) external view returns (address);\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IAddressRegistry\",\"name\":\"_addressRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardHandler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_previousController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"}],\"name\":\"FarmDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"FarmPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"}],\"name\":\"FarmRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FarmTransfered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"}],\"name\":\"FarmUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"}],\"name\":\"Rebalanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refueled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmAddress\",\"type\":\"address\"}],\"name\":\"disableFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"farms\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nextFarm\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"farmStartedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"farmEndedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardProvided\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"rewardFee\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"pauseFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payOutRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refuelFarms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardProvided\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_rewardFee\",\"type\":\"uint32\"}],\"name\":\"registerFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardHandler\",\"outputs\":[{\"internalType\":\"contract IRewardHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farmAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"setFarmRewardDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardHandler\",\"type\":\"address\"}],\"name\":\"setRewardHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_worker\",\"type\":\"address\"}],\"name\":\"setWorker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"transferAllFarms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_farmAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"transferFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"worker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Controller","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"000000000000000000000000945466656995c9309ff66e05b4c268558bec964e0000000000000000000000000a771ee99e9b106b2ec035788911f22b56a541df00000000000000000000000091756429a3c7b74326e7c2dde3c8356e55086522","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":""}]}