{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/clexmond/projects/influence/influence-dapp/contracts/AsteroidFeatures.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\nimport \\\"abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\nimport \\\"./lib/InfluenceSettings.sol\\\";\\nimport \\\"./lib/Procedural.sol\\\";\\nimport \\\"./interfaces/IPlanets.sol\\\";\\n\\n\\n/**\\n * @dev Contract which generates all standard features of an asteroid including its spectral type and\\n * orbital elements.\\n */\\ncontract AsteroidFeatures {\\n  using ABDKMath64x64 for *;\\n  using Procedural for bytes32;\\n\\n  IPlanets planets;\\n\\n  constructor(IPlanets _planets) {\\n    planets = _planets;\\n  }\\n\\n  /**\\n   * @dev Returns the asteroid's individual seed\\n   * @param _asteroidId Number from 1 to the total supply of asteroids\\n   */\\n  function getAsteroidSeed(uint _asteroidId) public pure returns (bytes32) {\\n    require(_asteroidId > 0 && _asteroidId <= InfluenceSettings.TOTAL_ASTEROIDS);\\n    return InfluenceSettings.MASTER_SEED.derive(_asteroidId);\\n  }\\n\\n  /**\\n   * @dev Generates the asteroid radius in meters\\n   * @param _asteroidId Number from 1 to the total supply of asteroids\\n   */\\n  function getRadius(uint _asteroidId) public pure returns (uint64) {\\n    int128 exponent = int128(-475).fromInt().div(int128(1000).fromInt());\\n    int128 baseRadius = InfluenceSettings.MAX_RADIUS.fromInt();\\n    int128 radiusMod = exponent.mul(_asteroidId.fromUInt().ln()).exp();\\n    int128 radius = baseRadius.mul(radiusMod);\\n    return radius.toUInt();\\n  }\\n\\n  /**\\n   * @dev Generates the asteroid radius in meters\\n   * @param _seed The seed returned by getAsteroidSeed\\n   */\\n  function getRadiusBySeed(bytes32 _seed) public pure returns (uint64) {\\n    bytes32 node = _seed.derive(\\\"radius\\\");\\n    int128 base = int128(node.getIntBetween(0, 1000001)); // FIX THIS!\\n    int128 exponent = int128(-1).fromInt().div(int128(2).fromInt());\\n    int128 baseRadius = InfluenceSettings.MAX_RADIUS.fromInt();\\n    int128 radiusMod = exponent.mul(base.fromInt().ln()).exp();\\n    int128 radius = baseRadius.mul(radiusMod);\\n    return radius.toUInt();\\n  }\\n\\n  /**\\n   * @dev Utility method to get asteroid spectral type\\n   * @param _asteroidId Number from 1 to the total supply of asteroids\\n   */\\n  function getSpectralType(uint _asteroidId) public pure returns (uint) {\\n    return getSpectralTypeBySeed(getAsteroidSeed(_asteroidId));\\n  }\\n\\n  /** @dev Utility method to get asteroid spectral type\\n   * @param _seed The seed returned by getAsteroidSeed\\n   */\\n  function getSpectralTypeBySeed(bytes32 _seed) public pure returns (uint) {\\n    uint region = getRegion(_seed);\\n\\n    if (region == 0) {\\n      return getMainBeltType(_seed);\\n    } else {\\n      return getTrojanType(_seed);\\n    }\\n  }\\n\\n  /**\\n   * @dev Utility method to get asteroid orbital elements\\n   * @param _asteroidId Number from 1 to the total supply of asteroids\\n   */\\n  function getOrbitalElements(uint _asteroidId) public view returns (uint[6] memory orbitalElements) {\\n    return getOrbitalElementsBySeed(getAsteroidSeed(_asteroidId));\\n  }\\n\\n  /**\\n   * @dev Utility method to get asteroid orbital elements\\n   * @param _seed The seed returned by getAsteroidSeed\\n   */\\n  function getOrbitalElementsBySeed(bytes32 _seed) public view returns (uint[6] memory orbitalElements) {\\n    uint region = getRegion(_seed);\\n\\n    if (region == 0) {\\n      uint spectralType = getMainBeltType(_seed);\\n      orbitalElements = getMainBeltElements(_seed, spectralType);\\n    } else {\\n      orbitalElements = getTrojanElements(_seed);\\n    }\\n\\n    return orbitalElements;\\n  }\\n\\n  /**\\n   * @dev Gets the region (Main belt or Trojan) for the asteroid\\n   * @param _seed The seed returned by getAsteroidSeed\\n   */\\n  function getRegion(bytes32 _seed) internal pure returns (uint) {\\n    bytes32 node = _seed.derive(\\\"region\\\");\\n    uint roll = uint(node.getIntBetween(0, 101));\\n\\n    if (roll >= 20) {\\n      return 0;\\n    } else {\\n      return 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev Generates the spectral type of a main belt asteroid\\n   * @param _seed The seed returned by getAsteroidSeed\\n   */\\n  function getMainBeltType(bytes32 _seed) internal pure returns (uint) {\\n    uint16[11] memory ratios = [ 6500, 125, 250, 500, 250, 125, 1000, 500, 125, 500, 125 ];\\n\\n    bytes32 node =_seed.derive(\\\"spectral\\\");\\n    int64 roll = node.getIntBetween(1, 10001);\\n    uint asteroidCount = 0;\\n\\n    for (uint i = 0; i < ratios.length; i++) {\\n      asteroidCount += ratios[i];\\n\\n      if (uint(roll) <= asteroidCount) {\\n        return i;\\n      }\\n    }\\n\\n    return uint(ratios.length - 1);\\n  }\\n\\n  /**\\n   * @dev Generates orbital elements for main belt asteroids\\n   * @param _seed The seed returned by getAsteroidSeed\\n   */\\n  function getMainBeltElements(bytes32 _seed, uint _spectralType) internal pure returns (uint[6] memory) {\\n    bytes32 node;\\n\\n    // Define min / max semi-major axis for each spectral type and generate for asteroid\\n    int128[11] memory minAxis = [ int128(800),  1200, 2900, 800,  1200, 2400, 800,  1200, 2400, 1200, 2900 ];\\n    int128[11] memory maxAxis = [ int128(3100), 2250, 3100, 2600, 2350, 3000, 2400, 2250, 2750, 2300, 3100 ];\\n    node = _seed.derive(\\\"axis\\\");\\n    uint axis = uint(node.getNormalIntBetween(minAxis[uint(_spectralType)], maxAxis[uint(_spectralType)]));\\n\\n    // Generate eccentricity between 0 and 0.4\\n    node = _seed.derive(\\\"eccentricity\\\");\\n    uint ecc = uint(node.getNormalIntBetween(0, 400));\\n\\n    // Generate inclination between 0 and 35 deg\\n    node = _seed.derive(\\\"inclination\\\");\\n    uint inc = uint(node.getDecayingIntBelow(4001));\\n\\n    // Get rotational elements for main belt\\n    uint[3] memory rotElements = getMainBeltRotationalElements(_seed);\\n\\n    return [ axis, ecc, inc, rotElements[0], rotElements[1], rotElements[2] ];\\n  }\\n\\n  /**\\n   * @dev Generates the rotational elements for main belt asteroids\\n   * @param _seed The seed returned from getAsteroidSeed\\n   */\\n  function getMainBeltRotationalElements(bytes32 _seed) internal pure returns (uint[3] memory) {\\n    bytes32 node;\\n\\n    // Generate ascending node between 0 and 360 deg\\n    node = _seed.derive(\\\"ascending\\\");\\n    uint lan = uint(node.getIntBetween(0, 36000));\\n\\n    // Generate argument of periapsis between 0 and 360 deg\\n    node = _seed.derive(\\\"periapsis\\\");\\n    uint peri = uint(node.getIntBetween(0, 36000));\\n\\n    // Generate mean anomaly at epoch between 0 and 360 deg\\n    node = _seed.derive(\\\"anomaly\\\");\\n    uint anom = uint(node.getIntBetween(0, 36000));\\n\\n    return [ lan, peri, anom ];\\n  }\\n\\n  /**\\n   * @dev Generates the spectral type for Trojan belt asteroids\\n   * @param _seed The seed returned by getAsteroidSeed\\n   */\\n  function getTrojanType(bytes32 _seed) internal pure returns (uint) {\\n    uint16[11] memory ratios = [ 2750, 0, 1500, 0, 0, 0, 0, 0, 0, 0, 5750 ];\\n\\n    bytes32 node = _seed.derive(\\\"spectral\\\");\\n    int64 roll = node.getIntBetween(1, 10001);\\n    uint asteroidCount = 0;\\n\\n    for (uint i = 0; i < ratios.length; i++) {\\n      asteroidCount += ratios[i];\\n\\n      if (uint(roll) <= asteroidCount) {\\n        return i;\\n      }\\n    }\\n\\n    return uint(ratios.length - 1);\\n  }\\n\\n  /**\\n   * @dev Generates a set of orbital elements for a trojan asteroid based on the parent planet\\n   * @param _seed The seed returned by getAsteroidSeed\\n   */\\n  function getTrojanElements(bytes32 _seed) internal view returns (uint[6] memory) {\\n    bytes32 node;\\n\\n    // Get details for the planet we're using as parent\\n    uint16[6] memory planet = planets.getPlanetWithTrojanAsteroids();\\n\\n    // Semi-major axis must be identical to result in the same oribtal period\\n    uint axis = planet[0];\\n\\n    // Eccentricity can vary by up to 12.5%\\n    node = _seed.derive(\\\"eccentricity\\\");\\n    uint ecc = uint(node.getNormalIntBetween(0, 125));\\n\\n    // Inclination can vary up to 35 deg\\n    node = _seed.derive(\\\"inclination\\\");\\n    uint inc = planet[2] + uint(node.getDecayingIntBelow(4001));\\n\\n    uint[3] memory rotElements = getTrojanRotationalElements(_seed, planet[3], planet[4], planet[5]);\\n    return [ axis, ecc, inc, rotElements[0], rotElements[1], rotElements[2] ];\\n  }\\n\\n  /**\\n   * @dev Since we're roughly approximating Trojan orbits (in reality they orbit the Lagrange point as well as\\n   * the star) we're going to vary orbits related to the parent. This is achieved by varying the sum of\\n   * the longitude of ascending node, argument of periapsis, and mean anomaly at epoch.\\n   * @param _seed The seed returned from getAsteroidSeed\\n   * @param _l Planet's longitude of ascending node\\n   * @param _p Planet's argument of periapsis\\n   * @param _a Planet's mean anomaly at epch\\n   */\\n  function getTrojanRotationalElements(\\n    bytes32 _seed,\\n    uint _l,\\n    uint _p,\\n    uint _a\\n  ) internal pure returns (uint[3] memory) {\\n    bytes32 node;\\n    node = _seed.derive(\\\"lagrange\\\");\\n    uint lagrangeShift = 4500 + 22500 * uint(node.getIntBetween(0, 2)) + uint(node.getNormalIntBetween(0, 4501));\\n    uint planetSum = _l + _p + _a + lagrangeShift;\\n\\n    // Longitude of ascending node can vary\\n    node = _seed.derive(\\\"ascending\\\");\\n    uint lan = uint(node.getIntBetween(0, 36000));\\n\\n    // Argument of periapsis can vary\\n    node = _seed.derive(\\\"periapsis\\\");\\n    uint peri = uint(node.getIntBetween(0, 36000));\\n\\n    // Mean anomaly at epoch must get the asteroid in proper alignment with planetSum\\n    uint anom = (planetSum % 36000) + 36000 - ((lan + peri) % 36000);\\n    anom = anom % 36000;\\n\\n    return [ lan, peri, anom ];\\n  }\\n}\\n\"\r\n    },\r\n    \"/Users/clexmond/projects/influence/influence-dapp/contracts/interfaces/IPlanets.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.7.6;\\n\\n\\ninterface IPlanets {\\n  \\n  function getElements(uint _planet) external pure returns (uint16[6] memory elements);\\n\\n  function getType(uint _planet) external pure returns (uint8);\\n\\n  function getRadius(uint _planet) external pure returns (uint32);\\n\\n  function getPlanetWithTrojanAsteroids() external pure returns (uint16[6] memory);\\n}\\n\"\r\n    },\r\n    \"/Users/clexmond/projects/influence/influence-dapp/contracts/lib/InfluenceSettings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.0;\\n\\n\\nlibrary InfluenceSettings {\\n\\n  // Game constants\\n  bytes32 public constant MASTER_SEED = \\\"influence\\\";\\n  uint32 public constant MAX_RADIUS = 375142; // in meters\\n  uint32 public constant START_TIMESTAMP = 1609459200; // Zero date timestamp for orbits\\n  uint public constant TOTAL_ASTEROIDS = 250000;\\n}\\n\"\r\n    },\r\n    \"/Users/clexmond/projects/influence/influence-dapp/contracts/lib/Procedural.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Portions licensed under NovakDistribute license (ref LICENSE file)\\npragma solidity ^0.7.0;\\n\\nimport \\\"abdk-libraries-solidity/ABDKMath64x64.sol\\\";\\n\\nlibrary Procedural {\\n  using ABDKMath64x64 for *;\\n\\n  /**\\n   * @dev Mix string data into a hash and return a new one.\\n   */\\n  function derive(bytes32 _self, string memory _entropy) public pure returns (bytes32) {\\n    return sha256(abi.encodePacked(_self, _entropy));\\n  }\\n\\n  /**\\n   * @dev Mix signed int data into a hash and return a new one.\\n   */\\n  function derive(bytes32 _self, int256 _entropy) public pure returns (bytes32) {\\n    return sha256(abi.encodePacked(_self, _entropy));\\n  }\\n\\n  /**\\n  * @dev Mix unsigned int data into a hash and return a new one.\\n  */\\n  function derive(bytes32 _self, uint _entropy) public pure returns (bytes32) {\\n    return sha256(abi.encodePacked(_self, _entropy));\\n  }\\n\\n  /**\\n   * @dev Returns the base pseudorandom hash for the given RandNode. Does another round of hashing\\n   * in case an un-encoded string was passed.\\n   */\\n  function getHash(bytes32 _self) public pure returns (bytes32) {\\n    return sha256(abi.encodePacked(_self));\\n  }\\n\\n  /**\\n   * @dev Get an int128 full of random bits.\\n   */\\n  function getInt128(bytes32 _self) public pure returns (int128) {\\n    return int128(int256(getHash(_self)));\\n  }\\n\\n  /**\\n   * @dev Get a 64.64 fixed point (see ABDK math) where: 0 <= return value < 1\\n   */\\n  function getReal(bytes32 _self) public pure returns (int128) {\\n    int128 fixedOne = int128(1 << 64);\\n    return getInt128(_self).abs() % fixedOne;\\n  }\\n\\n  /**\\n   * @dev Get an integer between low, inclusive, and high, exclusive. Represented as a normal int, not a real.\\n   */\\n  function getIntBetween(bytes32 _self, int128 _low, int128 _high) public pure returns (int64) {\\n    _low = _low.fromInt();\\n    _high = _high.fromInt();\\n    int128 range = _high.sub(_low);\\n    int128 result = getReal(_self).mul(range).add(_low);\\n    return result.toInt();\\n  }\\n\\n  /**\\n   * @dev Returns a normal int (roughly) normally distributed value between low and high\\n   */\\n  function getNormalIntBetween(bytes32 _self, int128 _low, int128 _high) public pure returns (int64) {\\n    int128 accumulator = 0;\\n\\n    for (uint i = 0; i < 5; i++) {\\n      accumulator += getIntBetween(derive(_self, i), _low, _high);\\n    }\\n\\n    return accumulator.fromInt().div(5.fromUInt()).toInt();\\n  }\\n\\n  /**\\n   * @dev \\\"Folds\\\" a normal int distribution in half to generate an approx decay function\\n   * Only takes a high value (exclusive) as the simplistic approximation relies on low being zero\\n   * Returns a normal int, not a real\\n   */\\n  function getDecayingIntBelow(bytes32 _self, uint _high) public pure returns (int64) {\\n    require(_high < uint(1 << 64));\\n    int64 normalInt = getNormalIntBetween(_self, 0, int128(_high * 2 - 1));\\n    int128 adjusted = int128(normalInt) - int128(_high);\\n    return adjusted.fromInt().abs().toInt();\\n  }\\n}\\n\"\r\n    },\r\n    \"abdk-libraries-solidity/ABDKMath64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.5.0 || ^0.6.0 || ^0.7.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n  /*\\n   * Minimum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n  /*\\n   * Maximum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  /**\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromInt (int256 x) internal pure returns (int128) {\\n    require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n    return int128 (x << 64);\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n   * rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64-bit integer number\\n   */\\n  function toInt (int128 x) internal pure returns (int64) {\\n    return int64 (x >> 64);\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\n    require (x <= 0x7FFFFFFFFFFFFFFF);\\n    return int128 (x << 64);\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n   * number rounding down.  Revert on underflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return unsigned 64-bit integer number\\n   */\\n  function toUInt (int128 x) internal pure returns (uint64) {\\n    require (x >= 0);\\n    return uint64 (x >> 64);\\n  }\\n\\n  /**\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n   * number rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 128.128-bin fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function from128x128 (int256 x) internal pure returns (int128) {\\n    int256 result = x >> 64;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n   * number.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 128.128 fixed point number\\n   */\\n  function to128x128 (int128 x) internal pure returns (int256) {\\n    return int256 (x) << 64;\\n  }\\n\\n  /**\\n   * Calculate x + y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\n    int256 result = int256(x) + y;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate x - y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\n    int256 result = int256(x) - y;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\n    int256 result = int256(x) * y >> 64;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y signed 256-bit integer number\\n   * @return signed 256-bit integer number\\n   */\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\n    if (x == MIN_64x64) {\\n      require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n        y <= 0x1000000000000000000000000000000000000000000000000);\\n      return -y << 63;\\n    } else {\\n      bool negativeResult = false;\\n      if (x < 0) {\\n        x = -x;\\n        negativeResult = true;\\n      }\\n      if (y < 0) {\\n        y = -y; // We rely on overflow behavior here\\n        negativeResult = !negativeResult;\\n      }\\n      uint256 absoluteResult = mulu (x, uint256 (y));\\n      if (negativeResult) {\\n        require (absoluteResult <=\\n          0x8000000000000000000000000000000000000000000000000000000000000000);\\n        return -int256 (absoluteResult); // We rely on overflow behavior here\\n      } else {\\n        require (absoluteResult <=\\n          0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int256 (absoluteResult);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\n    if (y == 0) return 0;\\n\\n    require (x >= 0);\\n\\n    uint256 lo = (uint256 (x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n    uint256 hi = uint256 (x) * (y >> 128);\\n\\n    require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n    hi <<= 64;\\n\\n    require (hi <=\\n      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n    return hi + lo;\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\n    require (y != 0);\\n    int256 result = (int256 (x) << 64) / y;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @param y signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\n    require (y != 0);\\n\\n    bool negativeResult = false;\\n    if (x < 0) {\\n      x = -x; // We rely on overflow behavior here\\n      negativeResult = true;\\n    }\\n    if (y < 0) {\\n      y = -y; // We rely on overflow behavior here\\n      negativeResult = !negativeResult;\\n    }\\n    uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\n    if (negativeResult) {\\n      require (absoluteResult <= 0x80000000000000000000000000000000);\\n      return -int128 (absoluteResult); // We rely on overflow behavior here\\n    } else {\\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return int128 (absoluteResult); // We rely on overflow behavior here\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\n    require (y != 0);\\n    uint128 result = divuu (x, y);\\n    require (result <= uint128 (MAX_64x64));\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate -x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function neg (int128 x) internal pure returns (int128) {\\n    require (x != MIN_64x64);\\n    return -x;\\n  }\\n\\n  /**\\n   * Calculate |x|.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function abs (int128 x) internal pure returns (int128) {\\n    require (x != MIN_64x64);\\n    return x < 0 ? -x : x;\\n  }\\n\\n  /**\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function inv (int128 x) internal pure returns (int128) {\\n    require (x != 0);\\n    int256 result = int256 (0x100000000000000000000000000000000) / x;\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\n    return int128 ((int256 (x) + int256 (y)) >> 1);\\n  }\\n\\n  /**\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n   * Revert on overflow or in case x * y is negative.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\n    int256 m = int256 (x) * int256 (y);\\n    require (m >= 0);\\n    require (m <\\n        0x4000000000000000000000000000000000000000000000000000000000000000);\\n    return int128 (sqrtu (uint256 (m)));\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y uint256 value\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\n    uint256 absoluteResult;\\n    bool negativeResult = false;\\n    if (x >= 0) {\\n      absoluteResult = powu (uint256 (x) << 63, y);\\n    } else {\\n      // We rely on overflow behavior here\\n      absoluteResult = powu (uint256 (uint128 (-x)) << 63, y);\\n      negativeResult = y & 1 > 0;\\n    }\\n\\n    absoluteResult >>= 63;\\n\\n    if (negativeResult) {\\n      require (absoluteResult <= 0x80000000000000000000000000000000);\\n      return -int128 (absoluteResult); // We rely on overflow behavior here\\n    } else {\\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return int128 (absoluteResult); // We rely on overflow behavior here\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sqrt (int128 x) internal pure returns (int128) {\\n    require (x >= 0);\\n    return int128 (sqrtu (uint256 (x) << 64));\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function log_2 (int128 x) internal pure returns (int128) {\\n    require (x > 0);\\n\\n    int256 msb = 0;\\n    int256 xc = x;\\n    if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n    if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n    if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n    if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n    if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n    if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n    if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n    int256 result = msb - 64 << 64;\\n    uint256 ux = uint256 (x) << uint256 (127 - msb);\\n    for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n      ux *= ux;\\n      uint256 b = ux >> 255;\\n      ux >>= 127 + b;\\n      result += bit * int256 (b);\\n    }\\n\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function ln (int128 x) internal pure returns (int128) {\\n    require (x > 0);\\n\\n    return int128 (\\n        uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128);\\n  }\\n\\n  /**\\n   * Calculate binary exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp_2 (int128 x) internal pure returns (int128) {\\n    require (x < 0x400000000000000000); // Overflow\\n\\n    if (x < -0x400000000000000000) return 0; // Underflow\\n\\n    uint256 result = 0x80000000000000000000000000000000;\\n\\n    if (x & 0x8000000000000000 > 0)\\n      result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n    if (x & 0x4000000000000000 > 0)\\n      result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n    if (x & 0x2000000000000000 > 0)\\n      result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n    if (x & 0x1000000000000000 > 0)\\n      result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n    if (x & 0x800000000000000 > 0)\\n      result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n    if (x & 0x400000000000000 > 0)\\n      result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n    if (x & 0x200000000000000 > 0)\\n      result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n    if (x & 0x100000000000000 > 0)\\n      result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n    if (x & 0x80000000000000 > 0)\\n      result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n    if (x & 0x40000000000000 > 0)\\n      result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n    if (x & 0x20000000000000 > 0)\\n      result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n    if (x & 0x10000000000000 > 0)\\n      result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n    if (x & 0x8000000000000 > 0)\\n      result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n    if (x & 0x4000000000000 > 0)\\n      result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n    if (x & 0x2000000000000 > 0)\\n      result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n    if (x & 0x1000000000000 > 0)\\n      result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n    if (x & 0x800000000000 > 0)\\n      result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n    if (x & 0x400000000000 > 0)\\n      result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n    if (x & 0x200000000000 > 0)\\n      result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n    if (x & 0x100000000000 > 0)\\n      result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n    if (x & 0x80000000000 > 0)\\n      result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n    if (x & 0x40000000000 > 0)\\n      result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n    if (x & 0x20000000000 > 0)\\n      result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n    if (x & 0x10000000000 > 0)\\n      result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n    if (x & 0x8000000000 > 0)\\n      result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n    if (x & 0x4000000000 > 0)\\n      result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n    if (x & 0x2000000000 > 0)\\n      result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n    if (x & 0x1000000000 > 0)\\n      result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n    if (x & 0x800000000 > 0)\\n      result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n    if (x & 0x400000000 > 0)\\n      result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n    if (x & 0x200000000 > 0)\\n      result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n    if (x & 0x100000000 > 0)\\n      result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n    if (x & 0x80000000 > 0)\\n      result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n    if (x & 0x40000000 > 0)\\n      result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n    if (x & 0x20000000 > 0)\\n      result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n    if (x & 0x10000000 > 0)\\n      result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n    if (x & 0x8000000 > 0)\\n      result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n    if (x & 0x4000000 > 0)\\n      result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n    if (x & 0x2000000 > 0)\\n      result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n    if (x & 0x1000000 > 0)\\n      result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n    if (x & 0x800000 > 0)\\n      result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n    if (x & 0x400000 > 0)\\n      result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n    if (x & 0x200000 > 0)\\n      result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n    if (x & 0x100000 > 0)\\n      result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n    if (x & 0x80000 > 0)\\n      result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n    if (x & 0x40000 > 0)\\n      result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n    if (x & 0x20000 > 0)\\n      result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n    if (x & 0x10000 > 0)\\n      result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n    if (x & 0x8000 > 0)\\n      result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n    if (x & 0x4000 > 0)\\n      result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n    if (x & 0x2000 > 0)\\n      result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n    if (x & 0x1000 > 0)\\n      result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n    if (x & 0x800 > 0)\\n      result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n    if (x & 0x400 > 0)\\n      result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n    if (x & 0x200 > 0)\\n      result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n    if (x & 0x100 > 0)\\n      result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n    if (x & 0x80 > 0)\\n      result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n    if (x & 0x40 > 0)\\n      result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n    if (x & 0x20 > 0)\\n      result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n    if (x & 0x10 > 0)\\n      result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n    if (x & 0x8 > 0)\\n      result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n    if (x & 0x4 > 0)\\n      result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n    if (x & 0x2 > 0)\\n      result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n    if (x & 0x1 > 0)\\n      result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n\\n    result >>= uint256 (63 - (x >> 64));\\n    require (result <= uint256 (MAX_64x64));\\n\\n    return int128 (result);\\n  }\\n\\n  /**\\n   * Calculate natural exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp (int128 x) internal pure returns (int128) {\\n    require (x < 0x400000000000000000); // Overflow\\n\\n    if (x < -0x400000000000000000) return 0; // Underflow\\n\\n    return exp_2 (\\n        int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 64.64-bit fixed point number\\n   */\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\n    require (y != 0);\\n\\n    uint256 result;\\n\\n    if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n      result = (x << 64) / y;\\n    else {\\n      uint256 msb = 192;\\n      uint256 xc = x >> 192;\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n      uint256 hi = result * (y >> 128);\\n      uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n      uint256 xh = x >> 192;\\n      uint256 xl = x << 64;\\n\\n      if (xl < lo) xh -= 1;\\n      xl -= lo; // We rely on overflow behavior here\\n      lo = hi << 128;\\n      if (xl < lo) xh -= 1;\\n      xl -= lo; // We rely on overflow behavior here\\n\\n      assert (xh == hi >> 128);\\n\\n      result += xl / y;\\n    }\\n\\n    require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n    return uint128 (result);\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\\n   * number and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x unsigned 129.127-bit fixed point number\\n   * @param y uint256 value\\n   * @return unsigned 129.127-bit fixed point number\\n   */\\n  function powu (uint256 x, uint256 y) private pure returns (uint256) {\\n    if (y == 0) return 0x80000000000000000000000000000000;\\n    else if (x == 0) return 0;\\n    else {\\n      int256 msb = 0;\\n      uint256 xc = x;\\n      if (xc >= 0x100000000000000000000000000000000) { xc >>= 128; msb += 128; }\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      int256 xe = msb - 127;\\n      if (xe > 0) x >>= uint256 (xe);\\n      else x <<= uint256 (-xe);\\n\\n      uint256 result = 0x80000000000000000000000000000000;\\n      int256 re = 0;\\n\\n      while (y > 0) {\\n        if (y & 1 > 0) {\\n          result = result * x;\\n          y -= 1;\\n          re += xe;\\n          if (result >=\\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\\n            result >>= 128;\\n            re += 1;\\n          } else result >>= 127;\\n          if (re < -127) return 0; // Underflow\\n          require (re < 128); // Overflow\\n        } else {\\n          x = x * x;\\n          y >>= 1;\\n          xe <<= 1;\\n          if (x >=\\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\\n            x >>= 128;\\n            xe += 1;\\n          } else x >>= 127;\\n          if (xe < -127) return 0; // Underflow\\n          require (xe < 128); // Overflow\\n        }\\n      }\\n\\n      if (re > 0) result <<= uint256 (re);\\n      else if (re < 0) result >>= uint256 (-re);\\n\\n      return result;\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n   * number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return unsigned 128-bit integer number\\n   */\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\n    if (x == 0) return 0;\\n    else {\\n      uint256 xx = x;\\n      uint256 r = 1;\\n      if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\n      if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\n      if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\n      if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\n      if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\n      if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\n      if (xx >= 0x8) { r <<= 1; }\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1;\\n      r = (r + x / r) >> 1; // Seven iterations should be enough\\n      uint256 r1 = x / r;\\n      return uint128 (r < r1 ? r : r1);\\n    }\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {\r\n      \"/Users/clexmond/projects/influence/influence-dapp/contracts/lib/Procedural.sol\": {\r\n        \"Procedural\": \"0xa06f481a2b8cb004ac50701e375ea9022d33Eef3\"\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IPlanets\",\"name\":\"_planets\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_asteroidId\",\"type\":\"uint256\"}],\"name\":\"getAsteroidSeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_asteroidId\",\"type\":\"uint256\"}],\"name\":\"getOrbitalElements\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"orbitalElements\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_seed\",\"type\":\"bytes32\"}],\"name\":\"getOrbitalElementsBySeed\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"orbitalElements\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_asteroidId\",\"type\":\"uint256\"}],\"name\":\"getRadius\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_seed\",\"type\":\"bytes32\"}],\"name\":\"getRadiusBySeed\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_asteroidId\",\"type\":\"uint256\"}],\"name\":\"getSpectralType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_seed\",\"type\":\"bytes32\"}],\"name\":\"getSpectralTypeBySeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"AsteroidFeatures","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f8f39f4699b2fd2cee3782e2d98f6681bb6111c4","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}