{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.0;\r\n\r\n/**\r\n* @dev Interface of the ERC20 standard as defined in the EIP.\r\n*/\r\ninterface IERC20 {\r\n/**\r\n* @dev Returns the amount of tokens in existence.\r\n*/\r\nfunction totalSupply() external view returns (uint256);\r\n\r\n/**\r\n* @dev Returns the amount of tokens owned by `account`.\r\n*/\r\nfunction balanceOf(address account) external view returns (uint256);\r\n\r\n/**\r\n* @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n*\r\n* Returns a boolean value indicating whether the operation succeeded.\r\n*\r\n* Emits a {Transfer} event.\r\n*/\r\nfunction transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n/**\r\n* @dev Returns the remaining number of tokens that `spender` will be\r\n* allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n* zero by default.\r\n*\r\n* This value changes when {approve} or {transferFrom} are called.\r\n*/\r\nfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\n/**\r\n* @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n*\r\n* Returns a boolean value indicating whether the operation succeeded.\r\n*\r\n* IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n* that someone may use both the old and the new allowance by unfortunate\r\n* transaction ordering. One possible solution to mitigate this race\r\n* condition is to first reduce the spender's allowance to 0 and set the\r\n* desired value afterwards:\r\n* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n*\r\n* Emits an {Approval} event.\r\n*/\r\nfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\n/**\r\n* @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n* allowance mechanism. `amount` is then deducted from the caller's\r\n* allowance.\r\n*\r\n* Returns a boolean value indicating whether the operation succeeded.\r\n*\r\n* Emits a {Transfer} event.\r\n*/\r\nfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n/**\r\n* @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n* another (`to`).\r\n*\r\n* Note that `value` may be zero.\r\n*/\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n/**\r\n* @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n* a call to {approve}. `value` is the new allowance.\r\n*/\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n* @dev Provides information about the current execution context, including the\r\n* sender of the transaction and its data. While these are generally available\r\n* via msg.sender and msg.data, they should not be accessed in such a direct\r\n* manner, since when dealing with meta-transactions the account sending and\r\n* paying for execution may not be the actual sender (as far as an application\r\n* is concerned).\r\n*\r\n* This contract is only required for intermediate, library-like contracts.\r\n*/\r\nabstract contract Context {\r\nfunction _msgSender() internal view virtual returns (address) {\r\nreturn msg.sender;\r\n}\r\n\r\nfunction _msgData() internal view virtual returns (bytes calldata) {\r\nthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\nreturn msg.data;\r\n}\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n* @dev Contract module which provides a basic access control mechanism, where\r\n* there is an account (an owner) that can be granted exclusive access to\r\n* specific functions.\r\n*\r\n* By default, the owner account will be the one that deploys the contract. This\r\n* can later be changed with {transferOwnership}.\r\n*\r\n* This module is used through inheritance. It will make available the modifier\r\n* `onlyOwner`, which can be applied to your functions to restrict their use to\r\n* the owner.\r\n*/\r\nabstract contract Ownable is Context {\r\naddress private _owner;\r\n\r\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n/**\r\n* @dev Initializes the contract setting the deployer as the initial owner.\r\n*/\r\nconstructor () {\r\naddress msgSender = _msgSender();\r\n_owner = msgSender;\r\nemit OwnershipTransferred(address(0), msgSender);\r\n}\r\n\r\n/**\r\n* @dev Returns the address of the current owner.\r\n*/\r\nfunction owner() public view virtual returns (address) {\r\nreturn _owner;\r\n}\r\n\r\n/**\r\n* @dev Throws if called by any account other than the owner.\r\n*/\r\nmodifier onlyOwner() {\r\nrequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n_;\r\n}\r\n\r\n/**\r\n* @dev Leaves the contract without owner. It will not be possible to call\r\n* `onlyOwner` functions anymore. Can only be called by the current owner.\r\n*\r\n* NOTE: Renouncing ownership will leave the contract without an owner,\r\n* thereby removing any functionality that is only available to the owner.\r\n*/\r\nfunction renounceOwnership() public virtual onlyOwner {\r\nemit OwnershipTransferred(_owner, address(0));\r\n_owner = address(0);\r\n}\r\n\r\n/**\r\n* @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n* Can only be called by the current owner.\r\n*/\r\nfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\nrequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\nemit OwnershipTransferred(_owner, newOwner);\r\n_owner = newOwner;\r\n}\r\n}\r\n\r\n// File: contracts/token/SupplyChecker.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\ncontract SupplyChecker is Ownable {\r\n\r\nevent TeamWalletAdded(address indexed wallet);\r\nevent TeamWalletRemoved(address indexed wallet);\r\n\r\nIERC20 public token;\r\naddress[] public teamWallets;\r\nmapping(address => bool) public isTeamWallet;\r\n\r\nconstructor(address _token, address _owner) {\r\ntransferOwnership(_owner);\r\ntoken = IERC20(_token);\r\n}\r\n\r\nfunction addTeamWallet(address _wallet) onlyOwner external {\r\nuint256 length = teamWallets.length;\r\nfor (uint256 i = 0; i < length; i++) {\r\nrequire(teamWallets[i] != _wallet, 'wallet already exists');\r\n}\r\nteamWallets.push(_wallet);\r\nisTeamWallet[_wallet] = true;\r\nemit TeamWalletAdded(_wallet);\r\n}\r\n\r\nfunction removeTeamWallet(address _wallet) onlyOwner external {\r\nuint256 length = teamWallets.length;\r\nfor (uint256 i = 0; i < length; i++) {\r\nif (teamWallets[i] == _wallet) {\r\ndelete teamWallets[i];\r\nteamWallets[i] = teamWallets[length - 1];\r\ndelete teamWallets[length - 1];\r\nteamWallets.pop();\r\nisTeamWallet[_wallet] = false;\r\nemit TeamWalletRemoved(_wallet);\r\nbreak;\r\n}\r\n}\r\n}\r\n\r\nfunction getTeamSupply() public view returns(uint256){\r\nuint256 supply = 0;\r\nuint256 length = teamWallets.length;\r\nfor (uint256 i = 0; i < length; i++) {\r\nuint256 walletBalance = token.balanceOf(teamWallets[i]);\r\nsupply += walletBalance;\r\n}\r\nreturn supply;\r\n}\r\n\r\nfunction circulatingSupply() external view returns(uint256){\r\nuint256 teamSupply = getTeamSupply();\r\nuint256 totalSupply = token.totalSupply();\r\nuint256 circulating = totalSupply - teamSupply;\r\nreturn circulating;\r\n}\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"TeamWalletAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"TeamWalletRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"addTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTeamSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTeamWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"removeTeamWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"teamWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SupplyChecker","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000033e07f5055173cf8febede8b21b12d1e2b52320500000000000000000000000063dd75a65ef415bd69f13024d05e5b7ce3044b12","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7df6d8602d005a40d2c4e3a6ac34ffcd1cfb8d7556198eda6a37a95b017394b6"}]}