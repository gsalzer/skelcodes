{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\ninterface IERC20 {\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface CurveRegistry {\r\n    function get_pool_from_lp_token(address arg0)\r\n        external\r\n        view\r\n        returns (address);\r\n\r\n    function get_underlying_coins(address arg0)\r\n        external\r\n        view\r\n        returns (address[8] memory);\r\n\r\n    function get_virtual_price_from_lp_token(address arg0)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n\r\ninterface IOracle {\r\n    function getPriceUsdc(address tokenAddress) external view returns (uint256);\r\n\r\n    function usdcAddress() external view returns (address);\r\n}\r\n\r\ncontract CalculationsCurve {\r\n    address public curveRegistryAddress;\r\n    address public oracleAddress;\r\n    CurveRegistry curveRegistry;\r\n    address zeroAddress = 0x0000000000000000000000000000000000000000;\r\n    IOracle oracle;\r\n\r\n    constructor(address _curveRegistryAddress, address _oracleAddress) {\r\n        curveRegistry = CurveRegistry(_curveRegistryAddress);\r\n        oracleAddress = _oracleAddress;\r\n        oracle = IOracle(_oracleAddress);\r\n    }\r\n\r\n    function getCurvePriceUsdc(address curveLpTokenAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 basePrice = getBasePrice(curveLpTokenAddress);\r\n        uint256 virtualPrice = getVirtualPrice(curveLpTokenAddress);\r\n        IERC20 usdc = IERC20(oracle.usdcAddress());\r\n        uint256 decimals = usdc.decimals();\r\n        uint256 decimalsAdjustment = 18 - decimals;\r\n        uint256 price =\r\n            (virtualPrice * basePrice * (10**decimalsAdjustment)) /\r\n                10**(decimalsAdjustment + 18);\r\n        return price;\r\n    }\r\n\r\n    function getBasePrice(address curveLpTokenAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        address poolAddress =\r\n            curveRegistry.get_pool_from_lp_token(curveLpTokenAddress);\r\n        address firstUnderlyingCoinAddress =\r\n            getFirstUnderlyingCoinFromPool(poolAddress);\r\n        uint256 basePrice = oracle.getPriceUsdc(firstUnderlyingCoinAddress);\r\n        return basePrice;\r\n    }\r\n\r\n    function getVirtualPrice(address curveLpTokenAddress)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            curveRegistry.get_virtual_price_from_lp_token(curveLpTokenAddress);\r\n    }\r\n\r\n    function isCurveLpToken(address tokenAddress) public view returns (bool) {\r\n        address poolAddress =\r\n            curveRegistry.get_pool_from_lp_token(tokenAddress);\r\n        bool tokenHasCurvePool = poolAddress != zeroAddress;\r\n        return tokenHasCurvePool;\r\n    }\r\n\r\n    function getFirstUnderlyingCoinFromPool(address poolAddress)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        address[8] memory coins =\r\n            curveRegistry.get_underlying_coins(poolAddress);\r\n        address firstCoin = coins[0];\r\n        return firstCoin;\r\n    }\r\n\r\n    function getPriceUsdc(address assetAddress) public view returns (uint256) {\r\n        if (isCurveLpToken(assetAddress)) {\r\n            return getCurvePriceUsdc(assetAddress);\r\n        }\r\n        revert();\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_curveRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"curveRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curveLpTokenAddress\",\"type\":\"address\"}],\"name\":\"getBasePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curveLpTokenAddress\",\"type\":\"address\"}],\"name\":\"getCurvePriceUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"getFirstUnderlyingCoinFromPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"getPriceUsdc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"curveLpTokenAddress\",\"type\":\"address\"}],\"name\":\"getVirtualPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"isCurveLpToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CalculationsCurve","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007d86446ddb609ed0f5f8684acf30380a356b2b4c0000000000000000000000009b8b9f6146b29cc32208f42b995e70f0eb2807f3","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6efe412104637a3365661d9a740a50c76d499e088892513ea93184b9573844dd"}]}