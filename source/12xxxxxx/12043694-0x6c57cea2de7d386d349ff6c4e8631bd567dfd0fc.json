{"status":"1","message":"OK","result":[{"SourceCode":"// Sources flattened with hardhat v2.0.11 https://hardhat.org\r\n\r\n// File contracts/interfaces/Realitio.sol\r\n\r\ninterface Realitio {\r\n\r\n    // mapping(bytes32 => Question) public questions;\r\n\r\n    /// @notice Ask a new question without a bounty and return the ID\r\n    /// @dev Template data is only stored in the event logs, but its block number is kept in contract storage.\r\n    /// @dev Calling without the token param will only work if there is no arbitrator-set question fee.\r\n    /// @dev This has the same function signature as askQuestion() in the non-ERC20 version, which is optionally payable.\r\n    /// @param template_id The ID number of the template the question will use\r\n    /// @param question A string containing the parameters that will be passed into the template to make the question\r\n    /// @param arbitrator The arbitration contract that will have the final word on the answer if there is a dispute\r\n    /// @param timeout How long the contract should wait after the answer is changed before finalizing on that answer\r\n    /// @param opening_ts If set, the earliest time it should be possible to answer the question.\r\n    /// @param nonce A user-specified nonce used in the question ID. Change it to repeat a question.\r\n    /// @return The ID of the newly-created question, created deterministically.\r\n    function askQuestion(\r\n        uint256 template_id, string calldata question, address arbitrator, uint32 timeout, uint32 opening_ts, uint256 nonce\r\n    ) external returns (bytes32);\r\n\r\n    /// @notice Report whether the answer to the specified question is finalized\r\n    /// @param question_id The ID of the question\r\n    /// @return Return true if finalized\r\n    function isFinalized(bytes32 question_id) view external returns (bool);\r\n\r\n    /// @notice Return the final answer to the specified question, or revert if there isn't one\r\n    /// @param question_id The ID of the question\r\n    /// @return The answer formatted as a bytes32\r\n    function resultFor(bytes32 question_id) external view returns (bytes32);\r\n\r\n    /// @notice Returns the timestamp at which the question will be/was finalized\r\n    /// @param question_id The ID of the question \r\n    function getFinalizeTS(bytes32 question_id) external view returns (uint32);\r\n\r\n    /// @notice Returns whether the question is pending arbitration\r\n    /// @param question_id The ID of the question \r\n    function isPendingArbitration(bytes32 question_id) external view returns (bool);\r\n\r\n    /// @notice Create a reusable template, which should be a JSON document.\r\n    /// Placeholders should use gettext() syntax, eg %s.\r\n    /// @dev Template data is only stored in the event logs, but its block number is kept in contract storage.\r\n    /// @param content The template content\r\n    /// @return The ID of the newly-created template, which is created sequentially.\r\n    function createTemplate(string calldata content) external returns (uint256);\r\n\r\n    /// @notice Returns the highest bond posted so far for a question\r\n    /// @param question_id The ID of the question \r\n    function getBond(bytes32 question_id) external view returns (uint256);\r\n\r\n    /// @notice Returns the questions's content hash, identifying the question content\r\n    /// @param question_id The ID of the question \r\n    function getContentHash(bytes32 question_id) external view returns (bytes32);\r\n}\r\n\r\n\r\n// File contracts/DaoModule.sol\r\n\r\n// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.8.0;\r\n\r\ncontract Enum {\r\n    enum Operation {\r\n        Call, DelegateCall\r\n    }\r\n}\r\n\r\ninterface Executor {\r\n    /// @dev Allows a Module to execute a transaction.\r\n    /// @param to Destination address of module transaction.\r\n    /// @param value Ether value of module transaction.\r\n    /// @param data Data payload of module transaction.\r\n    /// @param operation Operation type of module transaction.\r\n    function execTransactionFromModule(address to, uint256 value, bytes calldata data, Enum.Operation operation)\r\n        external\r\n        returns (bool success);\r\n}\r\n\r\ncontract DaoModule {\r\n\r\n    bytes32 public constant INVALIDATED = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    bytes32 public constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\r\n    // keccak256(\r\n    //     \"EIP712Domain(uint256 chainId,address verifyingContract)\"\r\n    // );\r\n\r\n    bytes32 public constant TRANSACTION_TYPEHASH = 0x72e9670a7ee00f5fbf1049b8c38e3f22fab7e9b85029e85cf9412f17fdd5c2ad;\r\n    // keccak256(\r\n    //     \"Transaction(address to,uint256 value,bytes data,uint8 operation,uint256 nonce)\"\r\n    // );\r\n\r\n    event ProposalQuestionCreated(\r\n        bytes32 indexed questionId,\r\n        string indexed proposalId\r\n    );\r\n\r\n    Executor public immutable executor;\r\n    Realitio public immutable oracle;\r\n    uint256 public template;\r\n    uint32 public questionTimeout;\r\n    uint32 public questionCooldown;\r\n    uint32 public answerExpiration;\r\n    address public questionArbitrator;\r\n    uint256 public minimumBond;\r\n    // Mapping of question hash to question id. Special case: INVALIDATED for question hashes that have been invalidated\r\n    mapping(bytes32 => bytes32) public questionIds;\r\n    // Mapping of questionHash to transactionHash to execution state\r\n    mapping(bytes32 => mapping(bytes32 => bool)) public executedProposalTransactions;\r\n\r\n    /// @param _executor Address of the executor (e.g. a Safe)\r\n    /// @param _oracle Address of the oracle (e.g. Realitio)\r\n    /// @param timeout Timeout in seconds that should be required for the oracle\r\n    /// @param cooldown Cooldown in seconds that should be required after a oracle provided answer\r\n    /// @param expiration Duration that a positive answer of the oracle is valid in seconds (or 0 if valid forever)\r\n    /// @param bond Minimum bond that is required for an answer to be accepted\r\n    /// @param templateId ID of the template that should be used for proposal questions (see https://github.com/realitio/realitio-dapp#structuring-and-fetching-information)\r\n    /// @notice There need to be at least 60 seconds between end of cooldown and expiration\r\n    constructor(Executor _executor, Realitio _oracle, uint32 timeout, uint32 cooldown, uint32 expiration, uint256 bond, uint256 templateId) {\r\n        require(timeout > 0, \"Timeout has to be greater 0\");\r\n        require(expiration == 0 || expiration - cooldown >= 60 , \"There need to be at least 60s between end of cooldown and expiration\");\r\n        executor = _executor;\r\n        oracle = _oracle;\r\n        answerExpiration = expiration;\r\n        questionTimeout = timeout;\r\n        questionCooldown = cooldown;\r\n        questionArbitrator = address(_executor);\r\n        minimumBond = bond;\r\n        template = templateId;\r\n    }\r\n\r\n    modifier executorOnly() {\r\n        require(msg.sender == address(executor), \"Not authorized\");\r\n        _;\r\n    }\r\n\r\n    /// @notice This can only be called by the executor\r\n    function setQuestionTimeout(uint32 timeout)\r\n        public\r\n        executorOnly()\r\n    {\r\n        require(timeout > 0, \"Timeout has to be greater 0\");\r\n        questionTimeout = timeout;\r\n    }\r\n\r\n    /// @dev Sets the cooldown before an answer is usable.\r\n    /// @param cooldown Cooldown in seconds that should be required after a oracle provided answer\r\n    /// @notice This can only be called by the executor\r\n    /// @notice There need to be at least 60 seconds between end of cooldown and expiration\r\n    function setQuestionCooldown(uint32 cooldown)\r\n        public\r\n        executorOnly()\r\n    {\r\n        uint32 expiration = answerExpiration;\r\n        require(expiration == 0 || expiration - cooldown >= 60 , \"There need to be at least 60s between end of cooldown and expiration\");\r\n        questionCooldown = cooldown;\r\n    }\r\n\r\n    /// @dev Sets the duration for which a positive answer is valid.\r\n    /// @param expiration Duration that a positive answer of the oracle is valid in seconds (or 0 if valid forever)\r\n    /// @notice A proposal with an expired answer is the same as a proposal that has been marked invalid\r\n    /// @notice There need to be at least 60 seconds between end of cooldown and expiration\r\n    /// @notice This can only be called by the executor\r\n    function setAnswerExpiration(uint32 expiration)\r\n        public\r\n        executorOnly()\r\n    {\r\n        require(expiration == 0 || expiration - questionCooldown >= 60 , \"There need to be at least 60s between end of cooldown and expiration\");\r\n        answerExpiration = expiration;\r\n    }\r\n\r\n    /// @dev Sets the question arbitrator that will be used for future questions.\r\n    /// @param arbitrator Address of the arbitrator\r\n    /// @notice This can only be called by the executor\r\n    function setArbitrator(address arbitrator)\r\n        public\r\n        executorOnly()\r\n    {\r\n        questionArbitrator = arbitrator;\r\n    }\r\n\r\n    /// @dev Sets the minimum bond that is required for an answer to be accepted.\r\n    /// @param bond Minimum bond that is required for an answer to be accepted\r\n    /// @notice This can only be called by the executor\r\n    function setMinimumBond(uint256 bond)\r\n        public\r\n        executorOnly()\r\n    {\r\n        minimumBond = bond;\r\n    }\r\n\r\n    /// @dev Sets the template that should be used for future questions.\r\n    /// @param templateId ID of the template that should be used for proposal questions\r\n    /// @notice Check https://github.com/realitio/realitio-dapp#structuring-and-fetching-information for more information\r\n    /// @notice This can only be called by the executor\r\n    function setTemplate(uint256 templateId)\r\n        public\r\n        executorOnly()\r\n    {\r\n        template = templateId;\r\n    }\r\n\r\n    /// @dev Function to add a proposal that should be considered for execution\r\n    /// @param proposalId Id that should identify the proposal uniquely\r\n    /// @param txHashes EIP-712 hashes of the transactions that should be executed\r\n    /// @notice The nonce used for the question by this function is always 0\r\n    function addProposal(string memory proposalId, bytes32[] memory txHashes) public {\r\n        addProposalWithNonce(proposalId, txHashes, 0);\r\n    }\r\n\r\n    /// @dev Function to add a proposal that should be considered for execution\r\n    /// @param proposalId Id that should identify the proposal uniquely\r\n    /// @param txHashes EIP-712 hashes of the transactions that should be executed\r\n    /// @param nonce Nonce that should be used when asking the question on the oracle\r\n    function addProposalWithNonce(string memory proposalId, bytes32[] memory txHashes, uint256 nonce) public {\r\n        // We load some storage variables into memory to save gas\r\n        uint256 templateId = template;\r\n        uint32 timeout = questionTimeout;\r\n        address arbitrator = questionArbitrator;\r\n        // We generate the question string used for the oracle\r\n        string memory question = buildQuestion(proposalId, txHashes);\r\n        bytes32 questionHash = keccak256(bytes(question));\r\n        if (nonce > 0) {\r\n            // Previous nonce must have been invalidated by the oracle.\r\n            // However, if the proposal was internally invalidated, it should not be possible to ask it again.\r\n            bytes32 currentQuestionId = questionIds[questionHash];\r\n            require(currentQuestionId != INVALIDATED, \"This proposal has been marked as invalid\");\r\n            require(oracle.resultFor(currentQuestionId) == INVALIDATED, \"Previous proposal was not invalidated\");\r\n        } else {\r\n            require(questionIds[questionHash] == bytes32(0), \"Proposal has already been submitted\");\r\n        }\r\n        bytes32 expectedQuestionId = getQuestionId(\r\n            templateId, question, arbitrator, timeout, 0, nonce\r\n        );\r\n        // Set the question hash for this quesion id\r\n        questionIds[questionHash] = expectedQuestionId;\r\n        // Ask the question with a starting time of 0, so that it can be immediately answered\r\n        bytes32 questionId = oracle.askQuestion(templateId, question, arbitrator, timeout, 0, nonce);\r\n        require(expectedQuestionId == questionId, \"Unexpected question id\");\r\n        emit ProposalQuestionCreated(questionId, proposalId);\r\n    }\r\n\r\n    /// @dev Marks a proposal as invalid, preventing execution of the connected transactions\r\n    /// @param proposalId Id that should identify the proposal uniquely\r\n    /// @param txHashes EIP-712 hashes of the transactions that should be executed\r\n    /// @notice This can only be called by the executor\r\n    function markProposalAsInvalid(string memory proposalId, bytes32[] memory txHashes)\r\n        public\r\n        // Executor only is checked in markProposalAsInvalidByHash(bytes32)\r\n    {\r\n        string memory question = buildQuestion(proposalId, txHashes);\r\n        bytes32 questionHash = keccak256(bytes(question));\r\n        markProposalAsInvalidByHash(questionHash);\r\n    }\r\n\r\n    /// @dev Marks a question hash as invalid, preventing execution of the connected transactions\r\n    /// @param questionHash Question hash calculated based on the proposal id and txHashes\r\n    /// @notice This can only be called by the executor\r\n    function markProposalAsInvalidByHash(bytes32 questionHash)\r\n        public\r\n        executorOnly()\r\n    {\r\n        questionIds[questionHash] = INVALIDATED;\r\n    }\r\n\r\n    /// @dev Marks a proposal with an expired answer as invalid, preventing execution of the connected transactions\r\n    /// @param questionHash Question hash calculated based on the proposal id and txHashes\r\n    function markProposalWithExpiredAnswerAsInvalid(bytes32 questionHash)\r\n        public\r\n    {\r\n        uint32 expirationDuration = answerExpiration;\r\n        require(expirationDuration > 0, \"Answers are valid forever\");\r\n        bytes32 questionId = questionIds[questionHash];\r\n        require(questionId != INVALIDATED, \"Proposal is already invalidated\");\r\n        require(questionId != bytes32(0), \"No question id set for provided proposal\");\r\n        require(oracle.resultFor(questionId) == bytes32(uint256(1)), \"Only positive answers can expire\");\r\n        uint32 finalizeTs = oracle.getFinalizeTS(questionId);\r\n        require(finalizeTs + uint256(expirationDuration) < block.timestamp, \"Answer has not expired yet\");\r\n        questionIds[questionHash] = INVALIDATED;\r\n    }\r\n\r\n    /// @dev Executes the transactions of a proposal via the executor if accepted\r\n    /// @param proposalId Id that should identify the proposal uniquely\r\n    /// @param txHashes EIP-712 hashes of the transactions that should be executed\r\n    /// @param to Target of the transaction that should be executed\r\n    /// @param value Wei value of the transaction that should be executed\r\n    /// @param data Data of the transaction that should be executed\r\n    /// @param operation Operation (Call or Delegatecall) of the transaction that should be executed\r\n    /// @notice The txIndex used by this function is always 0\r\n    function executeProposal(string memory proposalId, bytes32[] memory txHashes, address to, uint256 value, bytes memory data, Enum.Operation operation) public {\r\n        executeProposalWithIndex(proposalId, txHashes, to, value, data, operation, 0);\r\n    }\r\n\r\n    /// @dev Executes the transactions of a proposal via the executor if accepted\r\n    /// @param proposalId Id that should identify the proposal uniquely\r\n    /// @param txHashes EIP-712 hashes of the transactions that should be executed\r\n    /// @param to Target of the transaction that should be executed\r\n    /// @param value Wei value of the transaction that should be executed\r\n    /// @param data Data of the transaction that should be executed\r\n    /// @param operation Operation (Call or Delegatecall) of the transaction that should be executed\r\n    /// @param txIndex Index of the transaction hash in txHashes. This is used as the nonce for the transaction, to make the tx hash unique\r\n    function executeProposalWithIndex(string memory proposalId, bytes32[] memory txHashes, address to, uint256 value, bytes memory data, Enum.Operation operation, uint256 txIndex) public {\r\n        // We use the hash of the question to check the execution state, as the other parameters might change, but the question not\r\n        bytes32 questionHash = keccak256(bytes(buildQuestion(proposalId, txHashes)));\r\n        // Lookup question id for this proposal\r\n        bytes32 questionId = questionIds[questionHash];\r\n        // Question hash needs to set to be eligible for execution\r\n        require(questionId != bytes32(0), \"No question id set for provided proposal\");\r\n        require(questionId != INVALIDATED, \"Proposal has been invalidated\");\r\n\r\n        bytes32 txHash = getTransactionHash(to, value, data, operation, txIndex);\r\n        require(txHashes[txIndex] == txHash, \"Unexpected transaction hash\");\r\n\r\n        // Check that the result of the question is 1 (true)\r\n        require(oracle.resultFor(questionId) == bytes32(uint256(1)), \"Transaction was not approved\");\r\n        uint256 minBond = minimumBond;\r\n        require(minBond == 0 || minBond <= oracle.getBond(questionId), \"Bond on question not high enough\");\r\n        uint32 finalizeTs = oracle.getFinalizeTS(questionId);\r\n        // The answer is valid in the time after the cooldown and before the expiration time (if set).\r\n        require(finalizeTs + uint256(questionCooldown) < block.timestamp, \"Wait for additional cooldown\");\r\n        uint32 expiration = answerExpiration;\r\n        require(expiration == 0 || finalizeTs + uint256(expiration) >= block.timestamp, \"Answer has expired\");\r\n        // Check this is either the first transaction in the list or that the previous question was already approved\r\n        require(txIndex == 0 || executedProposalTransactions[questionHash][txHashes[txIndex - 1]], \"Previous transaction not executed yet\");\r\n        // Check that this question was not executed yet\r\n        require(!executedProposalTransactions[questionHash][txHash], \"Cannot execute transaction again\");\r\n        // Mark transaction as executed\r\n        executedProposalTransactions[questionHash][txHash] = true;\r\n        // Execute the transaction via the executor.\r\n        require(executor.execTransactionFromModule(to, value, data, operation), \"Module transaction failed\");\r\n    }\r\n\r\n    /// @dev Build the question by combining the proposalId and the hex string of the hash of the txHashes\r\n    /// @param proposalId Id of the proposal that proposes to execute the transactions represented by the txHashes\r\n    /// @param txHashes EIP-712 Hashes of the transactions that should be executed\r\n    function buildQuestion(string memory proposalId, bytes32[] memory txHashes) public pure returns(string memory) {\r\n        string memory txsHash = bytes32ToAsciiString(keccak256(abi.encodePacked(txHashes)));\r\n        return string(abi.encodePacked(proposalId, bytes3(0xe2909f), txsHash));\r\n    }\r\n\r\n    /// @dev Generate the question id.\r\n    /// @notice It is required that this is the same as for the oracle implementation used.\r\n    function getQuestionId(uint256 templateId, string memory question, address arbitrator, uint32 timeout, uint32 openingTs, uint256 nonce) public view returns(bytes32) {\r\n        bytes32 contentHash = keccak256(abi.encodePacked(templateId, openingTs, question));\r\n        return keccak256(abi.encodePacked(contentHash, arbitrator, timeout, this, nonce));\r\n    }\r\n\r\n    /// @dev Returns the chain id used by this contract.\r\n    function getChainId() public view returns (uint256) {\r\n        uint256 id;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n        return id;\r\n    }\r\n\r\n    /// @dev Generates the data for the module transaction hash (required for signing)\r\n    function generateTransactionHashData(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation,\r\n        uint256 nonce\r\n    ) public view returns(bytes memory) {\r\n        uint256 chainId = getChainId();\r\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, chainId, this));\r\n        bytes32 transactionHash = keccak256(\r\n            abi.encode(TRANSACTION_TYPEHASH, to, value, keccak256(data), operation, nonce)\r\n        );\r\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator, transactionHash);\r\n    }\r\n\r\n    function getTransactionHash(address to, uint256 value, bytes memory data, Enum.Operation operation, uint256 nonce) public view returns(bytes32) {\r\n        return keccak256(generateTransactionHashData(to, value, data, operation, nonce));\r\n    }\r\n\r\n    function bytes32ToAsciiString(bytes32 _bytes) internal pure returns (string memory) {\r\n        bytes memory s = new bytes(64);\r\n        for (uint256 i = 0; i < 32; i++) {\r\n            uint8 b = uint8(bytes1(_bytes << i * 8));\r\n            uint8 hi = uint8(b) / 16;\r\n            uint8 lo = uint8(b) % 16;\r\n            s[2 * i] = char(hi);\r\n            s[2 * i + 1] = char(lo);\r\n        }\r\n        return string(s);\r\n    }\r\n\r\n    function char(uint8 b) internal pure returns (bytes1 c) {\r\n        if (b < 10) return bytes1(b + 0x30);\r\n        else return bytes1(b + 0x57);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract Executor\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"contract Realitio\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timeout\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cooldown\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"proposalId\",\"type\":\"string\"}],\"name\":\"ProposalQuestionCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVALIDATED\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSACTION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"proposalId\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"txHashes\",\"type\":\"bytes32[]\"}],\"name\":\"addProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"proposalId\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"txHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"addProposalWithNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"answerExpiration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"proposalId\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"txHashes\",\"type\":\"bytes32[]\"}],\"name\":\"buildQuestion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"proposalId\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"txHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"proposalId\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"txHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"}],\"name\":\"executeProposalWithIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"executedProposalTransactions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"contract Executor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"generateTransactionHashData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"question\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"timeout\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"openingTs\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getQuestionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"enum Enum.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getTransactionHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"proposalId\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"txHashes\",\"type\":\"bytes32[]\"}],\"name\":\"markProposalAsInvalid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionHash\",\"type\":\"bytes32\"}],\"name\":\"markProposalAsInvalidByHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionHash\",\"type\":\"bytes32\"}],\"name\":\"markProposalWithExpiredAnswerAsInvalid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract Realitio\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionArbitrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionCooldown\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"questionIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionTimeout\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"}],\"name\":\"setAnswerExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"arbitrator\",\"type\":\"address\"}],\"name\":\"setArbitrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"}],\"name\":\"setMinimumBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"cooldown\",\"type\":\"uint32\"}],\"name\":\"setQuestionCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"timeout\",\"type\":\"uint32\"}],\"name\":\"setQuestionTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"}],\"name\":\"setTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"template\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DaoModule","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000a147ddf0817ade664eb9cb343d96a21ed857d110000000000000000000000000e414d014a77971f4eaa22ab58e6d84d16ea838e000000000000000000000000000000000000000000000000000000000002a30000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000000093a800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002d","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0f71255699ac7a86df1b6e32d1bbdf9c3c1aec62b29fb5beb6e2c9964f8c2c9c"}]}