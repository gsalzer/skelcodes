{"status":"1","message":"OK","result":[{"SourceCode":"// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/weth/IWETH.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\ninterface IWETH is IERC20 {\r\n    function deposit() external payable;\r\n    function withdraw(uint wad) external;\r\n}\r\n\r\n// File: contracts/interfaces/uniswap-v2/IUniswapV2Router01.sol\r\n\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: contracts/interfaces/uniswap-v2/IUniswapV2Router02.sol\r\n\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/interfaces/kaya/ISmartPool.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\ninterface ISmartPool{\r\n\r\n    function joinPool(uint256 amount) external;\r\n\r\n    function exitPool(uint256 amount) external;\r\n\r\n    function transferCash(address to,uint256 amount)external;\r\n\r\n    function token()external view returns(address);\r\n\r\n    function assets()external view returns(uint256);\r\n}\r\n\r\n// File: contracts/interfaces/kaya/IController.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\ninterface IController {\r\n\r\n    function invest(address _vault, uint256 _amount) external;\r\n\r\n    function exec(\r\n        address _strategy,\r\n        bool _useToken,\r\n        uint256 _useAmount,\r\n        string memory _signature,\r\n        bytes memory _data) external;\r\n\r\n    function harvest(uint256 _amount) external;\r\n\r\n    function harvestAll(address _vault)external;\r\n\r\n    function harvestOfUnderlying(address to,uint256 _scale)external;\r\n\r\n    function extractableUnderlyingNumber(uint256 _scale)external view returns(uint256[] memory);\r\n\r\n    function assets() external view returns (uint256);\r\n\r\n    function vaults(address _strategy) external view returns(address);\r\n\r\n    function strategies(address _vault) external view returns(address);\r\n\r\n    function inRegister(address _contract) external view returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/uniswap-v2/IUniswapV2Pair.sol\r\n\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: contracts/libraries/UniswapV2ExpandLibrary.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\n\r\nlibrary UniswapV2ExpandLibrary{\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    address constant internal factory=address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\r\n\r\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0,address token1) {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n    function pairFor(address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(uint(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                factory,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\r\n            ))));\r\n    }\r\n\r\n    function getReserves(address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\r\n        (address token0,) = sortTokens(tokenA, tokenB);\r\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(tokenA, tokenB)).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\r\n    }\r\n\r\n    function quote(uint amountA,uint reserveA, uint reserveB) internal pure returns (uint amountB) {\r\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\r\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    function getAmountIn(address inputToken,address outputToken,uint256 amountOut)internal view returns(uint256 amountIn){\r\n        (uint reserveIn, uint reserveOut) = getReserves(inputToken, outputToken);\r\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    function getAmountOut(address inputToken,address outputToken,uint256 amountIn)internal view returns(uint256 amountOut){\r\n        (uint reserveIn, uint reserveOut) = getReserves(inputToken, outputToken);\r\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\r\n        uint amountInWithFee = amountIn.mul(997);\r\n        uint numerator = amountInWithFee.mul(reserveOut);\r\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    function getAmountsOut(uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint i; i < path.length - 1; i++) {\r\n            amounts[i + 1] = getAmountOut(path[i], path[i + 1],amounts[i]);\r\n        }\r\n    }\r\n\r\n    function getAmountsIn(uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint i = path.length - 1; i > 0; i--) {\r\n            amounts[i - 1] = getAmountIn(path[i - 1], path[i],amounts[i]);\r\n        }\r\n    }\r\n\r\n    function calcLiquidityToTokens(address tokenA,address tokenB,uint256 liquidity) internal view returns (uint256 amountA, uint256 amountB) {\r\n        if(liquidity==0){\r\n            return (0,0);\r\n        }\r\n        address pair=pairFor(tokenA,tokenB);\r\n        uint256 balanceA = IERC20(tokenA).balanceOf(address(pair));\r\n        uint256 balanceB = IERC20(tokenB).balanceOf(address(pair));\r\n        uint256 totalSupply=IERC20(pair).totalSupply();\r\n        amountA = liquidity.mul(balanceA).div(totalSupply);\r\n        amountB = liquidity.mul(balanceB).div(totalSupply);\r\n        return(amountA,amountB);\r\n    }\r\n\r\n    function tokens(address _pair)internal view returns(address,address){\r\n        IUniswapV2Pair pair=IUniswapV2Pair(_pair);\r\n        return (pair.token0(),pair.token1());\r\n    }\r\n\r\n    function liquidityBalance(address _pair,address _owner)internal view returns(uint256){\r\n        return IUniswapV2Pair(_pair).balanceOf(_owner);\r\n    }\r\n\r\n    function calcLiquiditySwapToToken(address _pair,address _target,address bridgeToken,uint256 liquidity) internal view returns (uint256) {\r\n        if(liquidity==0){\r\n            return 0;\r\n        }\r\n        IUniswapV2Pair pair=IUniswapV2Pair(_pair);\r\n        (address tokenA,address tokenB)=(pair.token0(),pair.token1());\r\n        (uint256 amountA,uint256 amountB)=calcLiquidityToTokens(tokenA,tokenB,liquidity);\r\n        if(tokenA!=bridgeToken&&tokenA!=_target){\r\n            amountA=getAmountOut(tokenA,bridgeToken,amountA);\r\n        }\r\n        if(tokenB!=bridgeToken&&tokenB!=_target){\r\n            amountB=getAmountOut(tokenB,bridgeToken,amountB);\r\n        }\r\n        uint256 tokenAOut=getAmountOut(bridgeToken,_target,amountA);\r\n        uint256 tokenBOut=getAmountOut(bridgeToken,_target,amountB);\r\n        return tokenAOut.add(tokenBOut);\r\n    }\r\n\r\n    function swap(address to,address inputToken,address outputToken,uint256 amountIn,uint256 amountOut) internal{\r\n        IUniswapV2Pair pair=IUniswapV2Pair(pairFor(inputToken,outputToken));\r\n        IERC20(inputToken).safeTransfer(address(pair), amountIn);\r\n        (address token0,) = sortTokens(inputToken, outputToken);\r\n        (uint amount0Out, uint amount1Out) = inputToken == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\r\n        pair.swap(amount0Out,amount1Out, to, new bytes(0));\r\n    }\r\n\r\n    function swapExactIn(address to,address inputToken,address outputToken, uint256 amountIn) internal returns(uint256 amountOut){\r\n        amountOut=amountIn;\r\n        if (amountIn > 0 && inputToken != outputToken) {\r\n            amountOut = getAmountOut(inputToken, outputToken, amountIn);\r\n            swap(to, inputToken, outputToken, amountIn, amountOut);\r\n        }\r\n    }\r\n\r\n    function swapExactOut(address to,address inputToken,address outputToken,uint256 amountOut) internal returns(uint256 amountIn){\r\n        amountIn=amountOut;\r\n        if (amountOut > 0 && inputToken != outputToken) {\r\n            amountIn = getAmountIn(inputToken, outputToken, amountOut);\r\n            swap(to, inputToken, outputToken, amountIn, amountOut);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/libraries/MathExpandLibrary.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n// a library for performing various math operations\r\n\r\nlibrary MathExpandLibrary {\r\n\r\n    uint256 internal constant BONE = 10**18;\r\n\r\n    // Add two numbers together checking for overflows\r\n    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"ERR_ADD_OVERFLOW\");\r\n        return c;\r\n    }\r\n\r\n    // subtract two numbers and return diffecerence when it underflows\r\n    function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\r\n        if (a >= b) {\r\n            return (a - b, false);\r\n        } else {\r\n            return (b - a, true);\r\n        }\r\n    }\r\n\r\n    // Subtract two numbers checking for underflows\r\n    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        (uint256 c, bool flag) = bsubSign(a, b);\r\n        require(!flag, \"ERR_SUB_UNDERFLOW\");\r\n        return c;\r\n    }\r\n\r\n    // Multiply two 18 decimals numbers\r\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c0 = a * b;\r\n        require(a == 0 || c0 / a == b, \"ERR_MUL_OVERFLOW\");\r\n        uint256 c1 = c0 + (BONE / 2);\r\n        require(c1 >= c0, \"ERR_MUL_OVERFLOW\");\r\n        uint256 c2 = c1 / BONE;\r\n        return c2;\r\n    }\r\n\r\n    // Divide two 18 decimals numbers\r\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"ERR_DIV_ZERO\");\r\n        uint256 c0 = a * BONE;\r\n        require(a == 0 || c0 / a == BONE, \"ERR_DIV_INTERNAL\"); // bmul overflow\r\n        uint256 c1 = c0 + (b / 2);\r\n        require(c1 >= c0, \"ERR_DIV_INTERNAL\"); //  badd require\r\n        uint256 c2 = c1 / b;\r\n        return c2;\r\n    }\r\n\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/EnumerableExpandSet.sol\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\r\n * (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableExpandSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping (bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\r\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\r\n\r\n            bytes32 lastvalue = set._values[lastIndex];\r\n\r\n            // Move the last value to the index where the value to delete is\r\n            set._values[toDeleteIndex] = lastvalue;\r\n            // Update the index for the moved value\r\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\r\n        return set._values[index];\r\n    }\r\n\r\n\r\n    function _index(Set storage set, bytes32 value) private view returns (uint256) {\r\n        return set._indexes[value];\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint256(_at(set._inner, index)));\r\n    }\r\n\r\n    function indexs(AddressSet storage set, address value) internal view returns (uint256) {\r\n        return _index(set._inner, bytes32(uint256(value)));\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n   /**\r\n    * @dev Returns the value stored at position `index` in the set. O(1).\r\n    *\r\n    * Note that there are no guarantees on the ordering of values inside the\r\n    * array, and it may change when more values are added or removed.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `index` must be strictly less than {length}.\r\n    */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    function indexs(UintSet storage set, uint256 value) internal view returns (uint256) {\r\n        return _index(set._inner, bytes32(value));\r\n    }\r\n}\r\n\r\n// File: contracts/libraries/ERC20Helper.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\nlibrary ERC20Helper{\r\n\r\n    using SafeERC20 for IERC20;\r\n\r\n    function safeApprove(address _token,address _to,uint256 _amount)internal{\r\n        IERC20 token=IERC20(_token);\r\n        uint256 allowance= token.allowance(address(this),_to);\r\n        if(allowance<_amount){\r\n            if(allowance>0){\r\n                token.safeApprove(_to,0);\r\n            }\r\n            token.safeApprove(_to,_amount);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/storage/GovIdentityStorage.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\nlibrary GovIdentityStorage {\r\n\r\n  bytes32 public constant govSlot = keccak256(\"GovIdentityStorage.storage.location\");\r\n\r\n  struct Identity{\r\n    address governance;\r\n    address strategist;\r\n    address rewards;\r\n  }\r\n\r\n  function load() internal pure returns (Identity storage gov) {\r\n    bytes32 loc = govSlot;\r\n    assembly {\r\n      gov_slot := loc\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/GovIdentity.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\ncontract GovIdentity {\r\n\r\n    constructor() public {\r\n        _build();\r\n    }\r\n\r\n    function _build() internal{\r\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\r\n        identity.governance = msg.sender;\r\n        identity.strategist = msg.sender;\r\n        identity.rewards = msg.sender;\r\n    }\r\n\r\n    modifier onlyStrategist() {\r\n        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\r\n        require(msg.sender == identity.strategist, \"GovIdentity.onlyStrategist: !strategist\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\r\n        require(msg.sender == identity.governance, \"GovIdentity.onlyGovernance: !governance\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyStrategistOrGovernance() {\r\n        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\r\n        require(msg.sender == identity.strategist || msg.sender == identity.governance, \"GovIdentity.onlyGovernance: !governance and !strategist\");\r\n        _;\r\n    }\r\n\r\n    function setRewards(address _rewards) public onlyGovernance{\r\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\r\n        identity.rewards = _rewards;\r\n    }\r\n\r\n    function setStrategist(address _strategist) public onlyGovernance{\r\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\r\n        identity.strategist = _strategist;\r\n    }\r\n\r\n    function setGovernance(address _governance) public onlyGovernance{\r\n        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\r\n        identity.governance = _governance;\r\n    }\r\n\r\n    function getRewards() public pure returns(address){\r\n        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\r\n        return identity.rewards ;\r\n    }\r\n\r\n    function getStrategist() public pure returns(address){\r\n        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\r\n        return identity.strategist;\r\n    }\r\n\r\n    function getGovernance() public pure returns(address){\r\n        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\r\n        return identity.governance;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/strategies/UniDynamicLiquidityStrategy.sol\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\ncontract UniDynamicLiquidityStrategy is GovIdentity {\r\n\r\n    using SafeERC20 for IERC20;\r\n    using MathExpandLibrary for uint256;\r\n    using SafeMath for uint256;\r\n    using EnumerableExpandSet for EnumerableExpandSet.AddressSet;\r\n\r\n    IController public controller;\r\n    IUniswapV2Router02 constant public route=IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address constant public WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n    EnumerableExpandSet.AddressSet private _tokens;\r\n    EnumerableExpandSet.AddressSet private _pools;\r\n\r\n    event AddLiquidity(address indexed from,address indexed pool,uint256 liquidity);\r\n    event RemoveLiquidity(address indexed from,address indexed pool,uint256 liquidity);\r\n\r\n    constructor(address _controller)\r\n    public {\r\n        controller = IController(_controller);\r\n    }\r\n\r\n    modifier onlyAuthorize() {\r\n        require(msg.sender == getGovernance()\r\n        ||msg.sender==getStrategist()\r\n        ||msg.sender==address(controller), \"Strategy.onlyAuthorize: !authorize\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {\r\n\r\n    }\r\n\r\n    function init()external{\r\n\r\n    }\r\n\r\n    function _vaultInfo() internal view returns (address, address){\r\n        address _vault = controller.vaults(address(this));\r\n        address _token = ISmartPool(_vault).token();\r\n        return (_vault, _token);\r\n    }\r\n\r\n    function pools()public view returns(address[] memory ps){\r\n        uint256 length=_pools.length();\r\n        ps=new address[](length);\r\n        for(uint256 i=0;i<length;i++){\r\n            ps[i]=_pools.at(i);\r\n        }\r\n    }\r\n\r\n    function _updatePools(address _pool)internal{\r\n        bool isNeedPool=IERC20(_pool).balanceOf(address(this))>0?true:false;\r\n        if(!_pools.contains(_pool)&&isNeedPool){\r\n            _pools.add(_pool);\r\n        }else if(_pools.contains(_pool)&&!isNeedPool){\r\n            _pools.remove(_pool);\r\n        }\r\n    }\r\n\r\n    function setUnderlyingTokens(address[] memory _ts)public onlyAuthorize{\r\n        for(uint256 i=0;i<_ts.length;i++){\r\n            if(!_tokens.contains(_ts[i])){\r\n                _tokens.add(_ts[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function removeUnderlyingTokens(address[] memory _ts)public onlyAuthorize{\r\n        for(uint256 i=0;i<_ts.length;i++){\r\n            if(_tokens.contains(_ts[i])){\r\n                _tokens.remove(_ts[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function addLiquidity(address _pool,uint256 liquidityExpect,uint256 amount0,uint256 amount1)public onlyAuthorize{\r\n        require(amount0>0&&amount1>0,'Strategy.addLiquidity: Must be greater than 0 amount');\r\n        (address token0,address token1)=UniswapV2ExpandLibrary.tokens(_pool);\r\n        ERC20Helper.safeApprove(token0,address(route),amount0);\r\n        ERC20Helper.safeApprove(token1,address(route),amount1);\r\n        (,,uint256 liquidityActual)=route.addLiquidity(token0,token1,amount0,amount1,0,0,address(this),block.timestamp);\r\n        require(liquidityActual>=liquidityExpect,'Strategy.addLiquidity: Actual quantity is less than the expected quantity');\r\n        _updatePools(_pool);\r\n        emit AddLiquidity(msg.sender,_pool,liquidityActual);\r\n    }\r\n\r\n    function removeLiquidity(address _pool,uint256 liquidity)public onlyAuthorize{\r\n        require(liquidity>0,'Strategy.removeLiquidity: Must be greater than 0 liquidity');\r\n        _removeLiquidity(_pool,liquidity,address(this));\r\n        emit RemoveLiquidity(msg.sender,_pool,liquidity);\r\n    }\r\n\r\n    function _removeLiquidity(address _pool,uint256 liquidity,address _to)internal returns(uint256 amount0,uint256 amount1){\r\n        if(liquidity>0){\r\n            ERC20Helper.safeApprove(_pool,address(route),liquidity);\r\n            (address token0,address token1)=UniswapV2ExpandLibrary.tokens(_pool);\r\n            (amount0,amount1)=UniswapV2ExpandLibrary.calcLiquidityToTokens(token0,token1,liquidity);\r\n            (amount0,amount1)=route.removeLiquidity(token0,token1,liquidity,amount0,amount1,_to,block.timestamp);\r\n            _updatePools(_pool);\r\n        }\r\n    }\r\n\r\n    function swapExactInByUni(address inputToken,address outputToken, uint256 amountIn)public onlyAuthorize returns(uint256 amountOut){\r\n        if(inputToken==WETH||outputToken==WETH){\r\n            return UniswapV2ExpandLibrary.swapExactIn(address(this),inputToken,outputToken,amountIn);\r\n        }else{\r\n            uint256 wethOut=UniswapV2ExpandLibrary.swapExactIn(address(this),inputToken,WETH,amountIn);\r\n            return UniswapV2ExpandLibrary.swapExactIn(address(this),WETH,outputToken,wethOut);\r\n        }\r\n    }\r\n\r\n    function swapExactOutByUni(address inputToken,address outputToken, uint256 amountOut)public onlyAuthorize returns(uint256 amountIn){\r\n        if(inputToken==WETH||outputToken==WETH){\r\n            return UniswapV2ExpandLibrary.swapExactOut(address(this),inputToken,outputToken,amountOut);\r\n        }else{\r\n            uint256 wethIn=UniswapV2ExpandLibrary.getAmountIn(WETH,outputToken,amountOut);\r\n            if(IERC20(WETH).balanceOf(address(this))<wethIn){\r\n                UniswapV2ExpandLibrary.swapExactOut(address(this),inputToken,WETH,wethIn);\r\n            }\r\n            return UniswapV2ExpandLibrary.swapExactIn(address(this),WETH,outputToken,wethIn);\r\n        }\r\n    }\r\n\r\n    function ethToWeth(uint256 amountIn)public onlyAuthorize{\r\n        IWETH(WETH).deposit{value: amountIn}();\r\n    }\r\n\r\n\r\n    function deposit(uint256 _amount) external {\r\n        require(msg.sender == address(controller), 'Strategy.deposit: !controller');\r\n        (,address _vaultToken) = _vaultInfo();\r\n        require(_amount > 0, 'Strategy.deposit: token balance is zero');\r\n        IERC20 tokenContract = IERC20(_vaultToken);\r\n        require(tokenContract.balanceOf(msg.sender) >= _amount, 'Strategy.deposit: Insufficient balance');\r\n        tokenContract.safeTransferFrom(msg.sender, address(this), _amount);\r\n        if(!_tokens.contains(_vaultToken)){\r\n            _tokens.add(_vaultToken);\r\n        }\r\n    }\r\n\r\n    function withdraw(uint256 _amount) external {\r\n        require(msg.sender == address(controller), 'Strategy.withdraw: !controller');\r\n        require(_amount > 0, 'Strategy.withdraw: Must be greater than 0 amount');\r\n        require(_amount <= assets(), 'Strategy.withdraw: Must be less than assets');\r\n        (address _vault,address _vaultToken) = _vaultInfo();\r\n        IERC20 tokenContract=IERC20(_vaultToken);\r\n        uint256 cashAmount=tokenContract.balanceOf(address(this));\r\n        if(cashAmount<_amount){\r\n            uint256 scale=_amount.bdiv(assets());\r\n            uint256[] memory underlyingNumbers=_withdrawOfUnderlying(scale);\r\n            uint256 wethAmountOut;\r\n            for(uint256 i=0;i<_tokens.length();i++){\r\n                address token=_tokens.at(i);\r\n                if(token==WETH){\r\n                    wethAmountOut=wethAmountOut.add(underlyingNumbers[i]);\r\n                }else if(token!=_vaultToken&&underlyingNumbers[i]>0){\r\n                    wethAmountOut=wethAmountOut.add(UniswapV2ExpandLibrary.swapExactIn(address(this),token,WETH,underlyingNumbers[i]));\r\n                }\r\n            }\r\n            UniswapV2ExpandLibrary.swapExactIn(address(this),WETH,_vaultToken,wethAmountOut);\r\n        }\r\n        cashAmount=tokenContract.balanceOf(address(this));\r\n        if(cashAmount<_amount){\r\n            _amount=cashAmount;\r\n        }\r\n        tokenContract.safeTransfer(_vault,_amount);\r\n    }\r\n\r\n    function withdrawOfUnderlying(address payable _to,uint256 _scale)external{\r\n        require(msg.sender == address(controller), 'Strategy.withdrawOfUnderlying: !controller');\r\n        require(_scale > 0, 'Strategy.withdrawOfUnderlying: Must be greater than 0');\r\n        uint256[] memory underlyingNumbers= _withdrawOfUnderlying(_scale);\r\n        for(uint256 i=0;i<underlyingNumbers.length;i++){\r\n            if(underlyingNumbers[i]>0){\r\n                IERC20(_tokens.at(i)).safeTransfer(_to,underlyingNumbers[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _withdrawOfUnderlying(uint256 _scale)internal returns(uint256[] memory underlyingNumbers){\r\n        underlyingNumbers=new uint256[](_tokens.length());\r\n        for(uint256 i=0;i<_tokens.length();i++){\r\n            uint256 bal=IERC20(_tokens.at(i)).balanceOf(address(this));\r\n            underlyingNumbers[i]=bal.mul(_scale).div(1e18);\r\n        }\r\n        for(uint256 i=_pools.length();i>0;i--){\r\n            address pool=_pools.at(i.sub(1));\r\n            uint256 liquidityBalance=UniswapV2ExpandLibrary.liquidityBalance(pool,address(this));\r\n            uint256 liquidity=liquidityBalance.mul(_scale).div(1e18);\r\n            if(liquidity>0){\r\n                (uint256 amount0,uint256 amount1)=_removeLiquidity(pool,liquidity,address(this));\r\n                (address token0,address token1)=UniswapV2ExpandLibrary.tokens(pool);\r\n                uint256 token0Index= _tokens.indexs(token0).sub(1);\r\n                uint256 token1Index= _tokens.indexs(token1).sub(1);\r\n                underlyingNumbers[token0Index]=amount0.add(underlyingNumbers[token0Index]);\r\n                underlyingNumbers[token1Index]=amount1.add(underlyingNumbers[token1Index]);\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdraw(address _token) external onlyGovernance returns (uint256 balance){\r\n        IERC20 token=IERC20(_token);\r\n        balance = token.balanceOf(address(this));\r\n        if (balance > 0) {\r\n            token.safeTransfer(msg.sender, balance);\r\n        }\r\n    }\r\n\r\n    function withdrawAll() external {\r\n        require(msg.sender == address(controller), 'Strategy.withdrawAll: !controller');\r\n        for(uint256 i=_pools.length();i>0;i--){\r\n            address pool=_pools.at(i.sub(1));\r\n            uint256 liquidity=UniswapV2ExpandLibrary.liquidityBalance(pool,address(this));\r\n            _removeLiquidity(pool,liquidity,address(this));\r\n        }\r\n        (address _vault,address _vaultToken) = _vaultInfo();\r\n        for(uint256 j=0;j<_tokens.length();j++){\r\n            address token=_tokens.at(j);\r\n            uint256 bal=IERC20(token).balanceOf(address(this));\r\n            if(token!=_vaultToken&&token!=WETH&&bal>0){\r\n               UniswapV2ExpandLibrary.swapExactIn(address(this),token,WETH,bal);\r\n            }\r\n        }\r\n        uint256 amountIn = IERC20(WETH).balanceOf(address(this));\r\n        UniswapV2ExpandLibrary.swapExactIn(address(this),WETH,_vaultToken,amountIn);\r\n        IERC20 vaultToken=IERC20(_vaultToken);\r\n        vaultToken.safeTransfer(_vault, vaultToken.balanceOf(address(this)));\r\n    }\r\n\r\n    function extractableUnderlyingNumber(uint256 _scale)public view returns(uint256[] memory tokenNumbers){\r\n        uint256[] memory tokenTotalNumbers=getTokenNumbers();\r\n        tokenNumbers=new uint256[](tokenTotalNumbers.length);\r\n        for(uint256 i=0;i<tokenTotalNumbers.length;i++){\r\n            if(tokenTotalNumbers[i]>0){\r\n                tokenNumbers[i]=tokenTotalNumbers[i].mul(_scale).div(1e18);\r\n            }\r\n        }\r\n    }\r\n\r\n    function getTokenNumbers()public view returns(uint256[] memory amounts){\r\n        amounts=new uint256[](_tokens.length());\r\n        for(uint256 i=_pools.length();i>0;i--){\r\n            address pool=_pools.at(i.sub(1));\r\n            (address token0,address token1)=UniswapV2ExpandLibrary.tokens(pool);\r\n            (uint256 amount0,uint256 amount1)=liquidityTokenOut(pool);\r\n            uint256 token0Index= _tokens.indexs(token0).sub(1);\r\n            uint256 token1Index= _tokens.indexs(token1).sub(1);\r\n            amounts[token0Index]=amount0.add(amounts[token0Index]);\r\n            amounts[token1Index]=amount1.add(amounts[token1Index]);\r\n        }\r\n        for(uint256 i=0;i<_tokens.length();i++){\r\n            amounts[i]=amounts[i].add(IERC20(_tokens.at(i)).balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    function getTokens()public view returns(address[] memory ts){\r\n        uint256 length=_tokens.length();\r\n        ts=new address[](length);\r\n        for(uint256 i=0;i<length;i++){\r\n            ts[i]=_tokens.at(i);\r\n        }\r\n    }\r\n\r\n    function getWeights()public view returns(uint256[] memory ws){\r\n        uint256 assets=assets();\r\n        (,address _vaultToken) = _vaultInfo();\r\n        ws=new uint256[](_tokens.length());\r\n        uint256[] memory tokenNumbers=getTokenNumbers();\r\n        for(uint256 i=0;i<_tokens.length();i++){\r\n            uint256 ta=tokenValueByIn(_tokens.at(i),_vaultToken,tokenNumbers[i]);\r\n            if(assets!=0){\r\n                ws[i]=ta.bdiv(assets).mul(100);\r\n            }\r\n        }\r\n    }\r\n\r\n    function assets() public view returns (uint256){\r\n        (,address _vaultToken) = _vaultInfo();\r\n        uint256 total=0;\r\n        uint256[] memory tokenNumbers=getTokenNumbers();\r\n        for(uint256 i=0;i<_tokens.length();i++){\r\n            uint256 ta=tokenValueByIn(_tokens.at(i),_vaultToken,tokenNumbers[i]);\r\n            total=total.add(ta);\r\n        }\r\n        return total;\r\n    }\r\n\r\n    function available() public view returns (uint256){\r\n        (,address _vaultToken) = _vaultInfo();\r\n        uint256 total=0;\r\n        uint256 wethBal=0;\r\n        for(uint256 i=0;i<_tokens.length();i++){\r\n            address token=_tokens.at(i);\r\n            uint256 bal=IERC20(token).balanceOf(address(this));\r\n            if(token==WETH){\r\n                wethBal=wethBal.add(bal);\r\n            }else if(token!=_vaultToken&&bal>0){\r\n                wethBal=wethBal.add(UniswapV2ExpandLibrary.getAmountOut(token,WETH,bal));\r\n            }\r\n        }\r\n        if(wethBal>0){\r\n            total=total.add(UniswapV2ExpandLibrary.getAmountOut(WETH,_vaultToken,wethBal));\r\n        }\r\n        total=total.add(IERC20(_vaultToken).balanceOf(address(this)));\r\n        return total;\r\n    }\r\n\r\n    function tokenValueByIn(address _fromToken,address _toToken,uint256 _amount)public view returns (uint256){\r\n        if(_amount==0)return _amount;\r\n        if(_fromToken==_toToken){\r\n            return _amount;\r\n        }else if(_fromToken==WETH){\r\n            return UniswapV2ExpandLibrary.getAmountOut(_fromToken,_toToken,_amount);\r\n        }else{\r\n            uint256 wethAmount=UniswapV2ExpandLibrary.getAmountOut(_fromToken,WETH,_amount);\r\n            return UniswapV2ExpandLibrary.getAmountOut(WETH,_toToken,wethAmount);\r\n        }\r\n    }\r\n\r\n    function tokenValueByOut(address _fromToken,address _toToken,uint256 _amount)public view returns (uint256){\r\n        if(_amount==0)return _amount;\r\n        if(_fromToken==_toToken){\r\n            return _amount;\r\n        }else if(_fromToken==WETH){\r\n            return UniswapV2ExpandLibrary.getAmountIn(_fromToken,_toToken,_amount);\r\n        }else{\r\n            uint256 wethOut=UniswapV2ExpandLibrary.getAmountIn(_fromToken,WETH,_amount);\r\n            return UniswapV2ExpandLibrary.getAmountIn(_fromToken,WETH,wethOut);\r\n        }\r\n    }\r\n\r\n\r\n    function liquidityTokenOut(address _pool) public view returns (uint256,uint256){\r\n        (address token0,address token1)=UniswapV2ExpandLibrary.tokens(_pool);\r\n        uint256 liquidity=UniswapV2ExpandLibrary.liquidityBalance(_pool,address(this));\r\n        return UniswapV2ExpandLibrary.calcLiquidityToTokens(token0,token1,liquidity);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityExpect\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"ethToWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_scale\",\"type\":\"uint256\"}],\"name\":\"extractableUnderlyingNumber\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenNumbers\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenNumbers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"ts\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ws\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"liquidityTokenOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"ps\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_ts\",\"type\":\"address[]\"}],\"name\":\"removeUnderlyingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"route\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_ts\",\"type\":\"address[]\"}],\"name\":\"setUnderlyingTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"swapExactInByUni\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"swapExactOutByUni\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tokenValueByIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"tokenValueByOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_scale\",\"type\":\"uint256\"}],\"name\":\"withdrawOfUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"UniDynamicLiquidityStrategy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000155777e9b8e985929dbe45fb6d210155dfb91f41","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://aa82f67a81186f161de7e3976bdb2d89fd8ffcc2f623b77bf2b8c75886edd185"}]}