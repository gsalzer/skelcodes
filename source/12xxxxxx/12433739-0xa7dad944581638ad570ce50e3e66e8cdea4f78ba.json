{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/providers/CreamController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./../lib/math/MathUtils.sol\\\";\\n\\nimport \\\"./../external-interfaces/cream-finance/ICrCToken.sol\\\";\\n\\nimport \\\"./../IController.sol\\\";\\nimport \\\"./../oracle/IYieldOracle.sol\\\";\\nimport \\\"./../oracle/IYieldOraclelizable.sol\\\";\\n\\nimport \\\"./ICreamCumulator.sol\\\";\\nimport \\\"./CreamProvider.sol\\\";\\n\\ncontract CreamController is IController, ICreamCumulator, IYieldOraclelizable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant BLOCKS_PER_DAY = 5760; // 4 * 60 * 24 (assuming 4 blocks per minute)\\n\\n    uint256 public constant MAX_UINT256 = uint256(-1);\\n\\n    // claimed aave rewards are sent to this address\\n    address public rewardsCollector;\\n\\n    // last time we cumulated\\n    uint256 public prevCumulationTime;\\n\\n    // exchnageRateStored last time we cumulated\\n    uint256 public prevExchnageRateCurrent;\\n\\n    // cumulative supply rate += ((new underlying) / underlying)\\n    uint256 public cumulativeSupplyRate;\\n\\n    event Harvest(address indexed caller, uint256 rewardTotal, uint256 rewardSold, uint256 underlyingPoolShare, uint256 underlyingReward, uint256 harvestCost);\\n\\n    modifier onlyPool {\\n      require(\\n        msg.sender == pool,\\n        \\\"CrC: only pool\\\"\\n      );\\n      _;\\n    }\\n\\n    constructor(\\n      address pool_,\\n      address smartYield_,\\n      address bondModel_,\\n      address rewardsCollector_\\n    )\\n      IController()\\n    {\\n      pool = pool_;\\n      smartYield = smartYield_;\\n      setBondModel(bondModel_);\\n      setHarvestCost(0);\\n      setRewardsCollector(rewardsCollector_);\\n    }\\n\\n    function setRewardsCollector(address newRewardsCollector_)\\n      public\\n      onlyDao\\n    {\\n      rewardsCollector = newRewardsCollector_;\\n    }\\n\\n    // claims and sells COMP on uniswap, returns total received comp and caller reward\\n    function harvest(uint256)\\n      public\\n    returns (uint256 rewardAmountGot, uint256 underlyingHarvestReward)\\n    {\\n        uint256 amountRewarded = CreamProvider(pool).claimRewardsTo(MAX_UINT256, rewardsCollector);\\n\\n        emit Harvest(msg.sender, amountRewarded, 0, 0, 0, HARVEST_COST);\\n        return (amountRewarded, 0);\\n    }\\n\\n    function _beforeCTokenBalanceChange()\\n      external override\\n      onlyPool\\n    { }\\n\\n    function _afterCTokenBalanceChange(uint256 prevCTokenBalance_)\\n      external override\\n      onlyPool\\n    {\\n      // at this point compound.finance state is updated since the pool did a deposit or withdrawl just before, so no need to ping\\n      updateCumulativesInternal(prevCTokenBalance_, false);\\n      IYieldOracle(oracle).update();\\n    }\\n\\n    function providerRatePerDay()\\n      public override virtual\\n    returns (uint256)\\n    {\\n      return MathUtils.min(\\n        MathUtils.min(BOND_MAX_RATE_PER_DAY, spotDailyRate()),\\n        IYieldOracle(oracle).consult(1 days)\\n      );\\n    }\\n\\n    function cumulatives()\\n      external override\\n      returns (uint256)\\n    {\\n      uint256 timeElapsed = block.timestamp - prevCumulationTime;\\n\\n      // only cumulate once per block\\n      if (0 == timeElapsed) {\\n        return cumulativeSupplyRate;\\n      }\\n\\n      uint256 cTokenBalance = CreamProvider(pool).cTokenBalance();\\n      updateCumulativesInternal(cTokenBalance, true);\\n\\n      return cumulativeSupplyRate;\\n    }\\n\\n    function updateCumulativesInternal(uint256, bool pingCompound_)\\n      private\\n    {\\n      uint256 timeElapsed = block.timestamp - prevCumulationTime;\\n\\n      // only cumulate once per block\\n      if (0 == timeElapsed) {\\n        return;\\n      }\\n\\n      ICrCToken cToken = ICrCToken(CreamProvider(pool).cToken());\\n\\n      if (pingCompound_) {\\n        // exchangeRateStored will be up to date below\\n        cToken.accrueInterest();\\n      }\\n\\n      uint256 exchangeRateStoredNow = cToken.exchangeRateStored();\\n\\n      if (prevExchnageRateCurrent > 0) {\\n        // cumulate a new supplyRate delta: cumulativeSupplyRate += (cToken.exchangeRateCurrent() - prevExchnageRateCurrent) / prevExchnageRateCurrent\\n        // cumulativeSupplyRate eventually overflows, but that's ok due to the way it's used in the oracle\\n        cumulativeSupplyRate += exchangeRateStoredNow.sub(prevExchnageRateCurrent).mul(EXP_SCALE).div(prevExchnageRateCurrent);\\n      }\\n\\n      prevCumulationTime = block.timestamp;\\n\\n      // exchangeRateStored can increase multiple times per block\\n      prevExchnageRateCurrent = exchangeRateStoredNow;\\n    }\\n\\n    // compound spot supply rate per day\\n    function spotDailySupplyRateProvider()\\n      public view returns (uint256)\\n    {\\n      // supplyRatePerBlock() * BLOCKS_PER_DAY\\n      return ICrCToken(CreamProvider(pool).cToken()).supplyRatePerBlock().mul(BLOCKS_PER_DAY);\\n    }\\n\\n    // compound spot distribution rate per day\\n    function spotDailyDistributionRateProvider()\\n      public pure returns (uint256)\\n    {\\n      return 0;\\n    }\\n\\n    // smart yield spot daily rate includes: spot supply + spot distribution\\n    function spotDailyRate()\\n      public view returns (uint256)\\n    {\\n      return spotDailySupplyRateProvider();\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lib/math/MathUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary MathUtils {\\n\\n    using SafeMath for uint256;\\n\\n    uint256 public constant EXP_SCALE = 1e18;\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x > y ? x : y;\\n    }\\n\\n    function compound(\\n        // in wei\\n        uint256 principal,\\n        // rate is * EXP_SCALE\\n        uint256 ratePerPeriod,\\n        uint16 periods\\n    ) internal pure returns (uint256) {\\n      if (0 == ratePerPeriod) {\\n        return principal;\\n      }\\n\\n      while (periods > 0) {\\n          // principal += principal * ratePerPeriod / EXP_SCALE;\\n          principal = principal.add(principal.mul(ratePerPeriod).div(EXP_SCALE));\\n          periods -= 1;\\n      }\\n\\n      return principal;\\n    }\\n\\n    function compound2(\\n      uint256 principal,\\n      uint256 ratePerPeriod,\\n      uint16 periods\\n    ) internal pure returns (uint256) {\\n      if (0 == ratePerPeriod) {\\n        return principal;\\n      }\\n\\n      while (periods > 0) {\\n        if (periods % 2 == 1) {\\n          //principal += principal * ratePerPeriod / EXP_SCALE;\\n          principal = principal.add(principal.mul(ratePerPeriod).div(EXP_SCALE));\\n          periods -= 1;\\n        } else {\\n          //ratePerPeriod = ((2 * ratePerPeriod * EXP_SCALE) + (ratePerPeriod * ratePerPeriod)) / EXP_SCALE;\\n          ratePerPeriod = ((uint256(2).mul(ratePerPeriod).mul(EXP_SCALE)).add(ratePerPeriod.mul(ratePerPeriod))).div(EXP_SCALE);\\n          periods /= 2;\\n        }\\n      }\\n\\n      return principal;\\n    }\\n\\n    function linearGain(\\n      uint256 principal,\\n      uint256 ratePerPeriod,\\n      uint16 periods\\n    ) internal pure returns (uint256) {\\n      return principal.add(\\n        fractionOf(principal, ratePerPeriod.mul(periods))\\n      );\\n    }\\n\\n    // computes a * f / EXP_SCALE\\n    function fractionOf(uint256 a, uint256 f) internal pure returns (uint256) {\\n      return a.mul(f).div(EXP_SCALE);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/external-interfaces/cream-finance/ICrCToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\n\\ninterface ICrCToken {\\n    function mint(uint mintAmount) external returns (uint256);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint256);\\n    function accrueInterest() external returns (uint256);\\n    function exchangeRateStored() external view returns (uint256);\\n    function exchangeRateCurrent() external returns (uint256);\\n    function supplyRatePerBlock() external view returns (uint256);\\n    function totalBorrows() external view returns (uint256);\\n    function getCash() external view returns (uint256);\\n    function underlying() external view returns (address);\\n    function comptroller() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./Governed.sol\\\";\\nimport \\\"./IProvider.sol\\\";\\nimport \\\"./ISmartYield.sol\\\";\\n\\nabstract contract IController is Governed {\\n\\n    uint256 public constant EXP_SCALE = 1e18;\\n\\n    address public pool; // compound provider pool\\n\\n    address public smartYield; // smartYield\\n\\n    address public oracle; // IYieldOracle\\n\\n    address public bondModel; // IBondModel\\n\\n    address public feesOwner; // fees are sent here\\n\\n    // max accepted cost of harvest when converting COMP -> underlying,\\n    // if harvest gets less than (COMP to underlying at spot price) - HARVEST_COST%, it will revert.\\n    // if it gets more, the difference goes to the harvest caller\\n    uint256 public HARVEST_COST = 40 * 1e15; // 4%\\n\\n    // fee for buying jTokens\\n    uint256 public FEE_BUY_JUNIOR_TOKEN = 3 * 1e15; // 0.3%\\n\\n    // fee for redeeming a sBond\\n    uint256 public FEE_REDEEM_SENIOR_BOND = 100 * 1e15; // 10%\\n\\n    // max rate per day for sBonds\\n    uint256 public BOND_MAX_RATE_PER_DAY = 719065000000000; // APY 30% / year\\n\\n    // max duration of a purchased sBond\\n    uint16 public BOND_LIFE_MAX = 90; // in days\\n\\n    bool public PAUSED_BUY_JUNIOR_TOKEN = false;\\n\\n    bool public PAUSED_BUY_SENIOR_BOND = false;\\n\\n    function setHarvestCost(uint256 newValue_)\\n      public\\n      onlyDao\\n    {\\n        require(\\n          HARVEST_COST < EXP_SCALE,\\n          \\\"IController: HARVEST_COST too large\\\"\\n        );\\n        HARVEST_COST = newValue_;\\n    }\\n\\n    function setBondMaxRatePerDay(uint256 newVal_)\\n      public\\n      onlyDao\\n    {\\n      BOND_MAX_RATE_PER_DAY = newVal_;\\n    }\\n\\n    function setBondLifeMax(uint16 newVal_)\\n      public\\n      onlyDao\\n    {\\n      BOND_LIFE_MAX = newVal_;\\n    }\\n\\n    function setFeeBuyJuniorToken(uint256 newVal_)\\n      public\\n      onlyDao\\n    {\\n      FEE_BUY_JUNIOR_TOKEN = newVal_;\\n    }\\n\\n    function setFeeRedeemSeniorBond(uint256 newVal_)\\n      public\\n      onlyDao\\n    {\\n      FEE_REDEEM_SENIOR_BOND = newVal_;\\n    }\\n\\n    function setPaused(bool buyJToken_, bool buySBond_)\\n      public\\n      onlyDaoOrGuardian\\n    {\\n      PAUSED_BUY_JUNIOR_TOKEN = buyJToken_;\\n      PAUSED_BUY_SENIOR_BOND = buySBond_;\\n    }\\n\\n    function setOracle(address newVal_)\\n      public\\n      onlyDao\\n    {\\n      oracle = newVal_;\\n    }\\n\\n    function setBondModel(address newVal_)\\n      public\\n      onlyDao\\n    {\\n      bondModel = newVal_;\\n    }\\n\\n    function setFeesOwner(address newVal_)\\n      public\\n      onlyDao\\n    {\\n      feesOwner = newVal_;\\n    }\\n\\n    function yieldControllTo(address newController_)\\n      public\\n      onlyDao\\n    {\\n      IProvider(pool).setController(newController_);\\n      ISmartYield(smartYield).setController(newController_);\\n    }\\n\\n    function providerRatePerDay() external virtual returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/IYieldOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\ninterface IYieldOracle {\\n    function update() external;\\n\\n    function consult(uint256 forInterval) external returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/oracle/IYieldOraclelizable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\ninterface IYieldOraclelizable {\\n    // accumulates/updates internal state and returns cumulatives \\n    // oracle should call this when updating\\n    function cumulatives()\\n      external\\n    returns(uint256 cumulativeYield);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/providers/ICreamCumulator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\ninterface ICreamCumulator {\\n  function _beforeCTokenBalanceChange() external;\\n\\n  function _afterCTokenBalanceChange(uint256 prevCTokenBalance_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/providers/CreamProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./../lib/math/MathUtils.sol\\\";\\n\\nimport \\\"./../external-interfaces/cream-finance/ICrCToken.sol\\\";\\nimport \\\"./../external-interfaces/cream-finance/ICrComptroller.sol\\\";\\n\\nimport \\\"./../IController.sol\\\";\\nimport \\\"./../IProvider.sol\\\";\\n\\nimport \\\"./ICreamCumulator.sol\\\";\\n\\ncontract CreamProvider is IProvider {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant MAX_UINT256 = uint256(-1);\\n    uint256 public constant EXP_SCALE = 1e18;\\n\\n    address public override smartYield;\\n\\n    address public override controller;\\n\\n    // fees colected in underlying\\n    uint256 public override underlyingFees;\\n\\n    // underlying token (ie. DAI)\\n    address public uToken; // IERC20\\n\\n    // claim token (ie. cDAI)\\n    address public cToken;\\n\\n    // cToken.balanceOf(this) measuring only deposits by users (excludes direct cToken transfers to pool)\\n    uint256 public cTokenBalance;\\n\\n    uint256 public exchangeRateCurrentCached;\\n    uint256 public exchangeRateCurrentCachedAt;\\n\\n    bool public _setup;\\n\\n    event TransferFees(address indexed caller, address indexed feesOwner, uint256 fees);\\n\\n    modifier onlySmartYield {\\n      require(\\n        msg.sender == smartYield,\\n        \\\"CrP: only smartYield\\\"\\n      );\\n      _;\\n    }\\n\\n    modifier onlyController {\\n      require(\\n        msg.sender == controller,\\n        \\\"CrP: only controller\\\"\\n      );\\n      _;\\n    }\\n\\n    modifier onlySmartYieldOrController {\\n      require(\\n        msg.sender == smartYield || msg.sender == controller,\\n        \\\"CrP: only smartYield/controller\\\"\\n      );\\n      _;\\n    }\\n\\n    modifier onlyControllerOrDao {\\n      require(\\n        msg.sender == controller || msg.sender == IController(controller).dao(),\\n        \\\"CrP: only controller/DAO\\\"\\n      );\\n      _;\\n    }\\n\\n    constructor(address cToken_)\\n    {\\n        cToken = cToken_;\\n        uToken = ICrCToken(cToken_).underlying();\\n    }\\n\\n    function setup(\\n        address smartYield_,\\n        address controller_\\n    )\\n      external\\n    {\\n        require(\\n          false == _setup,\\n          \\\"CrP: already setup\\\"\\n        );\\n\\n        smartYield = smartYield_;\\n        controller = controller_;\\n\\n        _enterMarket();\\n\\n        _setup = true;\\n    }\\n\\n    function setController(address newController_)\\n      external override\\n      onlyControllerOrDao\\n    {\\n      controller = newController_;\\n    }\\n\\n  // externals\\n\\n    // take underlyingAmount_ from from_\\n    function _takeUnderlying(address from_, uint256 underlyingAmount_)\\n      external override\\n      onlySmartYieldOrController\\n    {\\n        uint256 balanceBefore = IERC20(uToken).balanceOf(address(this));\\n        IERC20(uToken).safeTransferFrom(from_, address(this), underlyingAmount_);\\n        uint256 balanceAfter = IERC20(uToken).balanceOf(address(this));\\n        require(\\n          0 == (balanceAfter - balanceBefore - underlyingAmount_),\\n          \\\"CrP: _takeUnderlying amount\\\"\\n        );\\n    }\\n\\n    // transfer away underlyingAmount_ to to_\\n    function _sendUnderlying(address to_, uint256 underlyingAmount_)\\n      external override\\n      onlySmartYield\\n    {\\n        uint256 balanceBefore = IERC20(uToken).balanceOf(to_);\\n        IERC20(uToken).safeTransfer(to_, underlyingAmount_);\\n        uint256 balanceAfter = IERC20(uToken).balanceOf(to_);\\n        require(\\n          0 == (balanceAfter - balanceBefore - underlyingAmount_),\\n          \\\"CrP: _sendUnderlying amount\\\"\\n        );\\n    }\\n\\n    // deposit underlyingAmount_ with the liquidity provider, callable by smartYield or controller\\n    function _depositProvider(uint256 underlyingAmount_, uint256 takeFees_)\\n      external override\\n      onlySmartYieldOrController\\n    {\\n        _depositProviderInternal(underlyingAmount_, takeFees_);\\n    }\\n\\n    // deposit underlyingAmount_ with the liquidity provider, store resulting cToken balance in cTokenBalance\\n    function _depositProviderInternal(uint256 underlyingAmount_, uint256 takeFees_)\\n      internal\\n    {\\n        // underlyingFees += takeFees_\\n        underlyingFees = underlyingFees.add(takeFees_);\\n\\n        ICreamCumulator(controller)._beforeCTokenBalanceChange();\\n        IERC20(uToken).safeApprove(address(cToken), underlyingAmount_);\\n        uint256 err = ICrCToken(cToken).mint(underlyingAmount_);\\n        require(0 == err, \\\"CrP: _depositProvider mint\\\");\\n        ICreamCumulator(controller)._afterCTokenBalanceChange(cTokenBalance);\\n\\n        // cTokenBalance is used to compute the pool yield, make sure no one interferes with the computations between deposits/withdrawls\\n        cTokenBalance = IERC20(cToken).balanceOf(address(this));\\n    }\\n\\n    // withdraw underlyingAmount_ from the liquidity provider, callable by smartYield\\n    function _withdrawProvider(uint256 underlyingAmount_, uint256 takeFees_)\\n      external override\\n      onlySmartYield\\n    {\\n      _withdrawProviderInternal(underlyingAmount_, takeFees_);\\n    }\\n\\n    // withdraw underlyingAmount_ from the liquidity provider, store resulting cToken balance in cTokenBalance\\n    function _withdrawProviderInternal(uint256 underlyingAmount_, uint256 takeFees_)\\n      internal\\n    {\\n        // underlyingFees += takeFees_;\\n        underlyingFees = underlyingFees.add(takeFees_);\\n\\n        ICreamCumulator(controller)._beforeCTokenBalanceChange();\\n        uint256 err = ICrCToken(cToken).redeemUnderlying(underlyingAmount_);\\n        require(0 == err, \\\"CrP: _withdrawProvider redeemUnderlying\\\");\\n        ICreamCumulator(controller)._afterCTokenBalanceChange(cTokenBalance);\\n\\n        // cTokenBalance is used to compute the pool yield, make sure no one interferes with the computations between deposits/withdrawls\\n        cTokenBalance = IERC20(cToken).balanceOf(address(this));\\n    }\\n\\n    // claims rewards we have accumulated and sends them to \\\"to\\\" address\\n    // only callable by controller\\n    function claimRewardsTo(uint256 amount, address to)\\n      external\\n      onlyController\\n      returns (uint256)\\n    {\\n      address[] memory holders = new address[](1);\\n      holders[0] = address(this);\\n\\n      address[] memory cTokens = new address[](1);\\n      cTokens[0] = cToken;\\n\\n      ICrComptroller comptroller = ICrComptroller(ICrCToken(cToken).comptroller());\\n      IERC20 Comp = IERC20(comptroller.getCompAddress());\\n\\n      comptroller.claimComp(\\n        holders,\\n        cTokens,\\n        false,\\n        true\\n      );\\n\\n      amount = MathUtils.min(amount, Comp.balanceOf(address(this)));\\n\\n      Comp.safeTransfer(to, amount);\\n\\n      return amount;\\n    }\\n\\n    function transferFees()\\n      external\\n      override\\n    {\\n      _withdrawProviderInternal(underlyingFees, 0);\\n      underlyingFees = 0;\\n\\n      uint256 fees = IERC20(uToken).balanceOf(address(this));\\n      address to = IController(controller).feesOwner();\\n\\n      IERC20(uToken).safeTransfer(to, fees);\\n\\n      emit TransferFees(msg.sender, to, fees);\\n    }\\n\\n    // current total underlying balance, as measured by pool, without fees\\n    function underlyingBalance()\\n      external virtual override\\n    returns (uint256)\\n    {\\n        // https://compound.finance/docs#protocol-math\\n        // (total balance in underlying) - underlyingFees\\n        // cTokenBalance * exchangeRateCurrent() / EXP_SCALE - underlyingFees;\\n        return cTokenBalance.mul(exchangeRateCurrent()).div(EXP_SCALE).sub(underlyingFees);\\n    }\\n  // /externals\\n\\n  // public\\n    // get exchangeRateCurrent from cream and cache it for the current block\\n    function exchangeRateCurrent()\\n      public virtual\\n    returns (uint256)\\n    {\\n      // only once per block\\n      if (block.timestamp > exchangeRateCurrentCachedAt) {\\n        exchangeRateCurrentCachedAt = block.timestamp;\\n        exchangeRateCurrentCached = ICrCToken(cToken).exchangeRateCurrent();\\n      }\\n      return exchangeRateCurrentCached;\\n    }\\n  // /public\\n\\n  // internals\\n\\n    // call comptroller.enterMarkets()\\n    // needs to be called only once BUT before any interactions with the provider\\n    function _enterMarket()\\n      internal\\n    {\\n        address[] memory markets = new address[](1);\\n        markets[0] = cToken;\\n        uint256[] memory err = ICrComptroller(ICrCToken(cToken).comptroller()).enterMarkets(markets);\\n        require(err[0] == 0, \\\"CrP: _enterMarket\\\");\\n    }\\n\\n    // /internals\\n\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Governed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nabstract contract Governed {\\n\\n  address public dao;\\n  address public guardian;\\n\\n  modifier onlyDao {\\n    require(\\n        dao == msg.sender,\\n        \\\"GOV: not dao\\\"\\n      );\\n    _;\\n  }\\n\\n  modifier onlyDaoOrGuardian {\\n    require(\\n      msg.sender == dao || msg.sender == guardian,\\n      \\\"GOV: not dao/guardian\\\"\\n    );\\n    _;\\n  }\\n\\n  constructor()\\n  {\\n    dao = msg.sender;\\n    guardian = msg.sender;\\n  }\\n\\n  function setDao(address dao_)\\n    external\\n    onlyDao\\n  {\\n    dao = dao_;\\n  }\\n\\n  function setGuardian(address guardian_)\\n    external\\n    onlyDao\\n  {\\n    guardian = guardian_;\\n  }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/IProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\ninterface IProvider {\\n\\n    function smartYield() external view returns (address);\\n\\n    function controller() external view returns (address);\\n\\n    function underlyingFees() external view returns (uint256);\\n\\n    // deposit underlyingAmount_ into provider, add takeFees_ to fees\\n    function _depositProvider(uint256 underlyingAmount_, uint256 takeFees_) external;\\n\\n    // withdraw underlyingAmount_ from provider, add takeFees_ to fees\\n    function _withdrawProvider(uint256 underlyingAmount_, uint256 takeFees_) external;\\n\\n    function _takeUnderlying(address from_, uint256 amount_) external;\\n\\n    function _sendUnderlying(address to_, uint256 amount_) external;\\n\\n    function transferFees() external;\\n\\n    // current total underlying balance as measured by the provider pool, without fees\\n    function underlyingBalance() external returns (uint256);\\n\\n    function setController(address newController_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/ISmartYield.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\ninterface ISmartYield {\\n\\n    // a senior BOND (metadata for NFT)\\n    struct SeniorBond {\\n        // amount seniors put in\\n        uint256 principal;\\n        // amount yielded at the end. total = principal + gain\\n        uint256 gain;\\n        // bond was issued at timestamp\\n        uint256 issuedAt;\\n        // bond matures at timestamp\\n        uint256 maturesAt;\\n        // was it liquidated yet\\n        bool liquidated;\\n    }\\n\\n    // a junior BOND (metadata for NFT)\\n    struct JuniorBond {\\n        // amount of tokens (jTokens) junior put in\\n        uint256 tokens;\\n        // bond matures at timestamp\\n        uint256 maturesAt;\\n    }\\n\\n    // a checkpoint for all JuniorBonds with same maturity date JuniorBond.maturesAt\\n    struct JuniorBondsAt {\\n        // sum of JuniorBond.tokens for JuniorBonds with the same JuniorBond.maturesAt\\n        uint256 tokens;\\n        // price at which JuniorBonds will be paid. Initially 0 -> unliquidated (price is in the future or not yet liquidated)\\n        uint256 price;\\n    }\\n\\n    function controller() external view returns (address);\\n\\n    function buyBond(uint256 principalAmount_, uint256 minGain_, uint256 deadline_, uint16 forDays_) external returns (uint256);\\n\\n    function redeemBond(uint256 bondId_) external;\\n\\n    function unaccountBonds(uint256[] memory bondIds_) external;\\n\\n    function buyTokens(uint256 underlyingAmount_, uint256 minTokens_, uint256 deadline_) external;\\n\\n    /**\\n     * sell all tokens instantly\\n     */\\n    function sellTokens(uint256 tokens_, uint256 minUnderlying_, uint256 deadline_) external;\\n\\n    function buyJuniorBond(uint256 tokenAmount_, uint256 maxMaturesAt_, uint256 deadline_) external;\\n\\n    function redeemJuniorBond(uint256 jBondId_) external;\\n\\n    function liquidateJuniorBonds(uint256 upUntilTimestamp_) external;\\n\\n    /**\\n     * token purchase price\\n     */\\n    function price() external returns (uint256);\\n\\n    function abondPaid() external view returns (uint256);\\n\\n    function abondDebt() external view returns (uint256);\\n\\n    function abondGain() external view returns (uint256);\\n\\n    /**\\n     * @notice current total underlying balance, without accruing interest\\n     */\\n    function underlyingTotal() external returns (uint256);\\n\\n    /**\\n     * @notice current underlying loanable, without accruing interest\\n     */\\n    function underlyingLoanable() external returns (uint256);\\n\\n    function underlyingJuniors() external returns (uint256);\\n\\n    function bondGain(uint256 principalAmount_, uint16 forDays_) external returns (uint256);\\n\\n    function maxBondDailyRate() external returns (uint256);\\n\\n    function setController(address newController_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/external-interfaces/cream-finance/ICrComptroller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.7.6;\\n\\ninterface ICrComptroller {\\n    struct CompMarketState {\\n        uint224 index;\\n        uint32 block;\\n    }\\n\\n    function enterMarkets(address[] memory cTokens) external returns (uint256[] memory);\\n    function claimComp(address[] memory holders, address[] memory cTokens, bool borrowers, bool suppliers) external;\\n    function mintAllowed(address cToken, address minter, uint256 mintAmount) external returns (uint256);\\n\\n    function getCompAddress() external view returns(address);\\n    function compSupplyState(address cToken) external view returns (uint224, uint32);\\n    function compSpeeds(address cToken) external view returns (uint256);\\n    function oracle() external view returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 9999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"smartYield_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bondModel_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardsCollector_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingPoolShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"underlyingReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestCost\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCKS_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOND_LIFE_MAX\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOND_MAX_RATE_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXP_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_BUY_JUNIOR_TOKEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_REDEEM_SENIOR_BOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HARVEST_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSED_BUY_JUNIOR_TOKEN\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSED_BUY_SENIOR_BOND\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prevCTokenBalance_\",\"type\":\"uint256\"}],\"name\":\"_afterCTokenBalanceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_beforeCTokenBalanceChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondModel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulativeSupplyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cumulatives\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmountGot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingHarvestReward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevCumulationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevExchnageRateCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providerRatePerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newVal_\",\"type\":\"uint16\"}],\"name\":\"setBondLifeMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVal_\",\"type\":\"uint256\"}],\"name\":\"setBondMaxRatePerDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVal_\",\"type\":\"address\"}],\"name\":\"setBondModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dao_\",\"type\":\"address\"}],\"name\":\"setDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVal_\",\"type\":\"uint256\"}],\"name\":\"setFeeBuyJuniorToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newVal_\",\"type\":\"uint256\"}],\"name\":\"setFeeRedeemSeniorBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVal_\",\"type\":\"address\"}],\"name\":\"setFeesOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"guardian_\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue_\",\"type\":\"uint256\"}],\"name\":\"setHarvestCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVal_\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"buyJToken_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"buySBond_\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewardsCollector_\",\"type\":\"address\"}],\"name\":\"setRewardsCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartYield\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spotDailyDistributionRateProvider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spotDailyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spotDailySupplyRateProvider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController_\",\"type\":\"address\"}],\"name\":\"yieldControllTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CreamController","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"9999","ConstructorArguments":"00000000000000000000000037923eb0f4a9097b2774eab9d928afad6196cf7600000000000000000000000089d82fdf095083ded96b48fc6462ed5dbd14151f000000000000000000000000bea4e317b4c3e8951d3e70cb04f4fc50ee447cbb000000000000000000000000378a9c9c44b41c0e8970c358470e4e72eb782302","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}