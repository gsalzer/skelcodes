{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.7.6;\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface BaseRewardPool {\r\n    function balanceOf(address _account) external view returns (uint);\r\n\r\n    function getReward(address _account, bool _claimExtras) external returns (bool);\r\n\r\n    function withdrawAndUnwrap(uint amount, bool claim) external returns (bool);\r\n}\r\n\r\ninterface Booster {\r\n    function poolInfo(uint _pid)\r\n        external\r\n        view\r\n        returns (\r\n            address lptoken,\r\n            address token,\r\n            address gauge,\r\n            address crvRewards,\r\n            address stash,\r\n            bool shutdown\r\n        );\r\n\r\n    function deposit(\r\n        uint _pid,\r\n        uint _amount,\r\n        bool _stake\r\n    ) external returns (bool);\r\n\r\n    function withdraw(uint _pid, uint _amount) external returns (bool);\r\n}\r\n\r\ninterface DepositZapUsdp3Crv {\r\n    function add_liquidity(uint[4] calldata _amounts, uint _min_mint_amount)\r\n        external\r\n        returns (uint);\r\n\r\n    function remove_liquidity_one_coin(\r\n        uint _burn_amount,\r\n        int128 _i,\r\n        uint _min_amount\r\n    ) external returns (uint);\r\n\r\n    function calc_withdraw_one_coin(\r\n        address _pool,\r\n        uint _amount,\r\n        int128 _i\r\n    ) external view returns (uint);\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\ninterface IFundManager {\r\n    function token() external view returns (address);\r\n\r\n    function borrow(uint amount) external returns (uint);\r\n\r\n    function repay(uint amount) external returns (uint);\r\n\r\n    function report(uint gain, uint loss) external;\r\n\r\n    function getDebt(address strategy) external view returns (uint);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint value\r\n    ) internal {\r\n        uint newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint value\r\n    ) internal {\r\n        uint newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint a, uint b) internal pure returns (bool, uint) {\r\n        uint c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint a, uint b) internal pure returns (bool, uint) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint a, uint b) internal pure returns (bool, uint) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint a, uint b) internal pure returns (bool, uint) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint a, uint b) internal pure returns (bool, uint) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) return 0;\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint a,\r\n        uint b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint a,\r\n        uint b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint a,\r\n        uint b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface StableSwapUsdp3Crv {\r\n    function coins(uint _i) external view returns (address);\r\n\r\n    function get_virtual_price() external view returns (uint);\r\n}\r\n\r\nabstract contract Strategy {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    event SetNextTimeLock(address nextTimeLock);\r\n    event AcceptTimeLock(address timeLock);\r\n    event SetAdmin(address admin);\r\n    event Authorize(address addr, bool authorized);\r\n    event SetTreasury(address treasury);\r\n    event SetFundManager(address fundManager);\r\n\r\n    event Deposit(uint amount, uint borrowed);\r\n    event Repay(uint amount, uint repaid);\r\n    event Withdraw(uint amount, uint withdrawn, uint loss);\r\n    event ClaimRewards(uint profit);\r\n    event Skim(uint total, uint debt, uint profit);\r\n    event Report(uint gain, uint loss, uint free, uint total, uint debt);\r\n\r\n    // Privilege - time lock >= admin >= authorized addresses\r\n    address public timeLock;\r\n    address public nextTimeLock;\r\n    address public admin;\r\n    address public treasury; // Profit is sent to this address\r\n\r\n    // authorization other than time lock and admin\r\n    mapping(address => bool) public authorized;\r\n\r\n    IERC20 public immutable token;\r\n    IFundManager public fundManager;\r\n\r\n    // Performance fee sent to treasury\r\n    uint public perfFee = 1000;\r\n    uint private constant PERF_FEE_CAP = 2000; // Upper limit to performance fee\r\n    uint internal constant PERF_FEE_MAX = 10000;\r\n\r\n    constructor(\r\n        address _token,\r\n        address _fundManager,\r\n        address _treasury\r\n    ) {\r\n        // Don't allow accidentally sending perf fee to 0 address\r\n        require(_treasury != address(0), \"treasury = 0 address\");\r\n\r\n        timeLock = msg.sender;\r\n        admin = msg.sender;\r\n        treasury = _treasury;\r\n\r\n        require(\r\n            IFundManager(_fundManager).token() == _token,\r\n            \"fund manager token != token\"\r\n        );\r\n\r\n        fundManager = IFundManager(_fundManager);\r\n        token = IERC20(_token);\r\n\r\n        IERC20(_token).safeApprove(_fundManager, type(uint).max);\r\n    }\r\n\r\n    modifier onlyTimeLock() {\r\n        require(msg.sender == timeLock, \"!time lock\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyTimeLockOrAdmin() {\r\n        require(msg.sender == timeLock || msg.sender == admin, \"!auth\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthorized() {\r\n        require(\r\n            msg.sender == timeLock || msg.sender == admin || authorized[msg.sender],\r\n            \"!auth\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyFundManager() {\r\n        require(msg.sender == address(fundManager), \"!fund manager\");\r\n        _;\r\n    }\r\n\r\n    /*\r\n    @notice Set next time lock\r\n    @param _nextTimeLock Address of next time lock\r\n    @dev nextTimeLock can become timeLock by calling acceptTimeLock()\r\n    */\r\n    function setNextTimeLock(address _nextTimeLock) external onlyTimeLock {\r\n        // Allow next time lock to be zero address (cancel next time lock)\r\n        nextTimeLock = _nextTimeLock;\r\n        emit SetNextTimeLock(_nextTimeLock);\r\n    }\r\n\r\n    /*\r\n    @notice Set timeLock to msg.sender\r\n    @dev msg.sender must be nextTimeLock\r\n    */\r\n    function acceptTimeLock() external {\r\n        require(msg.sender == nextTimeLock, \"!next time lock\");\r\n        timeLock = msg.sender;\r\n        emit AcceptTimeLock(msg.sender);\r\n    }\r\n\r\n    /*\r\n    @notice Set admin\r\n    @param _admin Address of admin\r\n    */\r\n    function setAdmin(address _admin) external onlyTimeLockOrAdmin {\r\n        admin = _admin;\r\n        emit SetAdmin(_admin);\r\n    }\r\n\r\n    /*\r\n    @notice Set authorization\r\n    @param _addr Address to authorize\r\n    @param _authorized Boolean\r\n    */\r\n    function authorize(address _addr, bool _authorized) external onlyTimeLockOrAdmin {\r\n        authorized[_addr] = _authorized;\r\n        emit Authorize(_addr, _authorized);\r\n    }\r\n\r\n    /*\r\n    @notice Set treasury\r\n    @param _treasury Address of treasury\r\n    */\r\n    function setTreasury(address _treasury) external onlyTimeLockOrAdmin {\r\n        // Don't allow accidentally sending perf fee to 0 address\r\n        require(_treasury != address(0), \"treasury = 0 address\");\r\n        treasury = _treasury;\r\n        emit SetTreasury(_treasury);\r\n    }\r\n\r\n    /*\r\n    @notice Set performance fee\r\n    @param _fee Performance fee\r\n    */\r\n    function setPerfFee(uint _fee) external onlyTimeLockOrAdmin {\r\n        require(_fee <= PERF_FEE_CAP, \"fee > cap\");\r\n        perfFee = _fee;\r\n    }\r\n\r\n    function setFundManager(address _fundManager) external onlyTimeLock {\r\n        if (address(fundManager) != address(0)) {\r\n            token.safeApprove(address(fundManager), 0);\r\n        }\r\n\r\n        require(\r\n            IFundManager(_fundManager).token() == address(token),\r\n            \"new fund manager token != token\"\r\n        );\r\n\r\n        fundManager = IFundManager(_fundManager);\r\n        token.safeApprove(_fundManager, type(uint).max);\r\n\r\n        emit SetFundManager(_fundManager);\r\n    }\r\n\r\n    /*\r\n    @notice Transfer funds from `_from` address. Used for migration.\r\n    @param _from Address to transfer token from\r\n    @param _amount Amount of token to transfer\r\n    */\r\n    function transferTokenFrom(address _from, uint _amount) external onlyAuthorized {\r\n        token.safeTransferFrom(_from, address(this), _amount);\r\n    }\r\n\r\n    /*\r\n    @notice Returns approximate amount of token locked in this contract\r\n    @dev Output may vary depending on price pulled from external DeFi contracts\r\n    */\r\n    function totalAssets() external view virtual returns (uint);\r\n\r\n    /*\r\n    @notice Deposit into strategy\r\n    @param _amount Amount of token to deposit from fund manager\r\n    @param _min Minimum amount borrowed\r\n    */\r\n    function deposit(uint _amount, uint _min) external virtual;\r\n\r\n    /*\r\n    @notice Withdraw token from this contract\r\n    @dev Only callable by fund manager\r\n    @dev Returns current loss = debt to fund manager - total assets\r\n    */\r\n    function withdraw(uint _amount) external virtual returns (uint);\r\n\r\n    /*\r\n    @notice Repay fund manager\r\n    @param _amount Amount of token to repay to fund manager\r\n    @param _min Minimum amount repaid\r\n    @dev Call report after this to report any loss\r\n    */\r\n    function repay(uint _amount, uint _min) external virtual;\r\n\r\n    /*\r\n    @notice Claim any reward tokens, sell for token\r\n    @param _minProfit Minumum amount of token to gain from selling rewards\r\n    */\r\n    function claimRewards(uint _minProfit) external virtual;\r\n\r\n    /*\r\n    @notice Free up any profit over debt\r\n    */\r\n    function skim() external virtual;\r\n\r\n    /*\r\n    @notice Report gain or loss back to fund manager\r\n    @param _minTotal Minimum value of total assets.\r\n               Used to protect against price manipulation.\r\n    @param _maxTotal Maximum value of total assets Used\r\n               Used to protect against price manipulation.  \r\n    */\r\n    function report(uint _minTotal, uint _maxTotal) external virtual;\r\n\r\n    /*\r\n    @notice Claim rewards, skim and report\r\n    @param _minProfit Minumum amount of token to gain from selling rewards\r\n    @param _minTotal Minimum value of total assets.\r\n               Used to protect against price manipulation.\r\n    @param _maxTotal Maximum value of total assets Used\r\n               Used to protect against price manipulation.  \r\n    */\r\n    function harvest(\r\n        uint _minProfit,\r\n        uint _minTotal,\r\n        uint _maxTotal\r\n    ) external virtual;\r\n\r\n    /*\r\n    @notice Migrate to new version of this strategy\r\n    @param _strategy Address of new strategy\r\n    @dev Only callable by fund manager\r\n    */\r\n    function migrate(address _strategy) external virtual;\r\n\r\n    /*\r\n    @notice Transfer token accidentally sent here back to admin\r\n    @param _token Address of token to transfer\r\n    */\r\n    function sweep(address _token) external virtual;\r\n}\r\n\r\ncontract StrategyConvexUsdp is Strategy {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    // Uniswap and Sushiswap //\r\n    // UNISWAP = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    // SUSHISWAP = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\r\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    // address of DEX (uniswap or sushiswap) to use for selling reward tokens\r\n    // CRV, CVX\r\n    address[2] public dex;\r\n\r\n    address private constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\r\n    address private constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\r\n\r\n    // Solc 0.7 cannot create constant arrays\r\n    address[2] private REWARDS = [CRV, CVX];\r\n\r\n    // Convex //\r\n    Booster private constant BOOSTER =\r\n        Booster(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\r\n    // pool id\r\n    uint private constant PID = 28;\r\n    BaseRewardPool private constant REWARD =\r\n        BaseRewardPool(0x24DfFd1949F888F91A0c8341Fc98a3F280a782a8);\r\n    bool public shouldClaimExtras = true;\r\n\r\n    // Curve //\r\n    // Deposit USDP + 3CRV\r\n    DepositZapUsdp3Crv private constant ZAP =\r\n        DepositZapUsdp3Crv(0x3c8cAee4E09296800f8D29A68Fa3837e2dae4940);\r\n    // StableSwap USDP + 3CRV (meta pool)\r\n    StableSwapUsdp3Crv private constant CURVE_POOL =\r\n        StableSwapUsdp3Crv(0x42d7025938bEc20B69cBae5A77421082407f053A);\r\n    // LP token for curve pool (USDP / 3CRV)\r\n    IERC20 private constant CURVE_LP =\r\n        IERC20(0x7Eb40E450b9655f4B3cC4259BCC731c63ff55ae6);\r\n\r\n    // prevent slippage from deposit / withdraw\r\n    uint public slip = 100;\r\n    uint private constant SLIP_MAX = 10000;\r\n\r\n    /*\r\n    0 - USDP\r\n    1 - DAI\r\n    2 - USDC\r\n    3 - USDT\r\n    */\r\n    // multipliers to normalize token decimals to 10 ** 18\r\n    uint[4] private MULS = [1, 1, 1e12, 1e12];\r\n    uint private immutable MUL; // multiplier of token\r\n    uint private immutable INDEX; // index of token\r\n\r\n    // DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F\r\n    // USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\r\n    // USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7\r\n\r\n    constructor(\r\n        address _token,\r\n        address _fundManager,\r\n        address _treasury,\r\n        uint _index\r\n    ) Strategy(_token, _fundManager, _treasury) {\r\n        // disable USDP\r\n        require(_index > 0, \"index = 0\");\r\n        INDEX = _index;\r\n        MUL = MULS[_index];\r\n\r\n        (address lptoken, , , address crvRewards, , ) = BOOSTER.poolInfo(PID);\r\n        require(address(CURVE_LP) == lptoken, \"curve pool lp != pool info lp\");\r\n        require(address(REWARD) == crvRewards, \"reward != pool info reward\");\r\n\r\n        IERC20(_token).safeApprove(address(ZAP), type(uint).max);\r\n        // deposit into BOOSTER\r\n        CURVE_LP.safeApprove(address(BOOSTER), type(uint).max);\r\n        // withdraw from ZAP\r\n        CURVE_LP.safeApprove(address(ZAP), type(uint).max);\r\n\r\n        _setDex(0, 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F); // CRV - sushiswap\r\n        _setDex(1, 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F); // CVX - sushiswap\r\n    }\r\n\r\n    function _setDex(uint _i, address _dex) private {\r\n        IERC20 reward = IERC20(REWARDS[_i]);\r\n\r\n        // disallow previous dex\r\n        if (dex[_i] != address(0)) {\r\n            reward.safeApprove(dex[_i], 0);\r\n        }\r\n\r\n        dex[_i] = _dex;\r\n\r\n        // approve new dex\r\n        reward.safeApprove(_dex, type(uint).max);\r\n    }\r\n\r\n    function setDex(uint _i, address _dex) external onlyTimeLockOrAdmin {\r\n        require(_dex != address(0), \"dex = 0 address\");\r\n        _setDex(_i, _dex);\r\n    }\r\n\r\n    /*\r\n    @notice Set max slippage for deposit and withdraw from Curve pool\r\n    @param _slip Max amount of slippage allowed\r\n    */\r\n    function setSlip(uint _slip) external onlyAuthorized {\r\n        require(_slip <= SLIP_MAX, \"slip > max\");\r\n        slip = _slip;\r\n    }\r\n\r\n    // @dev Claim extra rewards from Convex\r\n    function setShouldClaimExtras(bool _shouldClaimExtras) external onlyAuthorized {\r\n        shouldClaimExtras = _shouldClaimExtras;\r\n    }\r\n\r\n    function _totalAssets() private view returns (uint) {\r\n        /*\r\n        s0 = shares in meta pool\r\n        p0 = price per share of meta pool\r\n        s1 = shares in base pool\r\n        p1 = price per share of base pool\r\n        a = amount of tokens (DAI, USDC, USDT)\r\n\r\n        s1 = s0 * p0\r\n        a = s1 * p1\r\n\r\n        a = s0 * p0 * p1\r\n        */\r\n        // amount of Curve LP tokens in Convex\r\n        uint lpBal = REWARD.balanceOf(address(this));\r\n        // amount of USDP or DAI, USDC, USDT converted from Curve LP\r\n        // BASE_POOL.get_virtual_price is included in CURVE_POOL.get_virtual_price\r\n        // so CURVE_POOL.get_virtual_price = p0 * p1\r\n        uint bal = lpBal.mul(CURVE_POOL.get_virtual_price()) / (MUL * 1e18);\r\n\r\n        bal = bal.add(token.balanceOf(address(this)));\r\n\r\n        return bal;\r\n    }\r\n\r\n    function totalAssets() external view override returns (uint) {\r\n        return _totalAssets();\r\n    }\r\n\r\n    function _deposit() private {\r\n        uint bal = token.balanceOf(address(this));\r\n        if (bal > 0) {\r\n            uint[4] memory amounts;\r\n            amounts[INDEX] = bal;\r\n            /*\r\n            shares = token amount * multiplier * 1e18 / price per share\r\n            */\r\n            uint pricePerShare = CURVE_POOL.get_virtual_price();\r\n            uint shares = bal.mul(MUL).mul(1e18).div(pricePerShare);\r\n            uint min = shares.mul(SLIP_MAX - slip) / SLIP_MAX;\r\n\r\n            ZAP.add_liquidity(amounts, min);\r\n        }\r\n\r\n        uint lpBal = CURVE_LP.balanceOf(address(this));\r\n        if (lpBal > 0) {\r\n            require(BOOSTER.deposit(PID, lpBal, true), \"deposit failed\");\r\n        }\r\n    }\r\n\r\n    function deposit(uint _amount, uint _min) external override onlyAuthorized {\r\n        require(_amount > 0, \"deposit = 0\");\r\n\r\n        uint borrowed = fundManager.borrow(_amount);\r\n        require(borrowed >= _min, \"borrowed < min\");\r\n\r\n        _deposit();\r\n        emit Deposit(_amount, borrowed);\r\n    }\r\n\r\n    function _calcSharesToWithdraw(\r\n        uint _amount,\r\n        uint _total,\r\n        uint _totalShares\r\n    ) private pure returns (uint) {\r\n        /*\r\n        calculate shares to withdraw\r\n\r\n        a = amount of token to withdraw\r\n        T = total amount of token locked in external liquidity pool\r\n        s = shares to withdraw\r\n        P = total shares deposited into external liquidity pool\r\n\r\n        a / T = s / P\r\n        s = a / T * P\r\n        */\r\n        if (_total > 0) {\r\n            // avoid rounding errors and cap shares to be <= total shares\r\n            if (_amount >= _total) {\r\n                return _totalShares;\r\n            }\r\n            return _amount.mul(_totalShares) / _total;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function _withdraw(uint _amount) private returns (uint) {\r\n        uint bal = token.balanceOf(address(this));\r\n        if (_amount <= bal) {\r\n            return _amount;\r\n        }\r\n\r\n        uint total = _totalAssets();\r\n\r\n        if (_amount >= total) {\r\n            _amount = total;\r\n        }\r\n\r\n        uint need = _amount - bal;\r\n        uint totalShares = REWARD.balanceOf(address(this));\r\n        // total assets is always >= bal\r\n        uint shares = _calcSharesToWithdraw(need, total - bal, totalShares);\r\n\r\n        // withdraw from Convex\r\n        if (shares > 0) {\r\n            // true = claim CRV\r\n            require(REWARD.withdrawAndUnwrap(shares, false), \"reward withdraw failed\");\r\n        }\r\n\r\n        // withdraw from Curve\r\n        uint lpBal = CURVE_LP.balanceOf(address(this));\r\n        if (shares > lpBal) {\r\n            shares = lpBal;\r\n        }\r\n\r\n        if (shares > 0) {\r\n            uint min = need.mul(SLIP_MAX - slip) / SLIP_MAX;\r\n            ZAP.remove_liquidity_one_coin(shares, int128(INDEX), min);\r\n        }\r\n\r\n        uint balAfter = token.balanceOf(address(this));\r\n        if (balAfter < _amount) {\r\n            return balAfter;\r\n        }\r\n        // balAfter >= _amount >= total\r\n        // requested to withdraw all so return balAfter\r\n        if (_amount >= total) {\r\n            return balAfter;\r\n        }\r\n        // requested withdraw < all\r\n        return _amount;\r\n    }\r\n\r\n    function withdraw(uint _amount) external override onlyFundManager returns (uint) {\r\n        require(_amount > 0, \"withdraw = 0\");\r\n\r\n        // availabe <= _amount\r\n        uint available = _withdraw(_amount);\r\n\r\n        uint loss = 0;\r\n        uint debt = fundManager.getDebt(address(this));\r\n        uint total = _totalAssets();\r\n        if (debt > total) {\r\n            loss = debt - total;\r\n        }\r\n\r\n        if (available > 0) {\r\n            token.safeTransfer(msg.sender, available);\r\n        }\r\n\r\n        emit Withdraw(_amount, available, loss);\r\n\r\n        return loss;\r\n    }\r\n\r\n    function repay(uint _amount, uint _min) external override onlyAuthorized {\r\n        require(_amount > 0, \"repay = 0\");\r\n        // availabe <= _amount\r\n        uint available = _withdraw(_amount);\r\n        uint repaid = fundManager.repay(available);\r\n        require(repaid >= _min, \"repaid < min\");\r\n\r\n        emit Repay(_amount, repaid);\r\n    }\r\n\r\n    /*\r\n    @dev Uniswap fails with zero address so no check is necessary here\r\n    */\r\n    function _swap(\r\n        address _dex,\r\n        address _tokenIn,\r\n        address _tokenOut,\r\n        uint _amount\r\n    ) private {\r\n        // create dynamic array with 3 elements\r\n        address[] memory path = new address[](3);\r\n        path[0] = _tokenIn;\r\n        path[1] = WETH;\r\n        path[2] = _tokenOut;\r\n\r\n        UniswapV2Router(_dex).swapExactTokensForTokens(\r\n            _amount,\r\n            1,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _claimRewards(uint _minProfit) private {\r\n        // calculate profit = balance of token after - balance of token before\r\n        uint diff = token.balanceOf(address(this));\r\n\r\n        require(\r\n            REWARD.getReward(address(this), shouldClaimExtras),\r\n            \"get reward failed\"\r\n        );\r\n\r\n        for (uint i = 0; i < REWARDS.length; i++) {\r\n            uint rewardBal = IERC20(REWARDS[i]).balanceOf(address(this));\r\n            if (rewardBal > 0) {\r\n                _swap(dex[i], REWARDS[i], address(token), rewardBal);\r\n            }\r\n        }\r\n\r\n        diff = token.balanceOf(address(this)) - diff;\r\n        require(diff >= _minProfit, \"profit < min\");\r\n\r\n        // transfer performance fee to treasury\r\n        if (diff > 0) {\r\n            uint fee = diff.mul(perfFee) / PERF_FEE_MAX;\r\n            if (fee > 0) {\r\n                token.safeTransfer(treasury, fee);\r\n                diff = diff.sub(fee);\r\n            }\r\n        }\r\n\r\n        emit ClaimRewards(diff);\r\n    }\r\n\r\n    function claimRewards(uint _minProfit) external override onlyAuthorized {\r\n        _claimRewards(_minProfit);\r\n    }\r\n\r\n    function _skim() private {\r\n        uint total = _totalAssets();\r\n        uint debt = fundManager.getDebt(address(this));\r\n        require(total > debt, \"total <= debt\");\r\n\r\n        uint profit = total - debt;\r\n        // reassign to actual amount withdrawn\r\n        profit = _withdraw(profit);\r\n\r\n        emit Skim(total, debt, profit);\r\n    }\r\n\r\n    function skim() external override onlyAuthorized {\r\n        _skim();\r\n    }\r\n\r\n    function _report(uint _minTotal, uint _maxTotal) private {\r\n        uint total = _totalAssets();\r\n        require(total >= _minTotal, \"total < min\");\r\n        require(total <= _maxTotal, \"total > max\");\r\n\r\n        uint gain = 0;\r\n        uint loss = 0;\r\n        uint free = 0; // balance of token\r\n        uint debt = fundManager.getDebt(address(this));\r\n        if (total > debt) {\r\n            gain = total - debt;\r\n\r\n            free = token.balanceOf(address(this));\r\n            if (gain > free) {\r\n                gain = free;\r\n            }\r\n        } else {\r\n            loss = debt - total;\r\n        }\r\n\r\n        if (gain > 0 || loss > 0) {\r\n            fundManager.report(gain, loss);\r\n        }\r\n\r\n        emit Report(gain, loss, free, total, debt);\r\n    }\r\n\r\n    function report(uint _minTotal, uint _maxTotal) external override onlyAuthorized {\r\n        _report(_minTotal, _maxTotal);\r\n    }\r\n\r\n    function harvest(\r\n        uint _minProfit,\r\n        uint _minTotal,\r\n        uint _maxTotal\r\n    ) external override onlyAuthorized {\r\n        _claimRewards(_minProfit);\r\n        _skim();\r\n        _report(_minTotal, _maxTotal);\r\n    }\r\n\r\n    function migrate(address _strategy) external override onlyFundManager {\r\n        Strategy strat = Strategy(_strategy);\r\n        require(address(strat.token()) == address(token), \"strategy token != token\");\r\n        require(\r\n            address(strat.fundManager()) == address(fundManager),\r\n            \"strategy fund manager != fund manager\"\r\n        );\r\n        uint bal = _withdraw(type(uint).max);\r\n        token.safeApprove(_strategy, bal);\r\n        strat.transferTokenFrom(address(this), bal);\r\n    }\r\n\r\n    /*\r\n    @notice Transfer token accidentally sent here to admin\r\n    @param _token Address of token to transfer\r\n    */\r\n    function sweep(address _token) external override onlyAuthorized {\r\n        for (uint i = 0; i < REWARDS.length; i++) {\r\n            require(_token != REWARDS[i], \"protected token\");\r\n        }\r\n        IERC20(_token).safeTransfer(admin, IERC20(_token).balanceOf(address(this)));\r\n    }\r\n}\r\n\r\ninterface UniswapV2Router {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\ncontract StrategyConvexUsdpDai is StrategyConvexUsdp {\r\n    constructor(address _fundManager, address _treasury)\r\n        StrategyConvexUsdp(\r\n            0x6B175474E89094C44Da98b954EedeAC495271d0F,\r\n            _fundManager,\r\n            _treasury,\r\n            1\r\n        )\r\n    {}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"timeLock\",\"type\":\"address\"}],\"name\":\"AcceptTimeLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"Authorize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"ClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowed\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repaid\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"free\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"Report\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fundManager\",\"type\":\"address\"}],\"name\":\"SetFundManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextTimeLock\",\"type\":\"address\"}],\"name\":\"SetNextTimeLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"SetTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"Skim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptTimeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_authorized\",\"type\":\"bool\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minProfit\",\"type\":\"uint256\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundManager\",\"outputs\":[{\"internalType\":\"contract IFundManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTotal\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTimeLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perfFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTotal\",\"type\":\"uint256\"}],\"name\":\"report\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_i\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dex\",\"type\":\"address\"}],\"name\":\"setDex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundManager\",\"type\":\"address\"}],\"name\":\"setFundManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextTimeLock\",\"type\":\"address\"}],\"name\":\"setNextTimeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setPerfFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldClaimExtras\",\"type\":\"bool\"}],\"name\":\"setShouldClaimExtras\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slip\",\"type\":\"uint256\"}],\"name\":\"setSlip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldClaimExtras\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slip\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferTokenFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"StrategyConvexUsdpDai","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008a90fade80feadcdd595c4f3611eb1886c924b6100000000000000000000000086d10751b18f3fe331c146546868a07224a8598b","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9a15e914083fb55792c680d5678611eeb977c33d9214c0e5db97c7333561760c"}]}