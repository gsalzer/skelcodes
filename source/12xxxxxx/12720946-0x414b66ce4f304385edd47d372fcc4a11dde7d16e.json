{"status":"1","message":"OK","result":[{"SourceCode":"/**\r\n * SPDX-License-Identifier: UNLICENSED\r\n */\r\npragma solidity =0.6.10;\r\n\r\n// File: contracts/interfaces/OpynPricerInterface.sol\r\n\r\ninterface OpynPricerInterface {\r\n    function getPrice() external view returns (uint256);\r\n\r\n    function getHistoricalPrice(uint80 _roundId) external view returns (uint256, uint256);\r\n}\r\n\r\n// File: contracts/packages/oz/Context.sol\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal virtual view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal virtual view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/packages/oz/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/packages/oz/SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/core/Oracle.sol\r\n\r\n/**\r\n * @author Opyn Team\r\n * @title Oracle Module\r\n * @notice The Oracle module sets, retrieves, and stores USD prices (USD per asset) for underlying, collateral, and strike assets\r\n * manages pricers that are used for different assets\r\n */\r\ncontract Oracle is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /// @dev structure that stores price of asset and timestamp when the price was stored\r\n    struct Price {\r\n        uint256 price;\r\n        uint256 timestamp; // timestamp at which the price is pushed to this oracle\r\n    }\r\n\r\n    //// @dev disputer is a role defined by the owner that has the ability to dispute a price during the dispute period\r\n    address internal disputer;\r\n\r\n    bool migrated;\r\n\r\n    /// @dev mapping of asset pricer to its locking period\r\n    /// locking period is the period of time after the expiry timestamp where a price can not be pushed\r\n    mapping(address => uint256) internal pricerLockingPeriod;\r\n    /// @dev mapping of asset pricer to its dispute period\r\n    /// dispute period is the period of time after an expiry price has been pushed where a price can be disputed\r\n    mapping(address => uint256) internal pricerDisputePeriod;\r\n    /// @dev mapping between an asset and its pricer\r\n    mapping(address => address) internal assetPricer;\r\n    /// @dev mapping between asset, expiry timestamp, and the Price structure at the expiry timestamp\r\n    mapping(address => mapping(uint256 => Price)) internal storedPrice;\r\n    /// @dev mapping between stable asset and price\r\n    mapping(address => uint256) internal stablePrice;\r\n\r\n    /// @notice emits an event when the disputer is updated\r\n    event DisputerUpdated(address indexed newDisputer);\r\n    /// @notice emits an event when the pricer is updated for an asset\r\n    event PricerUpdated(address indexed asset, address indexed pricer);\r\n    /// @notice emits an event when the locking period is updated for a pricer\r\n    event PricerLockingPeriodUpdated(address indexed pricer, uint256 lockingPeriod);\r\n    /// @notice emits an event when the dispute period is updated for a pricer\r\n    event PricerDisputePeriodUpdated(address indexed pricer, uint256 disputePeriod);\r\n    /// @notice emits an event when an expiry price is updated for a specific asset\r\n    event ExpiryPriceUpdated(\r\n        address indexed asset,\r\n        uint256 indexed expiryTimestamp,\r\n        uint256 price,\r\n        uint256 onchainTimestamp\r\n    );\r\n    /// @notice emits an event when the disputer disputes a price during the dispute period\r\n    event ExpiryPriceDisputed(\r\n        address indexed asset,\r\n        uint256 indexed expiryTimestamp,\r\n        uint256 disputedPrice,\r\n        uint256 newPrice,\r\n        uint256 disputeTimestamp\r\n    );\r\n    /// @notice emits an event when a stable asset price changes\r\n    event StablePriceUpdated(address indexed asset, uint256 price);\r\n\r\n    /**\r\n     * @notice function to mgirate asset prices from old oracle to new deployed oracle\r\n     * @dev this can only be called by owner, should be used at the deployment time before setting Oracle module into AddressBook\r\n     * @param _asset asset address\r\n     * @param _expiries array of expiries timestamps\r\n     * @param _prices array of prices\r\n     */\r\n    function migrateOracle(\r\n        address _asset,\r\n        uint256[] calldata _expiries,\r\n        uint256[] calldata _prices\r\n    ) external onlyOwner {\r\n        require(!migrated, \"Oracle: migration already done\");\r\n        require(_expiries.length == _prices.length, \"Oracle: invalid migration data\");\r\n\r\n        for (uint256 i; i < _expiries.length; i++) {\r\n            storedPrice[_asset][_expiries[i]] = Price(_prices[i], now);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice end migration process\r\n     * @dev can only be called by owner, should be called before setting Oracle module into AddressBook\r\n     */\r\n    function endMigration() external onlyOwner {\r\n        migrated = true;\r\n    }\r\n\r\n    /**\r\n     * @notice sets the pricer for an asset\r\n     * @dev can only be called by the owner\r\n     * @param _asset asset address\r\n     * @param _pricer pricer address\r\n     */\r\n    function setAssetPricer(address _asset, address _pricer) external onlyOwner {\r\n        require(_pricer != address(0), \"Oracle: cannot set pricer to address(0)\");\r\n        require(stablePrice[_asset] == 0, \"Oracle: could not set a pricer for stable asset\");\r\n\r\n        assetPricer[_asset] = _pricer;\r\n\r\n        emit PricerUpdated(_asset, _pricer);\r\n    }\r\n\r\n    /**\r\n     * @notice sets the locking period for a pricer\r\n     * @dev can only be called by the owner\r\n     * @param _pricer pricer address\r\n     * @param _lockingPeriod locking period\r\n     */\r\n    function setLockingPeriod(address _pricer, uint256 _lockingPeriod) external onlyOwner {\r\n        pricerLockingPeriod[_pricer] = _lockingPeriod;\r\n\r\n        emit PricerLockingPeriodUpdated(_pricer, _lockingPeriod);\r\n    }\r\n\r\n    /**\r\n     * @notice sets the dispute period for a pricer\r\n     * @dev can only be called by the owner\r\n     * for a composite pricer (ie CompoundPricer) that depends on or calls other pricers, ensure\r\n     * that the dispute period for the composite pricer is longer than the dispute period for the\r\n     * asset pricer that it calls to ensure safe usage as a dispute in the other pricer will cause\r\n     * the need for a dispute with the composite pricer's price\r\n     * @param _pricer pricer address\r\n     * @param _disputePeriod dispute period\r\n     */\r\n    function setDisputePeriod(address _pricer, uint256 _disputePeriod) external onlyOwner {\r\n        pricerDisputePeriod[_pricer] = _disputePeriod;\r\n\r\n        emit PricerDisputePeriodUpdated(_pricer, _disputePeriod);\r\n    }\r\n\r\n    /**\r\n     * @notice set the disputer address\r\n     * @dev can only be called by the owner\r\n     * @param _disputer disputer address\r\n     */\r\n    function setDisputer(address _disputer) external onlyOwner {\r\n        disputer = _disputer;\r\n\r\n        emit DisputerUpdated(_disputer);\r\n    }\r\n\r\n    /**\r\n     * @notice set stable asset price\r\n     * @dev price should be scaled by 1e8\r\n     * @param _asset asset address\r\n     * @param _price price\r\n     */\r\n    function setStablePrice(address _asset, uint256 _price) external onlyOwner {\r\n        require(assetPricer[_asset] == address(0), \"Oracle: could not set stable price for an asset with pricer\");\r\n\r\n        stablePrice[_asset] = _price;\r\n\r\n        emit StablePriceUpdated(_asset, _price);\r\n    }\r\n\r\n    /**\r\n     * @notice dispute an asset price during the dispute period\r\n     * @dev only the disputer can dispute a price during the dispute period, by setting a new one\r\n     * @param _asset asset address\r\n     * @param _expiryTimestamp expiry timestamp\r\n     * @param _price the correct price\r\n     */\r\n    function disputeExpiryPrice(\r\n        address _asset,\r\n        uint256 _expiryTimestamp,\r\n        uint256 _price\r\n    ) external {\r\n        require(msg.sender == disputer, \"Oracle: caller is not the disputer\");\r\n        require(!isDisputePeriodOver(_asset, _expiryTimestamp), \"Oracle: dispute period over\");\r\n\r\n        Price storage priceToUpdate = storedPrice[_asset][_expiryTimestamp];\r\n\r\n        require(priceToUpdate.timestamp != 0, \"Oracle: price to dispute does not exist\");\r\n\r\n        uint256 oldPrice = priceToUpdate.price;\r\n        priceToUpdate.price = _price;\r\n\r\n        emit ExpiryPriceDisputed(_asset, _expiryTimestamp, oldPrice, _price, now);\r\n    }\r\n\r\n    /**\r\n     * @notice submits the expiry price to the oracle, can only be set from the pricer\r\n     * @dev asset price can only be set after the locking period is over and before the dispute period has started\r\n     * @param _asset asset address\r\n     * @param _expiryTimestamp expiry timestamp\r\n     * @param _price asset price at expiry\r\n     */\r\n    function setExpiryPrice(\r\n        address _asset,\r\n        uint256 _expiryTimestamp,\r\n        uint256 _price\r\n    ) external {\r\n        require(msg.sender == assetPricer[_asset], \"Oracle: caller is not authorized to set expiry price\");\r\n        require(isLockingPeriodOver(_asset, _expiryTimestamp), \"Oracle: locking period is not over yet\");\r\n        require(storedPrice[_asset][_expiryTimestamp].timestamp == 0, \"Oracle: dispute period started\");\r\n\r\n        storedPrice[_asset][_expiryTimestamp] = Price(_price, now);\r\n        emit ExpiryPriceUpdated(_asset, _expiryTimestamp, _price, now);\r\n    }\r\n\r\n    /**\r\n     * @notice get a live asset price from the asset's pricer contract\r\n     * @param _asset asset address\r\n     * @return price scaled by 1e8, denominated in USD\r\n     * e.g. 17568900000 => 175.689 USD\r\n     */\r\n    function getPrice(address _asset) external view returns (uint256) {\r\n        uint256 price = stablePrice[_asset];\r\n\r\n        if (price == 0) {\r\n            require(assetPricer[_asset] != address(0), \"Oracle: Pricer for this asset not set\");\r\n\r\n            price = OpynPricerInterface(assetPricer[_asset]).getPrice();\r\n        }\r\n\r\n        return price;\r\n    }\r\n\r\n    /**\r\n     * @notice get the asset price at specific expiry timestamp\r\n     * @param _asset asset address\r\n     * @param _expiryTimestamp expiry timestamp\r\n     * @return price scaled by 1e8, denominated in USD\r\n     * @return isFinalized True, if the price is finalized, False if not\r\n     */\r\n    function getExpiryPrice(address _asset, uint256 _expiryTimestamp) external view returns (uint256, bool) {\r\n        uint256 price = stablePrice[_asset];\r\n        bool isFinalized = true;\r\n\r\n        if (price == 0) {\r\n            price = storedPrice[_asset][_expiryTimestamp].price;\r\n            isFinalized = isDisputePeriodOver(_asset, _expiryTimestamp);\r\n        }\r\n\r\n        return (price, isFinalized);\r\n    }\r\n\r\n    /**\r\n     * @notice get the pricer for an asset\r\n     * @param _asset asset address\r\n     * @return pricer address\r\n     */\r\n    function getPricer(address _asset) external view returns (address) {\r\n        return assetPricer[_asset];\r\n    }\r\n\r\n    /**\r\n     * @notice get the disputer address\r\n     * @return disputer address\r\n     */\r\n    function getDisputer() external view returns (address) {\r\n        return disputer;\r\n    }\r\n\r\n    /**\r\n     * @notice get a pricer's locking period\r\n     * locking period is the period of time after the expiry timestamp where a price can not be pushed\r\n     * @dev during the locking period an expiry price can not be submitted to this contract\r\n     * @param _pricer pricer address\r\n     * @return locking period\r\n     */\r\n    function getPricerLockingPeriod(address _pricer) external view returns (uint256) {\r\n        return pricerLockingPeriod[_pricer];\r\n    }\r\n\r\n    /**\r\n     * @notice get a pricer's dispute period\r\n     * dispute period is the period of time after an expiry price has been pushed where a price can be disputed\r\n     * @dev during the dispute period, the disputer can dispute the submitted price and modify it\r\n     * @param _pricer pricer address\r\n     * @return dispute period\r\n     */\r\n    function getPricerDisputePeriod(address _pricer) external view returns (uint256) {\r\n        return pricerDisputePeriod[_pricer];\r\n    }\r\n\r\n    /**\r\n     * @notice get historical asset price and timestamp\r\n     * @dev if asset is a stable asset, will return stored price and timestamp equal to now\r\n     * @param _asset asset address to get it's historical price\r\n     * @param _roundId chainlink round id\r\n     * @return price and round timestamp\r\n     */\r\n    function getChainlinkRoundData(address _asset, uint80 _roundId) external view returns (uint256, uint256) {\r\n        uint256 price = stablePrice[_asset];\r\n        uint256 timestamp = now;\r\n\r\n        if (price == 0) {\r\n            require(assetPricer[_asset] != address(0), \"Oracle: Pricer for this asset not set\");\r\n\r\n            (price, timestamp) = OpynPricerInterface(assetPricer[_asset]).getHistoricalPrice(_roundId);\r\n        }\r\n\r\n        return (price, timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice check if the locking period is over for setting the asset price at a particular expiry timestamp\r\n     * @param _asset asset address\r\n     * @param _expiryTimestamp expiry timestamp\r\n     * @return True if locking period is over, False if not\r\n     */\r\n    function isLockingPeriodOver(address _asset, uint256 _expiryTimestamp) public view returns (bool) {\r\n        uint256 price = stablePrice[_asset];\r\n\r\n        if (price == 0) {\r\n            address pricer = assetPricer[_asset];\r\n            uint256 lockingPeriod = pricerLockingPeriod[pricer];\r\n\r\n            return now > _expiryTimestamp.add(lockingPeriod);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice check if the dispute period is over\r\n     * @param _asset asset address\r\n     * @param _expiryTimestamp expiry timestamp\r\n     * @return True if dispute period is over, False if not\r\n     */\r\n    function isDisputePeriodOver(address _asset, uint256 _expiryTimestamp) public view returns (bool) {\r\n        uint256 price = stablePrice[_asset];\r\n\r\n        if (price == 0) {\r\n            // check if the pricer has a price for this expiry timestamp\r\n            Price memory price = storedPrice[_asset][_expiryTimestamp];\r\n            if (price.timestamp == 0) {\r\n                return false;\r\n            }\r\n\r\n            address pricer = assetPricer[_asset];\r\n            uint256 disputePeriod = pricerDisputePeriod[pricer];\r\n\r\n            return now > price.timestamp.add(disputePeriod);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDisputer\",\"type\":\"address\"}],\"name\":\"DisputerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputedPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeTimestamp\",\"type\":\"uint256\"}],\"name\":\"ExpiryPriceDisputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expiryTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"onchainTimestamp\",\"type\":\"uint256\"}],\"name\":\"ExpiryPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pricer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputePeriod\",\"type\":\"uint256\"}],\"name\":\"PricerDisputePeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pricer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockingPeriod\",\"type\":\"uint256\"}],\"name\":\"PricerLockingPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pricer\",\"type\":\"address\"}],\"name\":\"PricerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"StablePriceUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"disputeExpiryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getChainlinkRoundData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDisputer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"getExpiryPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getPricer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pricer\",\"type\":\"address\"}],\"name\":\"getPricerDisputePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pricer\",\"type\":\"address\"}],\"name\":\"getPricerLockingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"isDisputePeriodOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"}],\"name\":\"isLockingPeriodOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_expiries\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"}],\"name\":\"migrateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pricer\",\"type\":\"address\"}],\"name\":\"setAssetPricer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pricer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_disputePeriod\",\"type\":\"uint256\"}],\"name\":\"setDisputePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_disputer\",\"type\":\"address\"}],\"name\":\"setDisputer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_expiryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setExpiryPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pricer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lockingPeriod\",\"type\":\"uint256\"}],\"name\":\"setLockingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setStablePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Oracle","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d4767afb3cde0207135c4d1a384e5baa3448019af1b3b1c5740a38756b0bb322"}]}