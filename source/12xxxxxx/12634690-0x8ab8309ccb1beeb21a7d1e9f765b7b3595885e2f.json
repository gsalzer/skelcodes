{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.2;\r\n\r\ninterface ManagementList {\r\n    function isManager(address accountAddress) external returns (bool);\r\n}\r\n\r\ncontract Manageable {\r\n    ManagementList public managementList;\r\n\r\n    constructor(address _managementListAddress) {\r\n        managementList = ManagementList(_managementListAddress);\r\n    }\r\n\r\n    modifier onlyManagers() {\r\n        bool isManager = managementList.isManager(msg.sender);\r\n        require(isManager, \"ManagementList: caller is not a manager\");\r\n        _;\r\n    }\r\n}\r\n\r\ninterface IOracle {\r\n    function getPriceUsdcRecommended(address tokenAddress)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\ncontract PricesHelper is Manageable {\r\n    address public oracleAddress;\r\n\r\n    struct TokenPrice {\r\n        address tokenId;\r\n        uint256 priceUsdc;\r\n    }\r\n\r\n    constructor(address _oracleAddress, address _managementListAddress) Manageable(_managementListAddress) {\r\n        require(_oracleAddress != address(0), \"Missing oracle address\");\r\n        oracleAddress = _oracleAddress;\r\n    }\r\n\r\n    function tokensPrices(address[] memory tokensAddresses)\r\n        external\r\n        view\r\n        returns (TokenPrice[] memory)\r\n    {\r\n        TokenPrice[] memory _tokensPrices =\r\n            new TokenPrice[](tokensAddresses.length);\r\n        for (\r\n            uint256 tokenIdx = 0;\r\n            tokenIdx < tokensAddresses.length;\r\n            tokenIdx++\r\n        ) {\r\n            address tokenAddress = tokensAddresses[tokenIdx];\r\n            _tokensPrices[tokenIdx] = TokenPrice({\r\n                tokenId: tokenAddress,\r\n                priceUsdc: IOracle(oracleAddress).getPriceUsdcRecommended(tokenAddress)\r\n            });\r\n        }\r\n        return _tokensPrices;\r\n    }\r\n    \r\n    function updateOracleAddress(address _oracleAddress) external onlyManagers {\r\n        oracleAddress = _oracleAddress;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_managementListAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"managementList\",\"outputs\":[{\"internalType\":\"contract ManagementList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensPrices\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"priceUsdc\",\"type\":\"uint256\"}],\"internalType\":\"struct PricesHelper.TokenPrice[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"updateOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PricesHelper","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000083d95e0d5f402511db06817aff3f9ea88224b030000000000000000000000000f64e58ee8c7badc741a7ea98fb65488084385674","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://fb54c84807ce0cd5cba153f03af3d6884eeefbd791cc534a6e9ca19ce706e723"}]}