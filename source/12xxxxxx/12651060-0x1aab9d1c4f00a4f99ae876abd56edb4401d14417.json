{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.7.6;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor(address owner) public {\r\n        _owner = owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(\r\n            isOwner(),\r\n            \"Only contract owner is allowed to perform this operation\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\npragma solidity 0.7.6;\r\n\r\ncontract ExecutorManager is Ownable {\r\n    address[] internal executors;\r\n    mapping(address => bool) internal executorStatus;\r\n\r\n    event ExecutorAdded(address executor, address owner);\r\n    event ExecutorRemoved(address executor, address owner);\r\n\r\n    // MODIFIERS\r\n    modifier onlyExecutor() {\r\n        require(\r\n            executorStatus[msg.sender],\r\n            \"You are not allowed to perform this operation\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(address owner) public Ownable(owner) {\r\n        require( owner != address(0), \"owner cannot be zero\");\r\n    }\r\n\r\n    function getExecutorStatus(address executor)\r\n        public\r\n        view\r\n        returns (bool status)\r\n    {\r\n        status = executorStatus[executor];\r\n    }\r\n\r\n    function getAllExecutors() public view returns (address[] memory) {\r\n        return executors;\r\n    }\r\n\r\n    //Register new Executors\r\n    function addExecutors(address[] calldata executorArray) external onlyOwner {\r\n        for (uint256 i = 0; i < executorArray.length; i++) {\r\n            addExecutor(executorArray[i]);\r\n        }\r\n    }\r\n\r\n    // Register single executor\r\n    function addExecutor(address executorAddress) public onlyOwner {\r\n        require(executorAddress != address(0), \"executor address can not be 0\");\r\n        executors.push(executorAddress);\r\n        executorStatus[executorAddress] = true;\r\n        emit ExecutorAdded(executorAddress, msg.sender);\r\n    }\r\n\r\n    //Remove registered Executors\r\n    function removeExecutors(address[] calldata executorArray) external onlyOwner {\r\n        for (uint256 i = 0; i < executorArray.length; i++) {\r\n            removeExecutor(executorArray[i]);\r\n        }\r\n    }\r\n\r\n    // Remove Register single executor\r\n    function removeExecutor(address executorAddress) public onlyOwner {\r\n        require(executorAddress != address(0), \"executor address can not be 0\");\r\n        executorStatus[executorAddress] = false;\r\n        emit ExecutorRemoved(executorAddress, msg.sender);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ExecutorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ExecutorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executorAddress\",\"type\":\"address\"}],\"name\":\"addExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"executorArray\",\"type\":\"address[]\"}],\"name\":\"addExecutors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllExecutors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"getExecutorStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executorAddress\",\"type\":\"address\"}],\"name\":\"removeExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"executorArray\",\"type\":\"address[]\"}],\"name\":\"removeExecutors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ExecutorManager","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f86b30c63e068dbb6bddea6fe76bf92f194dc53c","EVMVersion":"istanbul","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://0a4978a78f672dd77ad9f5d5ad693c1a867bfbc279cf5b986421eb9a4a7126b9"}]}