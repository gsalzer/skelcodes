{"status":"1","message":"OK","result":[{"SourceCode":"pragma solidity ^0.8.2;\r\n//SPDX-License-Identifier: MIT\r\n\r\n/*\r\n* LeoBridge: Swap ERC20 <--> BEP20\r\n*\r\n* @fbslo, 2021\r\n*/\r\n\r\ncontract LeoBridge {\r\n    address payable public owner;\r\n    address public leo;\r\n    string public hiveAccount;\r\n    \r\n    address public router; //UNSIWAP ROUTER\r\n    IUniswapV2Router02 uniswapRouter;\r\n    \r\n    event Entry(address _inputToken, uint256 _inputAmount, uint256 _minAmountOut, uint256 outputAmount, address _recepient);\r\n    event Exit(address _exitToken, uint256 _inputAmount, uint256 _outputAmount, address recepient);\r\n    \r\n    modifier ownerOnly {\r\n        require(msg.sender == owner, 'Restricted to owner');\r\n        _;\r\n    }\r\n\r\n    constructor(address _router, address _leo, string memory _hiveAccount) {\r\n        router = _router;\r\n        owner = payable(msg.sender);\r\n        leo = _leo;\r\n        hiveAccount = _hiveAccount;\r\n        uniswapRouter = IUniswapV2Router02(_router);\r\n    }\r\n\r\n    function entrance(address _inputToken, uint256 _inputAmount, uint256 _minAmountOut, address[] calldata _path, address _recepient) public {\r\n        require(_path[_path.length - 1] == leo, 'Trade must end with LEO');\r\n        \r\n        //You need to approve this contract to spend input tokens\r\n        ERC20(_inputToken).transferFrom(msg.sender, address(this), _inputAmount);\r\n        \r\n        //Swap input token on uniswap for LEO\r\n        ERC20(_inputToken).approve(address(router), _inputAmount);\r\n        uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(_inputAmount, _minAmountOut, _path, address(this), block.timestamp + 15);\r\n        \r\n        //Unwrap LEO\r\n        ERC20(leo).approve(address(leo), amounts[amounts.length - 1]);\r\n        ERC20(leo).convertTokenWithTransfer(amounts[amounts.length - 1], hiveAccount); \r\n        \r\n        emit Entry(_inputToken, _inputAmount, _minAmountOut, amounts[amounts.length - 1], _recepient);\r\n    }\r\n\r\n    function exit(address _exitToken, uint256 _inputAmount, uint256 _minAmountOut, address[] calldata _path, address _recepient) public {\r\n        require(_path[0] == leo, 'Trade must start with LEO');\r\n          \r\n        //You need to approve this contract to spend LEO tokens\r\n        ERC20(leo).transferFrom(msg.sender, address(this), _inputAmount);\r\n        \r\n        //Swap input token on uniswap for LEO\r\n        ERC20(leo).approve(address(router), _inputAmount);\r\n        uint256[] memory amounts = uniswapRouter.swapExactTokensForTokens(_inputAmount, _minAmountOut, _path, _recepient, block.timestamp + 15);\r\n        \r\n        emit Exit(_exitToken, _inputAmount, amounts[amounts.length - 1], _recepient);\r\n    }\r\n    \r\n    //contract is stateless, so no tokens/ETH/BNB should ever be here.\r\n    function rescue(address _token, uint256 _amount, bool _isETH) public ownerOnly {\r\n        if (_isETH){\r\n            owner.transfer(address(this).balance);\r\n        } else {\r\n            ERC20(_token).transfer(owner, _amount);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address _owner) external returns (uint256);\r\n    function transfer(address _to, uint _value) external;\r\n    function transferFrom(address _from, address _to, uint _value) external;\r\n    function approve(address _spender, uint _value) external;\r\n    function convertTokenWithTransfer(uint256 amount, string memory username) external;\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_leo\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_hiveAccount\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recepient\",\"type\":\"address\"}],\"name\":\"Entry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_exitToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_recepient\",\"type\":\"address\"}],\"name\":\"entrance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exitToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_recepient\",\"type\":\"address\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hiveAccount\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isETH\",\"type\":\"bool\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"LeoBridge","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d00000000000000000000000073a9fb46e228628f8f9bb9004eca4f4f529d3998000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000096c656f6272696467650000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9276660fc887206c98af9c39ac7302d8b481a8a3687f95f8614221b982e43195"}]}