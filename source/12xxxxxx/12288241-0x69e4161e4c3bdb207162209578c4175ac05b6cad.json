{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity 0.6.11;\r\n\r\ninterface IController {\r\n    function ADMIN_ROLE() external view returns (bytes32);\r\n\r\n    function HARVESTER_ROLE() external view returns (bytes32);\r\n\r\n    function admin() external view returns (address);\r\n\r\n    function treasury() external view returns (address);\r\n\r\n    function setAdmin(address _admin) external;\r\n\r\n    function setTreasury(address _treasury) external;\r\n\r\n    function grantRole(bytes32 _role, address _addr) external;\r\n\r\n    function revokeRole(bytes32 _role, address _addr) external;\r\n\r\n    /*\r\n    @notice Set strategy for vault\r\n    @param _vault Address of vault\r\n    @param _strategy Address of strategy\r\n    @param _min Minimum undelying token current strategy must return. Prevents slippage\r\n    */\r\n    function setStrategy(\r\n        address _vault,\r\n        address _strategy,\r\n        uint _min\r\n    ) external;\r\n\r\n    // calls to strategy\r\n    /*\r\n    @notice Invest token in vault into strategy\r\n    @param _vault Address of vault\r\n    */\r\n    function invest(address _vault) external;\r\n\r\n    function harvest(address _strategy) external;\r\n\r\n    function skim(address _strategy) external;\r\n\r\n    /*\r\n    @notice Withdraw from strategy to vault\r\n    @param _strategy Address of strategy\r\n    @param _amount Amount of underlying token to withdraw\r\n    @param _min Minimum amount of underlying token to withdraw\r\n    */\r\n    function withdraw(\r\n        address _strategy,\r\n        uint _amount,\r\n        uint _min\r\n    ) external;\r\n\r\n    /*\r\n    @notice Withdraw all from strategy to vault\r\n    @param _strategy Address of strategy\r\n    @param _min Minimum amount of underlying token to withdraw\r\n    */\r\n    function withdrawAll(address _strategy, uint _min) external;\r\n\r\n    /*\r\n    @notice Exit from strategy\r\n    @param _strategy Address of strategy\r\n    @param _min Minimum amount of underlying token to withdraw\r\n    */\r\n    function exit(address _strategy, uint _min) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint a, uint b) internal pure returns (bool, uint) {\r\n        uint c = a + b;\r\n        if (c < a) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint a, uint b) internal pure returns (bool, uint) {\r\n        if (b > a) return (false, 0);\r\n        return (true, a - b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint a, uint b) internal pure returns (bool, uint) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) return (true, 0);\r\n        uint c = a * b;\r\n        if (c / a != b) return (false, 0);\r\n        return (true, c);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint a, uint b) internal pure returns (bool, uint) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a / b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint a, uint b) internal pure returns (bool, uint) {\r\n        if (b == 0) return (false, 0);\r\n        return (true, a % b);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) return 0;\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint a,\r\n        uint b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint a,\r\n        uint b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint) {\r\n        require(b > 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint a,\r\n        uint b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint) {\r\n        require(b > 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data)\r\n        internal\r\n        view\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transfer.selector, to, value)\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, value)\r\n        );\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint value\r\n    ) internal {\r\n        uint newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint value\r\n    ) internal {\r\n        uint newAllowance =\r\n            token.allowance(address(this), spender).sub(\r\n                value,\r\n                \"SafeERC20: decreased allowance below zero\"\r\n            );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata =\r\n            address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(\r\n                abi.decode(returndata, (bool)),\r\n                \"SafeERC20: ERC20 operation did not succeed\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/protocol/IStrategyETH_V3.sol\r\n\r\n/*\r\nversion 1.3.0\r\n\r\nChanges listed here do not affect interaction with other contracts (Vault and Controller)\r\n- remove functions that are not called by other contracts (vaults and controller)\r\n*/\r\n\r\ninterface IStrategyETH_V3 {\r\n    function admin() external view returns (address);\r\n\r\n    function controller() external view returns (address);\r\n\r\n    function vault() external view returns (address);\r\n\r\n    /*\r\n    @notice Returns address of underlying token (ETH or ERC20)\r\n    @dev Return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE for ETH strategy\r\n    */\r\n    function underlying() external view returns (address);\r\n\r\n    /*\r\n    @notice Returns total amount of underlying token transferred from vault\r\n    */\r\n    function totalDebt() external view returns (uint);\r\n\r\n    /*\r\n    @notice Returns amount of underlying token locked in this contract\r\n    @dev Output may vary depending on price of liquidity provider token\r\n         where the underlying token is invested\r\n    */\r\n    function totalAssets() external view returns (uint);\r\n\r\n    /*\r\n    @notice Deposit ETH\r\n    */\r\n    function deposit() external payable;\r\n\r\n    /*\r\n    @notice Withdraw `_amount` underlying token\r\n    @param amount Amount of underlying token to withdraw\r\n    */\r\n    function withdraw(uint _amount) external;\r\n\r\n    /*\r\n    @notice Withdraw all underlying token from strategy\r\n    */\r\n    function withdrawAll() external;\r\n\r\n    /*\r\n    @notice Sell any staking rewards for underlying\r\n    */\r\n    function harvest() external;\r\n\r\n    /*\r\n    @notice Increase total debt if totalAssets > totalDebt\r\n    */\r\n    function skim() external;\r\n\r\n    /*\r\n    @notice Exit from strategy, transfer all underlying tokens back to vault\r\n    */\r\n    function exit() external;\r\n\r\n    /*\r\n    @notice Transfer token accidentally sent here to admin\r\n    @param _token Address of token to transfer\r\n    @dev _token must not be equal to underlying token\r\n    */\r\n    function sweep(address _token) external;\r\n}\r\n\r\n// File: contracts/StrategyETH_V3.sol\r\n\r\n/*\r\nChanges\r\n- remove functions related to slippage and delta\r\n- add keeper\r\n- remove _increaseDebt\r\n- remove _decreaseDebt\r\n*/\r\n\r\n// used inside harvest\r\n\r\nabstract contract StrategyETH_V3 is IStrategyETH_V3 {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint;\r\n\r\n    address public override admin;\r\n    address public override controller;\r\n    address public immutable override vault;\r\n    // Placeholder address to indicate that this is ETH strategy\r\n    address public constant override underlying =\r\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    // some functions specific to strategy cannot be called by controller\r\n    // so we introduce a new role\r\n    address public keeper;\r\n\r\n    // total amount of underlying transferred from vault\r\n    uint public override totalDebt;\r\n\r\n    // performance fee sent to treasury when harvest() generates profit\r\n    uint public performanceFee = 500;\r\n    uint private constant PERFORMANCE_FEE_CAP = 2000; // upper limit to performance fee\r\n    uint internal constant PERFORMANCE_FEE_MAX = 10000;\r\n\r\n    // Force exit, in case normal exit fails\r\n    bool public forceExit;\r\n\r\n    constructor(\r\n        address _controller,\r\n        address _vault,\r\n        address _keeper\r\n    ) public {\r\n        require(_controller != address(0), \"controller = zero address\");\r\n        require(_vault != address(0), \"vault = zero address\");\r\n        require(_keeper != address(0), \"keeper = zero address\");\r\n\r\n        admin = msg.sender;\r\n        controller = _controller;\r\n        vault = _vault;\r\n        keeper = _keeper;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"!admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthorized() {\r\n        require(\r\n            msg.sender == admin ||\r\n                msg.sender == controller ||\r\n                msg.sender == vault ||\r\n                msg.sender == keeper,\r\n            \"!authorized\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function setAdmin(address _admin) external onlyAdmin {\r\n        require(_admin != address(0), \"admin = zero address\");\r\n        admin = _admin;\r\n    }\r\n\r\n    function setController(address _controller) external onlyAdmin {\r\n        require(_controller != address(0), \"controller = zero address\");\r\n        controller = _controller;\r\n    }\r\n\r\n    function setKeeper(address _keeper) external onlyAdmin {\r\n        require(_keeper != address(0), \"keeper = zero address\");\r\n        keeper = _keeper;\r\n    }\r\n\r\n    function setPerformanceFee(uint _fee) external onlyAdmin {\r\n        require(_fee <= PERFORMANCE_FEE_CAP, \"performance fee > cap\");\r\n        performanceFee = _fee;\r\n    }\r\n\r\n    function setForceExit(bool _forceExit) external onlyAdmin {\r\n        forceExit = _forceExit;\r\n    }\r\n\r\n    function totalAssets() external view virtual override returns (uint);\r\n\r\n    function deposit() external payable virtual override;\r\n\r\n    function withdraw(uint) external virtual override;\r\n\r\n    function withdrawAll() external virtual override;\r\n\r\n    function harvest() external virtual override;\r\n\r\n    function skim() external virtual override;\r\n\r\n    function exit() external virtual override;\r\n\r\n    function sweep(address) external virtual override;\r\n}\r\n\r\n// File: contracts/interfaces/uniswap/Uniswap.sol\r\n\r\ninterface Uniswap {\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n}\r\n\r\n// File: contracts/interfaces/compound/CEth.sol\r\n\r\ninterface CEth {\r\n    function mint() external payable;\r\n\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n\r\n    function borrow(uint borrowAmount) external returns (uint);\r\n\r\n    function repayBorrow() external payable;\r\n\r\n    function redeem(uint) external returns (uint);\r\n\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n\r\n    function balanceOfUnderlying(address account) external returns (uint);\r\n\r\n    function getAccountSnapshot(address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint,\r\n            uint,\r\n            uint,\r\n            uint\r\n        );\r\n}\r\n\r\n// File: contracts/interfaces/compound/Comptroller.sol\r\n\r\ninterface Comptroller {\r\n    function markets(address cToken)\r\n        external\r\n        view\r\n        returns (\r\n            bool,\r\n            uint,\r\n            bool\r\n        );\r\n\r\n    // Claim all the COMP accrued by holder in all markets\r\n    function claimComp(address holder) external;\r\n\r\n    // TODO: use this to save gas?\r\n    // Claim all the COMP accrued by holder in specific markets\r\n    function claimComp(address holder, address[] calldata cTokens) external;\r\n}\r\n\r\n// File: contracts/strategies/StrategyCompLevEth.sol\r\n\r\n/*\r\nAPY estimate\r\n\r\nc = collateral ratio\r\ni_s = supply interest rate (APY)\r\ni_b = borrow interest rate (APY)\r\nc_s = supply COMP reward (APY)\r\nc_b = borrow COMP reward (APY)\r\n\r\nleverage APY = 1 / (1 - c) * (i_s + c_s - c * (i_b - c_b))\r\n\r\nplugging some numbers\r\n31.08 = 4 * (7.01 + 4 - 0.75 * (9.08 - 4.76))\r\n*/\r\n\r\n/*\r\nState transitions and valid transactions\r\n\r\n### State ###\r\nbuff = buffer\r\ns = supplied\r\nb = borrowed\r\n\r\n### Transactions ###\r\ndl = deleverage\r\nl = leverage\r\nw = withdraw\r\nd = deposit\r\ns(x) = set butter to x\r\n\r\n### State Transitions ###\r\n\r\n                             s(max)\r\n(buf = max, s > 0, b > 0) <--------- (buf = min, s > 0, b > 0)\r\n          |                               |        ^\r\n          | dl, w                         | dl, w  | l, d\r\n          |                               |        |\r\n          V                               V        | \r\n(buf = max, s > 0, b = 0) ---------> (buf = min, s > 0, b = 0)\r\n                             s(min)\r\n*/\r\n\r\ncontract StrategyCompLevEth is StrategyETH_V3 {\r\n    event Deposit(uint amount);\r\n    event Withdraw(uint amount);\r\n    event Harvest(uint profit);\r\n    event Skim(uint profit);\r\n\r\n    // Uniswap //\r\n    address private constant UNISWAP = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    // Compound //\r\n    address private constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n    address private constant COMP = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\r\n    address private immutable cToken;\r\n\r\n    // buffer to stay below market collateral ratio, scaled up by 1e18\r\n    uint public buffer = 0.04 * 1e18;\r\n\r\n    constructor(\r\n        address _controller,\r\n        address _vault,\r\n        address _cToken,\r\n        address _keeper\r\n    ) public StrategyETH_V3(_controller, _vault, _keeper) {\r\n        require(_cToken != address(0), \"cToken = zero address\");\r\n        cToken = _cToken;\r\n\r\n        // These tokens are never held by this contract\r\n        // so the risk of them getting stolen is minimal\r\n        IERC20(COMP).safeApprove(UNISWAP, type(uint).max);\r\n    }\r\n\r\n    receive() external payable {\r\n        // Don't allow vault to accidentally send ETH\r\n        require(msg.sender != vault, \"msg.sender = vault\");\r\n    }\r\n\r\n    function _sendEthToVault(uint _amount) private {\r\n        (bool sent, ) = vault.call{value: _amount}(\"\");\r\n        require(sent, \"Send ETH failed\");\r\n    }\r\n\r\n    function _increaseDebt(uint _amount) private {\r\n        totalDebt = totalDebt.add(_amount);\r\n    }\r\n\r\n    function _decreaseDebt(uint _amount) private {\r\n        if (_amount >= totalDebt) {\r\n            totalDebt = 0;\r\n        } else {\r\n            totalDebt -= _amount;\r\n        }\r\n        _sendEthToVault(_amount);\r\n    }\r\n\r\n    function _totalAssets() private view returns (uint) {\r\n        // WARNING: This returns balance last time someone transacted with cToken\r\n        (uint error, uint cTokenBal, uint borrowed, uint exchangeRate) =\r\n            CEth(cToken).getAccountSnapshot(address(this));\r\n\r\n        if (error > 0) {\r\n            // something is wrong, return 0\r\n            return 0;\r\n        }\r\n\r\n        uint supplied = cTokenBal.mul(exchangeRate) / 1e18;\r\n        if (supplied < borrowed) {\r\n            // something is wrong, return 0\r\n            return 0;\r\n        }\r\n\r\n        uint bal = address(this).balance;\r\n        // supplied >= borrowed\r\n        return bal.add(supplied - borrowed);\r\n    }\r\n\r\n    /*\r\n    @notice Returns amount of ETH locked in this contract\r\n    */\r\n    function totalAssets() external view override returns (uint) {\r\n        return _totalAssets();\r\n    }\r\n\r\n    /*\r\n    @dev buffer = 0 means safe collateral ratio = market collateral ratio\r\n         buffer = 1e18 means safe collateral ratio = 0\r\n    */\r\n    function setBuffer(uint _buffer) external onlyAuthorized {\r\n        require(_buffer > 0 && _buffer <= 1e18, \"buffer\");\r\n        buffer = _buffer;\r\n    }\r\n\r\n    function _getMarketCollateralRatio() private view returns (uint) {\r\n        /*\r\n        This can be changed by Compound Governance, with a minimum waiting\r\n        period of five days\r\n        */\r\n        (, uint col, ) = Comptroller(COMPTROLLER).markets(cToken);\r\n        return col;\r\n    }\r\n\r\n    function _getSafeCollateralRatio(uint _marketCol) private view returns (uint) {\r\n        if (_marketCol > buffer) {\r\n            return _marketCol - buffer;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    // Not view function\r\n    function _getSupplied() private returns (uint) {\r\n        return CEth(cToken).balanceOfUnderlying(address(this));\r\n    }\r\n\r\n    // Not view function\r\n    function _getBorrowed() private returns (uint) {\r\n        return CEth(cToken).borrowBalanceCurrent(address(this));\r\n    }\r\n\r\n    // Not view function. Call using static call from web3\r\n    function getLivePosition()\r\n        external\r\n        returns (\r\n            uint supplied,\r\n            uint borrowed,\r\n            uint marketCol,\r\n            uint safeCol\r\n        )\r\n    {\r\n        supplied = _getSupplied();\r\n        borrowed = _getBorrowed();\r\n        marketCol = _getMarketCollateralRatio();\r\n        safeCol = _getSafeCollateralRatio(marketCol);\r\n    }\r\n\r\n    // @dev This returns balance last time someone transacted with cToken\r\n    function getCachedPosition()\r\n        external\r\n        view\r\n        returns (\r\n            uint supplied,\r\n            uint borrowed,\r\n            uint marketCol,\r\n            uint safeCol\r\n        )\r\n    {\r\n        // ignore first output, which is error code\r\n        (, uint cTokenBal, uint _borrowed, uint exchangeRate) =\r\n            CEth(cToken).getAccountSnapshot(address(this));\r\n\r\n        supplied = cTokenBal.mul(exchangeRate) / 1e18;\r\n        borrowed = _borrowed;\r\n        marketCol = _getMarketCollateralRatio();\r\n        safeCol = _getSafeCollateralRatio(marketCol);\r\n    }\r\n\r\n    // @dev This modifier checks collateral ratio after leverage or deleverage\r\n    modifier checkCollateralRatio() {\r\n        _;\r\n        uint supplied = _getSupplied();\r\n        uint borrowed = _getBorrowed();\r\n        uint marketCol = _getMarketCollateralRatio();\r\n        uint safeCol = _getSafeCollateralRatio(marketCol);\r\n\r\n        // borrowed / supplied <= safe col\r\n        // supplied can = 0 so we check borrowed <= supplied * safe col\r\n        // max borrow\r\n        uint max = supplied.mul(safeCol) / 1e18;\r\n        require(borrowed <= max, \"borrowed > max\");\r\n    }\r\n\r\n    function _supply(uint _amount) private {\r\n        CEth(cToken).mint{value: _amount}();\r\n    }\r\n\r\n    // @dev Execute manual recovery by admin\r\n    // @dev `_amount` must be >= balance of ETH\r\n    function supply(uint _amount) external onlyAdmin {\r\n        _supply(_amount);\r\n    }\r\n\r\n    function _borrow(uint _amount) private {\r\n        require(CEth(cToken).borrow(_amount) == 0, \"borrow\");\r\n    }\r\n\r\n    // @dev Execute manual recovery by admin\r\n    function borrow(uint _amount) external onlyAdmin {\r\n        _borrow(_amount);\r\n    }\r\n\r\n    function _repay(uint _amount) private {\r\n        CEth(cToken).repayBorrow{value: _amount}();\r\n    }\r\n\r\n    // @dev Execute manual recovery by admin\r\n    // @dev `_amount` must be >= balance of ETH\r\n    function repay(uint _amount) external onlyAdmin {\r\n        _repay(_amount);\r\n    }\r\n\r\n    function _redeem(uint _amount) private {\r\n        require(CEth(cToken).redeemUnderlying(_amount) == 0, \"redeem\");\r\n    }\r\n\r\n    // @dev Execute manual recovery by admin\r\n    function redeem(uint _amount) external onlyAdmin {\r\n        _redeem(_amount);\r\n    }\r\n\r\n    function _getMaxLeverageRatio(uint _col) private pure returns (uint) {\r\n        /*\r\n        c = collateral ratio\r\n\r\n        geometric series converges to\r\n            1 / (1 - c)\r\n        */\r\n        // multiplied by 1e18\r\n        return uint(1e36).div(uint(1e18).sub(_col));\r\n    }\r\n\r\n    function _getBorrowAmount(\r\n        uint _supplied,\r\n        uint _borrowed,\r\n        uint _col\r\n    ) private pure returns (uint) {\r\n        /*\r\n        c = collateral ratio\r\n        s = supplied\r\n        b = borrowed\r\n        x = amount to borrow\r\n\r\n        (b + x) / s <= c\r\n        becomes\r\n        x <= sc - b\r\n        */\r\n        // max borrow\r\n        uint max = _supplied.mul(_col) / 1e18;\r\n        if (_borrowed >= max) {\r\n            return 0;\r\n        }\r\n        return max - _borrowed;\r\n    }\r\n\r\n    /*\r\n    Find total supply S_n after n iterations starting with\r\n    S_0 supplied and B_0 borrowed\r\n\r\n    c = collateral ratio\r\n    S_i = supplied after i iterations\r\n    B_i = borrowed after i iterations\r\n\r\n    S_0 = current supplied\r\n    B_0 = current borrowed\r\n\r\n    borrowed and supplied after n iterations\r\n        B_n = cS_(n-1)\r\n        S_n = S_(n-1) + (cS_(n-1) - B_(n-1))\r\n\r\n    you can prove using algebra and induction that\r\n        B_n / S_n <= c\r\n\r\n        S_n - S_(n-1) = c^(n-1) * (cS_0 - B_0)\r\n\r\n        S_n = S_0 + sum (c^i * (cS_0 - B_0)), 0 <= i <= n - 1\r\n            = S_0 + (1 - c^n) / (1 - c)\r\n\r\n        S_n <= S_0 + (cS_0 - B_0) / (1 - c)\r\n    */\r\n    function _leverage(uint _targetSupply) private checkCollateralRatio {\r\n        // buffer = 1e18 means safe collateral ratio = 0\r\n        if (buffer >= 1e18) {\r\n            return;\r\n        }\r\n\r\n        uint supplied = _getSupplied();\r\n        uint borrowed = _getBorrowed();\r\n        uint unleveraged = supplied.sub(borrowed); // supply with 0 leverage\r\n        require(_targetSupply >= unleveraged, \"leverage\");\r\n\r\n        uint marketCol = _getMarketCollateralRatio();\r\n        uint safeCol = _getSafeCollateralRatio(marketCol);\r\n        uint lev = _getMaxLeverageRatio(safeCol);\r\n        // 99% to be safe, and save gas\r\n        uint max = (unleveraged.mul(lev) / 1e18).mul(9900) / 10000;\r\n        if (_targetSupply >= max) {\r\n            _targetSupply = max;\r\n        }\r\n\r\n        uint i;\r\n        while (supplied < _targetSupply) {\r\n            // target is usually reached in 9 iterations\r\n            require(i < 25, \"max iteration\");\r\n\r\n            // use market collateral to calculate borrow amount\r\n            // this is done so that supplied can reach _targetSupply\r\n            // 99.99% is borrowed to be safe\r\n            uint borrowAmount =\r\n                _getBorrowAmount(supplied, borrowed, marketCol).mul(9999) / 10000;\r\n            require(borrowAmount > 0, \"borrow = 0\");\r\n\r\n            if (supplied.add(borrowAmount) > _targetSupply) {\r\n                // borrow > 0 since supplied < _targetSupply\r\n                borrowAmount = _targetSupply.sub(supplied);\r\n            }\r\n            _borrow(borrowAmount);\r\n            // end loop with _supply, this ensures no borrowed amount is unutilized\r\n            _supply(borrowAmount);\r\n\r\n            // supplied > _getSupplied(), by about 3 * 1e12 %, but we use local variable to save gas\r\n            supplied = supplied.add(borrowAmount);\r\n            // _getBorrowed == borrowed\r\n            borrowed = borrowed.add(borrowAmount);\r\n            i++;\r\n        }\r\n    }\r\n\r\n    function leverage(uint _targetSupply) external onlyAuthorized {\r\n        _leverage(_targetSupply);\r\n    }\r\n\r\n    function _deposit() private {\r\n        uint bal = address(this).balance;\r\n        if (bal > 0) {\r\n            _supply(bal);\r\n            // leverage to max\r\n            _leverage(type(uint).max);\r\n        }\r\n    }\r\n\r\n    /*\r\n    @notice Deposit ETH into this strategy\r\n    */\r\n    function deposit() external payable override onlyAuthorized {\r\n        require(msg.value > 0, \"deposit = 0\");\r\n\r\n        _increaseDebt(msg.value);\r\n        _deposit();\r\n\r\n        emit Deposit(msg.value);\r\n    }\r\n\r\n    function _getRedeemAmount(\r\n        uint _supplied,\r\n        uint _borrowed,\r\n        uint _col\r\n    ) private pure returns (uint) {\r\n        /*\r\n        c = collateral ratio\r\n        s = supplied\r\n        b = borrowed\r\n        r = redeem\r\n\r\n        b / (s - r) <= c\r\n        becomes\r\n        r <= s - b / c\r\n        */\r\n        // min supply\r\n        // b / c = min supply needed to borrow b\r\n        uint min = _borrowed.mul(1e18).div(_col);\r\n\r\n        if (_supplied <= min) {\r\n            return 0;\r\n        }\r\n        return _supplied - min;\r\n    }\r\n\r\n    /*\r\n    Find S_0, amount of supply with 0 leverage, after n iterations starting with\r\n    S_n supplied and B_n borrowed\r\n\r\n    c = collateral ratio\r\n    S_n = current supplied\r\n    B_n = current borrowed\r\n\r\n    S_(n-i) = supplied after i iterations\r\n    B_(n-i) = borrowed after i iterations\r\n    R_(n-i) = Redeemable after i iterations\r\n        = S_(n-i) - B_(n-i) / c\r\n        where B_(n-i) / c = min supply needed to borrow B_(n-i)\r\n\r\n    For 0 <= k <= n - 1\r\n        S_k = S_(k+1) - R_(k+1)\r\n        B_k = B_(k+1) - R_(k+1)\r\n    and\r\n        S_k - B_k = S_(k+1) - B_(k+1)\r\n    so\r\n        S_0 - B_0 = S_1 - S_2 = ... = S_n - B_n\r\n\r\n    S_0 has 0 leverage so B_0 = 0 and we get\r\n        S_0 = S_0 - B_0 = S_n - B_n\r\n    ------------------------------------------\r\n\r\n    Find S_(n-k), amount of supply, after k iterations starting with\r\n    S_n supplied and B_n borrowed\r\n\r\n    with algebra and induction you can derive that\r\n\r\n    R_(n-k) = R_n / c^k\r\n    S_(n-k) = S_n - sum R_(n-i), 0 <= i <= k - 1\r\n            = S_n - R_n * ((1 - 1/c^k) / (1 - 1/c))\r\n\r\n    Equation above is valid for S_(n - k) k < n\r\n    */\r\n    function _deleverage(uint _targetSupply) private checkCollateralRatio {\r\n        uint supplied = _getSupplied();\r\n        uint borrowed = _getBorrowed();\r\n        uint unleveraged = supplied.sub(borrowed);\r\n        require(_targetSupply <= supplied, \"deleverage\");\r\n\r\n        uint marketCol = _getMarketCollateralRatio();\r\n\r\n        // min supply\r\n        if (_targetSupply <= unleveraged) {\r\n            _targetSupply = unleveraged;\r\n        }\r\n\r\n        uint i;\r\n        while (supplied > _targetSupply) {\r\n            // target is usually reached in 8 iterations\r\n            require(i < 25, \"max iteration\");\r\n\r\n            // 99.99% to be safe\r\n            uint redeemAmount =\r\n                (_getRedeemAmount(supplied, borrowed, marketCol)).mul(9999) / 10000;\r\n            require(redeemAmount > 0, \"redeem = 0\");\r\n\r\n            if (supplied.sub(redeemAmount) < _targetSupply) {\r\n                // redeem > 0 since supplied > _targetSupply\r\n                redeemAmount = supplied.sub(_targetSupply);\r\n            }\r\n            _redeem(redeemAmount);\r\n            _repay(redeemAmount);\r\n\r\n            // supplied < _geSupplied(), by about 7 * 1e12 %\r\n            supplied = supplied.sub(redeemAmount);\r\n            // borrowed == _getBorrowed()\r\n            borrowed = borrowed.sub(redeemAmount);\r\n            i++;\r\n        }\r\n    }\r\n\r\n    function deleverage(uint _targetSupply) external onlyAuthorized {\r\n        _deleverage(_targetSupply);\r\n    }\r\n\r\n    // @dev Returns amount available for transfer\r\n    function _withdraw(uint _amount) private returns (uint) {\r\n        uint bal = address(this).balance;\r\n        if (bal >= _amount) {\r\n            return _amount;\r\n        }\r\n\r\n        uint redeemAmount = _amount - bal;\r\n        /*\r\n        c = collateral ratio\r\n        s = supplied\r\n        b = borrowed\r\n        r = amount to redeem\r\n        x = amount to repay\r\n\r\n        where\r\n            r <= s - b (can't redeem more than unleveraged supply)\r\n        and\r\n            x <= b (can't repay more than borrowed)\r\n        and\r\n            (b - x) / (s - x - r) <= c (stay below c after redeem and repay)\r\n\r\n        so pick x such that\r\n            (b - cs + cr) / (1 - c) <= x <= b\r\n\r\n        when b <= cs left side of equation above <= cr / (1 - c) so pick x such that\r\n            cr / (1 - c) <= x <= b\r\n        */\r\n        uint supplied = _getSupplied();\r\n        uint borrowed = _getBorrowed();\r\n        uint marketCol = _getMarketCollateralRatio();\r\n        uint safeCol = _getSafeCollateralRatio(marketCol);\r\n        uint unleveraged = supplied.sub(borrowed);\r\n\r\n        // r <= s - b\r\n        if (redeemAmount > unleveraged) {\r\n            redeemAmount = unleveraged;\r\n        }\r\n        // cr / (1 - c) <= x <= b\r\n        uint repayAmount = redeemAmount.mul(safeCol).div(uint(1e18).sub(safeCol));\r\n        if (repayAmount > borrowed) {\r\n            repayAmount = borrowed;\r\n        }\r\n\r\n        _deleverage(supplied.sub(repayAmount));\r\n        _redeem(redeemAmount);\r\n\r\n        uint balAfter = address(this).balance;\r\n        if (balAfter < _amount) {\r\n            return balAfter;\r\n        }\r\n        return _amount;\r\n    }\r\n\r\n    /*\r\n    @notice Withdraw undelying token to vault\r\n    @param _amount Amount of ETH to withdraw\r\n    @dev Caller should implement guard against slippage\r\n    */\r\n    function withdraw(uint _amount) external override onlyAuthorized {\r\n        require(_amount > 0, \"withdraw = 0\");\r\n        // available <= _amount\r\n        uint available = _withdraw(_amount);\r\n        if (available > 0) {\r\n            _decreaseDebt(available);\r\n        }\r\n\r\n        emit Withdraw(available);\r\n    }\r\n\r\n    // @dev withdraw all creates dust in supplied\r\n    function _withdrawAll() private {\r\n        _withdraw(type(uint).max);\r\n\r\n        // In case there is dust, re-calculate balance\r\n        uint bal = address(this).balance;\r\n        if (bal > 0) {\r\n            _sendEthToVault(bal);\r\n            totalDebt = 0;\r\n        }\r\n\r\n        emit Withdraw(bal);\r\n    }\r\n\r\n    /*\r\n    @notice Withdraw all ETH to vault\r\n    @dev Caller should implement guard agains slippage\r\n    */\r\n    function withdrawAll() external override onlyAuthorized {\r\n        _withdrawAll();\r\n    }\r\n\r\n    /*\r\n    @dev Uniswap fails with zero address so no check is necessary here\r\n    */\r\n    function _swapToEth(address _from, uint _amount) private {\r\n        // create dynamic array with 2 elements\r\n        address[] memory path = new address[](2);\r\n        path[0] = _from;\r\n        path[1] = WETH;\r\n\r\n        Uniswap(UNISWAP).swapExactTokensForETH(\r\n            _amount,\r\n            1,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _claimRewards() private {\r\n        // claim COMP\r\n        address[] memory cTokens = new address[](1);\r\n        cTokens[0] = cToken;\r\n        Comptroller(COMPTROLLER).claimComp(address(this), cTokens);\r\n\r\n        uint compBal = IERC20(COMP).balanceOf(address(this));\r\n        if (compBal > 0) {\r\n            _swapToEth(COMP, compBal);\r\n            // Now this contract has ETH\r\n        }\r\n    }\r\n\r\n    /*\r\n    @notice Claim and sell any rewards\r\n    */\r\n    function harvest() external override onlyAuthorized {\r\n        _claimRewards();\r\n\r\n        uint bal = address(this).balance;\r\n        if (bal > 0) {\r\n            // transfer fee to treasury\r\n            uint fee = bal.mul(performanceFee) / PERFORMANCE_FEE_MAX;\r\n            if (fee > 0) {\r\n                address treasury = IController(controller).treasury();\r\n                require(treasury != address(0), \"treasury = zero address\");\r\n                // treasury must be able to receive ETH\r\n                (bool sent, ) = treasury.call{value: fee}(\"\");\r\n                require(sent, \"Send ETH failed\");\r\n            }\r\n            // _supply() to decrease collateral ratio and earn interest\r\n            // use _supply() instead of _deposit() to save gas\r\n            uint profit = bal.sub(fee);\r\n            _supply(profit);\r\n\r\n            emit Harvest(profit);\r\n        }\r\n    }\r\n\r\n    /*\r\n    @notice Increase total debt if profit > 0\r\n    */\r\n    function skim() external override onlyAuthorized {\r\n        uint bal = address(this).balance;\r\n        uint supplied = _getSupplied();\r\n        uint borrowed = _getBorrowed();\r\n        uint unleveraged = supplied.sub(borrowed);\r\n        uint total = bal.add(unleveraged);\r\n        require(total > totalDebt, \"total <= debt\");\r\n\r\n        uint profit = total - totalDebt;\r\n\r\n        // Incrementing totalDebt has the same effect as transferring profit\r\n        // back to vault and then depositing into this strategy\r\n        // Here we simply increment totalDebt to save gas\r\n        totalDebt = total;\r\n\r\n        emit Skim(profit);\r\n    }\r\n\r\n    /*\r\n    @notice Exit from strategy, transfer all ETH back to vault\r\n            unless forceExit = true\r\n    */\r\n    function exit() external override onlyAuthorized {\r\n        if (forceExit) {\r\n            return;\r\n        }\r\n        _claimRewards();\r\n        _withdrawAll();\r\n    }\r\n\r\n    /*\r\n    @notice Transfer token accidentally sent here to admin\r\n    @param _token Address of token to transfer\r\n    */\r\n    function sweep(address _token) external override onlyAdmin {\r\n        require(_token != cToken, \"protected token\");\r\n        require(_token != COMP, \"protected token\");\r\n        IERC20(_token).safeTransfer(admin, IERC20(_token).balanceOf(address(this)));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"Skim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetSupply\",\"type\":\"uint256\"}],\"name\":\"deleverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCachedPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supplied\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketCol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safeCol\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLivePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supplied\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketCol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safeCol\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_targetSupply\",\"type\":\"uint256\"}],\"name\":\"leverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buffer\",\"type\":\"uint256\"}],\"name\":\"setBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_forceExit\",\"type\":\"bool\"}],\"name\":\"setForceExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"StrategyCompLevEth","CompilerVersion":"v0.6.11+commit.5ef660b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000019db7587b1ebcf1320cbf55626027365bcc8de2700000000000000000000000072e357f7635163493f153a0bd3f03c15c14a51c60000000000000000000000004ddc2d193948926d02f9b1fe9e1daa0718270ed500000000000000000000000086d10751b18f3fe331c146546868a07224a8598b","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://4b34c5935c4152006eaa5bb3ac4951ff5b11ac24becd1dee11f009a180d76722"}]}