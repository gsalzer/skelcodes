{"status":"1","message":"OK","result":[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.6.8;\r\ncontract _50Win {\r\n    struct Bet {\r\n        address creator;\r\n        address referrer;\r\n        uint256 time;\r\n        uint256 value;\r\n        uint256 betFor; //tails or heads\r\n    }\r\n    \r\n    address private _chef;\r\n    mapping(address => Bet) public Bets;\r\n    address[] public BetLUT;\r\n    uint256 private _chefTips;\r\n    uint256 public _tipsRate;\r\n    uint256 public _refRate;\r\n    uint256 public _cancelFee;\r\n    \r\n    event NewBet (address creator, uint256 betFor, uint256 value, uint256 time);\r\n    event CancelBet (address creator, uint256 betFor, uint256 value);\r\n    event WinBet (address indexed creator, address indexed joiner, address indexed ref, uint256 betFor, uint256 win, uint256 value, uint256 time);\r\n    \r\n    constructor () public {\r\n        _chef = msg.sender;\r\n        _tipsRate=500; _cancelFee=100; _refRate=100;// rate/10000 => 500 <=> 5%\r\n    }\r\n    \r\n    function toss() internal view returns(uint256) { return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, block.gaslimit, block.coinbase, block.number)))%2; }\r\n    \r\n    function send(address to, uint256 amt, uint256 tips, address ref) private returns (bool){\r\n        (bool sentTo,) = address(to).call{value : amt-tips}(\"\");\r\n        if(tips>0) {\r\n            if(ref != 0x0000000000000000000000000000000000000000) {\r\n                uint256 refEarn = amt/2*_refRate/10000;//sharing tips with referral\r\n                (bool sentRef,) = address(ref).call{value : refEarn}(\"\");\r\n                if(sentRef) tips -= refEarn;\r\n            }\r\n            \r\n            (bool sentFee,) = address(_chef).call{value : tips}(\"\");\r\n            _chefTips += tips;\r\n            return sentTo&&sentFee;\r\n        }\r\n        return sentTo;\r\n    }\r\n    \r\n    function removeBet(address addr) private {\r\n        for (uint256 i = 0; i < BetLUT.length; i++) {\r\n            if (BetLUT[i] == addr) {\r\n                delete Bets[addr];\r\n                BetLUT[i] = BetLUT[BetLUT.length - 1];\r\n                BetLUT.pop();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function createBet (uint256 betFor, address ref) public payable {\r\n        require(msg.value > 0, \"Cant bet for zero\"); require(betFor < 2, \"BetFor 1 or 0\");\r\n        require(msg.sender != ref, \"!self ref\");require(Bets[msg.sender].value == 0, \"You have a pending bet\");\r\n        Bets[msg.sender] = Bet({ creator: msg.sender, referrer: ref, value: msg.value, betFor: betFor, time: block.timestamp });\r\n        BetLUT.push(msg.sender);\r\n        emit NewBet(msg.sender, betFor, msg.value, block.timestamp);\r\n    }\r\n    \r\n    function cancelBet () public payable {\r\n        require(Bets[msg.sender].value > 0, \"You have no pending bet\");\r\n        uint256 fee = Bets[msg.sender].value * _cancelFee/10000;\r\n        require(send(msg.sender, Bets[msg.sender].value, fee, 0x0000000000000000000000000000000000000000), 'Cancel bet failed');\r\n        removeBet(msg.sender);\r\n        emit CancelBet (msg.sender, Bets[msg.sender].betFor, Bets[msg.sender].value);\r\n    }\r\n    \r\n    function takeBet (address with) public payable {\r\n        require(tx.origin == msg.sender, \"Humans only\");\r\n        Bet memory bet = Bets[with];\r\n        require(bet.value > 0, \"Bet is unavailable\");\r\n        require(msg.value > 0 && msg.value == bet.value, \"Unfair bet\");\r\n        uint256 tips = bet.value * _tipsRate/10000;\r\n        uint256 win = bet.value + msg.value;\r\n        uint256 winNum = toss();\r\n        if(winNum==bet.betFor) require(send(with, win, tips, bet.referrer), 'Reward failed');//creator win\r\n        else require(send(msg.sender, win, tips, bet.referrer), 'Reward failed');//joiner win\r\n        \r\n        removeBet(with);\r\n        emit WinBet (with, msg.sender, bet.referrer, bet.betFor, winNum, msg.value, block.timestamp);\r\n    }\r\n    \r\n    function countBets() public view returns (uint256) { return BetLUT.length; }\r\n    \r\n    function chefTips() public view returns (uint256) { require(msg.sender==_chef, \"!chef\"); return _chefTips; }\r\n    function setTipRate(uint256 rate) public { require(msg.sender==_chef, \"!chef\");require(rate <= 1500, \"hey chef! don't be greedy\");_tipsRate = rate; }\r\n    function setRefRate(uint256 rate) public { require(msg.sender==_chef, \"!chef\");require(rate <= 1500, \"nax 15%\");_refRate = rate; }\r\n    function setCancelRate(uint256 rate) public { require(msg.sender==_chef, \"!chef\");require(rate <= 300, \"max 3%\");_cancelFee = rate; }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betFor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CancelBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betFor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"NewBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"joiner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betFor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"win\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"WinBet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"BetLUT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Bets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betFor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_cancelFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_refRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tipsRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chefTips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"betFor\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"createBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setCancelRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRefRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setTipRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"with\",\"type\":\"address\"}],\"name\":\"takeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]","ContractName":"_50Win","CompilerVersion":"v0.6.8+commit.0bbfe453","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8cebfe880c29d2504d4f4f87b7244fae181ebef2e8de2e8afae029bd592595eb"}]}