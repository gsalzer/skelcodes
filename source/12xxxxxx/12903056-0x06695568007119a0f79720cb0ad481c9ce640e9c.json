{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/strategies/harvest/HarvestCrvEursStrategy.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.17 <0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeCast.sol';\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\n\\n\\n\\nimport '../BaseStrategy.sol';\\nimport '../../enums/ProtocolEnum.sol';\\nimport '../../external/harvest/HarvestVault.sol';\\nimport '../../external/harvest/HarvestStakePool.sol';\\nimport '../../external/chainlink/EthPriceFeed.sol';\\nimport './../../external/uniswap/IUniswapV2.sol';\\nimport './../../external/uniswap/IUniswapV3.sol';\\nimport '../../external/curve/ICurveFi.sol';\\n//import './../../external/sushi/Sushi.sol';\\nimport '../../dex/uniswap/SwapFarm2EursInUniswapV2.sol';\\n\\ncontract HarvestCrvEursStrategy is BaseStrategy, SwapFarm2EursInUniswapV2 {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    //投资crvEURS对应的金库，返回FARM_eursCRV (feursCRV)\\n    address public constant fVault = address(0x6eb941BD065b8a5bd699C5405A928c1f561e2e5a);\\n    //crvEURS二次抵押对应的池子\\n    address public constant fPool = address(0xf4d50f60D53a230abc8268c6697972CB255Cd940);\\n    //FARM币\\n    address public rewardToken = address(0xa0246c9032bC3A600820415aE600c6388619A14D);\\n    address constant EURS = address(0xdB25f211AB05b1c97D595516F45794528a807ad8);\\n    IERC20 sEURToken = IERC20(0xD71eCFF9342A5Ced620049e616c5035F1dB98620);\\n    IERC20 constant baseToken = IERC20(0x194eBd173F6cDacE046C53eACcE9B953F28411d1);\\n    // the address of the Curve protocol's pool for EURS and sEUR\\n    address public curveAddress = address(0x0Ce6a5fF5217e38315f87032CF90686C96627CAA);\\n    // 8位精度结果。其他汇率兑换：Ethereum Price Feeds https://docs.chain.link/docs/ethereum-addresses/\\n    address public EUR_USD = address(0xb49f677943BC038e9857d61E7d053CaA2C1734C1);\\n\\n    //uni v2 address\\n    address constant uniV2Address = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n    //WETH\\n    address constant WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    //USDC\\n    address constant USDC = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\n    //curve eurs pool address\\n    address constant curvePool = address(0x0Ce6a5fF5217e38315f87032CF90686C96627CAA);\\n    //sushi address\\n    address constant sushiAddress = address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\\n\\n    //上次doHardwork按币本位计价的资产总值\\n    uint256 internal lastTotalAssets = 0;\\n    //当日赎回\\n    uint256 internal dailyWithdrawAmount = 0;\\n\\n    constructor(address _vault) public {\\n        address[] memory tokens = new address[](1);\\n        tokens[0] = address(baseToken);\\n//        tokens[1] = address(sEURToken);\\n        initialize('HarvestCrvEursStrategy', uint16(ProtocolEnum.Harvest), _vault, tokens);\\n    }\\n\\n    function _getExchangePrice(address pairProxyAddress) internal view returns (int) {\\n        (uint80 roundID,int price,uint startedAt,uint timeStamp,uint80 answeredInRound) = AggregatorV3Interface(pairProxyAddress).latestRoundData();\\n        return price;\\n    }\\n\\n    /**\\n     * 计算基础币(USDT)与其它币种的数量关系，\\n     * sEUR没有汇率，暂时与ERUS比例为1:1\\n     * 如该池是CrvUSDN池，underlying是USDT数量，返回的则是EURS和sEUR的数量\\n     * @param amountUnderlying 需要投资USDT数量\\n     **/\\n    function calculate(uint256 amountUnderlying) external view override returns (uint256[] memory, uint256[] memory) {\\n        require(amountUnderlying > 0, 'amountUnderlying<=0');\\n        //一个单位ERU换几个单位USD\\n        int256 price = _getExchangePrice(EUR_USD);\\n        uint256 curveVirtualPrice = ICurveFi(curveAddress).get_virtual_price();\\n        uint256[] memory coinsAmount = new uint256[](1);\\n        coinsAmount[0] = amountUnderlying.mul(1e20).div(uint(price)).mul(1e18).div(curveVirtualPrice);\\n        uint256[] memory underlyingAmount = new uint256[](1);\\n        underlyingAmount[0] = amountUnderlying;\\n\\n        return (coinsAmount,underlyingAmount);\\n    }\\n\\n    function withdrawAllToVault() external onlyVault override {\\n        uint stakingAmount = HarvestStakePool(fPool).balanceOf(address(this));\\n        if (stakingAmount > 0){\\n            _claimRewards();\\n            HarvestStakePool(fPool).withdraw(stakingAmount);\\n            HarvestVault(fVault).withdraw(stakingAmount);\\n        }\\n        uint256 withdrawAmount = baseToken.balanceOf(address(this));\\n        if (withdrawAmount > 0){\\n            baseToken.safeTransfer(address(vault),withdrawAmount);\\n            dailyWithdrawAmount += withdrawAmount;\\n        }\\n    }\\n\\n    /**\\n    * amountUnderlying:需要的基础代币数量\\n    **/\\n    function withdrawToVault(uint256 amountUnderlying) external onlyVault override {\\n        ( uint256[] memory coinsAmount,) = this.calculate(amountUnderlying);\\n        uint256 needCrvEurs = coinsAmount[0];\\n\\n        uint256 balance = baseToken.balanceOf(address(this));\\n        if (balance >= needCrvEurs){\\n            baseToken.transfer(address(vault),needCrvEurs);\\n        } else {\\n            uint256 missAmount = needCrvEurs - balance;\\n            uint256 shares = missAmount\\n                                .mul(10 ** IERC20Metadata(fVault).decimals())\\n                                .div(HarvestVault(fVault).getPricePerFullShare());\\n\\n\\n            if (shares > 0){\\n\\n                shares = Math.min(shares,HarvestStakePool(fPool).balanceOf(address(this)));\\n                HarvestStakePool(fPool).withdraw(shares);\\n                HarvestVault(fVault).withdraw(shares);\\n                uint256 withdrawAmount = baseToken.balanceOf(address(this));\\n\\n                baseToken.safeTransfer(address(vault),withdrawAmount);\\n\\n                dailyWithdrawAmount += withdrawAmount;\\n\\n\\n            }\\n        }\\n\\n    }\\n\\n    /**\\n     * 第三方池的净值,单个yToken的价格(USDN)\\n     **/\\n    function getPricePerFullShare() external view override returns (uint256) {\\n        return HarvestVault(fVault).getPricePerFullShare();\\n    }\\n\\n    /**\\n     * 已经投资的underlying数量，策略实际投入的是不同的稳定币，这里涉及待投稳定币与underlying之间的换算\\n     **/\\n    function investedUnderlyingBalance() external view override returns (uint256) {\\n        uint256 stakingAmount = HarvestStakePool(fPool).balanceOf(address(this));\\n        uint256 balance = baseToken.balanceOf(address(this));\\n        uint256 crvEURSAmount = stakingAmount.mul(HarvestVault(fVault).getPricePerFullShare()).div(10 ** IERC20Metadata(fVault).decimals()).add(balance);\\n        int256 price = _getExchangePrice(EUR_USD);\\n        uint256 curveVirtualPrice = ICurveFi(curveAddress).get_virtual_price();\\n        return crvEURSAmount\\n                .mul(curveVirtualPrice)\\n                .div(1e18)\\n                .mul(uint(price))\\n                .div(1e8)\\n                .div(10 ** (IERC20Metadata(fVault).decimals() - 6));\\n    }\\n\\n    /**\\n     * 查看策略投资池子的总数量（priced in want）\\n     **/\\n    function getInvestVaultAssets() external view override returns (uint256) {\\n        int256 price = _getExchangePrice(EUR_USD);\\n        uint256 curveVirtualPrice = ICurveFi(curveAddress).get_virtual_price();\\n        uint256 crvEURSAmount = HarvestVault(fVault).getPricePerFullShare()\\n                                    .mul(IERC20(fVault).totalSupply())\\n                                    .div(10 ** IERC20Metadata(fVault).decimals());\\n        return crvEURSAmount.mul(curveVirtualPrice)\\n                .div(1e18)\\n                .mul(uint(price))\\n                .div(1e8)\\n                .div(10 ** (IERC20Metadata(fVault).decimals() - 6));\\n    }\\n\\n    /**\\n     * 针对策略的作业：\\n     * 1.提矿 & 换币（矿币换成策略所需的稳定币？）\\n     * 2.计算apy\\n     * 3.投资\\n     **/\\n    function doHardWorkInner() internal override {\\n        uint256 rewards = 0;\\n        if (HarvestStakePool(fPool).balanceOf(address(this)) > 0){\\n            rewards = _claimRewards();\\n        }\\n        _updateApy(rewards);\\n        _invest();\\n        lastTotalAssets = HarvestStakePool(fPool).balanceOf(address(this))\\n                            .mul(HarvestVault(fVault).getPricePerFullShare())\\n                            .div(10 ** IERC20Metadata(fVault).decimals());\\n        lastDoHardworkTimestamp = block.timestamp;\\n        dailyWithdrawAmount = 0;\\n    }\\n\\n    function _claimRewards() internal returns (uint256) {\\n        HarvestStakePool(fPool).getReward();\\n        uint256 amount = IERC20(rewardToken).balanceOf(address(this));\\n        if (amount == 0){\\n            return 0;\\n        }\\n\\n        //兑换成investToken\\n        //TODO::当Farm数量大于50时先从uniV2换成ETH然后再从curve换\\n        uint256 balanceBeforeSwap = IERC20(baseToken).balanceOf(address(this));\\n        //Farm swap to WETH from UniV2\\n        address[] memory path = new address[](2);\\n        path[0] = rewardToken;\\n        path[1] = USDC;\\n        IERC20(rewardToken).approve(uniV2Address,0);\\n        IERC20(rewardToken).approve(uniV2Address,amount);\\n\\n        // 矿币达到一定数量后，才去兑换，要不然会存在返回为0的情况。\\n        if(amount > 10**15){\\n            swapFarm2EursInUniswapV2(amount,0,1800);\\n            uint256 eursBalance = IERC20(EURS).balanceOf(address(this));\\n\\n            IERC20(EURS).safeApprove(curvePool,0);\\n            IERC20(EURS).safeApprove(curvePool,eursBalance);\\n            ICurveFi(curvePool).add_liquidity([eursBalance, 0], 0);\\n            uint256 balanceAfterSwap = IERC20(baseToken).balanceOf(address(this));\\n\\n            return balanceAfterSwap - balanceBeforeSwap;\\n        }\\n        return 0;\\n    }\\n\\n    function _updateApy(uint256 _rewards) internal {\\n        // 第一次投资时lastTotalAssets为0，不用计算apy\\n        if (lastTotalAssets > 0 && lastDoHardworkTimestamp > 0){\\n            uint256 totalAssets = HarvestStakePool(fPool).balanceOf(address(this))\\n                                    .mul(HarvestVault(fVault).getPricePerFullShare())\\n                                    .div(10 ** IERC20Metadata(fVault).decimals());\\n\\n            int assetsDelta = int(totalAssets + dailyWithdrawAmount + _rewards - lastTotalAssets);\\n            calculateProfitRate(lastTotalAssets,assetsDelta);\\n        }\\n    }\\n\\n\\n    function _invest() internal {\\n        uint256 balance = baseToken.balanceOf(address(this));\\n        if (balance > 0) {\\n            baseToken.safeApprove(fVault, 0);\\n            baseToken.safeApprove(fVault, balance);\\n            HarvestVault(fVault).deposit(balance);\\n\\n\\n            //stake\\n            uint256 lpAmount = IERC20(fVault).balanceOf(address(this));\\n            IERC20(fVault).safeApprove(fPool, 0);\\n            IERC20(fVault).safeApprove(fPool, lpAmount);\\n            HarvestStakePool(fPool).stake(lpAmount);\\n\\n            lastTotalAssets = HarvestStakePool(fPool).balanceOf(address(this)).mul(HarvestVault(fVault).getPricePerFullShare()).div(10 ** IERC20Metadata(fVault).decimals());\\n        }\\n    }\\n\\n    /**\\n     * 策略迁移\\n     **/\\n    function migrate(address _newStrategy) external override {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute.\\n        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/BaseStrategy.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.17 <0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeMath.sol';\\n\\n\\nimport './IStrategy.sol';\\nimport '../vault/IVault.sol';\\n\\nabstract contract BaseStrategy {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    string public name;\\n\\n    uint16 public protocol;\\n\\n    IVault public vault;\\n\\n    address[] public tokens;\\n\\n    uint256 internal constant BASIS_PRECISION = 1e18;\\n    //基础收益率，初始化时为1000000\\n    uint256 internal basisProfitRate;\\n    //有效时长，用于计算apy，若策略没有资金时，不算在有效时长内\\n    uint256 internal effectiveTime;\\n    //上次doHardwork的时间\\n    uint256 public lastDoHardworkTimestamp = 0;\\n\\n    function getTokens() external view returns (address[] memory) {\\n        return tokens;\\n    }\\n\\n    function setApy(uint256 nextBasisProfitRate, uint256 nextEffectiveTime) external onlyGovernance {\\n\\n        basisProfitRate = nextBasisProfitRate;\\n        effectiveTime = nextEffectiveTime;\\n        vault.strategyUpdate(this.investedUnderlyingBalance(),apy());\\n    }\\n\\n    //10000表示100%，当前apy的算法是一直累计过去的变化，有待改进\\n    function apy() public view returns (uint256) {\\n\\n        if (basisProfitRate <= BASIS_PRECISION) {\\n            return 0;\\n        }\\n        if (effectiveTime == 0) {\\n            return 0;\\n        }\\n        return (31536000 * (basisProfitRate - BASIS_PRECISION) * 10000) / (BASIS_PRECISION * effectiveTime);\\n    }\\n\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == vault.governance(), '!only governance');\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == address(vault), '!only vault');\\n        _;\\n    }\\n\\n    function initialize(\\n        string memory _name,\\n        uint16 _protocol,\\n        address _vault,\\n        address[] memory _tokens\\n    ) internal {\\n        name = _name;\\n        protocol = _protocol;\\n        vault = IVault(_vault);\\n        tokens = _tokens;\\n        effectiveTime = 0;\\n        basisProfitRate = BASIS_PRECISION;\\n    }\\n\\n\\n\\n    /**\\n     * 计算基础币与其它币种的数量关系\\n     * 如该池是CrvEURS池，underlying是USDT数量，返回的则是 EURS、SEUR的数量\\n     **/\\n    function calculate(uint256 amountUnderlying) external view virtual returns (uint256[] memory, uint256[] memory);\\n\\n    function withdrawAllToVault() external virtual;\\n\\n    /**\\n     * amountUnderlying:需要的基础代币数量\\n     **/\\n    function withdrawToVault(uint256 amountUnderlying) external virtual;\\n\\n    /**\\n     * 第三方池的净值\\n     **/\\n    function getPricePerFullShare() external view virtual returns (uint256);\\n\\n    /**\\n     * 已经投资的underlying数量，策略实际投入的是不同的稳定币，这里涉及待投稳定币与underlying之间的换算\\n     **/\\n    function investedUnderlyingBalance() external view virtual returns (uint256);\\n\\n    /**\\n     * 查看策略投资池子的总资产\\n     **/\\n    function getInvestVaultAssets() external view virtual returns (uint256);\\n\\n    /**\\n     * 针对策略的作业：\\n     * 1.提矿 & 换币（矿币换成策略所需的稳定币？）\\n     * 2.计算apy\\n     * 3.投资\\n     **/\\n    function doHardWork() external onlyGovernance{\\n        doHardWorkInner();\\n        vault.strategyUpdate(this.investedUnderlyingBalance(),apy());\\n        lastDoHardworkTimestamp = block.timestamp;\\n    }\\n\\n    function doHardWorkInner() internal virtual;\\n\\n    function calculateProfitRate(uint256 previousInvestedAssets,int assetsDelta) internal {\\n        if (assetsDelta < 0)return;\\n        uint256 secondDelta = block.timestamp - lastDoHardworkTimestamp;\\n        if (secondDelta > 10 && assetsDelta != 0){\\n            effectiveTime += secondDelta;\\n            uint256 dailyProfitRate = uint256(assetsDelta>0?assetsDelta:-assetsDelta) * BASIS_PRECISION / previousInvestedAssets;\\n            if (assetsDelta > 0){\\n                basisProfitRate = (BASIS_PRECISION + dailyProfitRate) * basisProfitRate / BASIS_PRECISION;\\n            } else {\\n                basisProfitRate = (BASIS_PRECISION - dailyProfitRate) * basisProfitRate / BASIS_PRECISION;\\n            }\\n\\n        }\\n    }\\n\\n    /**\\n     * 策略迁移\\n     **/\\n    function migrate(address _newStrategy) external virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/enums/ProtocolEnum.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nenum ProtocolEnum {\\n    Yearn,\\n    Harvest,\\n    Dodo,\\n    Curve,\\n    Pickle,\\n    Liquity,\\n    TrueFi\\n}\"\r\n    },\r\n    \"contracts/external/harvest/HarvestVault.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface HarvestVault {\\n    function deposit(uint256) external;\\n\\n    function withdraw(uint256) external;\\n\\n    function withdrawAll() external;\\n\\n    function doHardWork() external;\\n\\n    function underlyingBalanceWithInvestment() view external returns (uint256);\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n//    function pricePerShare() external view returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function balance() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/external/harvest/HarvestStakePool.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\ninterface HarvestStakePool {\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function getReward() external;\\n\\n    function stake(uint256 amount) external;\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function exit() external;\\n}\\n\"\r\n    },\r\n    \"contracts/external/chainlink/EthPriceFeed.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\\";\\n\\nabstract contract EthPriceFeed {\\n\\n    //https://docs.chain.link/docs/ethereum-addresses/\\n    function getExchangePrice(address pairProxyAddress) public view returns (int) {\\n        (uint80 roundID,int price,uint startedAt,uint timeStamp,uint80 answeredInRound) = AggregatorV3Interface(pairProxyAddress).latestRoundData();\\n        return price;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/uniswap/IUniswapV2.sol\": {\r\n      \"content\": \"pragma solidity =0.8.0;\\n\\ninterface IUniswapV2 {\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"contracts/external/uniswap/IUniswapV3.sol\": {\r\n      \"content\": \"pragma solidity =0.8.0;\\n\\ninterface IUniswapV3 {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"contracts/external/curve/ICurveFi.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.17 <0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface ICurveFi {\\n    /**\\n     * 返回一个lpToken对应的价值\\n     * return：一个lpToken的价值，单位是DAI，精度为1e18\\n     **/\\n    function get_virtual_price() external view returns (uint256);\\n\\n    /**\\n     * 增加流动性接口\\n     * amounts：是一个数组，代表要投入的币种组合，amounts[0]是EURS的数量，amounts[1]是SEUR的数量\\n     * min_mint_amount：最小铸币数量，期望得到的最小lpToken数量\\n     * return：返回投资凭证数\\n     **/\\n    function add_liquidity(\\n        // EURs\\n        uint256[2] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external;\\n\\n    function add_liquidity(\\n        // sBTC pool\\n        uint256[3] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external;\\n\\n    /**\\n     * 移除流动性接口,提款金额基于活期存款比率\\n     * _amount：需要提取的lpToken数量\\n     * min_amounts：期望返回的最小代币数，min_amounts[0]是EURS的数量，min_amounts[1]是SEUR的数量\\n     * return：实际返回的代币数量\\n     **/\\n    function remove_liquidity(uint256 _amount, uint256[2] calldata min_amounts) external returns (uint256[2] memory);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n\\n    function exchange(\\n        int128 from, //源币索引\\n        int128 to, //目标币索引\\n        uint256 _from_amount, //源币数量\\n        uint256 _min_to_amount //期望的最少目标币数量\\n    ) external;\\n\\n    /**\\n     * 余额查询\\n     * index：0-EURS,1-SEUR\\n     * return：余额\\n     **/\\n    function balances(uint256) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/dex/uniswap/SwapFarm2EursInUniswapV2.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.17 <=0.8.0;\\n\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport './SwapInUniswapV2.sol';\\n\\ninterface ISwapFarm2EursInUniswapV2 {\\n    function swapFarm2UsdtInUniswapV2(\\n        uint256 _amount,\\n        uint256 _minReturn,\\n        uint256 _timeout\\n    ) external returns (uint256[] memory);\\n}\\n\\ncontract SwapFarm2EursInUniswapV2 is SwapInUniswapV2 {\\n    address private FARM_ADDRESS = address(0xa0246c9032bC3A600820415aE600c6388619A14D);\\n    address private WETH_ADDRESS = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    address private EURS_ADDRESS = address(0xdB25f211AB05b1c97D595516F45794528a807ad8);\\n\\n    /**\\n     * farm => eurs\\n     */\\n    function swapFarm2EursInUniswapV2(\\n        uint256 _amount,\\n        uint256 _minReturn,\\n        uint256 _timeout\\n    ) internal returns (uint256[] memory) {\\n        require(_amount > 0, '_amount>0');\\n        require(_amount > 10**15, '_amount>10**15, small amount');\\n        require(_minReturn >= 0, '_minReturn>=0');\\n        address[] memory _path = new address[](3);\\n        _path[0] = FARM_ADDRESS;\\n        _path[1] = WETH_ADDRESS;\\n        _path[2] = EURS_ADDRESS;\\n        return this.swap(FARM_ADDRESS, _amount, _minReturn, _path, address(this), _timeout);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/IStrategy.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.17 <0.8.4;\\n\\ninterface IStrategy {\\n\\n//    function underlying() external view returns (address);\\n    function vault() external view returns (address);\\n\\n    function name() external pure returns (string calldata);\\n\\n    /**\\n    * 第三方池需要的代币地址列表\\n    **/\\n    function getTokens() external view returns (address[] memory);\\n\\n    function apy() external view returns (uint256);\\n\\n    /**\\n    * 计算基础币与其它币种的数量关系\\n    * 如该池是CrvEURS池，underlying是USDT数量，返回的则是 EURS、SEUR的数量\\n    **/\\n    function calculate(uint256 amountUnderlying) external view returns (uint256[] memory);\\n\\n    function withdrawAllToVault() external;\\n\\n    /**\\n    * amountUnderlying:需要的基础代币数量\\n    **/\\n    function withdrawToVault(uint256 amountUnderlying) external;\\n\\n\\n    /**\\n    * 第三方池的净值\\n    **/\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    /**\\n    * 已经投资的underlying数量，策略实际投入的是不同的稳定币，这里涉及待投稳定币与underlying之间的换算\\n    **/\\n    function investedUnderlyingBalance() external view returns (uint256);\\n\\n    /**\\n    * 查看策略投资池子的总数量（priced in want）\\n    **/\\n    function getInvestVaultAssets() external view returns (uint256);\\n\\n\\n    /**\\n    * 针对策略的作业：\\n    * 1.提矿 & 换币（矿币换成策略所需的稳定币？）\\n    * 2.计算apy\\n    * 3.投资\\n    **/\\n    function doHardWork() external;\\n\\n    /**\\n    * 策略迁移\\n    **/\\n    function migrate(address _newStrategy) external virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/vault/IVault.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.17 <0.8.4;\\n\\ninterface IVault {\\n    function name() external view returns (string calldata);\\n\\n    function symbol() external view returns (string calldata);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function governance() external view returns (address);\\n\\n    /**\\n     * USDT地址\\n     **/\\n    function underlying() external view returns (address);\\n\\n    /**\\n     * Vault净值\\n     **/\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    /**\\n     * 总锁仓量\\n     **/\\n    function tlv() external view returns (uint256);\\n\\n    function deposit(uint256 amountWei) external;\\n\\n    function withdraw(uint256 numberOfShares) external;\\n\\n    function addStrategy(address _strategy) external;\\n\\n    function removeStrategy(address _strategy) external;\\n\\n    function strategyUpdate(uint256 newTotalAssets, uint256 apy) external;\\n\\n    /**\\n     * 策略列表\\n     **/\\n    function strategies() external view returns (address[] memory);\\n\\n    /**\\n     * 分两种情况：\\n     * 不足一周时，维持Vault中USDT数量占总资金的5%，多余的投入到apy高的策略中，不足时从低apy策略中赎回份额来补够\\n     * 到达一周时，统计各策略apy，按照资金配比规则进行调仓（统计各策略需要的稳定币数量，在Vault中汇总后再分配）\\n     **/\\n    function doHardWork() external;\\n\\n    struct StrategyState {\\n        uint256 totalAssets; //当前总资产\\n        uint256 totalDebt; //投入未返还成本\\n    }\\n\\n    function strategyState(address strategyAddress) external view returns (StrategyState memory);\\n\\n    /**\\n     * 获取总成本\\n     */\\n    function totalCapital() external view returns (uint256);\\n\\n    /**\\n     * 获取总估值\\n     */\\n    function totalAssets() external view returns (uint256);\\n\\n    /**\\n     * 获取策略投资总额\\n     */\\n    function strategyTotalAssetsValue() external view returns (uint256);\\n\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\"\r\n    },\r\n    \"contracts/dex/uniswap/SwapInUniswapV2.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.17 <=0.8.0;\\n\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport './../../external/uniswap/IUniswapV2.sol';\\n\\ncontract SwapInUniswapV2 {\\n    using SafeERC20 for IERC20;\\n    address private uniswapV2Address = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    function swap(\\n        address fromToken,\\n        uint256 _amount,\\n        uint256 _minReturn,\\n        address[] memory _path,\\n        address recipient,\\n        uint256 _timeout\\n    ) public returns (uint256[] memory) {\\n        require(_amount > 0, '_amount>0');\\n        require(_minReturn >= 0, '_minReturn>=0');\\n        IERC20(fromToken).safeApprove(uniswapV2Address, 0);\\n        IERC20(fromToken).safeApprove(uniswapV2Address, _amount);\\n\\n       try IUniswapV2(uniswapV2Address).swapExactTokensForTokens(\\n            _amount,\\n            _minReturn,\\n            _path,\\n            recipient,\\n            block.timestamp + _timeout\\n        ) returns (uint256[] memory amounts){\\n           return amounts;\\n       }catch{\\n\\n       }\\n        uint256[] memory amounts = new uint256[](2);\\n        amounts[0] = 0;\\n        amounts[1] = 0;\\n        return amounts;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EUR_USD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"}],\"name\":\"calculate\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doHardWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInvestVaultAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerFullShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investedUnderlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDoHardworkTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nextBasisProfitRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextEffectiveTime\",\"type\":\"uint256\"}],\"name\":\"setApy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountUnderlying\",\"type\":\"uint256\"}],\"name\":\"withdrawToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HarvestCrvEursStrategy","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"000000000000000000000000f2eb7c004c7178bd9a820b5fc05460677d3f22fd","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}