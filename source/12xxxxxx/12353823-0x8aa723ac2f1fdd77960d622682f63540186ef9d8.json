{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/InflateLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IInflateLib.sol\\\";\\n\\n// Source: https://github.com/adlerjohn/inflate-sol\\n\\n/// @notice Based on https://github.com/madler/zlib/blob/master/contrib/puff\\nlibrary InflateLib {\\n    // Maximum bits in a code\\n    uint256 constant MAXBITS = 15;\\n    // Maximum number of literal/length codes\\n    uint256 constant MAXLCODES = 286;\\n    // Maximum number of distance codes\\n    uint256 constant MAXDCODES = 30;\\n    // Maximum codes lengths to read\\n    uint256 constant MAXCODES = (MAXLCODES + MAXDCODES);\\n    // Number of fixed literal/length codes\\n    uint256 constant FIXLCODES = 288;\\n\\n    // Input and output state\\n    struct State {\\n        //////////////////\\n        // Output state //\\n        //////////////////\\n        // Output buffer\\n        bytes output;\\n        // Bytes written to out so far\\n        uint256 outcnt;\\n        /////////////////\\n        // Input state //\\n        /////////////////\\n        // Input buffer\\n        bytes input;\\n        // Bytes read so far\\n        uint256 incnt;\\n        ////////////////\\n        // Temp state //\\n        ////////////////\\n        // Bit buffer\\n        uint256 bitbuf;\\n        // Number of bits in bit buffer\\n        uint256 bitcnt;\\n        //////////////////////////\\n        // Static Huffman codes //\\n        //////////////////////////\\n        Huffman lencode;\\n        Huffman distcode;\\n    }\\n\\n    // Huffman code decoding tables\\n    struct Huffman {\\n        uint256[] counts;\\n        uint256[] symbols;\\n    }\\n\\n    function bits(State memory s, uint256 need)\\n        private\\n        pure\\n        returns (IInflateLib.ErrorCode, uint256)\\n    {\\n        // Bit accumulator (can use up to 20 bits)\\n        uint256 val;\\n\\n        // Load at least need bits into val\\n        val = s.bitbuf;\\n        while (s.bitcnt < need) {\\n            if (s.incnt == s.input.length) {\\n                // Out of input\\n                return (IInflateLib.ErrorCode.ERR_NOT_TERMINATED, 0);\\n            }\\n\\n            // Load eight bits\\n            val |= uint256(uint8(s.input[s.incnt++])) << s.bitcnt;\\n            s.bitcnt += 8;\\n        }\\n\\n        // Drop need bits and update buffer, always zero to seven bits left\\n        s.bitbuf = val >> need;\\n        s.bitcnt -= need;\\n\\n        // Return need bits, zeroing the bits above that\\n        uint256 ret = (val & ((1 << need) - 1));\\n        return (IInflateLib.ErrorCode.ERR_NONE, ret);\\n    }\\n\\n    function _stored(State memory s) private pure returns (IInflateLib.ErrorCode) {\\n        // Length of stored block\\n        uint256 len;\\n\\n        // Discard leftover bits from current byte (assumes s.bitcnt < 8)\\n        s.bitbuf = 0;\\n        s.bitcnt = 0;\\n\\n        // Get length and check against its one's complement\\n        if (s.incnt + 4 > s.input.length) {\\n            // Not enough input\\n            return IInflateLib.ErrorCode.ERR_NOT_TERMINATED;\\n        }\\n        len = uint256(uint8(s.input[s.incnt++]));\\n        len |= uint256(uint8(s.input[s.incnt++])) << 8;\\n\\n        if (\\n            uint8(s.input[s.incnt++]) != (~len & 0xFF) ||\\n            uint8(s.input[s.incnt++]) != ((~len >> 8) & 0xFF)\\n        ) {\\n            // Didn't match complement!\\n            return IInflateLib.ErrorCode.ERR_STORED_LENGTH_NO_MATCH;\\n        }\\n\\n        // Copy len bytes from in to out\\n        if (s.incnt + len > s.input.length) {\\n            // Not enough input\\n            return IInflateLib.ErrorCode.ERR_NOT_TERMINATED;\\n        }\\n        if (s.outcnt + len > s.output.length) {\\n            // Not enough output space\\n            return IInflateLib.ErrorCode.ERR_OUTPUT_EXHAUSTED;\\n        }\\n        while (len != 0) {\\n            // Note: Solidity reverts on underflow, so we decrement here\\n            len -= 1;\\n            s.output[s.outcnt++] = s.input[s.incnt++];\\n        }\\n\\n        // Done with a valid stored block\\n        return IInflateLib.ErrorCode.ERR_NONE;\\n    }\\n\\n    function _decode(State memory s, Huffman memory h)\\n        private\\n        pure\\n        returns (IInflateLib.ErrorCode, uint256)\\n    {\\n        // Current number of bits in code\\n        uint256 len;\\n        // Len bits being decoded\\n        uint256 code = 0;\\n        // First code of length len\\n        uint256 first = 0;\\n        // Number of codes of length len\\n        uint256 count;\\n        // Index of first code of length len in symbol table\\n        uint256 index = 0;\\n        // Error code\\n        IInflateLib.ErrorCode err;\\n\\n        for (len = 1; len <= MAXBITS; len++) {\\n            // Get next bit\\n            uint256 tempCode;\\n            (err, tempCode) = bits(s, 1);\\n            if (err != IInflateLib.ErrorCode.ERR_NONE) {\\n                return (err, 0);\\n            }\\n            code |= tempCode;\\n            count = h.counts[len];\\n\\n            // If length len, return symbol\\n            if (code < first + count) {\\n                return (IInflateLib.ErrorCode.ERR_NONE, h.symbols[index + (code - first)]);\\n            }\\n            // Else update for next length\\n            index += count;\\n            first += count;\\n            first <<= 1;\\n            code <<= 1;\\n        }\\n\\n        // Ran out of codes\\n        return (IInflateLib.ErrorCode.ERR_INVALID_LENGTH_OR_DISTANCE_CODE, 0);\\n    }\\n\\n    function _construct(\\n        Huffman memory h,\\n        uint256[] memory lengths,\\n        uint256 n,\\n        uint256 start\\n    ) private pure returns (IInflateLib.ErrorCode) {\\n        // Current symbol when stepping through lengths[]\\n        uint256 symbol;\\n        // Current length when stepping through h.counts[]\\n        uint256 len;\\n        // Number of possible codes left of current length\\n        uint256 left;\\n        // Offsets in symbol table for each length\\n        uint256[MAXBITS + 1] memory offs;\\n\\n        // Count number of codes of each length\\n        for (len = 0; len <= MAXBITS; len++) {\\n            h.counts[len] = 0;\\n        }\\n        for (symbol = 0; symbol < n; symbol++) {\\n            // Assumes lengths are within bounds\\n            h.counts[lengths[start + symbol]]++;\\n        }\\n        // No codes!\\n        if (h.counts[0] == n) {\\n            // Complete, but decode() will fail\\n            return (IInflateLib.ErrorCode.ERR_NONE);\\n        }\\n\\n        // Check for an over-subscribed or incomplete set of lengths\\n\\n        // One possible code of zero length\\n        left = 1;\\n\\n        for (len = 1; len <= MAXBITS; len++) {\\n            // One more bit, double codes left\\n            left <<= 1;\\n            if (left < h.counts[len]) {\\n                // Over-subscribed--return error\\n                return IInflateLib.ErrorCode.ERR_CONSTRUCT;\\n            }\\n            // Deduct count from possible codes\\n\\n            left -= h.counts[len];\\n        }\\n\\n        // Generate offsets into symbol table for each length for sorting\\n        offs[1] = 0;\\n        for (len = 1; len < MAXBITS; len++) {\\n            offs[len + 1] = offs[len] + h.counts[len];\\n        }\\n\\n        // Put symbols in table sorted by length, by symbol order within each length\\n        for (symbol = 0; symbol < n; symbol++) {\\n            if (lengths[start + symbol] != 0) {\\n                h.symbols[offs[lengths[start + symbol]]++] = symbol;\\n            }\\n        }\\n\\n        // Left > 0 means incomplete\\n        return left > 0 ? IInflateLib.ErrorCode.ERR_CONSTRUCT : IInflateLib.ErrorCode.ERR_NONE;\\n    }\\n\\n    function _codes(\\n        State memory s,\\n        Huffman memory lencode,\\n        Huffman memory distcode\\n    ) private pure returns (IInflateLib.ErrorCode) {\\n        // Decoded symbol\\n        uint256 symbol;\\n        // Length for copy\\n        uint256 len;\\n        // Distance for copy\\n        uint256 dist;\\n        // TODO Solidity doesn't support constant arrays, but these are fixed at compile-time\\n        // Size base for length codes 257..285\\n        uint16[29] memory lens =\\n            [\\n                3,\\n                4,\\n                5,\\n                6,\\n                7,\\n                8,\\n                9,\\n                10,\\n                11,\\n                13,\\n                15,\\n                17,\\n                19,\\n                23,\\n                27,\\n                31,\\n                35,\\n                43,\\n                51,\\n                59,\\n                67,\\n                83,\\n                99,\\n                115,\\n                131,\\n                163,\\n                195,\\n                227,\\n                258\\n            ];\\n        // Extra bits for length codes 257..285\\n        uint8[29] memory lext =\\n            [\\n                0,\\n                0,\\n                0,\\n                0,\\n                0,\\n                0,\\n                0,\\n                0,\\n                1,\\n                1,\\n                1,\\n                1,\\n                2,\\n                2,\\n                2,\\n                2,\\n                3,\\n                3,\\n                3,\\n                3,\\n                4,\\n                4,\\n                4,\\n                4,\\n                5,\\n                5,\\n                5,\\n                5,\\n                0\\n            ];\\n        // Offset base for distance codes 0..29\\n        uint16[30] memory dists =\\n            [\\n                1,\\n                2,\\n                3,\\n                4,\\n                5,\\n                7,\\n                9,\\n                13,\\n                17,\\n                25,\\n                33,\\n                49,\\n                65,\\n                97,\\n                129,\\n                193,\\n                257,\\n                385,\\n                513,\\n                769,\\n                1025,\\n                1537,\\n                2049,\\n                3073,\\n                4097,\\n                6145,\\n                8193,\\n                12289,\\n                16385,\\n                24577\\n            ];\\n        // Extra bits for distance codes 0..29\\n        uint8[30] memory dext =\\n            [\\n                0,\\n                0,\\n                0,\\n                0,\\n                1,\\n                1,\\n                2,\\n                2,\\n                3,\\n                3,\\n                4,\\n                4,\\n                5,\\n                5,\\n                6,\\n                6,\\n                7,\\n                7,\\n                8,\\n                8,\\n                9,\\n                9,\\n                10,\\n                10,\\n                11,\\n                11,\\n                12,\\n                12,\\n                13,\\n                13\\n            ];\\n        // Error code\\n        IInflateLib.ErrorCode err;\\n\\n        // Decode literals and length/distance pairs\\n        while (symbol != 256) {\\n            (err, symbol) = _decode(s, lencode);\\n            if (err != IInflateLib.ErrorCode.ERR_NONE) {\\n                // Invalid symbol\\n                return err;\\n            }\\n\\n            if (symbol < 256) {\\n                // Literal: symbol is the byte\\n                // Write out the literal\\n                if (s.outcnt == s.output.length) {\\n                    return IInflateLib.ErrorCode.ERR_OUTPUT_EXHAUSTED;\\n                }\\n                s.output[s.outcnt] = bytes1(uint8(symbol));\\n                s.outcnt++;\\n            } else if (symbol > 256) {\\n                uint256 tempBits;\\n                // Length\\n                // Get and compute length\\n                symbol -= 257;\\n                if (symbol >= 29) {\\n                    // Invalid fixed code\\n                    return IInflateLib.ErrorCode.ERR_INVALID_LENGTH_OR_DISTANCE_CODE;\\n                }\\n\\n                (err, tempBits) = bits(s, lext[symbol]);\\n                if (err != IInflateLib.ErrorCode.ERR_NONE) {\\n                    return err;\\n                }\\n                len = lens[symbol] + tempBits;\\n\\n                // Get and check distance\\n                (err, symbol) = _decode(s, distcode);\\n                if (err != IInflateLib.ErrorCode.ERR_NONE) {\\n                    // Invalid symbol\\n                    return err;\\n                }\\n                (err, tempBits) = bits(s, dext[symbol]);\\n                if (err != IInflateLib.ErrorCode.ERR_NONE) {\\n                    return err;\\n                }\\n                dist = dists[symbol] + tempBits;\\n                if (dist > s.outcnt) {\\n                    // Distance too far back\\n                    return IInflateLib.ErrorCode.ERR_DISTANCE_TOO_FAR;\\n                }\\n\\n                // Copy length bytes from distance bytes back\\n                if (s.outcnt + len > s.output.length) {\\n                    return IInflateLib.ErrorCode.ERR_OUTPUT_EXHAUSTED;\\n                }\\n                while (len != 0) {\\n                    // Note: Solidity reverts on underflow, so we decrement here\\n                    len -= 1;\\n                    s.output[s.outcnt] = s.output[s.outcnt - dist];\\n                    s.outcnt++;\\n                }\\n            } else {\\n                s.outcnt += len;\\n            }\\n        }\\n\\n        // Done with a valid fixed or dynamic block\\n        return IInflateLib.ErrorCode.ERR_NONE;\\n    }\\n\\n    function _build_fixed(State memory s) private pure returns (IInflateLib.ErrorCode) {\\n        // Build fixed Huffman tables\\n        // TODO this is all a compile-time constant\\n        uint256 symbol;\\n        uint256[] memory lengths = new uint256[](FIXLCODES);\\n\\n        // Literal/length table\\n        for (symbol = 0; symbol < 144; symbol++) {\\n            lengths[symbol] = 8;\\n        }\\n        for (; symbol < 256; symbol++) {\\n            lengths[symbol] = 9;\\n        }\\n        for (; symbol < 280; symbol++) {\\n            lengths[symbol] = 7;\\n        }\\n        for (; symbol < FIXLCODES; symbol++) {\\n            lengths[symbol] = 8;\\n        }\\n\\n        _construct(s.lencode, lengths, FIXLCODES, 0);\\n\\n        // Distance table\\n        for (symbol = 0; symbol < MAXDCODES; symbol++) {\\n            lengths[symbol] = 5;\\n        }\\n\\n        _construct(s.distcode, lengths, MAXDCODES, 0);\\n\\n        return IInflateLib.ErrorCode.ERR_NONE;\\n    }\\n\\n    function _fixed(State memory s) private pure returns (IInflateLib.ErrorCode) {\\n        // Decode data until end-of-block code\\n        return _codes(s, s.lencode, s.distcode);\\n    }\\n\\n    function _build_dynamic_lengths(State memory s)\\n        private\\n        pure\\n        returns (IInflateLib.ErrorCode, uint256[] memory)\\n    {\\n        uint256 ncode;\\n        // Index of lengths[]\\n        uint256 index;\\n        // Descriptor code lengths\\n        uint256[] memory lengths = new uint256[](MAXCODES);\\n        // Error code\\n        IInflateLib.ErrorCode err;\\n        // Permutation of code length codes\\n        uint8[19] memory order =\\n            [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\\n\\n        (err, ncode) = bits(s, 4);\\n        if (err != IInflateLib.ErrorCode.ERR_NONE) {\\n            return (err, lengths);\\n        }\\n        ncode += 4;\\n\\n        // Read code length code lengths (really), missing lengths are zero\\n        for (index = 0; index < ncode; index++) {\\n            (err, lengths[order[index]]) = bits(s, 3);\\n            if (err != IInflateLib.ErrorCode.ERR_NONE) {\\n                return (err, lengths);\\n            }\\n        }\\n        for (; index < 19; index++) {\\n            lengths[order[index]] = 0;\\n        }\\n\\n        return (IInflateLib.ErrorCode.ERR_NONE, lengths);\\n    }\\n\\n    function _build_dynamic(State memory s)\\n        private\\n        pure\\n        returns (\\n            IInflateLib.ErrorCode,\\n            Huffman memory,\\n            Huffman memory\\n        )\\n    {\\n        // Number of lengths in descriptor\\n        uint256 nlen;\\n        uint256 ndist;\\n        // Index of lengths[]\\n        uint256 index;\\n        // Error code\\n        IInflateLib.ErrorCode err;\\n        // Descriptor code lengths\\n        uint256[] memory lengths = new uint256[](MAXCODES);\\n        // Length and distance codes\\n        Huffman memory lencode =\\n            Huffman(new uint256[](MAXBITS + 1), new uint256[](MAXLCODES));\\n        Huffman memory distcode =\\n            Huffman(new uint256[](MAXBITS + 1), new uint256[](MAXDCODES));\\n        uint256 tempBits;\\n\\n        // Get number of lengths in each table, check lengths\\n        (err, nlen) = bits(s, 5);\\n        if (err != IInflateLib.ErrorCode.ERR_NONE) {\\n            return (err, lencode, distcode);\\n        }\\n        nlen += 257;\\n        (err, ndist) = bits(s, 5);\\n        if (err != IInflateLib.ErrorCode.ERR_NONE) {\\n            return (err, lencode, distcode);\\n        }\\n        ndist += 1;\\n\\n        if (nlen > MAXLCODES || ndist > MAXDCODES) {\\n            // Bad counts\\n            return (\\n                IInflateLib.ErrorCode.ERR_TOO_MANY_LENGTH_OR_DISTANCE_CODES,\\n                lencode,\\n                distcode\\n            );\\n        }\\n\\n        (err, lengths) = _build_dynamic_lengths(s);\\n        if (err != IInflateLib.ErrorCode.ERR_NONE) {\\n            return (err, lencode, distcode);\\n        }\\n\\n        // Build huffman table for code lengths codes (use lencode temporarily)\\n        err = _construct(lencode, lengths, 19, 0);\\n        if (err != IInflateLib.ErrorCode.ERR_NONE) {\\n            // Require complete code set here\\n            return (\\n                IInflateLib.ErrorCode.ERR_CODE_LENGTHS_CODES_INCOMPLETE,\\n                lencode,\\n                distcode\\n            );\\n        }\\n\\n        // Read length/literal and distance code length tables\\n        index = 0;\\n        while (index < nlen + ndist) {\\n            // Decoded value\\n            uint256 symbol;\\n            // Last length to repeat\\n            uint256 len;\\n\\n            (err, symbol) = _decode(s, lencode);\\n            if (err != IInflateLib.ErrorCode.ERR_NONE) {\\n                // Invalid symbol\\n                return (err, lencode, distcode);\\n            }\\n\\n            if (symbol < 16) {\\n                // Length in 0..15\\n                lengths[index++] = symbol;\\n            } else {\\n                // Repeat instruction\\n                // Assume repeating zeros\\n                len = 0;\\n                if (symbol == 16) {\\n                    // Repeat last length 3..6 times\\n                    if (index == 0) {\\n                        // No last length!\\n                        return (\\n                            IInflateLib.ErrorCode.ERR_REPEAT_NO_FIRST_LENGTH,\\n                            lencode,\\n                            distcode\\n                        );\\n                    }\\n                    // Last length\\n                    len = lengths[index - 1];\\n                    (err, tempBits) = bits(s, 2);\\n                    if (err != IInflateLib.ErrorCode.ERR_NONE) {\\n                        return (err, lencode, distcode);\\n                    }\\n                    symbol = 3 + tempBits;\\n                } else if (symbol == 17) {\\n                    // Repeat zero 3..10 times\\n                    (err, tempBits) = bits(s, 3);\\n                    if (err != IInflateLib.ErrorCode.ERR_NONE) {\\n                        return (err, lencode, distcode);\\n                    }\\n                    symbol = 3 + tempBits;\\n                } else {\\n                    // == 18, repeat zero 11..138 times\\n                    (err, tempBits) = bits(s, 7);\\n                    if (err != IInflateLib.ErrorCode.ERR_NONE) {\\n                        return (err, lencode, distcode);\\n                    }\\n                    symbol = 11 + tempBits;\\n                }\\n\\n                if (index + symbol > nlen + ndist) {\\n                    // Too many lengths!\\n                    return (IInflateLib.ErrorCode.ERR_REPEAT_MORE, lencode, distcode);\\n                }\\n                while (symbol != 0) {\\n                    // Note: Solidity reverts on underflow, so we decrement here\\n                    symbol -= 1;\\n\\n                    // Repeat last or zero symbol times\\n                    lengths[index++] = len;\\n                }\\n            }\\n        }\\n\\n        // Check for end-of-block code -- there better be one!\\n        if (lengths[256] == 0) {\\n            return (IInflateLib.ErrorCode.ERR_MISSING_END_OF_BLOCK, lencode, distcode);\\n        }\\n\\n        // Build huffman table for literal/length codes\\n        err = _construct(lencode, lengths, nlen, 0);\\n        if (\\n            err != IInflateLib.ErrorCode.ERR_NONE &&\\n            (err == IInflateLib.ErrorCode.ERR_NOT_TERMINATED ||\\n                err == IInflateLib.ErrorCode.ERR_OUTPUT_EXHAUSTED ||\\n                nlen != lencode.counts[0] + lencode.counts[1])\\n        ) {\\n            // Incomplete code ok only for single length 1 code\\n            return (\\n                IInflateLib.ErrorCode.ERR_INVALID_LITERAL_LENGTH_CODE_LENGTHS,\\n                lencode,\\n                distcode\\n            );\\n        }\\n\\n        // Build huffman table for distance codes\\n        err = _construct(distcode, lengths, ndist, nlen);\\n        if (\\n            err != IInflateLib.ErrorCode.ERR_NONE &&\\n            (err == IInflateLib.ErrorCode.ERR_NOT_TERMINATED ||\\n                err == IInflateLib.ErrorCode.ERR_OUTPUT_EXHAUSTED ||\\n                ndist != distcode.counts[0] + distcode.counts[1])\\n        ) {\\n            // Incomplete code ok only for single length 1 code\\n            return (\\n                IInflateLib.ErrorCode.ERR_INVALID_DISTANCE_CODE_LENGTHS,\\n                lencode,\\n                distcode\\n            );\\n        }\\n\\n        return (IInflateLib.ErrorCode.ERR_NONE, lencode, distcode);\\n    }\\n\\n    function _dynamic(State memory s) private pure returns (IInflateLib.ErrorCode) {\\n        // Length and distance codes\\n        Huffman memory lencode;\\n        Huffman memory distcode;\\n        // Error code\\n        IInflateLib.ErrorCode err;\\n\\n        (err, lencode, distcode) = _build_dynamic(s);\\n        if (err != IInflateLib.ErrorCode.ERR_NONE) {\\n            return err;\\n        }\\n\\n        // Decode data until end-of-block code\\n        return _codes(s, lencode, distcode);\\n    }\\n\\n    function puffFromOffset(bytes calldata source, uint256 destlen, uint256 offset)\\n        public\\n        pure\\n        returns (IInflateLib.ErrorCode, bytes memory)\\n    {\\n        // Input/output state\\n        State memory s =\\n            State(\\n                new bytes(destlen),\\n                0,\\n                source,\\n                offset,\\n                0,\\n                0,\\n                Huffman(new uint256[](MAXBITS + 1), new uint256[](FIXLCODES)),\\n                Huffman(new uint256[](MAXBITS + 1), new uint256[](MAXDCODES))\\n            );\\n        // Temp: last bit\\n        uint256 last;\\n        // Temp: block type bit\\n        uint256 t;\\n        // Error code\\n        IInflateLib.ErrorCode err;\\n\\n        // Build fixed Huffman tables\\n        err = _build_fixed(s);\\n        if (err != IInflateLib.ErrorCode.ERR_NONE) {\\n            return (err, s.output);\\n        }\\n\\n        // Process blocks until last block or error\\n        while (last == 0) {\\n            // One if last block\\n            (err, last) = bits(s, 1);\\n            if (err != IInflateLib.ErrorCode.ERR_NONE) {\\n                return (err, s.output);\\n            }\\n\\n            // Block type 0..3\\n            (err, t) = bits(s, 2);\\n            if (err != IInflateLib.ErrorCode.ERR_NONE) {\\n                return (err, s.output);\\n            }\\n\\n            err = (\\n                t == 0\\n                    ? _stored(s)\\n                    : (\\n                        t == 1\\n                            ? _fixed(s)\\n                            : (\\n                                t == 2\\n                                    ? _dynamic(s)\\n                                    : IInflateLib.ErrorCode.ERR_INVALID_BLOCK_TYPE\\n                            )\\n                    )\\n            );\\n            // type == 3, invalid\\n\\n            if (err != IInflateLib.ErrorCode.ERR_NONE) {\\n                // Return with error\\n                break;\\n            }\\n        }\\n\\n        return (err, s.output);\\n    }\\n\\n    function puff(bytes calldata source, uint256 destlen)\\n        external\\n        pure\\n        returns (IInflateLib.ErrorCode, bytes memory)\\n    {\\n        return puffFromOffset(source, destlen, 0);\\n    }\\n\\n    /*\\n     * @dev Smart decode routine expects either of this as input:\\n     * - Option 1: Uncompressed UTF-8 text (or actually any raw binary data that does not satisfy the magic header of option 2)\\n     * - Option 2: Deflated data structured as follows:\\n     *               Byte 0 = 0x1f\\n     *               Byte 1 = 0x8b\\n     *               Bytes 2-4 = size in bytes of uncompressed data\\n     *               Bytes 5-... = raw deflated data\\n     */\\n    function smartDecode(bytes calldata source)\\n        external \\n        pure\\n        returns (IInflateLib.ErrorCode, bytes memory) {\\n            if((source[0] == 0x1f) && (source[1] == 0x8b)) {\\n                // Option 2\\n\\n                // Deflate starting from byte 5, with uncompressed data size from bytes 2 to 4\\n                return puffFromOffset(source, uint256(uint8(source[2])) << 16 | uint256(uint8(source[3])) << 8 | uint256(uint8(source[4])), 5);\\n\\n            } else {\\n                //Option 1\\n\\n                // Return the source unchanged\\n                return (IInflateLib.ErrorCode.ERR_NONE, source);\\n            }\\n        }\\n\\n\\n}\"\r\n    },\r\n    \"contracts/IInflateLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ninterface IInflateLib {\\n\\n    // Error codes\\n    enum ErrorCode {\\n        ERR_NONE, // 0 successful inflate\\n        ERR_NOT_TERMINATED, // 1 available inflate data did not terminate\\n        ERR_OUTPUT_EXHAUSTED, // 2 output space exhausted before completing inflate\\n        ERR_INVALID_BLOCK_TYPE, // 3 invalid block type (type == 3)\\n        ERR_STORED_LENGTH_NO_MATCH, // 4 stored block length did not match one's complement\\n        ERR_TOO_MANY_LENGTH_OR_DISTANCE_CODES, // 5 dynamic block code description: too many length or distance codes\\n        ERR_CODE_LENGTHS_CODES_INCOMPLETE, // 6 dynamic block code description: code lengths codes incomplete\\n        ERR_REPEAT_NO_FIRST_LENGTH, // 7 dynamic block code description: repeat lengths with no first length\\n        ERR_REPEAT_MORE, // 8 dynamic block code description: repeat more than specified lengths\\n        ERR_INVALID_LITERAL_LENGTH_CODE_LENGTHS, // 9 dynamic block code description: invalid literal/length code lengths\\n        ERR_INVALID_DISTANCE_CODE_LENGTHS, // 10 dynamic block code description: invalid distance code lengths\\n        ERR_MISSING_END_OF_BLOCK, // 11 dynamic block code description: missing end-of-block code\\n        ERR_INVALID_LENGTH_OR_DISTANCE_CODE, // 12 invalid literal/length or distance code in fixed or dynamic block\\n        ERR_DISTANCE_TOO_FAR, // 13 distance is too far back in fixed or dynamic block\\n        ERR_CONSTRUCT // 14 internal: error in construct()\\n    }\\n\\n    /*\\n     * @dev Deflate algorithm\\n     *\\n     * Start deflating from `offset` bytes into `source`\\n     */\\n    function puffFromOffset(bytes calldata source, uint256 destlen, uint256 offset)\\n        external\\n        pure\\n        returns (ErrorCode, bytes memory);\\n\\n    /*\\n     * @dev Deflate algorithm\\n     */\\n    function puff(bytes calldata source, uint256 destlen)\\n        external\\n        pure\\n        returns (ErrorCode, bytes memory);\\n\\n    /*\\n     * @dev Smart decode routine expects either of this as input:\\n     * - Option 1: Uncompressed UTF-8 text (or actually any raw binary data that does not satisfy the magic header of option 2)\\n     * - Option 2: Deflated data structured as follows:\\n     *               Byte 0 = 0x1f\\n     *               Byte 1 = 0x8b\\n     *               Bytes 2-4 = size in bytes of uncompressed data\\n     *               Bytes 5-... = raw deflated data\\n     */\\n    function smartDecode(bytes calldata source)\\n        external \\n        pure\\n        returns (ErrorCode, bytes memory);\\n\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"source\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"destlen\",\"type\":\"uint256\"}],\"name\":\"puff\",\"outputs\":[{\"internalType\":\"enum IInflateLib.ErrorCode\",\"name\":\"\",\"type\":\"IInflateLib.ErrorCode\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"source\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"destlen\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"puffFromOffset\",\"outputs\":[{\"internalType\":\"enum IInflateLib.ErrorCode\",\"name\":\"\",\"type\":\"IInflateLib.ErrorCode\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"source\",\"type\":\"bytes\"}],\"name\":\"smartDecode\",\"outputs\":[{\"internalType\":\"enum IInflateLib.ErrorCode\",\"name\":\"\",\"type\":\"IInflateLib.ErrorCode\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"InflateLib","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"0","Runs":"2000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}